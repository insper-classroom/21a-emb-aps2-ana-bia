
RTOS-TFT-LCD-ILI9341-lvgl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00032168  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00432168  00432168  00042168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000aa8  20400000  00432170  00050000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00039d9c  20400aa8  00432c18  00050aa8  2**2
                  ALLOC
  4 .stack        00002004  2043a844  0046c9b4  00050aa8  2**0
                  ALLOC
  5 .heap         00000200  2043c848  0046e9b8  00050aa8  2**0
                  ALLOC
  6 .ARM.attributes 0000002c  00000000  00000000  00050aa8  2**0
                  CONTENTS, READONLY
  7 .comment      000000b4  00000000  00000000  00050ad4  2**0
                  CONTENTS, READONLY
  8 .debug_info   000c6979  00000000  00000000  00050b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00010b95  00000000  00000000  00117501  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00055766  00000000  00000000  00128096  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003340  00000000  00000000  0017d7fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000061d0  00000000  00000000  00180b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000346d0  00000000  00000000  00186d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0004c62f  00000000  00000000  001bb3dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b1b90  00000000  00000000  00207a0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000a54c  00000000  00000000  002b959c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	48 c8 43 20 b5 55 42 00 b1 55 42 00 b1 55 42 00     H.C .UB..UB..UB.
  400010:	b1 55 42 00 b1 55 42 00 b1 55 42 00 00 00 00 00     .UB..UB..UB.....
	...
  40002c:	b5 18 40 00 b1 55 42 00 00 00 00 00 55 19 40 00     ..@..UB.....U.@.
  40003c:	bd 19 40 00 b1 55 42 00 b1 55 42 00 3d 61 42 00     ..@..UB..UB.=aB.
  40004c:	19 61 42 00 b1 55 42 00 b1 55 42 00 b1 55 42 00     .aB..UB..UB..UB.
  40005c:	b1 55 42 00 b1 55 42 00 00 00 00 00 3d 51 42 00     .UB..UB.....=QB.
  40006c:	51 51 42 00 65 51 42 00 b1 55 42 00 b1 55 42 00     QQB.eQB..UB..UB.
  40007c:	b1 55 42 00 79 51 42 00 8d 51 42 00 b1 55 42 00     .UB.yQB..QB..UB.
  40008c:	b1 55 42 00 b1 55 42 00 b1 55 42 00 b1 55 42 00     .UB..UB..UB..UB.
  40009c:	55 02 40 00 b1 55 42 00 b1 55 42 00 55 5f 42 00     U.@..UB..UB.U_B.
  4000ac:	b1 55 42 00 b1 55 42 00 09 17 40 00 b1 55 42 00     .UB..UB...@..UB.
  4000bc:	b1 55 42 00 b1 55 42 00 b1 55 42 00 b1 55 42 00     .UB..UB..UB..UB.
  4000cc:	b1 55 42 00 b1 55 42 00 b1 55 42 00 b1 55 42 00     .UB..UB..UB..UB.
  4000dc:	b1 55 42 00 1d 17 40 00 b1 55 42 00 b1 55 42 00     .UB...@..UB..UB.
  4000ec:	b1 55 42 00 b1 55 42 00 b1 55 42 00 b1 55 42 00     .UB..UB..UB..UB.
  4000fc:	b1 55 42 00 b1 55 42 00 b1 55 42 00 b1 55 42 00     .UB..UB..UB..UB.
  40010c:	b1 55 42 00 b1 55 42 00 00 00 00 00 00 00 00 00     .UB..UB.........
  40011c:	00 00 00 00 b1 55 42 00 b1 55 42 00 b1 55 42 00     .....UB..UB..UB.
  40012c:	b1 55 42 00 b1 55 42 00 b1 55 42 00 b1 55 42 00     .UB..UB..UB..UB.
  40013c:	b1 55 42 00 b1 55 42 00 b1 55 42 00 b1 55 42 00     .UB..UB..UB..UB.
  40014c:	b1 55 42 00 b1 55 42 00 b1 55 42 00 b1 55 42 00     .UB..UB..UB..UB.
  40015c:	b1 55 42 00 b1 55 42 00 b1 55 42 00                 .UB..UB..UB.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400aa8 	.word	0x20400aa8
  400184:	00000000 	.word	0x00000000
  400188:	00432170 	.word	0x00432170

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00432170 	.word	0x00432170
  4001c8:	20400aac 	.word	0x20400aac
  4001cc:	00432170 	.word	0x00432170
  4001d0:	00000000 	.word	0x00000000

004001d4 <vTimerEcgCallback>:
  4001d4:	b508      	push	{r3, lr}
  4001d6:	4b08      	ldr	r3, [pc, #32]	; (4001f8 <vTimerEcgCallback+0x24>)
  4001d8:	4798      	blx	r3
  4001da:	4a08      	ldr	r2, [pc, #32]	; (4001fc <vTimerEcgCallback+0x28>)
  4001dc:	fb82 3200 	smull	r3, r2, r2, r0
  4001e0:	17c3      	asrs	r3, r0, #31
  4001e2:	ebc3 1362 	rsb	r3, r3, r2, asr #5
  4001e6:	f240 122d 	movw	r2, #301	; 0x12d
  4001ea:	fb02 0313 	mls	r3, r2, r3, r0
  4001ee:	33c8      	adds	r3, #200	; 0xc8
  4001f0:	4a03      	ldr	r2, [pc, #12]	; (400200 <vTimerEcgCallback+0x2c>)
  4001f2:	6013      	str	r3, [r2, #0]
  4001f4:	bd08      	pop	{r3, pc}
  4001f6:	bf00      	nop
  4001f8:	0042801d 	.word	0x0042801d
  4001fc:	1b37484b 	.word	0x1b37484b
  400200:	2043a140 	.word	0x2043a140

00400204 <config_DAC>:
  400204:	b510      	push	{r4, lr}
  400206:	201e      	movs	r0, #30
  400208:	4b0b      	ldr	r3, [pc, #44]	; (400238 <config_DAC+0x34>)
  40020a:	4798      	blx	r3
  40020c:	4c0b      	ldr	r4, [pc, #44]	; (40023c <config_DAC+0x38>)
  40020e:	4620      	mov	r0, r4
  400210:	4b0b      	ldr	r3, [pc, #44]	; (400240 <config_DAC+0x3c>)
  400212:	4798      	blx	r3
  400214:	2100      	movs	r1, #0
  400216:	4620      	mov	r0, r4
  400218:	4b0a      	ldr	r3, [pc, #40]	; (400244 <config_DAC+0x40>)
  40021a:	4798      	blx	r3
  40021c:	2205      	movs	r2, #5
  40021e:	2100      	movs	r1, #0
  400220:	4620      	mov	r0, r4
  400222:	4b09      	ldr	r3, [pc, #36]	; (400248 <config_DAC+0x44>)
  400224:	4798      	blx	r3
  400226:	2100      	movs	r1, #0
  400228:	4620      	mov	r0, r4
  40022a:	4b08      	ldr	r3, [pc, #32]	; (40024c <config_DAC+0x48>)
  40022c:	4798      	blx	r3
  40022e:	210a      	movs	r1, #10
  400230:	4620      	mov	r0, r4
  400232:	4b07      	ldr	r3, [pc, #28]	; (400250 <config_DAC+0x4c>)
  400234:	4798      	blx	r3
  400236:	bd10      	pop	{r4, pc}
  400238:	004252b5 	.word	0x004252b5
  40023c:	40040000 	.word	0x40040000
  400240:	004004bd 	.word	0x004004bd
  400244:	004004c3 	.word	0x004004c3
  400248:	004004d9 	.word	0x004004d9
  40024c:	0040050d 	.word	0x0040050d
  400250:	00400521 	.word	0x00400521

00400254 <TC0_Handler>:
  400254:	b500      	push	{lr}
  400256:	b083      	sub	sp, #12
  400258:	2100      	movs	r1, #0
  40025a:	4815      	ldr	r0, [pc, #84]	; (4002b0 <TC0_Handler+0x5c>)
  40025c:	4b15      	ldr	r3, [pc, #84]	; (4002b4 <TC0_Handler+0x60>)
  40025e:	4798      	blx	r3
  400260:	9001      	str	r0, [sp, #4]
  400262:	4b15      	ldr	r3, [pc, #84]	; (4002b8 <TC0_Handler+0x64>)
  400264:	681a      	ldr	r2, [r3, #0]
  400266:	4b15      	ldr	r3, [pc, #84]	; (4002bc <TC0_Handler+0x68>)
  400268:	681b      	ldr	r3, [r3, #0]
  40026a:	429a      	cmp	r2, r3
  40026c:	db06      	blt.n	40027c <TC0_Handler+0x28>
  40026e:	2200      	movs	r2, #0
  400270:	4b11      	ldr	r3, [pc, #68]	; (4002b8 <TC0_Handler+0x64>)
  400272:	601a      	str	r2, [r3, #0]
  400274:	4b12      	ldr	r3, [pc, #72]	; (4002c0 <TC0_Handler+0x6c>)
  400276:	681a      	ldr	r2, [r3, #0]
  400278:	4b12      	ldr	r3, [pc, #72]	; (4002c4 <TC0_Handler+0x70>)
  40027a:	601a      	str	r2, [r3, #0]
  40027c:	4b11      	ldr	r3, [pc, #68]	; (4002c4 <TC0_Handler+0x70>)
  40027e:	681b      	ldr	r3, [r3, #0]
  400280:	2b00      	cmp	r3, #0
  400282:	dd0f      	ble.n	4002a4 <TC0_Handler+0x50>
  400284:	4a0f      	ldr	r2, [pc, #60]	; (4002c4 <TC0_Handler+0x70>)
  400286:	6813      	ldr	r3, [r2, #0]
  400288:	3b01      	subs	r3, #1
  40028a:	6013      	str	r3, [r2, #0]
  40028c:	4b0a      	ldr	r3, [pc, #40]	; (4002b8 <TC0_Handler+0x64>)
  40028e:	6819      	ldr	r1, [r3, #0]
  400290:	2200      	movs	r2, #0
  400292:	4b0d      	ldr	r3, [pc, #52]	; (4002c8 <TC0_Handler+0x74>)
  400294:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  400298:	480c      	ldr	r0, [pc, #48]	; (4002cc <TC0_Handler+0x78>)
  40029a:	4b0d      	ldr	r3, [pc, #52]	; (4002d0 <TC0_Handler+0x7c>)
  40029c:	4798      	blx	r3
  40029e:	b003      	add	sp, #12
  4002a0:	f85d fb04 	ldr.w	pc, [sp], #4
  4002a4:	4a04      	ldr	r2, [pc, #16]	; (4002b8 <TC0_Handler+0x64>)
  4002a6:	6813      	ldr	r3, [r2, #0]
  4002a8:	3301      	adds	r3, #1
  4002aa:	6013      	str	r3, [r2, #0]
  4002ac:	e7ee      	b.n	40028c <TC0_Handler+0x38>
  4002ae:	bf00      	nop
  4002b0:	4000c000 	.word	0x4000c000
  4002b4:	004007ef 	.word	0x004007ef
  4002b8:	2043a138 	.word	0x2043a138
  4002bc:	004315f8 	.word	0x004315f8
  4002c0:	2043a140 	.word	0x2043a140
  4002c4:	2043a13c 	.word	0x2043a13c
  4002c8:	0042ff04 	.word	0x0042ff04
  4002cc:	40040000 	.word	0x40040000
  4002d0:	004004cf 	.word	0x004004cf

004002d4 <TC_init_modificado>:
  4002d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4002d8:	b084      	sub	sp, #16
  4002da:	4605      	mov	r5, r0
  4002dc:	460c      	mov	r4, r1
  4002de:	4616      	mov	r6, r2
  4002e0:	461f      	mov	r7, r3
  4002e2:	4608      	mov	r0, r1
  4002e4:	4b1c      	ldr	r3, [pc, #112]	; (400358 <TC_init_modificado+0x84>)
  4002e6:	4798      	blx	r3
  4002e8:	491c      	ldr	r1, [pc, #112]	; (40035c <TC_init_modificado+0x88>)
  4002ea:	9100      	str	r1, [sp, #0]
  4002ec:	ab02      	add	r3, sp, #8
  4002ee:	aa03      	add	r2, sp, #12
  4002f0:	4638      	mov	r0, r7
  4002f2:	f8df 808c 	ldr.w	r8, [pc, #140]	; 400380 <TC_init_modificado+0xac>
  4002f6:	47c0      	blx	r8
  4002f8:	f244 0201 	movw	r2, #16385	; 0x4001
  4002fc:	4631      	mov	r1, r6
  4002fe:	4628      	mov	r0, r5
  400300:	4b17      	ldr	r3, [pc, #92]	; (400360 <TC_init_modificado+0x8c>)
  400302:	4798      	blx	r3
  400304:	4a17      	ldr	r2, [pc, #92]	; (400364 <TC_init_modificado+0x90>)
  400306:	fbb2 f2f7 	udiv	r2, r2, r7
  40030a:	4631      	mov	r1, r6
  40030c:	4628      	mov	r0, r5
  40030e:	4b16      	ldr	r3, [pc, #88]	; (400368 <TC_init_modificado+0x94>)
  400310:	4798      	blx	r3
  400312:	b263      	sxtb	r3, r4
  400314:	2b00      	cmp	r3, #0
  400316:	db17      	blt.n	400348 <TC_init_modificado+0x74>
  400318:	4a14      	ldr	r2, [pc, #80]	; (40036c <TC_init_modificado+0x98>)
  40031a:	2180      	movs	r1, #128	; 0x80
  40031c:	54d1      	strb	r1, [r2, r3]
  40031e:	095b      	lsrs	r3, r3, #5
  400320:	f004 041f 	and.w	r4, r4, #31
  400324:	2201      	movs	r2, #1
  400326:	fa02 f404 	lsl.w	r4, r2, r4
  40032a:	4a11      	ldr	r2, [pc, #68]	; (400370 <TC_init_modificado+0x9c>)
  40032c:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
  400330:	2210      	movs	r2, #16
  400332:	4631      	mov	r1, r6
  400334:	4628      	mov	r0, r5
  400336:	4b0f      	ldr	r3, [pc, #60]	; (400374 <TC_init_modificado+0xa0>)
  400338:	4798      	blx	r3
  40033a:	4631      	mov	r1, r6
  40033c:	4628      	mov	r0, r5
  40033e:	4b0e      	ldr	r3, [pc, #56]	; (400378 <TC_init_modificado+0xa4>)
  400340:	4798      	blx	r3
  400342:	b004      	add	sp, #16
  400344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400348:	f004 010f 	and.w	r1, r4, #15
  40034c:	4a0b      	ldr	r2, [pc, #44]	; (40037c <TC_init_modificado+0xa8>)
  40034e:	440a      	add	r2, r1
  400350:	2180      	movs	r1, #128	; 0x80
  400352:	7611      	strb	r1, [r2, #24]
  400354:	e7e3      	b.n	40031e <TC_init_modificado+0x4a>
  400356:	bf00      	nop
  400358:	004252b5 	.word	0x004252b5
  40035c:	11e1a300 	.word	0x11e1a300
  400360:	004007bd 	.word	0x004007bd
  400364:	011e1a30 	.word	0x011e1a30
  400368:	004007df 	.word	0x004007df
  40036c:	e000e400 	.word	0xe000e400
  400370:	e000e100 	.word	0xe000e100
  400374:	004007e7 	.word	0x004007e7
  400378:	004007d7 	.word	0x004007d7
  40037c:	e000ecfc 	.word	0xe000ecfc
  400380:	004007f7 	.word	0x004007f7
  400384:	00000000 	.word	0x00000000

00400388 <task_aps2>:
  400388:	b570      	push	{r4, r5, r6, lr}
  40038a:	ed2d 8b02 	vpush	{d8}
  40038e:	b084      	sub	sp, #16
  400390:	22c8      	movs	r2, #200	; 0xc8
  400392:	4b31      	ldr	r3, [pc, #196]	; (400458 <task_aps2+0xd0>)
  400394:	601a      	str	r2, [r3, #0]
  400396:	4b31      	ldr	r3, [pc, #196]	; (40045c <task_aps2+0xd4>)
  400398:	4798      	blx	r3
  40039a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
  40039e:	2200      	movs	r2, #0
  4003a0:	2117      	movs	r1, #23
  4003a2:	482f      	ldr	r0, [pc, #188]	; (400460 <task_aps2+0xd8>)
  4003a4:	4c2f      	ldr	r4, [pc, #188]	; (400464 <task_aps2+0xdc>)
  4003a6:	47a0      	blx	r4
  4003a8:	4b2f      	ldr	r3, [pc, #188]	; (400468 <task_aps2+0xe0>)
  4003aa:	9300      	str	r3, [sp, #0]
  4003ac:	2300      	movs	r3, #0
  4003ae:	2201      	movs	r2, #1
  4003b0:	f242 7110 	movw	r1, #10000	; 0x2710
  4003b4:	482d      	ldr	r0, [pc, #180]	; (40046c <task_aps2+0xe4>)
  4003b6:	4c2e      	ldr	r4, [pc, #184]	; (400470 <task_aps2+0xe8>)
  4003b8:	47a0      	blx	r4
  4003ba:	4604      	mov	r4, r0
  4003bc:	4b2d      	ldr	r3, [pc, #180]	; (400474 <task_aps2+0xec>)
  4003be:	6018      	str	r0, [r3, #0]
  4003c0:	4b2d      	ldr	r3, [pc, #180]	; (400478 <task_aps2+0xf0>)
  4003c2:	4798      	blx	r3
  4003c4:	2300      	movs	r3, #0
  4003c6:	9300      	str	r3, [sp, #0]
  4003c8:	4602      	mov	r2, r0
  4003ca:	2101      	movs	r1, #1
  4003cc:	4620      	mov	r0, r4
  4003ce:	4c2b      	ldr	r4, [pc, #172]	; (40047c <task_aps2+0xf4>)
  4003d0:	47a0      	blx	r4
  4003d2:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 400480 <task_aps2+0xf8>
  4003d6:	e02e      	b.n	400436 <task_aps2+0xae>
  4003d8:	ee18 0a10 	vmov	r0, s16
  4003dc:	4b29      	ldr	r3, [pc, #164]	; (400484 <task_aps2+0xfc>)
  4003de:	4798      	blx	r3
  4003e0:	4e29      	ldr	r6, [pc, #164]	; (400488 <task_aps2+0x100>)
  4003e2:	47b0      	blx	r6
  4003e4:	4d29      	ldr	r5, [pc, #164]	; (40048c <task_aps2+0x104>)
  4003e6:	2200      	movs	r2, #0
  4003e8:	4b29      	ldr	r3, [pc, #164]	; (400490 <task_aps2+0x108>)
  4003ea:	47a8      	blx	r5
  4003ec:	4c29      	ldr	r4, [pc, #164]	; (400494 <task_aps2+0x10c>)
  4003ee:	2200      	movs	r2, #0
  4003f0:	4b29      	ldr	r3, [pc, #164]	; (400498 <task_aps2+0x110>)
  4003f2:	47a0      	blx	r4
  4003f4:	2200      	movs	r2, #0
  4003f6:	4b29      	ldr	r3, [pc, #164]	; (40049c <task_aps2+0x114>)
  4003f8:	47a0      	blx	r4
  4003fa:	2200      	movs	r2, #0
  4003fc:	4b28      	ldr	r3, [pc, #160]	; (4004a0 <task_aps2+0x118>)
  4003fe:	47a8      	blx	r5
  400400:	4b28      	ldr	r3, [pc, #160]	; (4004a4 <task_aps2+0x11c>)
  400402:	4798      	blx	r3
  400404:	ac04      	add	r4, sp, #16
  400406:	f804 0d01 	strb.w	r0, [r4, #-1]!
  40040a:	ee18 0a10 	vmov	r0, s16
  40040e:	47b0      	blx	r6
  400410:	a30f      	add	r3, pc, #60	; (adr r3, 400450 <task_aps2+0xc8>)
  400412:	e9d3 2300 	ldrd	r2, r3, [r3]
  400416:	47a8      	blx	r5
  400418:	4b23      	ldr	r3, [pc, #140]	; (4004a8 <task_aps2+0x120>)
  40041a:	4798      	blx	r3
  40041c:	ee08 0a10 	vmov	s16, r0
  400420:	2300      	movs	r3, #0
  400422:	2264      	movs	r2, #100	; 0x64
  400424:	4621      	mov	r1, r4
  400426:	4821      	ldr	r0, [pc, #132]	; (4004ac <task_aps2+0x124>)
  400428:	6800      	ldr	r0, [r0, #0]
  40042a:	4c21      	ldr	r4, [pc, #132]	; (4004b0 <task_aps2+0x128>)
  40042c:	47a0      	blx	r4
  40042e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  400432:	4b20      	ldr	r3, [pc, #128]	; (4004b4 <task_aps2+0x12c>)
  400434:	4798      	blx	r3
  400436:	eddf 7a20 	vldr	s15, [pc, #128]	; 4004b8 <task_aps2+0x130>
  40043a:	eeb4 8ae7 	vcmpe.f32	s16, s15
  40043e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400442:	ddc9      	ble.n	4003d8 <task_aps2+0x50>
  400444:	ed9f 8a0e 	vldr	s16, [pc, #56]	; 400480 <task_aps2+0xf8>
  400448:	e7c6      	b.n	4003d8 <task_aps2+0x50>
  40044a:	bf00      	nop
  40044c:	f3af 8000 	nop.w
  400450:	33333333 	.word	0x33333333
  400454:	3fd33333 	.word	0x3fd33333
  400458:	2043a140 	.word	0x2043a140
  40045c:	00400205 	.word	0x00400205
  400460:	4000c000 	.word	0x4000c000
  400464:	004002d5 	.word	0x004002d5
  400468:	004001d5 	.word	0x004001d5
  40046c:	0042a8e8 	.word	0x0042a8e8
  400470:	0040328d 	.word	0x0040328d
  400474:	2043a424 	.word	0x2043a424
  400478:	004028b5 	.word	0x004028b5
  40047c:	004032ed 	.word	0x004032ed
  400480:	00000000 	.word	0x00000000
  400484:	00426be9 	.word	0x00426be9
  400488:	00426f31 	.word	0x00426f31
  40048c:	00426c75 	.word	0x00426c75
  400490:	3ff00000 	.word	0x3ff00000
  400494:	00426fd9 	.word	0x00426fd9
  400498:	40280000 	.word	0x40280000
  40049c:	3fe00000 	.word	0x3fe00000
  4004a0:	40560000 	.word	0x40560000
  4004a4:	004273fd 	.word	0x004273fd
  4004a8:	0042743d 	.word	0x0042743d
  4004ac:	2043a428 	.word	0x2043a428
  4004b0:	00401ee5 	.word	0x00401ee5
  4004b4:	00402b15 	.word	0x00402b15
  4004b8:	40c90fdb 	.word	0x40c90fdb

004004bc <dacc_reset>:
  4004bc:	2301      	movs	r3, #1
  4004be:	6003      	str	r3, [r0, #0]
  4004c0:	4770      	bx	lr

004004c2 <dacc_set_transfer_mode>:
  4004c2:	b911      	cbnz	r1, 4004ca <dacc_set_transfer_mode+0x8>
  4004c4:	6041      	str	r1, [r0, #4]
  4004c6:	2000      	movs	r0, #0
  4004c8:	4770      	bx	lr
  4004ca:	6041      	str	r1, [r0, #4]
  4004cc:	e7fb      	b.n	4004c6 <dacc_set_transfer_mode+0x4>

004004ce <dacc_write_conversion_data>:
  4004ce:	3206      	adds	r2, #6
  4004d0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  4004d4:	6051      	str	r1, [r2, #4]
  4004d6:	4770      	bx	lr

004004d8 <dacc_set_osr>:
  4004d8:	6883      	ldr	r3, [r0, #8]
  4004da:	b139      	cbz	r1, 4004ec <dacc_set_osr+0x14>
  4004dc:	b410      	push	{r4}
  4004de:	2901      	cmp	r1, #1
  4004e0:	d00d      	beq.n	4004fe <dacc_set_osr+0x26>
  4004e2:	6083      	str	r3, [r0, #8]
  4004e4:	2000      	movs	r0, #0
  4004e6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4004ea:	4770      	bx	lr
  4004ec:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
  4004f0:	0412      	lsls	r2, r2, #16
  4004f2:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  4004f6:	4313      	orrs	r3, r2
  4004f8:	6083      	str	r3, [r0, #8]
  4004fa:	2000      	movs	r0, #0
  4004fc:	4770      	bx	lr
  4004fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  400502:	0512      	lsls	r2, r2, #20
  400504:	f402 02e0 	and.w	r2, r2, #7340032	; 0x700000
  400508:	4313      	orrs	r3, r2
  40050a:	e7ea      	b.n	4004e2 <dacc_set_osr+0xa>

0040050c <dacc_enable_channel>:
  40050c:	2901      	cmp	r1, #1
  40050e:	d901      	bls.n	400514 <dacc_enable_channel+0x8>
  400510:	2001      	movs	r0, #1
  400512:	4770      	bx	lr
  400514:	2301      	movs	r3, #1
  400516:	fa03 f101 	lsl.w	r1, r3, r1
  40051a:	6101      	str	r1, [r0, #16]
  40051c:	2000      	movs	r0, #0
  40051e:	4770      	bx	lr

00400520 <dacc_set_analog_control>:
  400520:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
  400524:	2000      	movs	r0, #0
  400526:	4770      	bx	lr

00400528 <rtc_set_hour_mode>:
  400528:	b921      	cbnz	r1, 400534 <rtc_set_hour_mode+0xc>
  40052a:	6843      	ldr	r3, [r0, #4]
  40052c:	f023 0301 	bic.w	r3, r3, #1
  400530:	6043      	str	r3, [r0, #4]
  400532:	4770      	bx	lr
  400534:	6843      	ldr	r3, [r0, #4]
  400536:	f043 0301 	orr.w	r3, r3, #1
  40053a:	6043      	str	r3, [r0, #4]
  40053c:	4770      	bx	lr

0040053e <rtc_enable_interrupt>:
  40053e:	6201      	str	r1, [r0, #32]
  400540:	4770      	bx	lr

00400542 <rtc_get_time>:
  400542:	b470      	push	{r4, r5, r6}
  400544:	6884      	ldr	r4, [r0, #8]
  400546:	e000      	b.n	40054a <rtc_get_time+0x8>
  400548:	6884      	ldr	r4, [r0, #8]
  40054a:	6885      	ldr	r5, [r0, #8]
  40054c:	42ac      	cmp	r4, r5
  40054e:	d1fb      	bne.n	400548 <rtc_get_time+0x6>
  400550:	b171      	cbz	r1, 400570 <rtc_get_time+0x2e>
  400552:	0c26      	lsrs	r6, r4, #16
  400554:	f3c6 1501 	ubfx	r5, r6, #4, #2
  400558:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40055c:	0068      	lsls	r0, r5, #1
  40055e:	f006 060f 	and.w	r6, r6, #15
  400562:	4430      	add	r0, r6
  400564:	6008      	str	r0, [r1, #0]
  400566:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
  40056a:	d001      	beq.n	400570 <rtc_get_time+0x2e>
  40056c:	300c      	adds	r0, #12
  40056e:	6008      	str	r0, [r1, #0]
  400570:	b14a      	cbz	r2, 400586 <rtc_get_time+0x44>
  400572:	0a25      	lsrs	r5, r4, #8
  400574:	f3c5 1102 	ubfx	r1, r5, #4, #3
  400578:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  40057c:	0048      	lsls	r0, r1, #1
  40057e:	f005 050f 	and.w	r5, r5, #15
  400582:	4428      	add	r0, r5
  400584:	6010      	str	r0, [r2, #0]
  400586:	b143      	cbz	r3, 40059a <rtc_get_time+0x58>
  400588:	f3c4 1202 	ubfx	r2, r4, #4, #3
  40058c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400590:	0051      	lsls	r1, r2, #1
  400592:	f004 040f 	and.w	r4, r4, #15
  400596:	440c      	add	r4, r1
  400598:	601c      	str	r4, [r3, #0]
  40059a:	bc70      	pop	{r4, r5, r6}
  40059c:	4770      	bx	lr
	...

004005a0 <rtc_set_time>:
  4005a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4005a2:	6844      	ldr	r4, [r0, #4]
  4005a4:	f014 0f01 	tst.w	r4, #1
  4005a8:	d005      	beq.n	4005b6 <rtc_set_time+0x16>
  4005aa:	290c      	cmp	r1, #12
  4005ac:	d93e      	bls.n	40062c <rtc_set_time+0x8c>
  4005ae:	390c      	subs	r1, #12
  4005b0:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
  4005b4:	e000      	b.n	4005b8 <rtc_set_time+0x18>
  4005b6:	2600      	movs	r6, #0
  4005b8:	4c1d      	ldr	r4, [pc, #116]	; (400630 <rtc_set_time+0x90>)
  4005ba:	fba4 7501 	umull	r7, r5, r4, r1
  4005be:	08ef      	lsrs	r7, r5, #3
  4005c0:	eb07 0e87 	add.w	lr, r7, r7, lsl #2
  4005c4:	ea4f 054e 	mov.w	r5, lr, lsl #1
  4005c8:	46ae      	mov	lr, r5
  4005ca:	1b4d      	subs	r5, r1, r5
  4005cc:	042d      	lsls	r5, r5, #16
  4005ce:	ea45 5507 	orr.w	r5, r5, r7, lsl #20
  4005d2:	4335      	orrs	r5, r6
  4005d4:	fba4 6102 	umull	r6, r1, r4, r2
  4005d8:	08ce      	lsrs	r6, r1, #3
  4005da:	eb06 0786 	add.w	r7, r6, r6, lsl #2
  4005de:	0079      	lsls	r1, r7, #1
  4005e0:	1a51      	subs	r1, r2, r1
  4005e2:	0209      	lsls	r1, r1, #8
  4005e4:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  4005e8:	4329      	orrs	r1, r5
  4005ea:	fba4 4203 	umull	r4, r2, r4, r3
  4005ee:	08d2      	lsrs	r2, r2, #3
  4005f0:	eb02 0582 	add.w	r5, r2, r2, lsl #2
  4005f4:	006c      	lsls	r4, r5, #1
  4005f6:	1b1c      	subs	r4, r3, r4
  4005f8:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  4005fc:	430a      	orrs	r2, r1
  4005fe:	6983      	ldr	r3, [r0, #24]
  400600:	f013 0f04 	tst.w	r3, #4
  400604:	d0fb      	beq.n	4005fe <rtc_set_time+0x5e>
  400606:	6803      	ldr	r3, [r0, #0]
  400608:	f043 0301 	orr.w	r3, r3, #1
  40060c:	6003      	str	r3, [r0, #0]
  40060e:	6983      	ldr	r3, [r0, #24]
  400610:	f013 0f01 	tst.w	r3, #1
  400614:	d0fb      	beq.n	40060e <rtc_set_time+0x6e>
  400616:	2301      	movs	r3, #1
  400618:	61c3      	str	r3, [r0, #28]
  40061a:	6082      	str	r2, [r0, #8]
  40061c:	6803      	ldr	r3, [r0, #0]
  40061e:	f023 0301 	bic.w	r3, r3, #1
  400622:	6003      	str	r3, [r0, #0]
  400624:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  400626:	f000 0001 	and.w	r0, r0, #1
  40062a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40062c:	2600      	movs	r6, #0
  40062e:	e7c3      	b.n	4005b8 <rtc_set_time+0x18>
  400630:	cccccccd 	.word	0xcccccccd

00400634 <rtc_set_date>:
  400634:	b5f0      	push	{r4, r5, r6, r7, lr}
  400636:	4d2c      	ldr	r5, [pc, #176]	; (4006e8 <rtc_set_date+0xb4>)
  400638:	fba5 4501 	umull	r4, r5, r5, r1
  40063c:	09af      	lsrs	r7, r5, #6
  40063e:	4c2b      	ldr	r4, [pc, #172]	; (4006ec <rtc_set_date+0xb8>)
  400640:	fba4 5401 	umull	r5, r4, r4, r1
  400644:	0964      	lsrs	r4, r4, #5
  400646:	4e2a      	ldr	r6, [pc, #168]	; (4006f0 <rtc_set_date+0xbc>)
  400648:	fba6 e504 	umull	lr, r5, r6, r4
  40064c:	08ed      	lsrs	r5, r5, #3
  40064e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  400652:	ea4f 0e45 	mov.w	lr, r5, lsl #1
  400656:	eba4 050e 	sub.w	r5, r4, lr
  40065a:	ea45 1507 	orr.w	r5, r5, r7, lsl #4
  40065e:	fba6 7401 	umull	r7, r4, r6, r1
  400662:	08e4      	lsrs	r4, r4, #3
  400664:	fba6 7e04 	umull	r7, lr, r6, r4
  400668:	ea4f 0ede 	mov.w	lr, lr, lsr #3
  40066c:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
  400670:	ea4f 074e 	mov.w	r7, lr, lsl #1
  400674:	eba4 0e07 	sub.w	lr, r4, r7
  400678:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40067c:	0067      	lsls	r7, r4, #1
  40067e:	1bcf      	subs	r7, r1, r7
  400680:	0239      	lsls	r1, r7, #8
  400682:	ea41 310e 	orr.w	r1, r1, lr, lsl #12
  400686:	4329      	orrs	r1, r5
  400688:	fba6 4502 	umull	r4, r5, r6, r2
  40068c:	08ed      	lsrs	r5, r5, #3
  40068e:	eb05 0785 	add.w	r7, r5, r5, lsl #2
  400692:	007c      	lsls	r4, r7, #1
  400694:	1b14      	subs	r4, r2, r4
  400696:	0424      	lsls	r4, r4, #16
  400698:	ea44 5205 	orr.w	r2, r4, r5, lsl #20
  40069c:	4311      	orrs	r1, r2
  40069e:	9a05      	ldr	r2, [sp, #20]
  4006a0:	ea41 5142 	orr.w	r1, r1, r2, lsl #21
  4006a4:	fba6 4203 	umull	r4, r2, r6, r3
  4006a8:	08d2      	lsrs	r2, r2, #3
  4006aa:	eb02 0582 	add.w	r5, r2, r2, lsl #2
  4006ae:	006c      	lsls	r4, r5, #1
  4006b0:	1b1c      	subs	r4, r3, r4
  4006b2:	0624      	lsls	r4, r4, #24
  4006b4:	ea44 7202 	orr.w	r2, r4, r2, lsl #28
  4006b8:	430a      	orrs	r2, r1
  4006ba:	6983      	ldr	r3, [r0, #24]
  4006bc:	f013 0f04 	tst.w	r3, #4
  4006c0:	d0fb      	beq.n	4006ba <rtc_set_date+0x86>
  4006c2:	6803      	ldr	r3, [r0, #0]
  4006c4:	f043 0302 	orr.w	r3, r3, #2
  4006c8:	6003      	str	r3, [r0, #0]
  4006ca:	6983      	ldr	r3, [r0, #24]
  4006cc:	f013 0f01 	tst.w	r3, #1
  4006d0:	d0fb      	beq.n	4006ca <rtc_set_date+0x96>
  4006d2:	2301      	movs	r3, #1
  4006d4:	61c3      	str	r3, [r0, #28]
  4006d6:	60c2      	str	r2, [r0, #12]
  4006d8:	6803      	ldr	r3, [r0, #0]
  4006da:	f023 0302 	bic.w	r3, r3, #2
  4006de:	6003      	str	r3, [r0, #0]
  4006e0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  4006e2:	f000 0002 	and.w	r0, r0, #2
  4006e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4006e8:	10624dd3 	.word	0x10624dd3
  4006ec:	51eb851f 	.word	0x51eb851f
  4006f0:	cccccccd 	.word	0xcccccccd

004006f4 <rtc_get_status>:
  4006f4:	6980      	ldr	r0, [r0, #24]
  4006f6:	4770      	bx	lr

004006f8 <rtc_clear_status>:
  4006f8:	61c1      	str	r1, [r0, #28]
  4006fa:	4770      	bx	lr

004006fc <rtt_init>:
  4006fc:	4b03      	ldr	r3, [pc, #12]	; (40070c <rtt_init+0x10>)
  4006fe:	681b      	ldr	r3, [r3, #0]
  400700:	4319      	orrs	r1, r3
  400702:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
  400706:	6001      	str	r1, [r0, #0]
  400708:	2000      	movs	r0, #0
  40070a:	4770      	bx	lr
  40070c:	20400ac4 	.word	0x20400ac4

00400710 <rtt_sel_source>:
  400710:	b941      	cbnz	r1, 400724 <rtt_sel_source+0x14>
  400712:	4a09      	ldr	r2, [pc, #36]	; (400738 <rtt_sel_source+0x28>)
  400714:	6813      	ldr	r3, [r2, #0]
  400716:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  40071a:	6013      	str	r3, [r2, #0]
  40071c:	6802      	ldr	r2, [r0, #0]
  40071e:	4313      	orrs	r3, r2
  400720:	6003      	str	r3, [r0, #0]
  400722:	4770      	bx	lr
  400724:	4a04      	ldr	r2, [pc, #16]	; (400738 <rtt_sel_source+0x28>)
  400726:	6813      	ldr	r3, [r2, #0]
  400728:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  40072c:	6013      	str	r3, [r2, #0]
  40072e:	6802      	ldr	r2, [r0, #0]
  400730:	4313      	orrs	r3, r2
  400732:	6003      	str	r3, [r0, #0]
  400734:	4770      	bx	lr
  400736:	bf00      	nop
  400738:	20400ac4 	.word	0x20400ac4

0040073c <rtt_enable_interrupt>:
  40073c:	6803      	ldr	r3, [r0, #0]
  40073e:	4319      	orrs	r1, r3
  400740:	4b02      	ldr	r3, [pc, #8]	; (40074c <rtt_enable_interrupt+0x10>)
  400742:	681b      	ldr	r3, [r3, #0]
  400744:	4319      	orrs	r1, r3
  400746:	6001      	str	r1, [r0, #0]
  400748:	4770      	bx	lr
  40074a:	bf00      	nop
  40074c:	20400ac4 	.word	0x20400ac4

00400750 <rtt_disable_interrupt>:
  400750:	6803      	ldr	r3, [r0, #0]
  400752:	ea23 0101 	bic.w	r1, r3, r1
  400756:	4b02      	ldr	r3, [pc, #8]	; (400760 <rtt_disable_interrupt+0x10>)
  400758:	681b      	ldr	r3, [r3, #0]
  40075a:	4319      	orrs	r1, r3
  40075c:	6001      	str	r1, [r0, #0]
  40075e:	4770      	bx	lr
  400760:	20400ac4 	.word	0x20400ac4

00400764 <rtt_read_timer_value>:
  400764:	6883      	ldr	r3, [r0, #8]
  400766:	e000      	b.n	40076a <rtt_read_timer_value+0x6>
  400768:	6883      	ldr	r3, [r0, #8]
  40076a:	6882      	ldr	r2, [r0, #8]
  40076c:	4293      	cmp	r3, r2
  40076e:	d1fb      	bne.n	400768 <rtt_read_timer_value+0x4>
  400770:	4618      	mov	r0, r3
  400772:	4770      	bx	lr

00400774 <rtt_get_status>:
  400774:	68c0      	ldr	r0, [r0, #12]
  400776:	4770      	bx	lr

00400778 <rtt_write_alarm_time>:
  400778:	b570      	push	{r4, r5, r6, lr}
  40077a:	4606      	mov	r6, r0
  40077c:	460d      	mov	r5, r1
  40077e:	6804      	ldr	r4, [r0, #0]
  400780:	f404 3480 	and.w	r4, r4, #65536	; 0x10000
  400784:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400788:	4809      	ldr	r0, [pc, #36]	; (4007b0 <rtt_write_alarm_time+0x38>)
  40078a:	4b0a      	ldr	r3, [pc, #40]	; (4007b4 <rtt_write_alarm_time+0x3c>)
  40078c:	4798      	blx	r3
  40078e:	b92d      	cbnz	r5, 40079c <rtt_write_alarm_time+0x24>
  400790:	f04f 33ff 	mov.w	r3, #4294967295
  400794:	6073      	str	r3, [r6, #4]
  400796:	b924      	cbnz	r4, 4007a2 <rtt_write_alarm_time+0x2a>
  400798:	2000      	movs	r0, #0
  40079a:	bd70      	pop	{r4, r5, r6, pc}
  40079c:	3d01      	subs	r5, #1
  40079e:	6075      	str	r5, [r6, #4]
  4007a0:	e7f9      	b.n	400796 <rtt_write_alarm_time+0x1e>
  4007a2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4007a6:	4802      	ldr	r0, [pc, #8]	; (4007b0 <rtt_write_alarm_time+0x38>)
  4007a8:	4b03      	ldr	r3, [pc, #12]	; (4007b8 <rtt_write_alarm_time+0x40>)
  4007aa:	4798      	blx	r3
  4007ac:	e7f4      	b.n	400798 <rtt_write_alarm_time+0x20>
  4007ae:	bf00      	nop
  4007b0:	400e1830 	.word	0x400e1830
  4007b4:	00400751 	.word	0x00400751
  4007b8:	0040073d 	.word	0x0040073d

004007bc <tc_init>:
  4007bc:	b410      	push	{r4}
  4007be:	0189      	lsls	r1, r1, #6
  4007c0:	1843      	adds	r3, r0, r1
  4007c2:	2402      	movs	r4, #2
  4007c4:	5044      	str	r4, [r0, r1]
  4007c6:	f04f 31ff 	mov.w	r1, #4294967295
  4007ca:	6299      	str	r1, [r3, #40]	; 0x28
  4007cc:	6a19      	ldr	r1, [r3, #32]
  4007ce:	605a      	str	r2, [r3, #4]
  4007d0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4007d4:	4770      	bx	lr

004007d6 <tc_start>:
  4007d6:	0189      	lsls	r1, r1, #6
  4007d8:	2305      	movs	r3, #5
  4007da:	5043      	str	r3, [r0, r1]
  4007dc:	4770      	bx	lr

004007de <tc_write_rc>:
  4007de:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  4007e2:	61ca      	str	r2, [r1, #28]
  4007e4:	4770      	bx	lr

004007e6 <tc_enable_interrupt>:
  4007e6:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  4007ea:	624a      	str	r2, [r1, #36]	; 0x24
  4007ec:	4770      	bx	lr

004007ee <tc_get_status>:
  4007ee:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  4007f2:	6a08      	ldr	r0, [r1, #32]
  4007f4:	4770      	bx	lr

004007f6 <tc_find_mck_divisor>:
  4007f6:	b470      	push	{r4, r5, r6}
  4007f8:	b087      	sub	sp, #28
  4007fa:	2402      	movs	r4, #2
  4007fc:	9401      	str	r4, [sp, #4]
  4007fe:	2408      	movs	r4, #8
  400800:	9402      	str	r4, [sp, #8]
  400802:	2420      	movs	r4, #32
  400804:	9403      	str	r4, [sp, #12]
  400806:	2480      	movs	r4, #128	; 0x80
  400808:	9404      	str	r4, [sp, #16]
  40080a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40080c:	0be4      	lsrs	r4, r4, #15
  40080e:	9405      	str	r4, [sp, #20]
  400810:	2500      	movs	r5, #0
  400812:	2d04      	cmp	r5, #4
  400814:	d80d      	bhi.n	400832 <tc_find_mck_divisor+0x3c>
  400816:	ac06      	add	r4, sp, #24
  400818:	eb04 0485 	add.w	r4, r4, r5, lsl #2
  40081c:	f854 4c14 	ldr.w	r4, [r4, #-20]
  400820:	fbb1 f4f4 	udiv	r4, r1, r4
  400824:	0c26      	lsrs	r6, r4, #16
  400826:	4284      	cmp	r4, r0
  400828:	d312      	bcc.n	400850 <tc_find_mck_divisor+0x5a>
  40082a:	4286      	cmp	r6, r0
  40082c:	d901      	bls.n	400832 <tc_find_mck_divisor+0x3c>
  40082e:	3501      	adds	r5, #1
  400830:	e7ef      	b.n	400812 <tc_find_mck_divisor+0x1c>
  400832:	2d04      	cmp	r5, #4
  400834:	d80e      	bhi.n	400854 <tc_find_mck_divisor+0x5e>
  400836:	b12a      	cbz	r2, 400844 <tc_find_mck_divisor+0x4e>
  400838:	a906      	add	r1, sp, #24
  40083a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  40083e:	f851 1c14 	ldr.w	r1, [r1, #-20]
  400842:	6011      	str	r1, [r2, #0]
  400844:	b143      	cbz	r3, 400858 <tc_find_mck_divisor+0x62>
  400846:	601d      	str	r5, [r3, #0]
  400848:	2001      	movs	r0, #1
  40084a:	b007      	add	sp, #28
  40084c:	bc70      	pop	{r4, r5, r6}
  40084e:	4770      	bx	lr
  400850:	2000      	movs	r0, #0
  400852:	e7fa      	b.n	40084a <tc_find_mck_divisor+0x54>
  400854:	2000      	movs	r0, #0
  400856:	e7f8      	b.n	40084a <tc_find_mck_divisor+0x54>
  400858:	2001      	movs	r0, #1
  40085a:	e7f6      	b.n	40084a <tc_find_mck_divisor+0x54>

0040085c <insert_sort>:
  40085c:	b430      	push	{r4, r5}
  40085e:	2501      	movs	r5, #1
  400860:	e00e      	b.n	400880 <insert_sort+0x24>
  400862:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  400866:	3b01      	subs	r3, #1
  400868:	b2db      	uxtb	r3, r3
  40086a:	b133      	cbz	r3, 40087a <insert_sort+0x1e>
  40086c:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
  400870:	441a      	add	r2, r3
  400872:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  400876:	4294      	cmp	r4, r2
  400878:	dbf3      	blt.n	400862 <insert_sort+0x6>
  40087a:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
  40087e:	3501      	adds	r5, #1
  400880:	428d      	cmp	r5, r1
  400882:	da03      	bge.n	40088c <insert_sort+0x30>
  400884:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
  400888:	b2eb      	uxtb	r3, r5
  40088a:	e7ee      	b.n	40086a <insert_sort+0xe>
  40088c:	bc30      	pop	{r4, r5}
  40088e:	4770      	bx	lr

00400890 <config_AFEC_touch>:
  400890:	b530      	push	{r4, r5, lr}
  400892:	b089      	sub	sp, #36	; 0x24
  400894:	4604      	mov	r4, r0
  400896:	4615      	mov	r5, r2
  400898:	a802      	add	r0, sp, #8
  40089a:	4b13      	ldr	r3, [pc, #76]	; (4008e8 <config_AFEC_touch+0x58>)
  40089c:	4798      	blx	r3
  40089e:	a902      	add	r1, sp, #8
  4008a0:	4620      	mov	r0, r4
  4008a2:	4b12      	ldr	r3, [pc, #72]	; (4008ec <config_AFEC_touch+0x5c>)
  4008a4:	4798      	blx	r3
  4008a6:	6863      	ldr	r3, [r4, #4]
  4008a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4008ac:	6063      	str	r3, [r4, #4]
  4008ae:	a801      	add	r0, sp, #4
  4008b0:	4b0f      	ldr	r3, [pc, #60]	; (4008f0 <config_AFEC_touch+0x60>)
  4008b2:	4798      	blx	r3
  4008b4:	2300      	movs	r3, #0
  4008b6:	f88d 3005 	strb.w	r3, [sp, #5]
  4008ba:	b2ad      	uxth	r5, r5
  4008bc:	aa01      	add	r2, sp, #4
  4008be:	4629      	mov	r1, r5
  4008c0:	4620      	mov	r0, r4
  4008c2:	4b0c      	ldr	r3, [pc, #48]	; (4008f4 <config_AFEC_touch+0x64>)
  4008c4:	4798      	blx	r3
  4008c6:	6665      	str	r5, [r4, #100]	; 0x64
  4008c8:	f44f 7300 	mov.w	r3, #512	; 0x200
  4008cc:	66e3      	str	r3, [r4, #108]	; 0x6c
  4008ce:	f640 73ff 	movw	r3, #4095	; 0xfff
  4008d2:	429d      	cmp	r5, r3
  4008d4:	d005      	beq.n	4008e2 <config_AFEC_touch+0x52>
  4008d6:	2301      	movs	r3, #1
  4008d8:	fa03 f505 	lsl.w	r5, r3, r5
  4008dc:	6165      	str	r5, [r4, #20]
  4008de:	b009      	add	sp, #36	; 0x24
  4008e0:	bd30      	pop	{r4, r5, pc}
  4008e2:	f640 75ff 	movw	r5, #4095	; 0xfff
  4008e6:	e7f9      	b.n	4008dc <config_AFEC_touch+0x4c>
  4008e8:	004015a9 	.word	0x004015a9
  4008ec:	004015f9 	.word	0x004015f9
  4008f0:	004015d9 	.word	0x004015d9
  4008f4:	00401559 	.word	0x00401559

004008f8 <configure_touch>:
  4008f8:	b570      	push	{r4, r5, r6, lr}
  4008fa:	200c      	movs	r0, #12
  4008fc:	4c0d      	ldr	r4, [pc, #52]	; (400934 <configure_touch+0x3c>)
  4008fe:	47a0      	blx	r4
  400900:	2010      	movs	r0, #16
  400902:	47a0      	blx	r4
  400904:	200c      	movs	r0, #12
  400906:	47a0      	blx	r4
  400908:	2010      	movs	r0, #16
  40090a:	47a0      	blx	r4
  40090c:	4d0a      	ldr	r5, [pc, #40]	; (400938 <configure_touch+0x40>)
  40090e:	4628      	mov	r0, r5
  400910:	4e0a      	ldr	r6, [pc, #40]	; (40093c <configure_touch+0x44>)
  400912:	47b0      	blx	r6
  400914:	4c0a      	ldr	r4, [pc, #40]	; (400940 <configure_touch+0x48>)
  400916:	4620      	mov	r0, r4
  400918:	47b0      	blx	r6
  40091a:	2300      	movs	r3, #0
  40091c:	461a      	mov	r2, r3
  40091e:	211d      	movs	r1, #29
  400920:	4620      	mov	r0, r4
  400922:	4c08      	ldr	r4, [pc, #32]	; (400944 <configure_touch+0x4c>)
  400924:	47a0      	blx	r4
  400926:	2300      	movs	r3, #0
  400928:	2201      	movs	r2, #1
  40092a:	2128      	movs	r1, #40	; 0x28
  40092c:	4628      	mov	r0, r5
  40092e:	47a0      	blx	r4
  400930:	bd70      	pop	{r4, r5, r6, pc}
  400932:	bf00      	nop
  400934:	004252b5 	.word	0x004252b5
  400938:	40064000 	.word	0x40064000
  40093c:	00401731 	.word	0x00401731
  400940:	4003c000 	.word	0x4003c000
  400944:	00400891 	.word	0x00400891

00400948 <readYp>:
  400948:	4b02      	ldr	r3, [pc, #8]	; (400954 <readYp+0xc>)
  40094a:	2200      	movs	r2, #0
  40094c:	665a      	str	r2, [r3, #100]	; 0x64
  40094e:	6e98      	ldr	r0, [r3, #104]	; 0x68
  400950:	4770      	bx	lr
  400952:	bf00      	nop
  400954:	4003c000 	.word	0x4003c000

00400958 <readXm>:
  400958:	4b02      	ldr	r3, [pc, #8]	; (400964 <readXm+0xc>)
  40095a:	2201      	movs	r2, #1
  40095c:	665a      	str	r2, [r3, #100]	; 0x64
  40095e:	6e98      	ldr	r0, [r3, #104]	; 0x68
  400960:	4770      	bx	lr
  400962:	bf00      	nop
  400964:	40064000 	.word	0x40064000

00400968 <configReadTouchX>:
  400968:	b538      	push	{r3, r4, r5, lr}
  40096a:	2201      	movs	r2, #1
  40096c:	4b14      	ldr	r3, [pc, #80]	; (4009c0 <configReadTouchX+0x58>)
  40096e:	615a      	str	r2, [r3, #20]
  400970:	2202      	movs	r2, #2
  400972:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  400976:	619a      	str	r2, [r3, #24]
  400978:	4d12      	ldr	r5, [pc, #72]	; (4009c4 <configReadTouchX+0x5c>)
  40097a:	2300      	movs	r3, #0
  40097c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400980:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400984:	4628      	mov	r0, r5
  400986:	4c10      	ldr	r4, [pc, #64]	; (4009c8 <configReadTouchX+0x60>)
  400988:	47a0      	blx	r4
  40098a:	2300      	movs	r3, #0
  40098c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400990:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400994:	4628      	mov	r0, r5
  400996:	47a0      	blx	r4
  400998:	f505 7500 	add.w	r5, r5, #512	; 0x200
  40099c:	2300      	movs	r3, #0
  40099e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4009a2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4009a6:	4628      	mov	r0, r5
  4009a8:	47a0      	blx	r4
  4009aa:	2300      	movs	r3, #0
  4009ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4009b0:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4009b4:	4628      	mov	r0, r5
  4009b6:	47a0      	blx	r4
  4009b8:	4804      	ldr	r0, [pc, #16]	; (4009cc <configReadTouchX+0x64>)
  4009ba:	4b05      	ldr	r3, [pc, #20]	; (4009d0 <configReadTouchX+0x68>)
  4009bc:	4798      	blx	r3
  4009be:	bd38      	pop	{r3, r4, r5, pc}
  4009c0:	4003c000 	.word	0x4003c000
  4009c4:	400e1200 	.word	0x400e1200
  4009c8:	00424efd 	.word	0x00424efd
  4009cc:	0003dbc2 	.word	0x0003dbc2
  4009d0:	20400001 	.word	0x20400001

004009d4 <configReadTouchY>:
  4009d4:	b538      	push	{r3, r4, r5, lr}
  4009d6:	2201      	movs	r2, #1
  4009d8:	4b14      	ldr	r3, [pc, #80]	; (400a2c <configReadTouchY+0x58>)
  4009da:	619a      	str	r2, [r3, #24]
  4009dc:	2202      	movs	r2, #2
  4009de:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  4009e2:	615a      	str	r2, [r3, #20]
  4009e4:	4d12      	ldr	r5, [pc, #72]	; (400a30 <configReadTouchY+0x5c>)
  4009e6:	2300      	movs	r3, #0
  4009e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4009ec:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4009f0:	4628      	mov	r0, r5
  4009f2:	4c10      	ldr	r4, [pc, #64]	; (400a34 <configReadTouchY+0x60>)
  4009f4:	47a0      	blx	r4
  4009f6:	2300      	movs	r3, #0
  4009f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4009fc:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400a00:	4628      	mov	r0, r5
  400a02:	47a0      	blx	r4
  400a04:	f5a5 7500 	sub.w	r5, r5, #512	; 0x200
  400a08:	2300      	movs	r3, #0
  400a0a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400a0e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400a12:	4628      	mov	r0, r5
  400a14:	47a0      	blx	r4
  400a16:	2300      	movs	r3, #0
  400a18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400a1c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400a20:	4628      	mov	r0, r5
  400a22:	47a0      	blx	r4
  400a24:	4804      	ldr	r0, [pc, #16]	; (400a38 <configReadTouchY+0x64>)
  400a26:	4b05      	ldr	r3, [pc, #20]	; (400a3c <configReadTouchY+0x68>)
  400a28:	4798      	blx	r3
  400a2a:	bd38      	pop	{r3, r4, r5, pc}
  400a2c:	4003c000 	.word	0x4003c000
  400a30:	400e1400 	.word	0x400e1400
  400a34:	00424efd 	.word	0x00424efd
  400a38:	0003dbc2 	.word	0x0003dbc2
  400a3c:	20400001 	.word	0x20400001

00400a40 <readTouchZ>:
  400a40:	b570      	push	{r4, r5, r6, lr}
  400a42:	ed2d 8b04 	vpush	{d8-d9}
  400a46:	ee08 0a10 	vmov	s16, r0
  400a4a:	4d2e      	ldr	r5, [pc, #184]	; (400b04 <readTouchZ+0xc4>)
  400a4c:	2300      	movs	r3, #0
  400a4e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400a52:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400a56:	4628      	mov	r0, r5
  400a58:	4c2b      	ldr	r4, [pc, #172]	; (400b08 <readTouchZ+0xc8>)
  400a5a:	47a0      	blx	r4
  400a5c:	4e2b      	ldr	r6, [pc, #172]	; (400b0c <readTouchZ+0xcc>)
  400a5e:	2300      	movs	r3, #0
  400a60:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400a64:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400a68:	4630      	mov	r0, r6
  400a6a:	47a0      	blx	r4
  400a6c:	2300      	movs	r3, #0
  400a6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400a72:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400a76:	4630      	mov	r0, r6
  400a78:	47a0      	blx	r4
  400a7a:	2300      	movs	r3, #0
  400a7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400a80:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400a84:	4628      	mov	r0, r5
  400a86:	47a0      	blx	r4
  400a88:	2201      	movs	r2, #1
  400a8a:	4b21      	ldr	r3, [pc, #132]	; (400b10 <readTouchZ+0xd0>)
  400a8c:	615a      	str	r2, [r3, #20]
  400a8e:	2202      	movs	r2, #2
  400a90:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  400a94:	615a      	str	r2, [r3, #20]
  400a96:	481f      	ldr	r0, [pc, #124]	; (400b14 <readTouchZ+0xd4>)
  400a98:	4b1f      	ldr	r3, [pc, #124]	; (400b18 <readTouchZ+0xd8>)
  400a9a:	4798      	blx	r3
  400a9c:	4c1f      	ldr	r4, [pc, #124]	; (400b1c <readTouchZ+0xdc>)
  400a9e:	47a0      	blx	r4
  400aa0:	ee08 0a90 	vmov	s17, r0
  400aa4:	4b1e      	ldr	r3, [pc, #120]	; (400b20 <readTouchZ+0xe0>)
  400aa6:	4798      	blx	r3
  400aa8:	ee09 0a10 	vmov	s18, r0
  400aac:	4b1d      	ldr	r3, [pc, #116]	; (400b24 <readTouchZ+0xe4>)
  400aae:	4798      	blx	r3
  400ab0:	47a0      	blx	r4
  400ab2:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
  400ab6:	eef8 8ae8 	vcvt.f32.s32	s17, s17
  400aba:	ee89 7a28 	vdiv.f32	s14, s18, s17
  400abe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  400ac2:	ee37 7a67 	vsub.f32	s14, s14, s15
  400ac6:	ee07 0a90 	vmov	s15, r0
  400aca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400ace:	ee27 7a87 	vmul.f32	s14, s15, s14
  400ad2:	eef8 7ac8 	vcvt.f32.s32	s15, s16
  400ad6:	ee67 7a87 	vmul.f32	s15, s15, s14
  400ada:	ed9f 7a13 	vldr	s14, [pc, #76]	; 400b28 <readTouchZ+0xe8>
  400ade:	ee67 7a87 	vmul.f32	s15, s15, s14
  400ae2:	ed9f 7a12 	vldr	s14, [pc, #72]	; 400b2c <readTouchZ+0xec>
  400ae6:	eef4 7ac7 	vcmpe.f32	s15, s14
  400aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400aee:	d501      	bpl.n	400af4 <readTouchZ+0xb4>
  400af0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 400b30 <readTouchZ+0xf0>
  400af4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  400af8:	ee17 0a90 	vmov	r0, s15
  400afc:	ecbd 8b04 	vpop	{d8-d9}
  400b00:	bd70      	pop	{r4, r5, r6, pc}
  400b02:	bf00      	nop
  400b04:	400e1200 	.word	0x400e1200
  400b08:	00424efd 	.word	0x00424efd
  400b0c:	400e1400 	.word	0x400e1400
  400b10:	4003c000 	.word	0x4003c000
  400b14:	0003dbc2 	.word	0x0003dbc2
  400b18:	20400001 	.word	0x20400001
  400b1c:	00400959 	.word	0x00400959
  400b20:	00400949 	.word	0x00400949
  400b24:	00400969 	.word	0x00400969
  400b28:	3a800000 	.word	0x3a800000
  400b2c:	42c80000 	.word	0x42c80000
  400b30:	44800000 	.word	0x44800000

00400b34 <readTouchX>:
  400b34:	b508      	push	{r3, lr}
  400b36:	4b01      	ldr	r3, [pc, #4]	; (400b3c <readTouchX+0x8>)
  400b38:	4798      	blx	r3
  400b3a:	bd08      	pop	{r3, pc}
  400b3c:	00400949 	.word	0x00400949

00400b40 <readTouchY>:
  400b40:	b508      	push	{r3, lr}
  400b42:	4b01      	ldr	r3, [pc, #4]	; (400b48 <readTouchY+0x8>)
  400b44:	4798      	blx	r3
  400b46:	bd08      	pop	{r3, pc}
  400b48:	00400959 	.word	0x00400959

00400b4c <readRawPoint>:
  400b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  400b4e:	b0c1      	sub	sp, #260	; 0x104
  400b50:	4607      	mov	r7, r0
  400b52:	460e      	mov	r6, r1
  400b54:	4615      	mov	r5, r2
  400b56:	4b16      	ldr	r3, [pc, #88]	; (400bb0 <readRawPoint+0x64>)
  400b58:	4798      	blx	r3
  400b5a:	2400      	movs	r4, #0
  400b5c:	e007      	b.n	400b6e <readRawPoint+0x22>
  400b5e:	2033      	movs	r0, #51	; 0x33
  400b60:	4b14      	ldr	r3, [pc, #80]	; (400bb4 <readRawPoint+0x68>)
  400b62:	4798      	blx	r3
  400b64:	4b14      	ldr	r3, [pc, #80]	; (400bb8 <readRawPoint+0x6c>)
  400b66:	4798      	blx	r3
  400b68:	f84d 0024 	str.w	r0, [sp, r4, lsl #2]
  400b6c:	3401      	adds	r4, #1
  400b6e:	2c3f      	cmp	r4, #63	; 0x3f
  400b70:	ddf5      	ble.n	400b5e <readRawPoint+0x12>
  400b72:	2140      	movs	r1, #64	; 0x40
  400b74:	4668      	mov	r0, sp
  400b76:	4b11      	ldr	r3, [pc, #68]	; (400bbc <readRawPoint+0x70>)
  400b78:	4798      	blx	r3
  400b7a:	9b20      	ldr	r3, [sp, #128]	; 0x80
  400b7c:	603b      	str	r3, [r7, #0]
  400b7e:	4b10      	ldr	r3, [pc, #64]	; (400bc0 <readRawPoint+0x74>)
  400b80:	4798      	blx	r3
  400b82:	2400      	movs	r4, #0
  400b84:	e004      	b.n	400b90 <readRawPoint+0x44>
  400b86:	4b0f      	ldr	r3, [pc, #60]	; (400bc4 <readRawPoint+0x78>)
  400b88:	4798      	blx	r3
  400b8a:	f84d 0024 	str.w	r0, [sp, r4, lsl #2]
  400b8e:	3401      	adds	r4, #1
  400b90:	2c3f      	cmp	r4, #63	; 0x3f
  400b92:	ddf8      	ble.n	400b86 <readRawPoint+0x3a>
  400b94:	2140      	movs	r1, #64	; 0x40
  400b96:	4668      	mov	r0, sp
  400b98:	4b08      	ldr	r3, [pc, #32]	; (400bbc <readRawPoint+0x70>)
  400b9a:	4798      	blx	r3
  400b9c:	9b20      	ldr	r3, [sp, #128]	; 0x80
  400b9e:	6033      	str	r3, [r6, #0]
  400ba0:	f44f 7096 	mov.w	r0, #300	; 0x12c
  400ba4:	4b08      	ldr	r3, [pc, #32]	; (400bc8 <readRawPoint+0x7c>)
  400ba6:	4798      	blx	r3
  400ba8:	6028      	str	r0, [r5, #0]
  400baa:	b041      	add	sp, #260	; 0x104
  400bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400bae:	bf00      	nop
  400bb0:	00400969 	.word	0x00400969
  400bb4:	20400001 	.word	0x20400001
  400bb8:	00400b35 	.word	0x00400b35
  400bbc:	0040085d 	.word	0x0040085d
  400bc0:	004009d5 	.word	0x004009d5
  400bc4:	00400b41 	.word	0x00400b41
  400bc8:	00400a41 	.word	0x00400a41

00400bcc <pointToCoordinate>:
  400bcc:	b510      	push	{r4, lr}
  400bce:	f2a0 20ee 	subw	r0, r0, #750	; 0x2ee
  400bd2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  400bd6:	0104      	lsls	r4, r0, #4
  400bd8:	4818      	ldr	r0, [pc, #96]	; (400c3c <pointToCoordinate+0x70>)
  400bda:	fb80 e004 	smull	lr, r0, r0, r4
  400bde:	4420      	add	r0, r4
  400be0:	17e4      	asrs	r4, r4, #31
  400be2:	ebc4 24e0 	rsb	r4, r4, r0, asr #11
  400be6:	2cf0      	cmp	r4, #240	; 0xf0
  400be8:	dd00      	ble.n	400bec <pointToCoordinate+0x20>
  400bea:	24f0      	movs	r4, #240	; 0xf0
  400bec:	2c00      	cmp	r4, #0
  400bee:	db1e      	blt.n	400c2e <pointToCoordinate+0x62>
  400bf0:	9802      	ldr	r0, [sp, #8]
  400bf2:	6004      	str	r4, [r0, #0]
  400bf4:	f5a1 711b 	sub.w	r1, r1, #620	; 0x26c
  400bf8:	ebc1 6001 	rsb	r0, r1, r1, lsl #24
  400bfc:	ebc1 0180 	rsb	r1, r1, r0, lsl #2
  400c00:	0188      	lsls	r0, r1, #6
  400c02:	490f      	ldr	r1, [pc, #60]	; (400c40 <pointToCoordinate+0x74>)
  400c04:	fb81 4100 	smull	r4, r1, r1, r0
  400c08:	4401      	add	r1, r0
  400c0a:	17c0      	asrs	r0, r0, #31
  400c0c:	ebc0 20e1 	rsb	r0, r0, r1, asr #11
  400c10:	f500 70a0 	add.w	r0, r0, #320	; 0x140
  400c14:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  400c18:	dd01      	ble.n	400c1e <pointToCoordinate+0x52>
  400c1a:	f44f 70a0 	mov.w	r0, #320	; 0x140
  400c1e:	2800      	cmp	r0, #0
  400c20:	db07      	blt.n	400c32 <pointToCoordinate+0x66>
  400c22:	6018      	str	r0, [r3, #0]
  400c24:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
  400c28:	db05      	blt.n	400c36 <pointToCoordinate+0x6a>
  400c2a:	2000      	movs	r0, #0
  400c2c:	bd10      	pop	{r4, pc}
  400c2e:	2400      	movs	r4, #0
  400c30:	e7de      	b.n	400bf0 <pointToCoordinate+0x24>
  400c32:	2000      	movs	r0, #0
  400c34:	e7f5      	b.n	400c22 <pointToCoordinate+0x56>
  400c36:	2001      	movs	r0, #1
  400c38:	bd10      	pop	{r4, pc}
  400c3a:	bf00      	nop
  400c3c:	cd9a6735 	.word	0xcd9a6735
  400c40:	bc97c21f 	.word	0xbc97c21f

00400c44 <readPoint>:
  400c44:	b530      	push	{r4, r5, lr}
  400c46:	b087      	sub	sp, #28
  400c48:	4604      	mov	r4, r0
  400c4a:	460d      	mov	r5, r1
  400c4c:	aa03      	add	r2, sp, #12
  400c4e:	a904      	add	r1, sp, #16
  400c50:	a805      	add	r0, sp, #20
  400c52:	4b05      	ldr	r3, [pc, #20]	; (400c68 <readPoint+0x24>)
  400c54:	4798      	blx	r3
  400c56:	9500      	str	r5, [sp, #0]
  400c58:	4623      	mov	r3, r4
  400c5a:	9a03      	ldr	r2, [sp, #12]
  400c5c:	9904      	ldr	r1, [sp, #16]
  400c5e:	9805      	ldr	r0, [sp, #20]
  400c60:	4c02      	ldr	r4, [pc, #8]	; (400c6c <readPoint+0x28>)
  400c62:	47a0      	blx	r4
  400c64:	b007      	add	sp, #28
  400c66:	bd30      	pop	{r4, r5, pc}
  400c68:	00400b4d 	.word	0x00400b4d
  400c6c:	00400bcd 	.word	0x00400bcd

00400c70 <ili9341_send_command>:
  400c70:	2240      	movs	r2, #64	; 0x40
  400c72:	4b10      	ldr	r3, [pc, #64]	; (400cb4 <ili9341_send_command+0x44>)
  400c74:	635a      	str	r2, [r3, #52]	; 0x34
  400c76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400c7a:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  400c7e:	635a      	str	r2, [r3, #52]	; 0x34
  400c80:	4b0d      	ldr	r3, [pc, #52]	; (400cb8 <ili9341_send_command+0x48>)
  400c82:	691b      	ldr	r3, [r3, #16]
  400c84:	f413 7f00 	tst.w	r3, #512	; 0x200
  400c88:	d110      	bne.n	400cac <ili9341_send_command+0x3c>
  400c8a:	2300      	movs	r3, #0
  400c8c:	2b00      	cmp	r3, #0
  400c8e:	d0f7      	beq.n	400c80 <ili9341_send_command+0x10>
  400c90:	4b09      	ldr	r3, [pc, #36]	; (400cb8 <ili9341_send_command+0x48>)
  400c92:	60d8      	str	r0, [r3, #12]
  400c94:	4b08      	ldr	r3, [pc, #32]	; (400cb8 <ili9341_send_command+0x48>)
  400c96:	691b      	ldr	r3, [r3, #16]
  400c98:	f413 7f00 	tst.w	r3, #512	; 0x200
  400c9c:	d108      	bne.n	400cb0 <ili9341_send_command+0x40>
  400c9e:	2300      	movs	r3, #0
  400ca0:	2b00      	cmp	r3, #0
  400ca2:	d0f7      	beq.n	400c94 <ili9341_send_command+0x24>
  400ca4:	2240      	movs	r2, #64	; 0x40
  400ca6:	4b03      	ldr	r3, [pc, #12]	; (400cb4 <ili9341_send_command+0x44>)
  400ca8:	631a      	str	r2, [r3, #48]	; 0x30
  400caa:	4770      	bx	lr
  400cac:	2301      	movs	r3, #1
  400cae:	e7ed      	b.n	400c8c <ili9341_send_command+0x1c>
  400cb0:	2301      	movs	r3, #1
  400cb2:	e7f5      	b.n	400ca0 <ili9341_send_command+0x30>
  400cb4:	400e0e00 	.word	0x400e0e00
  400cb8:	40008000 	.word	0x40008000

00400cbc <ili9341_send_draw_limits>:
  400cbc:	b510      	push	{r4, lr}
  400cbe:	4604      	mov	r4, r0
  400cc0:	202a      	movs	r0, #42	; 0x2a
  400cc2:	4b4e      	ldr	r3, [pc, #312]	; (400dfc <ili9341_send_draw_limits+0x140>)
  400cc4:	4798      	blx	r3
  400cc6:	4b4e      	ldr	r3, [pc, #312]	; (400e00 <ili9341_send_draw_limits+0x144>)
  400cc8:	f9b3 2000 	ldrsh.w	r2, [r3]
  400ccc:	f3c2 2107 	ubfx	r1, r2, #8, #8
  400cd0:	4b4c      	ldr	r3, [pc, #304]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400cd2:	691b      	ldr	r3, [r3, #16]
  400cd4:	f413 7f00 	tst.w	r3, #512	; 0x200
  400cd8:	d17b      	bne.n	400dd2 <ili9341_send_draw_limits+0x116>
  400cda:	2300      	movs	r3, #0
  400cdc:	2b00      	cmp	r3, #0
  400cde:	d0f7      	beq.n	400cd0 <ili9341_send_draw_limits+0x14>
  400ce0:	4b48      	ldr	r3, [pc, #288]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400ce2:	60d9      	str	r1, [r3, #12]
  400ce4:	b2d2      	uxtb	r2, r2
  400ce6:	4b47      	ldr	r3, [pc, #284]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400ce8:	691b      	ldr	r3, [r3, #16]
  400cea:	f413 7f00 	tst.w	r3, #512	; 0x200
  400cee:	d172      	bne.n	400dd6 <ili9341_send_draw_limits+0x11a>
  400cf0:	2300      	movs	r3, #0
  400cf2:	2b00      	cmp	r3, #0
  400cf4:	d0f7      	beq.n	400ce6 <ili9341_send_draw_limits+0x2a>
  400cf6:	4b43      	ldr	r3, [pc, #268]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400cf8:	60da      	str	r2, [r3, #12]
  400cfa:	b1cc      	cbz	r4, 400d30 <ili9341_send_draw_limits+0x74>
  400cfc:	4b42      	ldr	r3, [pc, #264]	; (400e08 <ili9341_send_draw_limits+0x14c>)
  400cfe:	f9b3 2000 	ldrsh.w	r2, [r3]
  400d02:	f3c2 2107 	ubfx	r1, r2, #8, #8
  400d06:	4b3f      	ldr	r3, [pc, #252]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400d08:	691b      	ldr	r3, [r3, #16]
  400d0a:	f413 7f00 	tst.w	r3, #512	; 0x200
  400d0e:	d164      	bne.n	400dda <ili9341_send_draw_limits+0x11e>
  400d10:	2300      	movs	r3, #0
  400d12:	2b00      	cmp	r3, #0
  400d14:	d0f7      	beq.n	400d06 <ili9341_send_draw_limits+0x4a>
  400d16:	4b3b      	ldr	r3, [pc, #236]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400d18:	60d9      	str	r1, [r3, #12]
  400d1a:	b2d2      	uxtb	r2, r2
  400d1c:	4b39      	ldr	r3, [pc, #228]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400d1e:	691b      	ldr	r3, [r3, #16]
  400d20:	f413 7f00 	tst.w	r3, #512	; 0x200
  400d24:	d15b      	bne.n	400dde <ili9341_send_draw_limits+0x122>
  400d26:	2300      	movs	r3, #0
  400d28:	2b00      	cmp	r3, #0
  400d2a:	d0f7      	beq.n	400d1c <ili9341_send_draw_limits+0x60>
  400d2c:	4b35      	ldr	r3, [pc, #212]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400d2e:	60da      	str	r2, [r3, #12]
  400d30:	4b34      	ldr	r3, [pc, #208]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400d32:	691b      	ldr	r3, [r3, #16]
  400d34:	f413 7f00 	tst.w	r3, #512	; 0x200
  400d38:	d153      	bne.n	400de2 <ili9341_send_draw_limits+0x126>
  400d3a:	2300      	movs	r3, #0
  400d3c:	2b00      	cmp	r3, #0
  400d3e:	d0f7      	beq.n	400d30 <ili9341_send_draw_limits+0x74>
  400d40:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400d44:	4b31      	ldr	r3, [pc, #196]	; (400e0c <ili9341_send_draw_limits+0x150>)
  400d46:	631a      	str	r2, [r3, #48]	; 0x30
  400d48:	202b      	movs	r0, #43	; 0x2b
  400d4a:	4b2c      	ldr	r3, [pc, #176]	; (400dfc <ili9341_send_draw_limits+0x140>)
  400d4c:	4798      	blx	r3
  400d4e:	4b30      	ldr	r3, [pc, #192]	; (400e10 <ili9341_send_draw_limits+0x154>)
  400d50:	f9b3 2000 	ldrsh.w	r2, [r3]
  400d54:	f3c2 2107 	ubfx	r1, r2, #8, #8
  400d58:	4b2a      	ldr	r3, [pc, #168]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400d5a:	691b      	ldr	r3, [r3, #16]
  400d5c:	f413 7f00 	tst.w	r3, #512	; 0x200
  400d60:	d141      	bne.n	400de6 <ili9341_send_draw_limits+0x12a>
  400d62:	2300      	movs	r3, #0
  400d64:	2b00      	cmp	r3, #0
  400d66:	d0f7      	beq.n	400d58 <ili9341_send_draw_limits+0x9c>
  400d68:	4b26      	ldr	r3, [pc, #152]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400d6a:	60d9      	str	r1, [r3, #12]
  400d6c:	b2d2      	uxtb	r2, r2
  400d6e:	4b25      	ldr	r3, [pc, #148]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400d70:	691b      	ldr	r3, [r3, #16]
  400d72:	f413 7f00 	tst.w	r3, #512	; 0x200
  400d76:	d138      	bne.n	400dea <ili9341_send_draw_limits+0x12e>
  400d78:	2300      	movs	r3, #0
  400d7a:	2b00      	cmp	r3, #0
  400d7c:	d0f7      	beq.n	400d6e <ili9341_send_draw_limits+0xb2>
  400d7e:	4b21      	ldr	r3, [pc, #132]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400d80:	60da      	str	r2, [r3, #12]
  400d82:	b1cc      	cbz	r4, 400db8 <ili9341_send_draw_limits+0xfc>
  400d84:	4b23      	ldr	r3, [pc, #140]	; (400e14 <ili9341_send_draw_limits+0x158>)
  400d86:	f9b3 2000 	ldrsh.w	r2, [r3]
  400d8a:	f3c2 2107 	ubfx	r1, r2, #8, #8
  400d8e:	4b1d      	ldr	r3, [pc, #116]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400d90:	691b      	ldr	r3, [r3, #16]
  400d92:	f413 7f00 	tst.w	r3, #512	; 0x200
  400d96:	d12a      	bne.n	400dee <ili9341_send_draw_limits+0x132>
  400d98:	2300      	movs	r3, #0
  400d9a:	2b00      	cmp	r3, #0
  400d9c:	d0f7      	beq.n	400d8e <ili9341_send_draw_limits+0xd2>
  400d9e:	4b19      	ldr	r3, [pc, #100]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400da0:	60d9      	str	r1, [r3, #12]
  400da2:	b2d2      	uxtb	r2, r2
  400da4:	4b17      	ldr	r3, [pc, #92]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400da6:	691b      	ldr	r3, [r3, #16]
  400da8:	f413 7f00 	tst.w	r3, #512	; 0x200
  400dac:	d121      	bne.n	400df2 <ili9341_send_draw_limits+0x136>
  400dae:	2300      	movs	r3, #0
  400db0:	2b00      	cmp	r3, #0
  400db2:	d0f7      	beq.n	400da4 <ili9341_send_draw_limits+0xe8>
  400db4:	4b13      	ldr	r3, [pc, #76]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400db6:	60da      	str	r2, [r3, #12]
  400db8:	4b12      	ldr	r3, [pc, #72]	; (400e04 <ili9341_send_draw_limits+0x148>)
  400dba:	691b      	ldr	r3, [r3, #16]
  400dbc:	f413 7f00 	tst.w	r3, #512	; 0x200
  400dc0:	d119      	bne.n	400df6 <ili9341_send_draw_limits+0x13a>
  400dc2:	2300      	movs	r3, #0
  400dc4:	2b00      	cmp	r3, #0
  400dc6:	d0f7      	beq.n	400db8 <ili9341_send_draw_limits+0xfc>
  400dc8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400dcc:	4b0f      	ldr	r3, [pc, #60]	; (400e0c <ili9341_send_draw_limits+0x150>)
  400dce:	631a      	str	r2, [r3, #48]	; 0x30
  400dd0:	bd10      	pop	{r4, pc}
  400dd2:	2301      	movs	r3, #1
  400dd4:	e782      	b.n	400cdc <ili9341_send_draw_limits+0x20>
  400dd6:	2301      	movs	r3, #1
  400dd8:	e78b      	b.n	400cf2 <ili9341_send_draw_limits+0x36>
  400dda:	2301      	movs	r3, #1
  400ddc:	e799      	b.n	400d12 <ili9341_send_draw_limits+0x56>
  400dde:	2301      	movs	r3, #1
  400de0:	e7a2      	b.n	400d28 <ili9341_send_draw_limits+0x6c>
  400de2:	2301      	movs	r3, #1
  400de4:	e7aa      	b.n	400d3c <ili9341_send_draw_limits+0x80>
  400de6:	2301      	movs	r3, #1
  400de8:	e7bc      	b.n	400d64 <ili9341_send_draw_limits+0xa8>
  400dea:	2301      	movs	r3, #1
  400dec:	e7c5      	b.n	400d7a <ili9341_send_draw_limits+0xbe>
  400dee:	2301      	movs	r3, #1
  400df0:	e7d3      	b.n	400d9a <ili9341_send_draw_limits+0xde>
  400df2:	2301      	movs	r3, #1
  400df4:	e7dc      	b.n	400db0 <ili9341_send_draw_limits+0xf4>
  400df6:	2301      	movs	r3, #1
  400df8:	e7e4      	b.n	400dc4 <ili9341_send_draw_limits+0x108>
  400dfa:	bf00      	nop
  400dfc:	00400c71 	.word	0x00400c71
  400e00:	20400acc 	.word	0x20400acc
  400e04:	40008000 	.word	0x40008000
  400e08:	20400ac8 	.word	0x20400ac8
  400e0c:	400e1400 	.word	0x400e1400
  400e10:	20400ace 	.word	0x20400ace
  400e14:	20400aca 	.word	0x20400aca

00400e18 <ili9341_interface_init>:
  400e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400e1c:	b084      	sub	sp, #16
  400e1e:	2703      	movs	r7, #3
  400e20:	ad04      	add	r5, sp, #16
  400e22:	f845 7d04 	str.w	r7, [r5, #-4]!
  400e26:	4c10      	ldr	r4, [pc, #64]	; (400e68 <ili9341_interface_init+0x50>)
  400e28:	4620      	mov	r0, r4
  400e2a:	4b10      	ldr	r3, [pc, #64]	; (400e6c <ili9341_interface_init+0x54>)
  400e2c:	4798      	blx	r3
  400e2e:	2600      	movs	r6, #0
  400e30:	9600      	str	r6, [sp, #0]
  400e32:	4b0f      	ldr	r3, [pc, #60]	; (400e70 <ili9341_interface_init+0x58>)
  400e34:	4632      	mov	r2, r6
  400e36:	4629      	mov	r1, r5
  400e38:	4620      	mov	r0, r4
  400e3a:	f8df 8048 	ldr.w	r8, [pc, #72]	; 400e84 <ili9341_interface_init+0x6c>
  400e3e:	47c0      	blx	r8
  400e40:	4632      	mov	r2, r6
  400e42:	4639      	mov	r1, r7
  400e44:	4620      	mov	r0, r4
  400e46:	4b0b      	ldr	r3, [pc, #44]	; (400e74 <ili9341_interface_init+0x5c>)
  400e48:	4798      	blx	r3
  400e4a:	2601      	movs	r6, #1
  400e4c:	6026      	str	r6, [r4, #0]
  400e4e:	4629      	mov	r1, r5
  400e50:	4620      	mov	r0, r4
  400e52:	4b09      	ldr	r3, [pc, #36]	; (400e78 <ili9341_interface_init+0x60>)
  400e54:	4798      	blx	r3
  400e56:	23f0      	movs	r3, #240	; 0xf0
  400e58:	60e3      	str	r3, [r4, #12]
  400e5a:	60e6      	str	r6, [r4, #12]
  400e5c:	4807      	ldr	r0, [pc, #28]	; (400e7c <ili9341_interface_init+0x64>)
  400e5e:	4b08      	ldr	r3, [pc, #32]	; (400e80 <ili9341_interface_init+0x68>)
  400e60:	4798      	blx	r3
  400e62:	b004      	add	sp, #16
  400e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400e68:	40008000 	.word	0x40008000
  400e6c:	004249ad 	.word	0x004249ad
  400e70:	02625a00 	.word	0x02625a00
  400e74:	0042536d 	.word	0x0042536d
  400e78:	00424a81 	.word	0x00424a81
  400e7c:	0073c0b7 	.word	0x0073c0b7
  400e80:	20400001 	.word	0x20400001
  400e84:	00424a01 	.word	0x00424a01

00400e88 <ili9341_reset_display>:
  400e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400e8a:	4d07      	ldr	r5, [pc, #28]	; (400ea8 <ili9341_reset_display+0x20>)
  400e8c:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
  400e90:	632e      	str	r6, [r5, #48]	; 0x30
  400e92:	4f06      	ldr	r7, [pc, #24]	; (400eac <ili9341_reset_display+0x24>)
  400e94:	4638      	mov	r0, r7
  400e96:	4c06      	ldr	r4, [pc, #24]	; (400eb0 <ili9341_reset_display+0x28>)
  400e98:	47a0      	blx	r4
  400e9a:	636e      	str	r6, [r5, #52]	; 0x34
  400e9c:	4638      	mov	r0, r7
  400e9e:	47a0      	blx	r4
  400ea0:	632e      	str	r6, [r5, #48]	; 0x30
  400ea2:	4804      	ldr	r0, [pc, #16]	; (400eb4 <ili9341_reset_display+0x2c>)
  400ea4:	47a0      	blx	r4
  400ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400ea8:	400e0e00 	.word	0x400e0e00
  400eac:	0007b784 	.word	0x0007b784
  400eb0:	20400001 	.word	0x20400001
  400eb4:	0073c0b7 	.word	0x0073c0b7

00400eb8 <ili9341_exit_standby>:
  400eb8:	b570      	push	{r4, r5, r6, lr}
  400eba:	2011      	movs	r0, #17
  400ebc:	4e06      	ldr	r6, [pc, #24]	; (400ed8 <ili9341_exit_standby+0x20>)
  400ebe:	47b0      	blx	r6
  400ec0:	4c06      	ldr	r4, [pc, #24]	; (400edc <ili9341_exit_standby+0x24>)
  400ec2:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
  400ec6:	6325      	str	r5, [r4, #48]	; 0x30
  400ec8:	4805      	ldr	r0, [pc, #20]	; (400ee0 <ili9341_exit_standby+0x28>)
  400eca:	4b06      	ldr	r3, [pc, #24]	; (400ee4 <ili9341_exit_standby+0x2c>)
  400ecc:	4798      	blx	r3
  400ece:	2029      	movs	r0, #41	; 0x29
  400ed0:	47b0      	blx	r6
  400ed2:	6325      	str	r5, [r4, #48]	; 0x30
  400ed4:	bd70      	pop	{r4, r5, r6, pc}
  400ed6:	bf00      	nop
  400ed8:	00400c71 	.word	0x00400c71
  400edc:	400e1400 	.word	0x400e1400
  400ee0:	0073c0b7 	.word	0x0073c0b7
  400ee4:	20400001 	.word	0x20400001

00400ee8 <ili9341_set_top_left_limit>:
  400ee8:	b508      	push	{r3, lr}
  400eea:	4b04      	ldr	r3, [pc, #16]	; (400efc <ili9341_set_top_left_limit+0x14>)
  400eec:	8018      	strh	r0, [r3, #0]
  400eee:	4b04      	ldr	r3, [pc, #16]	; (400f00 <ili9341_set_top_left_limit+0x18>)
  400ef0:	8019      	strh	r1, [r3, #0]
  400ef2:	2000      	movs	r0, #0
  400ef4:	4b03      	ldr	r3, [pc, #12]	; (400f04 <ili9341_set_top_left_limit+0x1c>)
  400ef6:	4798      	blx	r3
  400ef8:	bd08      	pop	{r3, pc}
  400efa:	bf00      	nop
  400efc:	20400acc 	.word	0x20400acc
  400f00:	20400ace 	.word	0x20400ace
  400f04:	00400cbd 	.word	0x00400cbd

00400f08 <ili9341_set_bottom_right_limit>:
  400f08:	b508      	push	{r3, lr}
  400f0a:	4b04      	ldr	r3, [pc, #16]	; (400f1c <ili9341_set_bottom_right_limit+0x14>)
  400f0c:	8018      	strh	r0, [r3, #0]
  400f0e:	4b04      	ldr	r3, [pc, #16]	; (400f20 <ili9341_set_bottom_right_limit+0x18>)
  400f10:	8019      	strh	r1, [r3, #0]
  400f12:	2001      	movs	r0, #1
  400f14:	4b03      	ldr	r3, [pc, #12]	; (400f24 <ili9341_set_bottom_right_limit+0x1c>)
  400f16:	4798      	blx	r3
  400f18:	bd08      	pop	{r3, pc}
  400f1a:	bf00      	nop
  400f1c:	20400ac8 	.word	0x20400ac8
  400f20:	20400aca 	.word	0x20400aca
  400f24:	00400cbd 	.word	0x00400cbd

00400f28 <ili9341_set_limits>:
  400f28:	b510      	push	{r4, lr}
  400f2a:	4c06      	ldr	r4, [pc, #24]	; (400f44 <ili9341_set_limits+0x1c>)
  400f2c:	8020      	strh	r0, [r4, #0]
  400f2e:	4806      	ldr	r0, [pc, #24]	; (400f48 <ili9341_set_limits+0x20>)
  400f30:	8001      	strh	r1, [r0, #0]
  400f32:	4906      	ldr	r1, [pc, #24]	; (400f4c <ili9341_set_limits+0x24>)
  400f34:	800a      	strh	r2, [r1, #0]
  400f36:	4a06      	ldr	r2, [pc, #24]	; (400f50 <ili9341_set_limits+0x28>)
  400f38:	8013      	strh	r3, [r2, #0]
  400f3a:	2001      	movs	r0, #1
  400f3c:	4b05      	ldr	r3, [pc, #20]	; (400f54 <ili9341_set_limits+0x2c>)
  400f3e:	4798      	blx	r3
  400f40:	bd10      	pop	{r4, pc}
  400f42:	bf00      	nop
  400f44:	20400acc 	.word	0x20400acc
  400f48:	20400ace 	.word	0x20400ace
  400f4c:	20400ac8 	.word	0x20400ac8
  400f50:	20400aca 	.word	0x20400aca
  400f54:	00400cbd 	.word	0x00400cbd

00400f58 <ili9341_copy_pixels_to_screen>:
  400f58:	b538      	push	{r3, r4, r5, lr}
  400f5a:	4605      	mov	r5, r0
  400f5c:	460c      	mov	r4, r1
  400f5e:	202c      	movs	r0, #44	; 0x2c
  400f60:	4b18      	ldr	r3, [pc, #96]	; (400fc4 <ili9341_copy_pixels_to_screen+0x6c>)
  400f62:	4798      	blx	r3
  400f64:	e018      	b.n	400f98 <ili9341_copy_pixels_to_screen+0x40>
  400f66:	782a      	ldrb	r2, [r5, #0]
  400f68:	4b17      	ldr	r3, [pc, #92]	; (400fc8 <ili9341_copy_pixels_to_screen+0x70>)
  400f6a:	691b      	ldr	r3, [r3, #16]
  400f6c:	f413 7f00 	tst.w	r3, #512	; 0x200
  400f70:	d122      	bne.n	400fb8 <ili9341_copy_pixels_to_screen+0x60>
  400f72:	2300      	movs	r3, #0
  400f74:	2b00      	cmp	r3, #0
  400f76:	d0f7      	beq.n	400f68 <ili9341_copy_pixels_to_screen+0x10>
  400f78:	4b13      	ldr	r3, [pc, #76]	; (400fc8 <ili9341_copy_pixels_to_screen+0x70>)
  400f7a:	60da      	str	r2, [r3, #12]
  400f7c:	882a      	ldrh	r2, [r5, #0]
  400f7e:	0a12      	lsrs	r2, r2, #8
  400f80:	4b11      	ldr	r3, [pc, #68]	; (400fc8 <ili9341_copy_pixels_to_screen+0x70>)
  400f82:	691b      	ldr	r3, [r3, #16]
  400f84:	f413 7f00 	tst.w	r3, #512	; 0x200
  400f88:	d118      	bne.n	400fbc <ili9341_copy_pixels_to_screen+0x64>
  400f8a:	2300      	movs	r3, #0
  400f8c:	2b00      	cmp	r3, #0
  400f8e:	d0f7      	beq.n	400f80 <ili9341_copy_pixels_to_screen+0x28>
  400f90:	4b0d      	ldr	r3, [pc, #52]	; (400fc8 <ili9341_copy_pixels_to_screen+0x70>)
  400f92:	60da      	str	r2, [r3, #12]
  400f94:	3502      	adds	r5, #2
  400f96:	460c      	mov	r4, r1
  400f98:	1e61      	subs	r1, r4, #1
  400f9a:	2c00      	cmp	r4, #0
  400f9c:	d1e3      	bne.n	400f66 <ili9341_copy_pixels_to_screen+0xe>
  400f9e:	4b0a      	ldr	r3, [pc, #40]	; (400fc8 <ili9341_copy_pixels_to_screen+0x70>)
  400fa0:	691b      	ldr	r3, [r3, #16]
  400fa2:	f413 7f00 	tst.w	r3, #512	; 0x200
  400fa6:	d10b      	bne.n	400fc0 <ili9341_copy_pixels_to_screen+0x68>
  400fa8:	4623      	mov	r3, r4
  400faa:	2b00      	cmp	r3, #0
  400fac:	d0f7      	beq.n	400f9e <ili9341_copy_pixels_to_screen+0x46>
  400fae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400fb2:	4b06      	ldr	r3, [pc, #24]	; (400fcc <ili9341_copy_pixels_to_screen+0x74>)
  400fb4:	631a      	str	r2, [r3, #48]	; 0x30
  400fb6:	bd38      	pop	{r3, r4, r5, pc}
  400fb8:	2301      	movs	r3, #1
  400fba:	e7db      	b.n	400f74 <ili9341_copy_pixels_to_screen+0x1c>
  400fbc:	2301      	movs	r3, #1
  400fbe:	e7e5      	b.n	400f8c <ili9341_copy_pixels_to_screen+0x34>
  400fc0:	2301      	movs	r3, #1
  400fc2:	e7f2      	b.n	400faa <ili9341_copy_pixels_to_screen+0x52>
  400fc4:	00400c71 	.word	0x00400c71
  400fc8:	40008000 	.word	0x40008000
  400fcc:	400e1400 	.word	0x400e1400

00400fd0 <ili9341_set_orientation>:
  400fd0:	b510      	push	{r4, lr}
  400fd2:	f080 0005 	eor.w	r0, r0, #5
  400fd6:	f010 0f01 	tst.w	r0, #1
  400fda:	d124      	bne.n	401026 <ili9341_set_orientation+0x56>
  400fdc:	2448      	movs	r4, #72	; 0x48
  400fde:	f010 0f02 	tst.w	r0, #2
  400fe2:	d001      	beq.n	400fe8 <ili9341_set_orientation+0x18>
  400fe4:	f044 0480 	orr.w	r4, r4, #128	; 0x80
  400fe8:	f010 0f04 	tst.w	r0, #4
  400fec:	d001      	beq.n	400ff2 <ili9341_set_orientation+0x22>
  400fee:	f044 0420 	orr.w	r4, r4, #32
  400ff2:	2036      	movs	r0, #54	; 0x36
  400ff4:	4b0f      	ldr	r3, [pc, #60]	; (401034 <ili9341_set_orientation+0x64>)
  400ff6:	4798      	blx	r3
  400ff8:	4b0f      	ldr	r3, [pc, #60]	; (401038 <ili9341_set_orientation+0x68>)
  400ffa:	691b      	ldr	r3, [r3, #16]
  400ffc:	f413 7f00 	tst.w	r3, #512	; 0x200
  401000:	d113      	bne.n	40102a <ili9341_set_orientation+0x5a>
  401002:	2300      	movs	r3, #0
  401004:	2b00      	cmp	r3, #0
  401006:	d0f7      	beq.n	400ff8 <ili9341_set_orientation+0x28>
  401008:	4b0b      	ldr	r3, [pc, #44]	; (401038 <ili9341_set_orientation+0x68>)
  40100a:	60dc      	str	r4, [r3, #12]
  40100c:	4b0a      	ldr	r3, [pc, #40]	; (401038 <ili9341_set_orientation+0x68>)
  40100e:	691b      	ldr	r3, [r3, #16]
  401010:	f413 7f00 	tst.w	r3, #512	; 0x200
  401014:	d10b      	bne.n	40102e <ili9341_set_orientation+0x5e>
  401016:	2300      	movs	r3, #0
  401018:	2b00      	cmp	r3, #0
  40101a:	d0f7      	beq.n	40100c <ili9341_set_orientation+0x3c>
  40101c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401020:	4b06      	ldr	r3, [pc, #24]	; (40103c <ili9341_set_orientation+0x6c>)
  401022:	631a      	str	r2, [r3, #48]	; 0x30
  401024:	bd10      	pop	{r4, pc}
  401026:	2408      	movs	r4, #8
  401028:	e7d9      	b.n	400fde <ili9341_set_orientation+0xe>
  40102a:	2301      	movs	r3, #1
  40102c:	e7ea      	b.n	401004 <ili9341_set_orientation+0x34>
  40102e:	2301      	movs	r3, #1
  401030:	e7f2      	b.n	401018 <ili9341_set_orientation+0x48>
  401032:	bf00      	nop
  401034:	00400c71 	.word	0x00400c71
  401038:	40008000 	.word	0x40008000
  40103c:	400e1400 	.word	0x400e1400

00401040 <ili9341_controller_init_registers>:
  401040:	b510      	push	{r4, lr}
  401042:	20cd      	movs	r0, #205	; 0xcd
  401044:	4ba9      	ldr	r3, [pc, #676]	; (4012ec <ili9341_controller_init_registers+0x2ac>)
  401046:	4798      	blx	r3
  401048:	4ba9      	ldr	r3, [pc, #676]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  40104a:	691b      	ldr	r3, [r3, #16]
  40104c:	f413 7f00 	tst.w	r3, #512	; 0x200
  401050:	f040 8195 	bne.w	40137e <ili9341_controller_init_registers+0x33e>
  401054:	2300      	movs	r3, #0
  401056:	2b00      	cmp	r3, #0
  401058:	d0f6      	beq.n	401048 <ili9341_controller_init_registers+0x8>
  40105a:	2239      	movs	r2, #57	; 0x39
  40105c:	4ba4      	ldr	r3, [pc, #656]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  40105e:	60da      	str	r2, [r3, #12]
  401060:	4ba3      	ldr	r3, [pc, #652]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  401062:	691b      	ldr	r3, [r3, #16]
  401064:	f413 7f00 	tst.w	r3, #512	; 0x200
  401068:	f040 818b 	bne.w	401382 <ili9341_controller_init_registers+0x342>
  40106c:	2300      	movs	r3, #0
  40106e:	2b00      	cmp	r3, #0
  401070:	d0f6      	beq.n	401060 <ili9341_controller_init_registers+0x20>
  401072:	222c      	movs	r2, #44	; 0x2c
  401074:	4b9e      	ldr	r3, [pc, #632]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  401076:	60da      	str	r2, [r3, #12]
  401078:	4b9d      	ldr	r3, [pc, #628]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  40107a:	691b      	ldr	r3, [r3, #16]
  40107c:	f413 7f00 	tst.w	r3, #512	; 0x200
  401080:	f040 8181 	bne.w	401386 <ili9341_controller_init_registers+0x346>
  401084:	2300      	movs	r3, #0
  401086:	2b00      	cmp	r3, #0
  401088:	d0f6      	beq.n	401078 <ili9341_controller_init_registers+0x38>
  40108a:	2200      	movs	r2, #0
  40108c:	4b98      	ldr	r3, [pc, #608]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  40108e:	60da      	str	r2, [r3, #12]
  401090:	4b97      	ldr	r3, [pc, #604]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  401092:	691b      	ldr	r3, [r3, #16]
  401094:	f413 7f00 	tst.w	r3, #512	; 0x200
  401098:	f040 8177 	bne.w	40138a <ili9341_controller_init_registers+0x34a>
  40109c:	2300      	movs	r3, #0
  40109e:	2b00      	cmp	r3, #0
  4010a0:	d0f6      	beq.n	401090 <ili9341_controller_init_registers+0x50>
  4010a2:	2234      	movs	r2, #52	; 0x34
  4010a4:	4b92      	ldr	r3, [pc, #584]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4010a6:	60da      	str	r2, [r3, #12]
  4010a8:	4b91      	ldr	r3, [pc, #580]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4010aa:	691b      	ldr	r3, [r3, #16]
  4010ac:	f413 7f00 	tst.w	r3, #512	; 0x200
  4010b0:	f040 816d 	bne.w	40138e <ili9341_controller_init_registers+0x34e>
  4010b4:	2300      	movs	r3, #0
  4010b6:	2b00      	cmp	r3, #0
  4010b8:	d0f6      	beq.n	4010a8 <ili9341_controller_init_registers+0x68>
  4010ba:	2202      	movs	r2, #2
  4010bc:	4b8c      	ldr	r3, [pc, #560]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4010be:	60da      	str	r2, [r3, #12]
  4010c0:	4b8b      	ldr	r3, [pc, #556]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4010c2:	691b      	ldr	r3, [r3, #16]
  4010c4:	f413 7f00 	tst.w	r3, #512	; 0x200
  4010c8:	f040 8163 	bne.w	401392 <ili9341_controller_init_registers+0x352>
  4010cc:	2300      	movs	r3, #0
  4010ce:	2b00      	cmp	r3, #0
  4010d0:	d0f6      	beq.n	4010c0 <ili9341_controller_init_registers+0x80>
  4010d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4010d6:	4b87      	ldr	r3, [pc, #540]	; (4012f4 <ili9341_controller_init_registers+0x2b4>)
  4010d8:	631a      	str	r2, [r3, #48]	; 0x30
  4010da:	20cf      	movs	r0, #207	; 0xcf
  4010dc:	4b83      	ldr	r3, [pc, #524]	; (4012ec <ili9341_controller_init_registers+0x2ac>)
  4010de:	4798      	blx	r3
  4010e0:	4b83      	ldr	r3, [pc, #524]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4010e2:	691b      	ldr	r3, [r3, #16]
  4010e4:	f413 7f00 	tst.w	r3, #512	; 0x200
  4010e8:	f040 8155 	bne.w	401396 <ili9341_controller_init_registers+0x356>
  4010ec:	2300      	movs	r3, #0
  4010ee:	2b00      	cmp	r3, #0
  4010f0:	d0f6      	beq.n	4010e0 <ili9341_controller_init_registers+0xa0>
  4010f2:	2200      	movs	r2, #0
  4010f4:	4b7e      	ldr	r3, [pc, #504]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4010f6:	60da      	str	r2, [r3, #12]
  4010f8:	4b7d      	ldr	r3, [pc, #500]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4010fa:	691b      	ldr	r3, [r3, #16]
  4010fc:	f413 7f00 	tst.w	r3, #512	; 0x200
  401100:	f040 814b 	bne.w	40139a <ili9341_controller_init_registers+0x35a>
  401104:	2300      	movs	r3, #0
  401106:	2b00      	cmp	r3, #0
  401108:	d0f6      	beq.n	4010f8 <ili9341_controller_init_registers+0xb8>
  40110a:	22aa      	movs	r2, #170	; 0xaa
  40110c:	4b78      	ldr	r3, [pc, #480]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  40110e:	60da      	str	r2, [r3, #12]
  401110:	4b77      	ldr	r3, [pc, #476]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  401112:	691b      	ldr	r3, [r3, #16]
  401114:	f413 7f00 	tst.w	r3, #512	; 0x200
  401118:	f040 8141 	bne.w	40139e <ili9341_controller_init_registers+0x35e>
  40111c:	2300      	movs	r3, #0
  40111e:	2b00      	cmp	r3, #0
  401120:	d0f6      	beq.n	401110 <ili9341_controller_init_registers+0xd0>
  401122:	22b0      	movs	r2, #176	; 0xb0
  401124:	4b72      	ldr	r3, [pc, #456]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  401126:	60da      	str	r2, [r3, #12]
  401128:	4b71      	ldr	r3, [pc, #452]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  40112a:	691b      	ldr	r3, [r3, #16]
  40112c:	f413 7f00 	tst.w	r3, #512	; 0x200
  401130:	f040 8137 	bne.w	4013a2 <ili9341_controller_init_registers+0x362>
  401134:	2300      	movs	r3, #0
  401136:	2b00      	cmp	r3, #0
  401138:	d0f6      	beq.n	401128 <ili9341_controller_init_registers+0xe8>
  40113a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40113e:	4b6d      	ldr	r3, [pc, #436]	; (4012f4 <ili9341_controller_init_registers+0x2b4>)
  401140:	631a      	str	r2, [r3, #48]	; 0x30
  401142:	20f7      	movs	r0, #247	; 0xf7
  401144:	4b69      	ldr	r3, [pc, #420]	; (4012ec <ili9341_controller_init_registers+0x2ac>)
  401146:	4798      	blx	r3
  401148:	4b69      	ldr	r3, [pc, #420]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  40114a:	691b      	ldr	r3, [r3, #16]
  40114c:	f413 7f00 	tst.w	r3, #512	; 0x200
  401150:	f040 8129 	bne.w	4013a6 <ili9341_controller_init_registers+0x366>
  401154:	2300      	movs	r3, #0
  401156:	2b00      	cmp	r3, #0
  401158:	d0f6      	beq.n	401148 <ili9341_controller_init_registers+0x108>
  40115a:	2230      	movs	r2, #48	; 0x30
  40115c:	4b64      	ldr	r3, [pc, #400]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  40115e:	60da      	str	r2, [r3, #12]
  401160:	4b63      	ldr	r3, [pc, #396]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  401162:	691b      	ldr	r3, [r3, #16]
  401164:	f413 7f00 	tst.w	r3, #512	; 0x200
  401168:	f040 811f 	bne.w	4013aa <ili9341_controller_init_registers+0x36a>
  40116c:	2300      	movs	r3, #0
  40116e:	2b00      	cmp	r3, #0
  401170:	d0f6      	beq.n	401160 <ili9341_controller_init_registers+0x120>
  401172:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401176:	4b5f      	ldr	r3, [pc, #380]	; (4012f4 <ili9341_controller_init_registers+0x2b4>)
  401178:	631a      	str	r2, [r3, #48]	; 0x30
  40117a:	20c0      	movs	r0, #192	; 0xc0
  40117c:	4b5b      	ldr	r3, [pc, #364]	; (4012ec <ili9341_controller_init_registers+0x2ac>)
  40117e:	4798      	blx	r3
  401180:	4b5b      	ldr	r3, [pc, #364]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  401182:	691b      	ldr	r3, [r3, #16]
  401184:	f413 7f00 	tst.w	r3, #512	; 0x200
  401188:	f040 8111 	bne.w	4013ae <ili9341_controller_init_registers+0x36e>
  40118c:	2300      	movs	r3, #0
  40118e:	2b00      	cmp	r3, #0
  401190:	d0f6      	beq.n	401180 <ili9341_controller_init_registers+0x140>
  401192:	2225      	movs	r2, #37	; 0x25
  401194:	4b56      	ldr	r3, [pc, #344]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  401196:	60da      	str	r2, [r3, #12]
  401198:	4b55      	ldr	r3, [pc, #340]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  40119a:	691b      	ldr	r3, [r3, #16]
  40119c:	f413 7f00 	tst.w	r3, #512	; 0x200
  4011a0:	f040 8107 	bne.w	4013b2 <ili9341_controller_init_registers+0x372>
  4011a4:	2300      	movs	r3, #0
  4011a6:	2b00      	cmp	r3, #0
  4011a8:	d0f6      	beq.n	401198 <ili9341_controller_init_registers+0x158>
  4011aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4011ae:	4b51      	ldr	r3, [pc, #324]	; (4012f4 <ili9341_controller_init_registers+0x2b4>)
  4011b0:	631a      	str	r2, [r3, #48]	; 0x30
  4011b2:	20c1      	movs	r0, #193	; 0xc1
  4011b4:	4b4d      	ldr	r3, [pc, #308]	; (4012ec <ili9341_controller_init_registers+0x2ac>)
  4011b6:	4798      	blx	r3
  4011b8:	4b4d      	ldr	r3, [pc, #308]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4011ba:	691b      	ldr	r3, [r3, #16]
  4011bc:	f413 7f00 	tst.w	r3, #512	; 0x200
  4011c0:	f040 80f9 	bne.w	4013b6 <ili9341_controller_init_registers+0x376>
  4011c4:	2300      	movs	r3, #0
  4011c6:	2b00      	cmp	r3, #0
  4011c8:	d0f6      	beq.n	4011b8 <ili9341_controller_init_registers+0x178>
  4011ca:	2211      	movs	r2, #17
  4011cc:	4b48      	ldr	r3, [pc, #288]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4011ce:	60da      	str	r2, [r3, #12]
  4011d0:	4b47      	ldr	r3, [pc, #284]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4011d2:	691b      	ldr	r3, [r3, #16]
  4011d4:	f413 7f00 	tst.w	r3, #512	; 0x200
  4011d8:	f040 80ef 	bne.w	4013ba <ili9341_controller_init_registers+0x37a>
  4011dc:	2300      	movs	r3, #0
  4011de:	2b00      	cmp	r3, #0
  4011e0:	d0f6      	beq.n	4011d0 <ili9341_controller_init_registers+0x190>
  4011e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4011e6:	4b43      	ldr	r3, [pc, #268]	; (4012f4 <ili9341_controller_init_registers+0x2b4>)
  4011e8:	631a      	str	r2, [r3, #48]	; 0x30
  4011ea:	20c5      	movs	r0, #197	; 0xc5
  4011ec:	4b3f      	ldr	r3, [pc, #252]	; (4012ec <ili9341_controller_init_registers+0x2ac>)
  4011ee:	4798      	blx	r3
  4011f0:	4b3f      	ldr	r3, [pc, #252]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4011f2:	691b      	ldr	r3, [r3, #16]
  4011f4:	f413 7f00 	tst.w	r3, #512	; 0x200
  4011f8:	f040 80e1 	bne.w	4013be <ili9341_controller_init_registers+0x37e>
  4011fc:	2300      	movs	r3, #0
  4011fe:	2b00      	cmp	r3, #0
  401200:	d0f6      	beq.n	4011f0 <ili9341_controller_init_registers+0x1b0>
  401202:	225c      	movs	r2, #92	; 0x5c
  401204:	4b3a      	ldr	r3, [pc, #232]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  401206:	60da      	str	r2, [r3, #12]
  401208:	4b39      	ldr	r3, [pc, #228]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  40120a:	691b      	ldr	r3, [r3, #16]
  40120c:	f413 7f00 	tst.w	r3, #512	; 0x200
  401210:	f040 80d7 	bne.w	4013c2 <ili9341_controller_init_registers+0x382>
  401214:	2300      	movs	r3, #0
  401216:	2b00      	cmp	r3, #0
  401218:	d0f6      	beq.n	401208 <ili9341_controller_init_registers+0x1c8>
  40121a:	224c      	movs	r2, #76	; 0x4c
  40121c:	4b34      	ldr	r3, [pc, #208]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  40121e:	60da      	str	r2, [r3, #12]
  401220:	4b33      	ldr	r3, [pc, #204]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  401222:	691b      	ldr	r3, [r3, #16]
  401224:	f413 7f00 	tst.w	r3, #512	; 0x200
  401228:	f040 80cd 	bne.w	4013c6 <ili9341_controller_init_registers+0x386>
  40122c:	2300      	movs	r3, #0
  40122e:	2b00      	cmp	r3, #0
  401230:	d0f6      	beq.n	401220 <ili9341_controller_init_registers+0x1e0>
  401232:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401236:	4b2f      	ldr	r3, [pc, #188]	; (4012f4 <ili9341_controller_init_registers+0x2b4>)
  401238:	631a      	str	r2, [r3, #48]	; 0x30
  40123a:	20c7      	movs	r0, #199	; 0xc7
  40123c:	4b2b      	ldr	r3, [pc, #172]	; (4012ec <ili9341_controller_init_registers+0x2ac>)
  40123e:	4798      	blx	r3
  401240:	4b2b      	ldr	r3, [pc, #172]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  401242:	691b      	ldr	r3, [r3, #16]
  401244:	f413 7f00 	tst.w	r3, #512	; 0x200
  401248:	f040 80bf 	bne.w	4013ca <ili9341_controller_init_registers+0x38a>
  40124c:	2300      	movs	r3, #0
  40124e:	2b00      	cmp	r3, #0
  401250:	d0f6      	beq.n	401240 <ili9341_controller_init_registers+0x200>
  401252:	2294      	movs	r2, #148	; 0x94
  401254:	4b26      	ldr	r3, [pc, #152]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  401256:	60da      	str	r2, [r3, #12]
  401258:	4b25      	ldr	r3, [pc, #148]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  40125a:	691b      	ldr	r3, [r3, #16]
  40125c:	f413 7f00 	tst.w	r3, #512	; 0x200
  401260:	f040 80b5 	bne.w	4013ce <ili9341_controller_init_registers+0x38e>
  401264:	2300      	movs	r3, #0
  401266:	2b00      	cmp	r3, #0
  401268:	d0f6      	beq.n	401258 <ili9341_controller_init_registers+0x218>
  40126a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40126e:	4b21      	ldr	r3, [pc, #132]	; (4012f4 <ili9341_controller_init_registers+0x2b4>)
  401270:	631a      	str	r2, [r3, #48]	; 0x30
  401272:	20e8      	movs	r0, #232	; 0xe8
  401274:	4b1d      	ldr	r3, [pc, #116]	; (4012ec <ili9341_controller_init_registers+0x2ac>)
  401276:	4798      	blx	r3
  401278:	4b1d      	ldr	r3, [pc, #116]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  40127a:	691b      	ldr	r3, [r3, #16]
  40127c:	f413 7f00 	tst.w	r3, #512	; 0x200
  401280:	f040 80a7 	bne.w	4013d2 <ili9341_controller_init_registers+0x392>
  401284:	2300      	movs	r3, #0
  401286:	2b00      	cmp	r3, #0
  401288:	d0f6      	beq.n	401278 <ili9341_controller_init_registers+0x238>
  40128a:	2285      	movs	r2, #133	; 0x85
  40128c:	4b18      	ldr	r3, [pc, #96]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  40128e:	60da      	str	r2, [r3, #12]
  401290:	4b17      	ldr	r3, [pc, #92]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  401292:	691b      	ldr	r3, [r3, #16]
  401294:	f413 7f00 	tst.w	r3, #512	; 0x200
  401298:	f040 809d 	bne.w	4013d6 <ili9341_controller_init_registers+0x396>
  40129c:	2300      	movs	r3, #0
  40129e:	2b00      	cmp	r3, #0
  4012a0:	d0f6      	beq.n	401290 <ili9341_controller_init_registers+0x250>
  4012a2:	2201      	movs	r2, #1
  4012a4:	4b12      	ldr	r3, [pc, #72]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4012a6:	60da      	str	r2, [r3, #12]
  4012a8:	4b11      	ldr	r3, [pc, #68]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4012aa:	691b      	ldr	r3, [r3, #16]
  4012ac:	f413 7f00 	tst.w	r3, #512	; 0x200
  4012b0:	f040 8093 	bne.w	4013da <ili9341_controller_init_registers+0x39a>
  4012b4:	2300      	movs	r3, #0
  4012b6:	2b00      	cmp	r3, #0
  4012b8:	d0f6      	beq.n	4012a8 <ili9341_controller_init_registers+0x268>
  4012ba:	2278      	movs	r2, #120	; 0x78
  4012bc:	4b0c      	ldr	r3, [pc, #48]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4012be:	60da      	str	r2, [r3, #12]
  4012c0:	4b0b      	ldr	r3, [pc, #44]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4012c2:	691b      	ldr	r3, [r3, #16]
  4012c4:	f413 7f00 	tst.w	r3, #512	; 0x200
  4012c8:	f040 8089 	bne.w	4013de <ili9341_controller_init_registers+0x39e>
  4012cc:	2300      	movs	r3, #0
  4012ce:	2b00      	cmp	r3, #0
  4012d0:	d0f6      	beq.n	4012c0 <ili9341_controller_init_registers+0x280>
  4012d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4012d6:	4b07      	ldr	r3, [pc, #28]	; (4012f4 <ili9341_controller_init_registers+0x2b4>)
  4012d8:	631a      	str	r2, [r3, #48]	; 0x30
  4012da:	20ea      	movs	r0, #234	; 0xea
  4012dc:	4b03      	ldr	r3, [pc, #12]	; (4012ec <ili9341_controller_init_registers+0x2ac>)
  4012de:	4798      	blx	r3
  4012e0:	4b03      	ldr	r3, [pc, #12]	; (4012f0 <ili9341_controller_init_registers+0x2b0>)
  4012e2:	691b      	ldr	r3, [r3, #16]
  4012e4:	f413 7f00 	tst.w	r3, #512	; 0x200
  4012e8:	e006      	b.n	4012f8 <ili9341_controller_init_registers+0x2b8>
  4012ea:	bf00      	nop
  4012ec:	00400c71 	.word	0x00400c71
  4012f0:	40008000 	.word	0x40008000
  4012f4:	400e1400 	.word	0x400e1400
  4012f8:	d173      	bne.n	4013e2 <ili9341_controller_init_registers+0x3a2>
  4012fa:	2300      	movs	r3, #0
  4012fc:	2b00      	cmp	r3, #0
  4012fe:	d0ef      	beq.n	4012e0 <ili9341_controller_init_registers+0x2a0>
  401300:	2200      	movs	r2, #0
  401302:	4b3d      	ldr	r3, [pc, #244]	; (4013f8 <ili9341_controller_init_registers+0x3b8>)
  401304:	60da      	str	r2, [r3, #12]
  401306:	4b3c      	ldr	r3, [pc, #240]	; (4013f8 <ili9341_controller_init_registers+0x3b8>)
  401308:	691b      	ldr	r3, [r3, #16]
  40130a:	f413 7f00 	tst.w	r3, #512	; 0x200
  40130e:	d16a      	bne.n	4013e6 <ili9341_controller_init_registers+0x3a6>
  401310:	2300      	movs	r3, #0
  401312:	2b00      	cmp	r3, #0
  401314:	d0f7      	beq.n	401306 <ili9341_controller_init_registers+0x2c6>
  401316:	2200      	movs	r2, #0
  401318:	4b37      	ldr	r3, [pc, #220]	; (4013f8 <ili9341_controller_init_registers+0x3b8>)
  40131a:	60da      	str	r2, [r3, #12]
  40131c:	4b36      	ldr	r3, [pc, #216]	; (4013f8 <ili9341_controller_init_registers+0x3b8>)
  40131e:	691b      	ldr	r3, [r3, #16]
  401320:	f413 7f00 	tst.w	r3, #512	; 0x200
  401324:	d161      	bne.n	4013ea <ili9341_controller_init_registers+0x3aa>
  401326:	2300      	movs	r3, #0
  401328:	2b00      	cmp	r3, #0
  40132a:	d0f7      	beq.n	40131c <ili9341_controller_init_registers+0x2dc>
  40132c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401330:	4b32      	ldr	r3, [pc, #200]	; (4013fc <ili9341_controller_init_registers+0x3bc>)
  401332:	631a      	str	r2, [r3, #48]	; 0x30
  401334:	203a      	movs	r0, #58	; 0x3a
  401336:	4b32      	ldr	r3, [pc, #200]	; (401400 <ili9341_controller_init_registers+0x3c0>)
  401338:	4798      	blx	r3
  40133a:	4b2f      	ldr	r3, [pc, #188]	; (4013f8 <ili9341_controller_init_registers+0x3b8>)
  40133c:	691b      	ldr	r3, [r3, #16]
  40133e:	f413 7f00 	tst.w	r3, #512	; 0x200
  401342:	d154      	bne.n	4013ee <ili9341_controller_init_registers+0x3ae>
  401344:	2300      	movs	r3, #0
  401346:	2b00      	cmp	r3, #0
  401348:	d0f7      	beq.n	40133a <ili9341_controller_init_registers+0x2fa>
  40134a:	2255      	movs	r2, #85	; 0x55
  40134c:	4b2a      	ldr	r3, [pc, #168]	; (4013f8 <ili9341_controller_init_registers+0x3b8>)
  40134e:	60da      	str	r2, [r3, #12]
  401350:	4b29      	ldr	r3, [pc, #164]	; (4013f8 <ili9341_controller_init_registers+0x3b8>)
  401352:	691b      	ldr	r3, [r3, #16]
  401354:	f413 7f00 	tst.w	r3, #512	; 0x200
  401358:	d14b      	bne.n	4013f2 <ili9341_controller_init_registers+0x3b2>
  40135a:	2300      	movs	r3, #0
  40135c:	2b00      	cmp	r3, #0
  40135e:	d0f7      	beq.n	401350 <ili9341_controller_init_registers+0x310>
  401360:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401364:	4b25      	ldr	r3, [pc, #148]	; (4013fc <ili9341_controller_init_registers+0x3bc>)
  401366:	631a      	str	r2, [r3, #48]	; 0x30
  401368:	2000      	movs	r0, #0
  40136a:	4b26      	ldr	r3, [pc, #152]	; (401404 <ili9341_controller_init_registers+0x3c4>)
  40136c:	4798      	blx	r3
  40136e:	23f0      	movs	r3, #240	; 0xf0
  401370:	f44f 72a0 	mov.w	r2, #320	; 0x140
  401374:	2100      	movs	r1, #0
  401376:	4608      	mov	r0, r1
  401378:	4c23      	ldr	r4, [pc, #140]	; (401408 <ili9341_controller_init_registers+0x3c8>)
  40137a:	47a0      	blx	r4
  40137c:	bd10      	pop	{r4, pc}
  40137e:	2301      	movs	r3, #1
  401380:	e669      	b.n	401056 <ili9341_controller_init_registers+0x16>
  401382:	2301      	movs	r3, #1
  401384:	e673      	b.n	40106e <ili9341_controller_init_registers+0x2e>
  401386:	2301      	movs	r3, #1
  401388:	e67d      	b.n	401086 <ili9341_controller_init_registers+0x46>
  40138a:	2301      	movs	r3, #1
  40138c:	e687      	b.n	40109e <ili9341_controller_init_registers+0x5e>
  40138e:	2301      	movs	r3, #1
  401390:	e691      	b.n	4010b6 <ili9341_controller_init_registers+0x76>
  401392:	2301      	movs	r3, #1
  401394:	e69b      	b.n	4010ce <ili9341_controller_init_registers+0x8e>
  401396:	2301      	movs	r3, #1
  401398:	e6a9      	b.n	4010ee <ili9341_controller_init_registers+0xae>
  40139a:	2301      	movs	r3, #1
  40139c:	e6b3      	b.n	401106 <ili9341_controller_init_registers+0xc6>
  40139e:	2301      	movs	r3, #1
  4013a0:	e6bd      	b.n	40111e <ili9341_controller_init_registers+0xde>
  4013a2:	2301      	movs	r3, #1
  4013a4:	e6c7      	b.n	401136 <ili9341_controller_init_registers+0xf6>
  4013a6:	2301      	movs	r3, #1
  4013a8:	e6d5      	b.n	401156 <ili9341_controller_init_registers+0x116>
  4013aa:	2301      	movs	r3, #1
  4013ac:	e6df      	b.n	40116e <ili9341_controller_init_registers+0x12e>
  4013ae:	2301      	movs	r3, #1
  4013b0:	e6ed      	b.n	40118e <ili9341_controller_init_registers+0x14e>
  4013b2:	2301      	movs	r3, #1
  4013b4:	e6f7      	b.n	4011a6 <ili9341_controller_init_registers+0x166>
  4013b6:	2301      	movs	r3, #1
  4013b8:	e705      	b.n	4011c6 <ili9341_controller_init_registers+0x186>
  4013ba:	2301      	movs	r3, #1
  4013bc:	e70f      	b.n	4011de <ili9341_controller_init_registers+0x19e>
  4013be:	2301      	movs	r3, #1
  4013c0:	e71d      	b.n	4011fe <ili9341_controller_init_registers+0x1be>
  4013c2:	2301      	movs	r3, #1
  4013c4:	e727      	b.n	401216 <ili9341_controller_init_registers+0x1d6>
  4013c6:	2301      	movs	r3, #1
  4013c8:	e731      	b.n	40122e <ili9341_controller_init_registers+0x1ee>
  4013ca:	2301      	movs	r3, #1
  4013cc:	e73f      	b.n	40124e <ili9341_controller_init_registers+0x20e>
  4013ce:	2301      	movs	r3, #1
  4013d0:	e749      	b.n	401266 <ili9341_controller_init_registers+0x226>
  4013d2:	2301      	movs	r3, #1
  4013d4:	e757      	b.n	401286 <ili9341_controller_init_registers+0x246>
  4013d6:	2301      	movs	r3, #1
  4013d8:	e761      	b.n	40129e <ili9341_controller_init_registers+0x25e>
  4013da:	2301      	movs	r3, #1
  4013dc:	e76b      	b.n	4012b6 <ili9341_controller_init_registers+0x276>
  4013de:	2301      	movs	r3, #1
  4013e0:	e775      	b.n	4012ce <ili9341_controller_init_registers+0x28e>
  4013e2:	2301      	movs	r3, #1
  4013e4:	e78a      	b.n	4012fc <ili9341_controller_init_registers+0x2bc>
  4013e6:	2301      	movs	r3, #1
  4013e8:	e793      	b.n	401312 <ili9341_controller_init_registers+0x2d2>
  4013ea:	2301      	movs	r3, #1
  4013ec:	e79c      	b.n	401328 <ili9341_controller_init_registers+0x2e8>
  4013ee:	2301      	movs	r3, #1
  4013f0:	e7a9      	b.n	401346 <ili9341_controller_init_registers+0x306>
  4013f2:	2301      	movs	r3, #1
  4013f4:	e7b2      	b.n	40135c <ili9341_controller_init_registers+0x31c>
  4013f6:	bf00      	nop
  4013f8:	40008000 	.word	0x40008000
  4013fc:	400e1400 	.word	0x400e1400
  401400:	00400c71 	.word	0x00400c71
  401404:	00400fd1 	.word	0x00400fd1
  401408:	00400f29 	.word	0x00400f29

0040140c <ili9341_init>:
  40140c:	b508      	push	{r3, lr}
  40140e:	4b04      	ldr	r3, [pc, #16]	; (401420 <ili9341_init+0x14>)
  401410:	4798      	blx	r3
  401412:	4b04      	ldr	r3, [pc, #16]	; (401424 <ili9341_init+0x18>)
  401414:	4798      	blx	r3
  401416:	4b04      	ldr	r3, [pc, #16]	; (401428 <ili9341_init+0x1c>)
  401418:	4798      	blx	r3
  40141a:	4b04      	ldr	r3, [pc, #16]	; (40142c <ili9341_init+0x20>)
  40141c:	4798      	blx	r3
  40141e:	bd08      	pop	{r3, pc}
  401420:	00400e19 	.word	0x00400e19
  401424:	00400e89 	.word	0x00400e89
  401428:	00400eb9 	.word	0x00400eb9
  40142c:	00401041 	.word	0x00401041

00401430 <afec_find_inst_num>:
  401430:	4b03      	ldr	r3, [pc, #12]	; (401440 <afec_find_inst_num+0x10>)
  401432:	4298      	cmp	r0, r3
  401434:	d001      	beq.n	40143a <afec_find_inst_num+0xa>
  401436:	2000      	movs	r0, #0
  401438:	4770      	bx	lr
  40143a:	2001      	movs	r0, #1
  40143c:	4770      	bx	lr
  40143e:	bf00      	nop
  401440:	40064000 	.word	0x40064000

00401444 <afec_find_pid>:
  401444:	4b03      	ldr	r3, [pc, #12]	; (401454 <afec_find_pid+0x10>)
  401446:	4298      	cmp	r0, r3
  401448:	d001      	beq.n	40144e <afec_find_pid+0xa>
  40144a:	201d      	movs	r0, #29
  40144c:	4770      	bx	lr
  40144e:	2028      	movs	r0, #40	; 0x28
  401450:	4770      	bx	lr
  401452:	bf00      	nop
  401454:	40064000 	.word	0x40064000

00401458 <afec_set_config>:
  401458:	b410      	push	{r4}
  40145a:	7ccb      	ldrb	r3, [r1, #19]
  40145c:	b373      	cbz	r3, 4014bc <afec_set_config+0x64>
  40145e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  401462:	684a      	ldr	r2, [r1, #4]
  401464:	688c      	ldr	r4, [r1, #8]
  401466:	fbb2 f2f4 	udiv	r2, r2, r4
  40146a:	3a01      	subs	r2, #1
  40146c:	0212      	lsls	r2, r2, #8
  40146e:	b292      	uxth	r2, r2
  401470:	4313      	orrs	r3, r2
  401472:	7c0a      	ldrb	r2, [r1, #16]
  401474:	0612      	lsls	r2, r2, #24
  401476:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
  40147a:	4313      	orrs	r3, r2
  40147c:	7c4a      	ldrb	r2, [r1, #17]
  40147e:	0712      	lsls	r2, r2, #28
  401480:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
  401484:	4313      	orrs	r3, r2
  401486:	68ca      	ldr	r2, [r1, #12]
  401488:	4313      	orrs	r3, r2
  40148a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  40148e:	6043      	str	r3, [r0, #4]
  401490:	7d0b      	ldrb	r3, [r1, #20]
  401492:	b1ab      	cbz	r3, 4014c0 <afec_set_config+0x68>
  401494:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  401498:	680a      	ldr	r2, [r1, #0]
  40149a:	431a      	orrs	r2, r3
  40149c:	7d4b      	ldrb	r3, [r1, #21]
  40149e:	b98b      	cbnz	r3, 4014c4 <afec_set_config+0x6c>
  4014a0:	2300      	movs	r3, #0
  4014a2:	4313      	orrs	r3, r2
  4014a4:	6083      	str	r3, [r0, #8]
  4014a6:	7d8b      	ldrb	r3, [r1, #22]
  4014a8:	021b      	lsls	r3, r3, #8
  4014aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
  4014ae:	f043 030c 	orr.w	r3, r3, #12
  4014b2:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
  4014b6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4014ba:	4770      	bx	lr
  4014bc:	2300      	movs	r3, #0
  4014be:	e7d0      	b.n	401462 <afec_set_config+0xa>
  4014c0:	2300      	movs	r3, #0
  4014c2:	e7e9      	b.n	401498 <afec_set_config+0x40>
  4014c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  4014c8:	e7eb      	b.n	4014a2 <afec_set_config+0x4a>
	...

004014cc <afec_interrupt>:
  4014cc:	b508      	push	{r3, lr}
  4014ce:	eb01 1100 	add.w	r1, r1, r0, lsl #4
  4014d2:	4b03      	ldr	r3, [pc, #12]	; (4014e0 <afec_interrupt+0x14>)
  4014d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
  4014d8:	b103      	cbz	r3, 4014dc <afec_interrupt+0x10>
  4014da:	4798      	blx	r3
  4014dc:	bd08      	pop	{r3, pc}
  4014de:	bf00      	nop
  4014e0:	2043a1b4 	.word	0x2043a1b4

004014e4 <afec_process_callback>:
  4014e4:	b530      	push	{r4, r5, lr}
  4014e6:	b083      	sub	sp, #12
  4014e8:	6b01      	ldr	r1, [r0, #48]	; 0x30
  4014ea:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  4014ec:	400b      	ands	r3, r1
  4014ee:	9301      	str	r3, [sp, #4]
  4014f0:	4b17      	ldr	r3, [pc, #92]	; (401550 <afec_process_callback+0x6c>)
  4014f2:	4798      	blx	r3
  4014f4:	4605      	mov	r5, r0
  4014f6:	2400      	movs	r4, #0
  4014f8:	e009      	b.n	40150e <afec_process_callback+0x2a>
  4014fa:	2c0e      	cmp	r4, #14
  4014fc:	d81a      	bhi.n	401534 <afec_process_callback+0x50>
  4014fe:	f104 020c 	add.w	r2, r4, #12
  401502:	2301      	movs	r3, #1
  401504:	4093      	lsls	r3, r2
  401506:	9a01      	ldr	r2, [sp, #4]
  401508:	4213      	tst	r3, r2
  40150a:	d10e      	bne.n	40152a <afec_process_callback+0x46>
  40150c:	3401      	adds	r4, #1
  40150e:	2c0f      	cmp	r4, #15
  401510:	d81c      	bhi.n	40154c <afec_process_callback+0x68>
  401512:	2c0b      	cmp	r4, #11
  401514:	d8f1      	bhi.n	4014fa <afec_process_callback+0x16>
  401516:	2301      	movs	r3, #1
  401518:	40a3      	lsls	r3, r4
  40151a:	9a01      	ldr	r2, [sp, #4]
  40151c:	4213      	tst	r3, r2
  40151e:	d0f5      	beq.n	40150c <afec_process_callback+0x28>
  401520:	4621      	mov	r1, r4
  401522:	b2e8      	uxtb	r0, r5
  401524:	4b0b      	ldr	r3, [pc, #44]	; (401554 <afec_process_callback+0x70>)
  401526:	4798      	blx	r3
  401528:	e7f0      	b.n	40150c <afec_process_callback+0x28>
  40152a:	4621      	mov	r1, r4
  40152c:	b2e8      	uxtb	r0, r5
  40152e:	4b09      	ldr	r3, [pc, #36]	; (401554 <afec_process_callback+0x70>)
  401530:	4798      	blx	r3
  401532:	e7eb      	b.n	40150c <afec_process_callback+0x28>
  401534:	f104 020f 	add.w	r2, r4, #15
  401538:	2301      	movs	r3, #1
  40153a:	4093      	lsls	r3, r2
  40153c:	9a01      	ldr	r2, [sp, #4]
  40153e:	4213      	tst	r3, r2
  401540:	d0e4      	beq.n	40150c <afec_process_callback+0x28>
  401542:	4621      	mov	r1, r4
  401544:	b2e8      	uxtb	r0, r5
  401546:	4b03      	ldr	r3, [pc, #12]	; (401554 <afec_process_callback+0x70>)
  401548:	4798      	blx	r3
  40154a:	e7df      	b.n	40150c <afec_process_callback+0x28>
  40154c:	b003      	add	sp, #12
  40154e:	bd30      	pop	{r4, r5, pc}
  401550:	00401431 	.word	0x00401431
  401554:	004014cd 	.word	0x004014cd

00401558 <afec_ch_set_config>:
  401558:	b430      	push	{r4, r5}
  40155a:	6e04      	ldr	r4, [r0, #96]	; 0x60
  40155c:	2301      	movs	r3, #1
  40155e:	408b      	lsls	r3, r1
  401560:	ea24 0403 	bic.w	r4, r4, r3
  401564:	7815      	ldrb	r5, [r2, #0]
  401566:	b175      	cbz	r5, 401586 <afec_ch_set_config+0x2e>
  401568:	4323      	orrs	r3, r4
  40156a:	6603      	str	r3, [r0, #96]	; 0x60
  40156c:	6d43      	ldr	r3, [r0, #84]	; 0x54
  40156e:	004c      	lsls	r4, r1, #1
  401570:	2103      	movs	r1, #3
  401572:	40a1      	lsls	r1, r4
  401574:	ea23 0101 	bic.w	r1, r3, r1
  401578:	7853      	ldrb	r3, [r2, #1]
  40157a:	fa03 f404 	lsl.w	r4, r3, r4
  40157e:	4321      	orrs	r1, r4
  401580:	6541      	str	r1, [r0, #84]	; 0x54
  401582:	bc30      	pop	{r4, r5}
  401584:	4770      	bx	lr
  401586:	2300      	movs	r3, #0
  401588:	e7ee      	b.n	401568 <afec_ch_set_config+0x10>

0040158a <afec_temp_sensor_set_config>:
  40158a:	780b      	ldrb	r3, [r1, #0]
  40158c:	b94b      	cbnz	r3, 4015a2 <afec_temp_sensor_set_config+0x18>
  40158e:	2300      	movs	r3, #0
  401590:	784a      	ldrb	r2, [r1, #1]
  401592:	4313      	orrs	r3, r2
  401594:	6703      	str	r3, [r0, #112]	; 0x70
  401596:	884b      	ldrh	r3, [r1, #2]
  401598:	888a      	ldrh	r2, [r1, #4]
  40159a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40159e:	6743      	str	r3, [r0, #116]	; 0x74
  4015a0:	4770      	bx	lr
  4015a2:	2301      	movs	r3, #1
  4015a4:	e7f4      	b.n	401590 <afec_temp_sensor_set_config+0x6>
	...

004015a8 <afec_get_config_defaults>:
  4015a8:	2200      	movs	r2, #0
  4015aa:	6002      	str	r2, [r0, #0]
  4015ac:	4b08      	ldr	r3, [pc, #32]	; (4015d0 <afec_get_config_defaults+0x28>)
  4015ae:	6043      	str	r3, [r0, #4]
  4015b0:	4b08      	ldr	r3, [pc, #32]	; (4015d4 <afec_get_config_defaults+0x2c>)
  4015b2:	6083      	str	r3, [r0, #8]
  4015b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  4015b8:	60c3      	str	r3, [r0, #12]
  4015ba:	2302      	movs	r3, #2
  4015bc:	7403      	strb	r3, [r0, #16]
  4015be:	2301      	movs	r3, #1
  4015c0:	7443      	strb	r3, [r0, #17]
  4015c2:	7483      	strb	r3, [r0, #18]
  4015c4:	74c2      	strb	r2, [r0, #19]
  4015c6:	7503      	strb	r3, [r0, #20]
  4015c8:	7543      	strb	r3, [r0, #21]
  4015ca:	7583      	strb	r3, [r0, #22]
  4015cc:	4770      	bx	lr
  4015ce:	bf00      	nop
  4015d0:	11e1a300 	.word	0x11e1a300
  4015d4:	005b8d80 	.word	0x005b8d80

004015d8 <afec_ch_get_config_defaults>:
  4015d8:	2300      	movs	r3, #0
  4015da:	7003      	strb	r3, [r0, #0]
  4015dc:	2301      	movs	r3, #1
  4015de:	7043      	strb	r3, [r0, #1]
  4015e0:	4770      	bx	lr

004015e2 <afec_temp_sensor_get_config_defaults>:
  4015e2:	2300      	movs	r3, #0
  4015e4:	7003      	strb	r3, [r0, #0]
  4015e6:	2320      	movs	r3, #32
  4015e8:	7043      	strb	r3, [r0, #1]
  4015ea:	23ff      	movs	r3, #255	; 0xff
  4015ec:	8043      	strh	r3, [r0, #2]
  4015ee:	f640 73ff 	movw	r3, #4095	; 0xfff
  4015f2:	8083      	strh	r3, [r0, #4]
  4015f4:	4770      	bx	lr
	...

004015f8 <afec_init>:
  4015f8:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4015fa:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4015fe:	d001      	beq.n	401604 <afec_init+0xc>
  401600:	2019      	movs	r0, #25
  401602:	4770      	bx	lr
  401604:	b510      	push	{r4, lr}
  401606:	4604      	mov	r4, r0
  401608:	2301      	movs	r3, #1
  40160a:	6003      	str	r3, [r0, #0]
  40160c:	4b10      	ldr	r3, [pc, #64]	; (401650 <afec_init+0x58>)
  40160e:	4798      	blx	r3
  401610:	4b10      	ldr	r3, [pc, #64]	; (401654 <afec_init+0x5c>)
  401612:	429c      	cmp	r4, r3
  401614:	d00c      	beq.n	401630 <afec_init+0x38>
  401616:	4b10      	ldr	r3, [pc, #64]	; (401658 <afec_init+0x60>)
  401618:	429c      	cmp	r4, r3
  40161a:	d00b      	beq.n	401634 <afec_init+0x3c>
  40161c:	2000      	movs	r0, #0
  40161e:	bd10      	pop	{r4, pc}
  401620:	2100      	movs	r1, #0
  401622:	4a0e      	ldr	r2, [pc, #56]	; (40165c <afec_init+0x64>)
  401624:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  401628:	3301      	adds	r3, #1
  40162a:	2b0f      	cmp	r3, #15
  40162c:	d9f8      	bls.n	401620 <afec_init+0x28>
  40162e:	e7f2      	b.n	401616 <afec_init+0x1e>
  401630:	2300      	movs	r3, #0
  401632:	e7fa      	b.n	40162a <afec_init+0x32>
  401634:	2300      	movs	r3, #0
  401636:	2b0f      	cmp	r3, #15
  401638:	d807      	bhi.n	40164a <afec_init+0x52>
  40163a:	f103 0110 	add.w	r1, r3, #16
  40163e:	2000      	movs	r0, #0
  401640:	4a06      	ldr	r2, [pc, #24]	; (40165c <afec_init+0x64>)
  401642:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  401646:	3301      	adds	r3, #1
  401648:	e7f5      	b.n	401636 <afec_init+0x3e>
  40164a:	2000      	movs	r0, #0
  40164c:	bd10      	pop	{r4, pc}
  40164e:	bf00      	nop
  401650:	00401459 	.word	0x00401459
  401654:	4003c000 	.word	0x4003c000
  401658:	40064000 	.word	0x40064000
  40165c:	2043a1b4 	.word	0x2043a1b4

00401660 <afec_enable_interrupt>:
  401660:	4b0f      	ldr	r3, [pc, #60]	; (4016a0 <afec_enable_interrupt+0x40>)
  401662:	4299      	cmp	r1, r3
  401664:	d007      	beq.n	401676 <afec_enable_interrupt+0x16>
  401666:	290b      	cmp	r1, #11
  401668:	d80b      	bhi.n	401682 <afec_enable_interrupt+0x22>
  40166a:	d006      	beq.n	40167a <afec_enable_interrupt+0x1a>
  40166c:	2301      	movs	r3, #1
  40166e:	fa03 f101 	lsl.w	r1, r3, r1
  401672:	6241      	str	r1, [r0, #36]	; 0x24
  401674:	4770      	bx	lr
  401676:	6243      	str	r3, [r0, #36]	; 0x24
  401678:	4770      	bx	lr
  40167a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40167e:	6243      	str	r3, [r0, #36]	; 0x24
  401680:	4770      	bx	lr
  401682:	290e      	cmp	r1, #14
  401684:	d905      	bls.n	401692 <afec_enable_interrupt+0x32>
  401686:	310f      	adds	r1, #15
  401688:	2301      	movs	r3, #1
  40168a:	fa03 f101 	lsl.w	r1, r3, r1
  40168e:	6241      	str	r1, [r0, #36]	; 0x24
  401690:	4770      	bx	lr
  401692:	310c      	adds	r1, #12
  401694:	2301      	movs	r3, #1
  401696:	fa03 f101 	lsl.w	r1, r3, r1
  40169a:	6241      	str	r1, [r0, #36]	; 0x24
  40169c:	4770      	bx	lr
  40169e:	bf00      	nop
  4016a0:	47000fff 	.word	0x47000fff

004016a4 <afec_set_callback>:
  4016a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4016a6:	4606      	mov	r6, r0
  4016a8:	460d      	mov	r5, r1
  4016aa:	4617      	mov	r7, r2
  4016ac:	461c      	mov	r4, r3
  4016ae:	4b12      	ldr	r3, [pc, #72]	; (4016f8 <afec_set_callback+0x54>)
  4016b0:	4798      	blx	r3
  4016b2:	eb05 1200 	add.w	r2, r5, r0, lsl #4
  4016b6:	4b11      	ldr	r3, [pc, #68]	; (4016fc <afec_set_callback+0x58>)
  4016b8:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4016bc:	b160      	cbz	r0, 4016d8 <afec_set_callback+0x34>
  4016be:	2801      	cmp	r0, #1
  4016c0:	d114      	bne.n	4016ec <afec_set_callback+0x48>
  4016c2:	4b0f      	ldr	r3, [pc, #60]	; (401700 <afec_set_callback+0x5c>)
  4016c4:	f44f 7280 	mov.w	r2, #256	; 0x100
  4016c8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  4016cc:	0164      	lsls	r4, r4, #5
  4016ce:	b2e4      	uxtb	r4, r4
  4016d0:	f883 4328 	strb.w	r4, [r3, #808]	; 0x328
  4016d4:	605a      	str	r2, [r3, #4]
  4016d6:	e009      	b.n	4016ec <afec_set_callback+0x48>
  4016d8:	4b09      	ldr	r3, [pc, #36]	; (401700 <afec_set_callback+0x5c>)
  4016da:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4016de:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  4016e2:	0164      	lsls	r4, r4, #5
  4016e4:	b2e4      	uxtb	r4, r4
  4016e6:	f883 431d 	strb.w	r4, [r3, #797]	; 0x31d
  4016ea:	601a      	str	r2, [r3, #0]
  4016ec:	4629      	mov	r1, r5
  4016ee:	4630      	mov	r0, r6
  4016f0:	4b04      	ldr	r3, [pc, #16]	; (401704 <afec_set_callback+0x60>)
  4016f2:	4798      	blx	r3
  4016f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4016f6:	bf00      	nop
  4016f8:	00401431 	.word	0x00401431
  4016fc:	2043a1b4 	.word	0x2043a1b4
  401700:	e000e100 	.word	0xe000e100
  401704:	00401661 	.word	0x00401661

00401708 <AFEC0_Handler>:
  401708:	b508      	push	{r3, lr}
  40170a:	4802      	ldr	r0, [pc, #8]	; (401714 <AFEC0_Handler+0xc>)
  40170c:	4b02      	ldr	r3, [pc, #8]	; (401718 <AFEC0_Handler+0x10>)
  40170e:	4798      	blx	r3
  401710:	bd08      	pop	{r3, pc}
  401712:	bf00      	nop
  401714:	4003c000 	.word	0x4003c000
  401718:	004014e5 	.word	0x004014e5

0040171c <AFEC1_Handler>:
  40171c:	b508      	push	{r3, lr}
  40171e:	4802      	ldr	r0, [pc, #8]	; (401728 <AFEC1_Handler+0xc>)
  401720:	4b02      	ldr	r3, [pc, #8]	; (40172c <AFEC1_Handler+0x10>)
  401722:	4798      	blx	r3
  401724:	bd08      	pop	{r3, pc}
  401726:	bf00      	nop
  401728:	40064000 	.word	0x40064000
  40172c:	004014e5 	.word	0x004014e5

00401730 <afec_enable>:
  401730:	b500      	push	{lr}
  401732:	b083      	sub	sp, #12
  401734:	4b11      	ldr	r3, [pc, #68]	; (40177c <afec_enable+0x4c>)
  401736:	4798      	blx	r3
  401738:	4b11      	ldr	r3, [pc, #68]	; (401780 <afec_enable+0x50>)
  40173a:	4798      	blx	r3
  40173c:	4b11      	ldr	r3, [pc, #68]	; (401784 <afec_enable+0x54>)
  40173e:	789b      	ldrb	r3, [r3, #2]
  401740:	2bff      	cmp	r3, #255	; 0xff
  401742:	d01a      	beq.n	40177a <afec_enable+0x4a>
  401744:	f3ef 8310 	mrs	r3, PRIMASK
  401748:	fab3 f383 	clz	r3, r3
  40174c:	095b      	lsrs	r3, r3, #5
  40174e:	9301      	str	r3, [sp, #4]
  401750:	b672      	cpsid	i
  401752:	f3bf 8f5f 	dmb	sy
  401756:	2200      	movs	r2, #0
  401758:	4b0b      	ldr	r3, [pc, #44]	; (401788 <afec_enable+0x58>)
  40175a:	701a      	strb	r2, [r3, #0]
  40175c:	9901      	ldr	r1, [sp, #4]
  40175e:	4a09      	ldr	r2, [pc, #36]	; (401784 <afec_enable+0x54>)
  401760:	7893      	ldrb	r3, [r2, #2]
  401762:	3301      	adds	r3, #1
  401764:	7093      	strb	r3, [r2, #2]
  401766:	b129      	cbz	r1, 401774 <afec_enable+0x44>
  401768:	2201      	movs	r2, #1
  40176a:	4b07      	ldr	r3, [pc, #28]	; (401788 <afec_enable+0x58>)
  40176c:	701a      	strb	r2, [r3, #0]
  40176e:	f3bf 8f5f 	dmb	sy
  401772:	b662      	cpsie	i
  401774:	b003      	add	sp, #12
  401776:	f85d fb04 	ldr.w	pc, [sp], #4
  40177a:	e7fe      	b.n	40177a <afec_enable+0x4a>
  40177c:	00401445 	.word	0x00401445
  401780:	004252b5 	.word	0x004252b5
  401784:	2043a1ac 	.word	0x2043a1ac
  401788:	204000e4 	.word	0x204000e4

0040178c <vListInitialise>:
  40178c:	f100 0308 	add.w	r3, r0, #8
  401790:	6043      	str	r3, [r0, #4]
  401792:	f04f 32ff 	mov.w	r2, #4294967295
  401796:	6082      	str	r2, [r0, #8]
  401798:	60c3      	str	r3, [r0, #12]
  40179a:	6103      	str	r3, [r0, #16]
  40179c:	2300      	movs	r3, #0
  40179e:	6003      	str	r3, [r0, #0]
  4017a0:	4770      	bx	lr

004017a2 <vListInitialiseItem>:
  4017a2:	2300      	movs	r3, #0
  4017a4:	6103      	str	r3, [r0, #16]
  4017a6:	4770      	bx	lr

004017a8 <vListInsertEnd>:
  4017a8:	6843      	ldr	r3, [r0, #4]
  4017aa:	604b      	str	r3, [r1, #4]
  4017ac:	689a      	ldr	r2, [r3, #8]
  4017ae:	608a      	str	r2, [r1, #8]
  4017b0:	689a      	ldr	r2, [r3, #8]
  4017b2:	6051      	str	r1, [r2, #4]
  4017b4:	6099      	str	r1, [r3, #8]
  4017b6:	6108      	str	r0, [r1, #16]
  4017b8:	6803      	ldr	r3, [r0, #0]
  4017ba:	3301      	adds	r3, #1
  4017bc:	6003      	str	r3, [r0, #0]
  4017be:	4770      	bx	lr

004017c0 <vListInsert>:
  4017c0:	b430      	push	{r4, r5}
  4017c2:	680d      	ldr	r5, [r1, #0]
  4017c4:	f1b5 3fff 	cmp.w	r5, #4294967295
  4017c8:	d002      	beq.n	4017d0 <vListInsert+0x10>
  4017ca:	f100 0208 	add.w	r2, r0, #8
  4017ce:	e002      	b.n	4017d6 <vListInsert+0x16>
  4017d0:	6902      	ldr	r2, [r0, #16]
  4017d2:	e004      	b.n	4017de <vListInsert+0x1e>
  4017d4:	461a      	mov	r2, r3
  4017d6:	6853      	ldr	r3, [r2, #4]
  4017d8:	681c      	ldr	r4, [r3, #0]
  4017da:	42a5      	cmp	r5, r4
  4017dc:	d2fa      	bcs.n	4017d4 <vListInsert+0x14>
  4017de:	6853      	ldr	r3, [r2, #4]
  4017e0:	604b      	str	r3, [r1, #4]
  4017e2:	6099      	str	r1, [r3, #8]
  4017e4:	608a      	str	r2, [r1, #8]
  4017e6:	6051      	str	r1, [r2, #4]
  4017e8:	6108      	str	r0, [r1, #16]
  4017ea:	6803      	ldr	r3, [r0, #0]
  4017ec:	3301      	adds	r3, #1
  4017ee:	6003      	str	r3, [r0, #0]
  4017f0:	bc30      	pop	{r4, r5}
  4017f2:	4770      	bx	lr

004017f4 <uxListRemove>:
  4017f4:	6903      	ldr	r3, [r0, #16]
  4017f6:	6842      	ldr	r2, [r0, #4]
  4017f8:	6881      	ldr	r1, [r0, #8]
  4017fa:	6091      	str	r1, [r2, #8]
  4017fc:	6882      	ldr	r2, [r0, #8]
  4017fe:	6841      	ldr	r1, [r0, #4]
  401800:	6051      	str	r1, [r2, #4]
  401802:	685a      	ldr	r2, [r3, #4]
  401804:	4290      	cmp	r0, r2
  401806:	d005      	beq.n	401814 <uxListRemove+0x20>
  401808:	2200      	movs	r2, #0
  40180a:	6102      	str	r2, [r0, #16]
  40180c:	6818      	ldr	r0, [r3, #0]
  40180e:	3801      	subs	r0, #1
  401810:	6018      	str	r0, [r3, #0]
  401812:	4770      	bx	lr
  401814:	6882      	ldr	r2, [r0, #8]
  401816:	605a      	str	r2, [r3, #4]
  401818:	e7f6      	b.n	401808 <uxListRemove+0x14>
	...

0040181c <prvTaskExitError>:
  40181c:	4b0d      	ldr	r3, [pc, #52]	; (401854 <prvTaskExitError+0x38>)
  40181e:	681b      	ldr	r3, [r3, #0]
  401820:	f1b3 3fff 	cmp.w	r3, #4294967295
  401824:	d00a      	beq.n	40183c <prvTaskExitError+0x20>
  401826:	f04f 0380 	mov.w	r3, #128	; 0x80
  40182a:	b672      	cpsid	i
  40182c:	f383 8811 	msr	BASEPRI, r3
  401830:	f3bf 8f6f 	isb	sy
  401834:	f3bf 8f4f 	dsb	sy
  401838:	b662      	cpsie	i
  40183a:	e7fe      	b.n	40183a <prvTaskExitError+0x1e>
  40183c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401840:	b672      	cpsid	i
  401842:	f383 8811 	msr	BASEPRI, r3
  401846:	f3bf 8f6f 	isb	sy
  40184a:	f3bf 8f4f 	dsb	sy
  40184e:	b662      	cpsie	i
  401850:	e7fe      	b.n	401850 <prvTaskExitError+0x34>
  401852:	bf00      	nop
  401854:	2040006c 	.word	0x2040006c

00401858 <prvPortStartFirstTask>:
  401858:	4806      	ldr	r0, [pc, #24]	; (401874 <prvPortStartFirstTask+0x1c>)
  40185a:	6800      	ldr	r0, [r0, #0]
  40185c:	6800      	ldr	r0, [r0, #0]
  40185e:	f380 8808 	msr	MSP, r0
  401862:	b662      	cpsie	i
  401864:	b661      	cpsie	f
  401866:	f3bf 8f4f 	dsb	sy
  40186a:	f3bf 8f6f 	isb	sy
  40186e:	df00      	svc	0
  401870:	bf00      	nop
  401872:	0000      	.short	0x0000
  401874:	e000ed08 	.word	0xe000ed08

00401878 <vPortEnableVFP>:
  401878:	f8df 000c 	ldr.w	r0, [pc, #12]	; 401888 <vPortEnableVFP+0x10>
  40187c:	6801      	ldr	r1, [r0, #0]
  40187e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401882:	6001      	str	r1, [r0, #0]
  401884:	4770      	bx	lr
  401886:	0000      	.short	0x0000
  401888:	e000ed88 	.word	0xe000ed88

0040188c <pxPortInitialiseStack>:
  40188c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  401890:	f840 3c04 	str.w	r3, [r0, #-4]
  401894:	f840 1c08 	str.w	r1, [r0, #-8]
  401898:	4b05      	ldr	r3, [pc, #20]	; (4018b0 <pxPortInitialiseStack+0x24>)
  40189a:	f840 3c0c 	str.w	r3, [r0, #-12]
  40189e:	f840 2c20 	str.w	r2, [r0, #-32]
  4018a2:	f06f 0302 	mvn.w	r3, #2
  4018a6:	f840 3c24 	str.w	r3, [r0, #-36]
  4018aa:	3844      	subs	r0, #68	; 0x44
  4018ac:	4770      	bx	lr
  4018ae:	bf00      	nop
  4018b0:	0040181d 	.word	0x0040181d

004018b4 <SVC_Handler>:
  4018b4:	4b06      	ldr	r3, [pc, #24]	; (4018d0 <pxCurrentTCBConst2>)
  4018b6:	6819      	ldr	r1, [r3, #0]
  4018b8:	6808      	ldr	r0, [r1, #0]
  4018ba:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4018be:	f380 8809 	msr	PSP, r0
  4018c2:	f3bf 8f6f 	isb	sy
  4018c6:	f04f 0000 	mov.w	r0, #0
  4018ca:	f380 8811 	msr	BASEPRI, r0
  4018ce:	4770      	bx	lr

004018d0 <pxCurrentTCBConst2>:
  4018d0:	2040c2e0 	.word	0x2040c2e0
  4018d4:	4770      	bx	lr
  4018d6:	bf00      	nop

004018d8 <vPortEnterCritical>:
  4018d8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4018dc:	b672      	cpsid	i
  4018de:	f383 8811 	msr	BASEPRI, r3
  4018e2:	f3bf 8f6f 	isb	sy
  4018e6:	f3bf 8f4f 	dsb	sy
  4018ea:	b662      	cpsie	i
  4018ec:	4a0b      	ldr	r2, [pc, #44]	; (40191c <vPortEnterCritical+0x44>)
  4018ee:	6813      	ldr	r3, [r2, #0]
  4018f0:	3301      	adds	r3, #1
  4018f2:	6013      	str	r3, [r2, #0]
  4018f4:	2b01      	cmp	r3, #1
  4018f6:	d10f      	bne.n	401918 <vPortEnterCritical+0x40>
  4018f8:	4b09      	ldr	r3, [pc, #36]	; (401920 <vPortEnterCritical+0x48>)
  4018fa:	681b      	ldr	r3, [r3, #0]
  4018fc:	f013 0fff 	tst.w	r3, #255	; 0xff
  401900:	d00a      	beq.n	401918 <vPortEnterCritical+0x40>
  401902:	f04f 0380 	mov.w	r3, #128	; 0x80
  401906:	b672      	cpsid	i
  401908:	f383 8811 	msr	BASEPRI, r3
  40190c:	f3bf 8f6f 	isb	sy
  401910:	f3bf 8f4f 	dsb	sy
  401914:	b662      	cpsie	i
  401916:	e7fe      	b.n	401916 <vPortEnterCritical+0x3e>
  401918:	4770      	bx	lr
  40191a:	bf00      	nop
  40191c:	2040006c 	.word	0x2040006c
  401920:	e000ed04 	.word	0xe000ed04

00401924 <vPortExitCritical>:
  401924:	4b0a      	ldr	r3, [pc, #40]	; (401950 <vPortExitCritical+0x2c>)
  401926:	681b      	ldr	r3, [r3, #0]
  401928:	b953      	cbnz	r3, 401940 <vPortExitCritical+0x1c>
  40192a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40192e:	b672      	cpsid	i
  401930:	f383 8811 	msr	BASEPRI, r3
  401934:	f3bf 8f6f 	isb	sy
  401938:	f3bf 8f4f 	dsb	sy
  40193c:	b662      	cpsie	i
  40193e:	e7fe      	b.n	40193e <vPortExitCritical+0x1a>
  401940:	3b01      	subs	r3, #1
  401942:	4a03      	ldr	r2, [pc, #12]	; (401950 <vPortExitCritical+0x2c>)
  401944:	6013      	str	r3, [r2, #0]
  401946:	b90b      	cbnz	r3, 40194c <vPortExitCritical+0x28>
  401948:	f383 8811 	msr	BASEPRI, r3
  40194c:	4770      	bx	lr
  40194e:	bf00      	nop
  401950:	2040006c 	.word	0x2040006c

00401954 <PendSV_Handler>:
  401954:	f3ef 8009 	mrs	r0, PSP
  401958:	f3bf 8f6f 	isb	sy
  40195c:	4b15      	ldr	r3, [pc, #84]	; (4019b4 <pxCurrentTCBConst>)
  40195e:	681a      	ldr	r2, [r3, #0]
  401960:	f01e 0f10 	tst.w	lr, #16
  401964:	bf08      	it	eq
  401966:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  40196a:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40196e:	6010      	str	r0, [r2, #0]
  401970:	f84d 3d04 	str.w	r3, [sp, #-4]!
  401974:	f04f 0080 	mov.w	r0, #128	; 0x80
  401978:	b672      	cpsid	i
  40197a:	f380 8811 	msr	BASEPRI, r0
  40197e:	f3bf 8f4f 	dsb	sy
  401982:	f3bf 8f6f 	isb	sy
  401986:	b662      	cpsie	i
  401988:	f001 f960 	bl	402c4c <vTaskSwitchContext>
  40198c:	f04f 0000 	mov.w	r0, #0
  401990:	f380 8811 	msr	BASEPRI, r0
  401994:	bc08      	pop	{r3}
  401996:	6819      	ldr	r1, [r3, #0]
  401998:	6808      	ldr	r0, [r1, #0]
  40199a:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40199e:	f01e 0f10 	tst.w	lr, #16
  4019a2:	bf08      	it	eq
  4019a4:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  4019a8:	f380 8809 	msr	PSP, r0
  4019ac:	f3bf 8f6f 	isb	sy
  4019b0:	4770      	bx	lr
  4019b2:	bf00      	nop

004019b4 <pxCurrentTCBConst>:
  4019b4:	2040c2e0 	.word	0x2040c2e0
  4019b8:	4770      	bx	lr
  4019ba:	bf00      	nop

004019bc <SysTick_Handler>:
  4019bc:	b508      	push	{r3, lr}
  4019be:	f3ef 8311 	mrs	r3, BASEPRI
  4019c2:	f04f 0280 	mov.w	r2, #128	; 0x80
  4019c6:	b672      	cpsid	i
  4019c8:	f382 8811 	msr	BASEPRI, r2
  4019cc:	f3bf 8f6f 	isb	sy
  4019d0:	f3bf 8f4f 	dsb	sy
  4019d4:	b662      	cpsie	i
  4019d6:	4b05      	ldr	r3, [pc, #20]	; (4019ec <SysTick_Handler+0x30>)
  4019d8:	4798      	blx	r3
  4019da:	b118      	cbz	r0, 4019e4 <SysTick_Handler+0x28>
  4019dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4019e0:	4b03      	ldr	r3, [pc, #12]	; (4019f0 <SysTick_Handler+0x34>)
  4019e2:	601a      	str	r2, [r3, #0]
  4019e4:	2300      	movs	r3, #0
  4019e6:	f383 8811 	msr	BASEPRI, r3
  4019ea:	bd08      	pop	{r3, pc}
  4019ec:	004028c1 	.word	0x004028c1
  4019f0:	e000ed04 	.word	0xe000ed04

004019f4 <vPortSetupTimerInterrupt>:
  4019f4:	4a03      	ldr	r2, [pc, #12]	; (401a04 <vPortSetupTimerInterrupt+0x10>)
  4019f6:	4b04      	ldr	r3, [pc, #16]	; (401a08 <vPortSetupTimerInterrupt+0x14>)
  4019f8:	601a      	str	r2, [r3, #0]
  4019fa:	2207      	movs	r2, #7
  4019fc:	3b04      	subs	r3, #4
  4019fe:	601a      	str	r2, [r3, #0]
  401a00:	4770      	bx	lr
  401a02:	bf00      	nop
  401a04:	0003a97f 	.word	0x0003a97f
  401a08:	e000e014 	.word	0xe000e014

00401a0c <xPortStartScheduler>:
  401a0c:	b500      	push	{lr}
  401a0e:	b083      	sub	sp, #12
  401a10:	4b22      	ldr	r3, [pc, #136]	; (401a9c <xPortStartScheduler+0x90>)
  401a12:	781a      	ldrb	r2, [r3, #0]
  401a14:	b2d2      	uxtb	r2, r2
  401a16:	9201      	str	r2, [sp, #4]
  401a18:	22ff      	movs	r2, #255	; 0xff
  401a1a:	701a      	strb	r2, [r3, #0]
  401a1c:	781b      	ldrb	r3, [r3, #0]
  401a1e:	b2db      	uxtb	r3, r3
  401a20:	f88d 3003 	strb.w	r3, [sp, #3]
  401a24:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401a2c:	4a1c      	ldr	r2, [pc, #112]	; (401aa0 <xPortStartScheduler+0x94>)
  401a2e:	7013      	strb	r3, [r2, #0]
  401a30:	2207      	movs	r2, #7
  401a32:	4b1c      	ldr	r3, [pc, #112]	; (401aa4 <xPortStartScheduler+0x98>)
  401a34:	601a      	str	r2, [r3, #0]
  401a36:	e009      	b.n	401a4c <xPortStartScheduler+0x40>
  401a38:	4a1a      	ldr	r2, [pc, #104]	; (401aa4 <xPortStartScheduler+0x98>)
  401a3a:	6813      	ldr	r3, [r2, #0]
  401a3c:	3b01      	subs	r3, #1
  401a3e:	6013      	str	r3, [r2, #0]
  401a40:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401a44:	005b      	lsls	r3, r3, #1
  401a46:	b2db      	uxtb	r3, r3
  401a48:	f88d 3003 	strb.w	r3, [sp, #3]
  401a4c:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401a50:	f013 0f80 	tst.w	r3, #128	; 0x80
  401a54:	d1f0      	bne.n	401a38 <xPortStartScheduler+0x2c>
  401a56:	4a13      	ldr	r2, [pc, #76]	; (401aa4 <xPortStartScheduler+0x98>)
  401a58:	6813      	ldr	r3, [r2, #0]
  401a5a:	021b      	lsls	r3, r3, #8
  401a5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401a60:	6013      	str	r3, [r2, #0]
  401a62:	9b01      	ldr	r3, [sp, #4]
  401a64:	b2db      	uxtb	r3, r3
  401a66:	4a0d      	ldr	r2, [pc, #52]	; (401a9c <xPortStartScheduler+0x90>)
  401a68:	7013      	strb	r3, [r2, #0]
  401a6a:	4b0f      	ldr	r3, [pc, #60]	; (401aa8 <xPortStartScheduler+0x9c>)
  401a6c:	681a      	ldr	r2, [r3, #0]
  401a6e:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  401a72:	601a      	str	r2, [r3, #0]
  401a74:	681a      	ldr	r2, [r3, #0]
  401a76:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  401a7a:	601a      	str	r2, [r3, #0]
  401a7c:	4b0b      	ldr	r3, [pc, #44]	; (401aac <xPortStartScheduler+0xa0>)
  401a7e:	4798      	blx	r3
  401a80:	2200      	movs	r2, #0
  401a82:	4b0b      	ldr	r3, [pc, #44]	; (401ab0 <xPortStartScheduler+0xa4>)
  401a84:	601a      	str	r2, [r3, #0]
  401a86:	4b0b      	ldr	r3, [pc, #44]	; (401ab4 <xPortStartScheduler+0xa8>)
  401a88:	4798      	blx	r3
  401a8a:	4a0b      	ldr	r2, [pc, #44]	; (401ab8 <xPortStartScheduler+0xac>)
  401a8c:	6813      	ldr	r3, [r2, #0]
  401a8e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  401a92:	6013      	str	r3, [r2, #0]
  401a94:	4b09      	ldr	r3, [pc, #36]	; (401abc <xPortStartScheduler+0xb0>)
  401a96:	4798      	blx	r3
  401a98:	4b09      	ldr	r3, [pc, #36]	; (401ac0 <xPortStartScheduler+0xb4>)
  401a9a:	4798      	blx	r3
  401a9c:	e000e400 	.word	0xe000e400
  401aa0:	20400ad0 	.word	0x20400ad0
  401aa4:	20400ad4 	.word	0x20400ad4
  401aa8:	e000ed20 	.word	0xe000ed20
  401aac:	004019f5 	.word	0x004019f5
  401ab0:	2040006c 	.word	0x2040006c
  401ab4:	00401879 	.word	0x00401879
  401ab8:	e000ef34 	.word	0xe000ef34
  401abc:	00401859 	.word	0x00401859
  401ac0:	0040181d 	.word	0x0040181d

00401ac4 <vPortValidateInterruptPriority>:
  401ac4:	f3ef 8305 	mrs	r3, IPSR
  401ac8:	2b0f      	cmp	r3, #15
  401aca:	d911      	bls.n	401af0 <vPortValidateInterruptPriority+0x2c>
  401acc:	4a12      	ldr	r2, [pc, #72]	; (401b18 <vPortValidateInterruptPriority+0x54>)
  401ace:	5c9b      	ldrb	r3, [r3, r2]
  401ad0:	b2db      	uxtb	r3, r3
  401ad2:	4a12      	ldr	r2, [pc, #72]	; (401b1c <vPortValidateInterruptPriority+0x58>)
  401ad4:	7812      	ldrb	r2, [r2, #0]
  401ad6:	4293      	cmp	r3, r2
  401ad8:	d20a      	bcs.n	401af0 <vPortValidateInterruptPriority+0x2c>
  401ada:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ade:	b672      	cpsid	i
  401ae0:	f383 8811 	msr	BASEPRI, r3
  401ae4:	f3bf 8f6f 	isb	sy
  401ae8:	f3bf 8f4f 	dsb	sy
  401aec:	b662      	cpsie	i
  401aee:	e7fe      	b.n	401aee <vPortValidateInterruptPriority+0x2a>
  401af0:	4b0b      	ldr	r3, [pc, #44]	; (401b20 <vPortValidateInterruptPriority+0x5c>)
  401af2:	681b      	ldr	r3, [r3, #0]
  401af4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401af8:	4a0a      	ldr	r2, [pc, #40]	; (401b24 <vPortValidateInterruptPriority+0x60>)
  401afa:	6812      	ldr	r2, [r2, #0]
  401afc:	4293      	cmp	r3, r2
  401afe:	d90a      	bls.n	401b16 <vPortValidateInterruptPriority+0x52>
  401b00:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b04:	b672      	cpsid	i
  401b06:	f383 8811 	msr	BASEPRI, r3
  401b0a:	f3bf 8f6f 	isb	sy
  401b0e:	f3bf 8f4f 	dsb	sy
  401b12:	b662      	cpsie	i
  401b14:	e7fe      	b.n	401b14 <vPortValidateInterruptPriority+0x50>
  401b16:	4770      	bx	lr
  401b18:	e000e3f0 	.word	0xe000e3f0
  401b1c:	20400ad0 	.word	0x20400ad0
  401b20:	e000ed0c 	.word	0xe000ed0c
  401b24:	20400ad4 	.word	0x20400ad4

00401b28 <pvPortMalloc>:
  401b28:	b538      	push	{r3, r4, r5, lr}
  401b2a:	4604      	mov	r4, r0
  401b2c:	f010 0f07 	tst.w	r0, #7
  401b30:	d002      	beq.n	401b38 <pvPortMalloc+0x10>
  401b32:	f020 0407 	bic.w	r4, r0, #7
  401b36:	3408      	adds	r4, #8
  401b38:	4b12      	ldr	r3, [pc, #72]	; (401b84 <pvPortMalloc+0x5c>)
  401b3a:	4798      	blx	r3
  401b3c:	4b12      	ldr	r3, [pc, #72]	; (401b88 <pvPortMalloc+0x60>)
  401b3e:	681b      	ldr	r3, [r3, #0]
  401b40:	b193      	cbz	r3, 401b68 <pvPortMalloc+0x40>
  401b42:	4b12      	ldr	r3, [pc, #72]	; (401b8c <pvPortMalloc+0x64>)
  401b44:	681b      	ldr	r3, [r3, #0]
  401b46:	441c      	add	r4, r3
  401b48:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  401b4c:	4294      	cmp	r4, r2
  401b4e:	d811      	bhi.n	401b74 <pvPortMalloc+0x4c>
  401b50:	42a3      	cmp	r3, r4
  401b52:	d211      	bcs.n	401b78 <pvPortMalloc+0x50>
  401b54:	4a0c      	ldr	r2, [pc, #48]	; (401b88 <pvPortMalloc+0x60>)
  401b56:	6815      	ldr	r5, [r2, #0]
  401b58:	441d      	add	r5, r3
  401b5a:	4b0c      	ldr	r3, [pc, #48]	; (401b8c <pvPortMalloc+0x64>)
  401b5c:	601c      	str	r4, [r3, #0]
  401b5e:	4b0c      	ldr	r3, [pc, #48]	; (401b90 <pvPortMalloc+0x68>)
  401b60:	4798      	blx	r3
  401b62:	b15d      	cbz	r5, 401b7c <pvPortMalloc+0x54>
  401b64:	4628      	mov	r0, r5
  401b66:	bd38      	pop	{r3, r4, r5, pc}
  401b68:	4b0a      	ldr	r3, [pc, #40]	; (401b94 <pvPortMalloc+0x6c>)
  401b6a:	f023 0307 	bic.w	r3, r3, #7
  401b6e:	4a06      	ldr	r2, [pc, #24]	; (401b88 <pvPortMalloc+0x60>)
  401b70:	6013      	str	r3, [r2, #0]
  401b72:	e7e6      	b.n	401b42 <pvPortMalloc+0x1a>
  401b74:	2500      	movs	r5, #0
  401b76:	e7f2      	b.n	401b5e <pvPortMalloc+0x36>
  401b78:	2500      	movs	r5, #0
  401b7a:	e7f0      	b.n	401b5e <pvPortMalloc+0x36>
  401b7c:	4b06      	ldr	r3, [pc, #24]	; (401b98 <pvPortMalloc+0x70>)
  401b7e:	4798      	blx	r3
  401b80:	e7f0      	b.n	401b64 <pvPortMalloc+0x3c>
  401b82:	bf00      	nop
  401b84:	004028a5 	.word	0x004028a5
  401b88:	20400ad8 	.word	0x20400ad8
  401b8c:	2040c2dc 	.word	0x2040c2dc
  401b90:	00402a05 	.word	0x00402a05
  401b94:	20400ae4 	.word	0x20400ae4
  401b98:	00425f3f 	.word	0x00425f3f

00401b9c <vPortFree>:
  401b9c:	b150      	cbz	r0, 401bb4 <vPortFree+0x18>
  401b9e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ba2:	b672      	cpsid	i
  401ba4:	f383 8811 	msr	BASEPRI, r3
  401ba8:	f3bf 8f6f 	isb	sy
  401bac:	f3bf 8f4f 	dsb	sy
  401bb0:	b662      	cpsie	i
  401bb2:	e7fe      	b.n	401bb2 <vPortFree+0x16>
  401bb4:	4770      	bx	lr
	...

00401bb8 <prvIsQueueFull>:
  401bb8:	b510      	push	{r4, lr}
  401bba:	4604      	mov	r4, r0
  401bbc:	4b06      	ldr	r3, [pc, #24]	; (401bd8 <prvIsQueueFull+0x20>)
  401bbe:	4798      	blx	r3
  401bc0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401bc2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401bc4:	429a      	cmp	r2, r3
  401bc6:	d004      	beq.n	401bd2 <prvIsQueueFull+0x1a>
  401bc8:	2400      	movs	r4, #0
  401bca:	4b04      	ldr	r3, [pc, #16]	; (401bdc <prvIsQueueFull+0x24>)
  401bcc:	4798      	blx	r3
  401bce:	4620      	mov	r0, r4
  401bd0:	bd10      	pop	{r4, pc}
  401bd2:	2401      	movs	r4, #1
  401bd4:	e7f9      	b.n	401bca <prvIsQueueFull+0x12>
  401bd6:	bf00      	nop
  401bd8:	004018d9 	.word	0x004018d9
  401bdc:	00401925 	.word	0x00401925

00401be0 <prvIsQueueEmpty>:
  401be0:	b510      	push	{r4, lr}
  401be2:	4604      	mov	r4, r0
  401be4:	4b05      	ldr	r3, [pc, #20]	; (401bfc <prvIsQueueEmpty+0x1c>)
  401be6:	4798      	blx	r3
  401be8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401bea:	b123      	cbz	r3, 401bf6 <prvIsQueueEmpty+0x16>
  401bec:	2400      	movs	r4, #0
  401bee:	4b04      	ldr	r3, [pc, #16]	; (401c00 <prvIsQueueEmpty+0x20>)
  401bf0:	4798      	blx	r3
  401bf2:	4620      	mov	r0, r4
  401bf4:	bd10      	pop	{r4, pc}
  401bf6:	2401      	movs	r4, #1
  401bf8:	e7f9      	b.n	401bee <prvIsQueueEmpty+0xe>
  401bfa:	bf00      	nop
  401bfc:	004018d9 	.word	0x004018d9
  401c00:	00401925 	.word	0x00401925

00401c04 <prvCopyDataToQueue>:
  401c04:	b538      	push	{r3, r4, r5, lr}
  401c06:	4604      	mov	r4, r0
  401c08:	4615      	mov	r5, r2
  401c0a:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401c0c:	b95a      	cbnz	r2, 401c26 <prvCopyDataToQueue+0x22>
  401c0e:	6803      	ldr	r3, [r0, #0]
  401c10:	2b00      	cmp	r3, #0
  401c12:	d12e      	bne.n	401c72 <prvCopyDataToQueue+0x6e>
  401c14:	6840      	ldr	r0, [r0, #4]
  401c16:	4b1b      	ldr	r3, [pc, #108]	; (401c84 <prvCopyDataToQueue+0x80>)
  401c18:	4798      	blx	r3
  401c1a:	2300      	movs	r3, #0
  401c1c:	6063      	str	r3, [r4, #4]
  401c1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401c20:	3301      	adds	r3, #1
  401c22:	63a3      	str	r3, [r4, #56]	; 0x38
  401c24:	bd38      	pop	{r3, r4, r5, pc}
  401c26:	b96d      	cbnz	r5, 401c44 <prvCopyDataToQueue+0x40>
  401c28:	6880      	ldr	r0, [r0, #8]
  401c2a:	4b17      	ldr	r3, [pc, #92]	; (401c88 <prvCopyDataToQueue+0x84>)
  401c2c:	4798      	blx	r3
  401c2e:	6c22      	ldr	r2, [r4, #64]	; 0x40
  401c30:	68a3      	ldr	r3, [r4, #8]
  401c32:	4413      	add	r3, r2
  401c34:	60a3      	str	r3, [r4, #8]
  401c36:	6862      	ldr	r2, [r4, #4]
  401c38:	4293      	cmp	r3, r2
  401c3a:	d31c      	bcc.n	401c76 <prvCopyDataToQueue+0x72>
  401c3c:	6823      	ldr	r3, [r4, #0]
  401c3e:	60a3      	str	r3, [r4, #8]
  401c40:	2000      	movs	r0, #0
  401c42:	e7ec      	b.n	401c1e <prvCopyDataToQueue+0x1a>
  401c44:	68c0      	ldr	r0, [r0, #12]
  401c46:	4b10      	ldr	r3, [pc, #64]	; (401c88 <prvCopyDataToQueue+0x84>)
  401c48:	4798      	blx	r3
  401c4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401c4c:	425b      	negs	r3, r3
  401c4e:	68e2      	ldr	r2, [r4, #12]
  401c50:	441a      	add	r2, r3
  401c52:	60e2      	str	r2, [r4, #12]
  401c54:	6821      	ldr	r1, [r4, #0]
  401c56:	428a      	cmp	r2, r1
  401c58:	d202      	bcs.n	401c60 <prvCopyDataToQueue+0x5c>
  401c5a:	6862      	ldr	r2, [r4, #4]
  401c5c:	4413      	add	r3, r2
  401c5e:	60e3      	str	r3, [r4, #12]
  401c60:	2d02      	cmp	r5, #2
  401c62:	d10a      	bne.n	401c7a <prvCopyDataToQueue+0x76>
  401c64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401c66:	b153      	cbz	r3, 401c7e <prvCopyDataToQueue+0x7a>
  401c68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401c6a:	3b01      	subs	r3, #1
  401c6c:	63a3      	str	r3, [r4, #56]	; 0x38
  401c6e:	2000      	movs	r0, #0
  401c70:	e7d5      	b.n	401c1e <prvCopyDataToQueue+0x1a>
  401c72:	2000      	movs	r0, #0
  401c74:	e7d3      	b.n	401c1e <prvCopyDataToQueue+0x1a>
  401c76:	2000      	movs	r0, #0
  401c78:	e7d1      	b.n	401c1e <prvCopyDataToQueue+0x1a>
  401c7a:	2000      	movs	r0, #0
  401c7c:	e7cf      	b.n	401c1e <prvCopyDataToQueue+0x1a>
  401c7e:	2000      	movs	r0, #0
  401c80:	e7cd      	b.n	401c1e <prvCopyDataToQueue+0x1a>
  401c82:	bf00      	nop
  401c84:	00403059 	.word	0x00403059
  401c88:	00427e35 	.word	0x00427e35

00401c8c <prvNotifyQueueSetContainer>:
  401c8c:	b530      	push	{r4, r5, lr}
  401c8e:	b083      	sub	sp, #12
  401c90:	9001      	str	r0, [sp, #4]
  401c92:	6d44      	ldr	r4, [r0, #84]	; 0x54
  401c94:	b174      	cbz	r4, 401cb4 <prvNotifyQueueSetContainer+0x28>
  401c96:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401c98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401c9a:	429a      	cmp	r2, r3
  401c9c:	d315      	bcc.n	401cca <prvNotifyQueueSetContainer+0x3e>
  401c9e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ca2:	b672      	cpsid	i
  401ca4:	f383 8811 	msr	BASEPRI, r3
  401ca8:	f3bf 8f6f 	isb	sy
  401cac:	f3bf 8f4f 	dsb	sy
  401cb0:	b662      	cpsie	i
  401cb2:	e7fe      	b.n	401cb2 <prvNotifyQueueSetContainer+0x26>
  401cb4:	f04f 0380 	mov.w	r3, #128	; 0x80
  401cb8:	b672      	cpsid	i
  401cba:	f383 8811 	msr	BASEPRI, r3
  401cbe:	f3bf 8f6f 	isb	sy
  401cc2:	f3bf 8f4f 	dsb	sy
  401cc6:	b662      	cpsie	i
  401cc8:	e7fe      	b.n	401cc8 <prvNotifyQueueSetContainer+0x3c>
  401cca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401ccc:	4293      	cmp	r3, r2
  401cce:	d803      	bhi.n	401cd8 <prvNotifyQueueSetContainer+0x4c>
  401cd0:	2500      	movs	r5, #0
  401cd2:	4628      	mov	r0, r5
  401cd4:	b003      	add	sp, #12
  401cd6:	bd30      	pop	{r4, r5, pc}
  401cd8:	460a      	mov	r2, r1
  401cda:	a901      	add	r1, sp, #4
  401cdc:	4620      	mov	r0, r4
  401cde:	4b0b      	ldr	r3, [pc, #44]	; (401d0c <prvNotifyQueueSetContainer+0x80>)
  401ce0:	4798      	blx	r3
  401ce2:	4605      	mov	r5, r0
  401ce4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
  401cea:	d10a      	bne.n	401d02 <prvNotifyQueueSetContainer+0x76>
  401cec:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401cee:	2b00      	cmp	r3, #0
  401cf0:	d0ef      	beq.n	401cd2 <prvNotifyQueueSetContainer+0x46>
  401cf2:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401cf6:	4b06      	ldr	r3, [pc, #24]	; (401d10 <prvNotifyQueueSetContainer+0x84>)
  401cf8:	4798      	blx	r3
  401cfa:	2800      	cmp	r0, #0
  401cfc:	d0e9      	beq.n	401cd2 <prvNotifyQueueSetContainer+0x46>
  401cfe:	2501      	movs	r5, #1
  401d00:	e7e7      	b.n	401cd2 <prvNotifyQueueSetContainer+0x46>
  401d02:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401d04:	3301      	adds	r3, #1
  401d06:	64a3      	str	r3, [r4, #72]	; 0x48
  401d08:	e7e3      	b.n	401cd2 <prvNotifyQueueSetContainer+0x46>
  401d0a:	bf00      	nop
  401d0c:	00401c05 	.word	0x00401c05
  401d10:	00402e25 	.word	0x00402e25

00401d14 <prvCopyDataFromQueue>:
  401d14:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401d16:	b172      	cbz	r2, 401d36 <prvCopyDataFromQueue+0x22>
  401d18:	b510      	push	{r4, lr}
  401d1a:	4603      	mov	r3, r0
  401d1c:	68c4      	ldr	r4, [r0, #12]
  401d1e:	4414      	add	r4, r2
  401d20:	60c4      	str	r4, [r0, #12]
  401d22:	6840      	ldr	r0, [r0, #4]
  401d24:	4284      	cmp	r4, r0
  401d26:	d301      	bcc.n	401d2c <prvCopyDataFromQueue+0x18>
  401d28:	6818      	ldr	r0, [r3, #0]
  401d2a:	60d8      	str	r0, [r3, #12]
  401d2c:	4608      	mov	r0, r1
  401d2e:	68d9      	ldr	r1, [r3, #12]
  401d30:	4b01      	ldr	r3, [pc, #4]	; (401d38 <prvCopyDataFromQueue+0x24>)
  401d32:	4798      	blx	r3
  401d34:	bd10      	pop	{r4, pc}
  401d36:	4770      	bx	lr
  401d38:	00427e35 	.word	0x00427e35

00401d3c <prvUnlockQueue>:
  401d3c:	b510      	push	{r4, lr}
  401d3e:	4604      	mov	r4, r0
  401d40:	4b1e      	ldr	r3, [pc, #120]	; (401dbc <prvUnlockQueue+0x80>)
  401d42:	4798      	blx	r3
  401d44:	e009      	b.n	401d5a <prvUnlockQueue+0x1e>
  401d46:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401d48:	b1cb      	cbz	r3, 401d7e <prvUnlockQueue+0x42>
  401d4a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401d4e:	4b1c      	ldr	r3, [pc, #112]	; (401dc0 <prvUnlockQueue+0x84>)
  401d50:	4798      	blx	r3
  401d52:	b988      	cbnz	r0, 401d78 <prvUnlockQueue+0x3c>
  401d54:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401d56:	3b01      	subs	r3, #1
  401d58:	64a3      	str	r3, [r4, #72]	; 0x48
  401d5a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401d5c:	2b00      	cmp	r3, #0
  401d5e:	dd0e      	ble.n	401d7e <prvUnlockQueue+0x42>
  401d60:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401d62:	2b00      	cmp	r3, #0
  401d64:	d0ef      	beq.n	401d46 <prvUnlockQueue+0xa>
  401d66:	2100      	movs	r1, #0
  401d68:	4620      	mov	r0, r4
  401d6a:	4b16      	ldr	r3, [pc, #88]	; (401dc4 <prvUnlockQueue+0x88>)
  401d6c:	4798      	blx	r3
  401d6e:	2801      	cmp	r0, #1
  401d70:	d1f0      	bne.n	401d54 <prvUnlockQueue+0x18>
  401d72:	4b15      	ldr	r3, [pc, #84]	; (401dc8 <prvUnlockQueue+0x8c>)
  401d74:	4798      	blx	r3
  401d76:	e7ed      	b.n	401d54 <prvUnlockQueue+0x18>
  401d78:	4b13      	ldr	r3, [pc, #76]	; (401dc8 <prvUnlockQueue+0x8c>)
  401d7a:	4798      	blx	r3
  401d7c:	e7ea      	b.n	401d54 <prvUnlockQueue+0x18>
  401d7e:	f04f 33ff 	mov.w	r3, #4294967295
  401d82:	64a3      	str	r3, [r4, #72]	; 0x48
  401d84:	4b11      	ldr	r3, [pc, #68]	; (401dcc <prvUnlockQueue+0x90>)
  401d86:	4798      	blx	r3
  401d88:	4b0c      	ldr	r3, [pc, #48]	; (401dbc <prvUnlockQueue+0x80>)
  401d8a:	4798      	blx	r3
  401d8c:	e002      	b.n	401d94 <prvUnlockQueue+0x58>
  401d8e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401d90:	3b01      	subs	r3, #1
  401d92:	6463      	str	r3, [r4, #68]	; 0x44
  401d94:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401d96:	2b00      	cmp	r3, #0
  401d98:	dd0a      	ble.n	401db0 <prvUnlockQueue+0x74>
  401d9a:	6923      	ldr	r3, [r4, #16]
  401d9c:	b143      	cbz	r3, 401db0 <prvUnlockQueue+0x74>
  401d9e:	f104 0010 	add.w	r0, r4, #16
  401da2:	4b07      	ldr	r3, [pc, #28]	; (401dc0 <prvUnlockQueue+0x84>)
  401da4:	4798      	blx	r3
  401da6:	2800      	cmp	r0, #0
  401da8:	d0f1      	beq.n	401d8e <prvUnlockQueue+0x52>
  401daa:	4b07      	ldr	r3, [pc, #28]	; (401dc8 <prvUnlockQueue+0x8c>)
  401dac:	4798      	blx	r3
  401dae:	e7ee      	b.n	401d8e <prvUnlockQueue+0x52>
  401db0:	f04f 33ff 	mov.w	r3, #4294967295
  401db4:	6463      	str	r3, [r4, #68]	; 0x44
  401db6:	4b05      	ldr	r3, [pc, #20]	; (401dcc <prvUnlockQueue+0x90>)
  401db8:	4798      	blx	r3
  401dba:	bd10      	pop	{r4, pc}
  401dbc:	004018d9 	.word	0x004018d9
  401dc0:	00402e25 	.word	0x00402e25
  401dc4:	00401c8d 	.word	0x00401c8d
  401dc8:	00402f81 	.word	0x00402f81
  401dcc:	00401925 	.word	0x00401925

00401dd0 <xQueueGenericReset>:
  401dd0:	b538      	push	{r3, r4, r5, lr}
  401dd2:	b308      	cbz	r0, 401e18 <xQueueGenericReset+0x48>
  401dd4:	4604      	mov	r4, r0
  401dd6:	460d      	mov	r5, r1
  401dd8:	4b1d      	ldr	r3, [pc, #116]	; (401e50 <xQueueGenericReset+0x80>)
  401dda:	4798      	blx	r3
  401ddc:	6821      	ldr	r1, [r4, #0]
  401dde:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  401de0:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401de2:	fb03 1002 	mla	r0, r3, r2, r1
  401de6:	6060      	str	r0, [r4, #4]
  401de8:	2000      	movs	r0, #0
  401dea:	63a0      	str	r0, [r4, #56]	; 0x38
  401dec:	60a1      	str	r1, [r4, #8]
  401dee:	3a01      	subs	r2, #1
  401df0:	fb02 1303 	mla	r3, r2, r3, r1
  401df4:	60e3      	str	r3, [r4, #12]
  401df6:	f04f 33ff 	mov.w	r3, #4294967295
  401dfa:	6463      	str	r3, [r4, #68]	; 0x44
  401dfc:	64a3      	str	r3, [r4, #72]	; 0x48
  401dfe:	b9fd      	cbnz	r5, 401e40 <xQueueGenericReset+0x70>
  401e00:	6923      	ldr	r3, [r4, #16]
  401e02:	b12b      	cbz	r3, 401e10 <xQueueGenericReset+0x40>
  401e04:	f104 0010 	add.w	r0, r4, #16
  401e08:	4b12      	ldr	r3, [pc, #72]	; (401e54 <xQueueGenericReset+0x84>)
  401e0a:	4798      	blx	r3
  401e0c:	2801      	cmp	r0, #1
  401e0e:	d00e      	beq.n	401e2e <xQueueGenericReset+0x5e>
  401e10:	4b11      	ldr	r3, [pc, #68]	; (401e58 <xQueueGenericReset+0x88>)
  401e12:	4798      	blx	r3
  401e14:	2001      	movs	r0, #1
  401e16:	bd38      	pop	{r3, r4, r5, pc}
  401e18:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e1c:	b672      	cpsid	i
  401e1e:	f383 8811 	msr	BASEPRI, r3
  401e22:	f3bf 8f6f 	isb	sy
  401e26:	f3bf 8f4f 	dsb	sy
  401e2a:	b662      	cpsie	i
  401e2c:	e7fe      	b.n	401e2c <xQueueGenericReset+0x5c>
  401e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401e32:	4b0a      	ldr	r3, [pc, #40]	; (401e5c <xQueueGenericReset+0x8c>)
  401e34:	601a      	str	r2, [r3, #0]
  401e36:	f3bf 8f4f 	dsb	sy
  401e3a:	f3bf 8f6f 	isb	sy
  401e3e:	e7e7      	b.n	401e10 <xQueueGenericReset+0x40>
  401e40:	f104 0010 	add.w	r0, r4, #16
  401e44:	4d06      	ldr	r5, [pc, #24]	; (401e60 <xQueueGenericReset+0x90>)
  401e46:	47a8      	blx	r5
  401e48:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401e4c:	47a8      	blx	r5
  401e4e:	e7df      	b.n	401e10 <xQueueGenericReset+0x40>
  401e50:	004018d9 	.word	0x004018d9
  401e54:	00402e25 	.word	0x00402e25
  401e58:	00401925 	.word	0x00401925
  401e5c:	e000ed04 	.word	0xe000ed04
  401e60:	0040178d 	.word	0x0040178d

00401e64 <xQueueGenericCreate>:
  401e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401e66:	b950      	cbnz	r0, 401e7e <xQueueGenericCreate+0x1a>
  401e68:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e6c:	b672      	cpsid	i
  401e6e:	f383 8811 	msr	BASEPRI, r3
  401e72:	f3bf 8f6f 	isb	sy
  401e76:	f3bf 8f4f 	dsb	sy
  401e7a:	b662      	cpsie	i
  401e7c:	e7fe      	b.n	401e7c <xQueueGenericCreate+0x18>
  401e7e:	4606      	mov	r6, r0
  401e80:	b119      	cbz	r1, 401e8a <xQueueGenericCreate+0x26>
  401e82:	fb01 f000 	mul.w	r0, r1, r0
  401e86:	3001      	adds	r0, #1
  401e88:	e000      	b.n	401e8c <xQueueGenericCreate+0x28>
  401e8a:	2000      	movs	r0, #0
  401e8c:	4617      	mov	r7, r2
  401e8e:	460d      	mov	r5, r1
  401e90:	3058      	adds	r0, #88	; 0x58
  401e92:	4b12      	ldr	r3, [pc, #72]	; (401edc <xQueueGenericCreate+0x78>)
  401e94:	4798      	blx	r3
  401e96:	4604      	mov	r4, r0
  401e98:	b190      	cbz	r0, 401ec0 <xQueueGenericCreate+0x5c>
  401e9a:	b96d      	cbnz	r5, 401eb8 <xQueueGenericCreate+0x54>
  401e9c:	6020      	str	r0, [r4, #0]
  401e9e:	63e6      	str	r6, [r4, #60]	; 0x3c
  401ea0:	6425      	str	r5, [r4, #64]	; 0x40
  401ea2:	2101      	movs	r1, #1
  401ea4:	4620      	mov	r0, r4
  401ea6:	4b0e      	ldr	r3, [pc, #56]	; (401ee0 <xQueueGenericCreate+0x7c>)
  401ea8:	4798      	blx	r3
  401eaa:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
  401eae:	2300      	movs	r3, #0
  401eb0:	6563      	str	r3, [r4, #84]	; 0x54
  401eb2:	4620      	mov	r0, r4
  401eb4:	b130      	cbz	r0, 401ec4 <xQueueGenericCreate+0x60>
  401eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401eb8:	f100 0358 	add.w	r3, r0, #88	; 0x58
  401ebc:	6003      	str	r3, [r0, #0]
  401ebe:	e7ee      	b.n	401e9e <xQueueGenericCreate+0x3a>
  401ec0:	2000      	movs	r0, #0
  401ec2:	e7f7      	b.n	401eb4 <xQueueGenericCreate+0x50>
  401ec4:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ec8:	b672      	cpsid	i
  401eca:	f383 8811 	msr	BASEPRI, r3
  401ece:	f3bf 8f6f 	isb	sy
  401ed2:	f3bf 8f4f 	dsb	sy
  401ed6:	b662      	cpsie	i
  401ed8:	e7fe      	b.n	401ed8 <xQueueGenericCreate+0x74>
  401eda:	bf00      	nop
  401edc:	00401b29 	.word	0x00401b29
  401ee0:	00401dd1 	.word	0x00401dd1

00401ee4 <xQueueGenericSend>:
  401ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
  401ee6:	b085      	sub	sp, #20
  401ee8:	9201      	str	r2, [sp, #4]
  401eea:	b170      	cbz	r0, 401f0a <xQueueGenericSend+0x26>
  401eec:	4604      	mov	r4, r0
  401eee:	b1b9      	cbz	r1, 401f20 <xQueueGenericSend+0x3c>
  401ef0:	2501      	movs	r5, #1
  401ef2:	b9dd      	cbnz	r5, 401f2c <xQueueGenericSend+0x48>
  401ef4:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ef8:	b672      	cpsid	i
  401efa:	f383 8811 	msr	BASEPRI, r3
  401efe:	f3bf 8f6f 	isb	sy
  401f02:	f3bf 8f4f 	dsb	sy
  401f06:	b662      	cpsie	i
  401f08:	e7fe      	b.n	401f08 <xQueueGenericSend+0x24>
  401f0a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f0e:	b672      	cpsid	i
  401f10:	f383 8811 	msr	BASEPRI, r3
  401f14:	f3bf 8f6f 	isb	sy
  401f18:	f3bf 8f4f 	dsb	sy
  401f1c:	b662      	cpsie	i
  401f1e:	e7fe      	b.n	401f1e <xQueueGenericSend+0x3a>
  401f20:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401f22:	b90a      	cbnz	r2, 401f28 <xQueueGenericSend+0x44>
  401f24:	2501      	movs	r5, #1
  401f26:	e7e4      	b.n	401ef2 <xQueueGenericSend+0xe>
  401f28:	2500      	movs	r5, #0
  401f2a:	e7e2      	b.n	401ef2 <xQueueGenericSend+0xe>
  401f2c:	2b02      	cmp	r3, #2
  401f2e:	d00b      	beq.n	401f48 <xQueueGenericSend+0x64>
  401f30:	b97d      	cbnz	r5, 401f52 <xQueueGenericSend+0x6e>
  401f32:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f36:	b672      	cpsid	i
  401f38:	f383 8811 	msr	BASEPRI, r3
  401f3c:	f3bf 8f6f 	isb	sy
  401f40:	f3bf 8f4f 	dsb	sy
  401f44:	b662      	cpsie	i
  401f46:	e7fe      	b.n	401f46 <xQueueGenericSend+0x62>
  401f48:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  401f4a:	2a01      	cmp	r2, #1
  401f4c:	d0f0      	beq.n	401f30 <xQueueGenericSend+0x4c>
  401f4e:	2500      	movs	r5, #0
  401f50:	e7ee      	b.n	401f30 <xQueueGenericSend+0x4c>
  401f52:	461e      	mov	r6, r3
  401f54:	460f      	mov	r7, r1
  401f56:	4b4e      	ldr	r3, [pc, #312]	; (402090 <xQueueGenericSend+0x1ac>)
  401f58:	4798      	blx	r3
  401f5a:	b910      	cbnz	r0, 401f62 <xQueueGenericSend+0x7e>
  401f5c:	9b01      	ldr	r3, [sp, #4]
  401f5e:	b103      	cbz	r3, 401f62 <xQueueGenericSend+0x7e>
  401f60:	2500      	movs	r5, #0
  401f62:	b955      	cbnz	r5, 401f7a <xQueueGenericSend+0x96>
  401f64:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f68:	b672      	cpsid	i
  401f6a:	f383 8811 	msr	BASEPRI, r3
  401f6e:	f3bf 8f6f 	isb	sy
  401f72:	f3bf 8f4f 	dsb	sy
  401f76:	b662      	cpsie	i
  401f78:	e7fe      	b.n	401f78 <xQueueGenericSend+0x94>
  401f7a:	2500      	movs	r5, #0
  401f7c:	e03e      	b.n	401ffc <xQueueGenericSend+0x118>
  401f7e:	4632      	mov	r2, r6
  401f80:	4639      	mov	r1, r7
  401f82:	4620      	mov	r0, r4
  401f84:	4b43      	ldr	r3, [pc, #268]	; (402094 <xQueueGenericSend+0x1b0>)
  401f86:	4798      	blx	r3
  401f88:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401f8a:	b193      	cbz	r3, 401fb2 <xQueueGenericSend+0xce>
  401f8c:	4631      	mov	r1, r6
  401f8e:	4620      	mov	r0, r4
  401f90:	4b41      	ldr	r3, [pc, #260]	; (402098 <xQueueGenericSend+0x1b4>)
  401f92:	4798      	blx	r3
  401f94:	2801      	cmp	r0, #1
  401f96:	d107      	bne.n	401fa8 <xQueueGenericSend+0xc4>
  401f98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401f9c:	4b3f      	ldr	r3, [pc, #252]	; (40209c <xQueueGenericSend+0x1b8>)
  401f9e:	601a      	str	r2, [r3, #0]
  401fa0:	f3bf 8f4f 	dsb	sy
  401fa4:	f3bf 8f6f 	isb	sy
  401fa8:	4b3d      	ldr	r3, [pc, #244]	; (4020a0 <xQueueGenericSend+0x1bc>)
  401faa:	4798      	blx	r3
  401fac:	2001      	movs	r0, #1
  401fae:	b005      	add	sp, #20
  401fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401fb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401fb4:	b173      	cbz	r3, 401fd4 <xQueueGenericSend+0xf0>
  401fb6:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401fba:	4b3a      	ldr	r3, [pc, #232]	; (4020a4 <xQueueGenericSend+0x1c0>)
  401fbc:	4798      	blx	r3
  401fbe:	2801      	cmp	r0, #1
  401fc0:	d1f2      	bne.n	401fa8 <xQueueGenericSend+0xc4>
  401fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401fc6:	4b35      	ldr	r3, [pc, #212]	; (40209c <xQueueGenericSend+0x1b8>)
  401fc8:	601a      	str	r2, [r3, #0]
  401fca:	f3bf 8f4f 	dsb	sy
  401fce:	f3bf 8f6f 	isb	sy
  401fd2:	e7e9      	b.n	401fa8 <xQueueGenericSend+0xc4>
  401fd4:	2800      	cmp	r0, #0
  401fd6:	d0e7      	beq.n	401fa8 <xQueueGenericSend+0xc4>
  401fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401fdc:	4b2f      	ldr	r3, [pc, #188]	; (40209c <xQueueGenericSend+0x1b8>)
  401fde:	601a      	str	r2, [r3, #0]
  401fe0:	f3bf 8f4f 	dsb	sy
  401fe4:	f3bf 8f6f 	isb	sy
  401fe8:	e7de      	b.n	401fa8 <xQueueGenericSend+0xc4>
  401fea:	4b2d      	ldr	r3, [pc, #180]	; (4020a0 <xQueueGenericSend+0x1bc>)
  401fec:	4798      	blx	r3
  401fee:	2000      	movs	r0, #0
  401ff0:	e7dd      	b.n	401fae <xQueueGenericSend+0xca>
  401ff2:	4620      	mov	r0, r4
  401ff4:	4b2c      	ldr	r3, [pc, #176]	; (4020a8 <xQueueGenericSend+0x1c4>)
  401ff6:	4798      	blx	r3
  401ff8:	4b2c      	ldr	r3, [pc, #176]	; (4020ac <xQueueGenericSend+0x1c8>)
  401ffa:	4798      	blx	r3
  401ffc:	4b2c      	ldr	r3, [pc, #176]	; (4020b0 <xQueueGenericSend+0x1cc>)
  401ffe:	4798      	blx	r3
  402000:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402002:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402004:	429a      	cmp	r2, r3
  402006:	d3ba      	bcc.n	401f7e <xQueueGenericSend+0x9a>
  402008:	2e02      	cmp	r6, #2
  40200a:	d0b8      	beq.n	401f7e <xQueueGenericSend+0x9a>
  40200c:	9b01      	ldr	r3, [sp, #4]
  40200e:	2b00      	cmp	r3, #0
  402010:	d0eb      	beq.n	401fea <xQueueGenericSend+0x106>
  402012:	b91d      	cbnz	r5, 40201c <xQueueGenericSend+0x138>
  402014:	a802      	add	r0, sp, #8
  402016:	4b27      	ldr	r3, [pc, #156]	; (4020b4 <xQueueGenericSend+0x1d0>)
  402018:	4798      	blx	r3
  40201a:	2501      	movs	r5, #1
  40201c:	4b20      	ldr	r3, [pc, #128]	; (4020a0 <xQueueGenericSend+0x1bc>)
  40201e:	4798      	blx	r3
  402020:	4b25      	ldr	r3, [pc, #148]	; (4020b8 <xQueueGenericSend+0x1d4>)
  402022:	4798      	blx	r3
  402024:	4b22      	ldr	r3, [pc, #136]	; (4020b0 <xQueueGenericSend+0x1cc>)
  402026:	4798      	blx	r3
  402028:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40202a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40202e:	d101      	bne.n	402034 <xQueueGenericSend+0x150>
  402030:	2300      	movs	r3, #0
  402032:	6463      	str	r3, [r4, #68]	; 0x44
  402034:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402036:	f1b3 3fff 	cmp.w	r3, #4294967295
  40203a:	d101      	bne.n	402040 <xQueueGenericSend+0x15c>
  40203c:	2300      	movs	r3, #0
  40203e:	64a3      	str	r3, [r4, #72]	; 0x48
  402040:	4b17      	ldr	r3, [pc, #92]	; (4020a0 <xQueueGenericSend+0x1bc>)
  402042:	4798      	blx	r3
  402044:	a901      	add	r1, sp, #4
  402046:	a802      	add	r0, sp, #8
  402048:	4b1c      	ldr	r3, [pc, #112]	; (4020bc <xQueueGenericSend+0x1d8>)
  40204a:	4798      	blx	r3
  40204c:	b9c8      	cbnz	r0, 402082 <xQueueGenericSend+0x19e>
  40204e:	4620      	mov	r0, r4
  402050:	4b1b      	ldr	r3, [pc, #108]	; (4020c0 <xQueueGenericSend+0x1dc>)
  402052:	4798      	blx	r3
  402054:	2800      	cmp	r0, #0
  402056:	d0cc      	beq.n	401ff2 <xQueueGenericSend+0x10e>
  402058:	9901      	ldr	r1, [sp, #4]
  40205a:	f104 0010 	add.w	r0, r4, #16
  40205e:	4b19      	ldr	r3, [pc, #100]	; (4020c4 <xQueueGenericSend+0x1e0>)
  402060:	4798      	blx	r3
  402062:	4620      	mov	r0, r4
  402064:	4b10      	ldr	r3, [pc, #64]	; (4020a8 <xQueueGenericSend+0x1c4>)
  402066:	4798      	blx	r3
  402068:	4b10      	ldr	r3, [pc, #64]	; (4020ac <xQueueGenericSend+0x1c8>)
  40206a:	4798      	blx	r3
  40206c:	2800      	cmp	r0, #0
  40206e:	d1c5      	bne.n	401ffc <xQueueGenericSend+0x118>
  402070:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402074:	4b09      	ldr	r3, [pc, #36]	; (40209c <xQueueGenericSend+0x1b8>)
  402076:	601a      	str	r2, [r3, #0]
  402078:	f3bf 8f4f 	dsb	sy
  40207c:	f3bf 8f6f 	isb	sy
  402080:	e7bc      	b.n	401ffc <xQueueGenericSend+0x118>
  402082:	4620      	mov	r0, r4
  402084:	4b08      	ldr	r3, [pc, #32]	; (4020a8 <xQueueGenericSend+0x1c4>)
  402086:	4798      	blx	r3
  402088:	4b08      	ldr	r3, [pc, #32]	; (4020ac <xQueueGenericSend+0x1c8>)
  40208a:	4798      	blx	r3
  40208c:	2000      	movs	r0, #0
  40208e:	e78e      	b.n	401fae <xQueueGenericSend+0xca>
  402090:	00402f8d 	.word	0x00402f8d
  402094:	00401c05 	.word	0x00401c05
  402098:	00401c8d 	.word	0x00401c8d
  40209c:	e000ed04 	.word	0xe000ed04
  4020a0:	00401925 	.word	0x00401925
  4020a4:	00402e25 	.word	0x00402e25
  4020a8:	00401d3d 	.word	0x00401d3d
  4020ac:	00402a05 	.word	0x00402a05
  4020b0:	004018d9 	.word	0x004018d9
  4020b4:	00402ebd 	.word	0x00402ebd
  4020b8:	004028a5 	.word	0x004028a5
  4020bc:	00402eed 	.word	0x00402eed
  4020c0:	00401bb9 	.word	0x00401bb9
  4020c4:	00402d21 	.word	0x00402d21

004020c8 <xQueueGenericSendFromISR>:
  4020c8:	b180      	cbz	r0, 4020ec <xQueueGenericSendFromISR+0x24>
  4020ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4020ce:	4604      	mov	r4, r0
  4020d0:	b1b9      	cbz	r1, 402102 <xQueueGenericSendFromISR+0x3a>
  4020d2:	2001      	movs	r0, #1
  4020d4:	b9d8      	cbnz	r0, 40210e <xQueueGenericSendFromISR+0x46>
  4020d6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020da:	b672      	cpsid	i
  4020dc:	f383 8811 	msr	BASEPRI, r3
  4020e0:	f3bf 8f6f 	isb	sy
  4020e4:	f3bf 8f4f 	dsb	sy
  4020e8:	b662      	cpsie	i
  4020ea:	e7fe      	b.n	4020ea <xQueueGenericSendFromISR+0x22>
  4020ec:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020f0:	b672      	cpsid	i
  4020f2:	f383 8811 	msr	BASEPRI, r3
  4020f6:	f3bf 8f6f 	isb	sy
  4020fa:	f3bf 8f4f 	dsb	sy
  4020fe:	b662      	cpsie	i
  402100:	e7fe      	b.n	402100 <xQueueGenericSendFromISR+0x38>
  402102:	6c00      	ldr	r0, [r0, #64]	; 0x40
  402104:	b908      	cbnz	r0, 40210a <xQueueGenericSendFromISR+0x42>
  402106:	2001      	movs	r0, #1
  402108:	e7e4      	b.n	4020d4 <xQueueGenericSendFromISR+0xc>
  40210a:	2000      	movs	r0, #0
  40210c:	e7e2      	b.n	4020d4 <xQueueGenericSendFromISR+0xc>
  40210e:	2b02      	cmp	r3, #2
  402110:	d00b      	beq.n	40212a <xQueueGenericSendFromISR+0x62>
  402112:	b978      	cbnz	r0, 402134 <xQueueGenericSendFromISR+0x6c>
  402114:	f04f 0380 	mov.w	r3, #128	; 0x80
  402118:	b672      	cpsid	i
  40211a:	f383 8811 	msr	BASEPRI, r3
  40211e:	f3bf 8f6f 	isb	sy
  402122:	f3bf 8f4f 	dsb	sy
  402126:	b662      	cpsie	i
  402128:	e7fe      	b.n	402128 <xQueueGenericSendFromISR+0x60>
  40212a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
  40212c:	2d01      	cmp	r5, #1
  40212e:	d0f0      	beq.n	402112 <xQueueGenericSendFromISR+0x4a>
  402130:	2000      	movs	r0, #0
  402132:	e7ee      	b.n	402112 <xQueueGenericSendFromISR+0x4a>
  402134:	461e      	mov	r6, r3
  402136:	4615      	mov	r5, r2
  402138:	4688      	mov	r8, r1
  40213a:	4b23      	ldr	r3, [pc, #140]	; (4021c8 <xQueueGenericSendFromISR+0x100>)
  40213c:	4798      	blx	r3
  40213e:	f3ef 8711 	mrs	r7, BASEPRI
  402142:	f04f 0380 	mov.w	r3, #128	; 0x80
  402146:	b672      	cpsid	i
  402148:	f383 8811 	msr	BASEPRI, r3
  40214c:	f3bf 8f6f 	isb	sy
  402150:	f3bf 8f4f 	dsb	sy
  402154:	b662      	cpsie	i
  402156:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402158:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40215a:	429a      	cmp	r2, r3
  40215c:	d301      	bcc.n	402162 <xQueueGenericSendFromISR+0x9a>
  40215e:	2e02      	cmp	r6, #2
  402160:	d126      	bne.n	4021b0 <xQueueGenericSendFromISR+0xe8>
  402162:	4632      	mov	r2, r6
  402164:	4641      	mov	r1, r8
  402166:	4620      	mov	r0, r4
  402168:	4b18      	ldr	r3, [pc, #96]	; (4021cc <xQueueGenericSendFromISR+0x104>)
  40216a:	4798      	blx	r3
  40216c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40216e:	f1b3 3fff 	cmp.w	r3, #4294967295
  402172:	d118      	bne.n	4021a6 <xQueueGenericSendFromISR+0xde>
  402174:	6d63      	ldr	r3, [r4, #84]	; 0x54
  402176:	b15b      	cbz	r3, 402190 <xQueueGenericSendFromISR+0xc8>
  402178:	4631      	mov	r1, r6
  40217a:	4620      	mov	r0, r4
  40217c:	4b14      	ldr	r3, [pc, #80]	; (4021d0 <xQueueGenericSendFromISR+0x108>)
  40217e:	4798      	blx	r3
  402180:	2801      	cmp	r0, #1
  402182:	d117      	bne.n	4021b4 <xQueueGenericSendFromISR+0xec>
  402184:	b1c5      	cbz	r5, 4021b8 <xQueueGenericSendFromISR+0xf0>
  402186:	6028      	str	r0, [r5, #0]
  402188:	f387 8811 	msr	BASEPRI, r7
  40218c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402190:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402192:	b19b      	cbz	r3, 4021bc <xQueueGenericSendFromISR+0xf4>
  402194:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402198:	4b0e      	ldr	r3, [pc, #56]	; (4021d4 <xQueueGenericSendFromISR+0x10c>)
  40219a:	4798      	blx	r3
  40219c:	b180      	cbz	r0, 4021c0 <xQueueGenericSendFromISR+0xf8>
  40219e:	b18d      	cbz	r5, 4021c4 <xQueueGenericSendFromISR+0xfc>
  4021a0:	2001      	movs	r0, #1
  4021a2:	6028      	str	r0, [r5, #0]
  4021a4:	e7f0      	b.n	402188 <xQueueGenericSendFromISR+0xc0>
  4021a6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4021a8:	3301      	adds	r3, #1
  4021aa:	64a3      	str	r3, [r4, #72]	; 0x48
  4021ac:	2001      	movs	r0, #1
  4021ae:	e7eb      	b.n	402188 <xQueueGenericSendFromISR+0xc0>
  4021b0:	2000      	movs	r0, #0
  4021b2:	e7e9      	b.n	402188 <xQueueGenericSendFromISR+0xc0>
  4021b4:	2001      	movs	r0, #1
  4021b6:	e7e7      	b.n	402188 <xQueueGenericSendFromISR+0xc0>
  4021b8:	2001      	movs	r0, #1
  4021ba:	e7e5      	b.n	402188 <xQueueGenericSendFromISR+0xc0>
  4021bc:	2001      	movs	r0, #1
  4021be:	e7e3      	b.n	402188 <xQueueGenericSendFromISR+0xc0>
  4021c0:	2001      	movs	r0, #1
  4021c2:	e7e1      	b.n	402188 <xQueueGenericSendFromISR+0xc0>
  4021c4:	2001      	movs	r0, #1
  4021c6:	e7df      	b.n	402188 <xQueueGenericSendFromISR+0xc0>
  4021c8:	00401ac5 	.word	0x00401ac5
  4021cc:	00401c05 	.word	0x00401c05
  4021d0:	00401c8d 	.word	0x00401c8d
  4021d4:	00402e25 	.word	0x00402e25

004021d8 <xQueueGiveFromISR>:
  4021d8:	b170      	cbz	r0, 4021f8 <xQueueGiveFromISR+0x20>
  4021da:	b570      	push	{r4, r5, r6, lr}
  4021dc:	4604      	mov	r4, r0
  4021de:	6c03      	ldr	r3, [r0, #64]	; 0x40
  4021e0:	b1ab      	cbz	r3, 40220e <xQueueGiveFromISR+0x36>
  4021e2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021e6:	b672      	cpsid	i
  4021e8:	f383 8811 	msr	BASEPRI, r3
  4021ec:	f3bf 8f6f 	isb	sy
  4021f0:	f3bf 8f4f 	dsb	sy
  4021f4:	b662      	cpsie	i
  4021f6:	e7fe      	b.n	4021f6 <xQueueGiveFromISR+0x1e>
  4021f8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021fc:	b672      	cpsid	i
  4021fe:	f383 8811 	msr	BASEPRI, r3
  402202:	f3bf 8f6f 	isb	sy
  402206:	f3bf 8f4f 	dsb	sy
  40220a:	b662      	cpsie	i
  40220c:	e7fe      	b.n	40220c <xQueueGiveFromISR+0x34>
  40220e:	6803      	ldr	r3, [r0, #0]
  402210:	b163      	cbz	r3, 40222c <xQueueGiveFromISR+0x54>
  402212:	2301      	movs	r3, #1
  402214:	b983      	cbnz	r3, 402238 <xQueueGiveFromISR+0x60>
  402216:	f04f 0380 	mov.w	r3, #128	; 0x80
  40221a:	b672      	cpsid	i
  40221c:	f383 8811 	msr	BASEPRI, r3
  402220:	f3bf 8f6f 	isb	sy
  402224:	f3bf 8f4f 	dsb	sy
  402228:	b662      	cpsie	i
  40222a:	e7fe      	b.n	40222a <xQueueGiveFromISR+0x52>
  40222c:	6843      	ldr	r3, [r0, #4]
  40222e:	b90b      	cbnz	r3, 402234 <xQueueGiveFromISR+0x5c>
  402230:	2301      	movs	r3, #1
  402232:	e7ef      	b.n	402214 <xQueueGiveFromISR+0x3c>
  402234:	2300      	movs	r3, #0
  402236:	e7ed      	b.n	402214 <xQueueGiveFromISR+0x3c>
  402238:	460d      	mov	r5, r1
  40223a:	4b21      	ldr	r3, [pc, #132]	; (4022c0 <xQueueGiveFromISR+0xe8>)
  40223c:	4798      	blx	r3
  40223e:	f3ef 8611 	mrs	r6, BASEPRI
  402242:	f04f 0380 	mov.w	r3, #128	; 0x80
  402246:	b672      	cpsid	i
  402248:	f383 8811 	msr	BASEPRI, r3
  40224c:	f3bf 8f6f 	isb	sy
  402250:	f3bf 8f4f 	dsb	sy
  402254:	b662      	cpsie	i
  402256:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402258:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40225a:	429a      	cmp	r2, r3
  40225c:	d223      	bcs.n	4022a6 <xQueueGiveFromISR+0xce>
  40225e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402260:	3301      	adds	r3, #1
  402262:	63a3      	str	r3, [r4, #56]	; 0x38
  402264:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402266:	f1b3 3fff 	cmp.w	r3, #4294967295
  40226a:	d117      	bne.n	40229c <xQueueGiveFromISR+0xc4>
  40226c:	6d63      	ldr	r3, [r4, #84]	; 0x54
  40226e:	b153      	cbz	r3, 402286 <xQueueGiveFromISR+0xae>
  402270:	2100      	movs	r1, #0
  402272:	4620      	mov	r0, r4
  402274:	4b13      	ldr	r3, [pc, #76]	; (4022c4 <xQueueGiveFromISR+0xec>)
  402276:	4798      	blx	r3
  402278:	2801      	cmp	r0, #1
  40227a:	d116      	bne.n	4022aa <xQueueGiveFromISR+0xd2>
  40227c:	b1bd      	cbz	r5, 4022ae <xQueueGiveFromISR+0xd6>
  40227e:	6028      	str	r0, [r5, #0]
  402280:	f386 8811 	msr	BASEPRI, r6
  402284:	bd70      	pop	{r4, r5, r6, pc}
  402286:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402288:	b19b      	cbz	r3, 4022b2 <xQueueGiveFromISR+0xda>
  40228a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40228e:	4b0e      	ldr	r3, [pc, #56]	; (4022c8 <xQueueGiveFromISR+0xf0>)
  402290:	4798      	blx	r3
  402292:	b180      	cbz	r0, 4022b6 <xQueueGiveFromISR+0xde>
  402294:	b18d      	cbz	r5, 4022ba <xQueueGiveFromISR+0xe2>
  402296:	2001      	movs	r0, #1
  402298:	6028      	str	r0, [r5, #0]
  40229a:	e7f1      	b.n	402280 <xQueueGiveFromISR+0xa8>
  40229c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40229e:	3301      	adds	r3, #1
  4022a0:	64a3      	str	r3, [r4, #72]	; 0x48
  4022a2:	2001      	movs	r0, #1
  4022a4:	e7ec      	b.n	402280 <xQueueGiveFromISR+0xa8>
  4022a6:	2000      	movs	r0, #0
  4022a8:	e7ea      	b.n	402280 <xQueueGiveFromISR+0xa8>
  4022aa:	2001      	movs	r0, #1
  4022ac:	e7e8      	b.n	402280 <xQueueGiveFromISR+0xa8>
  4022ae:	2001      	movs	r0, #1
  4022b0:	e7e6      	b.n	402280 <xQueueGiveFromISR+0xa8>
  4022b2:	2001      	movs	r0, #1
  4022b4:	e7e4      	b.n	402280 <xQueueGiveFromISR+0xa8>
  4022b6:	2001      	movs	r0, #1
  4022b8:	e7e2      	b.n	402280 <xQueueGiveFromISR+0xa8>
  4022ba:	2001      	movs	r0, #1
  4022bc:	e7e0      	b.n	402280 <xQueueGiveFromISR+0xa8>
  4022be:	bf00      	nop
  4022c0:	00401ac5 	.word	0x00401ac5
  4022c4:	00401c8d 	.word	0x00401c8d
  4022c8:	00402e25 	.word	0x00402e25

004022cc <xQueueGenericReceive>:
  4022cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4022ce:	b085      	sub	sp, #20
  4022d0:	9201      	str	r2, [sp, #4]
  4022d2:	b170      	cbz	r0, 4022f2 <xQueueGenericReceive+0x26>
  4022d4:	4604      	mov	r4, r0
  4022d6:	b1b9      	cbz	r1, 402308 <xQueueGenericReceive+0x3c>
  4022d8:	2501      	movs	r5, #1
  4022da:	b9dd      	cbnz	r5, 402314 <xQueueGenericReceive+0x48>
  4022dc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022e0:	b672      	cpsid	i
  4022e2:	f383 8811 	msr	BASEPRI, r3
  4022e6:	f3bf 8f6f 	isb	sy
  4022ea:	f3bf 8f4f 	dsb	sy
  4022ee:	b662      	cpsie	i
  4022f0:	e7fe      	b.n	4022f0 <xQueueGenericReceive+0x24>
  4022f2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022f6:	b672      	cpsid	i
  4022f8:	f383 8811 	msr	BASEPRI, r3
  4022fc:	f3bf 8f6f 	isb	sy
  402300:	f3bf 8f4f 	dsb	sy
  402304:	b662      	cpsie	i
  402306:	e7fe      	b.n	402306 <xQueueGenericReceive+0x3a>
  402308:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40230a:	b90a      	cbnz	r2, 402310 <xQueueGenericReceive+0x44>
  40230c:	2501      	movs	r5, #1
  40230e:	e7e4      	b.n	4022da <xQueueGenericReceive+0xe>
  402310:	2500      	movs	r5, #0
  402312:	e7e2      	b.n	4022da <xQueueGenericReceive+0xe>
  402314:	461f      	mov	r7, r3
  402316:	460e      	mov	r6, r1
  402318:	4b52      	ldr	r3, [pc, #328]	; (402464 <xQueueGenericReceive+0x198>)
  40231a:	4798      	blx	r3
  40231c:	b910      	cbnz	r0, 402324 <xQueueGenericReceive+0x58>
  40231e:	9b01      	ldr	r3, [sp, #4]
  402320:	b103      	cbz	r3, 402324 <xQueueGenericReceive+0x58>
  402322:	2500      	movs	r5, #0
  402324:	b955      	cbnz	r5, 40233c <xQueueGenericReceive+0x70>
  402326:	f04f 0380 	mov.w	r3, #128	; 0x80
  40232a:	b672      	cpsid	i
  40232c:	f383 8811 	msr	BASEPRI, r3
  402330:	f3bf 8f6f 	isb	sy
  402334:	f3bf 8f4f 	dsb	sy
  402338:	b662      	cpsie	i
  40233a:	e7fe      	b.n	40233a <xQueueGenericReceive+0x6e>
  40233c:	2500      	movs	r5, #0
  40233e:	e046      	b.n	4023ce <xQueueGenericReceive+0x102>
  402340:	68e5      	ldr	r5, [r4, #12]
  402342:	4631      	mov	r1, r6
  402344:	4620      	mov	r0, r4
  402346:	4b48      	ldr	r3, [pc, #288]	; (402468 <xQueueGenericReceive+0x19c>)
  402348:	4798      	blx	r3
  40234a:	b9e7      	cbnz	r7, 402386 <xQueueGenericReceive+0xba>
  40234c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40234e:	3b01      	subs	r3, #1
  402350:	63a3      	str	r3, [r4, #56]	; 0x38
  402352:	6823      	ldr	r3, [r4, #0]
  402354:	b913      	cbnz	r3, 40235c <xQueueGenericReceive+0x90>
  402356:	4b45      	ldr	r3, [pc, #276]	; (40246c <xQueueGenericReceive+0x1a0>)
  402358:	4798      	blx	r3
  40235a:	6060      	str	r0, [r4, #4]
  40235c:	6923      	ldr	r3, [r4, #16]
  40235e:	b16b      	cbz	r3, 40237c <xQueueGenericReceive+0xb0>
  402360:	f104 0010 	add.w	r0, r4, #16
  402364:	4b42      	ldr	r3, [pc, #264]	; (402470 <xQueueGenericReceive+0x1a4>)
  402366:	4798      	blx	r3
  402368:	2801      	cmp	r0, #1
  40236a:	d107      	bne.n	40237c <xQueueGenericReceive+0xb0>
  40236c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402370:	4b40      	ldr	r3, [pc, #256]	; (402474 <xQueueGenericReceive+0x1a8>)
  402372:	601a      	str	r2, [r3, #0]
  402374:	f3bf 8f4f 	dsb	sy
  402378:	f3bf 8f6f 	isb	sy
  40237c:	4b3e      	ldr	r3, [pc, #248]	; (402478 <xQueueGenericReceive+0x1ac>)
  40237e:	4798      	blx	r3
  402380:	2001      	movs	r0, #1
  402382:	b005      	add	sp, #20
  402384:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402386:	60e5      	str	r5, [r4, #12]
  402388:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40238a:	2b00      	cmp	r3, #0
  40238c:	d0f6      	beq.n	40237c <xQueueGenericReceive+0xb0>
  40238e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402392:	4b37      	ldr	r3, [pc, #220]	; (402470 <xQueueGenericReceive+0x1a4>)
  402394:	4798      	blx	r3
  402396:	2800      	cmp	r0, #0
  402398:	d0f0      	beq.n	40237c <xQueueGenericReceive+0xb0>
  40239a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40239e:	4b35      	ldr	r3, [pc, #212]	; (402474 <xQueueGenericReceive+0x1a8>)
  4023a0:	601a      	str	r2, [r3, #0]
  4023a2:	f3bf 8f4f 	dsb	sy
  4023a6:	f3bf 8f6f 	isb	sy
  4023aa:	e7e7      	b.n	40237c <xQueueGenericReceive+0xb0>
  4023ac:	4b32      	ldr	r3, [pc, #200]	; (402478 <xQueueGenericReceive+0x1ac>)
  4023ae:	4798      	blx	r3
  4023b0:	2000      	movs	r0, #0
  4023b2:	e7e6      	b.n	402382 <xQueueGenericReceive+0xb6>
  4023b4:	4b31      	ldr	r3, [pc, #196]	; (40247c <xQueueGenericReceive+0x1b0>)
  4023b6:	4798      	blx	r3
  4023b8:	6860      	ldr	r0, [r4, #4]
  4023ba:	4b31      	ldr	r3, [pc, #196]	; (402480 <xQueueGenericReceive+0x1b4>)
  4023bc:	4798      	blx	r3
  4023be:	4b2e      	ldr	r3, [pc, #184]	; (402478 <xQueueGenericReceive+0x1ac>)
  4023c0:	4798      	blx	r3
  4023c2:	e032      	b.n	40242a <xQueueGenericReceive+0x15e>
  4023c4:	4620      	mov	r0, r4
  4023c6:	4b2f      	ldr	r3, [pc, #188]	; (402484 <xQueueGenericReceive+0x1b8>)
  4023c8:	4798      	blx	r3
  4023ca:	4b2f      	ldr	r3, [pc, #188]	; (402488 <xQueueGenericReceive+0x1bc>)
  4023cc:	4798      	blx	r3
  4023ce:	4b2b      	ldr	r3, [pc, #172]	; (40247c <xQueueGenericReceive+0x1b0>)
  4023d0:	4798      	blx	r3
  4023d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4023d4:	2b00      	cmp	r3, #0
  4023d6:	d1b3      	bne.n	402340 <xQueueGenericReceive+0x74>
  4023d8:	9b01      	ldr	r3, [sp, #4]
  4023da:	2b00      	cmp	r3, #0
  4023dc:	d0e6      	beq.n	4023ac <xQueueGenericReceive+0xe0>
  4023de:	b91d      	cbnz	r5, 4023e8 <xQueueGenericReceive+0x11c>
  4023e0:	a802      	add	r0, sp, #8
  4023e2:	4b2a      	ldr	r3, [pc, #168]	; (40248c <xQueueGenericReceive+0x1c0>)
  4023e4:	4798      	blx	r3
  4023e6:	2501      	movs	r5, #1
  4023e8:	4b23      	ldr	r3, [pc, #140]	; (402478 <xQueueGenericReceive+0x1ac>)
  4023ea:	4798      	blx	r3
  4023ec:	4b28      	ldr	r3, [pc, #160]	; (402490 <xQueueGenericReceive+0x1c4>)
  4023ee:	4798      	blx	r3
  4023f0:	4b22      	ldr	r3, [pc, #136]	; (40247c <xQueueGenericReceive+0x1b0>)
  4023f2:	4798      	blx	r3
  4023f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4023f6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4023fa:	d101      	bne.n	402400 <xQueueGenericReceive+0x134>
  4023fc:	2300      	movs	r3, #0
  4023fe:	6463      	str	r3, [r4, #68]	; 0x44
  402400:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402402:	f1b3 3fff 	cmp.w	r3, #4294967295
  402406:	d101      	bne.n	40240c <xQueueGenericReceive+0x140>
  402408:	2300      	movs	r3, #0
  40240a:	64a3      	str	r3, [r4, #72]	; 0x48
  40240c:	4b1a      	ldr	r3, [pc, #104]	; (402478 <xQueueGenericReceive+0x1ac>)
  40240e:	4798      	blx	r3
  402410:	a901      	add	r1, sp, #4
  402412:	a802      	add	r0, sp, #8
  402414:	4b1f      	ldr	r3, [pc, #124]	; (402494 <xQueueGenericReceive+0x1c8>)
  402416:	4798      	blx	r3
  402418:	b9e0      	cbnz	r0, 402454 <xQueueGenericReceive+0x188>
  40241a:	4620      	mov	r0, r4
  40241c:	4b1e      	ldr	r3, [pc, #120]	; (402498 <xQueueGenericReceive+0x1cc>)
  40241e:	4798      	blx	r3
  402420:	2800      	cmp	r0, #0
  402422:	d0cf      	beq.n	4023c4 <xQueueGenericReceive+0xf8>
  402424:	6823      	ldr	r3, [r4, #0]
  402426:	2b00      	cmp	r3, #0
  402428:	d0c4      	beq.n	4023b4 <xQueueGenericReceive+0xe8>
  40242a:	9901      	ldr	r1, [sp, #4]
  40242c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402430:	4b1a      	ldr	r3, [pc, #104]	; (40249c <xQueueGenericReceive+0x1d0>)
  402432:	4798      	blx	r3
  402434:	4620      	mov	r0, r4
  402436:	4b13      	ldr	r3, [pc, #76]	; (402484 <xQueueGenericReceive+0x1b8>)
  402438:	4798      	blx	r3
  40243a:	4b13      	ldr	r3, [pc, #76]	; (402488 <xQueueGenericReceive+0x1bc>)
  40243c:	4798      	blx	r3
  40243e:	2800      	cmp	r0, #0
  402440:	d1c5      	bne.n	4023ce <xQueueGenericReceive+0x102>
  402442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402446:	4b0b      	ldr	r3, [pc, #44]	; (402474 <xQueueGenericReceive+0x1a8>)
  402448:	601a      	str	r2, [r3, #0]
  40244a:	f3bf 8f4f 	dsb	sy
  40244e:	f3bf 8f6f 	isb	sy
  402452:	e7bc      	b.n	4023ce <xQueueGenericReceive+0x102>
  402454:	4620      	mov	r0, r4
  402456:	4b0b      	ldr	r3, [pc, #44]	; (402484 <xQueueGenericReceive+0x1b8>)
  402458:	4798      	blx	r3
  40245a:	4b0b      	ldr	r3, [pc, #44]	; (402488 <xQueueGenericReceive+0x1bc>)
  40245c:	4798      	blx	r3
  40245e:	2000      	movs	r0, #0
  402460:	e78f      	b.n	402382 <xQueueGenericReceive+0xb6>
  402462:	bf00      	nop
  402464:	00402f8d 	.word	0x00402f8d
  402468:	00401d15 	.word	0x00401d15
  40246c:	0040311d 	.word	0x0040311d
  402470:	00402e25 	.word	0x00402e25
  402474:	e000ed04 	.word	0xe000ed04
  402478:	00401925 	.word	0x00401925
  40247c:	004018d9 	.word	0x004018d9
  402480:	00402fad 	.word	0x00402fad
  402484:	00401d3d 	.word	0x00401d3d
  402488:	00402a05 	.word	0x00402a05
  40248c:	00402ebd 	.word	0x00402ebd
  402490:	004028a5 	.word	0x004028a5
  402494:	00402eed 	.word	0x00402eed
  402498:	00401be1 	.word	0x00401be1
  40249c:	00402d21 	.word	0x00402d21

004024a0 <vQueueAddToRegistry>:
  4024a0:	2300      	movs	r3, #0
  4024a2:	2b07      	cmp	r3, #7
  4024a4:	d80c      	bhi.n	4024c0 <vQueueAddToRegistry+0x20>
  4024a6:	4a07      	ldr	r2, [pc, #28]	; (4024c4 <vQueueAddToRegistry+0x24>)
  4024a8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  4024ac:	b10a      	cbz	r2, 4024b2 <vQueueAddToRegistry+0x12>
  4024ae:	3301      	adds	r3, #1
  4024b0:	e7f7      	b.n	4024a2 <vQueueAddToRegistry+0x2>
  4024b2:	4a04      	ldr	r2, [pc, #16]	; (4024c4 <vQueueAddToRegistry+0x24>)
  4024b4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
  4024b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  4024bc:	6058      	str	r0, [r3, #4]
  4024be:	4770      	bx	lr
  4024c0:	4770      	bx	lr
  4024c2:	bf00      	nop
  4024c4:	2043a234 	.word	0x2043a234

004024c8 <vQueueWaitForMessageRestricted>:
  4024c8:	b570      	push	{r4, r5, r6, lr}
  4024ca:	4604      	mov	r4, r0
  4024cc:	460d      	mov	r5, r1
  4024ce:	4616      	mov	r6, r2
  4024d0:	4b0f      	ldr	r3, [pc, #60]	; (402510 <vQueueWaitForMessageRestricted+0x48>)
  4024d2:	4798      	blx	r3
  4024d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4024d6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4024da:	d00b      	beq.n	4024f4 <vQueueWaitForMessageRestricted+0x2c>
  4024dc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4024de:	f1b3 3fff 	cmp.w	r3, #4294967295
  4024e2:	d00a      	beq.n	4024fa <vQueueWaitForMessageRestricted+0x32>
  4024e4:	4b0b      	ldr	r3, [pc, #44]	; (402514 <vQueueWaitForMessageRestricted+0x4c>)
  4024e6:	4798      	blx	r3
  4024e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4024ea:	b14b      	cbz	r3, 402500 <vQueueWaitForMessageRestricted+0x38>
  4024ec:	4620      	mov	r0, r4
  4024ee:	4b0a      	ldr	r3, [pc, #40]	; (402518 <vQueueWaitForMessageRestricted+0x50>)
  4024f0:	4798      	blx	r3
  4024f2:	bd70      	pop	{r4, r5, r6, pc}
  4024f4:	2300      	movs	r3, #0
  4024f6:	6463      	str	r3, [r4, #68]	; 0x44
  4024f8:	e7f0      	b.n	4024dc <vQueueWaitForMessageRestricted+0x14>
  4024fa:	2300      	movs	r3, #0
  4024fc:	64a3      	str	r3, [r4, #72]	; 0x48
  4024fe:	e7f1      	b.n	4024e4 <vQueueWaitForMessageRestricted+0x1c>
  402500:	4632      	mov	r2, r6
  402502:	4629      	mov	r1, r5
  402504:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402508:	4b04      	ldr	r3, [pc, #16]	; (40251c <vQueueWaitForMessageRestricted+0x54>)
  40250a:	4798      	blx	r3
  40250c:	e7ee      	b.n	4024ec <vQueueWaitForMessageRestricted+0x24>
  40250e:	bf00      	nop
  402510:	004018d9 	.word	0x004018d9
  402514:	00401925 	.word	0x00401925
  402518:	00401d3d 	.word	0x00401d3d
  40251c:	00402da5 	.word	0x00402da5

00402520 <prvResetNextTaskUnblockTime>:
  402520:	4b0a      	ldr	r3, [pc, #40]	; (40254c <prvResetNextTaskUnblockTime+0x2c>)
  402522:	681b      	ldr	r3, [r3, #0]
  402524:	681b      	ldr	r3, [r3, #0]
  402526:	b94b      	cbnz	r3, 40253c <prvResetNextTaskUnblockTime+0x1c>
  402528:	2301      	movs	r3, #1
  40252a:	b94b      	cbnz	r3, 402540 <prvResetNextTaskUnblockTime+0x20>
  40252c:	4b07      	ldr	r3, [pc, #28]	; (40254c <prvResetNextTaskUnblockTime+0x2c>)
  40252e:	681b      	ldr	r3, [r3, #0]
  402530:	68db      	ldr	r3, [r3, #12]
  402532:	68db      	ldr	r3, [r3, #12]
  402534:	685a      	ldr	r2, [r3, #4]
  402536:	4b06      	ldr	r3, [pc, #24]	; (402550 <prvResetNextTaskUnblockTime+0x30>)
  402538:	601a      	str	r2, [r3, #0]
  40253a:	4770      	bx	lr
  40253c:	2300      	movs	r3, #0
  40253e:	e7f4      	b.n	40252a <prvResetNextTaskUnblockTime+0xa>
  402540:	f04f 32ff 	mov.w	r2, #4294967295
  402544:	4b02      	ldr	r3, [pc, #8]	; (402550 <prvResetNextTaskUnblockTime+0x30>)
  402546:	601a      	str	r2, [r3, #0]
  402548:	4770      	bx	lr
  40254a:	bf00      	nop
  40254c:	2040c2e4 	.word	0x2040c2e4
  402550:	2040c390 	.word	0x2040c390

00402554 <prvDeleteTCB>:
  402554:	b538      	push	{r3, r4, r5, lr}
  402556:	4605      	mov	r5, r0
  402558:	6b00      	ldr	r0, [r0, #48]	; 0x30
  40255a:	4c02      	ldr	r4, [pc, #8]	; (402564 <prvDeleteTCB+0x10>)
  40255c:	47a0      	blx	r4
  40255e:	4628      	mov	r0, r5
  402560:	47a0      	blx	r4
  402562:	bd38      	pop	{r3, r4, r5, pc}
  402564:	00401b9d 	.word	0x00401b9d

00402568 <prvAllocateTCBAndStack>:
  402568:	b570      	push	{r4, r5, r6, lr}
  40256a:	4606      	mov	r6, r0
  40256c:	460c      	mov	r4, r1
  40256e:	b919      	cbnz	r1, 402578 <prvAllocateTCBAndStack+0x10>
  402570:	0080      	lsls	r0, r0, #2
  402572:	4b0c      	ldr	r3, [pc, #48]	; (4025a4 <prvAllocateTCBAndStack+0x3c>)
  402574:	4798      	blx	r3
  402576:	4604      	mov	r4, r0
  402578:	b18c      	cbz	r4, 40259e <prvAllocateTCBAndStack+0x36>
  40257a:	2058      	movs	r0, #88	; 0x58
  40257c:	4b09      	ldr	r3, [pc, #36]	; (4025a4 <prvAllocateTCBAndStack+0x3c>)
  40257e:	4798      	blx	r3
  402580:	4605      	mov	r5, r0
  402582:	b140      	cbz	r0, 402596 <prvAllocateTCBAndStack+0x2e>
  402584:	6304      	str	r4, [r0, #48]	; 0x30
  402586:	b125      	cbz	r5, 402592 <prvAllocateTCBAndStack+0x2a>
  402588:	00b2      	lsls	r2, r6, #2
  40258a:	21a5      	movs	r1, #165	; 0xa5
  40258c:	6b28      	ldr	r0, [r5, #48]	; 0x30
  40258e:	4b06      	ldr	r3, [pc, #24]	; (4025a8 <prvAllocateTCBAndStack+0x40>)
  402590:	4798      	blx	r3
  402592:	4628      	mov	r0, r5
  402594:	bd70      	pop	{r4, r5, r6, pc}
  402596:	4620      	mov	r0, r4
  402598:	4b04      	ldr	r3, [pc, #16]	; (4025ac <prvAllocateTCBAndStack+0x44>)
  40259a:	4798      	blx	r3
  40259c:	e7f3      	b.n	402586 <prvAllocateTCBAndStack+0x1e>
  40259e:	2500      	movs	r5, #0
  4025a0:	e7f1      	b.n	402586 <prvAllocateTCBAndStack+0x1e>
  4025a2:	bf00      	nop
  4025a4:	00401b29 	.word	0x00401b29
  4025a8:	00427f69 	.word	0x00427f69
  4025ac:	00401b9d 	.word	0x00401b9d

004025b0 <prvInitialiseTCBVariables>:
  4025b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4025b2:	4604      	mov	r4, r0
  4025b4:	4615      	mov	r5, r2
  4025b6:	2300      	movs	r3, #0
  4025b8:	2b09      	cmp	r3, #9
  4025ba:	d918      	bls.n	4025ee <prvInitialiseTCBVariables+0x3e>
  4025bc:	2300      	movs	r3, #0
  4025be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  4025c2:	2d04      	cmp	r5, #4
  4025c4:	d900      	bls.n	4025c8 <prvInitialiseTCBVariables+0x18>
  4025c6:	2504      	movs	r5, #4
  4025c8:	62e5      	str	r5, [r4, #44]	; 0x2c
  4025ca:	64a5      	str	r5, [r4, #72]	; 0x48
  4025cc:	2600      	movs	r6, #0
  4025ce:	64e6      	str	r6, [r4, #76]	; 0x4c
  4025d0:	1d20      	adds	r0, r4, #4
  4025d2:	4f0b      	ldr	r7, [pc, #44]	; (402600 <prvInitialiseTCBVariables+0x50>)
  4025d4:	47b8      	blx	r7
  4025d6:	f104 0018 	add.w	r0, r4, #24
  4025da:	47b8      	blx	r7
  4025dc:	6124      	str	r4, [r4, #16]
  4025de:	f1c5 0505 	rsb	r5, r5, #5
  4025e2:	61a5      	str	r5, [r4, #24]
  4025e4:	6264      	str	r4, [r4, #36]	; 0x24
  4025e6:	6526      	str	r6, [r4, #80]	; 0x50
  4025e8:	f884 6054 	strb.w	r6, [r4, #84]	; 0x54
  4025ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4025ee:	5cc8      	ldrb	r0, [r1, r3]
  4025f0:	18e2      	adds	r2, r4, r3
  4025f2:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
  4025f6:	5cca      	ldrb	r2, [r1, r3]
  4025f8:	2a00      	cmp	r2, #0
  4025fa:	d0df      	beq.n	4025bc <prvInitialiseTCBVariables+0xc>
  4025fc:	3301      	adds	r3, #1
  4025fe:	e7db      	b.n	4025b8 <prvInitialiseTCBVariables+0x8>
  402600:	004017a3 	.word	0x004017a3

00402604 <prvInitialiseTaskLists>:
  402604:	b570      	push	{r4, r5, r6, lr}
  402606:	2400      	movs	r4, #0
  402608:	2c04      	cmp	r4, #4
  40260a:	d911      	bls.n	402630 <prvInitialiseTaskLists+0x2c>
  40260c:	4e0c      	ldr	r6, [pc, #48]	; (402640 <prvInitialiseTaskLists+0x3c>)
  40260e:	4630      	mov	r0, r6
  402610:	4c0c      	ldr	r4, [pc, #48]	; (402644 <prvInitialiseTaskLists+0x40>)
  402612:	47a0      	blx	r4
  402614:	4d0c      	ldr	r5, [pc, #48]	; (402648 <prvInitialiseTaskLists+0x44>)
  402616:	4628      	mov	r0, r5
  402618:	47a0      	blx	r4
  40261a:	480c      	ldr	r0, [pc, #48]	; (40264c <prvInitialiseTaskLists+0x48>)
  40261c:	47a0      	blx	r4
  40261e:	480c      	ldr	r0, [pc, #48]	; (402650 <prvInitialiseTaskLists+0x4c>)
  402620:	47a0      	blx	r4
  402622:	480c      	ldr	r0, [pc, #48]	; (402654 <prvInitialiseTaskLists+0x50>)
  402624:	47a0      	blx	r4
  402626:	4b0c      	ldr	r3, [pc, #48]	; (402658 <prvInitialiseTaskLists+0x54>)
  402628:	601e      	str	r6, [r3, #0]
  40262a:	4b0c      	ldr	r3, [pc, #48]	; (40265c <prvInitialiseTaskLists+0x58>)
  40262c:	601d      	str	r5, [r3, #0]
  40262e:	bd70      	pop	{r4, r5, r6, pc}
  402630:	2014      	movs	r0, #20
  402632:	4b0b      	ldr	r3, [pc, #44]	; (402660 <prvInitialiseTaskLists+0x5c>)
  402634:	fb00 3004 	mla	r0, r0, r4, r3
  402638:	4b02      	ldr	r3, [pc, #8]	; (402644 <prvInitialiseTaskLists+0x40>)
  40263a:	4798      	blx	r3
  40263c:	3401      	adds	r4, #1
  40263e:	e7e3      	b.n	402608 <prvInitialiseTaskLists+0x4>
  402640:	2040c368 	.word	0x2040c368
  402644:	0040178d 	.word	0x0040178d
  402648:	2040c37c 	.word	0x2040c37c
  40264c:	2040c398 	.word	0x2040c398
  402650:	2040c3c4 	.word	0x2040c3c4
  402654:	2040c3b0 	.word	0x2040c3b0
  402658:	2040c2e4 	.word	0x2040c2e4
  40265c:	2040c2e8 	.word	0x2040c2e8
  402660:	2040c2ec 	.word	0x2040c2ec

00402664 <prvAddCurrentTaskToDelayedList>:
  402664:	b510      	push	{r4, lr}
  402666:	4b0f      	ldr	r3, [pc, #60]	; (4026a4 <prvAddCurrentTaskToDelayedList+0x40>)
  402668:	681b      	ldr	r3, [r3, #0]
  40266a:	6058      	str	r0, [r3, #4]
  40266c:	4b0e      	ldr	r3, [pc, #56]	; (4026a8 <prvAddCurrentTaskToDelayedList+0x44>)
  40266e:	681b      	ldr	r3, [r3, #0]
  402670:	4298      	cmp	r0, r3
  402672:	d30e      	bcc.n	402692 <prvAddCurrentTaskToDelayedList+0x2e>
  402674:	4604      	mov	r4, r0
  402676:	4b0d      	ldr	r3, [pc, #52]	; (4026ac <prvAddCurrentTaskToDelayedList+0x48>)
  402678:	6818      	ldr	r0, [r3, #0]
  40267a:	4b0a      	ldr	r3, [pc, #40]	; (4026a4 <prvAddCurrentTaskToDelayedList+0x40>)
  40267c:	6819      	ldr	r1, [r3, #0]
  40267e:	3104      	adds	r1, #4
  402680:	4b0b      	ldr	r3, [pc, #44]	; (4026b0 <prvAddCurrentTaskToDelayedList+0x4c>)
  402682:	4798      	blx	r3
  402684:	4b0b      	ldr	r3, [pc, #44]	; (4026b4 <prvAddCurrentTaskToDelayedList+0x50>)
  402686:	681b      	ldr	r3, [r3, #0]
  402688:	429c      	cmp	r4, r3
  40268a:	d201      	bcs.n	402690 <prvAddCurrentTaskToDelayedList+0x2c>
  40268c:	4b09      	ldr	r3, [pc, #36]	; (4026b4 <prvAddCurrentTaskToDelayedList+0x50>)
  40268e:	601c      	str	r4, [r3, #0]
  402690:	bd10      	pop	{r4, pc}
  402692:	4b09      	ldr	r3, [pc, #36]	; (4026b8 <prvAddCurrentTaskToDelayedList+0x54>)
  402694:	6818      	ldr	r0, [r3, #0]
  402696:	4b03      	ldr	r3, [pc, #12]	; (4026a4 <prvAddCurrentTaskToDelayedList+0x40>)
  402698:	6819      	ldr	r1, [r3, #0]
  40269a:	3104      	adds	r1, #4
  40269c:	4b04      	ldr	r3, [pc, #16]	; (4026b0 <prvAddCurrentTaskToDelayedList+0x4c>)
  40269e:	4798      	blx	r3
  4026a0:	bd10      	pop	{r4, pc}
  4026a2:	bf00      	nop
  4026a4:	2040c2e0 	.word	0x2040c2e0
  4026a8:	2040c3d8 	.word	0x2040c3d8
  4026ac:	2040c2e4 	.word	0x2040c2e4
  4026b0:	004017c1 	.word	0x004017c1
  4026b4:	2040c390 	.word	0x2040c390
  4026b8:	2040c2e8 	.word	0x2040c2e8

004026bc <xTaskGenericCreate>:
  4026bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4026c0:	b083      	sub	sp, #12
  4026c2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4026c4:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
  4026c8:	b168      	cbz	r0, 4026e6 <xTaskGenericCreate+0x2a>
  4026ca:	4680      	mov	r8, r0
  4026cc:	2f04      	cmp	r7, #4
  4026ce:	d915      	bls.n	4026fc <xTaskGenericCreate+0x40>
  4026d0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026d4:	b672      	cpsid	i
  4026d6:	f383 8811 	msr	BASEPRI, r3
  4026da:	f3bf 8f6f 	isb	sy
  4026de:	f3bf 8f4f 	dsb	sy
  4026e2:	b662      	cpsie	i
  4026e4:	e7fe      	b.n	4026e4 <xTaskGenericCreate+0x28>
  4026e6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026ea:	b672      	cpsid	i
  4026ec:	f383 8811 	msr	BASEPRI, r3
  4026f0:	f3bf 8f6f 	isb	sy
  4026f4:	f3bf 8f4f 	dsb	sy
  4026f8:	b662      	cpsie	i
  4026fa:	e7fe      	b.n	4026fa <xTaskGenericCreate+0x3e>
  4026fc:	4699      	mov	r9, r3
  4026fe:	4616      	mov	r6, r2
  402700:	468a      	mov	sl, r1
  402702:	990e      	ldr	r1, [sp, #56]	; 0x38
  402704:	4610      	mov	r0, r2
  402706:	4b35      	ldr	r3, [pc, #212]	; (4027dc <xTaskGenericCreate+0x120>)
  402708:	4798      	blx	r3
  40270a:	4604      	mov	r4, r0
  40270c:	2800      	cmp	r0, #0
  40270e:	d062      	beq.n	4027d6 <xTaskGenericCreate+0x11a>
  402710:	6b03      	ldr	r3, [r0, #48]	; 0x30
  402712:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
  402716:	4435      	add	r5, r6
  402718:	eb03 0385 	add.w	r3, r3, r5, lsl #2
  40271c:	f023 0507 	bic.w	r5, r3, #7
  402720:	9600      	str	r6, [sp, #0]
  402722:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  402724:	463a      	mov	r2, r7
  402726:	4651      	mov	r1, sl
  402728:	4e2d      	ldr	r6, [pc, #180]	; (4027e0 <xTaskGenericCreate+0x124>)
  40272a:	47b0      	blx	r6
  40272c:	464a      	mov	r2, r9
  40272e:	4641      	mov	r1, r8
  402730:	4628      	mov	r0, r5
  402732:	4b2c      	ldr	r3, [pc, #176]	; (4027e4 <xTaskGenericCreate+0x128>)
  402734:	4798      	blx	r3
  402736:	6020      	str	r0, [r4, #0]
  402738:	f1bb 0f00 	cmp.w	fp, #0
  40273c:	d001      	beq.n	402742 <xTaskGenericCreate+0x86>
  40273e:	f8cb 4000 	str.w	r4, [fp]
  402742:	4b29      	ldr	r3, [pc, #164]	; (4027e8 <xTaskGenericCreate+0x12c>)
  402744:	4798      	blx	r3
  402746:	4a29      	ldr	r2, [pc, #164]	; (4027ec <xTaskGenericCreate+0x130>)
  402748:	6813      	ldr	r3, [r2, #0]
  40274a:	3301      	adds	r3, #1
  40274c:	6013      	str	r3, [r2, #0]
  40274e:	4b28      	ldr	r3, [pc, #160]	; (4027f0 <xTaskGenericCreate+0x134>)
  402750:	681b      	ldr	r3, [r3, #0]
  402752:	2b00      	cmp	r3, #0
  402754:	d133      	bne.n	4027be <xTaskGenericCreate+0x102>
  402756:	4b26      	ldr	r3, [pc, #152]	; (4027f0 <xTaskGenericCreate+0x134>)
  402758:	601c      	str	r4, [r3, #0]
  40275a:	6813      	ldr	r3, [r2, #0]
  40275c:	2b01      	cmp	r3, #1
  40275e:	d101      	bne.n	402764 <xTaskGenericCreate+0xa8>
  402760:	4b24      	ldr	r3, [pc, #144]	; (4027f4 <xTaskGenericCreate+0x138>)
  402762:	4798      	blx	r3
  402764:	4a24      	ldr	r2, [pc, #144]	; (4027f8 <xTaskGenericCreate+0x13c>)
  402766:	6813      	ldr	r3, [r2, #0]
  402768:	3301      	adds	r3, #1
  40276a:	6013      	str	r3, [r2, #0]
  40276c:	6423      	str	r3, [r4, #64]	; 0x40
  40276e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402770:	2501      	movs	r5, #1
  402772:	fa05 f203 	lsl.w	r2, r5, r3
  402776:	4921      	ldr	r1, [pc, #132]	; (4027fc <xTaskGenericCreate+0x140>)
  402778:	6808      	ldr	r0, [r1, #0]
  40277a:	4302      	orrs	r2, r0
  40277c:	600a      	str	r2, [r1, #0]
  40277e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402782:	009a      	lsls	r2, r3, #2
  402784:	1d21      	adds	r1, r4, #4
  402786:	481e      	ldr	r0, [pc, #120]	; (402800 <xTaskGenericCreate+0x144>)
  402788:	4410      	add	r0, r2
  40278a:	4b1e      	ldr	r3, [pc, #120]	; (402804 <xTaskGenericCreate+0x148>)
  40278c:	4798      	blx	r3
  40278e:	4b1e      	ldr	r3, [pc, #120]	; (402808 <xTaskGenericCreate+0x14c>)
  402790:	4798      	blx	r3
  402792:	4628      	mov	r0, r5
  402794:	2801      	cmp	r0, #1
  402796:	d10f      	bne.n	4027b8 <xTaskGenericCreate+0xfc>
  402798:	4b1c      	ldr	r3, [pc, #112]	; (40280c <xTaskGenericCreate+0x150>)
  40279a:	681b      	ldr	r3, [r3, #0]
  40279c:	b163      	cbz	r3, 4027b8 <xTaskGenericCreate+0xfc>
  40279e:	4b14      	ldr	r3, [pc, #80]	; (4027f0 <xTaskGenericCreate+0x134>)
  4027a0:	681b      	ldr	r3, [r3, #0]
  4027a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4027a4:	429f      	cmp	r7, r3
  4027a6:	d907      	bls.n	4027b8 <xTaskGenericCreate+0xfc>
  4027a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4027ac:	4b18      	ldr	r3, [pc, #96]	; (402810 <xTaskGenericCreate+0x154>)
  4027ae:	601a      	str	r2, [r3, #0]
  4027b0:	f3bf 8f4f 	dsb	sy
  4027b4:	f3bf 8f6f 	isb	sy
  4027b8:	b003      	add	sp, #12
  4027ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4027be:	4b13      	ldr	r3, [pc, #76]	; (40280c <xTaskGenericCreate+0x150>)
  4027c0:	681b      	ldr	r3, [r3, #0]
  4027c2:	2b00      	cmp	r3, #0
  4027c4:	d1ce      	bne.n	402764 <xTaskGenericCreate+0xa8>
  4027c6:	4b0a      	ldr	r3, [pc, #40]	; (4027f0 <xTaskGenericCreate+0x134>)
  4027c8:	681b      	ldr	r3, [r3, #0]
  4027ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4027cc:	429f      	cmp	r7, r3
  4027ce:	d3c9      	bcc.n	402764 <xTaskGenericCreate+0xa8>
  4027d0:	4b07      	ldr	r3, [pc, #28]	; (4027f0 <xTaskGenericCreate+0x134>)
  4027d2:	601c      	str	r4, [r3, #0]
  4027d4:	e7c6      	b.n	402764 <xTaskGenericCreate+0xa8>
  4027d6:	f04f 30ff 	mov.w	r0, #4294967295
  4027da:	e7db      	b.n	402794 <xTaskGenericCreate+0xd8>
  4027dc:	00402569 	.word	0x00402569
  4027e0:	004025b1 	.word	0x004025b1
  4027e4:	0040188d 	.word	0x0040188d
  4027e8:	004018d9 	.word	0x004018d9
  4027ec:	2040c350 	.word	0x2040c350
  4027f0:	2040c2e0 	.word	0x2040c2e0
  4027f4:	00402605 	.word	0x00402605
  4027f8:	2040c35c 	.word	0x2040c35c
  4027fc:	2040c364 	.word	0x2040c364
  402800:	2040c2ec 	.word	0x2040c2ec
  402804:	004017a9 	.word	0x004017a9
  402808:	00401925 	.word	0x00401925
  40280c:	2040c3ac 	.word	0x2040c3ac
  402810:	e000ed04 	.word	0xe000ed04

00402814 <vTaskStartScheduler>:
  402814:	b510      	push	{r4, lr}
  402816:	b084      	sub	sp, #16
  402818:	2300      	movs	r3, #0
  40281a:	9303      	str	r3, [sp, #12]
  40281c:	9302      	str	r3, [sp, #8]
  40281e:	9301      	str	r3, [sp, #4]
  402820:	9300      	str	r3, [sp, #0]
  402822:	2282      	movs	r2, #130	; 0x82
  402824:	4917      	ldr	r1, [pc, #92]	; (402884 <vTaskStartScheduler+0x70>)
  402826:	4818      	ldr	r0, [pc, #96]	; (402888 <vTaskStartScheduler+0x74>)
  402828:	4c18      	ldr	r4, [pc, #96]	; (40288c <vTaskStartScheduler+0x78>)
  40282a:	47a0      	blx	r4
  40282c:	2801      	cmp	r0, #1
  40282e:	d00d      	beq.n	40284c <vTaskStartScheduler+0x38>
  402830:	2801      	cmp	r0, #1
  402832:	d00e      	beq.n	402852 <vTaskStartScheduler+0x3e>
  402834:	bb18      	cbnz	r0, 40287e <vTaskStartScheduler+0x6a>
  402836:	f04f 0380 	mov.w	r3, #128	; 0x80
  40283a:	b672      	cpsid	i
  40283c:	f383 8811 	msr	BASEPRI, r3
  402840:	f3bf 8f6f 	isb	sy
  402844:	f3bf 8f4f 	dsb	sy
  402848:	b662      	cpsie	i
  40284a:	e7fe      	b.n	40284a <vTaskStartScheduler+0x36>
  40284c:	4b10      	ldr	r3, [pc, #64]	; (402890 <vTaskStartScheduler+0x7c>)
  40284e:	4798      	blx	r3
  402850:	e7ee      	b.n	402830 <vTaskStartScheduler+0x1c>
  402852:	f04f 0380 	mov.w	r3, #128	; 0x80
  402856:	b672      	cpsid	i
  402858:	f383 8811 	msr	BASEPRI, r3
  40285c:	f3bf 8f6f 	isb	sy
  402860:	f3bf 8f4f 	dsb	sy
  402864:	b662      	cpsie	i
  402866:	f04f 32ff 	mov.w	r2, #4294967295
  40286a:	4b0a      	ldr	r3, [pc, #40]	; (402894 <vTaskStartScheduler+0x80>)
  40286c:	601a      	str	r2, [r3, #0]
  40286e:	2201      	movs	r2, #1
  402870:	4b09      	ldr	r3, [pc, #36]	; (402898 <vTaskStartScheduler+0x84>)
  402872:	601a      	str	r2, [r3, #0]
  402874:	2200      	movs	r2, #0
  402876:	4b09      	ldr	r3, [pc, #36]	; (40289c <vTaskStartScheduler+0x88>)
  402878:	601a      	str	r2, [r3, #0]
  40287a:	4b09      	ldr	r3, [pc, #36]	; (4028a0 <vTaskStartScheduler+0x8c>)
  40287c:	4798      	blx	r3
  40287e:	b004      	add	sp, #16
  402880:	bd10      	pop	{r4, pc}
  402882:	bf00      	nop
  402884:	0042c6fc 	.word	0x0042c6fc
  402888:	00402c21 	.word	0x00402c21
  40288c:	004026bd 	.word	0x004026bd
  402890:	00403231 	.word	0x00403231
  402894:	2040c390 	.word	0x2040c390
  402898:	2040c3ac 	.word	0x2040c3ac
  40289c:	2040c3d8 	.word	0x2040c3d8
  4028a0:	00401a0d 	.word	0x00401a0d

004028a4 <vTaskSuspendAll>:
  4028a4:	4a02      	ldr	r2, [pc, #8]	; (4028b0 <vTaskSuspendAll+0xc>)
  4028a6:	6813      	ldr	r3, [r2, #0]
  4028a8:	3301      	adds	r3, #1
  4028aa:	6013      	str	r3, [r2, #0]
  4028ac:	4770      	bx	lr
  4028ae:	bf00      	nop
  4028b0:	2040c358 	.word	0x2040c358

004028b4 <xTaskGetTickCount>:
  4028b4:	4b01      	ldr	r3, [pc, #4]	; (4028bc <xTaskGetTickCount+0x8>)
  4028b6:	6818      	ldr	r0, [r3, #0]
  4028b8:	4770      	bx	lr
  4028ba:	bf00      	nop
  4028bc:	2040c3d8 	.word	0x2040c3d8

004028c0 <xTaskIncrementTick>:
  4028c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4028c2:	4b41      	ldr	r3, [pc, #260]	; (4029c8 <xTaskIncrementTick+0x108>)
  4028c4:	681b      	ldr	r3, [r3, #0]
  4028c6:	2b00      	cmp	r3, #0
  4028c8:	d175      	bne.n	4029b6 <xTaskIncrementTick+0xf6>
  4028ca:	4b40      	ldr	r3, [pc, #256]	; (4029cc <xTaskIncrementTick+0x10c>)
  4028cc:	681a      	ldr	r2, [r3, #0]
  4028ce:	3201      	adds	r2, #1
  4028d0:	601a      	str	r2, [r3, #0]
  4028d2:	681e      	ldr	r6, [r3, #0]
  4028d4:	b9d6      	cbnz	r6, 40290c <xTaskIncrementTick+0x4c>
  4028d6:	4b3e      	ldr	r3, [pc, #248]	; (4029d0 <xTaskIncrementTick+0x110>)
  4028d8:	681b      	ldr	r3, [r3, #0]
  4028da:	681b      	ldr	r3, [r3, #0]
  4028dc:	b153      	cbz	r3, 4028f4 <xTaskIncrementTick+0x34>
  4028de:	f04f 0380 	mov.w	r3, #128	; 0x80
  4028e2:	b672      	cpsid	i
  4028e4:	f383 8811 	msr	BASEPRI, r3
  4028e8:	f3bf 8f6f 	isb	sy
  4028ec:	f3bf 8f4f 	dsb	sy
  4028f0:	b662      	cpsie	i
  4028f2:	e7fe      	b.n	4028f2 <xTaskIncrementTick+0x32>
  4028f4:	4a36      	ldr	r2, [pc, #216]	; (4029d0 <xTaskIncrementTick+0x110>)
  4028f6:	6811      	ldr	r1, [r2, #0]
  4028f8:	4b36      	ldr	r3, [pc, #216]	; (4029d4 <xTaskIncrementTick+0x114>)
  4028fa:	6818      	ldr	r0, [r3, #0]
  4028fc:	6010      	str	r0, [r2, #0]
  4028fe:	6019      	str	r1, [r3, #0]
  402900:	4a35      	ldr	r2, [pc, #212]	; (4029d8 <xTaskIncrementTick+0x118>)
  402902:	6813      	ldr	r3, [r2, #0]
  402904:	3301      	adds	r3, #1
  402906:	6013      	str	r3, [r2, #0]
  402908:	4b34      	ldr	r3, [pc, #208]	; (4029dc <xTaskIncrementTick+0x11c>)
  40290a:	4798      	blx	r3
  40290c:	4b34      	ldr	r3, [pc, #208]	; (4029e0 <xTaskIncrementTick+0x120>)
  40290e:	681b      	ldr	r3, [r3, #0]
  402910:	429e      	cmp	r6, r3
  402912:	d244      	bcs.n	40299e <xTaskIncrementTick+0xde>
  402914:	2400      	movs	r4, #0
  402916:	4b33      	ldr	r3, [pc, #204]	; (4029e4 <xTaskIncrementTick+0x124>)
  402918:	681b      	ldr	r3, [r3, #0]
  40291a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40291c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402920:	009a      	lsls	r2, r3, #2
  402922:	4b31      	ldr	r3, [pc, #196]	; (4029e8 <xTaskIncrementTick+0x128>)
  402924:	589b      	ldr	r3, [r3, r2]
  402926:	2b01      	cmp	r3, #1
  402928:	d900      	bls.n	40292c <xTaskIncrementTick+0x6c>
  40292a:	2401      	movs	r4, #1
  40292c:	4b2f      	ldr	r3, [pc, #188]	; (4029ec <xTaskIncrementTick+0x12c>)
  40292e:	681b      	ldr	r3, [r3, #0]
  402930:	b90b      	cbnz	r3, 402936 <xTaskIncrementTick+0x76>
  402932:	4b2f      	ldr	r3, [pc, #188]	; (4029f0 <xTaskIncrementTick+0x130>)
  402934:	4798      	blx	r3
  402936:	4b2f      	ldr	r3, [pc, #188]	; (4029f4 <xTaskIncrementTick+0x134>)
  402938:	681b      	ldr	r3, [r3, #0]
  40293a:	b103      	cbz	r3, 40293e <xTaskIncrementTick+0x7e>
  40293c:	2401      	movs	r4, #1
  40293e:	4620      	mov	r0, r4
  402940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402942:	2401      	movs	r4, #1
  402944:	4b22      	ldr	r3, [pc, #136]	; (4029d0 <xTaskIncrementTick+0x110>)
  402946:	681b      	ldr	r3, [r3, #0]
  402948:	681b      	ldr	r3, [r3, #0]
  40294a:	b353      	cbz	r3, 4029a2 <xTaskIncrementTick+0xe2>
  40294c:	2300      	movs	r3, #0
  40294e:	bb53      	cbnz	r3, 4029a6 <xTaskIncrementTick+0xe6>
  402950:	4b1f      	ldr	r3, [pc, #124]	; (4029d0 <xTaskIncrementTick+0x110>)
  402952:	681b      	ldr	r3, [r3, #0]
  402954:	68db      	ldr	r3, [r3, #12]
  402956:	68dd      	ldr	r5, [r3, #12]
  402958:	686b      	ldr	r3, [r5, #4]
  40295a:	429e      	cmp	r6, r3
  40295c:	d328      	bcc.n	4029b0 <xTaskIncrementTick+0xf0>
  40295e:	1d2f      	adds	r7, r5, #4
  402960:	4638      	mov	r0, r7
  402962:	4b25      	ldr	r3, [pc, #148]	; (4029f8 <xTaskIncrementTick+0x138>)
  402964:	4798      	blx	r3
  402966:	6aab      	ldr	r3, [r5, #40]	; 0x28
  402968:	b11b      	cbz	r3, 402972 <xTaskIncrementTick+0xb2>
  40296a:	f105 0018 	add.w	r0, r5, #24
  40296e:	4b22      	ldr	r3, [pc, #136]	; (4029f8 <xTaskIncrementTick+0x138>)
  402970:	4798      	blx	r3
  402972:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  402974:	2201      	movs	r2, #1
  402976:	409a      	lsls	r2, r3
  402978:	4920      	ldr	r1, [pc, #128]	; (4029fc <xTaskIncrementTick+0x13c>)
  40297a:	6808      	ldr	r0, [r1, #0]
  40297c:	4302      	orrs	r2, r0
  40297e:	600a      	str	r2, [r1, #0]
  402980:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402984:	009a      	lsls	r2, r3, #2
  402986:	4639      	mov	r1, r7
  402988:	4817      	ldr	r0, [pc, #92]	; (4029e8 <xTaskIncrementTick+0x128>)
  40298a:	4410      	add	r0, r2
  40298c:	4b1c      	ldr	r3, [pc, #112]	; (402a00 <xTaskIncrementTick+0x140>)
  40298e:	4798      	blx	r3
  402990:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  402992:	4b14      	ldr	r3, [pc, #80]	; (4029e4 <xTaskIncrementTick+0x124>)
  402994:	681b      	ldr	r3, [r3, #0]
  402996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402998:	429a      	cmp	r2, r3
  40299a:	d2d2      	bcs.n	402942 <xTaskIncrementTick+0x82>
  40299c:	e7d2      	b.n	402944 <xTaskIncrementTick+0x84>
  40299e:	2400      	movs	r4, #0
  4029a0:	e7d0      	b.n	402944 <xTaskIncrementTick+0x84>
  4029a2:	2301      	movs	r3, #1
  4029a4:	e7d3      	b.n	40294e <xTaskIncrementTick+0x8e>
  4029a6:	f04f 32ff 	mov.w	r2, #4294967295
  4029aa:	4b0d      	ldr	r3, [pc, #52]	; (4029e0 <xTaskIncrementTick+0x120>)
  4029ac:	601a      	str	r2, [r3, #0]
  4029ae:	e7b2      	b.n	402916 <xTaskIncrementTick+0x56>
  4029b0:	4a0b      	ldr	r2, [pc, #44]	; (4029e0 <xTaskIncrementTick+0x120>)
  4029b2:	6013      	str	r3, [r2, #0]
  4029b4:	e7af      	b.n	402916 <xTaskIncrementTick+0x56>
  4029b6:	4a0d      	ldr	r2, [pc, #52]	; (4029ec <xTaskIncrementTick+0x12c>)
  4029b8:	6813      	ldr	r3, [r2, #0]
  4029ba:	3301      	adds	r3, #1
  4029bc:	6013      	str	r3, [r2, #0]
  4029be:	4b0c      	ldr	r3, [pc, #48]	; (4029f0 <xTaskIncrementTick+0x130>)
  4029c0:	4798      	blx	r3
  4029c2:	2400      	movs	r4, #0
  4029c4:	e7b7      	b.n	402936 <xTaskIncrementTick+0x76>
  4029c6:	bf00      	nop
  4029c8:	2040c358 	.word	0x2040c358
  4029cc:	2040c3d8 	.word	0x2040c3d8
  4029d0:	2040c2e4 	.word	0x2040c2e4
  4029d4:	2040c2e8 	.word	0x2040c2e8
  4029d8:	2040c394 	.word	0x2040c394
  4029dc:	00402521 	.word	0x00402521
  4029e0:	2040c390 	.word	0x2040c390
  4029e4:	2040c2e0 	.word	0x2040c2e0
  4029e8:	2040c2ec 	.word	0x2040c2ec
  4029ec:	2040c354 	.word	0x2040c354
  4029f0:	00425f3d 	.word	0x00425f3d
  4029f4:	2040c3dc 	.word	0x2040c3dc
  4029f8:	004017f5 	.word	0x004017f5
  4029fc:	2040c364 	.word	0x2040c364
  402a00:	004017a9 	.word	0x004017a9

00402a04 <xTaskResumeAll>:
  402a04:	4b35      	ldr	r3, [pc, #212]	; (402adc <xTaskResumeAll+0xd8>)
  402a06:	681b      	ldr	r3, [r3, #0]
  402a08:	b953      	cbnz	r3, 402a20 <xTaskResumeAll+0x1c>
  402a0a:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a0e:	b672      	cpsid	i
  402a10:	f383 8811 	msr	BASEPRI, r3
  402a14:	f3bf 8f6f 	isb	sy
  402a18:	f3bf 8f4f 	dsb	sy
  402a1c:	b662      	cpsie	i
  402a1e:	e7fe      	b.n	402a1e <xTaskResumeAll+0x1a>
  402a20:	b570      	push	{r4, r5, r6, lr}
  402a22:	4b2f      	ldr	r3, [pc, #188]	; (402ae0 <xTaskResumeAll+0xdc>)
  402a24:	4798      	blx	r3
  402a26:	4b2d      	ldr	r3, [pc, #180]	; (402adc <xTaskResumeAll+0xd8>)
  402a28:	681a      	ldr	r2, [r3, #0]
  402a2a:	3a01      	subs	r2, #1
  402a2c:	601a      	str	r2, [r3, #0]
  402a2e:	681b      	ldr	r3, [r3, #0]
  402a30:	2b00      	cmp	r3, #0
  402a32:	d14f      	bne.n	402ad4 <xTaskResumeAll+0xd0>
  402a34:	4b2b      	ldr	r3, [pc, #172]	; (402ae4 <xTaskResumeAll+0xe0>)
  402a36:	681b      	ldr	r3, [r3, #0]
  402a38:	bb1b      	cbnz	r3, 402a82 <xTaskResumeAll+0x7e>
  402a3a:	2400      	movs	r4, #0
  402a3c:	4b2a      	ldr	r3, [pc, #168]	; (402ae8 <xTaskResumeAll+0xe4>)
  402a3e:	4798      	blx	r3
  402a40:	4620      	mov	r0, r4
  402a42:	bd70      	pop	{r4, r5, r6, pc}
  402a44:	4b29      	ldr	r3, [pc, #164]	; (402aec <xTaskResumeAll+0xe8>)
  402a46:	68db      	ldr	r3, [r3, #12]
  402a48:	68dc      	ldr	r4, [r3, #12]
  402a4a:	f104 0018 	add.w	r0, r4, #24
  402a4e:	4e28      	ldr	r6, [pc, #160]	; (402af0 <xTaskResumeAll+0xec>)
  402a50:	47b0      	blx	r6
  402a52:	1d25      	adds	r5, r4, #4
  402a54:	4628      	mov	r0, r5
  402a56:	47b0      	blx	r6
  402a58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402a5a:	2201      	movs	r2, #1
  402a5c:	409a      	lsls	r2, r3
  402a5e:	4925      	ldr	r1, [pc, #148]	; (402af4 <xTaskResumeAll+0xf0>)
  402a60:	6808      	ldr	r0, [r1, #0]
  402a62:	4302      	orrs	r2, r0
  402a64:	600a      	str	r2, [r1, #0]
  402a66:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402a6a:	009a      	lsls	r2, r3, #2
  402a6c:	4629      	mov	r1, r5
  402a6e:	4822      	ldr	r0, [pc, #136]	; (402af8 <xTaskResumeAll+0xf4>)
  402a70:	4410      	add	r0, r2
  402a72:	4b22      	ldr	r3, [pc, #136]	; (402afc <xTaskResumeAll+0xf8>)
  402a74:	4798      	blx	r3
  402a76:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402a78:	4b21      	ldr	r3, [pc, #132]	; (402b00 <xTaskResumeAll+0xfc>)
  402a7a:	681b      	ldr	r3, [r3, #0]
  402a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402a7e:	429a      	cmp	r2, r3
  402a80:	d214      	bcs.n	402aac <xTaskResumeAll+0xa8>
  402a82:	4b1a      	ldr	r3, [pc, #104]	; (402aec <xTaskResumeAll+0xe8>)
  402a84:	681b      	ldr	r3, [r3, #0]
  402a86:	2b00      	cmp	r3, #0
  402a88:	d1dc      	bne.n	402a44 <xTaskResumeAll+0x40>
  402a8a:	4b1e      	ldr	r3, [pc, #120]	; (402b04 <xTaskResumeAll+0x100>)
  402a8c:	681b      	ldr	r3, [r3, #0]
  402a8e:	b9ab      	cbnz	r3, 402abc <xTaskResumeAll+0xb8>
  402a90:	4b1d      	ldr	r3, [pc, #116]	; (402b08 <xTaskResumeAll+0x104>)
  402a92:	681b      	ldr	r3, [r3, #0]
  402a94:	2b01      	cmp	r3, #1
  402a96:	d11f      	bne.n	402ad8 <xTaskResumeAll+0xd4>
  402a98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402a9c:	4b1b      	ldr	r3, [pc, #108]	; (402b0c <xTaskResumeAll+0x108>)
  402a9e:	601a      	str	r2, [r3, #0]
  402aa0:	f3bf 8f4f 	dsb	sy
  402aa4:	f3bf 8f6f 	isb	sy
  402aa8:	2401      	movs	r4, #1
  402aaa:	e7c7      	b.n	402a3c <xTaskResumeAll+0x38>
  402aac:	2201      	movs	r2, #1
  402aae:	4b16      	ldr	r3, [pc, #88]	; (402b08 <xTaskResumeAll+0x104>)
  402ab0:	601a      	str	r2, [r3, #0]
  402ab2:	e7e6      	b.n	402a82 <xTaskResumeAll+0x7e>
  402ab4:	4a13      	ldr	r2, [pc, #76]	; (402b04 <xTaskResumeAll+0x100>)
  402ab6:	6813      	ldr	r3, [r2, #0]
  402ab8:	3b01      	subs	r3, #1
  402aba:	6013      	str	r3, [r2, #0]
  402abc:	4b11      	ldr	r3, [pc, #68]	; (402b04 <xTaskResumeAll+0x100>)
  402abe:	681b      	ldr	r3, [r3, #0]
  402ac0:	2b00      	cmp	r3, #0
  402ac2:	d0e5      	beq.n	402a90 <xTaskResumeAll+0x8c>
  402ac4:	4b12      	ldr	r3, [pc, #72]	; (402b10 <xTaskResumeAll+0x10c>)
  402ac6:	4798      	blx	r3
  402ac8:	2800      	cmp	r0, #0
  402aca:	d0f3      	beq.n	402ab4 <xTaskResumeAll+0xb0>
  402acc:	2201      	movs	r2, #1
  402ace:	4b0e      	ldr	r3, [pc, #56]	; (402b08 <xTaskResumeAll+0x104>)
  402ad0:	601a      	str	r2, [r3, #0]
  402ad2:	e7ef      	b.n	402ab4 <xTaskResumeAll+0xb0>
  402ad4:	2400      	movs	r4, #0
  402ad6:	e7b1      	b.n	402a3c <xTaskResumeAll+0x38>
  402ad8:	2400      	movs	r4, #0
  402ada:	e7af      	b.n	402a3c <xTaskResumeAll+0x38>
  402adc:	2040c358 	.word	0x2040c358
  402ae0:	004018d9 	.word	0x004018d9
  402ae4:	2040c350 	.word	0x2040c350
  402ae8:	00401925 	.word	0x00401925
  402aec:	2040c398 	.word	0x2040c398
  402af0:	004017f5 	.word	0x004017f5
  402af4:	2040c364 	.word	0x2040c364
  402af8:	2040c2ec 	.word	0x2040c2ec
  402afc:	004017a9 	.word	0x004017a9
  402b00:	2040c2e0 	.word	0x2040c2e0
  402b04:	2040c354 	.word	0x2040c354
  402b08:	2040c3dc 	.word	0x2040c3dc
  402b0c:	e000ed04 	.word	0xe000ed04
  402b10:	004028c1 	.word	0x004028c1

00402b14 <vTaskDelay>:
  402b14:	b510      	push	{r4, lr}
  402b16:	2800      	cmp	r0, #0
  402b18:	d02a      	beq.n	402b70 <vTaskDelay+0x5c>
  402b1a:	4604      	mov	r4, r0
  402b1c:	4b1a      	ldr	r3, [pc, #104]	; (402b88 <vTaskDelay+0x74>)
  402b1e:	681b      	ldr	r3, [r3, #0]
  402b20:	b153      	cbz	r3, 402b38 <vTaskDelay+0x24>
  402b22:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b26:	b672      	cpsid	i
  402b28:	f383 8811 	msr	BASEPRI, r3
  402b2c:	f3bf 8f6f 	isb	sy
  402b30:	f3bf 8f4f 	dsb	sy
  402b34:	b662      	cpsie	i
  402b36:	e7fe      	b.n	402b36 <vTaskDelay+0x22>
  402b38:	4b14      	ldr	r3, [pc, #80]	; (402b8c <vTaskDelay+0x78>)
  402b3a:	4798      	blx	r3
  402b3c:	4b14      	ldr	r3, [pc, #80]	; (402b90 <vTaskDelay+0x7c>)
  402b3e:	681b      	ldr	r3, [r3, #0]
  402b40:	441c      	add	r4, r3
  402b42:	4b14      	ldr	r3, [pc, #80]	; (402b94 <vTaskDelay+0x80>)
  402b44:	6818      	ldr	r0, [r3, #0]
  402b46:	3004      	adds	r0, #4
  402b48:	4b13      	ldr	r3, [pc, #76]	; (402b98 <vTaskDelay+0x84>)
  402b4a:	4798      	blx	r3
  402b4c:	b950      	cbnz	r0, 402b64 <vTaskDelay+0x50>
  402b4e:	4b11      	ldr	r3, [pc, #68]	; (402b94 <vTaskDelay+0x80>)
  402b50:	681b      	ldr	r3, [r3, #0]
  402b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  402b54:	2301      	movs	r3, #1
  402b56:	fa03 f202 	lsl.w	r2, r3, r2
  402b5a:	4910      	ldr	r1, [pc, #64]	; (402b9c <vTaskDelay+0x88>)
  402b5c:	680b      	ldr	r3, [r1, #0]
  402b5e:	ea23 0302 	bic.w	r3, r3, r2
  402b62:	600b      	str	r3, [r1, #0]
  402b64:	4620      	mov	r0, r4
  402b66:	4b0e      	ldr	r3, [pc, #56]	; (402ba0 <vTaskDelay+0x8c>)
  402b68:	4798      	blx	r3
  402b6a:	4b0e      	ldr	r3, [pc, #56]	; (402ba4 <vTaskDelay+0x90>)
  402b6c:	4798      	blx	r3
  402b6e:	e000      	b.n	402b72 <vTaskDelay+0x5e>
  402b70:	2000      	movs	r0, #0
  402b72:	b938      	cbnz	r0, 402b84 <vTaskDelay+0x70>
  402b74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402b78:	4b0b      	ldr	r3, [pc, #44]	; (402ba8 <vTaskDelay+0x94>)
  402b7a:	601a      	str	r2, [r3, #0]
  402b7c:	f3bf 8f4f 	dsb	sy
  402b80:	f3bf 8f6f 	isb	sy
  402b84:	bd10      	pop	{r4, pc}
  402b86:	bf00      	nop
  402b88:	2040c358 	.word	0x2040c358
  402b8c:	004028a5 	.word	0x004028a5
  402b90:	2040c3d8 	.word	0x2040c3d8
  402b94:	2040c2e0 	.word	0x2040c2e0
  402b98:	004017f5 	.word	0x004017f5
  402b9c:	2040c364 	.word	0x2040c364
  402ba0:	00402665 	.word	0x00402665
  402ba4:	00402a05 	.word	0x00402a05
  402ba8:	e000ed04 	.word	0xe000ed04

00402bac <prvCheckTasksWaitingTermination>:
  402bac:	4b13      	ldr	r3, [pc, #76]	; (402bfc <prvCheckTasksWaitingTermination+0x50>)
  402bae:	681b      	ldr	r3, [r3, #0]
  402bb0:	b313      	cbz	r3, 402bf8 <prvCheckTasksWaitingTermination+0x4c>
  402bb2:	b510      	push	{r4, lr}
  402bb4:	4b12      	ldr	r3, [pc, #72]	; (402c00 <prvCheckTasksWaitingTermination+0x54>)
  402bb6:	4798      	blx	r3
  402bb8:	4b12      	ldr	r3, [pc, #72]	; (402c04 <prvCheckTasksWaitingTermination+0x58>)
  402bba:	681c      	ldr	r4, [r3, #0]
  402bbc:	4b12      	ldr	r3, [pc, #72]	; (402c08 <prvCheckTasksWaitingTermination+0x5c>)
  402bbe:	4798      	blx	r3
  402bc0:	b924      	cbnz	r4, 402bcc <prvCheckTasksWaitingTermination+0x20>
  402bc2:	4b0e      	ldr	r3, [pc, #56]	; (402bfc <prvCheckTasksWaitingTermination+0x50>)
  402bc4:	681b      	ldr	r3, [r3, #0]
  402bc6:	2b00      	cmp	r3, #0
  402bc8:	d1f4      	bne.n	402bb4 <prvCheckTasksWaitingTermination+0x8>
  402bca:	bd10      	pop	{r4, pc}
  402bcc:	4b0f      	ldr	r3, [pc, #60]	; (402c0c <prvCheckTasksWaitingTermination+0x60>)
  402bce:	4798      	blx	r3
  402bd0:	4b0c      	ldr	r3, [pc, #48]	; (402c04 <prvCheckTasksWaitingTermination+0x58>)
  402bd2:	68db      	ldr	r3, [r3, #12]
  402bd4:	68dc      	ldr	r4, [r3, #12]
  402bd6:	1d20      	adds	r0, r4, #4
  402bd8:	4b0d      	ldr	r3, [pc, #52]	; (402c10 <prvCheckTasksWaitingTermination+0x64>)
  402bda:	4798      	blx	r3
  402bdc:	4a0d      	ldr	r2, [pc, #52]	; (402c14 <prvCheckTasksWaitingTermination+0x68>)
  402bde:	6813      	ldr	r3, [r2, #0]
  402be0:	3b01      	subs	r3, #1
  402be2:	6013      	str	r3, [r2, #0]
  402be4:	4a05      	ldr	r2, [pc, #20]	; (402bfc <prvCheckTasksWaitingTermination+0x50>)
  402be6:	6813      	ldr	r3, [r2, #0]
  402be8:	3b01      	subs	r3, #1
  402bea:	6013      	str	r3, [r2, #0]
  402bec:	4b0a      	ldr	r3, [pc, #40]	; (402c18 <prvCheckTasksWaitingTermination+0x6c>)
  402bee:	4798      	blx	r3
  402bf0:	4620      	mov	r0, r4
  402bf2:	4b0a      	ldr	r3, [pc, #40]	; (402c1c <prvCheckTasksWaitingTermination+0x70>)
  402bf4:	4798      	blx	r3
  402bf6:	e7e4      	b.n	402bc2 <prvCheckTasksWaitingTermination+0x16>
  402bf8:	4770      	bx	lr
  402bfa:	bf00      	nop
  402bfc:	2040c360 	.word	0x2040c360
  402c00:	004028a5 	.word	0x004028a5
  402c04:	2040c3c4 	.word	0x2040c3c4
  402c08:	00402a05 	.word	0x00402a05
  402c0c:	004018d9 	.word	0x004018d9
  402c10:	004017f5 	.word	0x004017f5
  402c14:	2040c350 	.word	0x2040c350
  402c18:	00401925 	.word	0x00401925
  402c1c:	00402555 	.word	0x00402555

00402c20 <prvIdleTask>:
  402c20:	b508      	push	{r3, lr}
  402c22:	4b07      	ldr	r3, [pc, #28]	; (402c40 <prvIdleTask+0x20>)
  402c24:	4798      	blx	r3
  402c26:	4b07      	ldr	r3, [pc, #28]	; (402c44 <prvIdleTask+0x24>)
  402c28:	681b      	ldr	r3, [r3, #0]
  402c2a:	2b01      	cmp	r3, #1
  402c2c:	d9f9      	bls.n	402c22 <prvIdleTask+0x2>
  402c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402c32:	4b05      	ldr	r3, [pc, #20]	; (402c48 <prvIdleTask+0x28>)
  402c34:	601a      	str	r2, [r3, #0]
  402c36:	f3bf 8f4f 	dsb	sy
  402c3a:	f3bf 8f6f 	isb	sy
  402c3e:	e7f0      	b.n	402c22 <prvIdleTask+0x2>
  402c40:	00402bad 	.word	0x00402bad
  402c44:	2040c2ec 	.word	0x2040c2ec
  402c48:	e000ed04 	.word	0xe000ed04

00402c4c <vTaskSwitchContext>:
  402c4c:	4b2e      	ldr	r3, [pc, #184]	; (402d08 <vTaskSwitchContext+0xbc>)
  402c4e:	681b      	ldr	r3, [r3, #0]
  402c50:	2b00      	cmp	r3, #0
  402c52:	d12c      	bne.n	402cae <vTaskSwitchContext+0x62>
  402c54:	b510      	push	{r4, lr}
  402c56:	2200      	movs	r2, #0
  402c58:	4b2c      	ldr	r3, [pc, #176]	; (402d0c <vTaskSwitchContext+0xc0>)
  402c5a:	601a      	str	r2, [r3, #0]
  402c5c:	4b2c      	ldr	r3, [pc, #176]	; (402d10 <vTaskSwitchContext+0xc4>)
  402c5e:	681b      	ldr	r3, [r3, #0]
  402c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402c62:	681a      	ldr	r2, [r3, #0]
  402c64:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402c68:	d103      	bne.n	402c72 <vTaskSwitchContext+0x26>
  402c6a:	685a      	ldr	r2, [r3, #4]
  402c6c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402c70:	d021      	beq.n	402cb6 <vTaskSwitchContext+0x6a>
  402c72:	4b27      	ldr	r3, [pc, #156]	; (402d10 <vTaskSwitchContext+0xc4>)
  402c74:	6818      	ldr	r0, [r3, #0]
  402c76:	6819      	ldr	r1, [r3, #0]
  402c78:	3134      	adds	r1, #52	; 0x34
  402c7a:	4b26      	ldr	r3, [pc, #152]	; (402d14 <vTaskSwitchContext+0xc8>)
  402c7c:	4798      	blx	r3
  402c7e:	4b26      	ldr	r3, [pc, #152]	; (402d18 <vTaskSwitchContext+0xcc>)
  402c80:	681b      	ldr	r3, [r3, #0]
  402c82:	fab3 f383 	clz	r3, r3
  402c86:	b2db      	uxtb	r3, r3
  402c88:	f1c3 031f 	rsb	r3, r3, #31
  402c8c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402c90:	008a      	lsls	r2, r1, #2
  402c92:	4922      	ldr	r1, [pc, #136]	; (402d1c <vTaskSwitchContext+0xd0>)
  402c94:	588a      	ldr	r2, [r1, r2]
  402c96:	b9ba      	cbnz	r2, 402cc8 <vTaskSwitchContext+0x7c>
  402c98:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c9c:	b672      	cpsid	i
  402c9e:	f383 8811 	msr	BASEPRI, r3
  402ca2:	f3bf 8f6f 	isb	sy
  402ca6:	f3bf 8f4f 	dsb	sy
  402caa:	b662      	cpsie	i
  402cac:	e7fe      	b.n	402cac <vTaskSwitchContext+0x60>
  402cae:	2201      	movs	r2, #1
  402cb0:	4b16      	ldr	r3, [pc, #88]	; (402d0c <vTaskSwitchContext+0xc0>)
  402cb2:	601a      	str	r2, [r3, #0]
  402cb4:	4770      	bx	lr
  402cb6:	689a      	ldr	r2, [r3, #8]
  402cb8:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402cbc:	d1d9      	bne.n	402c72 <vTaskSwitchContext+0x26>
  402cbe:	68db      	ldr	r3, [r3, #12]
  402cc0:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  402cc4:	d1d5      	bne.n	402c72 <vTaskSwitchContext+0x26>
  402cc6:	e7da      	b.n	402c7e <vTaskSwitchContext+0x32>
  402cc8:	4814      	ldr	r0, [pc, #80]	; (402d1c <vTaskSwitchContext+0xd0>)
  402cca:	009a      	lsls	r2, r3, #2
  402ccc:	18d4      	adds	r4, r2, r3
  402cce:	00a1      	lsls	r1, r4, #2
  402cd0:	4401      	add	r1, r0
  402cd2:	684c      	ldr	r4, [r1, #4]
  402cd4:	6864      	ldr	r4, [r4, #4]
  402cd6:	604c      	str	r4, [r1, #4]
  402cd8:	441a      	add	r2, r3
  402cda:	0091      	lsls	r1, r2, #2
  402cdc:	3108      	adds	r1, #8
  402cde:	4408      	add	r0, r1
  402ce0:	4284      	cmp	r4, r0
  402ce2:	d009      	beq.n	402cf8 <vTaskSwitchContext+0xac>
  402ce4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402ce8:	009a      	lsls	r2, r3, #2
  402cea:	4b0c      	ldr	r3, [pc, #48]	; (402d1c <vTaskSwitchContext+0xd0>)
  402cec:	4413      	add	r3, r2
  402cee:	685b      	ldr	r3, [r3, #4]
  402cf0:	68da      	ldr	r2, [r3, #12]
  402cf2:	4b07      	ldr	r3, [pc, #28]	; (402d10 <vTaskSwitchContext+0xc4>)
  402cf4:	601a      	str	r2, [r3, #0]
  402cf6:	bd10      	pop	{r4, pc}
  402cf8:	6860      	ldr	r0, [r4, #4]
  402cfa:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  402cfe:	0091      	lsls	r1, r2, #2
  402d00:	4a06      	ldr	r2, [pc, #24]	; (402d1c <vTaskSwitchContext+0xd0>)
  402d02:	440a      	add	r2, r1
  402d04:	6050      	str	r0, [r2, #4]
  402d06:	e7ed      	b.n	402ce4 <vTaskSwitchContext+0x98>
  402d08:	2040c358 	.word	0x2040c358
  402d0c:	2040c3dc 	.word	0x2040c3dc
  402d10:	2040c2e0 	.word	0x2040c2e0
  402d14:	00425f25 	.word	0x00425f25
  402d18:	2040c364 	.word	0x2040c364
  402d1c:	2040c2ec 	.word	0x2040c2ec

00402d20 <vTaskPlaceOnEventList>:
  402d20:	b538      	push	{r3, r4, r5, lr}
  402d22:	b1e8      	cbz	r0, 402d60 <vTaskPlaceOnEventList+0x40>
  402d24:	460c      	mov	r4, r1
  402d26:	4d17      	ldr	r5, [pc, #92]	; (402d84 <vTaskPlaceOnEventList+0x64>)
  402d28:	6829      	ldr	r1, [r5, #0]
  402d2a:	3118      	adds	r1, #24
  402d2c:	4b16      	ldr	r3, [pc, #88]	; (402d88 <vTaskPlaceOnEventList+0x68>)
  402d2e:	4798      	blx	r3
  402d30:	6828      	ldr	r0, [r5, #0]
  402d32:	3004      	adds	r0, #4
  402d34:	4b15      	ldr	r3, [pc, #84]	; (402d8c <vTaskPlaceOnEventList+0x6c>)
  402d36:	4798      	blx	r3
  402d38:	b948      	cbnz	r0, 402d4e <vTaskPlaceOnEventList+0x2e>
  402d3a:	682b      	ldr	r3, [r5, #0]
  402d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  402d3e:	2301      	movs	r3, #1
  402d40:	fa03 f202 	lsl.w	r2, r3, r2
  402d44:	4912      	ldr	r1, [pc, #72]	; (402d90 <vTaskPlaceOnEventList+0x70>)
  402d46:	680b      	ldr	r3, [r1, #0]
  402d48:	ea23 0302 	bic.w	r3, r3, r2
  402d4c:	600b      	str	r3, [r1, #0]
  402d4e:	f1b4 3fff 	cmp.w	r4, #4294967295
  402d52:	d010      	beq.n	402d76 <vTaskPlaceOnEventList+0x56>
  402d54:	4b0f      	ldr	r3, [pc, #60]	; (402d94 <vTaskPlaceOnEventList+0x74>)
  402d56:	6818      	ldr	r0, [r3, #0]
  402d58:	4420      	add	r0, r4
  402d5a:	4b0f      	ldr	r3, [pc, #60]	; (402d98 <vTaskPlaceOnEventList+0x78>)
  402d5c:	4798      	blx	r3
  402d5e:	bd38      	pop	{r3, r4, r5, pc}
  402d60:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d64:	b672      	cpsid	i
  402d66:	f383 8811 	msr	BASEPRI, r3
  402d6a:	f3bf 8f6f 	isb	sy
  402d6e:	f3bf 8f4f 	dsb	sy
  402d72:	b662      	cpsie	i
  402d74:	e7fe      	b.n	402d74 <vTaskPlaceOnEventList+0x54>
  402d76:	4b03      	ldr	r3, [pc, #12]	; (402d84 <vTaskPlaceOnEventList+0x64>)
  402d78:	6819      	ldr	r1, [r3, #0]
  402d7a:	3104      	adds	r1, #4
  402d7c:	4807      	ldr	r0, [pc, #28]	; (402d9c <vTaskPlaceOnEventList+0x7c>)
  402d7e:	4b08      	ldr	r3, [pc, #32]	; (402da0 <vTaskPlaceOnEventList+0x80>)
  402d80:	4798      	blx	r3
  402d82:	bd38      	pop	{r3, r4, r5, pc}
  402d84:	2040c2e0 	.word	0x2040c2e0
  402d88:	004017c1 	.word	0x004017c1
  402d8c:	004017f5 	.word	0x004017f5
  402d90:	2040c364 	.word	0x2040c364
  402d94:	2040c3d8 	.word	0x2040c3d8
  402d98:	00402665 	.word	0x00402665
  402d9c:	2040c3b0 	.word	0x2040c3b0
  402da0:	004017a9 	.word	0x004017a9

00402da4 <vTaskPlaceOnEventListRestricted>:
  402da4:	b1f0      	cbz	r0, 402de4 <vTaskPlaceOnEventListRestricted+0x40>
  402da6:	b570      	push	{r4, r5, r6, lr}
  402da8:	4615      	mov	r5, r2
  402daa:	460c      	mov	r4, r1
  402dac:	4e16      	ldr	r6, [pc, #88]	; (402e08 <vTaskPlaceOnEventListRestricted+0x64>)
  402dae:	6831      	ldr	r1, [r6, #0]
  402db0:	3118      	adds	r1, #24
  402db2:	4b16      	ldr	r3, [pc, #88]	; (402e0c <vTaskPlaceOnEventListRestricted+0x68>)
  402db4:	4798      	blx	r3
  402db6:	6830      	ldr	r0, [r6, #0]
  402db8:	3004      	adds	r0, #4
  402dba:	4b15      	ldr	r3, [pc, #84]	; (402e10 <vTaskPlaceOnEventListRestricted+0x6c>)
  402dbc:	4798      	blx	r3
  402dbe:	b948      	cbnz	r0, 402dd4 <vTaskPlaceOnEventListRestricted+0x30>
  402dc0:	6833      	ldr	r3, [r6, #0]
  402dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  402dc4:	2301      	movs	r3, #1
  402dc6:	fa03 f202 	lsl.w	r2, r3, r2
  402dca:	4912      	ldr	r1, [pc, #72]	; (402e14 <vTaskPlaceOnEventListRestricted+0x70>)
  402dcc:	680b      	ldr	r3, [r1, #0]
  402dce:	ea23 0302 	bic.w	r3, r3, r2
  402dd2:	600b      	str	r3, [r1, #0]
  402dd4:	2d01      	cmp	r5, #1
  402dd6:	d010      	beq.n	402dfa <vTaskPlaceOnEventListRestricted+0x56>
  402dd8:	4b0f      	ldr	r3, [pc, #60]	; (402e18 <vTaskPlaceOnEventListRestricted+0x74>)
  402dda:	6818      	ldr	r0, [r3, #0]
  402ddc:	4420      	add	r0, r4
  402dde:	4b0f      	ldr	r3, [pc, #60]	; (402e1c <vTaskPlaceOnEventListRestricted+0x78>)
  402de0:	4798      	blx	r3
  402de2:	bd70      	pop	{r4, r5, r6, pc}
  402de4:	f04f 0380 	mov.w	r3, #128	; 0x80
  402de8:	b672      	cpsid	i
  402dea:	f383 8811 	msr	BASEPRI, r3
  402dee:	f3bf 8f6f 	isb	sy
  402df2:	f3bf 8f4f 	dsb	sy
  402df6:	b662      	cpsie	i
  402df8:	e7fe      	b.n	402df8 <vTaskPlaceOnEventListRestricted+0x54>
  402dfa:	4b03      	ldr	r3, [pc, #12]	; (402e08 <vTaskPlaceOnEventListRestricted+0x64>)
  402dfc:	6819      	ldr	r1, [r3, #0]
  402dfe:	3104      	adds	r1, #4
  402e00:	4807      	ldr	r0, [pc, #28]	; (402e20 <vTaskPlaceOnEventListRestricted+0x7c>)
  402e02:	4b02      	ldr	r3, [pc, #8]	; (402e0c <vTaskPlaceOnEventListRestricted+0x68>)
  402e04:	4798      	blx	r3
  402e06:	bd70      	pop	{r4, r5, r6, pc}
  402e08:	2040c2e0 	.word	0x2040c2e0
  402e0c:	004017a9 	.word	0x004017a9
  402e10:	004017f5 	.word	0x004017f5
  402e14:	2040c364 	.word	0x2040c364
  402e18:	2040c3d8 	.word	0x2040c3d8
  402e1c:	00402665 	.word	0x00402665
  402e20:	2040c3b0 	.word	0x2040c3b0

00402e24 <xTaskRemoveFromEventList>:
  402e24:	b538      	push	{r3, r4, r5, lr}
  402e26:	68c3      	ldr	r3, [r0, #12]
  402e28:	68dc      	ldr	r4, [r3, #12]
  402e2a:	b324      	cbz	r4, 402e76 <xTaskRemoveFromEventList+0x52>
  402e2c:	f104 0518 	add.w	r5, r4, #24
  402e30:	4628      	mov	r0, r5
  402e32:	4b1a      	ldr	r3, [pc, #104]	; (402e9c <xTaskRemoveFromEventList+0x78>)
  402e34:	4798      	blx	r3
  402e36:	4b1a      	ldr	r3, [pc, #104]	; (402ea0 <xTaskRemoveFromEventList+0x7c>)
  402e38:	681b      	ldr	r3, [r3, #0]
  402e3a:	bb3b      	cbnz	r3, 402e8c <xTaskRemoveFromEventList+0x68>
  402e3c:	1d25      	adds	r5, r4, #4
  402e3e:	4628      	mov	r0, r5
  402e40:	4b16      	ldr	r3, [pc, #88]	; (402e9c <xTaskRemoveFromEventList+0x78>)
  402e42:	4798      	blx	r3
  402e44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402e46:	2201      	movs	r2, #1
  402e48:	409a      	lsls	r2, r3
  402e4a:	4916      	ldr	r1, [pc, #88]	; (402ea4 <xTaskRemoveFromEventList+0x80>)
  402e4c:	6808      	ldr	r0, [r1, #0]
  402e4e:	4302      	orrs	r2, r0
  402e50:	600a      	str	r2, [r1, #0]
  402e52:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402e56:	009a      	lsls	r2, r3, #2
  402e58:	4629      	mov	r1, r5
  402e5a:	4813      	ldr	r0, [pc, #76]	; (402ea8 <xTaskRemoveFromEventList+0x84>)
  402e5c:	4410      	add	r0, r2
  402e5e:	4b13      	ldr	r3, [pc, #76]	; (402eac <xTaskRemoveFromEventList+0x88>)
  402e60:	4798      	blx	r3
  402e62:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402e64:	4b12      	ldr	r3, [pc, #72]	; (402eb0 <xTaskRemoveFromEventList+0x8c>)
  402e66:	681b      	ldr	r3, [r3, #0]
  402e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402e6a:	429a      	cmp	r2, r3
  402e6c:	d913      	bls.n	402e96 <xTaskRemoveFromEventList+0x72>
  402e6e:	2001      	movs	r0, #1
  402e70:	4b10      	ldr	r3, [pc, #64]	; (402eb4 <xTaskRemoveFromEventList+0x90>)
  402e72:	6018      	str	r0, [r3, #0]
  402e74:	bd38      	pop	{r3, r4, r5, pc}
  402e76:	f04f 0380 	mov.w	r3, #128	; 0x80
  402e7a:	b672      	cpsid	i
  402e7c:	f383 8811 	msr	BASEPRI, r3
  402e80:	f3bf 8f6f 	isb	sy
  402e84:	f3bf 8f4f 	dsb	sy
  402e88:	b662      	cpsie	i
  402e8a:	e7fe      	b.n	402e8a <xTaskRemoveFromEventList+0x66>
  402e8c:	4629      	mov	r1, r5
  402e8e:	480a      	ldr	r0, [pc, #40]	; (402eb8 <xTaskRemoveFromEventList+0x94>)
  402e90:	4b06      	ldr	r3, [pc, #24]	; (402eac <xTaskRemoveFromEventList+0x88>)
  402e92:	4798      	blx	r3
  402e94:	e7e5      	b.n	402e62 <xTaskRemoveFromEventList+0x3e>
  402e96:	2000      	movs	r0, #0
  402e98:	bd38      	pop	{r3, r4, r5, pc}
  402e9a:	bf00      	nop
  402e9c:	004017f5 	.word	0x004017f5
  402ea0:	2040c358 	.word	0x2040c358
  402ea4:	2040c364 	.word	0x2040c364
  402ea8:	2040c2ec 	.word	0x2040c2ec
  402eac:	004017a9 	.word	0x004017a9
  402eb0:	2040c2e0 	.word	0x2040c2e0
  402eb4:	2040c3dc 	.word	0x2040c3dc
  402eb8:	2040c398 	.word	0x2040c398

00402ebc <vTaskSetTimeOutState>:
  402ebc:	b130      	cbz	r0, 402ecc <vTaskSetTimeOutState+0x10>
  402ebe:	4a09      	ldr	r2, [pc, #36]	; (402ee4 <vTaskSetTimeOutState+0x28>)
  402ec0:	6812      	ldr	r2, [r2, #0]
  402ec2:	6002      	str	r2, [r0, #0]
  402ec4:	4a08      	ldr	r2, [pc, #32]	; (402ee8 <vTaskSetTimeOutState+0x2c>)
  402ec6:	6812      	ldr	r2, [r2, #0]
  402ec8:	6042      	str	r2, [r0, #4]
  402eca:	4770      	bx	lr
  402ecc:	f04f 0380 	mov.w	r3, #128	; 0x80
  402ed0:	b672      	cpsid	i
  402ed2:	f383 8811 	msr	BASEPRI, r3
  402ed6:	f3bf 8f6f 	isb	sy
  402eda:	f3bf 8f4f 	dsb	sy
  402ede:	b662      	cpsie	i
  402ee0:	e7fe      	b.n	402ee0 <vTaskSetTimeOutState+0x24>
  402ee2:	bf00      	nop
  402ee4:	2040c394 	.word	0x2040c394
  402ee8:	2040c3d8 	.word	0x2040c3d8

00402eec <xTaskCheckForTimeOut>:
  402eec:	b538      	push	{r3, r4, r5, lr}
  402eee:	b1c0      	cbz	r0, 402f22 <xTaskCheckForTimeOut+0x36>
  402ef0:	4604      	mov	r4, r0
  402ef2:	b309      	cbz	r1, 402f38 <xTaskCheckForTimeOut+0x4c>
  402ef4:	460d      	mov	r5, r1
  402ef6:	4b1d      	ldr	r3, [pc, #116]	; (402f6c <xTaskCheckForTimeOut+0x80>)
  402ef8:	4798      	blx	r3
  402efa:	4b1d      	ldr	r3, [pc, #116]	; (402f70 <xTaskCheckForTimeOut+0x84>)
  402efc:	6819      	ldr	r1, [r3, #0]
  402efe:	682b      	ldr	r3, [r5, #0]
  402f00:	f1b3 3fff 	cmp.w	r3, #4294967295
  402f04:	d02e      	beq.n	402f64 <xTaskCheckForTimeOut+0x78>
  402f06:	6820      	ldr	r0, [r4, #0]
  402f08:	4a1a      	ldr	r2, [pc, #104]	; (402f74 <xTaskCheckForTimeOut+0x88>)
  402f0a:	6812      	ldr	r2, [r2, #0]
  402f0c:	4290      	cmp	r0, r2
  402f0e:	d002      	beq.n	402f16 <xTaskCheckForTimeOut+0x2a>
  402f10:	6862      	ldr	r2, [r4, #4]
  402f12:	4291      	cmp	r1, r2
  402f14:	d228      	bcs.n	402f68 <xTaskCheckForTimeOut+0x7c>
  402f16:	6862      	ldr	r2, [r4, #4]
  402f18:	1a88      	subs	r0, r1, r2
  402f1a:	4283      	cmp	r3, r0
  402f1c:	d817      	bhi.n	402f4e <xTaskCheckForTimeOut+0x62>
  402f1e:	2401      	movs	r4, #1
  402f20:	e01c      	b.n	402f5c <xTaskCheckForTimeOut+0x70>
  402f22:	f04f 0380 	mov.w	r3, #128	; 0x80
  402f26:	b672      	cpsid	i
  402f28:	f383 8811 	msr	BASEPRI, r3
  402f2c:	f3bf 8f6f 	isb	sy
  402f30:	f3bf 8f4f 	dsb	sy
  402f34:	b662      	cpsie	i
  402f36:	e7fe      	b.n	402f36 <xTaskCheckForTimeOut+0x4a>
  402f38:	f04f 0380 	mov.w	r3, #128	; 0x80
  402f3c:	b672      	cpsid	i
  402f3e:	f383 8811 	msr	BASEPRI, r3
  402f42:	f3bf 8f6f 	isb	sy
  402f46:	f3bf 8f4f 	dsb	sy
  402f4a:	b662      	cpsie	i
  402f4c:	e7fe      	b.n	402f4c <xTaskCheckForTimeOut+0x60>
  402f4e:	1a52      	subs	r2, r2, r1
  402f50:	4413      	add	r3, r2
  402f52:	602b      	str	r3, [r5, #0]
  402f54:	4620      	mov	r0, r4
  402f56:	4b08      	ldr	r3, [pc, #32]	; (402f78 <xTaskCheckForTimeOut+0x8c>)
  402f58:	4798      	blx	r3
  402f5a:	2400      	movs	r4, #0
  402f5c:	4b07      	ldr	r3, [pc, #28]	; (402f7c <xTaskCheckForTimeOut+0x90>)
  402f5e:	4798      	blx	r3
  402f60:	4620      	mov	r0, r4
  402f62:	bd38      	pop	{r3, r4, r5, pc}
  402f64:	2400      	movs	r4, #0
  402f66:	e7f9      	b.n	402f5c <xTaskCheckForTimeOut+0x70>
  402f68:	2401      	movs	r4, #1
  402f6a:	e7f7      	b.n	402f5c <xTaskCheckForTimeOut+0x70>
  402f6c:	004018d9 	.word	0x004018d9
  402f70:	2040c3d8 	.word	0x2040c3d8
  402f74:	2040c394 	.word	0x2040c394
  402f78:	00402ebd 	.word	0x00402ebd
  402f7c:	00401925 	.word	0x00401925

00402f80 <vTaskMissedYield>:
  402f80:	2201      	movs	r2, #1
  402f82:	4b01      	ldr	r3, [pc, #4]	; (402f88 <vTaskMissedYield+0x8>)
  402f84:	601a      	str	r2, [r3, #0]
  402f86:	4770      	bx	lr
  402f88:	2040c3dc 	.word	0x2040c3dc

00402f8c <xTaskGetSchedulerState>:
  402f8c:	4b05      	ldr	r3, [pc, #20]	; (402fa4 <xTaskGetSchedulerState+0x18>)
  402f8e:	681b      	ldr	r3, [r3, #0]
  402f90:	b123      	cbz	r3, 402f9c <xTaskGetSchedulerState+0x10>
  402f92:	4b05      	ldr	r3, [pc, #20]	; (402fa8 <xTaskGetSchedulerState+0x1c>)
  402f94:	681b      	ldr	r3, [r3, #0]
  402f96:	b91b      	cbnz	r3, 402fa0 <xTaskGetSchedulerState+0x14>
  402f98:	2002      	movs	r0, #2
  402f9a:	4770      	bx	lr
  402f9c:	2001      	movs	r0, #1
  402f9e:	4770      	bx	lr
  402fa0:	2000      	movs	r0, #0
  402fa2:	4770      	bx	lr
  402fa4:	2040c3ac 	.word	0x2040c3ac
  402fa8:	2040c358 	.word	0x2040c358

00402fac <vTaskPriorityInherit>:
  402fac:	2800      	cmp	r0, #0
  402fae:	d047      	beq.n	403040 <vTaskPriorityInherit+0x94>
  402fb0:	b538      	push	{r3, r4, r5, lr}
  402fb2:	4604      	mov	r4, r0
  402fb4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  402fb6:	4923      	ldr	r1, [pc, #140]	; (403044 <vTaskPriorityInherit+0x98>)
  402fb8:	6809      	ldr	r1, [r1, #0]
  402fba:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402fbc:	428b      	cmp	r3, r1
  402fbe:	d216      	bcs.n	402fee <vTaskPriorityInherit+0x42>
  402fc0:	6981      	ldr	r1, [r0, #24]
  402fc2:	2900      	cmp	r1, #0
  402fc4:	db05      	blt.n	402fd2 <vTaskPriorityInherit+0x26>
  402fc6:	491f      	ldr	r1, [pc, #124]	; (403044 <vTaskPriorityInherit+0x98>)
  402fc8:	6809      	ldr	r1, [r1, #0]
  402fca:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402fcc:	f1c1 0105 	rsb	r1, r1, #5
  402fd0:	6181      	str	r1, [r0, #24]
  402fd2:	6960      	ldr	r0, [r4, #20]
  402fd4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402fd8:	0099      	lsls	r1, r3, #2
  402fda:	4b1b      	ldr	r3, [pc, #108]	; (403048 <vTaskPriorityInherit+0x9c>)
  402fdc:	440b      	add	r3, r1
  402fde:	4298      	cmp	r0, r3
  402fe0:	d006      	beq.n	402ff0 <vTaskPriorityInherit+0x44>
  402fe2:	2300      	movs	r3, #0
  402fe4:	b933      	cbnz	r3, 402ff4 <vTaskPriorityInherit+0x48>
  402fe6:	4b17      	ldr	r3, [pc, #92]	; (403044 <vTaskPriorityInherit+0x98>)
  402fe8:	681b      	ldr	r3, [r3, #0]
  402fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402fec:	62e3      	str	r3, [r4, #44]	; 0x2c
  402fee:	bd38      	pop	{r3, r4, r5, pc}
  402ff0:	2301      	movs	r3, #1
  402ff2:	e7f7      	b.n	402fe4 <vTaskPriorityInherit+0x38>
  402ff4:	1d25      	adds	r5, r4, #4
  402ff6:	4628      	mov	r0, r5
  402ff8:	4b14      	ldr	r3, [pc, #80]	; (40304c <vTaskPriorityInherit+0xa0>)
  402ffa:	4798      	blx	r3
  402ffc:	b968      	cbnz	r0, 40301a <vTaskPriorityInherit+0x6e>
  402ffe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  403000:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  403004:	008a      	lsls	r2, r1, #2
  403006:	4910      	ldr	r1, [pc, #64]	; (403048 <vTaskPriorityInherit+0x9c>)
  403008:	588a      	ldr	r2, [r1, r2]
  40300a:	b932      	cbnz	r2, 40301a <vTaskPriorityInherit+0x6e>
  40300c:	2201      	movs	r2, #1
  40300e:	409a      	lsls	r2, r3
  403010:	490f      	ldr	r1, [pc, #60]	; (403050 <vTaskPriorityInherit+0xa4>)
  403012:	680b      	ldr	r3, [r1, #0]
  403014:	ea23 0302 	bic.w	r3, r3, r2
  403018:	600b      	str	r3, [r1, #0]
  40301a:	4b0a      	ldr	r3, [pc, #40]	; (403044 <vTaskPriorityInherit+0x98>)
  40301c:	681b      	ldr	r3, [r3, #0]
  40301e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  403020:	62e3      	str	r3, [r4, #44]	; 0x2c
  403022:	2201      	movs	r2, #1
  403024:	409a      	lsls	r2, r3
  403026:	490a      	ldr	r1, [pc, #40]	; (403050 <vTaskPriorityInherit+0xa4>)
  403028:	6808      	ldr	r0, [r1, #0]
  40302a:	4302      	orrs	r2, r0
  40302c:	600a      	str	r2, [r1, #0]
  40302e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  403032:	009a      	lsls	r2, r3, #2
  403034:	4629      	mov	r1, r5
  403036:	4804      	ldr	r0, [pc, #16]	; (403048 <vTaskPriorityInherit+0x9c>)
  403038:	4410      	add	r0, r2
  40303a:	4b06      	ldr	r3, [pc, #24]	; (403054 <vTaskPriorityInherit+0xa8>)
  40303c:	4798      	blx	r3
  40303e:	bd38      	pop	{r3, r4, r5, pc}
  403040:	4770      	bx	lr
  403042:	bf00      	nop
  403044:	2040c2e0 	.word	0x2040c2e0
  403048:	2040c2ec 	.word	0x2040c2ec
  40304c:	004017f5 	.word	0x004017f5
  403050:	2040c364 	.word	0x2040c364
  403054:	004017a9 	.word	0x004017a9

00403058 <xTaskPriorityDisinherit>:
  403058:	2800      	cmp	r0, #0
  40305a:	d04f      	beq.n	4030fc <xTaskPriorityDisinherit+0xa4>
  40305c:	b538      	push	{r3, r4, r5, lr}
  40305e:	4604      	mov	r4, r0
  403060:	4a29      	ldr	r2, [pc, #164]	; (403108 <xTaskPriorityDisinherit+0xb0>)
  403062:	6812      	ldr	r2, [r2, #0]
  403064:	4290      	cmp	r0, r2
  403066:	d00a      	beq.n	40307e <xTaskPriorityDisinherit+0x26>
  403068:	f04f 0380 	mov.w	r3, #128	; 0x80
  40306c:	b672      	cpsid	i
  40306e:	f383 8811 	msr	BASEPRI, r3
  403072:	f3bf 8f6f 	isb	sy
  403076:	f3bf 8f4f 	dsb	sy
  40307a:	b662      	cpsie	i
  40307c:	e7fe      	b.n	40307c <xTaskPriorityDisinherit+0x24>
  40307e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  403080:	b952      	cbnz	r2, 403098 <xTaskPriorityDisinherit+0x40>
  403082:	f04f 0380 	mov.w	r3, #128	; 0x80
  403086:	b672      	cpsid	i
  403088:	f383 8811 	msr	BASEPRI, r3
  40308c:	f3bf 8f6f 	isb	sy
  403090:	f3bf 8f4f 	dsb	sy
  403094:	b662      	cpsie	i
  403096:	e7fe      	b.n	403096 <xTaskPriorityDisinherit+0x3e>
  403098:	3a01      	subs	r2, #1
  40309a:	64c2      	str	r2, [r0, #76]	; 0x4c
  40309c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  40309e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  4030a0:	4288      	cmp	r0, r1
  4030a2:	d02d      	beq.n	403100 <xTaskPriorityDisinherit+0xa8>
  4030a4:	2a00      	cmp	r2, #0
  4030a6:	d12d      	bne.n	403104 <xTaskPriorityDisinherit+0xac>
  4030a8:	1d25      	adds	r5, r4, #4
  4030aa:	4628      	mov	r0, r5
  4030ac:	4b17      	ldr	r3, [pc, #92]	; (40310c <xTaskPriorityDisinherit+0xb4>)
  4030ae:	4798      	blx	r3
  4030b0:	b970      	cbnz	r0, 4030d0 <xTaskPriorityDisinherit+0x78>
  4030b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4030b4:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  4030b8:	008b      	lsls	r3, r1, #2
  4030ba:	4915      	ldr	r1, [pc, #84]	; (403110 <xTaskPriorityDisinherit+0xb8>)
  4030bc:	58cb      	ldr	r3, [r1, r3]
  4030be:	b93b      	cbnz	r3, 4030d0 <xTaskPriorityDisinherit+0x78>
  4030c0:	2301      	movs	r3, #1
  4030c2:	fa03 f202 	lsl.w	r2, r3, r2
  4030c6:	4913      	ldr	r1, [pc, #76]	; (403114 <xTaskPriorityDisinherit+0xbc>)
  4030c8:	680b      	ldr	r3, [r1, #0]
  4030ca:	ea23 0302 	bic.w	r3, r3, r2
  4030ce:	600b      	str	r3, [r1, #0]
  4030d0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4030d2:	62e3      	str	r3, [r4, #44]	; 0x2c
  4030d4:	f1c3 0205 	rsb	r2, r3, #5
  4030d8:	61a2      	str	r2, [r4, #24]
  4030da:	2401      	movs	r4, #1
  4030dc:	fa04 f203 	lsl.w	r2, r4, r3
  4030e0:	490c      	ldr	r1, [pc, #48]	; (403114 <xTaskPriorityDisinherit+0xbc>)
  4030e2:	6808      	ldr	r0, [r1, #0]
  4030e4:	4302      	orrs	r2, r0
  4030e6:	600a      	str	r2, [r1, #0]
  4030e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4030ec:	009a      	lsls	r2, r3, #2
  4030ee:	4629      	mov	r1, r5
  4030f0:	4807      	ldr	r0, [pc, #28]	; (403110 <xTaskPriorityDisinherit+0xb8>)
  4030f2:	4410      	add	r0, r2
  4030f4:	4b08      	ldr	r3, [pc, #32]	; (403118 <xTaskPriorityDisinherit+0xc0>)
  4030f6:	4798      	blx	r3
  4030f8:	4620      	mov	r0, r4
  4030fa:	bd38      	pop	{r3, r4, r5, pc}
  4030fc:	2000      	movs	r0, #0
  4030fe:	4770      	bx	lr
  403100:	2000      	movs	r0, #0
  403102:	bd38      	pop	{r3, r4, r5, pc}
  403104:	2000      	movs	r0, #0
  403106:	bd38      	pop	{r3, r4, r5, pc}
  403108:	2040c2e0 	.word	0x2040c2e0
  40310c:	004017f5 	.word	0x004017f5
  403110:	2040c2ec 	.word	0x2040c2ec
  403114:	2040c364 	.word	0x2040c364
  403118:	004017a9 	.word	0x004017a9

0040311c <pvTaskIncrementMutexHeldCount>:
  40311c:	4b05      	ldr	r3, [pc, #20]	; (403134 <pvTaskIncrementMutexHeldCount+0x18>)
  40311e:	681b      	ldr	r3, [r3, #0]
  403120:	b123      	cbz	r3, 40312c <pvTaskIncrementMutexHeldCount+0x10>
  403122:	4b04      	ldr	r3, [pc, #16]	; (403134 <pvTaskIncrementMutexHeldCount+0x18>)
  403124:	681a      	ldr	r2, [r3, #0]
  403126:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  403128:	3301      	adds	r3, #1
  40312a:	64d3      	str	r3, [r2, #76]	; 0x4c
  40312c:	4b01      	ldr	r3, [pc, #4]	; (403134 <pvTaskIncrementMutexHeldCount+0x18>)
  40312e:	6818      	ldr	r0, [r3, #0]
  403130:	4770      	bx	lr
  403132:	bf00      	nop
  403134:	2040c2e0 	.word	0x2040c2e0

00403138 <prvGetNextExpireTime>:
  403138:	4b06      	ldr	r3, [pc, #24]	; (403154 <prvGetNextExpireTime+0x1c>)
  40313a:	681a      	ldr	r2, [r3, #0]
  40313c:	6813      	ldr	r3, [r2, #0]
  40313e:	fab3 f383 	clz	r3, r3
  403142:	095b      	lsrs	r3, r3, #5
  403144:	6003      	str	r3, [r0, #0]
  403146:	b913      	cbnz	r3, 40314e <prvGetNextExpireTime+0x16>
  403148:	68d3      	ldr	r3, [r2, #12]
  40314a:	6818      	ldr	r0, [r3, #0]
  40314c:	4770      	bx	lr
  40314e:	2000      	movs	r0, #0
  403150:	4770      	bx	lr
  403152:	bf00      	nop
  403154:	2040c3e0 	.word	0x2040c3e0

00403158 <prvInsertTimerInActiveList>:
  403158:	b508      	push	{r3, lr}
  40315a:	6041      	str	r1, [r0, #4]
  40315c:	6100      	str	r0, [r0, #16]
  40315e:	4291      	cmp	r1, r2
  403160:	d80c      	bhi.n	40317c <prvInsertTimerInActiveList+0x24>
  403162:	1ad2      	subs	r2, r2, r3
  403164:	6983      	ldr	r3, [r0, #24]
  403166:	429a      	cmp	r2, r3
  403168:	d301      	bcc.n	40316e <prvInsertTimerInActiveList+0x16>
  40316a:	2001      	movs	r0, #1
  40316c:	bd08      	pop	{r3, pc}
  40316e:	1d01      	adds	r1, r0, #4
  403170:	4b0b      	ldr	r3, [pc, #44]	; (4031a0 <prvInsertTimerInActiveList+0x48>)
  403172:	6818      	ldr	r0, [r3, #0]
  403174:	4b0b      	ldr	r3, [pc, #44]	; (4031a4 <prvInsertTimerInActiveList+0x4c>)
  403176:	4798      	blx	r3
  403178:	2000      	movs	r0, #0
  40317a:	bd08      	pop	{r3, pc}
  40317c:	429a      	cmp	r2, r3
  40317e:	bf2c      	ite	cs
  403180:	2200      	movcs	r2, #0
  403182:	2201      	movcc	r2, #1
  403184:	4299      	cmp	r1, r3
  403186:	bf38      	it	cc
  403188:	2200      	movcc	r2, #0
  40318a:	b10a      	cbz	r2, 403190 <prvInsertTimerInActiveList+0x38>
  40318c:	2001      	movs	r0, #1
  40318e:	bd08      	pop	{r3, pc}
  403190:	1d01      	adds	r1, r0, #4
  403192:	4b05      	ldr	r3, [pc, #20]	; (4031a8 <prvInsertTimerInActiveList+0x50>)
  403194:	6818      	ldr	r0, [r3, #0]
  403196:	4b03      	ldr	r3, [pc, #12]	; (4031a4 <prvInsertTimerInActiveList+0x4c>)
  403198:	4798      	blx	r3
  40319a:	2000      	movs	r0, #0
  40319c:	bd08      	pop	{r3, pc}
  40319e:	bf00      	nop
  4031a0:	2040c3e4 	.word	0x2040c3e4
  4031a4:	004017c1 	.word	0x004017c1
  4031a8:	2040c3e0 	.word	0x2040c3e0

004031ac <prvCheckForValidListAndQueue>:
  4031ac:	b570      	push	{r4, r5, r6, lr}
  4031ae:	4b15      	ldr	r3, [pc, #84]	; (403204 <prvCheckForValidListAndQueue+0x58>)
  4031b0:	4798      	blx	r3
  4031b2:	4b15      	ldr	r3, [pc, #84]	; (403208 <prvCheckForValidListAndQueue+0x5c>)
  4031b4:	681b      	ldr	r3, [r3, #0]
  4031b6:	b113      	cbz	r3, 4031be <prvCheckForValidListAndQueue+0x12>
  4031b8:	4b14      	ldr	r3, [pc, #80]	; (40320c <prvCheckForValidListAndQueue+0x60>)
  4031ba:	4798      	blx	r3
  4031bc:	bd70      	pop	{r4, r5, r6, pc}
  4031be:	4d14      	ldr	r5, [pc, #80]	; (403210 <prvCheckForValidListAndQueue+0x64>)
  4031c0:	4628      	mov	r0, r5
  4031c2:	4e14      	ldr	r6, [pc, #80]	; (403214 <prvCheckForValidListAndQueue+0x68>)
  4031c4:	47b0      	blx	r6
  4031c6:	4c14      	ldr	r4, [pc, #80]	; (403218 <prvCheckForValidListAndQueue+0x6c>)
  4031c8:	4620      	mov	r0, r4
  4031ca:	47b0      	blx	r6
  4031cc:	4b13      	ldr	r3, [pc, #76]	; (40321c <prvCheckForValidListAndQueue+0x70>)
  4031ce:	601d      	str	r5, [r3, #0]
  4031d0:	4b13      	ldr	r3, [pc, #76]	; (403220 <prvCheckForValidListAndQueue+0x74>)
  4031d2:	601c      	str	r4, [r3, #0]
  4031d4:	2200      	movs	r2, #0
  4031d6:	2110      	movs	r1, #16
  4031d8:	2005      	movs	r0, #5
  4031da:	4b12      	ldr	r3, [pc, #72]	; (403224 <prvCheckForValidListAndQueue+0x78>)
  4031dc:	4798      	blx	r3
  4031de:	4b0a      	ldr	r3, [pc, #40]	; (403208 <prvCheckForValidListAndQueue+0x5c>)
  4031e0:	6018      	str	r0, [r3, #0]
  4031e2:	b118      	cbz	r0, 4031ec <prvCheckForValidListAndQueue+0x40>
  4031e4:	4910      	ldr	r1, [pc, #64]	; (403228 <prvCheckForValidListAndQueue+0x7c>)
  4031e6:	4b11      	ldr	r3, [pc, #68]	; (40322c <prvCheckForValidListAndQueue+0x80>)
  4031e8:	4798      	blx	r3
  4031ea:	e7e5      	b.n	4031b8 <prvCheckForValidListAndQueue+0xc>
  4031ec:	f04f 0380 	mov.w	r3, #128	; 0x80
  4031f0:	b672      	cpsid	i
  4031f2:	f383 8811 	msr	BASEPRI, r3
  4031f6:	f3bf 8f6f 	isb	sy
  4031fa:	f3bf 8f4f 	dsb	sy
  4031fe:	b662      	cpsie	i
  403200:	e7fe      	b.n	403200 <prvCheckForValidListAndQueue+0x54>
  403202:	bf00      	nop
  403204:	004018d9 	.word	0x004018d9
  403208:	2040c414 	.word	0x2040c414
  40320c:	00401925 	.word	0x00401925
  403210:	2040c3e8 	.word	0x2040c3e8
  403214:	0040178d 	.word	0x0040178d
  403218:	2040c3fc 	.word	0x2040c3fc
  40321c:	2040c3e0 	.word	0x2040c3e0
  403220:	2040c3e4 	.word	0x2040c3e4
  403224:	00401e65 	.word	0x00401e65
  403228:	0042c704 	.word	0x0042c704
  40322c:	004024a1 	.word	0x004024a1

00403230 <xTimerCreateTimerTask>:
  403230:	b510      	push	{r4, lr}
  403232:	b084      	sub	sp, #16
  403234:	4b10      	ldr	r3, [pc, #64]	; (403278 <xTimerCreateTimerTask+0x48>)
  403236:	4798      	blx	r3
  403238:	4b10      	ldr	r3, [pc, #64]	; (40327c <xTimerCreateTimerTask+0x4c>)
  40323a:	681b      	ldr	r3, [r3, #0]
  40323c:	b1bb      	cbz	r3, 40326e <xTimerCreateTimerTask+0x3e>
  40323e:	2300      	movs	r3, #0
  403240:	9303      	str	r3, [sp, #12]
  403242:	9302      	str	r3, [sp, #8]
  403244:	9301      	str	r3, [sp, #4]
  403246:	2204      	movs	r2, #4
  403248:	9200      	str	r2, [sp, #0]
  40324a:	f44f 7282 	mov.w	r2, #260	; 0x104
  40324e:	490c      	ldr	r1, [pc, #48]	; (403280 <xTimerCreateTimerTask+0x50>)
  403250:	480c      	ldr	r0, [pc, #48]	; (403284 <xTimerCreateTimerTask+0x54>)
  403252:	4c0d      	ldr	r4, [pc, #52]	; (403288 <xTimerCreateTimerTask+0x58>)
  403254:	47a0      	blx	r4
  403256:	b960      	cbnz	r0, 403272 <xTimerCreateTimerTask+0x42>
  403258:	f04f 0380 	mov.w	r3, #128	; 0x80
  40325c:	b672      	cpsid	i
  40325e:	f383 8811 	msr	BASEPRI, r3
  403262:	f3bf 8f6f 	isb	sy
  403266:	f3bf 8f4f 	dsb	sy
  40326a:	b662      	cpsie	i
  40326c:	e7fe      	b.n	40326c <xTimerCreateTimerTask+0x3c>
  40326e:	2000      	movs	r0, #0
  403270:	e7f1      	b.n	403256 <xTimerCreateTimerTask+0x26>
  403272:	b004      	add	sp, #16
  403274:	bd10      	pop	{r4, pc}
  403276:	bf00      	nop
  403278:	004031ad 	.word	0x004031ad
  40327c:	2040c414 	.word	0x2040c414
  403280:	0042c70c 	.word	0x0042c70c
  403284:	00403635 	.word	0x00403635
  403288:	004026bd 	.word	0x004026bd

0040328c <xTimerCreate>:
  40328c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403290:	460d      	mov	r5, r1
  403292:	b1f9      	cbz	r1, 4032d4 <xTimerCreate+0x48>
  403294:	4680      	mov	r8, r0
  403296:	4617      	mov	r7, r2
  403298:	461e      	mov	r6, r3
  40329a:	202c      	movs	r0, #44	; 0x2c
  40329c:	4b10      	ldr	r3, [pc, #64]	; (4032e0 <xTimerCreate+0x54>)
  40329e:	4798      	blx	r3
  4032a0:	4604      	mov	r4, r0
  4032a2:	b158      	cbz	r0, 4032bc <xTimerCreate+0x30>
  4032a4:	4b0f      	ldr	r3, [pc, #60]	; (4032e4 <xTimerCreate+0x58>)
  4032a6:	4798      	blx	r3
  4032a8:	f8c4 8000 	str.w	r8, [r4]
  4032ac:	61a5      	str	r5, [r4, #24]
  4032ae:	61e7      	str	r7, [r4, #28]
  4032b0:	6226      	str	r6, [r4, #32]
  4032b2:	9b06      	ldr	r3, [sp, #24]
  4032b4:	6263      	str	r3, [r4, #36]	; 0x24
  4032b6:	1d20      	adds	r0, r4, #4
  4032b8:	4b0b      	ldr	r3, [pc, #44]	; (4032e8 <xTimerCreate+0x5c>)
  4032ba:	4798      	blx	r3
  4032bc:	b965      	cbnz	r5, 4032d8 <xTimerCreate+0x4c>
  4032be:	f04f 0380 	mov.w	r3, #128	; 0x80
  4032c2:	b672      	cpsid	i
  4032c4:	f383 8811 	msr	BASEPRI, r3
  4032c8:	f3bf 8f6f 	isb	sy
  4032cc:	f3bf 8f4f 	dsb	sy
  4032d0:	b662      	cpsie	i
  4032d2:	e7fe      	b.n	4032d2 <xTimerCreate+0x46>
  4032d4:	2400      	movs	r4, #0
  4032d6:	e7f1      	b.n	4032bc <xTimerCreate+0x30>
  4032d8:	4620      	mov	r0, r4
  4032da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4032de:	bf00      	nop
  4032e0:	00401b29 	.word	0x00401b29
  4032e4:	004031ad 	.word	0x004031ad
  4032e8:	004017a3 	.word	0x004017a3

004032ec <xTimerGenericCommand>:
  4032ec:	b1c8      	cbz	r0, 403322 <xTimerGenericCommand+0x36>
  4032ee:	b530      	push	{r4, r5, lr}
  4032f0:	b085      	sub	sp, #20
  4032f2:	4615      	mov	r5, r2
  4032f4:	4604      	mov	r4, r0
  4032f6:	4a18      	ldr	r2, [pc, #96]	; (403358 <xTimerGenericCommand+0x6c>)
  4032f8:	6810      	ldr	r0, [r2, #0]
  4032fa:	2800      	cmp	r0, #0
  4032fc:	d02a      	beq.n	403354 <xTimerGenericCommand+0x68>
  4032fe:	461a      	mov	r2, r3
  403300:	9100      	str	r1, [sp, #0]
  403302:	9501      	str	r5, [sp, #4]
  403304:	9402      	str	r4, [sp, #8]
  403306:	2905      	cmp	r1, #5
  403308:	dc1e      	bgt.n	403348 <xTimerGenericCommand+0x5c>
  40330a:	4b14      	ldr	r3, [pc, #80]	; (40335c <xTimerGenericCommand+0x70>)
  40330c:	4798      	blx	r3
  40330e:	2802      	cmp	r0, #2
  403310:	d012      	beq.n	403338 <xTimerGenericCommand+0x4c>
  403312:	2300      	movs	r3, #0
  403314:	461a      	mov	r2, r3
  403316:	4669      	mov	r1, sp
  403318:	480f      	ldr	r0, [pc, #60]	; (403358 <xTimerGenericCommand+0x6c>)
  40331a:	6800      	ldr	r0, [r0, #0]
  40331c:	4c10      	ldr	r4, [pc, #64]	; (403360 <xTimerGenericCommand+0x74>)
  40331e:	47a0      	blx	r4
  403320:	e016      	b.n	403350 <xTimerGenericCommand+0x64>
  403322:	f04f 0380 	mov.w	r3, #128	; 0x80
  403326:	b672      	cpsid	i
  403328:	f383 8811 	msr	BASEPRI, r3
  40332c:	f3bf 8f6f 	isb	sy
  403330:	f3bf 8f4f 	dsb	sy
  403334:	b662      	cpsie	i
  403336:	e7fe      	b.n	403336 <xTimerGenericCommand+0x4a>
  403338:	2300      	movs	r3, #0
  40333a:	9a08      	ldr	r2, [sp, #32]
  40333c:	4669      	mov	r1, sp
  40333e:	4806      	ldr	r0, [pc, #24]	; (403358 <xTimerGenericCommand+0x6c>)
  403340:	6800      	ldr	r0, [r0, #0]
  403342:	4c07      	ldr	r4, [pc, #28]	; (403360 <xTimerGenericCommand+0x74>)
  403344:	47a0      	blx	r4
  403346:	e003      	b.n	403350 <xTimerGenericCommand+0x64>
  403348:	2300      	movs	r3, #0
  40334a:	4669      	mov	r1, sp
  40334c:	4c05      	ldr	r4, [pc, #20]	; (403364 <xTimerGenericCommand+0x78>)
  40334e:	47a0      	blx	r4
  403350:	b005      	add	sp, #20
  403352:	bd30      	pop	{r4, r5, pc}
  403354:	2000      	movs	r0, #0
  403356:	e7fb      	b.n	403350 <xTimerGenericCommand+0x64>
  403358:	2040c414 	.word	0x2040c414
  40335c:	00402f8d 	.word	0x00402f8d
  403360:	00401ee5 	.word	0x00401ee5
  403364:	004020c9 	.word	0x004020c9

00403368 <prvSwitchTimerLists>:
  403368:	b570      	push	{r4, r5, r6, lr}
  40336a:	b082      	sub	sp, #8
  40336c:	4b1c      	ldr	r3, [pc, #112]	; (4033e0 <prvSwitchTimerLists+0x78>)
  40336e:	681b      	ldr	r3, [r3, #0]
  403370:	681a      	ldr	r2, [r3, #0]
  403372:	2a00      	cmp	r2, #0
  403374:	d02c      	beq.n	4033d0 <prvSwitchTimerLists+0x68>
  403376:	68db      	ldr	r3, [r3, #12]
  403378:	681e      	ldr	r6, [r3, #0]
  40337a:	68dc      	ldr	r4, [r3, #12]
  40337c:	1d25      	adds	r5, r4, #4
  40337e:	4628      	mov	r0, r5
  403380:	4b18      	ldr	r3, [pc, #96]	; (4033e4 <prvSwitchTimerLists+0x7c>)
  403382:	4798      	blx	r3
  403384:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403386:	4620      	mov	r0, r4
  403388:	4798      	blx	r3
  40338a:	69e3      	ldr	r3, [r4, #28]
  40338c:	2b01      	cmp	r3, #1
  40338e:	d1ed      	bne.n	40336c <prvSwitchTimerLists+0x4>
  403390:	69a3      	ldr	r3, [r4, #24]
  403392:	4433      	add	r3, r6
  403394:	429e      	cmp	r6, r3
  403396:	d207      	bcs.n	4033a8 <prvSwitchTimerLists+0x40>
  403398:	6063      	str	r3, [r4, #4]
  40339a:	6124      	str	r4, [r4, #16]
  40339c:	4629      	mov	r1, r5
  40339e:	4b10      	ldr	r3, [pc, #64]	; (4033e0 <prvSwitchTimerLists+0x78>)
  4033a0:	6818      	ldr	r0, [r3, #0]
  4033a2:	4b11      	ldr	r3, [pc, #68]	; (4033e8 <prvSwitchTimerLists+0x80>)
  4033a4:	4798      	blx	r3
  4033a6:	e7e1      	b.n	40336c <prvSwitchTimerLists+0x4>
  4033a8:	2100      	movs	r1, #0
  4033aa:	9100      	str	r1, [sp, #0]
  4033ac:	460b      	mov	r3, r1
  4033ae:	4632      	mov	r2, r6
  4033b0:	4620      	mov	r0, r4
  4033b2:	4c0e      	ldr	r4, [pc, #56]	; (4033ec <prvSwitchTimerLists+0x84>)
  4033b4:	47a0      	blx	r4
  4033b6:	2800      	cmp	r0, #0
  4033b8:	d1d8      	bne.n	40336c <prvSwitchTimerLists+0x4>
  4033ba:	f04f 0380 	mov.w	r3, #128	; 0x80
  4033be:	b672      	cpsid	i
  4033c0:	f383 8811 	msr	BASEPRI, r3
  4033c4:	f3bf 8f6f 	isb	sy
  4033c8:	f3bf 8f4f 	dsb	sy
  4033cc:	b662      	cpsie	i
  4033ce:	e7fe      	b.n	4033ce <prvSwitchTimerLists+0x66>
  4033d0:	4a07      	ldr	r2, [pc, #28]	; (4033f0 <prvSwitchTimerLists+0x88>)
  4033d2:	6810      	ldr	r0, [r2, #0]
  4033d4:	4902      	ldr	r1, [pc, #8]	; (4033e0 <prvSwitchTimerLists+0x78>)
  4033d6:	6008      	str	r0, [r1, #0]
  4033d8:	6013      	str	r3, [r2, #0]
  4033da:	b002      	add	sp, #8
  4033dc:	bd70      	pop	{r4, r5, r6, pc}
  4033de:	bf00      	nop
  4033e0:	2040c3e0 	.word	0x2040c3e0
  4033e4:	004017f5 	.word	0x004017f5
  4033e8:	004017c1 	.word	0x004017c1
  4033ec:	004032ed 	.word	0x004032ed
  4033f0:	2040c3e4 	.word	0x2040c3e4

004033f4 <prvSampleTimeNow>:
  4033f4:	b538      	push	{r3, r4, r5, lr}
  4033f6:	4605      	mov	r5, r0
  4033f8:	4b08      	ldr	r3, [pc, #32]	; (40341c <prvSampleTimeNow+0x28>)
  4033fa:	4798      	blx	r3
  4033fc:	4604      	mov	r4, r0
  4033fe:	4b08      	ldr	r3, [pc, #32]	; (403420 <prvSampleTimeNow+0x2c>)
  403400:	681b      	ldr	r3, [r3, #0]
  403402:	4298      	cmp	r0, r3
  403404:	d305      	bcc.n	403412 <prvSampleTimeNow+0x1e>
  403406:	2300      	movs	r3, #0
  403408:	602b      	str	r3, [r5, #0]
  40340a:	4b05      	ldr	r3, [pc, #20]	; (403420 <prvSampleTimeNow+0x2c>)
  40340c:	601c      	str	r4, [r3, #0]
  40340e:	4620      	mov	r0, r4
  403410:	bd38      	pop	{r3, r4, r5, pc}
  403412:	4b04      	ldr	r3, [pc, #16]	; (403424 <prvSampleTimeNow+0x30>)
  403414:	4798      	blx	r3
  403416:	2301      	movs	r3, #1
  403418:	602b      	str	r3, [r5, #0]
  40341a:	e7f6      	b.n	40340a <prvSampleTimeNow+0x16>
  40341c:	004028b5 	.word	0x004028b5
  403420:	2040c410 	.word	0x2040c410
  403424:	00403369 	.word	0x00403369

00403428 <prvProcessExpiredTimer>:
  403428:	b570      	push	{r4, r5, r6, lr}
  40342a:	b082      	sub	sp, #8
  40342c:	4605      	mov	r5, r0
  40342e:	460e      	mov	r6, r1
  403430:	4b15      	ldr	r3, [pc, #84]	; (403488 <prvProcessExpiredTimer+0x60>)
  403432:	681b      	ldr	r3, [r3, #0]
  403434:	68db      	ldr	r3, [r3, #12]
  403436:	68dc      	ldr	r4, [r3, #12]
  403438:	1d20      	adds	r0, r4, #4
  40343a:	4b14      	ldr	r3, [pc, #80]	; (40348c <prvProcessExpiredTimer+0x64>)
  40343c:	4798      	blx	r3
  40343e:	69e3      	ldr	r3, [r4, #28]
  403440:	2b01      	cmp	r3, #1
  403442:	d004      	beq.n	40344e <prvProcessExpiredTimer+0x26>
  403444:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403446:	4620      	mov	r0, r4
  403448:	4798      	blx	r3
  40344a:	b002      	add	sp, #8
  40344c:	bd70      	pop	{r4, r5, r6, pc}
  40344e:	69a1      	ldr	r1, [r4, #24]
  403450:	462b      	mov	r3, r5
  403452:	4632      	mov	r2, r6
  403454:	4429      	add	r1, r5
  403456:	4620      	mov	r0, r4
  403458:	4e0d      	ldr	r6, [pc, #52]	; (403490 <prvProcessExpiredTimer+0x68>)
  40345a:	47b0      	blx	r6
  40345c:	2801      	cmp	r0, #1
  40345e:	d1f1      	bne.n	403444 <prvProcessExpiredTimer+0x1c>
  403460:	2100      	movs	r1, #0
  403462:	9100      	str	r1, [sp, #0]
  403464:	460b      	mov	r3, r1
  403466:	462a      	mov	r2, r5
  403468:	4620      	mov	r0, r4
  40346a:	4d0a      	ldr	r5, [pc, #40]	; (403494 <prvProcessExpiredTimer+0x6c>)
  40346c:	47a8      	blx	r5
  40346e:	2800      	cmp	r0, #0
  403470:	d1e8      	bne.n	403444 <prvProcessExpiredTimer+0x1c>
  403472:	f04f 0380 	mov.w	r3, #128	; 0x80
  403476:	b672      	cpsid	i
  403478:	f383 8811 	msr	BASEPRI, r3
  40347c:	f3bf 8f6f 	isb	sy
  403480:	f3bf 8f4f 	dsb	sy
  403484:	b662      	cpsie	i
  403486:	e7fe      	b.n	403486 <prvProcessExpiredTimer+0x5e>
  403488:	2040c3e0 	.word	0x2040c3e0
  40348c:	004017f5 	.word	0x004017f5
  403490:	00403159 	.word	0x00403159
  403494:	004032ed 	.word	0x004032ed

00403498 <prvProcessTimerOrBlockTask>:
  403498:	b570      	push	{r4, r5, r6, lr}
  40349a:	b082      	sub	sp, #8
  40349c:	4606      	mov	r6, r0
  40349e:	460c      	mov	r4, r1
  4034a0:	4b17      	ldr	r3, [pc, #92]	; (403500 <prvProcessTimerOrBlockTask+0x68>)
  4034a2:	4798      	blx	r3
  4034a4:	a801      	add	r0, sp, #4
  4034a6:	4b17      	ldr	r3, [pc, #92]	; (403504 <prvProcessTimerOrBlockTask+0x6c>)
  4034a8:	4798      	blx	r3
  4034aa:	9b01      	ldr	r3, [sp, #4]
  4034ac:	bb23      	cbnz	r3, 4034f8 <prvProcessTimerOrBlockTask+0x60>
  4034ae:	4605      	mov	r5, r0
  4034b0:	42b0      	cmp	r0, r6
  4034b2:	bf28      	it	cs
  4034b4:	2c00      	cmpcs	r4, #0
  4034b6:	d018      	beq.n	4034ea <prvProcessTimerOrBlockTask+0x52>
  4034b8:	b12c      	cbz	r4, 4034c6 <prvProcessTimerOrBlockTask+0x2e>
  4034ba:	4b13      	ldr	r3, [pc, #76]	; (403508 <prvProcessTimerOrBlockTask+0x70>)
  4034bc:	681b      	ldr	r3, [r3, #0]
  4034be:	681c      	ldr	r4, [r3, #0]
  4034c0:	fab4 f484 	clz	r4, r4
  4034c4:	0964      	lsrs	r4, r4, #5
  4034c6:	4622      	mov	r2, r4
  4034c8:	1b71      	subs	r1, r6, r5
  4034ca:	4b10      	ldr	r3, [pc, #64]	; (40350c <prvProcessTimerOrBlockTask+0x74>)
  4034cc:	6818      	ldr	r0, [r3, #0]
  4034ce:	4b10      	ldr	r3, [pc, #64]	; (403510 <prvProcessTimerOrBlockTask+0x78>)
  4034d0:	4798      	blx	r3
  4034d2:	4b10      	ldr	r3, [pc, #64]	; (403514 <prvProcessTimerOrBlockTask+0x7c>)
  4034d4:	4798      	blx	r3
  4034d6:	b988      	cbnz	r0, 4034fc <prvProcessTimerOrBlockTask+0x64>
  4034d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4034dc:	4b0e      	ldr	r3, [pc, #56]	; (403518 <prvProcessTimerOrBlockTask+0x80>)
  4034de:	601a      	str	r2, [r3, #0]
  4034e0:	f3bf 8f4f 	dsb	sy
  4034e4:	f3bf 8f6f 	isb	sy
  4034e8:	e008      	b.n	4034fc <prvProcessTimerOrBlockTask+0x64>
  4034ea:	4b0a      	ldr	r3, [pc, #40]	; (403514 <prvProcessTimerOrBlockTask+0x7c>)
  4034ec:	4798      	blx	r3
  4034ee:	4629      	mov	r1, r5
  4034f0:	4630      	mov	r0, r6
  4034f2:	4b0a      	ldr	r3, [pc, #40]	; (40351c <prvProcessTimerOrBlockTask+0x84>)
  4034f4:	4798      	blx	r3
  4034f6:	e001      	b.n	4034fc <prvProcessTimerOrBlockTask+0x64>
  4034f8:	4b06      	ldr	r3, [pc, #24]	; (403514 <prvProcessTimerOrBlockTask+0x7c>)
  4034fa:	4798      	blx	r3
  4034fc:	b002      	add	sp, #8
  4034fe:	bd70      	pop	{r4, r5, r6, pc}
  403500:	004028a5 	.word	0x004028a5
  403504:	004033f5 	.word	0x004033f5
  403508:	2040c3e4 	.word	0x2040c3e4
  40350c:	2040c414 	.word	0x2040c414
  403510:	004024c9 	.word	0x004024c9
  403514:	00402a05 	.word	0x00402a05
  403518:	e000ed04 	.word	0xe000ed04
  40351c:	00403429 	.word	0x00403429

00403520 <prvProcessReceivedCommands>:
  403520:	b530      	push	{r4, r5, lr}
  403522:	b089      	sub	sp, #36	; 0x24
  403524:	e002      	b.n	40352c <prvProcessReceivedCommands+0xc>
  403526:	9b04      	ldr	r3, [sp, #16]
  403528:	2b00      	cmp	r3, #0
  40352a:	da10      	bge.n	40354e <prvProcessReceivedCommands+0x2e>
  40352c:	2300      	movs	r3, #0
  40352e:	461a      	mov	r2, r3
  403530:	a904      	add	r1, sp, #16
  403532:	4839      	ldr	r0, [pc, #228]	; (403618 <prvProcessReceivedCommands+0xf8>)
  403534:	6800      	ldr	r0, [r0, #0]
  403536:	4c39      	ldr	r4, [pc, #228]	; (40361c <prvProcessReceivedCommands+0xfc>)
  403538:	47a0      	blx	r4
  40353a:	2800      	cmp	r0, #0
  40353c:	d069      	beq.n	403612 <prvProcessReceivedCommands+0xf2>
  40353e:	9b04      	ldr	r3, [sp, #16]
  403540:	2b00      	cmp	r3, #0
  403542:	daf0      	bge.n	403526 <prvProcessReceivedCommands+0x6>
  403544:	9907      	ldr	r1, [sp, #28]
  403546:	9806      	ldr	r0, [sp, #24]
  403548:	9b05      	ldr	r3, [sp, #20]
  40354a:	4798      	blx	r3
  40354c:	e7eb      	b.n	403526 <prvProcessReceivedCommands+0x6>
  40354e:	9c06      	ldr	r4, [sp, #24]
  403550:	6963      	ldr	r3, [r4, #20]
  403552:	b113      	cbz	r3, 40355a <prvProcessReceivedCommands+0x3a>
  403554:	1d20      	adds	r0, r4, #4
  403556:	4b32      	ldr	r3, [pc, #200]	; (403620 <prvProcessReceivedCommands+0x100>)
  403558:	4798      	blx	r3
  40355a:	a803      	add	r0, sp, #12
  40355c:	4b31      	ldr	r3, [pc, #196]	; (403624 <prvProcessReceivedCommands+0x104>)
  40355e:	4798      	blx	r3
  403560:	9b04      	ldr	r3, [sp, #16]
  403562:	2b09      	cmp	r3, #9
  403564:	d8e2      	bhi.n	40352c <prvProcessReceivedCommands+0xc>
  403566:	a201      	add	r2, pc, #4	; (adr r2, 40356c <prvProcessReceivedCommands+0x4c>)
  403568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40356c:	00403595 	.word	0x00403595
  403570:	00403595 	.word	0x00403595
  403574:	00403595 	.word	0x00403595
  403578:	0040352d 	.word	0x0040352d
  40357c:	004035e1 	.word	0x004035e1
  403580:	0040360b 	.word	0x0040360b
  403584:	00403595 	.word	0x00403595
  403588:	00403595 	.word	0x00403595
  40358c:	0040352d 	.word	0x0040352d
  403590:	004035e1 	.word	0x004035e1
  403594:	9905      	ldr	r1, [sp, #20]
  403596:	69a5      	ldr	r5, [r4, #24]
  403598:	460b      	mov	r3, r1
  40359a:	4602      	mov	r2, r0
  40359c:	4429      	add	r1, r5
  40359e:	4620      	mov	r0, r4
  4035a0:	4d21      	ldr	r5, [pc, #132]	; (403628 <prvProcessReceivedCommands+0x108>)
  4035a2:	47a8      	blx	r5
  4035a4:	2801      	cmp	r0, #1
  4035a6:	d1c1      	bne.n	40352c <prvProcessReceivedCommands+0xc>
  4035a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4035aa:	4620      	mov	r0, r4
  4035ac:	4798      	blx	r3
  4035ae:	69e3      	ldr	r3, [r4, #28]
  4035b0:	2b01      	cmp	r3, #1
  4035b2:	d1bb      	bne.n	40352c <prvProcessReceivedCommands+0xc>
  4035b4:	69a2      	ldr	r2, [r4, #24]
  4035b6:	2100      	movs	r1, #0
  4035b8:	9100      	str	r1, [sp, #0]
  4035ba:	460b      	mov	r3, r1
  4035bc:	9805      	ldr	r0, [sp, #20]
  4035be:	4402      	add	r2, r0
  4035c0:	4620      	mov	r0, r4
  4035c2:	4c1a      	ldr	r4, [pc, #104]	; (40362c <prvProcessReceivedCommands+0x10c>)
  4035c4:	47a0      	blx	r4
  4035c6:	2800      	cmp	r0, #0
  4035c8:	d1b0      	bne.n	40352c <prvProcessReceivedCommands+0xc>
  4035ca:	f04f 0380 	mov.w	r3, #128	; 0x80
  4035ce:	b672      	cpsid	i
  4035d0:	f383 8811 	msr	BASEPRI, r3
  4035d4:	f3bf 8f6f 	isb	sy
  4035d8:	f3bf 8f4f 	dsb	sy
  4035dc:	b662      	cpsie	i
  4035de:	e7fe      	b.n	4035de <prvProcessReceivedCommands+0xbe>
  4035e0:	9905      	ldr	r1, [sp, #20]
  4035e2:	61a1      	str	r1, [r4, #24]
  4035e4:	b131      	cbz	r1, 4035f4 <prvProcessReceivedCommands+0xd4>
  4035e6:	4603      	mov	r3, r0
  4035e8:	4602      	mov	r2, r0
  4035ea:	4401      	add	r1, r0
  4035ec:	4620      	mov	r0, r4
  4035ee:	4c0e      	ldr	r4, [pc, #56]	; (403628 <prvProcessReceivedCommands+0x108>)
  4035f0:	47a0      	blx	r4
  4035f2:	e79b      	b.n	40352c <prvProcessReceivedCommands+0xc>
  4035f4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4035f8:	b672      	cpsid	i
  4035fa:	f383 8811 	msr	BASEPRI, r3
  4035fe:	f3bf 8f6f 	isb	sy
  403602:	f3bf 8f4f 	dsb	sy
  403606:	b662      	cpsie	i
  403608:	e7fe      	b.n	403608 <prvProcessReceivedCommands+0xe8>
  40360a:	4620      	mov	r0, r4
  40360c:	4b08      	ldr	r3, [pc, #32]	; (403630 <prvProcessReceivedCommands+0x110>)
  40360e:	4798      	blx	r3
  403610:	e78c      	b.n	40352c <prvProcessReceivedCommands+0xc>
  403612:	b009      	add	sp, #36	; 0x24
  403614:	bd30      	pop	{r4, r5, pc}
  403616:	bf00      	nop
  403618:	2040c414 	.word	0x2040c414
  40361c:	004022cd 	.word	0x004022cd
  403620:	004017f5 	.word	0x004017f5
  403624:	004033f5 	.word	0x004033f5
  403628:	00403159 	.word	0x00403159
  40362c:	004032ed 	.word	0x004032ed
  403630:	00401b9d 	.word	0x00401b9d

00403634 <prvTimerTask>:
  403634:	b500      	push	{lr}
  403636:	b083      	sub	sp, #12
  403638:	a801      	add	r0, sp, #4
  40363a:	4b04      	ldr	r3, [pc, #16]	; (40364c <prvTimerTask+0x18>)
  40363c:	4798      	blx	r3
  40363e:	9901      	ldr	r1, [sp, #4]
  403640:	4b03      	ldr	r3, [pc, #12]	; (403650 <prvTimerTask+0x1c>)
  403642:	4798      	blx	r3
  403644:	4b03      	ldr	r3, [pc, #12]	; (403654 <prvTimerTask+0x20>)
  403646:	4798      	blx	r3
  403648:	e7f6      	b.n	403638 <prvTimerTask+0x4>
  40364a:	bf00      	nop
  40364c:	00403139 	.word	0x00403139
  403650:	00403499 	.word	0x00403499
  403654:	00403521 	.word	0x00403521

00403658 <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
  403658:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
  40365a:	4603      	mov	r3, r0
  40365c:	b110      	cbz	r0, 403664 <lv_disp_get_scr_act+0xc>
    if(!disp) {
  40365e:	b12b      	cbz	r3, 40366c <lv_disp_get_scr_act+0x14>
        LV_LOG_WARN("no display registered to get its active screen");
        return NULL;
    }

    return disp->act_scr;
  403660:	6c58      	ldr	r0, [r3, #68]	; 0x44
  403662:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
  403664:	4b02      	ldr	r3, [pc, #8]	; (403670 <lv_disp_get_scr_act+0x18>)
  403666:	4798      	blx	r3
  403668:	4603      	mov	r3, r0
  40366a:	e7f8      	b.n	40365e <lv_disp_get_scr_act+0x6>
        return NULL;
  40366c:	2000      	movs	r0, #0
}
  40366e:	bd08      	pop	{r3, pc}
  403670:	00414d95 	.word	0x00414d95

00403674 <lv_disp_get_scr_prev>:
 * @param disp pointer to display which previous screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the previous screen object or NULL if not used now
 */
lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp)
{
  403674:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
  403676:	4603      	mov	r3, r0
  403678:	b110      	cbz	r0, 403680 <lv_disp_get_scr_prev+0xc>
    if(!disp) {
  40367a:	b12b      	cbz	r3, 403688 <lv_disp_get_scr_prev+0x14>
        LV_LOG_WARN("no display registered to get its previous screen");
        return NULL;
    }

    return disp->prev_scr;
  40367c:	6c98      	ldr	r0, [r3, #72]	; 0x48
  40367e:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
  403680:	4b02      	ldr	r3, [pc, #8]	; (40368c <lv_disp_get_scr_prev+0x18>)
  403682:	4798      	blx	r3
  403684:	4603      	mov	r3, r0
  403686:	e7f8      	b.n	40367a <lv_disp_get_scr_prev+0x6>
        return NULL;
  403688:	2000      	movs	r0, #0
}
  40368a:	bd08      	pop	{r3, pc}
  40368c:	00414d95 	.word	0x00414d95

00403690 <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
  403690:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
  403692:	4603      	mov	r3, r0
  403694:	b110      	cbz	r0, 40369c <lv_disp_get_layer_top+0xc>
    if(!disp) {
  403696:	b12b      	cbz	r3, 4036a4 <lv_disp_get_layer_top+0x14>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
    }

    return disp->top_layer;
  403698:	6d18      	ldr	r0, [r3, #80]	; 0x50
  40369a:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
  40369c:	4b02      	ldr	r3, [pc, #8]	; (4036a8 <lv_disp_get_layer_top+0x18>)
  40369e:	4798      	blx	r3
  4036a0:	4603      	mov	r3, r0
  4036a2:	e7f8      	b.n	403696 <lv_disp_get_layer_top+0x6>
        return NULL;
  4036a4:	2000      	movs	r0, #0
}
  4036a6:	bd08      	pop	{r3, pc}
  4036a8:	00414d95 	.word	0x00414d95

004036ac <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
  4036ac:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
  4036ae:	4603      	mov	r3, r0
  4036b0:	b110      	cbz	r0, 4036b8 <lv_disp_get_layer_sys+0xc>
    if(!disp) {
  4036b2:	b12b      	cbz	r3, 4036c0 <lv_disp_get_layer_sys+0x14>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
        return NULL;
    }

    return disp->sys_layer;
  4036b4:	6d58      	ldr	r0, [r3, #84]	; 0x54
  4036b6:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
  4036b8:	4b02      	ldr	r3, [pc, #8]	; (4036c4 <lv_disp_get_layer_sys+0x18>)
  4036ba:	4798      	blx	r3
  4036bc:	4603      	mov	r3, r0
  4036be:	e7f8      	b.n	4036b2 <lv_disp_get_layer_sys+0x6>
        return NULL;
  4036c0:	2000      	movs	r0, #0
}
  4036c2:	bd08      	pop	{r3, pc}
  4036c4:	00414d95 	.word	0x00414d95

004036c8 <obj_to_foreground>:

    if(group->focus_cb) group->focus_cb(group);
}

static void obj_to_foreground(lv_obj_t * obj)
{
  4036c8:	b510      	push	{r4, lr}
    /*Search for 'top' attribute*/
    lv_obj_t * i        = obj;
    lv_obj_t * last_top = NULL;
  4036ca:	2400      	movs	r4, #0
    while(i != NULL) {
  4036cc:	e001      	b.n	4036d2 <obj_to_foreground+0xa>
        if(i->top != 0) last_top = i;
        i = lv_obj_get_parent(i);
  4036ce:	4b07      	ldr	r3, [pc, #28]	; (4036ec <obj_to_foreground+0x24>)
  4036d0:	4798      	blx	r3
    while(i != NULL) {
  4036d2:	b130      	cbz	r0, 4036e2 <obj_to_foreground+0x1a>
        if(i->top != 0) last_top = i;
  4036d4:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
  4036d8:	f013 0f20 	tst.w	r3, #32
  4036dc:	d0f7      	beq.n	4036ce <obj_to_foreground+0x6>
  4036de:	4604      	mov	r4, r0
  4036e0:	e7f5      	b.n	4036ce <obj_to_foreground+0x6>
    }

    if(last_top != NULL) {
  4036e2:	b114      	cbz	r4, 4036ea <obj_to_foreground+0x22>
        /*Move the last_top object to the foreground*/
        lv_obj_move_foreground(last_top);
  4036e4:	4620      	mov	r0, r4
  4036e6:	4b02      	ldr	r3, [pc, #8]	; (4036f0 <obj_to_foreground+0x28>)
  4036e8:	4798      	blx	r3
  4036ea:	bd10      	pop	{r4, pc}
  4036ec:	004059ed 	.word	0x004059ed
  4036f0:	00406015 	.word	0x00406015

004036f4 <focus_next_core>:
{
  4036f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(group->frozen) return;
  4036f8:	7d03      	ldrb	r3, [r0, #20]
  4036fa:	f013 0f01 	tst.w	r3, #1
  4036fe:	d15f      	bne.n	4037c0 <focus_next_core+0xcc>
  403700:	4690      	mov	r8, r2
  403702:	4689      	mov	r9, r1
  403704:	4606      	mov	r6, r0
    lv_obj_t ** obj_next     = group->obj_focus;
  403706:	68c4      	ldr	r4, [r0, #12]
    bool can_begin           = true;
  403708:	2701      	movs	r7, #1
    lv_obj_t ** obj_sentinel = NULL;
  40370a:	2500      	movs	r5, #0
        if(obj_next == NULL) {
  40370c:	2c00      	cmp	r4, #0
  40370e:	d042      	beq.n	403796 <focus_next_core+0xa2>
  403710:	2301      	movs	r3, #1
        if(obj_sentinel == NULL) {
  403712:	2d00      	cmp	r5, #0
  403714:	d04b      	beq.n	4037ae <focus_next_core+0xba>
        if(can_move) {
  403716:	2b00      	cmp	r3, #0
  403718:	d14c      	bne.n	4037b4 <focus_next_core+0xc0>
        if(obj_next == NULL) continue;
  40371a:	2c00      	cmp	r4, #0
  40371c:	d0f6      	beq.n	40370c <focus_next_core+0x18>
        if(lv_obj_get_state(*obj_next, LV_OBJ_PART_MAIN) & LV_STATE_DISABLED) continue;
  40371e:	2100      	movs	r1, #0
  403720:	6820      	ldr	r0, [r4, #0]
  403722:	4b28      	ldr	r3, [pc, #160]	; (4037c4 <focus_next_core+0xd0>)
  403724:	4798      	blx	r3
  403726:	f010 0f20 	tst.w	r0, #32
  40372a:	d1ef      	bne.n	40370c <focus_next_core+0x18>
        if(!lv_obj_get_hidden(*obj_next)) break;
  40372c:	6820      	ldr	r0, [r4, #0]
  40372e:	4b26      	ldr	r3, [pc, #152]	; (4037c8 <focus_next_core+0xd4>)
  403730:	4798      	blx	r3
  403732:	2800      	cmp	r0, #0
  403734:	d1ea      	bne.n	40370c <focus_next_core+0x18>
    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
  403736:	68f3      	ldr	r3, [r6, #12]
  403738:	429c      	cmp	r4, r3
  40373a:	d041      	beq.n	4037c0 <focus_next_core+0xcc>
    if(group->obj_focus) {
  40373c:	b183      	cbz	r3, 403760 <focus_next_core+0x6c>
        (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
  40373e:	6818      	ldr	r0, [r3, #0]
  403740:	69c3      	ldr	r3, [r0, #28]
  403742:	2200      	movs	r2, #0
  403744:	2117      	movs	r1, #23
  403746:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, NULL);
  403748:	68f3      	ldr	r3, [r6, #12]
  40374a:	2200      	movs	r2, #0
  40374c:	210e      	movs	r1, #14
  40374e:	6818      	ldr	r0, [r3, #0]
  403750:	4b1e      	ldr	r3, [pc, #120]	; (4037cc <focus_next_core+0xd8>)
  403752:	4798      	blx	r3
        if(res != LV_RES_OK) return;
  403754:	2801      	cmp	r0, #1
  403756:	d133      	bne.n	4037c0 <focus_next_core+0xcc>
        lv_obj_invalidate(*group->obj_focus);
  403758:	68f3      	ldr	r3, [r6, #12]
  40375a:	6818      	ldr	r0, [r3, #0]
  40375c:	4b1c      	ldr	r3, [pc, #112]	; (4037d0 <focus_next_core+0xdc>)
  40375e:	4798      	blx	r3
    group->obj_focus = obj_next;
  403760:	60f4      	str	r4, [r6, #12]
    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
  403762:	6820      	ldr	r0, [r4, #0]
  403764:	69c3      	ldr	r3, [r0, #28]
  403766:	2200      	movs	r2, #0
  403768:	2116      	movs	r1, #22
  40376a:	4798      	blx	r3
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
  40376c:	68f3      	ldr	r3, [r6, #12]
  40376e:	2200      	movs	r2, #0
  403770:	210d      	movs	r1, #13
  403772:	6818      	ldr	r0, [r3, #0]
  403774:	4b15      	ldr	r3, [pc, #84]	; (4037cc <focus_next_core+0xd8>)
  403776:	4798      	blx	r3
    if(res != LV_RES_OK) return;
  403778:	2801      	cmp	r0, #1
  40377a:	d121      	bne.n	4037c0 <focus_next_core+0xcc>
    obj_to_foreground(*group->obj_focus);
  40377c:	68f3      	ldr	r3, [r6, #12]
  40377e:	6818      	ldr	r0, [r3, #0]
  403780:	4b14      	ldr	r3, [pc, #80]	; (4037d4 <focus_next_core+0xe0>)
  403782:	4798      	blx	r3
    lv_obj_invalidate(*group->obj_focus);
  403784:	68f3      	ldr	r3, [r6, #12]
  403786:	6818      	ldr	r0, [r3, #0]
  403788:	4b11      	ldr	r3, [pc, #68]	; (4037d0 <focus_next_core+0xdc>)
  40378a:	4798      	blx	r3
    if(group->focus_cb) group->focus_cb(group);
  40378c:	6933      	ldr	r3, [r6, #16]
  40378e:	b1bb      	cbz	r3, 4037c0 <focus_next_core+0xcc>
  403790:	4630      	mov	r0, r6
  403792:	4798      	blx	r3
  403794:	e014      	b.n	4037c0 <focus_next_core+0xcc>
            if(group->wrap || obj_sentinel == NULL) {
  403796:	7d33      	ldrb	r3, [r6, #20]
  403798:	f013 0f10 	tst.w	r3, #16
  40379c:	d100      	bne.n	4037a0 <focus_next_core+0xac>
  40379e:	b97d      	cbnz	r5, 4037c0 <focus_next_core+0xcc>
                if(!can_begin) return;
  4037a0:	b177      	cbz	r7, 4037c0 <focus_next_core+0xcc>
                obj_next  = begin(&group->obj_ll);
  4037a2:	4630      	mov	r0, r6
  4037a4:	47c8      	blx	r9
  4037a6:	4604      	mov	r4, r0
                can_begin = false;
  4037a8:	2700      	movs	r7, #0
                can_move  = false;
  4037aa:	463b      	mov	r3, r7
                can_begin = false;
  4037ac:	e7b1      	b.n	403712 <focus_next_core+0x1e>
            if(obj_sentinel == NULL) return; /*Group is empty*/
  4037ae:	b13c      	cbz	r4, 4037c0 <focus_next_core+0xcc>
            obj_sentinel = obj_next;
  4037b0:	4625      	mov	r5, r4
  4037b2:	e7b0      	b.n	403716 <focus_next_core+0x22>
            obj_next = move(&group->obj_ll, obj_next);
  4037b4:	4621      	mov	r1, r4
  4037b6:	4630      	mov	r0, r6
  4037b8:	47c0      	blx	r8
  4037ba:	4604      	mov	r4, r0
            if(obj_next == obj_sentinel) return;
  4037bc:	4285      	cmp	r5, r0
  4037be:	d1ac      	bne.n	40371a <focus_next_core+0x26>
  4037c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4037c4:	00406e21 	.word	0x00406e21
  4037c8:	00405e09 	.word	0x00405e09
  4037cc:	004058d1 	.word	0x004058d1
  4037d0:	00405f99 	.word	0x00405f99
  4037d4:	004036c9 	.word	0x004036c9

004037d8 <_lv_group_init>:
{
  4037d8:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
  4037da:	2118      	movs	r1, #24
  4037dc:	4801      	ldr	r0, [pc, #4]	; (4037e4 <_lv_group_init+0xc>)
  4037de:	4b02      	ldr	r3, [pc, #8]	; (4037e8 <_lv_group_init+0x10>)
  4037e0:	4798      	blx	r3
  4037e2:	bd08      	pop	{r3, pc}
  4037e4:	2043a3e4 	.word	0x2043a3e4
  4037e8:	004161fb 	.word	0x004161fb

004037ec <lv_group_focus_next>:
{
  4037ec:	b508      	push	{r3, lr}
    focus_next_core(group, _lv_ll_get_head, _lv_ll_get_next);
  4037ee:	4a02      	ldr	r2, [pc, #8]	; (4037f8 <lv_group_focus_next+0xc>)
  4037f0:	4902      	ldr	r1, [pc, #8]	; (4037fc <lv_group_focus_next+0x10>)
  4037f2:	4b03      	ldr	r3, [pc, #12]	; (403800 <lv_group_focus_next+0x14>)
  4037f4:	4798      	blx	r3
  4037f6:	bd08      	pop	{r3, pc}
  4037f8:	004162b9 	.word	0x004162b9
  4037fc:	004162a5 	.word	0x004162a5
  403800:	004036f5 	.word	0x004036f5

00403804 <lv_group_focus_prev>:
{
  403804:	b508      	push	{r3, lr}
    focus_next_core(group, _lv_ll_get_tail, _lv_ll_get_prev);
  403806:	4a02      	ldr	r2, [pc, #8]	; (403810 <lv_group_focus_prev+0xc>)
  403808:	4902      	ldr	r1, [pc, #8]	; (403814 <lv_group_focus_prev+0x10>)
  40380a:	4b03      	ldr	r3, [pc, #12]	; (403818 <lv_group_focus_prev+0x14>)
  40380c:	4798      	blx	r3
  40380e:	bd08      	pop	{r3, pc}
  403810:	004162c7 	.word	0x004162c7
  403814:	004162af 	.word	0x004162af
  403818:	004036f5 	.word	0x004036f5

0040381c <lv_group_refocus>:
{
  40381c:	b538      	push	{r3, r4, r5, lr}
  40381e:	4604      	mov	r4, r0
    uint8_t temp_wrap = g->wrap;
  403820:	7d03      	ldrb	r3, [r0, #20]
  403822:	f3c3 1500 	ubfx	r5, r3, #4, #1
    g->wrap           = 1;
  403826:	f043 0310 	orr.w	r3, r3, #16
  40382a:	7503      	strb	r3, [r0, #20]
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
  40382c:	f013 0f08 	tst.w	r3, #8
  403830:	d006      	beq.n	403840 <lv_group_refocus+0x24>
        lv_group_focus_prev(g);
  403832:	4b05      	ldr	r3, [pc, #20]	; (403848 <lv_group_refocus+0x2c>)
  403834:	4798      	blx	r3
    g->wrap = temp_wrap;
  403836:	7d23      	ldrb	r3, [r4, #20]
  403838:	f365 1304 	bfi	r3, r5, #4, #1
  40383c:	7523      	strb	r3, [r4, #20]
  40383e:	bd38      	pop	{r3, r4, r5, pc}
        lv_group_focus_next(g);
  403840:	4b02      	ldr	r3, [pc, #8]	; (40384c <lv_group_refocus+0x30>)
  403842:	4798      	blx	r3
  403844:	e7f7      	b.n	403836 <lv_group_refocus+0x1a>
  403846:	bf00      	nop
  403848:	00403805 	.word	0x00403805
  40384c:	004037ed 	.word	0x004037ed

00403850 <lv_group_add_obj>:
    if(group == NULL) return;
  403850:	2800      	cmp	r0, #0
  403852:	d031      	beq.n	4038b8 <lv_group_add_obj+0x68>
{
  403854:	b570      	push	{r4, r5, r6, lr}
  403856:	4605      	mov	r5, r0
  403858:	460c      	mov	r4, r1
    _LV_LL_READ(group->obj_ll, obj_i) {
  40385a:	4606      	mov	r6, r0
  40385c:	4b17      	ldr	r3, [pc, #92]	; (4038bc <lv_group_add_obj+0x6c>)
  40385e:	4798      	blx	r3
  403860:	b138      	cbz	r0, 403872 <lv_group_add_obj+0x22>
        if((*obj_i) == obj) {
  403862:	6803      	ldr	r3, [r0, #0]
  403864:	42a3      	cmp	r3, r4
  403866:	d01c      	beq.n	4038a2 <lv_group_add_obj+0x52>
    _LV_LL_READ(group->obj_ll, obj_i) {
  403868:	4601      	mov	r1, r0
  40386a:	4630      	mov	r0, r6
  40386c:	4b14      	ldr	r3, [pc, #80]	; (4038c0 <lv_group_add_obj+0x70>)
  40386e:	4798      	blx	r3
  403870:	e7f6      	b.n	403860 <lv_group_add_obj+0x10>
    if(obj->group_p) {
  403872:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  403874:	b133      	cbz	r3, 403884 <lv_group_add_obj+0x34>
        if(lv_obj_is_focused(obj)) {
  403876:	4620      	mov	r0, r4
  403878:	4b12      	ldr	r3, [pc, #72]	; (4038c4 <lv_group_add_obj+0x74>)
  40387a:	4798      	blx	r3
  40387c:	b110      	cbz	r0, 403884 <lv_group_add_obj+0x34>
            lv_group_refocus(obj->group_p);
  40387e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  403880:	4b11      	ldr	r3, [pc, #68]	; (4038c8 <lv_group_add_obj+0x78>)
  403882:	4798      	blx	r3
    obj->group_p     = group;
  403884:	63a5      	str	r5, [r4, #56]	; 0x38
    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
  403886:	4628      	mov	r0, r5
  403888:	4b10      	ldr	r3, [pc, #64]	; (4038cc <lv_group_add_obj+0x7c>)
  40388a:	4798      	blx	r3
  40388c:	4606      	mov	r6, r0
    LV_ASSERT_MEM(next);
  40388e:	4b10      	ldr	r3, [pc, #64]	; (4038d0 <lv_group_add_obj+0x80>)
  403890:	4798      	blx	r3
  403892:	b138      	cbz	r0, 4038a4 <lv_group_add_obj+0x54>
    if(next == NULL) return;
  403894:	b12e      	cbz	r6, 4038a2 <lv_group_add_obj+0x52>
    *next = obj;
  403896:	6034      	str	r4, [r6, #0]
    if(_lv_ll_get_head(&group->obj_ll) == next) {
  403898:	4628      	mov	r0, r5
  40389a:	4b08      	ldr	r3, [pc, #32]	; (4038bc <lv_group_add_obj+0x6c>)
  40389c:	4798      	blx	r3
  40389e:	4286      	cmp	r6, r0
  4038a0:	d006      	beq.n	4038b0 <lv_group_add_obj+0x60>
  4038a2:	bd70      	pop	{r4, r5, r6, pc}
    LV_ASSERT_MEM(next);
  4038a4:	4632      	mov	r2, r6
  4038a6:	2300      	movs	r3, #0
  4038a8:	480a      	ldr	r0, [pc, #40]	; (4038d4 <lv_group_add_obj+0x84>)
  4038aa:	490b      	ldr	r1, [pc, #44]	; (4038d8 <lv_group_add_obj+0x88>)
  4038ac:	4788      	blx	r1
  4038ae:	e7fe      	b.n	4038ae <lv_group_add_obj+0x5e>
        lv_group_refocus(group);
  4038b0:	4628      	mov	r0, r5
  4038b2:	4b05      	ldr	r3, [pc, #20]	; (4038c8 <lv_group_add_obj+0x78>)
  4038b4:	4798      	blx	r3
  4038b6:	e7f4      	b.n	4038a2 <lv_group_add_obj+0x52>
  4038b8:	4770      	bx	lr
  4038ba:	bf00      	nop
  4038bc:	004162a5 	.word	0x004162a5
  4038c0:	004162b9 	.word	0x004162b9
  4038c4:	00408321 	.word	0x00408321
  4038c8:	0040381d 	.word	0x0040381d
  4038cc:	00416259 	.word	0x00416259
  4038d0:	00415f95 	.word	0x00415f95
  4038d4:	0042c714 	.word	0x0042c714
  4038d8:	00415fa1 	.word	0x00415fa1

004038dc <lv_group_remove_obj>:
{
  4038dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_group_t * g = obj->group_p;
  4038de:	6b87      	ldr	r7, [r0, #56]	; 0x38
    if(g == NULL) return;
  4038e0:	2f00      	cmp	r7, #0
  4038e2:	d043      	beq.n	40396c <lv_group_remove_obj+0x90>
  4038e4:	4605      	mov	r5, r0
    if(*g->obj_focus == obj) {
  4038e6:	68fb      	ldr	r3, [r7, #12]
  4038e8:	681b      	ldr	r3, [r3, #0]
  4038ea:	4298      	cmp	r0, r3
  4038ec:	d013      	beq.n	403916 <lv_group_remove_obj+0x3a>
    if(*g->obj_focus == obj) {
  4038ee:	68fb      	ldr	r3, [r7, #12]
  4038f0:	681b      	ldr	r3, [r3, #0]
  4038f2:	429d      	cmp	r5, r3
  4038f4:	d02d      	beq.n	403952 <lv_group_remove_obj+0x76>
    _LV_LL_READ(g->obj_ll, i) {
  4038f6:	463e      	mov	r6, r7
  4038f8:	4638      	mov	r0, r7
  4038fa:	4b1d      	ldr	r3, [pc, #116]	; (403970 <lv_group_remove_obj+0x94>)
  4038fc:	4798      	blx	r3
  4038fe:	4604      	mov	r4, r0
  403900:	2c00      	cmp	r4, #0
  403902:	d033      	beq.n	40396c <lv_group_remove_obj+0x90>
        if(*i == obj) {
  403904:	6823      	ldr	r3, [r4, #0]
  403906:	429d      	cmp	r5, r3
  403908:	d026      	beq.n	403958 <lv_group_remove_obj+0x7c>
    _LV_LL_READ(g->obj_ll, i) {
  40390a:	4621      	mov	r1, r4
  40390c:	4630      	mov	r0, r6
  40390e:	4b19      	ldr	r3, [pc, #100]	; (403974 <lv_group_remove_obj+0x98>)
  403910:	4798      	blx	r3
  403912:	4604      	mov	r4, r0
  403914:	e7f4      	b.n	403900 <lv_group_remove_obj+0x24>
        if(g->frozen) g->frozen = 0;
  403916:	7d3b      	ldrb	r3, [r7, #20]
  403918:	f013 0f01 	tst.w	r3, #1
  40391c:	d003      	beq.n	403926 <lv_group_remove_obj+0x4a>
  40391e:	7d3b      	ldrb	r3, [r7, #20]
  403920:	f36f 0300 	bfc	r3, #0, #1
  403924:	753b      	strb	r3, [r7, #20]
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
  403926:	4638      	mov	r0, r7
  403928:	4b11      	ldr	r3, [pc, #68]	; (403970 <lv_group_remove_obj+0x94>)
  40392a:	4798      	blx	r3
  40392c:	68fb      	ldr	r3, [r7, #12]
  40392e:	4283      	cmp	r3, r0
  403930:	d003      	beq.n	40393a <lv_group_remove_obj+0x5e>
            lv_group_refocus(g);
  403932:	4638      	mov	r0, r7
  403934:	4b10      	ldr	r3, [pc, #64]	; (403978 <lv_group_remove_obj+0x9c>)
  403936:	4798      	blx	r3
  403938:	e7d9      	b.n	4038ee <lv_group_remove_obj+0x12>
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
  40393a:	4638      	mov	r0, r7
  40393c:	4b0f      	ldr	r3, [pc, #60]	; (40397c <lv_group_remove_obj+0xa0>)
  40393e:	4798      	blx	r3
  403940:	68fb      	ldr	r3, [r7, #12]
  403942:	4283      	cmp	r3, r0
  403944:	d1f5      	bne.n	403932 <lv_group_remove_obj+0x56>
            (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
  403946:	6818      	ldr	r0, [r3, #0]
  403948:	69c3      	ldr	r3, [r0, #28]
  40394a:	2200      	movs	r2, #0
  40394c:	2117      	movs	r1, #23
  40394e:	4798      	blx	r3
  403950:	e7cd      	b.n	4038ee <lv_group_remove_obj+0x12>
        g->obj_focus = NULL;
  403952:	2300      	movs	r3, #0
  403954:	60fb      	str	r3, [r7, #12]
  403956:	e7ce      	b.n	4038f6 <lv_group_remove_obj+0x1a>
            _lv_ll_remove(&g->obj_ll, i);
  403958:	4621      	mov	r1, r4
  40395a:	4638      	mov	r0, r7
  40395c:	4b08      	ldr	r3, [pc, #32]	; (403980 <lv_group_remove_obj+0xa4>)
  40395e:	4798      	blx	r3
            lv_mem_free(i);
  403960:	4620      	mov	r0, r4
  403962:	4b08      	ldr	r3, [pc, #32]	; (403984 <lv_group_remove_obj+0xa8>)
  403964:	4798      	blx	r3
            obj->group_p = NULL;
  403966:	2300      	movs	r3, #0
  403968:	63ab      	str	r3, [r5, #56]	; 0x38
            break;
  40396a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40396c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40396e:	bf00      	nop
  403970:	004162a5 	.word	0x004162a5
  403974:	004162b9 	.word	0x004162b9
  403978:	0040381d 	.word	0x0040381d
  40397c:	004162af 	.word	0x004162af
  403980:	00416361 	.word	0x00416361
  403984:	0041679d 	.word	0x0041679d

00403988 <lv_group_get_focused>:
    if(!group) return NULL;
  403988:	b118      	cbz	r0, 403992 <lv_group_get_focused+0xa>
    if(group->obj_focus == NULL) return NULL;
  40398a:	68c3      	ldr	r3, [r0, #12]
  40398c:	b11b      	cbz	r3, 403996 <lv_group_get_focused+0xe>
    return *group->obj_focus;
  40398e:	6818      	ldr	r0, [r3, #0]
  403990:	4770      	bx	lr
    if(!group) return NULL;
  403992:	2000      	movs	r0, #0
  403994:	4770      	bx	lr
    if(group->obj_focus == NULL) return NULL;
  403996:	2000      	movs	r0, #0
}
  403998:	4770      	bx	lr
	...

0040399c <lv_group_send_data>:
{
  40399c:	b510      	push	{r4, lr}
  40399e:	b082      	sub	sp, #8
  4039a0:	9101      	str	r1, [sp, #4]
    lv_obj_t * act = lv_group_get_focused(group);
  4039a2:	4b0a      	ldr	r3, [pc, #40]	; (4039cc <lv_group_send_data+0x30>)
  4039a4:	4798      	blx	r3
    if(act == NULL) return LV_RES_OK;
  4039a6:	b170      	cbz	r0, 4039c6 <lv_group_send_data+0x2a>
  4039a8:	4604      	mov	r4, r0
    res = act->signal_cb(act, LV_SIGNAL_CONTROL, &c);
  4039aa:	69c3      	ldr	r3, [r0, #28]
  4039ac:	aa01      	add	r2, sp, #4
  4039ae:	2118      	movs	r1, #24
  4039b0:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
  4039b2:	2801      	cmp	r0, #1
  4039b4:	d001      	beq.n	4039ba <lv_group_send_data+0x1e>
}
  4039b6:	b002      	add	sp, #8
  4039b8:	bd10      	pop	{r4, pc}
    res = lv_event_send(act, LV_EVENT_KEY, &c);
  4039ba:	aa01      	add	r2, sp, #4
  4039bc:	210c      	movs	r1, #12
  4039be:	4620      	mov	r0, r4
  4039c0:	4b03      	ldr	r3, [pc, #12]	; (4039d0 <lv_group_send_data+0x34>)
  4039c2:	4798      	blx	r3
  4039c4:	e7f7      	b.n	4039b6 <lv_group_send_data+0x1a>
    if(act == NULL) return LV_RES_OK;
  4039c6:	2001      	movs	r0, #1
  4039c8:	e7f5      	b.n	4039b6 <lv_group_send_data+0x1a>
  4039ca:	bf00      	nop
  4039cc:	00403989 	.word	0x00403989
  4039d0:	004058d1 	.word	0x004058d1

004039d4 <lv_group_set_editing>:
    if(group == NULL) return;
  4039d4:	b1f8      	cbz	r0, 403a16 <lv_group_set_editing+0x42>
{
  4039d6:	b538      	push	{r3, r4, r5, lr}
  4039d8:	4604      	mov	r4, r0
    if(en_val == group->editing) return; /*Do not set the same mode again*/
  4039da:	7d03      	ldrb	r3, [r0, #20]
  4039dc:	f3c3 0340 	ubfx	r3, r3, #1, #1
  4039e0:	4299      	cmp	r1, r3
  4039e2:	d013      	beq.n	403a0c <lv_group_set_editing+0x38>
    group->editing     = en_val;
  4039e4:	7d03      	ldrb	r3, [r0, #20]
  4039e6:	f361 0341 	bfi	r3, r1, #1, #1
  4039ea:	7503      	strb	r3, [r0, #20]
    lv_obj_t * focused = lv_group_get_focused(group);
  4039ec:	4b0a      	ldr	r3, [pc, #40]	; (403a18 <lv_group_set_editing+0x44>)
  4039ee:	4798      	blx	r3
    if(focused) {
  4039f0:	4605      	mov	r5, r0
  4039f2:	b158      	cbz	r0, 403a0c <lv_group_set_editing+0x38>
        focused->signal_cb(focused, LV_SIGNAL_FOCUS, NULL); /*Focus again to properly leave/open edit/navigate mode*/
  4039f4:	69c3      	ldr	r3, [r0, #28]
  4039f6:	2200      	movs	r2, #0
  4039f8:	2116      	movs	r1, #22
  4039fa:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
  4039fc:	68e3      	ldr	r3, [r4, #12]
  4039fe:	2200      	movs	r2, #0
  403a00:	210d      	movs	r1, #13
  403a02:	6818      	ldr	r0, [r3, #0]
  403a04:	4b05      	ldr	r3, [pc, #20]	; (403a1c <lv_group_set_editing+0x48>)
  403a06:	4798      	blx	r3
        if(res != LV_RES_OK) return;
  403a08:	2801      	cmp	r0, #1
  403a0a:	d000      	beq.n	403a0e <lv_group_set_editing+0x3a>
  403a0c:	bd38      	pop	{r3, r4, r5, pc}
        lv_obj_invalidate(focused);
  403a0e:	4628      	mov	r0, r5
  403a10:	4b03      	ldr	r3, [pc, #12]	; (403a20 <lv_group_set_editing+0x4c>)
  403a12:	4798      	blx	r3
  403a14:	e7fa      	b.n	403a0c <lv_group_set_editing+0x38>
  403a16:	4770      	bx	lr
  403a18:	00403989 	.word	0x00403989
  403a1c:	004058d1 	.word	0x004058d1
  403a20:	00405f99 	.word	0x00405f99

00403a24 <lv_group_focus_obj>:
    if(obj == NULL) return;
  403a24:	2800      	cmp	r0, #0
  403a26:	d04e      	beq.n	403ac6 <lv_group_focus_obj+0xa2>
{
  403a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403a2a:	4605      	mov	r5, r0
    lv_group_t * g = obj->group_p;
  403a2c:	6b86      	ldr	r6, [r0, #56]	; 0x38
    if(g == NULL) return;
  403a2e:	b356      	cbz	r6, 403a86 <lv_group_focus_obj+0x62>
    if(g->frozen != 0) return;
  403a30:	7d33      	ldrb	r3, [r6, #20]
  403a32:	f013 0f01 	tst.w	r3, #1
  403a36:	d126      	bne.n	403a86 <lv_group_focus_obj+0x62>
    if(g->obj_focus != NULL && obj == *g->obj_focus) return;
  403a38:	68f3      	ldr	r3, [r6, #12]
  403a3a:	b113      	cbz	r3, 403a42 <lv_group_focus_obj+0x1e>
  403a3c:	681b      	ldr	r3, [r3, #0]
  403a3e:	4298      	cmp	r0, r3
  403a40:	d021      	beq.n	403a86 <lv_group_focus_obj+0x62>
    lv_group_set_editing(g, false);
  403a42:	2100      	movs	r1, #0
  403a44:	4630      	mov	r0, r6
  403a46:	4b20      	ldr	r3, [pc, #128]	; (403ac8 <lv_group_focus_obj+0xa4>)
  403a48:	4798      	blx	r3
    _LV_LL_READ(g->obj_ll, i) {
  403a4a:	4637      	mov	r7, r6
  403a4c:	4630      	mov	r0, r6
  403a4e:	4b1f      	ldr	r3, [pc, #124]	; (403acc <lv_group_focus_obj+0xa8>)
  403a50:	4798      	blx	r3
  403a52:	4604      	mov	r4, r0
  403a54:	b1bc      	cbz	r4, 403a86 <lv_group_focus_obj+0x62>
        if(*i == obj) {
  403a56:	6823      	ldr	r3, [r4, #0]
  403a58:	429d      	cmp	r5, r3
  403a5a:	d005      	beq.n	403a68 <lv_group_focus_obj+0x44>
    _LV_LL_READ(g->obj_ll, i) {
  403a5c:	4621      	mov	r1, r4
  403a5e:	4638      	mov	r0, r7
  403a60:	4b1b      	ldr	r3, [pc, #108]	; (403ad0 <lv_group_focus_obj+0xac>)
  403a62:	4798      	blx	r3
  403a64:	4604      	mov	r4, r0
  403a66:	e7f5      	b.n	403a54 <lv_group_focus_obj+0x30>
            if(g->obj_focus != NULL) {
  403a68:	68f3      	ldr	r3, [r6, #12]
  403a6a:	b18b      	cbz	r3, 403a90 <lv_group_focus_obj+0x6c>
                (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
  403a6c:	6818      	ldr	r0, [r3, #0]
  403a6e:	69c3      	ldr	r3, [r0, #28]
  403a70:	2200      	movs	r2, #0
  403a72:	2117      	movs	r1, #23
  403a74:	4798      	blx	r3
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, NULL);
  403a76:	68f3      	ldr	r3, [r6, #12]
  403a78:	2200      	movs	r2, #0
  403a7a:	210e      	movs	r1, #14
  403a7c:	6818      	ldr	r0, [r3, #0]
  403a7e:	4b15      	ldr	r3, [pc, #84]	; (403ad4 <lv_group_focus_obj+0xb0>)
  403a80:	4798      	blx	r3
                if(res != LV_RES_OK) return;
  403a82:	2801      	cmp	r0, #1
  403a84:	d000      	beq.n	403a88 <lv_group_focus_obj+0x64>
  403a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                lv_obj_invalidate(*g->obj_focus);
  403a88:	68f3      	ldr	r3, [r6, #12]
  403a8a:	6818      	ldr	r0, [r3, #0]
  403a8c:	4b12      	ldr	r3, [pc, #72]	; (403ad8 <lv_group_focus_obj+0xb4>)
  403a8e:	4798      	blx	r3
            g->obj_focus = i;
  403a90:	60f4      	str	r4, [r6, #12]
                (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_FOCUS, NULL);
  403a92:	6820      	ldr	r0, [r4, #0]
  403a94:	69c3      	ldr	r3, [r0, #28]
  403a96:	2200      	movs	r2, #0
  403a98:	2116      	movs	r1, #22
  403a9a:	4798      	blx	r3
                if(g->focus_cb) g->focus_cb(g);
  403a9c:	6933      	ldr	r3, [r6, #16]
  403a9e:	b10b      	cbz	r3, 403aa4 <lv_group_focus_obj+0x80>
  403aa0:	4630      	mov	r0, r6
  403aa2:	4798      	blx	r3
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_FOCUSED, NULL);
  403aa4:	68f3      	ldr	r3, [r6, #12]
  403aa6:	2200      	movs	r2, #0
  403aa8:	210d      	movs	r1, #13
  403aaa:	6818      	ldr	r0, [r3, #0]
  403aac:	4b09      	ldr	r3, [pc, #36]	; (403ad4 <lv_group_focus_obj+0xb0>)
  403aae:	4798      	blx	r3
                if(res != LV_RES_OK) return;
  403ab0:	2801      	cmp	r0, #1
  403ab2:	d1e8      	bne.n	403a86 <lv_group_focus_obj+0x62>
                lv_obj_invalidate(*g->obj_focus);
  403ab4:	68f3      	ldr	r3, [r6, #12]
  403ab6:	6818      	ldr	r0, [r3, #0]
  403ab8:	4b07      	ldr	r3, [pc, #28]	; (403ad8 <lv_group_focus_obj+0xb4>)
  403aba:	4798      	blx	r3
                obj_to_foreground(*g->obj_focus);
  403abc:	68f3      	ldr	r3, [r6, #12]
  403abe:	6818      	ldr	r0, [r3, #0]
  403ac0:	4b06      	ldr	r3, [pc, #24]	; (403adc <lv_group_focus_obj+0xb8>)
  403ac2:	4798      	blx	r3
  403ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403ac6:	4770      	bx	lr
  403ac8:	004039d5 	.word	0x004039d5
  403acc:	004162a5 	.word	0x004162a5
  403ad0:	004162b9 	.word	0x004162b9
  403ad4:	004058d1 	.word	0x004058d1
  403ad8:	00405f99 	.word	0x00405f99
  403adc:	004036c9 	.word	0x004036c9

00403ae0 <lv_group_get_editing>:
    if(!group) return false;
  403ae0:	b118      	cbz	r0, 403aea <lv_group_get_editing+0xa>
    return group->editing ? true : false;
  403ae2:	7d00      	ldrb	r0, [r0, #20]
  403ae4:	f3c0 0040 	ubfx	r0, r0, #1, #1
  403ae8:	4770      	bx	lr
    if(!group) return false;
  403aea:	2000      	movs	r0, #0
}
  403aec:	4770      	bx	lr
	...

00403af0 <indev_proc_reset_query_handler>:
 * Reset input device if a reset query has been sent to it
 * @param indev pointer to an input device
 */
static void indev_proc_reset_query_handler(lv_indev_t * indev)
{
    if(indev->proc.reset_query) {
  403af0:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  403af4:	f013 0f02 	tst.w	r3, #2
  403af8:	d022      	beq.n	403b40 <indev_proc_reset_query_handler+0x50>
{
  403afa:	b410      	push	{r4}
        indev->proc.types.pointer.act_obj           = NULL;
  403afc:	2300      	movs	r3, #0
  403afe:	6343      	str	r3, [r0, #52]	; 0x34
        indev->proc.types.pointer.last_obj          = NULL;
  403b00:	6383      	str	r3, [r0, #56]	; 0x38
        indev->proc.types.pointer.drag_limit_out    = 0;
  403b02:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
        indev->proc.types.pointer.drag_in_prog      = 0;
        indev->proc.long_pr_sent                    = 0;
  403b06:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
        indev->proc.pr_timestamp                    = 0;
  403b0a:	6483      	str	r3, [r0, #72]	; 0x48
        indev->proc.longpr_rep_timestamp            = 0;
  403b0c:	64c3      	str	r3, [r0, #76]	; 0x4c
        indev->proc.types.pointer.drag_sum.x        = 0;
  403b0e:	8583      	strh	r3, [r0, #44]	; 0x2c
        indev->proc.types.pointer.drag_sum.y        = 0;
  403b10:	85c3      	strh	r3, [r0, #46]	; 0x2e
        indev->proc.types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
  403b12:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  403b16:	2403      	movs	r4, #3
  403b18:	f364 0184 	bfi	r1, r4, #2, #3
  403b1c:	f880 1046 	strb.w	r1, [r0, #70]	; 0x46
        indev->proc.types.pointer.drag_throw_vect.x = 0;
  403b20:	8603      	strh	r3, [r0, #48]	; 0x30
        indev->proc.types.pointer.drag_throw_vect.y = 0;
  403b22:	8643      	strh	r3, [r0, #50]	; 0x32
        indev->proc.types.pointer.gesture_sum.x     = 0;
  403b24:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
        indev->proc.types.pointer.gesture_sum.y     = 0;
  403b28:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
        indev->proc.reset_query                     = 0;
  403b2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
  403b30:	f363 0241 	bfi	r2, r3, #1, #1
  403b34:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
        indev_obj_act                               = NULL;
  403b38:	4a02      	ldr	r2, [pc, #8]	; (403b44 <indev_proc_reset_query_handler+0x54>)
  403b3a:	6013      	str	r3, [r2, #0]
    }
}
  403b3c:	f85d 4b04 	ldr.w	r4, [sp], #4
  403b40:	4770      	bx	lr
  403b42:	bf00      	nop
  403b44:	2040c41c 	.word	0x2040c41c

00403b48 <indev_reset_check>:
 * @param proc pointer to an input device 'proc'
 * @return true if indev query should be immediately truncated.
 */
static bool indev_reset_check(lv_indev_proc_t * proc)
{
    if(proc->reset_query) {
  403b48:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
  403b4c:	f010 0002 	ands.w	r0, r0, #2
  403b50:	d002      	beq.n	403b58 <indev_reset_check+0x10>
        indev_obj_act = NULL;
  403b52:	2200      	movs	r2, #0
  403b54:	4b02      	ldr	r3, [pc, #8]	; (403b60 <indev_reset_check+0x18>)
  403b56:	601a      	str	r2, [r3, #0]
    }

    return proc->reset_query ? true : false;
}
  403b58:	3000      	adds	r0, #0
  403b5a:	bf18      	it	ne
  403b5c:	2001      	movne	r0, #1
  403b5e:	4770      	bx	lr
  403b60:	2040c41c 	.word	0x2040c41c

00403b64 <get_dragged_obj>:
{
  403b64:	b510      	push	{r4, lr}
    if(obj == NULL) return NULL;
  403b66:	4604      	mov	r4, r0
  403b68:	b920      	cbnz	r0, 403b74 <get_dragged_obj+0x10>
  403b6a:	e009      	b.n	403b80 <get_dragged_obj+0x1c>
        drag_obj = lv_obj_get_parent(drag_obj);
  403b6c:	4620      	mov	r0, r4
  403b6e:	4b05      	ldr	r3, [pc, #20]	; (403b84 <get_dragged_obj+0x20>)
  403b70:	4798      	blx	r3
  403b72:	4604      	mov	r4, r0
    while(lv_obj_get_drag_parent(drag_obj) != false && drag_obj != NULL) {
  403b74:	4620      	mov	r0, r4
  403b76:	4b04      	ldr	r3, [pc, #16]	; (403b88 <get_dragged_obj+0x24>)
  403b78:	4798      	blx	r3
  403b7a:	b108      	cbz	r0, 403b80 <get_dragged_obj+0x1c>
  403b7c:	2c00      	cmp	r4, #0
  403b7e:	d1f5      	bne.n	403b6c <get_dragged_obj+0x8>
}
  403b80:	4620      	mov	r0, r4
  403b82:	bd10      	pop	{r4, pc}
  403b84:	004059ed 	.word	0x004059ed
  403b88:	0040680d 	.word	0x0040680d

00403b8c <indev_drag_throw>:
    if(proc->types.pointer.drag_in_prog == 0) return;
  403b8c:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
  403b90:	f013 0f02 	tst.w	r3, #2
  403b94:	d100      	bne.n	403b98 <indev_drag_throw+0xc>
  403b96:	4770      	bx	lr
{
  403b98:	b5f0      	push	{r4, r5, r6, r7, lr}
  403b9a:	b085      	sub	sp, #20
  403b9c:	4604      	mov	r4, r0
    lv_obj_t * drag_obj = get_dragged_obj(proc->types.pointer.last_obj);
  403b9e:	69c0      	ldr	r0, [r0, #28]
  403ba0:	4b64      	ldr	r3, [pc, #400]	; (403d34 <indev_drag_throw+0x1a8>)
  403ba2:	4798      	blx	r3
    if(drag_obj == NULL) return;
  403ba4:	4605      	mov	r5, r0
  403ba6:	b190      	cbz	r0, 403bce <indev_drag_throw+0x42>
    if(lv_obj_get_drag_throw(drag_obj) == false) {
  403ba8:	4b63      	ldr	r3, [pc, #396]	; (403d38 <indev_drag_throw+0x1ac>)
  403baa:	4798      	blx	r3
  403bac:	b9b8      	cbnz	r0, 403bde <indev_drag_throw+0x52>
        proc->types.pointer.drag_in_prog = 0;
  403bae:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403bb2:	f36f 0341 	bfc	r3, #1, #1
  403bb6:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
  403bba:	69eb      	ldr	r3, [r5, #28]
  403bbc:	4a5f      	ldr	r2, [pc, #380]	; (403d3c <indev_drag_throw+0x1b0>)
  403bbe:	6812      	ldr	r2, [r2, #0]
  403bc0:	2113      	movs	r1, #19
  403bc2:	4628      	mov	r0, r5
  403bc4:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  403bc6:	4620      	mov	r0, r4
  403bc8:	4b5d      	ldr	r3, [pc, #372]	; (403d40 <indev_drag_throw+0x1b4>)
  403bca:	4798      	blx	r3
  403bcc:	b108      	cbz	r0, 403bd2 <indev_drag_throw+0x46>
}
  403bce:	b005      	add	sp, #20
  403bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
  403bd2:	2200      	movs	r2, #0
  403bd4:	2109      	movs	r1, #9
  403bd6:	4628      	mov	r0, r5
  403bd8:	4b5a      	ldr	r3, [pc, #360]	; (403d44 <indev_drag_throw+0x1b8>)
  403bda:	4798      	blx	r3
        return;
  403bdc:	e7f7      	b.n	403bce <indev_drag_throw+0x42>
    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
  403bde:	4628      	mov	r0, r5
  403be0:	4b59      	ldr	r3, [pc, #356]	; (403d48 <indev_drag_throw+0x1bc>)
  403be2:	4798      	blx	r3
  403be4:	4606      	mov	r6, r0
        proc->types.pointer.drag_throw_vect.x * (100 - indev_act->driver.drag_throw) / 100;
  403be6:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
  403bea:	4a54      	ldr	r2, [pc, #336]	; (403d3c <indev_drag_throw+0x1b0>)
  403bec:	6812      	ldr	r2, [r2, #0]
  403bee:	7d51      	ldrb	r1, [r2, #21]
  403bf0:	f1c1 0164 	rsb	r1, r1, #100	; 0x64
  403bf4:	fb01 f103 	mul.w	r1, r1, r3
  403bf8:	4854      	ldr	r0, [pc, #336]	; (403d4c <indev_drag_throw+0x1c0>)
  403bfa:	fb80 7301 	smull	r7, r3, r0, r1
  403bfe:	17c9      	asrs	r1, r1, #31
  403c00:	ebc1 1163 	rsb	r1, r1, r3, asr #5
    proc->types.pointer.drag_throw_vect.x =
  403c04:	82a1      	strh	r1, [r4, #20]
        proc->types.pointer.drag_throw_vect.y * (100 - indev_act->driver.drag_throw) / 100;
  403c06:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
  403c0a:	7d53      	ldrb	r3, [r2, #21]
  403c0c:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
  403c10:	fb03 f301 	mul.w	r3, r3, r1
  403c14:	fb80 1003 	smull	r1, r0, r0, r3
  403c18:	17db      	asrs	r3, r3, #31
  403c1a:	ebc3 1360 	rsb	r3, r3, r0, asr #5
    proc->types.pointer.drag_throw_vect.y =
  403c1e:	82e3      	strh	r3, [r4, #22]
    if(proc->types.pointer.drag_throw_vect.x != 0 || proc->types.pointer.drag_throw_vect.y != 0) {
  403c20:	6963      	ldr	r3, [r4, #20]
  403c22:	2b00      	cmp	r3, #0
  403c24:	d06c      	beq.n	403d00 <indev_drag_throw+0x174>
        lv_obj_get_coords(drag_obj, &coords_ori);
  403c26:	4669      	mov	r1, sp
  403c28:	4628      	mov	r0, r5
  403c2a:	4b49      	ldr	r3, [pc, #292]	; (403d50 <indev_drag_throw+0x1c4>)
  403c2c:	4798      	blx	r3
        lv_coord_t act_x = lv_obj_get_x(drag_obj) + proc->types.pointer.drag_throw_vect.x;
  403c2e:	4628      	mov	r0, r5
  403c30:	4b48      	ldr	r3, [pc, #288]	; (403d54 <indev_drag_throw+0x1c8>)
  403c32:	4798      	blx	r3
  403c34:	8aa3      	ldrh	r3, [r4, #20]
  403c36:	fa13 f080 	uxtah	r0, r3, r0
  403c3a:	b207      	sxth	r7, r0
        lv_coord_t act_y = lv_obj_get_y(drag_obj) + proc->types.pointer.drag_throw_vect.y;
  403c3c:	4628      	mov	r0, r5
  403c3e:	4b46      	ldr	r3, [pc, #280]	; (403d58 <indev_drag_throw+0x1cc>)
  403c40:	4798      	blx	r3
  403c42:	8ae2      	ldrh	r2, [r4, #22]
  403c44:	fa12 f280 	uxtah	r2, r2, r0
  403c48:	b212      	sxth	r2, r2
        if(allowed_dirs == LV_DRAG_DIR_BOTH) lv_obj_set_pos(drag_obj, act_x, act_y);
  403c4a:	2e03      	cmp	r6, #3
  403c4c:	d03c      	beq.n	403cc8 <indev_drag_throw+0x13c>
        else if(allowed_dirs == LV_DRAG_DIR_HOR) lv_obj_set_x(drag_obj, act_x);
  403c4e:	2e01      	cmp	r6, #1
  403c50:	d03f      	beq.n	403cd2 <indev_drag_throw+0x146>
        else if(allowed_dirs == LV_DRAG_DIR_VER) lv_obj_set_y(drag_obj, act_y);
  403c52:	2e02      	cmp	r6, #2
  403c54:	d042      	beq.n	403cdc <indev_drag_throw+0x150>
        else if(allowed_dirs == LV_DRAG_DIR_ONE) {
  403c56:	2e04      	cmp	r6, #4
  403c58:	d045      	beq.n	403ce6 <indev_drag_throw+0x15a>
        lv_obj_get_coords(drag_obj, &coord_new);
  403c5a:	a902      	add	r1, sp, #8
  403c5c:	4628      	mov	r0, r5
  403c5e:	4b3c      	ldr	r3, [pc, #240]	; (403d50 <indev_drag_throw+0x1c4>)
  403c60:	4798      	blx	r3
        if((coords_ori.x1 == coord_new.x1 || proc->types.pointer.drag_throw_vect.x == 0) &&
  403c62:	f9bd 2000 	ldrsh.w	r2, [sp]
  403c66:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
  403c6a:	429a      	cmp	r2, r3
  403c6c:	d003      	beq.n	403c76 <indev_drag_throw+0xea>
  403c6e:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
  403c72:	2b00      	cmp	r3, #0
  403c74:	d1ab      	bne.n	403bce <indev_drag_throw+0x42>
           (coords_ori.y1 == coord_new.y1 || proc->types.pointer.drag_throw_vect.y == 0)) {
  403c76:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
  403c7a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
        if((coords_ori.x1 == coord_new.x1 || proc->types.pointer.drag_throw_vect.x == 0) &&
  403c7e:	429a      	cmp	r2, r3
  403c80:	d003      	beq.n	403c8a <indev_drag_throw+0xfe>
           (coords_ori.y1 == coord_new.y1 || proc->types.pointer.drag_throw_vect.y == 0)) {
  403c82:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
  403c86:	2b00      	cmp	r3, #0
  403c88:	d1a1      	bne.n	403bce <indev_drag_throw+0x42>
            proc->types.pointer.drag_in_prog      = 0;
  403c8a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403c8e:	f36f 0341 	bfc	r3, #1, #1
  403c92:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
            proc->types.pointer.vect.x            = 0;
  403c96:	2300      	movs	r3, #0
  403c98:	81a3      	strh	r3, [r4, #12]
            proc->types.pointer.vect.y            = 0;
  403c9a:	81e3      	strh	r3, [r4, #14]
            proc->types.pointer.drag_throw_vect.x = 0;
  403c9c:	82a3      	strh	r3, [r4, #20]
            proc->types.pointer.drag_throw_vect.y = 0;
  403c9e:	82e3      	strh	r3, [r4, #22]
            drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
  403ca0:	69eb      	ldr	r3, [r5, #28]
  403ca2:	4a26      	ldr	r2, [pc, #152]	; (403d3c <indev_drag_throw+0x1b0>)
  403ca4:	6812      	ldr	r2, [r2, #0]
  403ca6:	2113      	movs	r1, #19
  403ca8:	4628      	mov	r0, r5
  403caa:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  403cac:	4620      	mov	r0, r4
  403cae:	4b24      	ldr	r3, [pc, #144]	; (403d40 <indev_drag_throw+0x1b4>)
  403cb0:	4798      	blx	r3
  403cb2:	2800      	cmp	r0, #0
  403cb4:	d18b      	bne.n	403bce <indev_drag_throw+0x42>
            lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
  403cb6:	2200      	movs	r2, #0
  403cb8:	2109      	movs	r1, #9
  403cba:	4628      	mov	r0, r5
  403cbc:	4b21      	ldr	r3, [pc, #132]	; (403d44 <indev_drag_throw+0x1b8>)
  403cbe:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  403cc0:	4620      	mov	r0, r4
  403cc2:	4b1f      	ldr	r3, [pc, #124]	; (403d40 <indev_drag_throw+0x1b4>)
  403cc4:	4798      	blx	r3
  403cc6:	e782      	b.n	403bce <indev_drag_throw+0x42>
        if(allowed_dirs == LV_DRAG_DIR_BOTH) lv_obj_set_pos(drag_obj, act_x, act_y);
  403cc8:	4639      	mov	r1, r7
  403cca:	4628      	mov	r0, r5
  403ccc:	4b23      	ldr	r3, [pc, #140]	; (403d5c <indev_drag_throw+0x1d0>)
  403cce:	4798      	blx	r3
  403cd0:	e7c3      	b.n	403c5a <indev_drag_throw+0xce>
        else if(allowed_dirs == LV_DRAG_DIR_HOR) lv_obj_set_x(drag_obj, act_x);
  403cd2:	4639      	mov	r1, r7
  403cd4:	4628      	mov	r0, r5
  403cd6:	4b22      	ldr	r3, [pc, #136]	; (403d60 <indev_drag_throw+0x1d4>)
  403cd8:	4798      	blx	r3
  403cda:	e7be      	b.n	403c5a <indev_drag_throw+0xce>
        else if(allowed_dirs == LV_DRAG_DIR_VER) lv_obj_set_y(drag_obj, act_y);
  403cdc:	4611      	mov	r1, r2
  403cde:	4628      	mov	r0, r5
  403ce0:	4b20      	ldr	r3, [pc, #128]	; (403d64 <indev_drag_throw+0x1d8>)
  403ce2:	4798      	blx	r3
  403ce4:	e7b9      	b.n	403c5a <indev_drag_throw+0xce>
            if(proc->types.pointer.drag_sum.x) lv_obj_set_x(drag_obj, act_x);
  403ce6:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
  403cea:	b123      	cbz	r3, 403cf6 <indev_drag_throw+0x16a>
  403cec:	4639      	mov	r1, r7
  403cee:	4628      	mov	r0, r5
  403cf0:	4b1b      	ldr	r3, [pc, #108]	; (403d60 <indev_drag_throw+0x1d4>)
  403cf2:	4798      	blx	r3
  403cf4:	e7b1      	b.n	403c5a <indev_drag_throw+0xce>
            else lv_obj_set_y(drag_obj, act_y);
  403cf6:	4611      	mov	r1, r2
  403cf8:	4628      	mov	r0, r5
  403cfa:	4b1a      	ldr	r3, [pc, #104]	; (403d64 <indev_drag_throw+0x1d8>)
  403cfc:	4798      	blx	r3
  403cfe:	e7ac      	b.n	403c5a <indev_drag_throw+0xce>
        proc->types.pointer.drag_in_prog = 0;
  403d00:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403d04:	f36f 0341 	bfc	r3, #1, #1
  403d08:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
  403d0c:	69eb      	ldr	r3, [r5, #28]
  403d0e:	2113      	movs	r1, #19
  403d10:	4628      	mov	r0, r5
  403d12:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  403d14:	4620      	mov	r0, r4
  403d16:	4b0a      	ldr	r3, [pc, #40]	; (403d40 <indev_drag_throw+0x1b4>)
  403d18:	4798      	blx	r3
  403d1a:	2800      	cmp	r0, #0
  403d1c:	f47f af57 	bne.w	403bce <indev_drag_throw+0x42>
        lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
  403d20:	2200      	movs	r2, #0
  403d22:	2109      	movs	r1, #9
  403d24:	4628      	mov	r0, r5
  403d26:	4b07      	ldr	r3, [pc, #28]	; (403d44 <indev_drag_throw+0x1b8>)
  403d28:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  403d2a:	4620      	mov	r0, r4
  403d2c:	4b04      	ldr	r3, [pc, #16]	; (403d40 <indev_drag_throw+0x1b4>)
  403d2e:	4798      	blx	r3
  403d30:	e74d      	b.n	403bce <indev_drag_throw+0x42>
  403d32:	bf00      	nop
  403d34:	00403b65 	.word	0x00403b65
  403d38:	004067e1 	.word	0x004067e1
  403d3c:	2040c418 	.word	0x2040c418
  403d40:	00403b49 	.word	0x00403b49
  403d44:	004058d1 	.word	0x004058d1
  403d48:	004067b5 	.word	0x004067b5
  403d4c:	51eb851f 	.word	0x51eb851f
  403d50:	00405b01 	.word	0x00405b01
  403d54:	00405b41 	.word	0x00405b41
  403d58:	00405b81 	.word	0x00405b81
  403d5c:	0040607d 	.word	0x0040607d
  403d60:	00406135 	.word	0x00406135
  403d64:	00406175 	.word	0x00406175

00403d68 <indev_proc_release>:
{
  403d68:	b538      	push	{r3, r4, r5, lr}
  403d6a:	4604      	mov	r4, r0
    if(proc->wait_until_release != 0) {
  403d6c:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
  403d70:	f013 0f08 	tst.w	r3, #8
  403d74:	d00a      	beq.n	403d8c <indev_proc_release+0x24>
        proc->types.pointer.act_obj  = NULL;
  403d76:	2300      	movs	r3, #0
  403d78:	6183      	str	r3, [r0, #24]
        proc->types.pointer.last_obj = NULL;
  403d7a:	61c3      	str	r3, [r0, #28]
        proc->pr_timestamp           = 0;
  403d7c:	62c3      	str	r3, [r0, #44]	; 0x2c
        proc->longpr_rep_timestamp   = 0;
  403d7e:	6303      	str	r3, [r0, #48]	; 0x30
        proc->wait_until_release     = 0;
  403d80:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
  403d84:	f363 02c3 	bfi	r2, r3, #3, #1
  403d88:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    indev_obj_act = proc->types.pointer.act_obj;
  403d8c:	69a0      	ldr	r0, [r4, #24]
  403d8e:	4b59      	ldr	r3, [pc, #356]	; (403ef4 <indev_proc_release+0x18c>)
  403d90:	6018      	str	r0, [r3, #0]
    if(indev_obj_act) {
  403d92:	2800      	cmp	r0, #0
  403d94:	f000 8093 	beq.w	403ebe <indev_proc_release+0x156>
        if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_PRESS_LOST)) {
  403d98:	2110      	movs	r1, #16
  403d9a:	4b57      	ldr	r3, [pc, #348]	; (403ef8 <indev_proc_release+0x190>)
  403d9c:	4798      	blx	r3
  403d9e:	2800      	cmp	r0, #0
  403da0:	d038      	beq.n	403e14 <indev_proc_release+0xac>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, indev_act);
  403da2:	4b54      	ldr	r3, [pc, #336]	; (403ef4 <indev_proc_release+0x18c>)
  403da4:	6818      	ldr	r0, [r3, #0]
  403da6:	69c3      	ldr	r3, [r0, #28]
  403da8:	4a54      	ldr	r2, [pc, #336]	; (403efc <indev_proc_release+0x194>)
  403daa:	6812      	ldr	r2, [r2, #0]
  403dac:	210e      	movs	r1, #14
  403dae:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  403db0:	4620      	mov	r0, r4
  403db2:	4b53      	ldr	r3, [pc, #332]	; (403f00 <indev_proc_release+0x198>)
  403db4:	4798      	blx	r3
  403db6:	2800      	cmp	r0, #0
  403db8:	f040 8088 	bne.w	403ecc <indev_proc_release+0x164>
            if(proc->types.pointer.drag_in_prog == 0) {
  403dbc:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403dc0:	f013 0f02 	tst.w	r3, #2
  403dc4:	d11a      	bne.n	403dfc <indev_proc_release+0x94>
                if(proc->long_pr_sent == 0) {
  403dc6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  403dca:	f013 0f01 	tst.w	r3, #1
  403dce:	d10a      	bne.n	403de6 <indev_proc_release+0x7e>
                    lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  403dd0:	2200      	movs	r2, #0
  403dd2:	2103      	movs	r1, #3
  403dd4:	4b47      	ldr	r3, [pc, #284]	; (403ef4 <indev_proc_release+0x18c>)
  403dd6:	6818      	ldr	r0, [r3, #0]
  403dd8:	4b4a      	ldr	r3, [pc, #296]	; (403f04 <indev_proc_release+0x19c>)
  403dda:	4798      	blx	r3
                    if(indev_reset_check(proc)) return;
  403ddc:	4620      	mov	r0, r4
  403dde:	4b48      	ldr	r3, [pc, #288]	; (403f00 <indev_proc_release+0x198>)
  403de0:	4798      	blx	r3
  403de2:	2800      	cmp	r0, #0
  403de4:	d172      	bne.n	403ecc <indev_proc_release+0x164>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
  403de6:	2200      	movs	r2, #0
  403de8:	2106      	movs	r1, #6
  403dea:	4b42      	ldr	r3, [pc, #264]	; (403ef4 <indev_proc_release+0x18c>)
  403dec:	6818      	ldr	r0, [r3, #0]
  403dee:	4b45      	ldr	r3, [pc, #276]	; (403f04 <indev_proc_release+0x19c>)
  403df0:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403df2:	4620      	mov	r0, r4
  403df4:	4b42      	ldr	r3, [pc, #264]	; (403f00 <indev_proc_release+0x198>)
  403df6:	4798      	blx	r3
  403df8:	2800      	cmp	r0, #0
  403dfa:	d167      	bne.n	403ecc <indev_proc_release+0x164>
            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
  403dfc:	2200      	movs	r2, #0
  403dfe:	2107      	movs	r1, #7
  403e00:	4b3c      	ldr	r3, [pc, #240]	; (403ef4 <indev_proc_release+0x18c>)
  403e02:	6818      	ldr	r0, [r3, #0]
  403e04:	4b3f      	ldr	r3, [pc, #252]	; (403f04 <indev_proc_release+0x19c>)
  403e06:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  403e08:	4620      	mov	r0, r4
  403e0a:	4b3d      	ldr	r3, [pc, #244]	; (403f00 <indev_proc_release+0x198>)
  403e0c:	4798      	blx	r3
  403e0e:	2800      	cmp	r0, #0
  403e10:	d030      	beq.n	403e74 <indev_proc_release+0x10c>
  403e12:	bd38      	pop	{r3, r4, r5, pc}
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, indev_act);
  403e14:	4b37      	ldr	r3, [pc, #220]	; (403ef4 <indev_proc_release+0x18c>)
  403e16:	6818      	ldr	r0, [r3, #0]
  403e18:	69c3      	ldr	r3, [r0, #28]
  403e1a:	4a38      	ldr	r2, [pc, #224]	; (403efc <indev_proc_release+0x194>)
  403e1c:	6812      	ldr	r2, [r2, #0]
  403e1e:	210e      	movs	r1, #14
  403e20:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  403e22:	4620      	mov	r0, r4
  403e24:	4b36      	ldr	r3, [pc, #216]	; (403f00 <indev_proc_release+0x198>)
  403e26:	4798      	blx	r3
  403e28:	2800      	cmp	r0, #0
  403e2a:	d14f      	bne.n	403ecc <indev_proc_release+0x164>
            if(proc->long_pr_sent == 0 && proc->types.pointer.drag_in_prog == 0) {
  403e2c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  403e30:	f013 0f01 	tst.w	r3, #1
  403e34:	d104      	bne.n	403e40 <indev_proc_release+0xd8>
  403e36:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403e3a:	f013 0f02 	tst.w	r3, #2
  403e3e:	d046      	beq.n	403ece <indev_proc_release+0x166>
            if(proc->types.pointer.drag_in_prog == 0) {
  403e40:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403e44:	f013 0f02 	tst.w	r3, #2
  403e48:	d10a      	bne.n	403e60 <indev_proc_release+0xf8>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
  403e4a:	2200      	movs	r2, #0
  403e4c:	2106      	movs	r1, #6
  403e4e:	4b29      	ldr	r3, [pc, #164]	; (403ef4 <indev_proc_release+0x18c>)
  403e50:	6818      	ldr	r0, [r3, #0]
  403e52:	4b2c      	ldr	r3, [pc, #176]	; (403f04 <indev_proc_release+0x19c>)
  403e54:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403e56:	4620      	mov	r0, r4
  403e58:	4b29      	ldr	r3, [pc, #164]	; (403f00 <indev_proc_release+0x198>)
  403e5a:	4798      	blx	r3
  403e5c:	2800      	cmp	r0, #0
  403e5e:	d135      	bne.n	403ecc <indev_proc_release+0x164>
            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
  403e60:	2200      	movs	r2, #0
  403e62:	2107      	movs	r1, #7
  403e64:	4b23      	ldr	r3, [pc, #140]	; (403ef4 <indev_proc_release+0x18c>)
  403e66:	6818      	ldr	r0, [r3, #0]
  403e68:	4b26      	ldr	r3, [pc, #152]	; (403f04 <indev_proc_release+0x19c>)
  403e6a:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  403e6c:	4620      	mov	r0, r4
  403e6e:	4b24      	ldr	r3, [pc, #144]	; (403f00 <indev_proc_release+0x198>)
  403e70:	4798      	blx	r3
  403e72:	bb58      	cbnz	r0, 403ecc <indev_proc_release+0x164>
        lv_obj_t * drag_obj = get_dragged_obj(indev_obj_act);
  403e74:	4b1f      	ldr	r3, [pc, #124]	; (403ef4 <indev_proc_release+0x18c>)
  403e76:	6818      	ldr	r0, [r3, #0]
  403e78:	4b23      	ldr	r3, [pc, #140]	; (403f08 <indev_proc_release+0x1a0>)
  403e7a:	4798      	blx	r3
        if(drag_obj) {
  403e7c:	4605      	mov	r5, r0
  403e7e:	b1d0      	cbz	r0, 403eb6 <indev_proc_release+0x14e>
            if(lv_obj_get_drag_throw(drag_obj) && proc->types.pointer.drag_in_prog) {
  403e80:	4b22      	ldr	r3, [pc, #136]	; (403f0c <indev_proc_release+0x1a4>)
  403e82:	4798      	blx	r3
  403e84:	b1b8      	cbz	r0, 403eb6 <indev_proc_release+0x14e>
  403e86:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403e8a:	f013 0f02 	tst.w	r3, #2
  403e8e:	d012      	beq.n	403eb6 <indev_proc_release+0x14e>
                if(drag_obj->signal_cb) drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_THROW_BEGIN, NULL);
  403e90:	69eb      	ldr	r3, [r5, #28]
  403e92:	b11b      	cbz	r3, 403e9c <indev_proc_release+0x134>
  403e94:	2200      	movs	r2, #0
  403e96:	2112      	movs	r1, #18
  403e98:	4628      	mov	r0, r5
  403e9a:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403e9c:	4620      	mov	r0, r4
  403e9e:	4b18      	ldr	r3, [pc, #96]	; (403f00 <indev_proc_release+0x198>)
  403ea0:	4798      	blx	r3
  403ea2:	b998      	cbnz	r0, 403ecc <indev_proc_release+0x164>
                lv_event_send(drag_obj, LV_EVENT_DRAG_THROW_BEGIN, NULL);
  403ea4:	2200      	movs	r2, #0
  403ea6:	210a      	movs	r1, #10
  403ea8:	4628      	mov	r0, r5
  403eaa:	4b16      	ldr	r3, [pc, #88]	; (403f04 <indev_proc_release+0x19c>)
  403eac:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403eae:	4620      	mov	r0, r4
  403eb0:	4b13      	ldr	r3, [pc, #76]	; (403f00 <indev_proc_release+0x198>)
  403eb2:	4798      	blx	r3
  403eb4:	b950      	cbnz	r0, 403ecc <indev_proc_release+0x164>
        proc->types.pointer.act_obj = NULL;
  403eb6:	2300      	movs	r3, #0
  403eb8:	61a3      	str	r3, [r4, #24]
        proc->pr_timestamp          = 0;
  403eba:	62e3      	str	r3, [r4, #44]	; 0x2c
        proc->longpr_rep_timestamp  = 0;
  403ebc:	6323      	str	r3, [r4, #48]	; 0x30
    if(proc->types.pointer.last_obj != NULL && proc->reset_query == 0) {
  403ebe:	69e3      	ldr	r3, [r4, #28]
  403ec0:	b123      	cbz	r3, 403ecc <indev_proc_release+0x164>
  403ec2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  403ec6:	f013 0f02 	tst.w	r3, #2
  403eca:	d00c      	beq.n	403ee6 <indev_proc_release+0x17e>
  403ecc:	bd38      	pop	{r3, r4, r5, pc}
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  403ece:	2200      	movs	r2, #0
  403ed0:	2103      	movs	r1, #3
  403ed2:	4b08      	ldr	r3, [pc, #32]	; (403ef4 <indev_proc_release+0x18c>)
  403ed4:	6818      	ldr	r0, [r3, #0]
  403ed6:	4b0b      	ldr	r3, [pc, #44]	; (403f04 <indev_proc_release+0x19c>)
  403ed8:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403eda:	4620      	mov	r0, r4
  403edc:	4b08      	ldr	r3, [pc, #32]	; (403f00 <indev_proc_release+0x198>)
  403ede:	4798      	blx	r3
  403ee0:	2800      	cmp	r0, #0
  403ee2:	d0ad      	beq.n	403e40 <indev_proc_release+0xd8>
  403ee4:	e7f2      	b.n	403ecc <indev_proc_release+0x164>
        indev_drag_throw(proc);
  403ee6:	4620      	mov	r0, r4
  403ee8:	4b09      	ldr	r3, [pc, #36]	; (403f10 <indev_proc_release+0x1a8>)
  403eea:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  403eec:	4620      	mov	r0, r4
  403eee:	4b04      	ldr	r3, [pc, #16]	; (403f00 <indev_proc_release+0x198>)
  403ef0:	4798      	blx	r3
  403ef2:	e7eb      	b.n	403ecc <indev_proc_release+0x164>
  403ef4:	2040c41c 	.word	0x2040c41c
  403ef8:	00406ded 	.word	0x00406ded
  403efc:	2040c418 	.word	0x2040c418
  403f00:	00403b49 	.word	0x00403b49
  403f04:	004058d1 	.word	0x004058d1
  403f08:	00403b65 	.word	0x00403b65
  403f0c:	004067e1 	.word	0x004067e1
  403f10:	00403b8d 	.word	0x00403b8d

00403f14 <indev_click_focus>:
{
  403f14:	b570      	push	{r4, r5, r6, lr}
  403f16:	4604      	mov	r4, r0
    lv_obj_t * obj_to_focus = lv_obj_get_focused_obj(indev_obj_act);
  403f18:	4d58      	ldr	r5, [pc, #352]	; (40407c <indev_click_focus+0x168>)
  403f1a:	6828      	ldr	r0, [r5, #0]
  403f1c:	4b58      	ldr	r3, [pc, #352]	; (404080 <indev_click_focus+0x16c>)
  403f1e:	4798      	blx	r3
  403f20:	4606      	mov	r6, r0
    if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_CLICK_FOCUS) == false &&
  403f22:	2120      	movs	r1, #32
  403f24:	6828      	ldr	r0, [r5, #0]
  403f26:	4b57      	ldr	r3, [pc, #348]	; (404084 <indev_click_focus+0x170>)
  403f28:	4798      	blx	r3
  403f2a:	b9e8      	cbnz	r0, 403f68 <indev_click_focus+0x54>
       proc->types.pointer.last_pressed != obj_to_focus) {
  403f2c:	6a23      	ldr	r3, [r4, #32]
    if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_CLICK_FOCUS) == false &&
  403f2e:	429e      	cmp	r6, r3
  403f30:	d01a      	beq.n	403f68 <indev_click_focus+0x54>
        lv_group_t * g_act = lv_obj_get_group(obj_to_focus);
  403f32:	4630      	mov	r0, r6
  403f34:	4b54      	ldr	r3, [pc, #336]	; (404088 <indev_click_focus+0x174>)
  403f36:	4798      	blx	r3
  403f38:	4605      	mov	r5, r0
        lv_group_t * g_prev = proc->types.pointer.last_pressed ? lv_obj_get_group(proc->types.pointer.last_pressed) : NULL;
  403f3a:	6a20      	ldr	r0, [r4, #32]
  403f3c:	b1a8      	cbz	r0, 403f6a <indev_click_focus+0x56>
  403f3e:	4b52      	ldr	r3, [pc, #328]	; (404088 <indev_click_focus+0x174>)
  403f40:	4798      	blx	r3
  403f42:	4603      	mov	r3, r0
        if(g_act == g_prev) {
  403f44:	42ab      	cmp	r3, r5
  403f46:	d012      	beq.n	403f6e <indev_click_focus+0x5a>
            if(g_prev == NULL && proc->types.pointer.last_pressed) {
  403f48:	2b00      	cmp	r3, #0
  403f4a:	d044      	beq.n	403fd6 <indev_click_focus+0xc2>
                if(proc->types.pointer.last_pressed) {
  403f4c:	6a20      	ldr	r0, [r4, #32]
  403f4e:	2800      	cmp	r0, #0
  403f50:	d074      	beq.n	40403c <indev_click_focus+0x128>
                    if(g_prev == NULL) {
  403f52:	2b00      	cmp	r3, #0
  403f54:	d055      	beq.n	404002 <indev_click_focus+0xee>
                        lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_LEAVE, NULL);
  403f56:	2200      	movs	r2, #0
  403f58:	2115      	movs	r1, #21
  403f5a:	4b4c      	ldr	r3, [pc, #304]	; (40408c <indev_click_focus+0x178>)
  403f5c:	4798      	blx	r3
                        if(indev_reset_check(proc)) return;
  403f5e:	4620      	mov	r0, r4
  403f60:	4b4b      	ldr	r3, [pc, #300]	; (404090 <indev_click_focus+0x17c>)
  403f62:	4798      	blx	r3
  403f64:	2800      	cmp	r0, #0
  403f66:	d05f      	beq.n	404028 <indev_click_focus+0x114>
  403f68:	bd70      	pop	{r4, r5, r6, pc}
        lv_group_t * g_prev = proc->types.pointer.last_pressed ? lv_obj_get_group(proc->types.pointer.last_pressed) : NULL;
  403f6a:	2300      	movs	r3, #0
  403f6c:	e7ea      	b.n	403f44 <indev_click_focus+0x30>
            if(g_act) {
  403f6e:	b145      	cbz	r5, 403f82 <indev_click_focus+0x6e>
                lv_group_focus_obj(obj_to_focus);
  403f70:	4630      	mov	r0, r6
  403f72:	4b48      	ldr	r3, [pc, #288]	; (404094 <indev_click_focus+0x180>)
  403f74:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403f76:	4620      	mov	r0, r4
  403f78:	4b45      	ldr	r3, [pc, #276]	; (404090 <indev_click_focus+0x17c>)
  403f7a:	4798      	blx	r3
  403f7c:	2800      	cmp	r0, #0
  403f7e:	d065      	beq.n	40404c <indev_click_focus+0x138>
  403f80:	bd70      	pop	{r4, r5, r6, pc}
                if(proc->types.pointer.last_pressed) {
  403f82:	6a20      	ldr	r0, [r4, #32]
  403f84:	b190      	cbz	r0, 403fac <indev_click_focus+0x98>
                    lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_DEFOCUS, NULL);
  403f86:	2200      	movs	r2, #0
  403f88:	2117      	movs	r1, #23
  403f8a:	4b40      	ldr	r3, [pc, #256]	; (40408c <indev_click_focus+0x178>)
  403f8c:	4798      	blx	r3
                    if(indev_reset_check(proc)) return;
  403f8e:	4620      	mov	r0, r4
  403f90:	4b3f      	ldr	r3, [pc, #252]	; (404090 <indev_click_focus+0x17c>)
  403f92:	4798      	blx	r3
  403f94:	2800      	cmp	r0, #0
  403f96:	d1e7      	bne.n	403f68 <indev_click_focus+0x54>
                    lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, NULL);
  403f98:	2200      	movs	r2, #0
  403f9a:	210e      	movs	r1, #14
  403f9c:	6a20      	ldr	r0, [r4, #32]
  403f9e:	4b3e      	ldr	r3, [pc, #248]	; (404098 <indev_click_focus+0x184>)
  403fa0:	4798      	blx	r3
                    if(indev_reset_check(proc)) return;
  403fa2:	4620      	mov	r0, r4
  403fa4:	4b3a      	ldr	r3, [pc, #232]	; (404090 <indev_click_focus+0x17c>)
  403fa6:	4798      	blx	r3
  403fa8:	2800      	cmp	r0, #0
  403faa:	d1dd      	bne.n	403f68 <indev_click_focus+0x54>
                lv_signal_send(obj_to_focus, LV_SIGNAL_FOCUS, NULL);
  403fac:	2200      	movs	r2, #0
  403fae:	2116      	movs	r1, #22
  403fb0:	4630      	mov	r0, r6
  403fb2:	4b36      	ldr	r3, [pc, #216]	; (40408c <indev_click_focus+0x178>)
  403fb4:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403fb6:	4620      	mov	r0, r4
  403fb8:	4b35      	ldr	r3, [pc, #212]	; (404090 <indev_click_focus+0x17c>)
  403fba:	4798      	blx	r3
  403fbc:	2800      	cmp	r0, #0
  403fbe:	d1d3      	bne.n	403f68 <indev_click_focus+0x54>
                lv_event_send(obj_to_focus, LV_EVENT_FOCUSED, NULL);
  403fc0:	2200      	movs	r2, #0
  403fc2:	210d      	movs	r1, #13
  403fc4:	4630      	mov	r0, r6
  403fc6:	4b34      	ldr	r3, [pc, #208]	; (404098 <indev_click_focus+0x184>)
  403fc8:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403fca:	4620      	mov	r0, r4
  403fcc:	4b30      	ldr	r3, [pc, #192]	; (404090 <indev_click_focus+0x17c>)
  403fce:	4798      	blx	r3
  403fd0:	2800      	cmp	r0, #0
  403fd2:	d03b      	beq.n	40404c <indev_click_focus+0x138>
  403fd4:	bd70      	pop	{r4, r5, r6, pc}
            if(g_prev == NULL && proc->types.pointer.last_pressed) {
  403fd6:	6a20      	ldr	r0, [r4, #32]
  403fd8:	2800      	cmp	r0, #0
  403fda:	d0b7      	beq.n	403f4c <indev_click_focus+0x38>
                lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_DEFOCUS, NULL);
  403fdc:	2200      	movs	r2, #0
  403fde:	2117      	movs	r1, #23
  403fe0:	4b2a      	ldr	r3, [pc, #168]	; (40408c <indev_click_focus+0x178>)
  403fe2:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403fe4:	4620      	mov	r0, r4
  403fe6:	4b2a      	ldr	r3, [pc, #168]	; (404090 <indev_click_focus+0x17c>)
  403fe8:	4798      	blx	r3
  403fea:	2800      	cmp	r0, #0
  403fec:	d1bc      	bne.n	403f68 <indev_click_focus+0x54>
                lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, NULL);
  403fee:	2200      	movs	r2, #0
  403ff0:	210e      	movs	r1, #14
  403ff2:	6a20      	ldr	r0, [r4, #32]
  403ff4:	4b28      	ldr	r3, [pc, #160]	; (404098 <indev_click_focus+0x184>)
  403ff6:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403ff8:	4620      	mov	r0, r4
  403ffa:	4b25      	ldr	r3, [pc, #148]	; (404090 <indev_click_focus+0x17c>)
  403ffc:	4798      	blx	r3
  403ffe:	b1e8      	cbz	r0, 40403c <indev_click_focus+0x128>
  404000:	bd70      	pop	{r4, r5, r6, pc}
                        lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_DEFOCUS, NULL);
  404002:	2200      	movs	r2, #0
  404004:	2117      	movs	r1, #23
  404006:	4b21      	ldr	r3, [pc, #132]	; (40408c <indev_click_focus+0x178>)
  404008:	4798      	blx	r3
                        if(indev_reset_check(proc)) return;
  40400a:	4620      	mov	r0, r4
  40400c:	4b20      	ldr	r3, [pc, #128]	; (404090 <indev_click_focus+0x17c>)
  40400e:	4798      	blx	r3
  404010:	2800      	cmp	r0, #0
  404012:	d1a9      	bne.n	403f68 <indev_click_focus+0x54>
                        lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, NULL);
  404014:	2200      	movs	r2, #0
  404016:	210e      	movs	r1, #14
  404018:	6a20      	ldr	r0, [r4, #32]
  40401a:	4b1f      	ldr	r3, [pc, #124]	; (404098 <indev_click_focus+0x184>)
  40401c:	4798      	blx	r3
                        if(indev_reset_check(proc)) return;
  40401e:	4620      	mov	r0, r4
  404020:	4b1b      	ldr	r3, [pc, #108]	; (404090 <indev_click_focus+0x17c>)
  404022:	4798      	blx	r3
  404024:	b150      	cbz	r0, 40403c <indev_click_focus+0x128>
  404026:	bd70      	pop	{r4, r5, r6, pc}
                        lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_LEAVE, NULL);
  404028:	2200      	movs	r2, #0
  40402a:	210f      	movs	r1, #15
  40402c:	6a20      	ldr	r0, [r4, #32]
  40402e:	4b1a      	ldr	r3, [pc, #104]	; (404098 <indev_click_focus+0x184>)
  404030:	4798      	blx	r3
                        if(indev_reset_check(proc)) return;
  404032:	4620      	mov	r0, r4
  404034:	4b16      	ldr	r3, [pc, #88]	; (404090 <indev_click_focus+0x17c>)
  404036:	4798      	blx	r3
  404038:	2800      	cmp	r0, #0
  40403a:	d195      	bne.n	403f68 <indev_click_focus+0x54>
            if(g_act) {
  40403c:	b14d      	cbz	r5, 404052 <indev_click_focus+0x13e>
                lv_group_focus_obj(obj_to_focus);
  40403e:	4630      	mov	r0, r6
  404040:	4b14      	ldr	r3, [pc, #80]	; (404094 <indev_click_focus+0x180>)
  404042:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  404044:	4620      	mov	r0, r4
  404046:	4b12      	ldr	r3, [pc, #72]	; (404090 <indev_click_focus+0x17c>)
  404048:	4798      	blx	r3
  40404a:	b908      	cbnz	r0, 404050 <indev_click_focus+0x13c>
        proc->types.pointer.last_pressed = obj_to_focus;
  40404c:	6226      	str	r6, [r4, #32]
  40404e:	e78b      	b.n	403f68 <indev_click_focus+0x54>
  404050:	bd70      	pop	{r4, r5, r6, pc}
                lv_signal_send(obj_to_focus, LV_SIGNAL_FOCUS, NULL);
  404052:	2200      	movs	r2, #0
  404054:	2116      	movs	r1, #22
  404056:	4630      	mov	r0, r6
  404058:	4b0c      	ldr	r3, [pc, #48]	; (40408c <indev_click_focus+0x178>)
  40405a:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  40405c:	4620      	mov	r0, r4
  40405e:	4b0c      	ldr	r3, [pc, #48]	; (404090 <indev_click_focus+0x17c>)
  404060:	4798      	blx	r3
  404062:	2800      	cmp	r0, #0
  404064:	d180      	bne.n	403f68 <indev_click_focus+0x54>
                lv_event_send(obj_to_focus, LV_EVENT_FOCUSED, NULL);
  404066:	2200      	movs	r2, #0
  404068:	210d      	movs	r1, #13
  40406a:	4630      	mov	r0, r6
  40406c:	4b0a      	ldr	r3, [pc, #40]	; (404098 <indev_click_focus+0x184>)
  40406e:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  404070:	4620      	mov	r0, r4
  404072:	4b07      	ldr	r3, [pc, #28]	; (404090 <indev_click_focus+0x17c>)
  404074:	4798      	blx	r3
  404076:	2800      	cmp	r0, #0
  404078:	d0e8      	beq.n	40404c <indev_click_focus+0x138>
  40407a:	e775      	b.n	403f68 <indev_click_focus+0x54>
  40407c:	2040c41c 	.word	0x2040c41c
  404080:	004092e1 	.word	0x004092e1
  404084:	00406ded 	.word	0x00406ded
  404088:	0040813d 	.word	0x0040813d
  40408c:	00405945 	.word	0x00405945
  404090:	00403b49 	.word	0x00403b49
  404094:	00403a25 	.word	0x00403a25
  404098:	004058d1 	.word	0x004058d1

0040409c <indev_drag>:
{
  40409c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4040a0:	b083      	sub	sp, #12
  4040a2:	4604      	mov	r4, r0
    lv_obj_t * drag_obj    = get_dragged_obj(proc->types.pointer.act_obj);
  4040a4:	6980      	ldr	r0, [r0, #24]
  4040a6:	4bb3      	ldr	r3, [pc, #716]	; (404374 <indev_drag+0x2d8>)
  4040a8:	4798      	blx	r3
    if(drag_obj == NULL) return;
  4040aa:	b120      	cbz	r0, 4040b6 <indev_drag+0x1a>
  4040ac:	4605      	mov	r5, r0
    if(lv_obj_get_drag(drag_obj) == false) return;
  4040ae:	4bb2      	ldr	r3, [pc, #712]	; (404378 <indev_drag+0x2dc>)
  4040b0:	4798      	blx	r3
  4040b2:	4680      	mov	r8, r0
  4040b4:	b910      	cbnz	r0, 4040bc <indev_drag+0x20>
}
  4040b6:	b003      	add	sp, #12
  4040b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
  4040bc:	4628      	mov	r0, r5
  4040be:	4baf      	ldr	r3, [pc, #700]	; (40437c <indev_drag+0x2e0>)
  4040c0:	4798      	blx	r3
  4040c2:	4606      	mov	r6, r0
    if(proc->types.pointer.drag_limit_out == 0) {
  4040c4:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  4040c8:	f013 0f01 	tst.w	r3, #1
  4040cc:	d142      	bne.n	404154 <indev_drag+0xb8>
        proc->types.pointer.drag_sum.x += proc->types.pointer.vect.x;
  4040ce:	89a3      	ldrh	r3, [r4, #12]
  4040d0:	8a22      	ldrh	r2, [r4, #16]
  4040d2:	4413      	add	r3, r2
  4040d4:	b21b      	sxth	r3, r3
  4040d6:	8223      	strh	r3, [r4, #16]
        proc->types.pointer.drag_sum.y += proc->types.pointer.vect.y;
  4040d8:	89e2      	ldrh	r2, [r4, #14]
  4040da:	8a61      	ldrh	r1, [r4, #18]
  4040dc:	440a      	add	r2, r1
  4040de:	b211      	sxth	r1, r2
  4040e0:	8261      	strh	r1, [r4, #18]
        if(allowed_dirs == LV_DRAG_DIR_HOR || allowed_dirs == LV_DRAG_DIR_BOTH) {
  4040e2:	2803      	cmp	r0, #3
  4040e4:	bf18      	it	ne
  4040e6:	2801      	cmpne	r0, #1
  4040e8:	bf0c      	ite	eq
  4040ea:	2001      	moveq	r0, #1
  4040ec:	2000      	movne	r0, #0
        if(allowed_dirs == LV_DRAG_DIR_VER || allowed_dirs == LV_DRAG_DIR_BOTH) {
  4040ee:	1eb2      	subs	r2, r6, #2
  4040f0:	b2d2      	uxtb	r2, r2
  4040f2:	2a01      	cmp	r2, #1
  4040f4:	d91e      	bls.n	404134 <indev_drag+0x98>
        bool ver_en = false;
  4040f6:	2700      	movs	r7, #0
        if(allowed_dirs == LV_DRAG_DIR_ONE) {
  4040f8:	2e04      	cmp	r6, #4
  4040fa:	d01d      	beq.n	404138 <indev_drag+0x9c>
        if((hor_en && LV_MATH_ABS(proc->types.pointer.drag_sum.x) >= indev_act->driver.drag_limit) ||
  4040fc:	b138      	cbz	r0, 40410e <indev_drag+0x72>
  4040fe:	2b00      	cmp	r3, #0
  404100:	bfb8      	it	lt
  404102:	425b      	neglt	r3, r3
  404104:	4a9e      	ldr	r2, [pc, #632]	; (404380 <indev_drag+0x2e4>)
  404106:	6812      	ldr	r2, [r2, #0]
  404108:	7d12      	ldrb	r2, [r2, #20]
  40410a:	4293      	cmp	r3, r2
  40410c:	da0a      	bge.n	404124 <indev_drag+0x88>
  40410e:	b317      	cbz	r7, 404156 <indev_drag+0xba>
           (ver_en && LV_MATH_ABS(proc->types.pointer.drag_sum.y) >= indev_act->driver.drag_limit)) {
  404110:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
  404114:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
  404118:	4b99      	ldr	r3, [pc, #612]	; (404380 <indev_drag+0x2e4>)
  40411a:	681b      	ldr	r3, [r3, #0]
  40411c:	7d1b      	ldrb	r3, [r3, #20]
  40411e:	429a      	cmp	r2, r3
  404120:	f2c0 808d 	blt.w	40423e <indev_drag+0x1a2>
            proc->types.pointer.drag_limit_out = 1;
  404124:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  404128:	f043 0301 	orr.w	r3, r3, #1
  40412c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
            drag_just_started                   = true;
  404130:	4647      	mov	r7, r8
  404132:	e010      	b.n	404156 <indev_drag+0xba>
            ver_en = true;
  404134:	4647      	mov	r7, r8
  404136:	e7df      	b.n	4040f8 <indev_drag+0x5c>
            if(LV_MATH_ABS(proc->types.pointer.drag_sum.x) > LV_MATH_ABS(proc->types.pointer.drag_sum.y)) {
  404138:	ea83 7ee3 	eor.w	lr, r3, r3, asr #31
  40413c:	ebae 7ee3 	sub.w	lr, lr, r3, asr #31
  404140:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
  404144:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
  404148:	4596      	cmp	lr, r2
  40414a:	dd01      	ble.n	404150 <indev_drag+0xb4>
                hor_en = true;
  40414c:	4640      	mov	r0, r8
  40414e:	e7d5      	b.n	4040fc <indev_drag+0x60>
                ver_en = true;
  404150:	4647      	mov	r7, r8
  404152:	e7d3      	b.n	4040fc <indev_drag+0x60>
    bool drag_just_started = false;
  404154:	2700      	movs	r7, #0
    if(proc->types.pointer.drag_limit_out != 0) {
  404156:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  40415a:	f013 0f01 	tst.w	r3, #1
  40415e:	d0aa      	beq.n	4040b6 <indev_drag+0x1a>
        if(proc->types.pointer.vect.x != 0 || proc->types.pointer.vect.y != 0) {
  404160:	68e3      	ldr	r3, [r4, #12]
  404162:	2b00      	cmp	r3, #0
  404164:	d0a7      	beq.n	4040b6 <indev_drag+0x1a>
            lv_coord_t prev_x     = drag_obj->coords.x1;
  404166:	f9b5 a010 	ldrsh.w	sl, [r5, #16]
            lv_coord_t prev_y     = drag_obj->coords.y1;
  40416a:	f9b5 b012 	ldrsh.w	fp, [r5, #18]
            lv_coord_t prev_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
  40416e:	4628      	mov	r0, r5
  404170:	f8df 8234 	ldr.w	r8, [pc, #564]	; 4043a8 <indev_drag+0x30c>
  404174:	47c0      	blx	r8
  404176:	4b83      	ldr	r3, [pc, #524]	; (404384 <indev_drag+0x2e8>)
  404178:	4798      	blx	r3
  40417a:	9000      	str	r0, [sp, #0]
            lv_coord_t prev_par_h = lv_obj_get_height(lv_obj_get_parent(drag_obj));
  40417c:	4628      	mov	r0, r5
  40417e:	47c0      	blx	r8
  404180:	4b81      	ldr	r3, [pc, #516]	; (404388 <indev_drag+0x2ec>)
  404182:	4798      	blx	r3
  404184:	9001      	str	r0, [sp, #4]
            lv_coord_t act_x = lv_obj_get_x(drag_obj);
  404186:	4628      	mov	r0, r5
  404188:	4b80      	ldr	r3, [pc, #512]	; (40438c <indev_drag+0x2f0>)
  40418a:	4798      	blx	r3
  40418c:	4680      	mov	r8, r0
            lv_coord_t act_y = lv_obj_get_y(drag_obj);
  40418e:	4628      	mov	r0, r5
  404190:	4b7f      	ldr	r3, [pc, #508]	; (404390 <indev_drag+0x2f4>)
  404192:	4798      	blx	r3
  404194:	4681      	mov	r9, r0
            if(allowed_dirs == LV_DRAG_DIR_BOTH) {
  404196:	2e03      	cmp	r6, #3
  404198:	d053      	beq.n	404242 <indev_drag+0x1a6>
            else if(allowed_dirs == LV_DRAG_DIR_HOR) {
  40419a:	2e01      	cmp	r6, #1
  40419c:	d063      	beq.n	404266 <indev_drag+0x1ca>
            else if(allowed_dirs == LV_DRAG_DIR_VER) {
  40419e:	2e02      	cmp	r6, #2
  4041a0:	d071      	beq.n	404286 <indev_drag+0x1ea>
            else if(allowed_dirs == LV_DRAG_DIR_ONE) {
  4041a2:	2e04      	cmp	r6, #4
  4041a4:	d07f      	beq.n	4042a6 <indev_drag+0x20a>
            if(allowed_dirs == LV_DRAG_DIR_HOR ||
  4041a6:	2e03      	cmp	r6, #3
  4041a8:	bf18      	it	ne
  4041aa:	2e01      	cmpne	r6, #1
  4041ac:	d00d      	beq.n	4041ca <indev_drag+0x12e>
               allowed_dirs == LV_DRAG_DIR_BOTH ||
  4041ae:	2e04      	cmp	r6, #4
  4041b0:	d10f      	bne.n	4041d2 <indev_drag+0x136>
                LV_MATH_ABS(proc->types.pointer.drag_sum.x) > LV_MATH_ABS(proc->types.pointer.drag_sum.y))) {
  4041b2:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
  4041b6:	2a00      	cmp	r2, #0
  4041b8:	bfb8      	it	lt
  4041ba:	4252      	neglt	r2, r2
  4041bc:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
  4041c0:	2b00      	cmp	r3, #0
  4041c2:	bfb8      	it	lt
  4041c4:	425b      	neglt	r3, r3
               (allowed_dirs == LV_DRAG_DIR_ONE &&
  4041c6:	429a      	cmp	r2, r3
  4041c8:	dd03      	ble.n	4041d2 <indev_drag+0x136>
                act_x += proc->types.pointer.vect.x;
  4041ca:	89a3      	ldrh	r3, [r4, #12]
  4041cc:	4498      	add	r8, r3
  4041ce:	fa0f f888 	sxth.w	r8, r8
            if(allowed_dirs == LV_DRAG_DIR_VER ||
  4041d2:	1eb3      	subs	r3, r6, #2
  4041d4:	b2db      	uxtb	r3, r3
  4041d6:	2b01      	cmp	r3, #1
  4041d8:	f240 809f 	bls.w	40431a <indev_drag+0x27e>
               allowed_dirs == LV_DRAG_DIR_BOTH ||
  4041dc:	2e04      	cmp	r6, #4
  4041de:	f000 808f 	beq.w	404300 <indev_drag+0x264>
                lv_disp_get_inv_buf_size(indev_act->driver.disp); /*Get the number of currently invalidated areas*/
  4041e2:	4b67      	ldr	r3, [pc, #412]	; (404380 <indev_drag+0x2e4>)
  4041e4:	681b      	ldr	r3, [r3, #0]
            uint16_t inv_buf_size =
  4041e6:	68d8      	ldr	r0, [r3, #12]
  4041e8:	4b6a      	ldr	r3, [pc, #424]	; (404394 <indev_drag+0x2f8>)
  4041ea:	4798      	blx	r3
  4041ec:	4606      	mov	r6, r0
            lv_obj_set_pos(drag_obj, act_x, act_y);
  4041ee:	464a      	mov	r2, r9
  4041f0:	4641      	mov	r1, r8
  4041f2:	4628      	mov	r0, r5
  4041f4:	4b68      	ldr	r3, [pc, #416]	; (404398 <indev_drag+0x2fc>)
  4041f6:	4798      	blx	r3
            proc->types.pointer.drag_in_prog = 1;
  4041f8:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  4041fc:	f043 0302 	orr.w	r3, r3, #2
  404200:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
            if(drag_obj->coords.x1 == prev_x && drag_obj->coords.y1 == prev_y) {
  404204:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
  404208:	459a      	cmp	sl, r3
  40420a:	f000 808b 	beq.w	404324 <indev_drag+0x288>
            if(drag_just_started) {
  40420e:	2f00      	cmp	r7, #0
  404210:	f43f af51 	beq.w	4040b6 <indev_drag+0x1a>
                drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_BEGIN, indev_act);
  404214:	69eb      	ldr	r3, [r5, #28]
  404216:	4a5a      	ldr	r2, [pc, #360]	; (404380 <indev_drag+0x2e4>)
  404218:	6812      	ldr	r2, [r2, #0]
  40421a:	2111      	movs	r1, #17
  40421c:	4628      	mov	r0, r5
  40421e:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  404220:	4620      	mov	r0, r4
  404222:	4b5e      	ldr	r3, [pc, #376]	; (40439c <indev_drag+0x300>)
  404224:	4798      	blx	r3
  404226:	2800      	cmp	r0, #0
  404228:	f47f af45 	bne.w	4040b6 <indev_drag+0x1a>
                lv_event_send(drag_obj, LV_EVENT_DRAG_BEGIN, NULL);
  40422c:	2200      	movs	r2, #0
  40422e:	2108      	movs	r1, #8
  404230:	4628      	mov	r0, r5
  404232:	4b5b      	ldr	r3, [pc, #364]	; (4043a0 <indev_drag+0x304>)
  404234:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  404236:	4620      	mov	r0, r4
  404238:	4b58      	ldr	r3, [pc, #352]	; (40439c <indev_drag+0x300>)
  40423a:	4798      	blx	r3
  40423c:	e73b      	b.n	4040b6 <indev_drag+0x1a>
    bool drag_just_started = false;
  40423e:	2700      	movs	r7, #0
  404240:	e789      	b.n	404156 <indev_drag+0xba>
                if(drag_just_started) {
  404242:	2f00      	cmp	r7, #0
  404244:	d0af      	beq.n	4041a6 <indev_drag+0x10a>
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
  404246:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  40424a:	2203      	movs	r2, #3
  40424c:	f362 0384 	bfi	r3, r2, #2, #3
  404250:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                    act_x += proc->types.pointer.drag_sum.x;
  404254:	8a23      	ldrh	r3, [r4, #16]
  404256:	4498      	add	r8, r3
  404258:	fa0f f888 	sxth.w	r8, r8
                    act_y += proc->types.pointer.drag_sum.y;
  40425c:	8a63      	ldrh	r3, [r4, #18]
  40425e:	4499      	add	r9, r3
  404260:	fa0f f989 	sxth.w	r9, r9
  404264:	e79f      	b.n	4041a6 <indev_drag+0x10a>
                if(drag_just_started) {
  404266:	2f00      	cmp	r7, #0
  404268:	d09d      	beq.n	4041a6 <indev_drag+0x10a>
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_HOR;
  40426a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  40426e:	2201      	movs	r2, #1
  404270:	f362 0384 	bfi	r3, r2, #2, #3
  404274:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                    proc->types.pointer.drag_sum.y = 0;
  404278:	2300      	movs	r3, #0
  40427a:	8263      	strh	r3, [r4, #18]
                    act_x += proc->types.pointer.drag_sum.x;
  40427c:	8a23      	ldrh	r3, [r4, #16]
  40427e:	4498      	add	r8, r3
  404280:	fa0f f888 	sxth.w	r8, r8
  404284:	e78f      	b.n	4041a6 <indev_drag+0x10a>
                if(drag_just_started) {
  404286:	2f00      	cmp	r7, #0
  404288:	d08d      	beq.n	4041a6 <indev_drag+0x10a>
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_VER;
  40428a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  40428e:	2202      	movs	r2, #2
  404290:	f362 0384 	bfi	r3, r2, #2, #3
  404294:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                    proc->types.pointer.drag_sum.x = 0;
  404298:	2300      	movs	r3, #0
  40429a:	8223      	strh	r3, [r4, #16]
                    act_y += proc->types.pointer.drag_sum.y;
  40429c:	8a63      	ldrh	r3, [r4, #18]
  40429e:	4499      	add	r9, r3
  4042a0:	fa0f f989 	sxth.w	r9, r9
  4042a4:	e77f      	b.n	4041a6 <indev_drag+0x10a>
                if(drag_just_started) {
  4042a6:	2f00      	cmp	r7, #0
  4042a8:	f43f af7d 	beq.w	4041a6 <indev_drag+0x10a>
                    if(LV_MATH_ABS(proc->types.pointer.drag_sum.x) > LV_MATH_ABS(proc->types.pointer.drag_sum.y)) {
  4042ac:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
  4042b0:	ea82 70e2 	eor.w	r0, r2, r2, asr #31
  4042b4:	eba0 70e2 	sub.w	r0, r0, r2, asr #31
  4042b8:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
  4042bc:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
  4042c0:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
  4042c4:	4288      	cmp	r0, r1
  4042c6:	dd0d      	ble.n	4042e4 <indev_drag+0x248>
                        proc->types.pointer.drag_dir = LV_DRAG_DIR_HOR;
  4042c8:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  4042cc:	2101      	movs	r1, #1
  4042ce:	f361 0384 	bfi	r3, r1, #2, #3
  4042d2:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                        proc->types.pointer.drag_sum.y = 0;
  4042d6:	2300      	movs	r3, #0
  4042d8:	8263      	strh	r3, [r4, #18]
                        act_x += proc->types.pointer.drag_sum.x;
  4042da:	fa18 f882 	uxtah	r8, r8, r2
  4042de:	fa0f f888 	sxth.w	r8, r8
  4042e2:	e760      	b.n	4041a6 <indev_drag+0x10a>
                        proc->types.pointer.drag_dir = LV_DRAG_DIR_VER;
  4042e4:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
  4042e8:	2102      	movs	r1, #2
  4042ea:	f361 0284 	bfi	r2, r1, #2, #3
  4042ee:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
                        proc->types.pointer.drag_sum.x = 0;
  4042f2:	2200      	movs	r2, #0
  4042f4:	8222      	strh	r2, [r4, #16]
                        act_y += proc->types.pointer.drag_sum.y;
  4042f6:	fa19 f983 	uxtah	r9, r9, r3
  4042fa:	fa0f f989 	sxth.w	r9, r9
  4042fe:	e752      	b.n	4041a6 <indev_drag+0x10a>
                LV_MATH_ABS(proc->types.pointer.drag_sum.x) < LV_MATH_ABS(proc->types.pointer.drag_sum.y))) {
  404300:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
  404304:	2a00      	cmp	r2, #0
  404306:	bfb8      	it	lt
  404308:	4252      	neglt	r2, r2
  40430a:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
  40430e:	2b00      	cmp	r3, #0
  404310:	bfb8      	it	lt
  404312:	425b      	neglt	r3, r3
               (allowed_dirs == LV_DRAG_DIR_ONE &&
  404314:	429a      	cmp	r2, r3
  404316:	f6bf af64 	bge.w	4041e2 <indev_drag+0x146>
                act_y += proc->types.pointer.vect.y;
  40431a:	89e3      	ldrh	r3, [r4, #14]
  40431c:	4499      	add	r9, r3
  40431e:	fa0f f989 	sxth.w	r9, r9
  404322:	e75e      	b.n	4041e2 <indev_drag+0x146>
            if(drag_obj->coords.x1 == prev_x && drag_obj->coords.y1 == prev_y) {
  404324:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
  404328:	459b      	cmp	fp, r3
  40432a:	f47f af70 	bne.w	40420e <indev_drag+0x172>
                lv_coord_t act_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
  40432e:	4628      	mov	r0, r5
  404330:	f8df 8074 	ldr.w	r8, [pc, #116]	; 4043a8 <indev_drag+0x30c>
  404334:	47c0      	blx	r8
  404336:	4b13      	ldr	r3, [pc, #76]	; (404384 <indev_drag+0x2e8>)
  404338:	4798      	blx	r3
  40433a:	4681      	mov	r9, r0
                lv_coord_t act_par_h = lv_obj_get_height(lv_obj_get_parent(drag_obj));
  40433c:	4628      	mov	r0, r5
  40433e:	47c0      	blx	r8
  404340:	4b11      	ldr	r3, [pc, #68]	; (404388 <indev_drag+0x2ec>)
  404342:	4798      	blx	r3
                if(act_par_w == prev_par_w && act_par_h == prev_par_h) {
  404344:	9b00      	ldr	r3, [sp, #0]
  404346:	461a      	mov	r2, r3
  404348:	9b01      	ldr	r3, [sp, #4]
  40434a:	454a      	cmp	r2, r9
  40434c:	bf08      	it	eq
  40434e:	4283      	cmpeq	r3, r0
  404350:	f47f af5d 	bne.w	40420e <indev_drag+0x172>
                    uint16_t new_inv_buf_size = lv_disp_get_inv_buf_size(indev_act->driver.disp);
  404354:	f8df 8028 	ldr.w	r8, [pc, #40]	; 404380 <indev_drag+0x2e4>
  404358:	f8d8 3000 	ldr.w	r3, [r8]
  40435c:	68d8      	ldr	r0, [r3, #12]
  40435e:	4b0d      	ldr	r3, [pc, #52]	; (404394 <indev_drag+0x2f8>)
  404360:	4798      	blx	r3
                    _lv_disp_pop_from_inv_buf(indev_act->driver.disp, new_inv_buf_size - inv_buf_size);
  404362:	f8d8 3000 	ldr.w	r3, [r8]
  404366:	1b81      	subs	r1, r0, r6
  404368:	b289      	uxth	r1, r1
  40436a:	68d8      	ldr	r0, [r3, #12]
  40436c:	4b0d      	ldr	r3, [pc, #52]	; (4043a4 <indev_drag+0x308>)
  40436e:	4798      	blx	r3
  404370:	e74d      	b.n	40420e <indev_drag+0x172>
  404372:	bf00      	nop
  404374:	00403b65 	.word	0x00403b65
  404378:	00406789 	.word	0x00406789
  40437c:	004067b5 	.word	0x004067b5
  404380:	2040c418 	.word	0x2040c418
  404384:	00405bc1 	.word	0x00405bc1
  404388:	00405bf1 	.word	0x00405bf1
  40438c:	00405b41 	.word	0x00405b41
  404390:	00405b81 	.word	0x00405b81
  404394:	00414ea9 	.word	0x00414ea9
  404398:	0040607d 	.word	0x0040607d
  40439c:	00403b49 	.word	0x00403b49
  4043a0:	004058d1 	.word	0x004058d1
  4043a4:	00414eb3 	.word	0x00414eb3
  4043a8:	004059ed 	.word	0x004059ed

004043ac <indev_gesture>:
{
  4043ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(proc->types.pointer.gesture_sent) return;
  4043ae:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
  4043b2:	f013 0f20 	tst.w	r3, #32
  4043b6:	d153      	bne.n	404460 <indev_gesture+0xb4>
  4043b8:	4605      	mov	r5, r0
    lv_obj_t * gesture_obj = proc->types.pointer.act_obj;
  4043ba:	6984      	ldr	r4, [r0, #24]
    while(gesture_obj && lv_obj_get_gesture_parent(gesture_obj)) {
  4043bc:	e003      	b.n	4043c6 <indev_gesture+0x1a>
        gesture_obj = lv_obj_get_parent(gesture_obj);
  4043be:	4620      	mov	r0, r4
  4043c0:	4b33      	ldr	r3, [pc, #204]	; (404490 <indev_gesture+0xe4>)
  4043c2:	4798      	blx	r3
  4043c4:	4604      	mov	r4, r0
    while(gesture_obj && lv_obj_get_gesture_parent(gesture_obj)) {
  4043c6:	b124      	cbz	r4, 4043d2 <indev_gesture+0x26>
  4043c8:	4620      	mov	r0, r4
  4043ca:	4b32      	ldr	r3, [pc, #200]	; (404494 <indev_gesture+0xe8>)
  4043cc:	4798      	blx	r3
  4043ce:	2800      	cmp	r0, #0
  4043d0:	d1f5      	bne.n	4043be <indev_gesture+0x12>
    if(gesture_obj == NULL) return;
  4043d2:	2c00      	cmp	r4, #0
  4043d4:	d044      	beq.n	404460 <indev_gesture+0xb4>
    if((LV_MATH_ABS(proc->types.pointer.vect.x) < indev_act->driver.gesture_min_velocity) &&
  4043d6:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4043da:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
  4043de:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
  4043e2:	4a2d      	ldr	r2, [pc, #180]	; (404498 <indev_gesture+0xec>)
  4043e4:	6812      	ldr	r2, [r2, #0]
  4043e6:	7d91      	ldrb	r1, [r2, #22]
  4043e8:	4288      	cmp	r0, r1
  4043ea:	da09      	bge.n	404400 <indev_gesture+0x54>
       (LV_MATH_ABS(proc->types.pointer.vect.y) < indev_act->driver.gesture_min_velocity)) {
  4043ec:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
  4043f0:	2800      	cmp	r0, #0
  4043f2:	bfb8      	it	lt
  4043f4:	4240      	neglt	r0, r0
    if((LV_MATH_ABS(proc->types.pointer.vect.x) < indev_act->driver.gesture_min_velocity) &&
  4043f6:	4281      	cmp	r1, r0
  4043f8:	dd02      	ble.n	404400 <indev_gesture+0x54>
        proc->types.pointer.gesture_sum.x = 0;
  4043fa:	2100      	movs	r1, #0
  4043fc:	84e9      	strh	r1, [r5, #38]	; 0x26
        proc->types.pointer.gesture_sum.y = 0;
  4043fe:	8529      	strh	r1, [r5, #40]	; 0x28
    proc->types.pointer.gesture_sum.x += proc->types.pointer.vect.x;
  404400:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
  404402:	fa11 f383 	uxtah	r3, r1, r3
  404406:	b21b      	sxth	r3, r3
  404408:	84eb      	strh	r3, [r5, #38]	; 0x26
    proc->types.pointer.gesture_sum.y += proc->types.pointer.vect.y;
  40440a:	89e9      	ldrh	r1, [r5, #14]
  40440c:	8d28      	ldrh	r0, [r5, #40]	; 0x28
  40440e:	4401      	add	r1, r0
  404410:	b209      	sxth	r1, r1
  404412:	8529      	strh	r1, [r5, #40]	; 0x28
    if((LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver.gesture_limit) ||
  404414:	ea83 76e3 	eor.w	r6, r3, r3, asr #31
  404418:	eba6 76e3 	sub.w	r6, r6, r3, asr #31
  40441c:	7dd0      	ldrb	r0, [r2, #23]
  40441e:	4286      	cmp	r6, r0
  404420:	dc05      	bgt.n	40442e <indev_gesture+0x82>
       (LV_MATH_ABS(proc->types.pointer.gesture_sum.y) > indev_act->driver.gesture_limit)) {
  404422:	ea81 77e1 	eor.w	r7, r1, r1, asr #31
  404426:	eba7 77e1 	sub.w	r7, r7, r1, asr #31
    if((LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver.gesture_limit) ||
  40442a:	42b8      	cmp	r0, r7
  40442c:	da18      	bge.n	404460 <indev_gesture+0xb4>
        proc->types.pointer.gesture_sent = 1;
  40442e:	f895 002a 	ldrb.w	r0, [r5, #42]	; 0x2a
  404432:	f040 0020 	orr.w	r0, r0, #32
  404436:	f885 002a 	strb.w	r0, [r5, #42]	; 0x2a
        if(LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > LV_MATH_ABS(proc->types.pointer.gesture_sum.y)) {
  40443a:	ea81 70e1 	eor.w	r0, r1, r1, asr #31
  40443e:	eba0 70e1 	sub.w	r0, r0, r1, asr #31
  404442:	4286      	cmp	r6, r0
  404444:	dd11      	ble.n	40446a <indev_gesture+0xbe>
            if(proc->types.pointer.gesture_sum.x > 0)
  404446:	2b00      	cmp	r3, #0
  404448:	dd0b      	ble.n	404462 <indev_gesture+0xb6>
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_RIGHT;
  40444a:	2303      	movs	r3, #3
  40444c:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
        gesture_obj->signal_cb(gesture_obj, LV_SIGNAL_GESTURE, indev_act);
  404450:	69e3      	ldr	r3, [r4, #28]
  404452:	2114      	movs	r1, #20
  404454:	4620      	mov	r0, r4
  404456:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  404458:	4628      	mov	r0, r5
  40445a:	4b10      	ldr	r3, [pc, #64]	; (40449c <indev_gesture+0xf0>)
  40445c:	4798      	blx	r3
  40445e:	b170      	cbz	r0, 40447e <indev_gesture+0xd2>
  404460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_LEFT;
  404462:	2302      	movs	r3, #2
  404464:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  404468:	e7f2      	b.n	404450 <indev_gesture+0xa4>
            if(proc->types.pointer.gesture_sum.y > 0)
  40446a:	2900      	cmp	r1, #0
  40446c:	dd03      	ble.n	404476 <indev_gesture+0xca>
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_BOTTOM;
  40446e:	2301      	movs	r3, #1
  404470:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  404474:	e7ec      	b.n	404450 <indev_gesture+0xa4>
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_TOP;
  404476:	2300      	movs	r3, #0
  404478:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  40447c:	e7e8      	b.n	404450 <indev_gesture+0xa4>
        lv_event_send(gesture_obj, LV_EVENT_GESTURE, NULL);
  40447e:	2200      	movs	r2, #0
  404480:	210b      	movs	r1, #11
  404482:	4620      	mov	r0, r4
  404484:	4b06      	ldr	r3, [pc, #24]	; (4044a0 <indev_gesture+0xf4>)
  404486:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  404488:	4628      	mov	r0, r5
  40448a:	4b04      	ldr	r3, [pc, #16]	; (40449c <indev_gesture+0xf0>)
  40448c:	4798      	blx	r3
  40448e:	e7e7      	b.n	404460 <indev_gesture+0xb4>
  404490:	004059ed 	.word	0x004059ed
  404494:	00406817 	.word	0x00406817
  404498:	2040c418 	.word	0x2040c418
  40449c:	00403b49 	.word	0x00403b49
  4044a0:	004058d1 	.word	0x004058d1

004044a4 <indev_keypad_proc>:
{
  4044a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
  4044a6:	7b8b      	ldrb	r3, [r1, #14]
  4044a8:	2b01      	cmp	r3, #1
  4044aa:	d02f      	beq.n	40450c <indev_keypad_proc+0x68>
    if(i->proc.wait_until_release) {
  4044ac:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  4044b0:	f013 0f08 	tst.w	r3, #8
  4044b4:	d00b      	beq.n	4044ce <indev_keypad_proc+0x2a>
        i->proc.wait_until_release      = 0;
  4044b6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
        i->proc.pr_timestamp            = 0;
  4044ba:	2200      	movs	r2, #0
  4044bc:	6482      	str	r2, [r0, #72]	; 0x48
        i->proc.long_pr_sent            = 0;
  4044be:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
  4044c2:	f362 0300 	bfi	r3, r2, #0, #1
  4044c6:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
        i->proc.types.keypad.last_state = LV_INDEV_STATE_REL; /*To skip the processing of release*/
  4044ca:	f880 2020 	strb.w	r2, [r0, #32]
    lv_group_t * g = i->group;
  4044ce:	6d86      	ldr	r6, [r0, #88]	; 0x58
    if(g == NULL) return;
  4044d0:	b1de      	cbz	r6, 40450a <indev_keypad_proc+0x66>
  4044d2:	460d      	mov	r5, r1
  4044d4:	4604      	mov	r4, r0
    indev_obj_act = lv_group_get_focused(g);
  4044d6:	4630      	mov	r0, r6
  4044d8:	4b95      	ldr	r3, [pc, #596]	; (404730 <indev_keypad_proc+0x28c>)
  4044da:	4798      	blx	r3
  4044dc:	4b95      	ldr	r3, [pc, #596]	; (404734 <indev_keypad_proc+0x290>)
  4044de:	6018      	str	r0, [r3, #0]
    if(indev_obj_act == NULL) return;
  4044e0:	b198      	cbz	r0, 40450a <indev_keypad_proc+0x66>
    uint32_t prev_key = i->proc.types.keypad.last_key;
  4044e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    i->proc.types.keypad.last_key = data->key;
  4044e4:	686b      	ldr	r3, [r5, #4]
  4044e6:	6263      	str	r3, [r4, #36]	; 0x24
    uint32_t prev_state             = i->proc.types.keypad.last_state;
  4044e8:	f894 2020 	ldrb.w	r2, [r4, #32]
    i->proc.types.keypad.last_state = data->state;
  4044ec:	7bab      	ldrb	r3, [r5, #14]
  4044ee:	f884 3020 	strb.w	r3, [r4, #32]
    if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_REL) {
  4044f2:	7bab      	ldrb	r3, [r5, #14]
  4044f4:	2b01      	cmp	r3, #1
  4044f6:	d00f      	beq.n	404518 <indev_keypad_proc+0x74>
    else if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_PR) {
  4044f8:	2b01      	cmp	r3, #1
  4044fa:	d066      	beq.n	4045ca <indev_keypad_proc+0x126>
    else if(data->state == LV_INDEV_STATE_REL && prev_state == LV_INDEV_STATE_PR) {
  4044fc:	b913      	cbnz	r3, 404504 <indev_keypad_proc+0x60>
  4044fe:	2a01      	cmp	r2, #1
  404500:	f000 810a 	beq.w	404718 <indev_keypad_proc+0x274>
    indev_obj_act = NULL;
  404504:	2200      	movs	r2, #0
  404506:	4b8b      	ldr	r3, [pc, #556]	; (404734 <indev_keypad_proc+0x290>)
  404508:	601a      	str	r2, [r3, #0]
  40450a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
  40450c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  404510:	f013 0f08 	tst.w	r3, #8
  404514:	d0ca      	beq.n	4044ac <indev_keypad_proc+0x8>
  404516:	e7f8      	b.n	40450a <indev_keypad_proc+0x66>
    if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_REL) {
  404518:	2a00      	cmp	r2, #0
  40451a:	d1ed      	bne.n	4044f8 <indev_keypad_proc+0x54>
        i->proc.pr_timestamp = lv_tick_get();
  40451c:	4b86      	ldr	r3, [pc, #536]	; (404738 <indev_keypad_proc+0x294>)
  40451e:	4798      	blx	r3
  404520:	64a0      	str	r0, [r4, #72]	; 0x48
        if(data->key == LV_KEY_ENTER) {
  404522:	6869      	ldr	r1, [r5, #4]
  404524:	290a      	cmp	r1, #10
  404526:	d009      	beq.n	40453c <indev_keypad_proc+0x98>
        else if(data->key == LV_KEY_ESC) {
  404528:	291b      	cmp	r1, #27
  40452a:	d022      	beq.n	404572 <indev_keypad_proc+0xce>
        else if(data->key == LV_KEY_NEXT) {
  40452c:	2909      	cmp	r1, #9
  40452e:	d030      	beq.n	404592 <indev_keypad_proc+0xee>
        else if(data->key == LV_KEY_PREV) {
  404530:	290b      	cmp	r1, #11
  404532:	d03c      	beq.n	4045ae <indev_keypad_proc+0x10a>
            lv_group_send_data(g, data->key);
  404534:	4630      	mov	r0, r6
  404536:	4b81      	ldr	r3, [pc, #516]	; (40473c <indev_keypad_proc+0x298>)
  404538:	4798      	blx	r3
  40453a:	e7e3      	b.n	404504 <indev_keypad_proc+0x60>
            lv_group_send_data(g, LV_KEY_ENTER);
  40453c:	4630      	mov	r0, r6
  40453e:	4b7f      	ldr	r3, [pc, #508]	; (40473c <indev_keypad_proc+0x298>)
  404540:	4798      	blx	r3
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, NULL);
  404542:	4b7c      	ldr	r3, [pc, #496]	; (404734 <indev_keypad_proc+0x290>)
  404544:	6818      	ldr	r0, [r3, #0]
  404546:	69c3      	ldr	r3, [r0, #28]
  404548:	2200      	movs	r2, #0
  40454a:	210b      	movs	r1, #11
  40454c:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  40454e:	341c      	adds	r4, #28
  404550:	4620      	mov	r0, r4
  404552:	4b7b      	ldr	r3, [pc, #492]	; (404740 <indev_keypad_proc+0x29c>)
  404554:	4798      	blx	r3
  404556:	2800      	cmp	r0, #0
  404558:	d1d7      	bne.n	40450a <indev_keypad_proc+0x66>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
  40455a:	2200      	movs	r2, #0
  40455c:	4611      	mov	r1, r2
  40455e:	4b75      	ldr	r3, [pc, #468]	; (404734 <indev_keypad_proc+0x290>)
  404560:	6818      	ldr	r0, [r3, #0]
  404562:	4b78      	ldr	r3, [pc, #480]	; (404744 <indev_keypad_proc+0x2a0>)
  404564:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  404566:	4620      	mov	r0, r4
  404568:	4b75      	ldr	r3, [pc, #468]	; (404740 <indev_keypad_proc+0x29c>)
  40456a:	4798      	blx	r3
  40456c:	2800      	cmp	r0, #0
  40456e:	d0c9      	beq.n	404504 <indev_keypad_proc+0x60>
  404570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_group_send_data(g, LV_KEY_ESC);
  404572:	4630      	mov	r0, r6
  404574:	4b71      	ldr	r3, [pc, #452]	; (40473c <indev_keypad_proc+0x298>)
  404576:	4798      	blx	r3
            lv_event_send(indev_obj_act, LV_EVENT_CANCEL, NULL);
  404578:	2200      	movs	r2, #0
  40457a:	2114      	movs	r1, #20
  40457c:	4b6d      	ldr	r3, [pc, #436]	; (404734 <indev_keypad_proc+0x290>)
  40457e:	6818      	ldr	r0, [r3, #0]
  404580:	4b70      	ldr	r3, [pc, #448]	; (404744 <indev_keypad_proc+0x2a0>)
  404582:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  404584:	f104 001c 	add.w	r0, r4, #28
  404588:	4b6d      	ldr	r3, [pc, #436]	; (404740 <indev_keypad_proc+0x29c>)
  40458a:	4798      	blx	r3
  40458c:	2800      	cmp	r0, #0
  40458e:	d0b9      	beq.n	404504 <indev_keypad_proc+0x60>
  404590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
  404592:	2100      	movs	r1, #0
  404594:	4630      	mov	r0, r6
  404596:	4b6c      	ldr	r3, [pc, #432]	; (404748 <indev_keypad_proc+0x2a4>)
  404598:	4798      	blx	r3
            lv_group_focus_next(g);
  40459a:	4630      	mov	r0, r6
  40459c:	4b6b      	ldr	r3, [pc, #428]	; (40474c <indev_keypad_proc+0x2a8>)
  40459e:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  4045a0:	f104 001c 	add.w	r0, r4, #28
  4045a4:	4b66      	ldr	r3, [pc, #408]	; (404740 <indev_keypad_proc+0x29c>)
  4045a6:	4798      	blx	r3
  4045a8:	2800      	cmp	r0, #0
  4045aa:	d0ab      	beq.n	404504 <indev_keypad_proc+0x60>
  4045ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
  4045ae:	2100      	movs	r1, #0
  4045b0:	4630      	mov	r0, r6
  4045b2:	4b65      	ldr	r3, [pc, #404]	; (404748 <indev_keypad_proc+0x2a4>)
  4045b4:	4798      	blx	r3
            lv_group_focus_prev(g);
  4045b6:	4630      	mov	r0, r6
  4045b8:	4b65      	ldr	r3, [pc, #404]	; (404750 <indev_keypad_proc+0x2ac>)
  4045ba:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  4045bc:	f104 001c 	add.w	r0, r4, #28
  4045c0:	4b5f      	ldr	r3, [pc, #380]	; (404740 <indev_keypad_proc+0x29c>)
  4045c2:	4798      	blx	r3
  4045c4:	2800      	cmp	r0, #0
  4045c6:	d09d      	beq.n	404504 <indev_keypad_proc+0x60>
  4045c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_PR) {
  4045ca:	2a01      	cmp	r2, #1
  4045cc:	d196      	bne.n	4044fc <indev_keypad_proc+0x58>
        if(data->key == LV_KEY_ENTER) {
  4045ce:	686b      	ldr	r3, [r5, #4]
  4045d0:	2b0a      	cmp	r3, #10
  4045d2:	d024      	beq.n	40461e <indev_keypad_proc+0x17a>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
  4045d4:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  4045d8:	f013 0f01 	tst.w	r3, #1
  4045dc:	d037      	beq.n	40464e <indev_keypad_proc+0x1aa>
        else if(i->proc.long_pr_sent != 0 &&
  4045de:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  4045e2:	f013 0f01 	tst.w	r3, #1
  4045e6:	d08d      	beq.n	404504 <indev_keypad_proc+0x60>
                lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver.long_press_rep_time) {
  4045e8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
  4045ea:	4b5a      	ldr	r3, [pc, #360]	; (404754 <indev_keypad_proc+0x2b0>)
  4045ec:	4798      	blx	r3
  4045ee:	8b63      	ldrh	r3, [r4, #26]
        else if(i->proc.long_pr_sent != 0 &&
  4045f0:	4298      	cmp	r0, r3
  4045f2:	d987      	bls.n	404504 <indev_keypad_proc+0x60>
            i->proc.longpr_rep_timestamp = lv_tick_get();
  4045f4:	4b50      	ldr	r3, [pc, #320]	; (404738 <indev_keypad_proc+0x294>)
  4045f6:	4798      	blx	r3
  4045f8:	64e0      	str	r0, [r4, #76]	; 0x4c
            if(data->key == LV_KEY_ENTER) {
  4045fa:	6869      	ldr	r1, [r5, #4]
  4045fc:	290a      	cmp	r1, #10
  4045fe:	d053      	beq.n	4046a8 <indev_keypad_proc+0x204>
            else if(data->key == LV_KEY_NEXT) {
  404600:	2909      	cmp	r1, #9
  404602:	d06b      	beq.n	4046dc <indev_keypad_proc+0x238>
            else if(data->key == LV_KEY_PREV) {
  404604:	290b      	cmp	r1, #11
  404606:	d078      	beq.n	4046fa <indev_keypad_proc+0x256>
                lv_group_send_data(g, data->key);
  404608:	4630      	mov	r0, r6
  40460a:	4b4c      	ldr	r3, [pc, #304]	; (40473c <indev_keypad_proc+0x298>)
  40460c:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  40460e:	f104 001c 	add.w	r0, r4, #28
  404612:	4b4b      	ldr	r3, [pc, #300]	; (404740 <indev_keypad_proc+0x29c>)
  404614:	4798      	blx	r3
  404616:	2800      	cmp	r0, #0
  404618:	f43f af74 	beq.w	404504 <indev_keypad_proc+0x60>
  40461c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSING, NULL);
  40461e:	69c3      	ldr	r3, [r0, #28]
  404620:	2200      	movs	r2, #0
  404622:	210c      	movs	r1, #12
  404624:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  404626:	f104 071c 	add.w	r7, r4, #28
  40462a:	4638      	mov	r0, r7
  40462c:	4b44      	ldr	r3, [pc, #272]	; (404740 <indev_keypad_proc+0x29c>)
  40462e:	4798      	blx	r3
  404630:	2800      	cmp	r0, #0
  404632:	f47f af6a 	bne.w	40450a <indev_keypad_proc+0x66>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSING, NULL);
  404636:	2200      	movs	r2, #0
  404638:	2101      	movs	r1, #1
  40463a:	4b3e      	ldr	r3, [pc, #248]	; (404734 <indev_keypad_proc+0x290>)
  40463c:	6818      	ldr	r0, [r3, #0]
  40463e:	4b41      	ldr	r3, [pc, #260]	; (404744 <indev_keypad_proc+0x2a0>)
  404640:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  404642:	4638      	mov	r0, r7
  404644:	4b3e      	ldr	r3, [pc, #248]	; (404740 <indev_keypad_proc+0x29c>)
  404646:	4798      	blx	r3
  404648:	2800      	cmp	r0, #0
  40464a:	d0c3      	beq.n	4045d4 <indev_keypad_proc+0x130>
  40464c:	e75d      	b.n	40450a <indev_keypad_proc+0x66>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
  40464e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  404650:	4b40      	ldr	r3, [pc, #256]	; (404754 <indev_keypad_proc+0x2b0>)
  404652:	4798      	blx	r3
  404654:	8b23      	ldrh	r3, [r4, #24]
  404656:	4298      	cmp	r0, r3
  404658:	d9c1      	bls.n	4045de <indev_keypad_proc+0x13a>
            i->proc.long_pr_sent = 1;
  40465a:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  40465e:	f043 0301 	orr.w	r3, r3, #1
  404662:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
            if(data->key == LV_KEY_ENTER) {
  404666:	686b      	ldr	r3, [r5, #4]
  404668:	2b0a      	cmp	r3, #10
  40466a:	f47f af4b 	bne.w	404504 <indev_keypad_proc+0x60>
                i->proc.longpr_rep_timestamp = lv_tick_get();
  40466e:	4b32      	ldr	r3, [pc, #200]	; (404738 <indev_keypad_proc+0x294>)
  404670:	4798      	blx	r3
  404672:	64e0      	str	r0, [r4, #76]	; 0x4c
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, NULL);
  404674:	4b2f      	ldr	r3, [pc, #188]	; (404734 <indev_keypad_proc+0x290>)
  404676:	6818      	ldr	r0, [r3, #0]
  404678:	69c3      	ldr	r3, [r0, #28]
  40467a:	2200      	movs	r2, #0
  40467c:	210f      	movs	r1, #15
  40467e:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404680:	341c      	adds	r4, #28
  404682:	4620      	mov	r0, r4
  404684:	4b2e      	ldr	r3, [pc, #184]	; (404740 <indev_keypad_proc+0x29c>)
  404686:	4798      	blx	r3
  404688:	2800      	cmp	r0, #0
  40468a:	f47f af3e 	bne.w	40450a <indev_keypad_proc+0x66>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
  40468e:	2200      	movs	r2, #0
  404690:	2104      	movs	r1, #4
  404692:	4b28      	ldr	r3, [pc, #160]	; (404734 <indev_keypad_proc+0x290>)
  404694:	6818      	ldr	r0, [r3, #0]
  404696:	4b2b      	ldr	r3, [pc, #172]	; (404744 <indev_keypad_proc+0x2a0>)
  404698:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  40469a:	4620      	mov	r0, r4
  40469c:	4b28      	ldr	r3, [pc, #160]	; (404740 <indev_keypad_proc+0x29c>)
  40469e:	4798      	blx	r3
  4046a0:	2800      	cmp	r0, #0
  4046a2:	f43f af2f 	beq.w	404504 <indev_keypad_proc+0x60>
  4046a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, NULL);
  4046a8:	4b22      	ldr	r3, [pc, #136]	; (404734 <indev_keypad_proc+0x290>)
  4046aa:	6818      	ldr	r0, [r3, #0]
  4046ac:	69c3      	ldr	r3, [r0, #28]
  4046ae:	2200      	movs	r2, #0
  4046b0:	2110      	movs	r1, #16
  4046b2:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4046b4:	341c      	adds	r4, #28
  4046b6:	4620      	mov	r0, r4
  4046b8:	4b21      	ldr	r3, [pc, #132]	; (404740 <indev_keypad_proc+0x29c>)
  4046ba:	4798      	blx	r3
  4046bc:	2800      	cmp	r0, #0
  4046be:	f47f af24 	bne.w	40450a <indev_keypad_proc+0x66>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
  4046c2:	2200      	movs	r2, #0
  4046c4:	2105      	movs	r1, #5
  4046c6:	4b1b      	ldr	r3, [pc, #108]	; (404734 <indev_keypad_proc+0x290>)
  4046c8:	6818      	ldr	r0, [r3, #0]
  4046ca:	4b1e      	ldr	r3, [pc, #120]	; (404744 <indev_keypad_proc+0x2a0>)
  4046cc:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4046ce:	4620      	mov	r0, r4
  4046d0:	4b1b      	ldr	r3, [pc, #108]	; (404740 <indev_keypad_proc+0x29c>)
  4046d2:	4798      	blx	r3
  4046d4:	2800      	cmp	r0, #0
  4046d6:	f43f af15 	beq.w	404504 <indev_keypad_proc+0x60>
  4046da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
  4046dc:	2100      	movs	r1, #0
  4046de:	4630      	mov	r0, r6
  4046e0:	4b19      	ldr	r3, [pc, #100]	; (404748 <indev_keypad_proc+0x2a4>)
  4046e2:	4798      	blx	r3
                lv_group_focus_next(g);
  4046e4:	4630      	mov	r0, r6
  4046e6:	4b19      	ldr	r3, [pc, #100]	; (40474c <indev_keypad_proc+0x2a8>)
  4046e8:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4046ea:	f104 001c 	add.w	r0, r4, #28
  4046ee:	4b14      	ldr	r3, [pc, #80]	; (404740 <indev_keypad_proc+0x29c>)
  4046f0:	4798      	blx	r3
  4046f2:	2800      	cmp	r0, #0
  4046f4:	f43f af06 	beq.w	404504 <indev_keypad_proc+0x60>
  4046f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
  4046fa:	2100      	movs	r1, #0
  4046fc:	4630      	mov	r0, r6
  4046fe:	4b12      	ldr	r3, [pc, #72]	; (404748 <indev_keypad_proc+0x2a4>)
  404700:	4798      	blx	r3
                lv_group_focus_prev(g);
  404702:	4630      	mov	r0, r6
  404704:	4b12      	ldr	r3, [pc, #72]	; (404750 <indev_keypad_proc+0x2ac>)
  404706:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404708:	f104 001c 	add.w	r0, r4, #28
  40470c:	4b0c      	ldr	r3, [pc, #48]	; (404740 <indev_keypad_proc+0x29c>)
  40470e:	4798      	blx	r3
  404710:	2800      	cmp	r0, #0
  404712:	f43f aef7 	beq.w	404504 <indev_keypad_proc+0x60>
  404716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        data->key = prev_key;
  404718:	6069      	str	r1, [r5, #4]
        if(data->key == LV_KEY_ENTER) {
  40471a:	290a      	cmp	r1, #10
  40471c:	d01c      	beq.n	404758 <indev_keypad_proc+0x2b4>
        i->proc.pr_timestamp = 0;
  40471e:	2200      	movs	r2, #0
  404720:	64a2      	str	r2, [r4, #72]	; 0x48
        i->proc.long_pr_sent = 0;
  404722:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  404726:	f362 0300 	bfi	r3, r2, #0, #1
  40472a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  40472e:	e6e9      	b.n	404504 <indev_keypad_proc+0x60>
  404730:	00403989 	.word	0x00403989
  404734:	2040c41c 	.word	0x2040c41c
  404738:	004151ad 	.word	0x004151ad
  40473c:	0040399d 	.word	0x0040399d
  404740:	00403b49 	.word	0x00403b49
  404744:	004058d1 	.word	0x004058d1
  404748:	004039d5 	.word	0x004039d5
  40474c:	004037ed 	.word	0x004037ed
  404750:	00403805 	.word	0x00403805
  404754:	004151c9 	.word	0x004151c9
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
  404758:	69c3      	ldr	r3, [r0, #28]
  40475a:	2200      	movs	r2, #0
  40475c:	210e      	movs	r1, #14
  40475e:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  404760:	f104 051c 	add.w	r5, r4, #28
  404764:	4628      	mov	r0, r5
  404766:	4b17      	ldr	r3, [pc, #92]	; (4047c4 <indev_keypad_proc+0x320>)
  404768:	4798      	blx	r3
  40476a:	2800      	cmp	r0, #0
  40476c:	f47f aecd 	bne.w	40450a <indev_keypad_proc+0x66>
            if(i->proc.long_pr_sent == 0) {
  404770:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  404774:	f013 0f01 	tst.w	r3, #1
  404778:	d10b      	bne.n	404792 <indev_keypad_proc+0x2ee>
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  40477a:	2200      	movs	r2, #0
  40477c:	2103      	movs	r1, #3
  40477e:	4b12      	ldr	r3, [pc, #72]	; (4047c8 <indev_keypad_proc+0x324>)
  404780:	6818      	ldr	r0, [r3, #0]
  404782:	4b12      	ldr	r3, [pc, #72]	; (4047cc <indev_keypad_proc+0x328>)
  404784:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404786:	4628      	mov	r0, r5
  404788:	4b0e      	ldr	r3, [pc, #56]	; (4047c4 <indev_keypad_proc+0x320>)
  40478a:	4798      	blx	r3
  40478c:	2800      	cmp	r0, #0
  40478e:	f47f aebc 	bne.w	40450a <indev_keypad_proc+0x66>
            lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
  404792:	2200      	movs	r2, #0
  404794:	2106      	movs	r1, #6
  404796:	4b0c      	ldr	r3, [pc, #48]	; (4047c8 <indev_keypad_proc+0x324>)
  404798:	6818      	ldr	r0, [r3, #0]
  40479a:	4b0c      	ldr	r3, [pc, #48]	; (4047cc <indev_keypad_proc+0x328>)
  40479c:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  40479e:	4628      	mov	r0, r5
  4047a0:	4b08      	ldr	r3, [pc, #32]	; (4047c4 <indev_keypad_proc+0x320>)
  4047a2:	4798      	blx	r3
  4047a4:	2800      	cmp	r0, #0
  4047a6:	f47f aeb0 	bne.w	40450a <indev_keypad_proc+0x66>
            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
  4047aa:	2200      	movs	r2, #0
  4047ac:	2107      	movs	r1, #7
  4047ae:	4b06      	ldr	r3, [pc, #24]	; (4047c8 <indev_keypad_proc+0x324>)
  4047b0:	6818      	ldr	r0, [r3, #0]
  4047b2:	4b06      	ldr	r3, [pc, #24]	; (4047cc <indev_keypad_proc+0x328>)
  4047b4:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  4047b6:	4628      	mov	r0, r5
  4047b8:	4b02      	ldr	r3, [pc, #8]	; (4047c4 <indev_keypad_proc+0x320>)
  4047ba:	4798      	blx	r3
  4047bc:	2800      	cmp	r0, #0
  4047be:	d0ae      	beq.n	40471e <indev_keypad_proc+0x27a>
  4047c0:	e6a3      	b.n	40450a <indev_keypad_proc+0x66>
  4047c2:	bf00      	nop
  4047c4:	00403b49 	.word	0x00403b49
  4047c8:	2040c41c 	.word	0x2040c41c
  4047cc:	004058d1 	.word	0x004058d1

004047d0 <indev_encoder_proc>:
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
  4047d0:	7b8b      	ldrb	r3, [r1, #14]
  4047d2:	2b01      	cmp	r3, #1
  4047d4:	d040      	beq.n	404858 <indev_encoder_proc+0x88>
{
  4047d6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4047d8:	b083      	sub	sp, #12
    if(i->proc.wait_until_release) {
  4047da:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  4047de:	f013 0f08 	tst.w	r3, #8
  4047e2:	d00b      	beq.n	4047fc <indev_encoder_proc+0x2c>
        i->proc.wait_until_release      = 0;
  4047e4:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
        i->proc.pr_timestamp            = 0;
  4047e8:	2200      	movs	r2, #0
  4047ea:	6482      	str	r2, [r0, #72]	; 0x48
        i->proc.long_pr_sent            = 0;
  4047ec:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
  4047f0:	f362 0300 	bfi	r3, r2, #0, #1
  4047f4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
        i->proc.types.keypad.last_state = LV_INDEV_STATE_REL; /*To skip the processing of release*/
  4047f8:	f880 2020 	strb.w	r2, [r0, #32]
    lv_indev_state_t last_state     = i->proc.types.keypad.last_state;
  4047fc:	f890 7020 	ldrb.w	r7, [r0, #32]
    i->proc.types.keypad.last_state = data->state;
  404800:	7b8b      	ldrb	r3, [r1, #14]
  404802:	f880 3020 	strb.w	r3, [r0, #32]
    i->proc.types.keypad.last_key   = data->key;
  404806:	684b      	ldr	r3, [r1, #4]
  404808:	6243      	str	r3, [r0, #36]	; 0x24
    lv_group_t * g = i->group;
  40480a:	6d86      	ldr	r6, [r0, #88]	; 0x58
    if(g == NULL) return;
  40480c:	b316      	cbz	r6, 404854 <indev_encoder_proc+0x84>
  40480e:	460c      	mov	r4, r1
  404810:	4605      	mov	r5, r0
    indev_obj_act = lv_group_get_focused(g);
  404812:	4630      	mov	r0, r6
  404814:	4b90      	ldr	r3, [pc, #576]	; (404a58 <indev_encoder_proc+0x288>)
  404816:	4798      	blx	r3
  404818:	4b90      	ldr	r3, [pc, #576]	; (404a5c <indev_encoder_proc+0x28c>)
  40481a:	6018      	str	r0, [r3, #0]
    if(indev_obj_act == NULL) return;
  40481c:	b1d0      	cbz	r0, 404854 <indev_encoder_proc+0x84>
    if(data->state != LV_INDEV_STATE_REL) {
  40481e:	7ba3      	ldrb	r3, [r4, #14]
  404820:	b10b      	cbz	r3, 404826 <indev_encoder_proc+0x56>
        data->enc_diff = 0;
  404822:	2300      	movs	r3, #0
  404824:	81a3      	strh	r3, [r4, #12]
    indev_obj_act = lv_group_get_focused(g);
  404826:	4630      	mov	r0, r6
  404828:	4b8b      	ldr	r3, [pc, #556]	; (404a58 <indev_encoder_proc+0x288>)
  40482a:	4798      	blx	r3
  40482c:	4b8b      	ldr	r3, [pc, #556]	; (404a5c <indev_encoder_proc+0x28c>)
  40482e:	6018      	str	r0, [r3, #0]
    if(indev_obj_act == NULL) return;
  404830:	b180      	cbz	r0, 404854 <indev_encoder_proc+0x84>
    if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_REL) {
  404832:	7ba3      	ldrb	r3, [r4, #14]
  404834:	2b01      	cmp	r3, #1
  404836:	d015      	beq.n	404864 <indev_encoder_proc+0x94>
    else if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_PR) {
  404838:	2b01      	cmp	r3, #1
  40483a:	d068      	beq.n	40490e <indev_encoder_proc+0x13e>
    else if(data->state == LV_INDEV_STATE_REL && last_state == LV_INDEV_STATE_PR) {
  40483c:	b913      	cbnz	r3, 404844 <indev_encoder_proc+0x74>
  40483e:	2f01      	cmp	r7, #1
  404840:	f000 80fe 	beq.w	404a40 <indev_encoder_proc+0x270>
    indev_obj_act = NULL;
  404844:	2200      	movs	r2, #0
  404846:	4b85      	ldr	r3, [pc, #532]	; (404a5c <indev_encoder_proc+0x28c>)
  404848:	601a      	str	r2, [r3, #0]
    if(data->enc_diff != 0) {
  40484a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40484e:	2b00      	cmp	r3, #0
  404850:	f040 81aa 	bne.w	404ba8 <indev_encoder_proc+0x3d8>
}
  404854:	b003      	add	sp, #12
  404856:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
  404858:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  40485c:	f013 0f08 	tst.w	r3, #8
  404860:	d0b9      	beq.n	4047d6 <indev_encoder_proc+0x6>
  404862:	4770      	bx	lr
    if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_REL) {
  404864:	2f00      	cmp	r7, #0
  404866:	d1e7      	bne.n	404838 <indev_encoder_proc+0x68>
        i->proc.pr_timestamp = lv_tick_get();
  404868:	4b7d      	ldr	r3, [pc, #500]	; (404a60 <indev_encoder_proc+0x290>)
  40486a:	4798      	blx	r3
  40486c:	64a8      	str	r0, [r5, #72]	; 0x48
        if(data->key == LV_KEY_ENTER) {
  40486e:	6861      	ldr	r1, [r4, #4]
  404870:	290a      	cmp	r1, #10
  404872:	d009      	beq.n	404888 <indev_encoder_proc+0xb8>
        else if(data->key == LV_KEY_LEFT) {
  404874:	2914      	cmp	r1, #20
  404876:	d030      	beq.n	4048da <indev_encoder_proc+0x10a>
        else if(data->key == LV_KEY_RIGHT) {
  404878:	2913      	cmp	r1, #19
  40487a:	d033      	beq.n	4048e4 <indev_encoder_proc+0x114>
        else if(data->key == LV_KEY_ESC) {
  40487c:	291b      	cmp	r1, #27
  40487e:	d036      	beq.n	4048ee <indev_encoder_proc+0x11e>
            lv_group_send_data(g, data->key);
  404880:	4630      	mov	r0, r6
  404882:	4b78      	ldr	r3, [pc, #480]	; (404a64 <indev_encoder_proc+0x294>)
  404884:	4798      	blx	r3
  404886:	e7dd      	b.n	404844 <indev_encoder_proc+0x74>
            bool editable = false;
  404888:	aa02      	add	r2, sp, #8
  40488a:	2300      	movs	r3, #0
  40488c:	f802 3d01 	strb.w	r3, [r2, #-1]!
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
  404890:	4b72      	ldr	r3, [pc, #456]	; (404a5c <indev_encoder_proc+0x28c>)
  404892:	6818      	ldr	r0, [r3, #0]
  404894:	69c3      	ldr	r3, [r0, #28]
  404896:	2119      	movs	r1, #25
  404898:	4798      	blx	r3
            if(lv_group_get_editing(g) == true || editable == false) {
  40489a:	4630      	mov	r0, r6
  40489c:	4b72      	ldr	r3, [pc, #456]	; (404a68 <indev_encoder_proc+0x298>)
  40489e:	4798      	blx	r3
  4048a0:	b918      	cbnz	r0, 4048aa <indev_encoder_proc+0xda>
  4048a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
  4048a6:	2b00      	cmp	r3, #0
  4048a8:	d1cc      	bne.n	404844 <indev_encoder_proc+0x74>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, NULL);
  4048aa:	4b6c      	ldr	r3, [pc, #432]	; (404a5c <indev_encoder_proc+0x28c>)
  4048ac:	6818      	ldr	r0, [r3, #0]
  4048ae:	69c3      	ldr	r3, [r0, #28]
  4048b0:	2200      	movs	r2, #0
  4048b2:	210b      	movs	r1, #11
  4048b4:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4048b6:	351c      	adds	r5, #28
  4048b8:	4628      	mov	r0, r5
  4048ba:	4b6c      	ldr	r3, [pc, #432]	; (404a6c <indev_encoder_proc+0x29c>)
  4048bc:	4798      	blx	r3
  4048be:	2800      	cmp	r0, #0
  4048c0:	d1c8      	bne.n	404854 <indev_encoder_proc+0x84>
                lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
  4048c2:	2200      	movs	r2, #0
  4048c4:	4611      	mov	r1, r2
  4048c6:	4b65      	ldr	r3, [pc, #404]	; (404a5c <indev_encoder_proc+0x28c>)
  4048c8:	6818      	ldr	r0, [r3, #0]
  4048ca:	4b69      	ldr	r3, [pc, #420]	; (404a70 <indev_encoder_proc+0x2a0>)
  4048cc:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4048ce:	4628      	mov	r0, r5
  4048d0:	4b66      	ldr	r3, [pc, #408]	; (404a6c <indev_encoder_proc+0x29c>)
  4048d2:	4798      	blx	r3
  4048d4:	2800      	cmp	r0, #0
  4048d6:	d0b5      	beq.n	404844 <indev_encoder_proc+0x74>
  4048d8:	e7bc      	b.n	404854 <indev_encoder_proc+0x84>
            data->enc_diff--;
  4048da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4048de:	3b01      	subs	r3, #1
  4048e0:	81a3      	strh	r3, [r4, #12]
  4048e2:	e7af      	b.n	404844 <indev_encoder_proc+0x74>
            data->enc_diff++;
  4048e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4048e8:	3301      	adds	r3, #1
  4048ea:	81a3      	strh	r3, [r4, #12]
  4048ec:	e7aa      	b.n	404844 <indev_encoder_proc+0x74>
            lv_group_send_data(g, LV_KEY_ESC);
  4048ee:	4630      	mov	r0, r6
  4048f0:	4b5c      	ldr	r3, [pc, #368]	; (404a64 <indev_encoder_proc+0x294>)
  4048f2:	4798      	blx	r3
            lv_event_send(indev_obj_act, LV_EVENT_CANCEL, NULL);
  4048f4:	2200      	movs	r2, #0
  4048f6:	2114      	movs	r1, #20
  4048f8:	4b58      	ldr	r3, [pc, #352]	; (404a5c <indev_encoder_proc+0x28c>)
  4048fa:	6818      	ldr	r0, [r3, #0]
  4048fc:	4b5c      	ldr	r3, [pc, #368]	; (404a70 <indev_encoder_proc+0x2a0>)
  4048fe:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  404900:	f105 001c 	add.w	r0, r5, #28
  404904:	4b59      	ldr	r3, [pc, #356]	; (404a6c <indev_encoder_proc+0x29c>)
  404906:	4798      	blx	r3
  404908:	2800      	cmp	r0, #0
  40490a:	d09b      	beq.n	404844 <indev_encoder_proc+0x74>
  40490c:	e7a2      	b.n	404854 <indev_encoder_proc+0x84>
    else if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_PR) {
  40490e:	2f01      	cmp	r7, #1
  404910:	d194      	bne.n	40483c <indev_encoder_proc+0x6c>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
  404912:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  404916:	f013 0f01 	tst.w	r3, #1
  40491a:	d01f      	beq.n	40495c <indev_encoder_proc+0x18c>
        else if(i->proc.long_pr_sent != 0 && lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver.long_press_rep_time) {
  40491c:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  404920:	f013 0f01 	tst.w	r3, #1
  404924:	d08e      	beq.n	404844 <indev_encoder_proc+0x74>
  404926:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
  404928:	4b52      	ldr	r3, [pc, #328]	; (404a74 <indev_encoder_proc+0x2a4>)
  40492a:	4798      	blx	r3
  40492c:	8b6b      	ldrh	r3, [r5, #26]
  40492e:	4298      	cmp	r0, r3
  404930:	d988      	bls.n	404844 <indev_encoder_proc+0x74>
            i->proc.longpr_rep_timestamp = lv_tick_get();
  404932:	4b4b      	ldr	r3, [pc, #300]	; (404a60 <indev_encoder_proc+0x290>)
  404934:	4798      	blx	r3
  404936:	64e8      	str	r0, [r5, #76]	; 0x4c
            if(data->key == LV_KEY_ENTER) {
  404938:	6861      	ldr	r1, [r4, #4]
  40493a:	290a      	cmp	r1, #10
  40493c:	d05c      	beq.n	4049f8 <indev_encoder_proc+0x228>
            else if(data->key == LV_KEY_LEFT) {
  40493e:	2914      	cmp	r1, #20
  404940:	d074      	beq.n	404a2c <indev_encoder_proc+0x25c>
            else if(data->key == LV_KEY_RIGHT) {
  404942:	2913      	cmp	r1, #19
  404944:	d077      	beq.n	404a36 <indev_encoder_proc+0x266>
                lv_group_send_data(g, data->key);
  404946:	4630      	mov	r0, r6
  404948:	4b46      	ldr	r3, [pc, #280]	; (404a64 <indev_encoder_proc+0x294>)
  40494a:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  40494c:	f105 001c 	add.w	r0, r5, #28
  404950:	4b46      	ldr	r3, [pc, #280]	; (404a6c <indev_encoder_proc+0x29c>)
  404952:	4798      	blx	r3
  404954:	2800      	cmp	r0, #0
  404956:	f43f af75 	beq.w	404844 <indev_encoder_proc+0x74>
  40495a:	e77b      	b.n	404854 <indev_encoder_proc+0x84>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
  40495c:	6ca8      	ldr	r0, [r5, #72]	; 0x48
  40495e:	4b45      	ldr	r3, [pc, #276]	; (404a74 <indev_encoder_proc+0x2a4>)
  404960:	4798      	blx	r3
  404962:	8b2b      	ldrh	r3, [r5, #24]
  404964:	4298      	cmp	r0, r3
  404966:	d9d9      	bls.n	40491c <indev_encoder_proc+0x14c>
            i->proc.long_pr_sent = 1;
  404968:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  40496c:	f043 0301 	orr.w	r3, r3, #1
  404970:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
            i->proc.longpr_rep_timestamp = lv_tick_get();
  404974:	4b3a      	ldr	r3, [pc, #232]	; (404a60 <indev_encoder_proc+0x290>)
  404976:	4798      	blx	r3
  404978:	64e8      	str	r0, [r5, #76]	; 0x4c
            if(data->key == LV_KEY_ENTER) {
  40497a:	6863      	ldr	r3, [r4, #4]
  40497c:	2b0a      	cmp	r3, #10
  40497e:	d006      	beq.n	40498e <indev_encoder_proc+0x1be>
            i->proc.long_pr_sent = 1;
  404980:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  404984:	f043 0301 	orr.w	r3, r3, #1
  404988:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
  40498c:	e75a      	b.n	404844 <indev_encoder_proc+0x74>
                bool editable = false;
  40498e:	aa02      	add	r2, sp, #8
  404990:	2300      	movs	r3, #0
  404992:	f802 3d01 	strb.w	r3, [r2, #-1]!
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
  404996:	4b31      	ldr	r3, [pc, #196]	; (404a5c <indev_encoder_proc+0x28c>)
  404998:	6818      	ldr	r0, [r3, #0]
  40499a:	69c3      	ldr	r3, [r0, #28]
  40499c:	2119      	movs	r1, #25
  40499e:	4798      	blx	r3
                if(editable) {
  4049a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
  4049a4:	b173      	cbz	r3, 4049c4 <indev_encoder_proc+0x1f4>
                    if(_lv_ll_get_len(&g->obj_ll) > 1) {
  4049a6:	4630      	mov	r0, r6
  4049a8:	4b33      	ldr	r3, [pc, #204]	; (404a78 <indev_encoder_proc+0x2a8>)
  4049aa:	4798      	blx	r3
  4049ac:	2801      	cmp	r0, #1
  4049ae:	d9e7      	bls.n	404980 <indev_encoder_proc+0x1b0>
                        lv_group_set_editing(g, lv_group_get_editing(g) ? false : true); /*Toggle edit mode on long press*/
  4049b0:	4630      	mov	r0, r6
  4049b2:	4b2d      	ldr	r3, [pc, #180]	; (404a68 <indev_encoder_proc+0x298>)
  4049b4:	4798      	blx	r3
  4049b6:	f080 0101 	eor.w	r1, r0, #1
  4049ba:	b2c9      	uxtb	r1, r1
  4049bc:	4630      	mov	r0, r6
  4049be:	4b2f      	ldr	r3, [pc, #188]	; (404a7c <indev_encoder_proc+0x2ac>)
  4049c0:	4798      	blx	r3
  4049c2:	e7dd      	b.n	404980 <indev_encoder_proc+0x1b0>
                    indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, NULL);
  4049c4:	4b25      	ldr	r3, [pc, #148]	; (404a5c <indev_encoder_proc+0x28c>)
  4049c6:	6818      	ldr	r0, [r3, #0]
  4049c8:	69c3      	ldr	r3, [r0, #28]
  4049ca:	2200      	movs	r2, #0
  4049cc:	210f      	movs	r1, #15
  4049ce:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  4049d0:	f105 071c 	add.w	r7, r5, #28
  4049d4:	4638      	mov	r0, r7
  4049d6:	4b25      	ldr	r3, [pc, #148]	; (404a6c <indev_encoder_proc+0x29c>)
  4049d8:	4798      	blx	r3
  4049da:	2800      	cmp	r0, #0
  4049dc:	f47f af3a 	bne.w	404854 <indev_encoder_proc+0x84>
                    lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
  4049e0:	2200      	movs	r2, #0
  4049e2:	2104      	movs	r1, #4
  4049e4:	4b1d      	ldr	r3, [pc, #116]	; (404a5c <indev_encoder_proc+0x28c>)
  4049e6:	6818      	ldr	r0, [r3, #0]
  4049e8:	4b21      	ldr	r3, [pc, #132]	; (404a70 <indev_encoder_proc+0x2a0>)
  4049ea:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  4049ec:	4638      	mov	r0, r7
  4049ee:	4b1f      	ldr	r3, [pc, #124]	; (404a6c <indev_encoder_proc+0x29c>)
  4049f0:	4798      	blx	r3
  4049f2:	2800      	cmp	r0, #0
  4049f4:	d0c4      	beq.n	404980 <indev_encoder_proc+0x1b0>
  4049f6:	e72d      	b.n	404854 <indev_encoder_proc+0x84>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, NULL);
  4049f8:	4b18      	ldr	r3, [pc, #96]	; (404a5c <indev_encoder_proc+0x28c>)
  4049fa:	6818      	ldr	r0, [r3, #0]
  4049fc:	69c3      	ldr	r3, [r0, #28]
  4049fe:	2200      	movs	r2, #0
  404a00:	2110      	movs	r1, #16
  404a02:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404a04:	351c      	adds	r5, #28
  404a06:	4628      	mov	r0, r5
  404a08:	4b18      	ldr	r3, [pc, #96]	; (404a6c <indev_encoder_proc+0x29c>)
  404a0a:	4798      	blx	r3
  404a0c:	2800      	cmp	r0, #0
  404a0e:	f47f af21 	bne.w	404854 <indev_encoder_proc+0x84>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
  404a12:	2200      	movs	r2, #0
  404a14:	2105      	movs	r1, #5
  404a16:	4b11      	ldr	r3, [pc, #68]	; (404a5c <indev_encoder_proc+0x28c>)
  404a18:	6818      	ldr	r0, [r3, #0]
  404a1a:	4b15      	ldr	r3, [pc, #84]	; (404a70 <indev_encoder_proc+0x2a0>)
  404a1c:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404a1e:	4628      	mov	r0, r5
  404a20:	4b12      	ldr	r3, [pc, #72]	; (404a6c <indev_encoder_proc+0x29c>)
  404a22:	4798      	blx	r3
  404a24:	2800      	cmp	r0, #0
  404a26:	f43f af0d 	beq.w	404844 <indev_encoder_proc+0x74>
  404a2a:	e713      	b.n	404854 <indev_encoder_proc+0x84>
                data->enc_diff--;
  404a2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404a30:	3b01      	subs	r3, #1
  404a32:	81a3      	strh	r3, [r4, #12]
  404a34:	e706      	b.n	404844 <indev_encoder_proc+0x74>
                data->enc_diff++;
  404a36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404a3a:	3301      	adds	r3, #1
  404a3c:	81a3      	strh	r3, [r4, #12]
  404a3e:	e701      	b.n	404844 <indev_encoder_proc+0x74>
        if(data->key == LV_KEY_ENTER) {
  404a40:	6863      	ldr	r3, [r4, #4]
  404a42:	2b0a      	cmp	r3, #10
  404a44:	d01c      	beq.n	404a80 <indev_encoder_proc+0x2b0>
        i->proc.pr_timestamp = 0;
  404a46:	2200      	movs	r2, #0
  404a48:	64aa      	str	r2, [r5, #72]	; 0x48
        i->proc.long_pr_sent = 0;
  404a4a:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  404a4e:	f362 0300 	bfi	r3, r2, #0, #1
  404a52:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
  404a56:	e6f5      	b.n	404844 <indev_encoder_proc+0x74>
  404a58:	00403989 	.word	0x00403989
  404a5c:	2040c41c 	.word	0x2040c41c
  404a60:	004151ad 	.word	0x004151ad
  404a64:	0040399d 	.word	0x0040399d
  404a68:	00403ae1 	.word	0x00403ae1
  404a6c:	00403b49 	.word	0x00403b49
  404a70:	004058d1 	.word	0x004058d1
  404a74:	004151c9 	.word	0x004151c9
  404a78:	004164a9 	.word	0x004164a9
  404a7c:	004039d5 	.word	0x004039d5
            bool editable = false;
  404a80:	aa02      	add	r2, sp, #8
  404a82:	2300      	movs	r3, #0
  404a84:	f802 3d01 	strb.w	r3, [r2, #-1]!
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
  404a88:	69c3      	ldr	r3, [r0, #28]
  404a8a:	2119      	movs	r1, #25
  404a8c:	4798      	blx	r3
            if(editable == false) {
  404a8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
  404a92:	2b00      	cmp	r3, #0
  404a94:	d044      	beq.n	404b20 <indev_encoder_proc+0x350>
            else if(g->editing) {
  404a96:	7d33      	ldrb	r3, [r6, #20]
  404a98:	f013 0f02 	tst.w	r3, #2
  404a9c:	d079      	beq.n	404b92 <indev_encoder_proc+0x3c2>
                if(!i->proc.long_pr_sent || _lv_ll_get_len(&g->obj_ll) <= 1) {
  404a9e:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  404aa2:	f013 0f01 	tst.w	r3, #1
  404aa6:	d004      	beq.n	404ab2 <indev_encoder_proc+0x2e2>
  404aa8:	4630      	mov	r0, r6
  404aaa:	4b60      	ldr	r3, [pc, #384]	; (404c2c <indev_encoder_proc+0x45c>)
  404aac:	4798      	blx	r3
  404aae:	2801      	cmp	r0, #1
  404ab0:	d8c9      	bhi.n	404a46 <indev_encoder_proc+0x276>
                    indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
  404ab2:	4b5f      	ldr	r3, [pc, #380]	; (404c30 <indev_encoder_proc+0x460>)
  404ab4:	6818      	ldr	r0, [r3, #0]
  404ab6:	69c3      	ldr	r3, [r0, #28]
  404ab8:	2200      	movs	r2, #0
  404aba:	210e      	movs	r1, #14
  404abc:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  404abe:	f105 071c 	add.w	r7, r5, #28
  404ac2:	4638      	mov	r0, r7
  404ac4:	4b5b      	ldr	r3, [pc, #364]	; (404c34 <indev_encoder_proc+0x464>)
  404ac6:	4798      	blx	r3
  404ac8:	2800      	cmp	r0, #0
  404aca:	f47f aec3 	bne.w	404854 <indev_encoder_proc+0x84>
                    lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  404ace:	2200      	movs	r2, #0
  404ad0:	2103      	movs	r1, #3
  404ad2:	4b57      	ldr	r3, [pc, #348]	; (404c30 <indev_encoder_proc+0x460>)
  404ad4:	6818      	ldr	r0, [r3, #0]
  404ad6:	4b58      	ldr	r3, [pc, #352]	; (404c38 <indev_encoder_proc+0x468>)
  404ad8:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  404ada:	4638      	mov	r0, r7
  404adc:	4b55      	ldr	r3, [pc, #340]	; (404c34 <indev_encoder_proc+0x464>)
  404ade:	4798      	blx	r3
  404ae0:	2800      	cmp	r0, #0
  404ae2:	f47f aeb7 	bne.w	404854 <indev_encoder_proc+0x84>
                    lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
  404ae6:	2200      	movs	r2, #0
  404ae8:	2106      	movs	r1, #6
  404aea:	4b51      	ldr	r3, [pc, #324]	; (404c30 <indev_encoder_proc+0x460>)
  404aec:	6818      	ldr	r0, [r3, #0]
  404aee:	4b52      	ldr	r3, [pc, #328]	; (404c38 <indev_encoder_proc+0x468>)
  404af0:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  404af2:	4638      	mov	r0, r7
  404af4:	4b4f      	ldr	r3, [pc, #316]	; (404c34 <indev_encoder_proc+0x464>)
  404af6:	4798      	blx	r3
  404af8:	2800      	cmp	r0, #0
  404afa:	f47f aeab 	bne.w	404854 <indev_encoder_proc+0x84>
                    lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
  404afe:	2200      	movs	r2, #0
  404b00:	2107      	movs	r1, #7
  404b02:	4b4b      	ldr	r3, [pc, #300]	; (404c30 <indev_encoder_proc+0x460>)
  404b04:	6818      	ldr	r0, [r3, #0]
  404b06:	4b4c      	ldr	r3, [pc, #304]	; (404c38 <indev_encoder_proc+0x468>)
  404b08:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  404b0a:	4638      	mov	r0, r7
  404b0c:	4b49      	ldr	r3, [pc, #292]	; (404c34 <indev_encoder_proc+0x464>)
  404b0e:	4798      	blx	r3
  404b10:	2800      	cmp	r0, #0
  404b12:	f47f ae9f 	bne.w	404854 <indev_encoder_proc+0x84>
                    lv_group_send_data(g, LV_KEY_ENTER);
  404b16:	210a      	movs	r1, #10
  404b18:	4630      	mov	r0, r6
  404b1a:	4b48      	ldr	r3, [pc, #288]	; (404c3c <indev_encoder_proc+0x46c>)
  404b1c:	4798      	blx	r3
  404b1e:	e792      	b.n	404a46 <indev_encoder_proc+0x276>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
  404b20:	4b43      	ldr	r3, [pc, #268]	; (404c30 <indev_encoder_proc+0x460>)
  404b22:	6818      	ldr	r0, [r3, #0]
  404b24:	69c3      	ldr	r3, [r0, #28]
  404b26:	2200      	movs	r2, #0
  404b28:	210e      	movs	r1, #14
  404b2a:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404b2c:	f105 071c 	add.w	r7, r5, #28
  404b30:	4638      	mov	r0, r7
  404b32:	4b40      	ldr	r3, [pc, #256]	; (404c34 <indev_encoder_proc+0x464>)
  404b34:	4798      	blx	r3
  404b36:	2800      	cmp	r0, #0
  404b38:	f47f ae8c 	bne.w	404854 <indev_encoder_proc+0x84>
                if(i->proc.long_pr_sent == 0) lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  404b3c:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  404b40:	f013 0f01 	tst.w	r3, #1
  404b44:	d01e      	beq.n	404b84 <indev_encoder_proc+0x3b4>
                if(indev_reset_check(&i->proc)) return;
  404b46:	4638      	mov	r0, r7
  404b48:	4b3a      	ldr	r3, [pc, #232]	; (404c34 <indev_encoder_proc+0x464>)
  404b4a:	4798      	blx	r3
  404b4c:	2800      	cmp	r0, #0
  404b4e:	f47f ae81 	bne.w	404854 <indev_encoder_proc+0x84>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
  404b52:	2200      	movs	r2, #0
  404b54:	2106      	movs	r1, #6
  404b56:	4b36      	ldr	r3, [pc, #216]	; (404c30 <indev_encoder_proc+0x460>)
  404b58:	6818      	ldr	r0, [r3, #0]
  404b5a:	4b37      	ldr	r3, [pc, #220]	; (404c38 <indev_encoder_proc+0x468>)
  404b5c:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404b5e:	4638      	mov	r0, r7
  404b60:	4b34      	ldr	r3, [pc, #208]	; (404c34 <indev_encoder_proc+0x464>)
  404b62:	4798      	blx	r3
  404b64:	2800      	cmp	r0, #0
  404b66:	f47f ae75 	bne.w	404854 <indev_encoder_proc+0x84>
                lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
  404b6a:	2200      	movs	r2, #0
  404b6c:	2107      	movs	r1, #7
  404b6e:	4b30      	ldr	r3, [pc, #192]	; (404c30 <indev_encoder_proc+0x460>)
  404b70:	6818      	ldr	r0, [r3, #0]
  404b72:	4b31      	ldr	r3, [pc, #196]	; (404c38 <indev_encoder_proc+0x468>)
  404b74:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404b76:	4638      	mov	r0, r7
  404b78:	4b2e      	ldr	r3, [pc, #184]	; (404c34 <indev_encoder_proc+0x464>)
  404b7a:	4798      	blx	r3
  404b7c:	2800      	cmp	r0, #0
  404b7e:	f43f af62 	beq.w	404a46 <indev_encoder_proc+0x276>
  404b82:	e667      	b.n	404854 <indev_encoder_proc+0x84>
                if(i->proc.long_pr_sent == 0) lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  404b84:	2200      	movs	r2, #0
  404b86:	2103      	movs	r1, #3
  404b88:	4b29      	ldr	r3, [pc, #164]	; (404c30 <indev_encoder_proc+0x460>)
  404b8a:	6818      	ldr	r0, [r3, #0]
  404b8c:	4b2a      	ldr	r3, [pc, #168]	; (404c38 <indev_encoder_proc+0x468>)
  404b8e:	4798      	blx	r3
  404b90:	e7d9      	b.n	404b46 <indev_encoder_proc+0x376>
            else if(editable && !g->editing && !i->proc.long_pr_sent) {
  404b92:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  404b96:	f013 0f01 	tst.w	r3, #1
  404b9a:	f47f af54 	bne.w	404a46 <indev_encoder_proc+0x276>
                lv_group_set_editing(g, true); /*Set edit mode*/
  404b9e:	2101      	movs	r1, #1
  404ba0:	4630      	mov	r0, r6
  404ba2:	4b27      	ldr	r3, [pc, #156]	; (404c40 <indev_encoder_proc+0x470>)
  404ba4:	4798      	blx	r3
  404ba6:	e74e      	b.n	404a46 <indev_encoder_proc+0x276>
        if(lv_group_get_editing(g)) {
  404ba8:	4630      	mov	r0, r6
  404baa:	4b26      	ldr	r3, [pc, #152]	; (404c44 <indev_encoder_proc+0x474>)
  404bac:	4798      	blx	r3
  404bae:	b1f8      	cbz	r0, 404bf0 <indev_encoder_proc+0x420>
            if(data->enc_diff < 0) {
  404bb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404bb4:	2b00      	cmp	r3, #0
  404bb6:	db0f      	blt.n	404bd8 <indev_encoder_proc+0x408>
            else if(data->enc_diff > 0) {
  404bb8:	2b00      	cmp	r3, #0
  404bba:	f77f ae4b 	ble.w	404854 <indev_encoder_proc+0x84>
  404bbe:	2500      	movs	r5, #0
  404bc0:	e011      	b.n	404be6 <indev_encoder_proc+0x416>
                for(s = 0; s < -data->enc_diff; s++) lv_group_send_data(g, LV_KEY_LEFT);
  404bc2:	2114      	movs	r1, #20
  404bc4:	4630      	mov	r0, r6
  404bc6:	4b1d      	ldr	r3, [pc, #116]	; (404c3c <indev_encoder_proc+0x46c>)
  404bc8:	4798      	blx	r3
  404bca:	3501      	adds	r5, #1
  404bcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404bd0:	425b      	negs	r3, r3
  404bd2:	429d      	cmp	r5, r3
  404bd4:	dbf5      	blt.n	404bc2 <indev_encoder_proc+0x3f2>
  404bd6:	e63d      	b.n	404854 <indev_encoder_proc+0x84>
  404bd8:	2500      	movs	r5, #0
  404bda:	e7f7      	b.n	404bcc <indev_encoder_proc+0x3fc>
                for(s = 0; s < data->enc_diff; s++) lv_group_send_data(g, LV_KEY_RIGHT);
  404bdc:	2113      	movs	r1, #19
  404bde:	4630      	mov	r0, r6
  404be0:	4b16      	ldr	r3, [pc, #88]	; (404c3c <indev_encoder_proc+0x46c>)
  404be2:	4798      	blx	r3
  404be4:	3501      	adds	r5, #1
  404be6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404bea:	429d      	cmp	r5, r3
  404bec:	dbf6      	blt.n	404bdc <indev_encoder_proc+0x40c>
  404bee:	e631      	b.n	404854 <indev_encoder_proc+0x84>
            if(data->enc_diff < 0) {
  404bf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404bf4:	2b00      	cmp	r3, #0
  404bf6:	db0e      	blt.n	404c16 <indev_encoder_proc+0x446>
            else if(data->enc_diff > 0) {
  404bf8:	2b00      	cmp	r3, #0
  404bfa:	f77f ae2b 	ble.w	404854 <indev_encoder_proc+0x84>
  404bfe:	2500      	movs	r5, #0
  404c00:	e00f      	b.n	404c22 <indev_encoder_proc+0x452>
                for(s = 0; s < -data->enc_diff; s++) lv_group_focus_prev(g);
  404c02:	4630      	mov	r0, r6
  404c04:	4b10      	ldr	r3, [pc, #64]	; (404c48 <indev_encoder_proc+0x478>)
  404c06:	4798      	blx	r3
  404c08:	3501      	adds	r5, #1
  404c0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404c0e:	425b      	negs	r3, r3
  404c10:	429d      	cmp	r5, r3
  404c12:	dbf6      	blt.n	404c02 <indev_encoder_proc+0x432>
  404c14:	e61e      	b.n	404854 <indev_encoder_proc+0x84>
  404c16:	2500      	movs	r5, #0
  404c18:	e7f7      	b.n	404c0a <indev_encoder_proc+0x43a>
                for(s = 0; s < data->enc_diff; s++) lv_group_focus_next(g);
  404c1a:	4630      	mov	r0, r6
  404c1c:	4b0b      	ldr	r3, [pc, #44]	; (404c4c <indev_encoder_proc+0x47c>)
  404c1e:	4798      	blx	r3
  404c20:	3501      	adds	r5, #1
  404c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404c26:	429d      	cmp	r5, r3
  404c28:	dbf7      	blt.n	404c1a <indev_encoder_proc+0x44a>
  404c2a:	e613      	b.n	404854 <indev_encoder_proc+0x84>
  404c2c:	004164a9 	.word	0x004164a9
  404c30:	2040c41c 	.word	0x2040c41c
  404c34:	00403b49 	.word	0x00403b49
  404c38:	004058d1 	.word	0x004058d1
  404c3c:	0040399d 	.word	0x0040399d
  404c40:	004039d5 	.word	0x004039d5
  404c44:	00403ae1 	.word	0x00403ae1
  404c48:	00403805 	.word	0x00403805
  404c4c:	004037ed 	.word	0x004037ed

00404c50 <lv_indev_get_act>:
}
  404c50:	4b01      	ldr	r3, [pc, #4]	; (404c58 <lv_indev_get_act+0x8>)
  404c52:	6818      	ldr	r0, [r3, #0]
  404c54:	4770      	bx	lr
  404c56:	bf00      	nop
  404c58:	2040c418 	.word	0x2040c418

00404c5c <lv_indev_get_type>:
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
  404c5c:	b108      	cbz	r0, 404c62 <lv_indev_get_type+0x6>
    return indev->driver.type;
  404c5e:	7800      	ldrb	r0, [r0, #0]
  404c60:	4770      	bx	lr
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
  404c62:	2000      	movs	r0, #0
}
  404c64:	4770      	bx	lr
	...

00404c68 <lv_indev_reset>:
    if(indev) {
  404c68:	b1b0      	cbz	r0, 404c98 <lv_indev_reset+0x30>
  404c6a:	4603      	mov	r3, r0
        indev->proc.reset_query = 1;
  404c6c:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
  404c70:	f042 0202 	orr.w	r2, r2, #2
  404c74:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
        if(indev_act == indev) indev_obj_act = NULL;
  404c78:	4a17      	ldr	r2, [pc, #92]	; (404cd8 <lv_indev_reset+0x70>)
  404c7a:	6812      	ldr	r2, [r2, #0]
  404c7c:	4290      	cmp	r0, r2
  404c7e:	d004      	beq.n	404c8a <lv_indev_reset+0x22>
        if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
  404c80:	b139      	cbz	r1, 404c92 <lv_indev_reset+0x2a>
  404c82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  404c84:	4291      	cmp	r1, r2
  404c86:	d004      	beq.n	404c92 <lv_indev_reset+0x2a>
  404c88:	4770      	bx	lr
        if(indev_act == indev) indev_obj_act = NULL;
  404c8a:	2000      	movs	r0, #0
  404c8c:	4a13      	ldr	r2, [pc, #76]	; (404cdc <lv_indev_reset+0x74>)
  404c8e:	6010      	str	r0, [r2, #0]
  404c90:	e7f6      	b.n	404c80 <lv_indev_reset+0x18>
            indev->proc.types.pointer.last_pressed = NULL;
  404c92:	2200      	movs	r2, #0
  404c94:	63da      	str	r2, [r3, #60]	; 0x3c
  404c96:	4770      	bx	lr
{
  404c98:	b510      	push	{r4, lr}
  404c9a:	460c      	mov	r4, r1
        lv_indev_t * i = lv_indev_get_next(NULL);
  404c9c:	2000      	movs	r0, #0
  404c9e:	4b10      	ldr	r3, [pc, #64]	; (404ce0 <lv_indev_reset+0x78>)
  404ca0:	4798      	blx	r3
        while(i) {
  404ca2:	e007      	b.n	404cb4 <lv_indev_reset+0x4c>
            if(indev_act == i) indev_obj_act = NULL;
  404ca4:	2200      	movs	r2, #0
  404ca6:	4b0d      	ldr	r3, [pc, #52]	; (404cdc <lv_indev_reset+0x74>)
  404ca8:	601a      	str	r2, [r3, #0]
  404caa:	e00e      	b.n	404cca <lv_indev_reset+0x62>
                i->proc.types.pointer.last_pressed = NULL;
  404cac:	2300      	movs	r3, #0
  404cae:	63c3      	str	r3, [r0, #60]	; 0x3c
            i = lv_indev_get_next(i);
  404cb0:	4b0b      	ldr	r3, [pc, #44]	; (404ce0 <lv_indev_reset+0x78>)
  404cb2:	4798      	blx	r3
        while(i) {
  404cb4:	b178      	cbz	r0, 404cd6 <lv_indev_reset+0x6e>
            i->proc.reset_query = 1;
  404cb6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  404cba:	f043 0302 	orr.w	r3, r3, #2
  404cbe:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
            if(indev_act == i) indev_obj_act = NULL;
  404cc2:	4b05      	ldr	r3, [pc, #20]	; (404cd8 <lv_indev_reset+0x70>)
  404cc4:	681b      	ldr	r3, [r3, #0]
  404cc6:	4298      	cmp	r0, r3
  404cc8:	d0ec      	beq.n	404ca4 <lv_indev_reset+0x3c>
            if(obj == NULL || i->proc.types.pointer.last_pressed == obj) {
  404cca:	2c00      	cmp	r4, #0
  404ccc:	d0ee      	beq.n	404cac <lv_indev_reset+0x44>
  404cce:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  404cd0:	429c      	cmp	r4, r3
  404cd2:	d1ed      	bne.n	404cb0 <lv_indev_reset+0x48>
  404cd4:	e7ea      	b.n	404cac <lv_indev_reset+0x44>
  404cd6:	bd10      	pop	{r4, pc}
  404cd8:	2040c418 	.word	0x2040c418
  404cdc:	2040c41c 	.word	0x2040c41c
  404ce0:	00415121 	.word	0x00415121

00404ce4 <_lv_indev_init>:
{
  404ce4:	b508      	push	{r3, lr}
    lv_indev_reset(NULL, NULL); /*Reset all input devices*/
  404ce6:	2100      	movs	r1, #0
  404ce8:	4608      	mov	r0, r1
  404cea:	4b01      	ldr	r3, [pc, #4]	; (404cf0 <_lv_indev_init+0xc>)
  404cec:	4798      	blx	r3
  404cee:	bd08      	pop	{r3, pc}
  404cf0:	00404c69 	.word	0x00404c69

00404cf4 <lv_indev_reset_long_press>:
{
  404cf4:	b538      	push	{r3, r4, r5, lr}
  404cf6:	4604      	mov	r4, r0
    indev->proc.long_pr_sent         = 0;
  404cf8:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  404cfc:	f36f 0300 	bfc	r3, #0, #1
  404d00:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    indev->proc.longpr_rep_timestamp = lv_tick_get();
  404d04:	4d02      	ldr	r5, [pc, #8]	; (404d10 <lv_indev_reset_long_press+0x1c>)
  404d06:	47a8      	blx	r5
  404d08:	64e0      	str	r0, [r4, #76]	; 0x4c
    indev->proc.pr_timestamp         = lv_tick_get();
  404d0a:	47a8      	blx	r5
  404d0c:	64a0      	str	r0, [r4, #72]	; 0x48
  404d0e:	bd38      	pop	{r3, r4, r5, pc}
  404d10:	004151ad 	.word	0x004151ad

00404d14 <lv_indev_get_point>:
    if(indev == NULL) {
  404d14:	b158      	cbz	r0, 404d2e <lv_indev_get_point+0x1a>
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) {
  404d16:	7802      	ldrb	r2, [r0, #0]
  404d18:	2a01      	cmp	r2, #1
  404d1a:	bf18      	it	ne
  404d1c:	2a03      	cmpne	r2, #3
  404d1e:	d10a      	bne.n	404d36 <lv_indev_get_point+0x22>
        point->x = indev->proc.types.pointer.act_point.x;
  404d20:	f9b0 2020 	ldrsh.w	r2, [r0, #32]
  404d24:	800a      	strh	r2, [r1, #0]
        point->y = indev->proc.types.pointer.act_point.y;
  404d26:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
  404d2a:	804b      	strh	r3, [r1, #2]
  404d2c:	4770      	bx	lr
        point->x = 0;
  404d2e:	2300      	movs	r3, #0
  404d30:	800b      	strh	r3, [r1, #0]
        point->y = 0;
  404d32:	804b      	strh	r3, [r1, #2]
        return;
  404d34:	4770      	bx	lr
        point->x = -1;
  404d36:	f64f 73ff 	movw	r3, #65535	; 0xffff
  404d3a:	800b      	strh	r3, [r1, #0]
        point->y = -1;
  404d3c:	804b      	strh	r3, [r1, #2]
  404d3e:	4770      	bx	lr

00404d40 <lv_indev_is_dragging>:
    if(indev == NULL) return false;
  404d40:	b148      	cbz	r0, 404d56 <lv_indev_is_dragging+0x16>
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) return false;
  404d42:	7803      	ldrb	r3, [r0, #0]
  404d44:	2b01      	cmp	r3, #1
  404d46:	bf18      	it	ne
  404d48:	2b03      	cmpne	r3, #3
  404d4a:	d106      	bne.n	404d5a <lv_indev_is_dragging+0x1a>
    return indev->proc.types.pointer.drag_in_prog == 0 ? false : true;
  404d4c:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
  404d50:	f3c0 0040 	ubfx	r0, r0, #1, #1
  404d54:	4770      	bx	lr
    if(indev == NULL) return false;
  404d56:	2000      	movs	r0, #0
  404d58:	4770      	bx	lr
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) return false;
  404d5a:	2000      	movs	r0, #0
}
  404d5c:	4770      	bx	lr
	...

00404d60 <lv_indev_get_obj_act>:
}
  404d60:	4b01      	ldr	r3, [pc, #4]	; (404d68 <lv_indev_get_obj_act+0x8>)
  404d62:	6818      	ldr	r0, [r3, #0]
  404d64:	4770      	bx	lr
  404d66:	bf00      	nop
  404d68:	2040c41c 	.word	0x2040c41c

00404d6c <lv_indev_search_obj>:
{
  404d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404d70:	4680      	mov	r8, r0
  404d72:	460f      	mov	r7, r1
    if(lv_obj_hittest(obj, point)) {
  404d74:	4b21      	ldr	r3, [pc, #132]	; (404dfc <lv_indev_search_obj+0x90>)
  404d76:	4798      	blx	r3
  404d78:	2800      	cmp	r0, #0
  404d7a:	d03c      	beq.n	404df6 <lv_indev_search_obj+0x8a>
        _LV_LL_READ(obj->child_ll, i) {
  404d7c:	f108 0604 	add.w	r6, r8, #4
  404d80:	4630      	mov	r0, r6
  404d82:	4b1f      	ldr	r3, [pc, #124]	; (404e00 <lv_indev_search_obj+0x94>)
  404d84:	4798      	blx	r3
  404d86:	4604      	mov	r4, r0
    lv_obj_t * found_p = NULL;
  404d88:	2500      	movs	r5, #0
        _LV_LL_READ(obj->child_ll, i) {
  404d8a:	b15c      	cbz	r4, 404da4 <lv_indev_search_obj+0x38>
            found_p = lv_indev_search_obj(i, point);
  404d8c:	4639      	mov	r1, r7
  404d8e:	4620      	mov	r0, r4
  404d90:	f7ff ffec 	bl	404d6c <lv_indev_search_obj>
            if(found_p != NULL) {
  404d94:	4605      	mov	r5, r0
  404d96:	b928      	cbnz	r0, 404da4 <lv_indev_search_obj+0x38>
        _LV_LL_READ(obj->child_ll, i) {
  404d98:	4621      	mov	r1, r4
  404d9a:	4630      	mov	r0, r6
  404d9c:	4b19      	ldr	r3, [pc, #100]	; (404e04 <lv_indev_search_obj+0x98>)
  404d9e:	4798      	blx	r3
  404da0:	4604      	mov	r4, r0
  404da2:	e7f2      	b.n	404d8a <lv_indev_search_obj+0x1e>
        if(found_p == NULL && lv_obj_get_click(obj) != false) {
  404da4:	b115      	cbz	r5, 404dac <lv_indev_search_obj+0x40>
}
  404da6:	4628      	mov	r0, r5
  404da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(found_p == NULL && lv_obj_get_click(obj) != false) {
  404dac:	4640      	mov	r0, r8
  404dae:	4b16      	ldr	r3, [pc, #88]	; (404e08 <lv_indev_search_obj+0x9c>)
  404db0:	4798      	blx	r3
  404db2:	2800      	cmp	r0, #0
  404db4:	d0f7      	beq.n	404da6 <lv_indev_search_obj+0x3a>
  404db6:	4644      	mov	r4, r8
  404db8:	e003      	b.n	404dc2 <lv_indev_search_obj+0x56>
                hidden_i = lv_obj_get_parent(hidden_i);
  404dba:	4620      	mov	r0, r4
  404dbc:	4b13      	ldr	r3, [pc, #76]	; (404e0c <lv_indev_search_obj+0xa0>)
  404dbe:	4798      	blx	r3
  404dc0:	4604      	mov	r4, r0
            while(hidden_i != NULL) {
  404dc2:	b124      	cbz	r4, 404dce <lv_indev_search_obj+0x62>
                if(lv_obj_get_hidden(hidden_i) == true) break;
  404dc4:	4620      	mov	r0, r4
  404dc6:	4b12      	ldr	r3, [pc, #72]	; (404e10 <lv_indev_search_obj+0xa4>)
  404dc8:	4798      	blx	r3
  404dca:	2800      	cmp	r0, #0
  404dcc:	d0f5      	beq.n	404dba <lv_indev_search_obj+0x4e>
            if(lv_obj_is_protected(obj, LV_PROTECT_EVENT_TO_DISABLED) == false) {
  404dce:	2140      	movs	r1, #64	; 0x40
  404dd0:	4640      	mov	r0, r8
  404dd2:	4b10      	ldr	r3, [pc, #64]	; (404e14 <lv_indev_search_obj+0xa8>)
  404dd4:	4798      	blx	r3
  404dd6:	b950      	cbnz	r0, 404dee <lv_indev_search_obj+0x82>
                if(hidden_i == NULL && (lv_obj_get_state(obj, LV_OBJ_PART_MAIN) & LV_STATE_DISABLED) == false) found_p = obj;
  404dd8:	2c00      	cmp	r4, #0
  404dda:	d1e4      	bne.n	404da6 <lv_indev_search_obj+0x3a>
  404ddc:	2100      	movs	r1, #0
  404dde:	4640      	mov	r0, r8
  404de0:	4b0d      	ldr	r3, [pc, #52]	; (404e18 <lv_indev_search_obj+0xac>)
  404de2:	4798      	blx	r3
  404de4:	f010 0f20 	tst.w	r0, #32
  404de8:	d1dd      	bne.n	404da6 <lv_indev_search_obj+0x3a>
  404dea:	4645      	mov	r5, r8
  404dec:	e7db      	b.n	404da6 <lv_indev_search_obj+0x3a>
                if(hidden_i == NULL) found_p = obj;
  404dee:	2c00      	cmp	r4, #0
  404df0:	d1d9      	bne.n	404da6 <lv_indev_search_obj+0x3a>
  404df2:	4645      	mov	r5, r8
    return found_p;
  404df4:	e7d7      	b.n	404da6 <lv_indev_search_obj+0x3a>
    lv_obj_t * found_p = NULL;
  404df6:	2500      	movs	r5, #0
  404df8:	e7d5      	b.n	404da6 <lv_indev_search_obj+0x3a>
  404dfa:	bf00      	nop
  404dfc:	004083a1 	.word	0x004083a1
  404e00:	004162a5 	.word	0x004162a5
  404e04:	004162b9 	.word	0x004162b9
  404e08:	0040675d 	.word	0x0040675d
  404e0c:	004059ed 	.word	0x004059ed
  404e10:	00405e09 	.word	0x00405e09
  404e14:	00406ded 	.word	0x00406ded
  404e18:	00406e21 	.word	0x00406e21

00404e1c <indev_proc_press>:
    indev_obj_act = proc->types.pointer.act_obj;
  404e1c:	6983      	ldr	r3, [r0, #24]
  404e1e:	4a5d      	ldr	r2, [pc, #372]	; (404f94 <indev_proc_press+0x178>)
  404e20:	6013      	str	r3, [r2, #0]
    if(proc->wait_until_release != 0) return;
  404e22:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
  404e26:	f012 0f08 	tst.w	r2, #8
  404e2a:	f040 81bc 	bne.w	4051a6 <indev_proc_press+0x38a>
{
  404e2e:	b570      	push	{r4, r5, r6, lr}
  404e30:	4604      	mov	r4, r0
    lv_disp_t * disp = indev_act->driver.disp;
  404e32:	4a59      	ldr	r2, [pc, #356]	; (404f98 <indev_proc_press+0x17c>)
  404e34:	6812      	ldr	r2, [r2, #0]
  404e36:	68d5      	ldr	r5, [r2, #12]
    if(indev_obj_act == NULL) {
  404e38:	b343      	cbz	r3, 404e8c <indev_proc_press+0x70>
    else if(proc->types.pointer.drag_in_prog == 0 &&
  404e3a:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
  404e3e:	f012 0f02 	tst.w	r2, #2
  404e42:	d045      	beq.n	404ed0 <indev_proc_press+0xb4>
    bool new_obj_searched = false;
  404e44:	2300      	movs	r3, #0
    if(new_obj_searched && proc->types.pointer.last_obj) {
  404e46:	b13b      	cbz	r3, 404e58 <indev_proc_press+0x3c>
  404e48:	69e3      	ldr	r3, [r4, #28]
  404e4a:	b12b      	cbz	r3, 404e58 <indev_proc_press+0x3c>
        proc->types.pointer.drag_throw_vect.x = 0;
  404e4c:	2300      	movs	r3, #0
  404e4e:	82a3      	strh	r3, [r4, #20]
        proc->types.pointer.drag_throw_vect.y = 0;
  404e50:	82e3      	strh	r3, [r4, #22]
        indev_drag_throw(proc);
  404e52:	4620      	mov	r0, r4
  404e54:	4b51      	ldr	r3, [pc, #324]	; (404f9c <indev_proc_press+0x180>)
  404e56:	4798      	blx	r3
    if(indev_obj_act != proc->types.pointer.act_obj) {
  404e58:	69a5      	ldr	r5, [r4, #24]
  404e5a:	4b4e      	ldr	r3, [pc, #312]	; (404f94 <indev_proc_press+0x178>)
  404e5c:	681b      	ldr	r3, [r3, #0]
  404e5e:	429d      	cmp	r5, r3
  404e60:	f000 80de 	beq.w	405020 <indev_proc_press+0x204>
        proc->types.pointer.last_point.x = proc->types.pointer.act_point.x;
  404e64:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  404e68:	8123      	strh	r3, [r4, #8]
        proc->types.pointer.last_point.y = proc->types.pointer.act_point.y;
  404e6a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
  404e6e:	8163      	strh	r3, [r4, #10]
        if(proc->types.pointer.act_obj != NULL) {
  404e70:	2d00      	cmp	r5, #0
  404e72:	d060      	beq.n	404f36 <indev_proc_press+0x11a>
            last_obj->signal_cb(last_obj, LV_SIGNAL_PRESS_LOST, indev_act);
  404e74:	69eb      	ldr	r3, [r5, #28]
  404e76:	4a48      	ldr	r2, [pc, #288]	; (404f98 <indev_proc_press+0x17c>)
  404e78:	6812      	ldr	r2, [r2, #0]
  404e7a:	210d      	movs	r1, #13
  404e7c:	4628      	mov	r0, r5
  404e7e:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  404e80:	4620      	mov	r0, r4
  404e82:	4b47      	ldr	r3, [pc, #284]	; (404fa0 <indev_proc_press+0x184>)
  404e84:	4798      	blx	r3
  404e86:	2800      	cmp	r0, #0
  404e88:	d04b      	beq.n	404f22 <indev_proc_press+0x106>
  404e8a:	bd70      	pop	{r4, r5, r6, pc}
        indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_sys(disp), &proc->types.pointer.act_point);
  404e8c:	4628      	mov	r0, r5
  404e8e:	4b45      	ldr	r3, [pc, #276]	; (404fa4 <indev_proc_press+0x188>)
  404e90:	4798      	blx	r3
  404e92:	1d26      	adds	r6, r4, #4
  404e94:	4631      	mov	r1, r6
  404e96:	4b44      	ldr	r3, [pc, #272]	; (404fa8 <indev_proc_press+0x18c>)
  404e98:	4798      	blx	r3
  404e9a:	4b3e      	ldr	r3, [pc, #248]	; (404f94 <indev_proc_press+0x178>)
  404e9c:	6018      	str	r0, [r3, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
  404e9e:	b120      	cbz	r0, 404eaa <indev_proc_press+0x8e>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
  404ea0:	4b3c      	ldr	r3, [pc, #240]	; (404f94 <indev_proc_press+0x178>)
  404ea2:	681b      	ldr	r3, [r3, #0]
  404ea4:	b153      	cbz	r3, 404ebc <indev_proc_press+0xa0>
        new_obj_searched = true;
  404ea6:	2301      	movs	r3, #1
  404ea8:	e7cd      	b.n	404e46 <indev_proc_press+0x2a>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
  404eaa:	4628      	mov	r0, r5
  404eac:	4b3f      	ldr	r3, [pc, #252]	; (404fac <indev_proc_press+0x190>)
  404eae:	4798      	blx	r3
  404eb0:	4631      	mov	r1, r6
  404eb2:	4b3d      	ldr	r3, [pc, #244]	; (404fa8 <indev_proc_press+0x18c>)
  404eb4:	4798      	blx	r3
  404eb6:	4b37      	ldr	r3, [pc, #220]	; (404f94 <indev_proc_press+0x178>)
  404eb8:	6018      	str	r0, [r3, #0]
  404eba:	e7f1      	b.n	404ea0 <indev_proc_press+0x84>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
  404ebc:	4628      	mov	r0, r5
  404ebe:	4b3c      	ldr	r3, [pc, #240]	; (404fb0 <indev_proc_press+0x194>)
  404ec0:	4798      	blx	r3
  404ec2:	4631      	mov	r1, r6
  404ec4:	4b38      	ldr	r3, [pc, #224]	; (404fa8 <indev_proc_press+0x18c>)
  404ec6:	4798      	blx	r3
  404ec8:	4b32      	ldr	r3, [pc, #200]	; (404f94 <indev_proc_press+0x178>)
  404eca:	6018      	str	r0, [r3, #0]
        new_obj_searched = true;
  404ecc:	2301      	movs	r3, #1
  404ece:	e7ba      	b.n	404e46 <indev_proc_press+0x2a>
            lv_obj_is_protected(indev_obj_act, LV_PROTECT_PRESS_LOST) == false) {
  404ed0:	2110      	movs	r1, #16
  404ed2:	4618      	mov	r0, r3
  404ed4:	4b37      	ldr	r3, [pc, #220]	; (404fb4 <indev_proc_press+0x198>)
  404ed6:	4798      	blx	r3
    else if(proc->types.pointer.drag_in_prog == 0 &&
  404ed8:	b108      	cbz	r0, 404ede <indev_proc_press+0xc2>
    bool new_obj_searched = false;
  404eda:	2300      	movs	r3, #0
  404edc:	e7b3      	b.n	404e46 <indev_proc_press+0x2a>
        indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_sys(disp), &proc->types.pointer.act_point);
  404ede:	4628      	mov	r0, r5
  404ee0:	4b30      	ldr	r3, [pc, #192]	; (404fa4 <indev_proc_press+0x188>)
  404ee2:	4798      	blx	r3
  404ee4:	1d26      	adds	r6, r4, #4
  404ee6:	4631      	mov	r1, r6
  404ee8:	4b2f      	ldr	r3, [pc, #188]	; (404fa8 <indev_proc_press+0x18c>)
  404eea:	4798      	blx	r3
  404eec:	4b29      	ldr	r3, [pc, #164]	; (404f94 <indev_proc_press+0x178>)
  404eee:	6018      	str	r0, [r3, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
  404ef0:	b120      	cbz	r0, 404efc <indev_proc_press+0xe0>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
  404ef2:	4b28      	ldr	r3, [pc, #160]	; (404f94 <indev_proc_press+0x178>)
  404ef4:	681b      	ldr	r3, [r3, #0]
  404ef6:	b153      	cbz	r3, 404f0e <indev_proc_press+0xf2>
        new_obj_searched = true;
  404ef8:	2301      	movs	r3, #1
  404efa:	e7a4      	b.n	404e46 <indev_proc_press+0x2a>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
  404efc:	4628      	mov	r0, r5
  404efe:	4b2b      	ldr	r3, [pc, #172]	; (404fac <indev_proc_press+0x190>)
  404f00:	4798      	blx	r3
  404f02:	4631      	mov	r1, r6
  404f04:	4b28      	ldr	r3, [pc, #160]	; (404fa8 <indev_proc_press+0x18c>)
  404f06:	4798      	blx	r3
  404f08:	4b22      	ldr	r3, [pc, #136]	; (404f94 <indev_proc_press+0x178>)
  404f0a:	6018      	str	r0, [r3, #0]
  404f0c:	e7f1      	b.n	404ef2 <indev_proc_press+0xd6>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
  404f0e:	4628      	mov	r0, r5
  404f10:	4b27      	ldr	r3, [pc, #156]	; (404fb0 <indev_proc_press+0x194>)
  404f12:	4798      	blx	r3
  404f14:	4631      	mov	r1, r6
  404f16:	4b24      	ldr	r3, [pc, #144]	; (404fa8 <indev_proc_press+0x18c>)
  404f18:	4798      	blx	r3
  404f1a:	4b1e      	ldr	r3, [pc, #120]	; (404f94 <indev_proc_press+0x178>)
  404f1c:	6018      	str	r0, [r3, #0]
        new_obj_searched = true;
  404f1e:	2301      	movs	r3, #1
  404f20:	e791      	b.n	404e46 <indev_proc_press+0x2a>
            lv_event_send(last_obj, LV_EVENT_PRESS_LOST, NULL);
  404f22:	2200      	movs	r2, #0
  404f24:	2102      	movs	r1, #2
  404f26:	4628      	mov	r0, r5
  404f28:	4b23      	ldr	r3, [pc, #140]	; (404fb8 <indev_proc_press+0x19c>)
  404f2a:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  404f2c:	4620      	mov	r0, r4
  404f2e:	4b1c      	ldr	r3, [pc, #112]	; (404fa0 <indev_proc_press+0x184>)
  404f30:	4798      	blx	r3
  404f32:	2800      	cmp	r0, #0
  404f34:	d1a9      	bne.n	404e8a <indev_proc_press+0x6e>
        proc->types.pointer.act_obj  = indev_obj_act; /*Save the pressed object*/
  404f36:	4b17      	ldr	r3, [pc, #92]	; (404f94 <indev_proc_press+0x178>)
  404f38:	681b      	ldr	r3, [r3, #0]
  404f3a:	61a3      	str	r3, [r4, #24]
        proc->types.pointer.last_obj = indev_obj_act;
  404f3c:	61e3      	str	r3, [r4, #28]
        if(indev_obj_act != NULL) {
  404f3e:	2b00      	cmp	r3, #0
  404f40:	d06e      	beq.n	405020 <indev_proc_press+0x204>
            proc->pr_timestamp                 = lv_tick_get();
  404f42:	4b1e      	ldr	r3, [pc, #120]	; (404fbc <indev_proc_press+0x1a0>)
  404f44:	4798      	blx	r3
  404f46:	62e0      	str	r0, [r4, #44]	; 0x2c
            proc->long_pr_sent                 = 0;
  404f48:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  404f4c:	f36f 0300 	bfc	r3, #0, #1
  404f50:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
            proc->types.pointer.drag_limit_out = 0;
  404f54:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
            proc->types.pointer.drag_sum.x     = 0;
  404f58:	2300      	movs	r3, #0
  404f5a:	8223      	strh	r3, [r4, #16]
            proc->types.pointer.drag_sum.y     = 0;
  404f5c:	8263      	strh	r3, [r4, #18]
            proc->types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
  404f5e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
  404f62:	2103      	movs	r1, #3
  404f64:	f361 0284 	bfi	r2, r1, #2, #3
            proc->types.pointer.gesture_sent   = 0;
  404f68:	f363 1245 	bfi	r2, r3, #5, #1
  404f6c:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
            proc->types.pointer.gesture_sum.x  = 0;
  404f70:	84e3      	strh	r3, [r4, #38]	; 0x26
            proc->types.pointer.gesture_sum.y  = 0;
  404f72:	8523      	strh	r3, [r4, #40]	; 0x28
            proc->types.pointer.vect.x         = 0;
  404f74:	81a3      	strh	r3, [r4, #12]
            proc->types.pointer.vect.y         = 0;
  404f76:	81e3      	strh	r3, [r4, #14]
            lv_obj_t * i        = indev_obj_act;
  404f78:	4a06      	ldr	r2, [pc, #24]	; (404f94 <indev_proc_press+0x178>)
  404f7a:	6810      	ldr	r0, [r2, #0]
            lv_obj_t * last_top = NULL;
  404f7c:	461d      	mov	r5, r3
            while(i != NULL) {
  404f7e:	e001      	b.n	404f84 <indev_proc_press+0x168>
                i = lv_obj_get_parent(i);
  404f80:	4b0f      	ldr	r3, [pc, #60]	; (404fc0 <indev_proc_press+0x1a4>)
  404f82:	4798      	blx	r3
            while(i != NULL) {
  404f84:	b1f0      	cbz	r0, 404fc4 <indev_proc_press+0x1a8>
                if(i->top) last_top = i;
  404f86:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
  404f8a:	f013 0f20 	tst.w	r3, #32
  404f8e:	d0f7      	beq.n	404f80 <indev_proc_press+0x164>
  404f90:	4605      	mov	r5, r0
  404f92:	e7f5      	b.n	404f80 <indev_proc_press+0x164>
  404f94:	2040c41c 	.word	0x2040c41c
  404f98:	2040c418 	.word	0x2040c418
  404f9c:	00403b8d 	.word	0x00403b8d
  404fa0:	00403b49 	.word	0x00403b49
  404fa4:	004036ad 	.word	0x004036ad
  404fa8:	00404d6d 	.word	0x00404d6d
  404fac:	00403691 	.word	0x00403691
  404fb0:	00403659 	.word	0x00403659
  404fb4:	00406ded 	.word	0x00406ded
  404fb8:	004058d1 	.word	0x004058d1
  404fbc:	004151ad 	.word	0x004151ad
  404fc0:	004059ed 	.word	0x004059ed
            if(last_top != NULL) {
  404fc4:	b115      	cbz	r5, 404fcc <indev_proc_press+0x1b0>
                lv_obj_move_foreground(last_top);
  404fc6:	4628      	mov	r0, r5
  404fc8:	4b77      	ldr	r3, [pc, #476]	; (4051a8 <indev_proc_press+0x38c>)
  404fca:	4798      	blx	r3
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, indev_act);
  404fcc:	4b77      	ldr	r3, [pc, #476]	; (4051ac <indev_proc_press+0x390>)
  404fce:	6818      	ldr	r0, [r3, #0]
  404fd0:	69c3      	ldr	r3, [r0, #28]
  404fd2:	4a77      	ldr	r2, [pc, #476]	; (4051b0 <indev_proc_press+0x394>)
  404fd4:	6812      	ldr	r2, [r2, #0]
  404fd6:	210b      	movs	r1, #11
  404fd8:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  404fda:	4620      	mov	r0, r4
  404fdc:	4b75      	ldr	r3, [pc, #468]	; (4051b4 <indev_proc_press+0x398>)
  404fde:	4798      	blx	r3
  404fe0:	2800      	cmp	r0, #0
  404fe2:	f47f af52 	bne.w	404e8a <indev_proc_press+0x6e>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
  404fe6:	2200      	movs	r2, #0
  404fe8:	4611      	mov	r1, r2
  404fea:	4b70      	ldr	r3, [pc, #448]	; (4051ac <indev_proc_press+0x390>)
  404fec:	6818      	ldr	r0, [r3, #0]
  404fee:	4b72      	ldr	r3, [pc, #456]	; (4051b8 <indev_proc_press+0x39c>)
  404ff0:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  404ff2:	4620      	mov	r0, r4
  404ff4:	4b6f      	ldr	r3, [pc, #444]	; (4051b4 <indev_proc_press+0x398>)
  404ff6:	4798      	blx	r3
  404ff8:	2800      	cmp	r0, #0
  404ffa:	f47f af46 	bne.w	404e8a <indev_proc_press+0x6e>
            if(indev_act->proc.wait_until_release) return;
  404ffe:	4b6c      	ldr	r3, [pc, #432]	; (4051b0 <indev_proc_press+0x394>)
  405000:	6818      	ldr	r0, [r3, #0]
  405002:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  405006:	f013 0f08 	tst.w	r3, #8
  40500a:	f47f af3e 	bne.w	404e8a <indev_proc_press+0x6e>
            indev_click_focus(&indev_act->proc);
  40500e:	301c      	adds	r0, #28
  405010:	4b6a      	ldr	r3, [pc, #424]	; (4051bc <indev_proc_press+0x3a0>)
  405012:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  405014:	4620      	mov	r0, r4
  405016:	4b67      	ldr	r3, [pc, #412]	; (4051b4 <indev_proc_press+0x398>)
  405018:	4798      	blx	r3
  40501a:	2800      	cmp	r0, #0
  40501c:	f47f af35 	bne.w	404e8a <indev_proc_press+0x6e>
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
  405020:	88a0      	ldrh	r0, [r4, #4]
  405022:	8923      	ldrh	r3, [r4, #8]
  405024:	1ac0      	subs	r0, r0, r3
  405026:	b200      	sxth	r0, r0
  405028:	81a0      	strh	r0, [r4, #12]
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
  40502a:	88e1      	ldrh	r1, [r4, #6]
  40502c:	8963      	ldrh	r3, [r4, #10]
  40502e:	1ac9      	subs	r1, r1, r3
  405030:	b209      	sxth	r1, r1
  405032:	81e1      	strh	r1, [r4, #14]
    proc->types.pointer.drag_throw_vect.x = (proc->types.pointer.drag_throw_vect.x * 5) >> 3;
  405034:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
  405038:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40503c:	10d2      	asrs	r2, r2, #3
  40503e:	82a2      	strh	r2, [r4, #20]
    proc->types.pointer.drag_throw_vect.y = (proc->types.pointer.drag_throw_vect.y * 5) >> 3;
  405040:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
  405044:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  405048:	10db      	asrs	r3, r3, #3
  40504a:	82e3      	strh	r3, [r4, #22]
    if(proc->types.pointer.drag_throw_vect.x < 0)
  40504c:	2a00      	cmp	r2, #0
  40504e:	db7b      	blt.n	405148 <indev_proc_press+0x32c>
    else if(proc->types.pointer.drag_throw_vect.x > 0)
  405050:	2a00      	cmp	r2, #0
  405052:	dd01      	ble.n	405058 <indev_proc_press+0x23c>
        proc->types.pointer.drag_throw_vect.x--;
  405054:	3a01      	subs	r2, #1
  405056:	82a2      	strh	r2, [r4, #20]
    if(proc->types.pointer.drag_throw_vect.y < 0)
  405058:	2b00      	cmp	r3, #0
  40505a:	db78      	blt.n	40514e <indev_proc_press+0x332>
    else if(proc->types.pointer.drag_throw_vect.y > 0)
  40505c:	2b00      	cmp	r3, #0
  40505e:	dd01      	ble.n	405064 <indev_proc_press+0x248>
        proc->types.pointer.drag_throw_vect.y--;
  405060:	3b01      	subs	r3, #1
  405062:	82e3      	strh	r3, [r4, #22]
    proc->types.pointer.drag_throw_vect.x += (proc->types.pointer.vect.x * 4) >> 3;
  405064:	8aa3      	ldrh	r3, [r4, #20]
  405066:	eb03 0060 	add.w	r0, r3, r0, asr #1
  40506a:	82a0      	strh	r0, [r4, #20]
    proc->types.pointer.drag_throw_vect.y += (proc->types.pointer.vect.y * 4) >> 3;
  40506c:	8ae3      	ldrh	r3, [r4, #22]
  40506e:	eb03 0161 	add.w	r1, r3, r1, asr #1
  405072:	82e1      	strh	r1, [r4, #22]
    if(indev_obj_act != NULL) {
  405074:	4b4d      	ldr	r3, [pc, #308]	; (4051ac <indev_proc_press+0x390>)
  405076:	6818      	ldr	r0, [r3, #0]
  405078:	2800      	cmp	r0, #0
  40507a:	f43f af06 	beq.w	404e8a <indev_proc_press+0x6e>
        indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSING, indev_act);
  40507e:	69c3      	ldr	r3, [r0, #28]
  405080:	4a4b      	ldr	r2, [pc, #300]	; (4051b0 <indev_proc_press+0x394>)
  405082:	6812      	ldr	r2, [r2, #0]
  405084:	210c      	movs	r1, #12
  405086:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  405088:	4620      	mov	r0, r4
  40508a:	4b4a      	ldr	r3, [pc, #296]	; (4051b4 <indev_proc_press+0x398>)
  40508c:	4798      	blx	r3
  40508e:	2800      	cmp	r0, #0
  405090:	f47f aefb 	bne.w	404e8a <indev_proc_press+0x6e>
        lv_event_send(indev_obj_act, LV_EVENT_PRESSING, NULL);
  405094:	2200      	movs	r2, #0
  405096:	2101      	movs	r1, #1
  405098:	4b44      	ldr	r3, [pc, #272]	; (4051ac <indev_proc_press+0x390>)
  40509a:	6818      	ldr	r0, [r3, #0]
  40509c:	4b46      	ldr	r3, [pc, #280]	; (4051b8 <indev_proc_press+0x39c>)
  40509e:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  4050a0:	4620      	mov	r0, r4
  4050a2:	4b44      	ldr	r3, [pc, #272]	; (4051b4 <indev_proc_press+0x398>)
  4050a4:	4798      	blx	r3
  4050a6:	2800      	cmp	r0, #0
  4050a8:	f47f aeef 	bne.w	404e8a <indev_proc_press+0x6e>
        if(indev_act->proc.wait_until_release) return;
  4050ac:	4b40      	ldr	r3, [pc, #256]	; (4051b0 <indev_proc_press+0x394>)
  4050ae:	681b      	ldr	r3, [r3, #0]
  4050b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
  4050b4:	f013 0f08 	tst.w	r3, #8
  4050b8:	f47f aee7 	bne.w	404e8a <indev_proc_press+0x6e>
        indev_drag(proc);
  4050bc:	4620      	mov	r0, r4
  4050be:	4b40      	ldr	r3, [pc, #256]	; (4051c0 <indev_proc_press+0x3a4>)
  4050c0:	4798      	blx	r3
        indev_gesture(proc);
  4050c2:	4620      	mov	r0, r4
  4050c4:	4b3f      	ldr	r3, [pc, #252]	; (4051c4 <indev_proc_press+0x3a8>)
  4050c6:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  4050c8:	4620      	mov	r0, r4
  4050ca:	4b3a      	ldr	r3, [pc, #232]	; (4051b4 <indev_proc_press+0x398>)
  4050cc:	4798      	blx	r3
  4050ce:	2800      	cmp	r0, #0
  4050d0:	f47f aedb 	bne.w	404e8a <indev_proc_press+0x6e>
        if(proc->types.pointer.drag_in_prog == 0 && proc->long_pr_sent == 0) {
  4050d4:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  4050d8:	f013 0f02 	tst.w	r3, #2
  4050dc:	d104      	bne.n	4050e8 <indev_proc_press+0x2cc>
  4050de:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  4050e2:	f013 0f01 	tst.w	r3, #1
  4050e6:	d035      	beq.n	405154 <indev_proc_press+0x338>
        if(proc->types.pointer.drag_in_prog == 0 && proc->long_pr_sent == 1) {
  4050e8:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  4050ec:	f013 0f02 	tst.w	r3, #2
  4050f0:	f47f aecb 	bne.w	404e8a <indev_proc_press+0x6e>
  4050f4:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  4050f8:	f013 0f01 	tst.w	r3, #1
  4050fc:	f43f aec5 	beq.w	404e8a <indev_proc_press+0x6e>
            if(lv_tick_elaps(proc->longpr_rep_timestamp) > indev_act->driver.long_press_rep_time) {
  405100:	6b20      	ldr	r0, [r4, #48]	; 0x30
  405102:	4b31      	ldr	r3, [pc, #196]	; (4051c8 <indev_proc_press+0x3ac>)
  405104:	4798      	blx	r3
  405106:	4b2a      	ldr	r3, [pc, #168]	; (4051b0 <indev_proc_press+0x394>)
  405108:	681a      	ldr	r2, [r3, #0]
  40510a:	8b53      	ldrh	r3, [r2, #26]
  40510c:	4298      	cmp	r0, r3
  40510e:	f67f aebc 	bls.w	404e8a <indev_proc_press+0x6e>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, indev_act);
  405112:	4b26      	ldr	r3, [pc, #152]	; (4051ac <indev_proc_press+0x390>)
  405114:	6818      	ldr	r0, [r3, #0]
  405116:	69c3      	ldr	r3, [r0, #28]
  405118:	2110      	movs	r1, #16
  40511a:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  40511c:	4620      	mov	r0, r4
  40511e:	4b25      	ldr	r3, [pc, #148]	; (4051b4 <indev_proc_press+0x398>)
  405120:	4798      	blx	r3
  405122:	2800      	cmp	r0, #0
  405124:	f47f aeb1 	bne.w	404e8a <indev_proc_press+0x6e>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
  405128:	2200      	movs	r2, #0
  40512a:	2105      	movs	r1, #5
  40512c:	4b1f      	ldr	r3, [pc, #124]	; (4051ac <indev_proc_press+0x390>)
  40512e:	6818      	ldr	r0, [r3, #0]
  405130:	4b21      	ldr	r3, [pc, #132]	; (4051b8 <indev_proc_press+0x39c>)
  405132:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  405134:	4620      	mov	r0, r4
  405136:	4b1f      	ldr	r3, [pc, #124]	; (4051b4 <indev_proc_press+0x398>)
  405138:	4798      	blx	r3
  40513a:	2800      	cmp	r0, #0
  40513c:	f47f aea5 	bne.w	404e8a <indev_proc_press+0x6e>
                proc->longpr_rep_timestamp = lv_tick_get();
  405140:	4b22      	ldr	r3, [pc, #136]	; (4051cc <indev_proc_press+0x3b0>)
  405142:	4798      	blx	r3
  405144:	6320      	str	r0, [r4, #48]	; 0x30
  405146:	e6a0      	b.n	404e8a <indev_proc_press+0x6e>
        proc->types.pointer.drag_throw_vect.x++;
  405148:	3201      	adds	r2, #1
  40514a:	82a2      	strh	r2, [r4, #20]
  40514c:	e784      	b.n	405058 <indev_proc_press+0x23c>
        proc->types.pointer.drag_throw_vect.y++;
  40514e:	3301      	adds	r3, #1
  405150:	82e3      	strh	r3, [r4, #22]
  405152:	e787      	b.n	405064 <indev_proc_press+0x248>
            if(lv_tick_elaps(proc->pr_timestamp) > indev_act->driver.long_press_time) {
  405154:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  405156:	4b1c      	ldr	r3, [pc, #112]	; (4051c8 <indev_proc_press+0x3ac>)
  405158:	4798      	blx	r3
  40515a:	4b15      	ldr	r3, [pc, #84]	; (4051b0 <indev_proc_press+0x394>)
  40515c:	681a      	ldr	r2, [r3, #0]
  40515e:	8b13      	ldrh	r3, [r2, #24]
  405160:	4298      	cmp	r0, r3
  405162:	d9c1      	bls.n	4050e8 <indev_proc_press+0x2cc>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, indev_act);
  405164:	4b11      	ldr	r3, [pc, #68]	; (4051ac <indev_proc_press+0x390>)
  405166:	6818      	ldr	r0, [r3, #0]
  405168:	69c3      	ldr	r3, [r0, #28]
  40516a:	210f      	movs	r1, #15
  40516c:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  40516e:	4620      	mov	r0, r4
  405170:	4b10      	ldr	r3, [pc, #64]	; (4051b4 <indev_proc_press+0x398>)
  405172:	4798      	blx	r3
  405174:	2800      	cmp	r0, #0
  405176:	f47f ae88 	bne.w	404e8a <indev_proc_press+0x6e>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
  40517a:	2200      	movs	r2, #0
  40517c:	2104      	movs	r1, #4
  40517e:	4b0b      	ldr	r3, [pc, #44]	; (4051ac <indev_proc_press+0x390>)
  405180:	6818      	ldr	r0, [r3, #0]
  405182:	4b0d      	ldr	r3, [pc, #52]	; (4051b8 <indev_proc_press+0x39c>)
  405184:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  405186:	4620      	mov	r0, r4
  405188:	4b0a      	ldr	r3, [pc, #40]	; (4051b4 <indev_proc_press+0x398>)
  40518a:	4798      	blx	r3
  40518c:	2800      	cmp	r0, #0
  40518e:	f47f ae7c 	bne.w	404e8a <indev_proc_press+0x6e>
                proc->long_pr_sent = 1;
  405192:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  405196:	f043 0301 	orr.w	r3, r3, #1
  40519a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
                proc->longpr_rep_timestamp = lv_tick_get();
  40519e:	4b0b      	ldr	r3, [pc, #44]	; (4051cc <indev_proc_press+0x3b0>)
  4051a0:	4798      	blx	r3
  4051a2:	6320      	str	r0, [r4, #48]	; 0x30
  4051a4:	e7a0      	b.n	4050e8 <indev_proc_press+0x2cc>
  4051a6:	4770      	bx	lr
  4051a8:	00406015 	.word	0x00406015
  4051ac:	2040c41c 	.word	0x2040c41c
  4051b0:	2040c418 	.word	0x2040c418
  4051b4:	00403b49 	.word	0x00403b49
  4051b8:	004058d1 	.word	0x004058d1
  4051bc:	00403f15 	.word	0x00403f15
  4051c0:	0040409d 	.word	0x0040409d
  4051c4:	004043ad 	.word	0x004043ad
  4051c8:	004151c9 	.word	0x004151c9
  4051cc:	004151ad 	.word	0x004151ad

004051d0 <indev_pointer_proc>:
{
  4051d0:	b538      	push	{r3, r4, r5, lr}
  4051d2:	4604      	mov	r4, r0
  4051d4:	460d      	mov	r5, r1
    if(i->cursor != NULL &&
  4051d6:	6d40      	ldr	r0, [r0, #84]	; 0x54
  4051d8:	b148      	cbz	r0, 4051ee <indev_pointer_proc+0x1e>
       (i->proc.types.pointer.last_point.x != data->point.x || i->proc.types.pointer.last_point.y != data->point.y)) {
  4051da:	6a62      	ldr	r2, [r4, #36]	; 0x24
  4051dc:	680b      	ldr	r3, [r1, #0]
    if(i->cursor != NULL &&
  4051de:	429a      	cmp	r2, r3
  4051e0:	d005      	beq.n	4051ee <indev_pointer_proc+0x1e>
        lv_obj_set_pos(i->cursor, data->point.x, data->point.y);
  4051e2:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
  4051e6:	f9b1 1000 	ldrsh.w	r1, [r1]
  4051ea:	4b0d      	ldr	r3, [pc, #52]	; (405220 <indev_pointer_proc+0x50>)
  4051ec:	4798      	blx	r3
    i->proc.types.pointer.act_point.x = data->point.x;
  4051ee:	f9b5 3000 	ldrsh.w	r3, [r5]
  4051f2:	8423      	strh	r3, [r4, #32]
    i->proc.types.pointer.act_point.y = data->point.y;
  4051f4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  4051f8:	8463      	strh	r3, [r4, #34]	; 0x22
    if(i->proc.state == LV_INDEV_STATE_PR) {
  4051fa:	7f23      	ldrb	r3, [r4, #28]
  4051fc:	2b01      	cmp	r3, #1
  4051fe:	d00a      	beq.n	405216 <indev_pointer_proc+0x46>
        indev_proc_release(&i->proc);
  405200:	f104 001c 	add.w	r0, r4, #28
  405204:	4b07      	ldr	r3, [pc, #28]	; (405224 <indev_pointer_proc+0x54>)
  405206:	4798      	blx	r3
    i->proc.types.pointer.last_point.x = i->proc.types.pointer.act_point.x;
  405208:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
  40520c:	84a3      	strh	r3, [r4, #36]	; 0x24
    i->proc.types.pointer.last_point.y = i->proc.types.pointer.act_point.y;
  40520e:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
  405212:	84e3      	strh	r3, [r4, #38]	; 0x26
  405214:	bd38      	pop	{r3, r4, r5, pc}
        indev_proc_press(&i->proc);
  405216:	f104 001c 	add.w	r0, r4, #28
  40521a:	4b03      	ldr	r3, [pc, #12]	; (405228 <indev_pointer_proc+0x58>)
  40521c:	4798      	blx	r3
  40521e:	e7f3      	b.n	405208 <indev_pointer_proc+0x38>
  405220:	0040607d 	.word	0x0040607d
  405224:	00403d69 	.word	0x00403d69
  405228:	00404e1d 	.word	0x00404e1d

0040522c <indev_button_proc>:
    if(i->btn_points == NULL) {
  40522c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  40522e:	2b00      	cmp	r3, #0
  405230:	d03a      	beq.n	4052a8 <indev_button_proc+0x7c>
{
  405232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405236:	460d      	mov	r5, r1
  405238:	4604      	mov	r4, r0
    lv_coord_t x = i->btn_points[data->btn_id].x;
  40523a:	688a      	ldr	r2, [r1, #8]
  40523c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  405240:	f933 7022 	ldrsh.w	r7, [r3, r2, lsl #2]
    lv_coord_t y = i->btn_points[data->btn_id].y;
  405244:	f9b1 8002 	ldrsh.w	r8, [r1, #2]
    if(data->state == LV_INDEV_STATE_PR) {
  405248:	7bab      	ldrb	r3, [r5, #14]
  40524a:	2b01      	cmp	r3, #1
  40524c:	d01a      	beq.n	405284 <indev_button_proc+0x58>
    if(indev_reset_check(&i->proc)) return;
  40524e:	f104 061c 	add.w	r6, r4, #28
  405252:	4630      	mov	r0, r6
  405254:	4b15      	ldr	r3, [pc, #84]	; (4052ac <indev_button_proc+0x80>)
  405256:	4798      	blx	r3
  405258:	b990      	cbnz	r0, 405280 <indev_button_proc+0x54>
    i->proc.types.pointer.act_point.x = x;
  40525a:	8427      	strh	r7, [r4, #32]
    i->proc.types.pointer.act_point.y = y;
  40525c:	f8a4 8022 	strh.w	r8, [r4, #34]	; 0x22
    if(data->state == LV_INDEV_STATE_PR) indev_proc_press(&i->proc);
  405260:	7bab      	ldrb	r3, [r5, #14]
  405262:	2b01      	cmp	r3, #1
  405264:	d01c      	beq.n	4052a0 <indev_button_proc+0x74>
    else indev_proc_release(&i->proc);
  405266:	4630      	mov	r0, r6
  405268:	4b11      	ldr	r3, [pc, #68]	; (4052b0 <indev_button_proc+0x84>)
  40526a:	4798      	blx	r3
    if(indev_reset_check(&i->proc)) return;
  40526c:	4630      	mov	r0, r6
  40526e:	4b0f      	ldr	r3, [pc, #60]	; (4052ac <indev_button_proc+0x80>)
  405270:	4798      	blx	r3
  405272:	b928      	cbnz	r0, 405280 <indev_button_proc+0x54>
    i->proc.types.pointer.last_point.x = i->proc.types.pointer.act_point.x;
  405274:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
  405278:	84a3      	strh	r3, [r4, #36]	; 0x24
    i->proc.types.pointer.last_point.y = i->proc.types.pointer.act_point.y;
  40527a:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
  40527e:	84e3      	strh	r3, [r4, #38]	; 0x26
  405280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(i->proc.types.pointer.last_point.x != x ||
  405284:	f9b0 3024 	ldrsh.w	r3, [r0, #36]	; 0x24
  405288:	429f      	cmp	r7, r3
  40528a:	d004      	beq.n	405296 <indev_button_proc+0x6a>
            indev_proc_release(&i->proc);
  40528c:	f104 001c 	add.w	r0, r4, #28
  405290:	4b07      	ldr	r3, [pc, #28]	; (4052b0 <indev_button_proc+0x84>)
  405292:	4798      	blx	r3
  405294:	e7db      	b.n	40524e <indev_button_proc+0x22>
           i->proc.types.pointer.last_point.y != y) {
  405296:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26
        if(i->proc.types.pointer.last_point.x != x ||
  40529a:	4598      	cmp	r8, r3
  40529c:	d1f6      	bne.n	40528c <indev_button_proc+0x60>
  40529e:	e7d6      	b.n	40524e <indev_button_proc+0x22>
    if(data->state == LV_INDEV_STATE_PR) indev_proc_press(&i->proc);
  4052a0:	4630      	mov	r0, r6
  4052a2:	4b04      	ldr	r3, [pc, #16]	; (4052b4 <indev_button_proc+0x88>)
  4052a4:	4798      	blx	r3
  4052a6:	e7e1      	b.n	40526c <indev_button_proc+0x40>
  4052a8:	4770      	bx	lr
  4052aa:	bf00      	nop
  4052ac:	00403b49 	.word	0x00403b49
  4052b0:	00403d69 	.word	0x00403d69
  4052b4:	00404e1d 	.word	0x00404e1d

004052b8 <_lv_indev_read_task>:
    indev_act = task->user_data;
  4052b8:	68c0      	ldr	r0, [r0, #12]
  4052ba:	4b2e      	ldr	r3, [pc, #184]	; (405374 <_lv_indev_read_task+0xbc>)
  4052bc:	6018      	str	r0, [r3, #0]
    if(indev_act->driver.disp == NULL) return; /*Not assigned to any displays*/
  4052be:	68c3      	ldr	r3, [r0, #12]
  4052c0:	2b00      	cmp	r3, #0
  4052c2:	d055      	beq.n	405370 <_lv_indev_read_task+0xb8>
{
  4052c4:	b530      	push	{r4, r5, lr}
  4052c6:	b085      	sub	sp, #20
    indev_proc_reset_query_handler(indev_act);
  4052c8:	4b2b      	ldr	r3, [pc, #172]	; (405378 <_lv_indev_read_task+0xc0>)
  4052ca:	4798      	blx	r3
    if(indev_act->proc.disabled) return;
  4052cc:	4b29      	ldr	r3, [pc, #164]	; (405374 <_lv_indev_read_task+0xbc>)
  4052ce:	681b      	ldr	r3, [r3, #0]
  4052d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
  4052d4:	f013 0f04 	tst.w	r3, #4
  4052d8:	d018      	beq.n	40530c <_lv_indev_read_task+0x54>
}
  4052da:	b005      	add	sp, #20
  4052dc:	bd30      	pop	{r4, r5, pc}
            indev_act->driver.disp->last_activity_time = lv_tick_get();
  4052de:	68dc      	ldr	r4, [r3, #12]
  4052e0:	4b26      	ldr	r3, [pc, #152]	; (40537c <_lv_indev_read_task+0xc4>)
  4052e2:	4798      	blx	r3
  4052e4:	f8c4 0184 	str.w	r0, [r4, #388]	; 0x184
  4052e8:	e025      	b.n	405336 <_lv_indev_read_task+0x7e>
        else if(indev_act->driver.type == LV_INDEV_TYPE_ENCODER && data.enc_diff) {
  4052ea:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
  4052ee:	b312      	cbz	r2, 405336 <_lv_indev_read_task+0x7e>
            indev_act->driver.disp->last_activity_time = lv_tick_get();
  4052f0:	68dc      	ldr	r4, [r3, #12]
  4052f2:	4b22      	ldr	r3, [pc, #136]	; (40537c <_lv_indev_read_task+0xc4>)
  4052f4:	4798      	blx	r3
  4052f6:	f8c4 0184 	str.w	r0, [r4, #388]	; 0x184
  4052fa:	e01c      	b.n	405336 <_lv_indev_read_task+0x7e>
            indev_pointer_proc(indev_act, &data);
  4052fc:	4669      	mov	r1, sp
  4052fe:	4b20      	ldr	r3, [pc, #128]	; (405380 <_lv_indev_read_task+0xc8>)
  405300:	4798      	blx	r3
        indev_proc_reset_query_handler(indev_act);
  405302:	4b1c      	ldr	r3, [pc, #112]	; (405374 <_lv_indev_read_task+0xbc>)
  405304:	6818      	ldr	r0, [r3, #0]
  405306:	4b1c      	ldr	r3, [pc, #112]	; (405378 <_lv_indev_read_task+0xc0>)
  405308:	4798      	blx	r3
    } while(more_to_read);
  40530a:	b35d      	cbz	r5, 405364 <_lv_indev_read_task+0xac>
        more_to_read = _lv_indev_read(indev_act, &data);
  40530c:	4c19      	ldr	r4, [pc, #100]	; (405374 <_lv_indev_read_task+0xbc>)
  40530e:	4669      	mov	r1, sp
  405310:	6820      	ldr	r0, [r4, #0]
  405312:	4b1c      	ldr	r3, [pc, #112]	; (405384 <_lv_indev_read_task+0xcc>)
  405314:	4798      	blx	r3
  405316:	4605      	mov	r5, r0
        indev_proc_reset_query_handler(indev_act);
  405318:	6820      	ldr	r0, [r4, #0]
  40531a:	4b17      	ldr	r3, [pc, #92]	; (405378 <_lv_indev_read_task+0xc0>)
  40531c:	4798      	blx	r3
        indev_obj_act = NULL;
  40531e:	2200      	movs	r2, #0
  405320:	4b19      	ldr	r3, [pc, #100]	; (405388 <_lv_indev_read_task+0xd0>)
  405322:	601a      	str	r2, [r3, #0]
        indev_act->proc.state = data.state;
  405324:	6823      	ldr	r3, [r4, #0]
  405326:	f89d 200e 	ldrb.w	r2, [sp, #14]
  40532a:	771a      	strb	r2, [r3, #28]
        if(indev_act->proc.state == LV_INDEV_STATE_PR) {
  40532c:	2a01      	cmp	r2, #1
  40532e:	d0d6      	beq.n	4052de <_lv_indev_read_task+0x26>
        else if(indev_act->driver.type == LV_INDEV_TYPE_ENCODER && data.enc_diff) {
  405330:	781a      	ldrb	r2, [r3, #0]
  405332:	2a04      	cmp	r2, #4
  405334:	d0d9      	beq.n	4052ea <_lv_indev_read_task+0x32>
        if(indev_act->driver.type == LV_INDEV_TYPE_POINTER) {
  405336:	4b0f      	ldr	r3, [pc, #60]	; (405374 <_lv_indev_read_task+0xbc>)
  405338:	6818      	ldr	r0, [r3, #0]
  40533a:	7803      	ldrb	r3, [r0, #0]
  40533c:	2b01      	cmp	r3, #1
  40533e:	d0dd      	beq.n	4052fc <_lv_indev_read_task+0x44>
        else if(indev_act->driver.type == LV_INDEV_TYPE_KEYPAD) {
  405340:	2b02      	cmp	r3, #2
  405342:	d007      	beq.n	405354 <_lv_indev_read_task+0x9c>
        else if(indev_act->driver.type == LV_INDEV_TYPE_ENCODER) {
  405344:	2b04      	cmp	r3, #4
  405346:	d009      	beq.n	40535c <_lv_indev_read_task+0xa4>
        else if(indev_act->driver.type == LV_INDEV_TYPE_BUTTON) {
  405348:	2b03      	cmp	r3, #3
  40534a:	d1da      	bne.n	405302 <_lv_indev_read_task+0x4a>
            indev_button_proc(indev_act, &data);
  40534c:	4669      	mov	r1, sp
  40534e:	4b0f      	ldr	r3, [pc, #60]	; (40538c <_lv_indev_read_task+0xd4>)
  405350:	4798      	blx	r3
  405352:	e7d6      	b.n	405302 <_lv_indev_read_task+0x4a>
            indev_keypad_proc(indev_act, &data);
  405354:	4669      	mov	r1, sp
  405356:	4b0e      	ldr	r3, [pc, #56]	; (405390 <_lv_indev_read_task+0xd8>)
  405358:	4798      	blx	r3
  40535a:	e7d2      	b.n	405302 <_lv_indev_read_task+0x4a>
            indev_encoder_proc(indev_act, &data);
  40535c:	4669      	mov	r1, sp
  40535e:	4b0d      	ldr	r3, [pc, #52]	; (405394 <_lv_indev_read_task+0xdc>)
  405360:	4798      	blx	r3
  405362:	e7ce      	b.n	405302 <_lv_indev_read_task+0x4a>
    indev_act     = NULL;
  405364:	2300      	movs	r3, #0
  405366:	4a03      	ldr	r2, [pc, #12]	; (405374 <_lv_indev_read_task+0xbc>)
  405368:	6013      	str	r3, [r2, #0]
    indev_obj_act = NULL;
  40536a:	4a07      	ldr	r2, [pc, #28]	; (405388 <_lv_indev_read_task+0xd0>)
  40536c:	6013      	str	r3, [r2, #0]
  40536e:	e7b4      	b.n	4052da <_lv_indev_read_task+0x22>
  405370:	4770      	bx	lr
  405372:	bf00      	nop
  405374:	2040c418 	.word	0x2040c418
  405378:	00403af1 	.word	0x00403af1
  40537c:	004151ad 	.word	0x004151ad
  405380:	004051d1 	.word	0x004051d1
  405384:	00415145 	.word	0x00415145
  405388:	2040c41c 	.word	0x2040c41c
  40538c:	0040522d 	.word	0x0040522d
  405390:	004044a5 	.word	0x004044a5
  405394:	004047d1 	.word	0x004047d1

00405398 <lv_event_mark_deleted>:

#endif

static void lv_event_mark_deleted(lv_obj_t * obj)
{
    lv_event_temp_data_t * t = event_temp_data_head;
  405398:	4b05      	ldr	r3, [pc, #20]	; (4053b0 <lv_event_mark_deleted+0x18>)
  40539a:	681b      	ldr	r3, [r3, #0]

    while(t) {
  40539c:	e000      	b.n	4053a0 <lv_event_mark_deleted+0x8>
        if(t->obj == obj) t->deleted = true;
        t = t->prev;
  40539e:	689b      	ldr	r3, [r3, #8]
    while(t) {
  4053a0:	b12b      	cbz	r3, 4053ae <lv_event_mark_deleted+0x16>
        if(t->obj == obj) t->deleted = true;
  4053a2:	681a      	ldr	r2, [r3, #0]
  4053a4:	4282      	cmp	r2, r0
  4053a6:	d1fa      	bne.n	40539e <lv_event_mark_deleted+0x6>
  4053a8:	2201      	movs	r2, #1
  4053aa:	711a      	strb	r2, [r3, #4]
  4053ac:	e7f7      	b.n	40539e <lv_event_mark_deleted+0x6>
    }
}
  4053ae:	4770      	bx	lr
  4053b0:	2040c424 	.word	0x2040c424

004053b4 <style_prop_is_cacheble>:
}

static bool style_prop_is_cacheble(lv_style_property_t prop)
{

    switch(prop) {
  4053b4:	2850      	cmp	r0, #80	; 0x50
  4053b6:	d017      	beq.n	4053e8 <style_prop_is_cacheble+0x34>
  4053b8:	d90c      	bls.n	4053d4 <style_prop_is_cacheble+0x20>
  4053ba:	28ff      	cmp	r0, #255	; 0xff
  4053bc:	d014      	beq.n	4053e8 <style_prop_is_cacheble+0x34>
  4053be:	d82e      	bhi.n	40541e <style_prop_is_cacheble+0x6a>
  4053c0:	286e      	cmp	r0, #110	; 0x6e
  4053c2:	d011      	beq.n	4053e8 <style_prop_is_cacheble+0x34>
  4053c4:	d926      	bls.n	405414 <style_prop_is_cacheble+0x60>
  4053c6:	287f      	cmp	r0, #127	; 0x7f
  4053c8:	d00e      	beq.n	4053e8 <style_prop_is_cacheble+0x34>
  4053ca:	2891      	cmp	r0, #145	; 0x91
  4053cc:	d00c      	beq.n	4053e8 <style_prop_is_cacheble+0x34>
  4053ce:	2872      	cmp	r0, #114	; 0x72
  4053d0:	d115      	bne.n	4053fe <style_prop_is_cacheble+0x4a>
  4053d2:	e009      	b.n	4053e8 <style_prop_is_cacheble+0x34>
  4053d4:	2818      	cmp	r0, #24
  4053d6:	d909      	bls.n	4053ec <style_prop_is_cacheble+0x38>
  4053d8:	2833      	cmp	r0, #51	; 0x33
  4053da:	d816      	bhi.n	40540a <style_prop_is_cacheble+0x56>
  4053dc:	2830      	cmp	r0, #48	; 0x30
  4053de:	d203      	bcs.n	4053e8 <style_prop_is_cacheble+0x34>
  4053e0:	2820      	cmp	r0, #32
  4053e2:	d001      	beq.n	4053e8 <style_prop_is_cacheble+0x34>
  4053e4:	282c      	cmp	r0, #44	; 0x2c
  4053e6:	d10a      	bne.n	4053fe <style_prop_is_cacheble+0x4a>
        case LV_STYLE_OUTLINE_BLEND_MODE:
        case LV_STYLE_PATTERN_BLEND_MODE:
        case LV_STYLE_SHADOW_BLEND_MODE:
        case LV_STYLE_TEXT_BLEND_MODE:
        case LV_STYLE_VALUE_BLEND_MODE:
            return true;
  4053e8:	2001      	movs	r0, #1
  4053ea:	4770      	bx	lr
    switch(prop) {
  4053ec:	2815      	cmp	r0, #21
  4053ee:	d2fb      	bcs.n	4053e8 <style_prop_is_cacheble+0x34>
  4053f0:	2807      	cmp	r0, #7
  4053f2:	d806      	bhi.n	405402 <style_prop_is_cacheble+0x4e>
  4053f4:	2804      	cmp	r0, #4
  4053f6:	d2f7      	bcs.n	4053e8 <style_prop_is_cacheble+0x34>
  4053f8:	3801      	subs	r0, #1
  4053fa:	2801      	cmp	r0, #1
  4053fc:	d9f4      	bls.n	4053e8 <style_prop_is_cacheble+0x34>
            break;
        default:
            return false;
  4053fe:	2000      	movs	r0, #0
    }
}
  405400:	4770      	bx	lr
    switch(prop) {
  405402:	3810      	subs	r0, #16
  405404:	2803      	cmp	r0, #3
  405406:	d8fa      	bhi.n	4053fe <style_prop_is_cacheble+0x4a>
  405408:	e7ee      	b.n	4053e8 <style_prop_is_cacheble+0x34>
  40540a:	2840      	cmp	r0, #64	; 0x40
  40540c:	d0ec      	beq.n	4053e8 <style_prop_is_cacheble+0x34>
  40540e:	2842      	cmp	r0, #66	; 0x42
  405410:	d1f5      	bne.n	4053fe <style_prop_is_cacheble+0x4a>
  405412:	e7e9      	b.n	4053e8 <style_prop_is_cacheble+0x34>
  405414:	2854      	cmp	r0, #84	; 0x54
  405416:	d0e7      	beq.n	4053e8 <style_prop_is_cacheble+0x34>
  405418:	2860      	cmp	r0, #96	; 0x60
  40541a:	d1f0      	bne.n	4053fe <style_prop_is_cacheble+0x4a>
  40541c:	e7e4      	b.n	4053e8 <style_prop_is_cacheble+0x34>
  40541e:	f248 0383 	movw	r3, #32899	; 0x8083
  405422:	4298      	cmp	r0, r3
  405424:	d0e0      	beq.n	4053e8 <style_prop_is_cacheble+0x34>
  405426:	d90c      	bls.n	405442 <style_prop_is_cacheble+0x8e>
  405428:	f248 03a0 	movw	r3, #32928	; 0x80a0
  40542c:	4298      	cmp	r0, r3
  40542e:	d0db      	beq.n	4053e8 <style_prop_is_cacheble+0x34>
  405430:	f248 03ad 	movw	r3, #32941	; 0x80ad
  405434:	4298      	cmp	r0, r3
  405436:	d0d7      	beq.n	4053e8 <style_prop_is_cacheble+0x34>
  405438:	f248 038e 	movw	r3, #32910	; 0x808e
  40543c:	4298      	cmp	r0, r3
  40543e:	d1de      	bne.n	4053fe <style_prop_is_cacheble+0x4a>
  405440:	e7d2      	b.n	4053e8 <style_prop_is_cacheble+0x34>
  405442:	f248 030c 	movw	r3, #32780	; 0x800c
  405446:	4298      	cmp	r0, r3
  405448:	d0ce      	beq.n	4053e8 <style_prop_is_cacheble+0x34>
  40544a:	d3d8      	bcc.n	4053fe <style_prop_is_cacheble+0x4a>
  40544c:	4b02      	ldr	r3, [pc, #8]	; (405458 <style_prop_is_cacheble+0xa4>)
  40544e:	4403      	add	r3, r0
  405450:	2b01      	cmp	r3, #1
  405452:	d8d4      	bhi.n	4053fe <style_prop_is_cacheble+0x4a>
  405454:	e7c8      	b.n	4053e8 <style_prop_is_cacheble+0x34>
  405456:	bf00      	nop
  405458:	ffff7f80 	.word	0xffff7f80

0040545c <refresh_children_position>:
{
  40545c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40545e:	460e      	mov	r6, r1
  405460:	4615      	mov	r5, r2
    _LV_LL_READ(obj->child_ll, i) {
  405462:	1d07      	adds	r7, r0, #4
  405464:	4638      	mov	r0, r7
  405466:	4b0f      	ldr	r3, [pc, #60]	; (4054a4 <refresh_children_position+0x48>)
  405468:	4798      	blx	r3
  40546a:	4604      	mov	r4, r0
  40546c:	e017      	b.n	40549e <refresh_children_position+0x42>
        i->coords.x1 += x_diff;
  40546e:	b2b2      	uxth	r2, r6
  405470:	8a23      	ldrh	r3, [r4, #16]
  405472:	4413      	add	r3, r2
  405474:	8223      	strh	r3, [r4, #16]
        i->coords.y1 += y_diff;
  405476:	b2ab      	uxth	r3, r5
  405478:	8a61      	ldrh	r1, [r4, #18]
  40547a:	4419      	add	r1, r3
  40547c:	8261      	strh	r1, [r4, #18]
        i->coords.x2 += x_diff;
  40547e:	8aa1      	ldrh	r1, [r4, #20]
  405480:	440a      	add	r2, r1
  405482:	82a2      	strh	r2, [r4, #20]
        i->coords.y2 += y_diff;
  405484:	8ae2      	ldrh	r2, [r4, #22]
  405486:	4413      	add	r3, r2
  405488:	82e3      	strh	r3, [r4, #22]
        refresh_children_position(i, x_diff, y_diff);
  40548a:	462a      	mov	r2, r5
  40548c:	4631      	mov	r1, r6
  40548e:	4620      	mov	r0, r4
  405490:	f7ff ffe4 	bl	40545c <refresh_children_position>
    _LV_LL_READ(obj->child_ll, i) {
  405494:	4621      	mov	r1, r4
  405496:	4638      	mov	r0, r7
  405498:	4b03      	ldr	r3, [pc, #12]	; (4054a8 <refresh_children_position+0x4c>)
  40549a:	4798      	blx	r3
  40549c:	4604      	mov	r4, r0
  40549e:	2c00      	cmp	r4, #0
  4054a0:	d1e5      	bne.n	40546e <refresh_children_position+0x12>
}
  4054a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4054a4:	004162a5 	.word	0x004162a5
  4054a8:	004162b9 	.word	0x004162b9

004054ac <style_snapshot_compare>:
    _lv_obj_disable_style_caching(obj, false);
    list->skip_trans = trans_ori;
}

static style_snapshot_res_t style_snapshot_compare(style_snapshot_t * shot1, style_snapshot_t * shot2)
{
  4054ac:	b538      	push	{r3, r4, r5, lr}
  4054ae:	4604      	mov	r4, r0
  4054b0:	460d      	mov	r5, r1
    if(memcmp(shot1, shot2, sizeof(style_snapshot_t)) == 0) return STYLE_COMPARE_SAME;
  4054b2:	22bc      	movs	r2, #188	; 0xbc
  4054b4:	4b55      	ldr	r3, [pc, #340]	; (40560c <style_snapshot_compare+0x160>)
  4054b6:	4798      	blx	r3
  4054b8:	2800      	cmp	r0, #0
  4054ba:	f000 8086 	beq.w	4055ca <style_snapshot_compare+0x11e>

    if(shot1->pad_top != shot2->pad_top) return STYLE_COMPARE_DIFF;
  4054be:	f9b4 2092 	ldrsh.w	r2, [r4, #146]	; 0x92
  4054c2:	f9b5 3092 	ldrsh.w	r3, [r5, #146]	; 0x92
  4054c6:	429a      	cmp	r2, r3
  4054c8:	d001      	beq.n	4054ce <style_snapshot_compare+0x22>
  4054ca:	2002      	movs	r0, #2
  4054cc:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->pad_bottom != shot2->pad_bottom) return STYLE_COMPARE_DIFF;
  4054ce:	f9b4 2094 	ldrsh.w	r2, [r4, #148]	; 0x94
  4054d2:	f9b5 3094 	ldrsh.w	r3, [r5, #148]	; 0x94
  4054d6:	429a      	cmp	r2, r3
  4054d8:	d001      	beq.n	4054de <style_snapshot_compare+0x32>
  4054da:	2002      	movs	r0, #2
  4054dc:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->pad_left != shot2->pad_right) return STYLE_COMPARE_DIFF;
  4054de:	f9b4 2098 	ldrsh.w	r2, [r4, #152]	; 0x98
  4054e2:	f9b5 3096 	ldrsh.w	r3, [r5, #150]	; 0x96
  4054e6:	429a      	cmp	r2, r3
  4054e8:	d001      	beq.n	4054ee <style_snapshot_compare+0x42>
  4054ea:	2002      	movs	r0, #2
  4054ec:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->pad_right != shot2->pad_right) return STYLE_COMPARE_DIFF;
  4054ee:	f9b4 2096 	ldrsh.w	r2, [r4, #150]	; 0x96
  4054f2:	4293      	cmp	r3, r2
  4054f4:	d001      	beq.n	4054fa <style_snapshot_compare+0x4e>
  4054f6:	2002      	movs	r0, #2
  4054f8:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->pad_top != shot2->pad_top) return STYLE_COMPARE_DIFF;
    if(shot1->pad_inner != shot2->pad_inner) return STYLE_COMPARE_DIFF;
  4054fa:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	; 0x9a
  4054fe:	f9b5 309a 	ldrsh.w	r3, [r5, #154]	; 0x9a
  405502:	429a      	cmp	r2, r3
  405504:	d001      	beq.n	40550a <style_snapshot_compare+0x5e>
  405506:	2002      	movs	r0, #2
  405508:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->margin_top != shot2->margin_top) return STYLE_COMPARE_DIFF;
  40550a:	f9b4 209c 	ldrsh.w	r2, [r4, #156]	; 0x9c
  40550e:	f9b5 309c 	ldrsh.w	r3, [r5, #156]	; 0x9c
  405512:	429a      	cmp	r2, r3
  405514:	d001      	beq.n	40551a <style_snapshot_compare+0x6e>
  405516:	2002      	movs	r0, #2
  405518:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->margin_bottom != shot2->margin_bottom) return STYLE_COMPARE_DIFF;
  40551a:	f9b4 209e 	ldrsh.w	r2, [r4, #158]	; 0x9e
  40551e:	f9b5 309e 	ldrsh.w	r3, [r5, #158]	; 0x9e
  405522:	429a      	cmp	r2, r3
  405524:	d153      	bne.n	4055ce <style_snapshot_compare+0x122>
    if(shot1->margin_left != shot2->margin_right) return STYLE_COMPARE_DIFF;
  405526:	f9b4 20a0 	ldrsh.w	r2, [r4, #160]	; 0xa0
  40552a:	f9b5 30a2 	ldrsh.w	r3, [r5, #162]	; 0xa2
  40552e:	429a      	cmp	r2, r3
  405530:	d14f      	bne.n	4055d2 <style_snapshot_compare+0x126>
    if(shot1->margin_right != shot2->margin_right) return STYLE_COMPARE_DIFF;
  405532:	f9b4 20a2 	ldrsh.w	r2, [r4, #162]	; 0xa2
  405536:	4293      	cmp	r3, r2
  405538:	d14d      	bne.n	4055d6 <style_snapshot_compare+0x12a>
    if(shot1->margin_top != shot2->margin_top) return STYLE_COMPARE_DIFF;
    if(shot1->transform_width != shot2->transform_width) return STYLE_COMPARE_DIFF;
  40553a:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
  40553e:	f9b5 30a6 	ldrsh.w	r3, [r5, #166]	; 0xa6
  405542:	429a      	cmp	r2, r3
  405544:	d149      	bne.n	4055da <style_snapshot_compare+0x12e>
    if(shot1->transform_height != shot2->transform_height) return STYLE_COMPARE_DIFF;
  405546:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
  40554a:	f9b5 30a8 	ldrsh.w	r3, [r5, #168]	; 0xa8
  40554e:	429a      	cmp	r2, r3
  405550:	d145      	bne.n	4055de <style_snapshot_compare+0x132>
    if(shot1->transform_angle != shot2->transform_angle) return STYLE_COMPARE_DIFF;
  405552:	f9b4 20aa 	ldrsh.w	r2, [r4, #170]	; 0xaa
  405556:	f9b5 30aa 	ldrsh.w	r3, [r5, #170]	; 0xaa
  40555a:	429a      	cmp	r2, r3
  40555c:	d141      	bne.n	4055e2 <style_snapshot_compare+0x136>
    if(shot1->transform_zoom != shot2->transform_zoom) return STYLE_COMPARE_DIFF;
  40555e:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
  405562:	f9b5 30ac 	ldrsh.w	r3, [r5, #172]	; 0xac
  405566:	429a      	cmp	r2, r3
  405568:	d13d      	bne.n	4055e6 <style_snapshot_compare+0x13a>
    if(shot1->rect.outline_width != shot2->rect.outline_width) return STYLE_COMPARE_DIFF;
  40556a:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
  40556e:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
  405572:	429a      	cmp	r2, r3
  405574:	d139      	bne.n	4055ea <style_snapshot_compare+0x13e>
    if(shot1->rect.outline_pad != shot2->rect.outline_pad) return STYLE_COMPARE_DIFF;
  405576:	f9b4 201c 	ldrsh.w	r2, [r4, #28]
  40557a:	f9b5 301c 	ldrsh.w	r3, [r5, #28]
  40557e:	429a      	cmp	r2, r3
  405580:	d135      	bne.n	4055ee <style_snapshot_compare+0x142>
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
  405582:	6c22      	ldr	r2, [r4, #64]	; 0x40
  405584:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  405586:	429a      	cmp	r2, r3
  405588:	d133      	bne.n	4055f2 <style_snapshot_compare+0x146>
    if(shot1->rect.value_align != shot2->rect.value_align) return STYLE_COMPARE_DIFF;
  40558a:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
  40558e:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  405592:	429a      	cmp	r2, r3
  405594:	d12f      	bne.n	4055f6 <style_snapshot_compare+0x14a>
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
    if(shot1->rect.shadow_spread != shot2->rect.shadow_spread) return STYLE_COMPARE_DIFF;
  405596:	f9b4 2028 	ldrsh.w	r2, [r4, #40]	; 0x28
  40559a:	f9b5 3028 	ldrsh.w	r3, [r5, #40]	; 0x28
  40559e:	429a      	cmp	r2, r3
  4055a0:	d12b      	bne.n	4055fa <style_snapshot_compare+0x14e>
    if(shot1->rect.shadow_width != shot2->rect.shadow_width) return STYLE_COMPARE_DIFF;
  4055a2:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
  4055a6:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  4055aa:	429a      	cmp	r2, r3
  4055ac:	d127      	bne.n	4055fe <style_snapshot_compare+0x152>
    if(shot1->rect.shadow_ofs_x != shot2->rect.shadow_ofs_x) return STYLE_COMPARE_DIFF;
  4055ae:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
  4055b2:	f9b5 3024 	ldrsh.w	r3, [r5, #36]	; 0x24
  4055b6:	429a      	cmp	r2, r3
  4055b8:	d123      	bne.n	405602 <style_snapshot_compare+0x156>
    if(shot1->rect.shadow_ofs_y != shot2->rect.shadow_ofs_y) return STYLE_COMPARE_DIFF;
  4055ba:	f9b4 2026 	ldrsh.w	r2, [r4, #38]	; 0x26
  4055be:	f9b5 3026 	ldrsh.w	r3, [r5, #38]	; 0x26
  4055c2:	429a      	cmp	r2, r3
  4055c4:	d01f      	beq.n	405606 <style_snapshot_compare+0x15a>
  4055c6:	2002      	movs	r0, #2
  4055c8:	bd38      	pop	{r3, r4, r5, pc}
    if(memcmp(shot1, shot2, sizeof(style_snapshot_t)) == 0) return STYLE_COMPARE_SAME;
  4055ca:	2000      	movs	r0, #0
  4055cc:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->margin_bottom != shot2->margin_bottom) return STYLE_COMPARE_DIFF;
  4055ce:	2002      	movs	r0, #2
  4055d0:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->margin_left != shot2->margin_right) return STYLE_COMPARE_DIFF;
  4055d2:	2002      	movs	r0, #2
  4055d4:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->margin_right != shot2->margin_right) return STYLE_COMPARE_DIFF;
  4055d6:	2002      	movs	r0, #2
  4055d8:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->transform_width != shot2->transform_width) return STYLE_COMPARE_DIFF;
  4055da:	2002      	movs	r0, #2
  4055dc:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->transform_height != shot2->transform_height) return STYLE_COMPARE_DIFF;
  4055de:	2002      	movs	r0, #2
  4055e0:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->transform_angle != shot2->transform_angle) return STYLE_COMPARE_DIFF;
  4055e2:	2002      	movs	r0, #2
  4055e4:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->transform_zoom != shot2->transform_zoom) return STYLE_COMPARE_DIFF;
  4055e6:	2002      	movs	r0, #2
  4055e8:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.outline_width != shot2->rect.outline_width) return STYLE_COMPARE_DIFF;
  4055ea:	2002      	movs	r0, #2
  4055ec:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.outline_pad != shot2->rect.outline_pad) return STYLE_COMPARE_DIFF;
  4055ee:	2002      	movs	r0, #2
  4055f0:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
  4055f2:	2002      	movs	r0, #2
  4055f4:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.value_align != shot2->rect.value_align) return STYLE_COMPARE_DIFF;
  4055f6:	2002      	movs	r0, #2
  4055f8:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.shadow_spread != shot2->rect.shadow_spread) return STYLE_COMPARE_DIFF;
  4055fa:	2002      	movs	r0, #2
  4055fc:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.shadow_width != shot2->rect.shadow_width) return STYLE_COMPARE_DIFF;
  4055fe:	2002      	movs	r0, #2
  405600:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.shadow_ofs_x != shot2->rect.shadow_ofs_x) return STYLE_COMPARE_DIFF;
  405602:	2002      	movs	r0, #2
  405604:	bd38      	pop	{r3, r4, r5, pc}

    /*If not returned earlier its just a visual difference, a simple redraw is enough*/
    return STYLE_COMPARE_VISUAL_DIFF;
  405606:	2001      	movs	r0, #1
}
  405608:	bd38      	pop	{r3, r4, r5, pc}
  40560a:	bf00      	nop
  40560c:	00427dd5 	.word	0x00427dd5

00405610 <lv_init>:
    if(lv_initialized) {
  405610:	4b22      	ldr	r3, [pc, #136]	; (40569c <lv_init+0x8c>)
  405612:	781b      	ldrb	r3, [r3, #0]
  405614:	b103      	cbz	r3, 405618 <lv_init+0x8>
  405616:	4770      	bx	lr
{
  405618:	b510      	push	{r4, lr}
  40561a:	b084      	sub	sp, #16
    _lv_mem_init();
  40561c:	4b20      	ldr	r3, [pc, #128]	; (4056a0 <lv_init+0x90>)
  40561e:	4798      	blx	r3
    _lv_task_core_init();
  405620:	4b20      	ldr	r3, [pc, #128]	; (4056a4 <lv_init+0x94>)
  405622:	4798      	blx	r3
    _lv_fs_init();
  405624:	4b20      	ldr	r3, [pc, #128]	; (4056a8 <lv_init+0x98>)
  405626:	4798      	blx	r3
    _lv_anim_core_init();
  405628:	4b20      	ldr	r3, [pc, #128]	; (4056ac <lv_init+0x9c>)
  40562a:	4798      	blx	r3
    _lv_group_init();
  40562c:	4b20      	ldr	r3, [pc, #128]	; (4056b0 <lv_init+0xa0>)
  40562e:	4798      	blx	r3
    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(lv_style_trans_t));
  405630:	2110      	movs	r1, #16
  405632:	4820      	ldr	r0, [pc, #128]	; (4056b4 <lv_init+0xa4>)
  405634:	4c20      	ldr	r4, [pc, #128]	; (4056b8 <lv_init+0xa8>)
  405636:	47a0      	blx	r4
    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
  405638:	f44f 71c4 	mov.w	r1, #392	; 0x188
  40563c:	481f      	ldr	r0, [pc, #124]	; (4056bc <lv_init+0xac>)
  40563e:	47a0      	blx	r4
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
  405640:	2160      	movs	r1, #96	; 0x60
  405642:	481f      	ldr	r0, [pc, #124]	; (4056c0 <lv_init+0xb0>)
  405644:	47a0      	blx	r4
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
  405646:	f04f 0000 	mov.w	r0, #0
  40564a:	2316      	movs	r3, #22
  40564c:	f363 00c7 	bfi	r0, r3, #3, #5
  405650:	2214      	movs	r2, #20
  405652:	f362 200c 	bfi	r0, r2, #8, #5
  405656:	f36f 304f 	bfc	r0, #13, #3
  40565a:	f04f 0100 	mov.w	r1, #0
  40565e:	220d      	movs	r2, #13
  405660:	f362 01c7 	bfi	r1, r2, #3, #5
  405664:	f363 210c 	bfi	r1, r3, #8, #5
  405668:	f36f 314f 	bfc	r1, #13, #3
    lv_theme_t * th = LV_THEME_DEFAULT_INIT(LV_THEME_DEFAULT_COLOR_PRIMARY, LV_THEME_DEFAULT_COLOR_SECONDARY,
  40566c:	4b15      	ldr	r3, [pc, #84]	; (4056c4 <lv_init+0xb4>)
  40566e:	9302      	str	r3, [sp, #8]
  405670:	9301      	str	r3, [sp, #4]
  405672:	9300      	str	r3, [sp, #0]
  405674:	2202      	movs	r2, #2
  405676:	4c14      	ldr	r4, [pc, #80]	; (4056c8 <lv_init+0xb8>)
  405678:	47a0      	blx	r4
    lv_theme_set_act(th);
  40567a:	4b14      	ldr	r3, [pc, #80]	; (4056cc <lv_init+0xbc>)
  40567c:	4798      	blx	r3
    _lv_refr_init();
  40567e:	4b14      	ldr	r3, [pc, #80]	; (4056d0 <lv_init+0xc0>)
  405680:	4798      	blx	r3
    _lv_indev_init();
  405682:	4b14      	ldr	r3, [pc, #80]	; (4056d4 <lv_init+0xc4>)
  405684:	4798      	blx	r3
    _lv_img_decoder_init();
  405686:	4b14      	ldr	r3, [pc, #80]	; (4056d8 <lv_init+0xc8>)
  405688:	4798      	blx	r3
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
  40568a:	2001      	movs	r0, #1
  40568c:	4b13      	ldr	r3, [pc, #76]	; (4056dc <lv_init+0xcc>)
  40568e:	4798      	blx	r3
    lv_initialized = true;
  405690:	2201      	movs	r2, #1
  405692:	4b02      	ldr	r3, [pc, #8]	; (40569c <lv_init+0x8c>)
  405694:	701a      	strb	r2, [r3, #0]
}
  405696:	b004      	add	sp, #16
  405698:	bd10      	pop	{r4, pc}
  40569a:	bf00      	nop
  40569c:	2040c428 	.word	0x2040c428
  4056a0:	004166b5 	.word	0x004166b5
  4056a4:	00417a35 	.word	0x00417a35
  4056a8:	00416025 	.word	0x00416025
  4056ac:	004153e9 	.word	0x004153e9
  4056b0:	004037d9 	.word	0x004037d9
  4056b4:	2043a334 	.word	0x2043a334
  4056b8:	004161fb 	.word	0x004161fb
  4056bc:	2043a290 	.word	0x2043a290
  4056c0:	2043a284 	.word	0x2043a284
  4056c4:	2040008c 	.word	0x2040008c
  4056c8:	0041da45 	.word	0x0041da45
  4056cc:	0041840d 	.word	0x0041840d
  4056d0:	00409741 	.word	0x00409741
  4056d4:	00404ce5 	.word	0x00404ce5
  4056d8:	00413b5d 	.word	0x00413b5d
  4056dc:	0041314d 	.word	0x0041314d

004056e0 <lv_obj_del_async>:
{
  4056e0:	b510      	push	{r4, lr}
  4056e2:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4056e4:	4b06      	ldr	r3, [pc, #24]	; (405700 <lv_obj_del_async+0x20>)
  4056e6:	4798      	blx	r3
  4056e8:	b928      	cbnz	r0, 4056f6 <lv_obj_del_async+0x16>
  4056ea:	4622      	mov	r2, r4
  4056ec:	2300      	movs	r3, #0
  4056ee:	4805      	ldr	r0, [pc, #20]	; (405704 <lv_obj_del_async+0x24>)
  4056f0:	4905      	ldr	r1, [pc, #20]	; (405708 <lv_obj_del_async+0x28>)
  4056f2:	4788      	blx	r1
  4056f4:	e7fe      	b.n	4056f4 <lv_obj_del_async+0x14>
    lv_async_call(lv_obj_del_async_cb, obj);
  4056f6:	4621      	mov	r1, r4
  4056f8:	4804      	ldr	r0, [pc, #16]	; (40570c <lv_obj_del_async+0x2c>)
  4056fa:	4b05      	ldr	r3, [pc, #20]	; (405710 <lv_obj_del_async+0x30>)
  4056fc:	4798      	blx	r3
  4056fe:	bd10      	pop	{r4, pc}
  405700:	00415f95 	.word	0x00415f95
  405704:	0042c728 	.word	0x0042c728
  405708:	00415fa1 	.word	0x00415fa1
  40570c:	004082f1 	.word	0x004082f1
  405710:	00415e01 	.word	0x00415e01

00405714 <lv_obj_set_adv_hittest>:
{
  405714:	b538      	push	{r3, r4, r5, lr}
  405716:	4604      	mov	r4, r0
  405718:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40571a:	4b0a      	ldr	r3, [pc, #40]	; (405744 <lv_obj_set_adv_hittest+0x30>)
  40571c:	4798      	blx	r3
  40571e:	b140      	cbz	r0, 405732 <lv_obj_set_adv_hittest+0x1e>
    obj->adv_hittest = en == false ? 0 : 1;
  405720:	b96d      	cbnz	r5, 40573e <lv_obj_set_adv_hittest+0x2a>
  405722:	2200      	movs	r2, #0
  405724:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  405728:	f362 13c7 	bfi	r3, r2, #7, #1
  40572c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  405730:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405732:	4622      	mov	r2, r4
  405734:	2300      	movs	r3, #0
  405736:	4804      	ldr	r0, [pc, #16]	; (405748 <lv_obj_set_adv_hittest+0x34>)
  405738:	4904      	ldr	r1, [pc, #16]	; (40574c <lv_obj_set_adv_hittest+0x38>)
  40573a:	4788      	blx	r1
  40573c:	e7fe      	b.n	40573c <lv_obj_set_adv_hittest+0x28>
    obj->adv_hittest = en == false ? 0 : 1;
  40573e:	2201      	movs	r2, #1
  405740:	e7f0      	b.n	405724 <lv_obj_set_adv_hittest+0x10>
  405742:	bf00      	nop
  405744:	00415f95 	.word	0x00415f95
  405748:	0042c728 	.word	0x0042c728
  40574c:	00415fa1 	.word	0x00415fa1

00405750 <lv_obj_set_click>:
{
  405750:	b538      	push	{r3, r4, r5, lr}
  405752:	4604      	mov	r4, r0
  405754:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405756:	4b08      	ldr	r3, [pc, #32]	; (405778 <lv_obj_set_click+0x28>)
  405758:	4798      	blx	r3
  40575a:	b130      	cbz	r0, 40576a <lv_obj_set_click+0x1a>
    obj->click = (en == true ? 1 : 0);
  40575c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  405760:	f365 0300 	bfi	r3, r5, #0, #1
  405764:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  405768:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40576a:	4622      	mov	r2, r4
  40576c:	2300      	movs	r3, #0
  40576e:	4803      	ldr	r0, [pc, #12]	; (40577c <lv_obj_set_click+0x2c>)
  405770:	4903      	ldr	r1, [pc, #12]	; (405780 <lv_obj_set_click+0x30>)
  405772:	4788      	blx	r1
  405774:	e7fe      	b.n	405774 <lv_obj_set_click+0x24>
  405776:	bf00      	nop
  405778:	00415f95 	.word	0x00415f95
  40577c:	0042c728 	.word	0x0042c728
  405780:	00415fa1 	.word	0x00415fa1

00405784 <lv_obj_add_protect>:
{
  405784:	b538      	push	{r3, r4, r5, lr}
  405786:	4604      	mov	r4, r0
  405788:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40578a:	4b07      	ldr	r3, [pc, #28]	; (4057a8 <lv_obj_add_protect+0x24>)
  40578c:	4798      	blx	r3
  40578e:	b128      	cbz	r0, 40579c <lv_obj_add_protect+0x18>
    obj->protect |= prot;
  405790:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
  405794:	431d      	orrs	r5, r3
  405796:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  40579a:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40579c:	4622      	mov	r2, r4
  40579e:	2300      	movs	r3, #0
  4057a0:	4802      	ldr	r0, [pc, #8]	; (4057ac <lv_obj_add_protect+0x28>)
  4057a2:	4903      	ldr	r1, [pc, #12]	; (4057b0 <lv_obj_add_protect+0x2c>)
  4057a4:	4788      	blx	r1
  4057a6:	e7fe      	b.n	4057a6 <lv_obj_add_protect+0x22>
  4057a8:	00415f95 	.word	0x00415f95
  4057ac:	0042c728 	.word	0x0042c728
  4057b0:	00415fa1 	.word	0x00415fa1

004057b4 <lv_obj_clear_protect>:
{
  4057b4:	b538      	push	{r3, r4, r5, lr}
  4057b6:	4604      	mov	r4, r0
  4057b8:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4057ba:	4b08      	ldr	r3, [pc, #32]	; (4057dc <lv_obj_clear_protect+0x28>)
  4057bc:	4798      	blx	r3
  4057be:	b130      	cbz	r0, 4057ce <lv_obj_clear_protect+0x1a>
    obj->protect &= prot;
  4057c0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
  4057c4:	ea23 0305 	bic.w	r3, r3, r5
  4057c8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  4057cc:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4057ce:	4622      	mov	r2, r4
  4057d0:	2300      	movs	r3, #0
  4057d2:	4803      	ldr	r0, [pc, #12]	; (4057e0 <lv_obj_clear_protect+0x2c>)
  4057d4:	4903      	ldr	r1, [pc, #12]	; (4057e4 <lv_obj_clear_protect+0x30>)
  4057d6:	4788      	blx	r1
  4057d8:	e7fe      	b.n	4057d8 <lv_obj_clear_protect+0x24>
  4057da:	bf00      	nop
  4057dc:	00415f95 	.word	0x00415f95
  4057e0:	0042c728 	.word	0x0042c728
  4057e4:	00415fa1 	.word	0x00415fa1

004057e8 <lv_obj_set_event_cb>:
{
  4057e8:	b538      	push	{r3, r4, r5, lr}
  4057ea:	4604      	mov	r4, r0
  4057ec:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4057ee:	4b05      	ldr	r3, [pc, #20]	; (405804 <lv_obj_set_event_cb+0x1c>)
  4057f0:	4798      	blx	r3
  4057f2:	b108      	cbz	r0, 4057f8 <lv_obj_set_event_cb+0x10>
    obj->event_cb = event_cb;
  4057f4:	61a5      	str	r5, [r4, #24]
  4057f6:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4057f8:	4622      	mov	r2, r4
  4057fa:	2300      	movs	r3, #0
  4057fc:	4802      	ldr	r0, [pc, #8]	; (405808 <lv_obj_set_event_cb+0x20>)
  4057fe:	4903      	ldr	r1, [pc, #12]	; (40580c <lv_obj_set_event_cb+0x24>)
  405800:	4788      	blx	r1
  405802:	e7fe      	b.n	405802 <lv_obj_set_event_cb+0x1a>
  405804:	00415f95 	.word	0x00415f95
  405808:	0042c728 	.word	0x0042c728
  40580c:	00415fa1 	.word	0x00415fa1

00405810 <lv_event_send_func>:
{
  405810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405814:	b084      	sub	sp, #16
  405816:	4607      	mov	r7, r0
  405818:	4615      	mov	r5, r2
  40581a:	461e      	mov	r6, r3
    if(obj != NULL) {
  40581c:	460c      	mov	r4, r1
  40581e:	b121      	cbz	r1, 40582a <lv_event_send_func+0x1a>
        LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405820:	4608      	mov	r0, r1
  405822:	4b24      	ldr	r3, [pc, #144]	; (4058b4 <lv_event_send_func+0xa4>)
  405824:	4798      	blx	r3
  405826:	2800      	cmp	r0, #0
  405828:	d034      	beq.n	405894 <lv_event_send_func+0x84>
    event_temp_data.obj     = obj;
  40582a:	9401      	str	r4, [sp, #4]
    event_temp_data.deleted = false;
  40582c:	2300      	movs	r3, #0
  40582e:	f88d 3008 	strb.w	r3, [sp, #8]
    event_temp_data.prev    = NULL;
  405832:	9303      	str	r3, [sp, #12]
    if(event_temp_data_head) {
  405834:	4b20      	ldr	r3, [pc, #128]	; (4058b8 <lv_event_send_func+0xa8>)
  405836:	681b      	ldr	r3, [r3, #0]
  405838:	b103      	cbz	r3, 40583c <lv_event_send_func+0x2c>
        event_temp_data.prev = event_temp_data_head;
  40583a:	9303      	str	r3, [sp, #12]
    event_temp_data_head = &event_temp_data;
  40583c:	aa01      	add	r2, sp, #4
  40583e:	4b1e      	ldr	r3, [pc, #120]	; (4058b8 <lv_event_send_func+0xa8>)
  405840:	601a      	str	r2, [r3, #0]
    const void * event_act_data_save = event_act_data;
  405842:	4b1e      	ldr	r3, [pc, #120]	; (4058bc <lv_event_send_func+0xac>)
  405844:	f8d3 8000 	ldr.w	r8, [r3]
    event_act_data                   = data;
  405848:	601e      	str	r6, [r3, #0]
    lv_indev_t * indev_act = lv_indev_get_act();
  40584a:	4b1d      	ldr	r3, [pc, #116]	; (4058c0 <lv_event_send_func+0xb0>)
  40584c:	4798      	blx	r3
    if(indev_act) {
  40584e:	b118      	cbz	r0, 405858 <lv_event_send_func+0x48>
        if(indev_act->driver.feedback_cb) indev_act->driver.feedback_cb(&indev_act->driver, event);
  405850:	6883      	ldr	r3, [r0, #8]
  405852:	b10b      	cbz	r3, 405858 <lv_event_send_func+0x48>
  405854:	4629      	mov	r1, r5
  405856:	4798      	blx	r3
    if(event_xcb) event_xcb(obj, event);
  405858:	b117      	cbz	r7, 405860 <lv_event_send_func+0x50>
  40585a:	4629      	mov	r1, r5
  40585c:	4620      	mov	r0, r4
  40585e:	47b8      	blx	r7
    event_act_data = event_act_data_save;
  405860:	4b16      	ldr	r3, [pc, #88]	; (4058bc <lv_event_send_func+0xac>)
  405862:	f8c3 8000 	str.w	r8, [r3]
    event_temp_data_head = event_temp_data_head->prev;
  405866:	4b14      	ldr	r3, [pc, #80]	; (4058b8 <lv_event_send_func+0xa8>)
  405868:	681a      	ldr	r2, [r3, #0]
  40586a:	6892      	ldr	r2, [r2, #8]
  40586c:	601a      	str	r2, [r3, #0]
    if(event_temp_data.deleted) {
  40586e:	f89d 3008 	ldrb.w	r3, [sp, #8]
  405872:	b9ab      	cbnz	r3, 4058a0 <lv_event_send_func+0x90>
    if(obj) {
  405874:	b1c4      	cbz	r4, 4058a8 <lv_event_send_func+0x98>
        if(obj->parent_event && obj->parent) {
  405876:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  40587a:	f013 0f40 	tst.w	r3, #64	; 0x40
  40587e:	d015      	beq.n	4058ac <lv_event_send_func+0x9c>
  405880:	6820      	ldr	r0, [r4, #0]
  405882:	b1a8      	cbz	r0, 4058b0 <lv_event_send_func+0xa0>
            lv_res_t res = lv_event_send(obj->parent, event, data);
  405884:	4632      	mov	r2, r6
  405886:	4629      	mov	r1, r5
  405888:	4b0e      	ldr	r3, [pc, #56]	; (4058c4 <lv_event_send_func+0xb4>)
  40588a:	4798      	blx	r3
            if(res != LV_RES_OK) {
  40588c:	2801      	cmp	r0, #1
  40588e:	d008      	beq.n	4058a2 <lv_event_send_func+0x92>
                return LV_RES_INV;
  405890:	2000      	movs	r0, #0
  405892:	e006      	b.n	4058a2 <lv_event_send_func+0x92>
        LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405894:	4622      	mov	r2, r4
  405896:	2300      	movs	r3, #0
  405898:	480b      	ldr	r0, [pc, #44]	; (4058c8 <lv_event_send_func+0xb8>)
  40589a:	490c      	ldr	r1, [pc, #48]	; (4058cc <lv_event_send_func+0xbc>)
  40589c:	4788      	blx	r1
  40589e:	e7fe      	b.n	40589e <lv_event_send_func+0x8e>
        return LV_RES_INV;
  4058a0:	2000      	movs	r0, #0
}
  4058a2:	b004      	add	sp, #16
  4058a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return LV_RES_OK;
  4058a8:	2001      	movs	r0, #1
  4058aa:	e7fa      	b.n	4058a2 <lv_event_send_func+0x92>
  4058ac:	2001      	movs	r0, #1
  4058ae:	e7f8      	b.n	4058a2 <lv_event_send_func+0x92>
  4058b0:	2001      	movs	r0, #1
  4058b2:	e7f6      	b.n	4058a2 <lv_event_send_func+0x92>
  4058b4:	00415f95 	.word	0x00415f95
  4058b8:	2040c424 	.word	0x2040c424
  4058bc:	2040c420 	.word	0x2040c420
  4058c0:	00404c51 	.word	0x00404c51
  4058c4:	004058d1 	.word	0x004058d1
  4058c8:	0042c728 	.word	0x0042c728
  4058cc:	00415fa1 	.word	0x00415fa1

004058d0 <lv_event_send>:
    if(obj == NULL) return LV_RES_OK;
  4058d0:	b198      	cbz	r0, 4058fa <lv_event_send+0x2a>
{
  4058d2:	b570      	push	{r4, r5, r6, lr}
  4058d4:	4604      	mov	r4, r0
  4058d6:	4616      	mov	r6, r2
  4058d8:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4058da:	4b09      	ldr	r3, [pc, #36]	; (405900 <lv_event_send+0x30>)
  4058dc:	4798      	blx	r3
  4058de:	b928      	cbnz	r0, 4058ec <lv_event_send+0x1c>
  4058e0:	4622      	mov	r2, r4
  4058e2:	2300      	movs	r3, #0
  4058e4:	4807      	ldr	r0, [pc, #28]	; (405904 <lv_event_send+0x34>)
  4058e6:	4908      	ldr	r1, [pc, #32]	; (405908 <lv_event_send+0x38>)
  4058e8:	4788      	blx	r1
  4058ea:	e7fe      	b.n	4058ea <lv_event_send+0x1a>
    res = lv_event_send_func(obj->event_cb, obj, event, data);
  4058ec:	4633      	mov	r3, r6
  4058ee:	462a      	mov	r2, r5
  4058f0:	4621      	mov	r1, r4
  4058f2:	69a0      	ldr	r0, [r4, #24]
  4058f4:	4c05      	ldr	r4, [pc, #20]	; (40590c <lv_event_send+0x3c>)
  4058f6:	47a0      	blx	r4
    return res;
  4058f8:	bd70      	pop	{r4, r5, r6, pc}
    if(obj == NULL) return LV_RES_OK;
  4058fa:	2001      	movs	r0, #1
  4058fc:	4770      	bx	lr
  4058fe:	bf00      	nop
  405900:	00415f95 	.word	0x00415f95
  405904:	0042c728 	.word	0x0042c728
  405908:	00415fa1 	.word	0x00415fa1
  40590c:	00405811 	.word	0x00405811

00405910 <lv_event_get_data>:
}
  405910:	4b01      	ldr	r3, [pc, #4]	; (405918 <lv_event_get_data+0x8>)
  405912:	6818      	ldr	r0, [r3, #0]
  405914:	4770      	bx	lr
  405916:	bf00      	nop
  405918:	2040c420 	.word	0x2040c420

0040591c <lv_obj_set_signal_cb>:
{
  40591c:	b538      	push	{r3, r4, r5, lr}
  40591e:	4604      	mov	r4, r0
  405920:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405922:	4b05      	ldr	r3, [pc, #20]	; (405938 <lv_obj_set_signal_cb+0x1c>)
  405924:	4798      	blx	r3
  405926:	b108      	cbz	r0, 40592c <lv_obj_set_signal_cb+0x10>
    obj->signal_cb = signal_cb;
  405928:	61e5      	str	r5, [r4, #28]
  40592a:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40592c:	4622      	mov	r2, r4
  40592e:	2300      	movs	r3, #0
  405930:	4802      	ldr	r0, [pc, #8]	; (40593c <lv_obj_set_signal_cb+0x20>)
  405932:	4903      	ldr	r1, [pc, #12]	; (405940 <lv_obj_set_signal_cb+0x24>)
  405934:	4788      	blx	r1
  405936:	e7fe      	b.n	405936 <lv_obj_set_signal_cb+0x1a>
  405938:	00415f95 	.word	0x00415f95
  40593c:	0042c728 	.word	0x0042c728
  405940:	00415fa1 	.word	0x00415fa1

00405944 <lv_signal_send>:
    if(obj == NULL) return LV_RES_OK;
  405944:	b120      	cbz	r0, 405950 <lv_signal_send+0xc>
{
  405946:	b510      	push	{r4, lr}
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
  405948:	69c4      	ldr	r4, [r0, #28]
  40594a:	b11c      	cbz	r4, 405954 <lv_signal_send+0x10>
  40594c:	47a0      	blx	r4
  40594e:	bd10      	pop	{r4, pc}
    if(obj == NULL) return LV_RES_OK;
  405950:	2001      	movs	r0, #1
  405952:	4770      	bx	lr
    lv_res_t res = LV_RES_OK;
  405954:	2001      	movs	r0, #1
}
  405956:	bd10      	pop	{r4, pc}

00405958 <lv_obj_set_design_cb>:
{
  405958:	b538      	push	{r3, r4, r5, lr}
  40595a:	4604      	mov	r4, r0
  40595c:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40595e:	4b05      	ldr	r3, [pc, #20]	; (405974 <lv_obj_set_design_cb+0x1c>)
  405960:	4798      	blx	r3
  405962:	b108      	cbz	r0, 405968 <lv_obj_set_design_cb+0x10>
    obj->design_cb = design_cb;
  405964:	6225      	str	r5, [r4, #32]
  405966:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405968:	4622      	mov	r2, r4
  40596a:	2300      	movs	r3, #0
  40596c:	4802      	ldr	r0, [pc, #8]	; (405978 <lv_obj_set_design_cb+0x20>)
  40596e:	4903      	ldr	r1, [pc, #12]	; (40597c <lv_obj_set_design_cb+0x24>)
  405970:	4788      	blx	r1
  405972:	e7fe      	b.n	405972 <lv_obj_set_design_cb+0x1a>
  405974:	00415f95 	.word	0x00415f95
  405978:	0042c728 	.word	0x0042c728
  40597c:	00415fa1 	.word	0x00415fa1

00405980 <lv_obj_allocate_ext_attr>:
{
  405980:	b538      	push	{r3, r4, r5, lr}
  405982:	4604      	mov	r4, r0
  405984:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405986:	4b09      	ldr	r3, [pc, #36]	; (4059ac <lv_obj_allocate_ext_attr+0x2c>)
  405988:	4798      	blx	r3
  40598a:	b928      	cbnz	r0, 405998 <lv_obj_allocate_ext_attr+0x18>
  40598c:	4622      	mov	r2, r4
  40598e:	2300      	movs	r3, #0
  405990:	4807      	ldr	r0, [pc, #28]	; (4059b0 <lv_obj_allocate_ext_attr+0x30>)
  405992:	4908      	ldr	r1, [pc, #32]	; (4059b4 <lv_obj_allocate_ext_attr+0x34>)
  405994:	4788      	blx	r1
  405996:	e7fe      	b.n	405996 <lv_obj_allocate_ext_attr+0x16>
    void * new_ext = lv_mem_realloc(obj->ext_attr, ext_size);
  405998:	4629      	mov	r1, r5
  40599a:	6a60      	ldr	r0, [r4, #36]	; 0x24
  40599c:	4b06      	ldr	r3, [pc, #24]	; (4059b8 <lv_obj_allocate_ext_attr+0x38>)
  40599e:	4798      	blx	r3
    if(new_ext == NULL) return NULL;
  4059a0:	4603      	mov	r3, r0
  4059a2:	b100      	cbz	r0, 4059a6 <lv_obj_allocate_ext_attr+0x26>
    obj->ext_attr = new_ext;
  4059a4:	6260      	str	r0, [r4, #36]	; 0x24
}
  4059a6:	4618      	mov	r0, r3
  4059a8:	bd38      	pop	{r3, r4, r5, pc}
  4059aa:	bf00      	nop
  4059ac:	00415f95 	.word	0x00415f95
  4059b0:	0042c728 	.word	0x0042c728
  4059b4:	00415fa1 	.word	0x00415fa1
  4059b8:	00416a09 	.word	0x00416a09

004059bc <lv_obj_refresh_ext_draw_pad>:
{
  4059bc:	b510      	push	{r4, lr}
  4059be:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4059c0:	4b07      	ldr	r3, [pc, #28]	; (4059e0 <lv_obj_refresh_ext_draw_pad+0x24>)
  4059c2:	4798      	blx	r3
  4059c4:	b928      	cbnz	r0, 4059d2 <lv_obj_refresh_ext_draw_pad+0x16>
  4059c6:	4622      	mov	r2, r4
  4059c8:	2300      	movs	r3, #0
  4059ca:	4806      	ldr	r0, [pc, #24]	; (4059e4 <lv_obj_refresh_ext_draw_pad+0x28>)
  4059cc:	4906      	ldr	r1, [pc, #24]	; (4059e8 <lv_obj_refresh_ext_draw_pad+0x2c>)
  4059ce:	4788      	blx	r1
  4059d0:	e7fe      	b.n	4059d0 <lv_obj_refresh_ext_draw_pad+0x14>
    obj->ext_draw_pad = 0;
  4059d2:	2200      	movs	r2, #0
  4059d4:	8662      	strh	r2, [r4, #50]	; 0x32
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
  4059d6:	69e3      	ldr	r3, [r4, #28]
  4059d8:	2106      	movs	r1, #6
  4059da:	4620      	mov	r0, r4
  4059dc:	4798      	blx	r3
  4059de:	bd10      	pop	{r4, pc}
  4059e0:	00415f95 	.word	0x00415f95
  4059e4:	0042c728 	.word	0x0042c728
  4059e8:	00415fa1 	.word	0x00415fa1

004059ec <lv_obj_get_parent>:
{
  4059ec:	b510      	push	{r4, lr}
  4059ee:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4059f0:	4b05      	ldr	r3, [pc, #20]	; (405a08 <lv_obj_get_parent+0x1c>)
  4059f2:	4798      	blx	r3
  4059f4:	b108      	cbz	r0, 4059fa <lv_obj_get_parent+0xe>
}
  4059f6:	6820      	ldr	r0, [r4, #0]
  4059f8:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4059fa:	4622      	mov	r2, r4
  4059fc:	2300      	movs	r3, #0
  4059fe:	4803      	ldr	r0, [pc, #12]	; (405a0c <lv_obj_get_parent+0x20>)
  405a00:	4903      	ldr	r1, [pc, #12]	; (405a10 <lv_obj_get_parent+0x24>)
  405a02:	4788      	blx	r1
  405a04:	e7fe      	b.n	405a04 <lv_obj_get_parent+0x18>
  405a06:	bf00      	nop
  405a08:	00415f95 	.word	0x00415f95
  405a0c:	0042c728 	.word	0x0042c728
  405a10:	00415fa1 	.word	0x00415fa1

00405a14 <lv_obj_get_screen>:
{
  405a14:	b510      	push	{r4, lr}
  405a16:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405a18:	4b08      	ldr	r3, [pc, #32]	; (405a3c <lv_obj_get_screen+0x28>)
  405a1a:	4798      	blx	r3
  405a1c:	b930      	cbnz	r0, 405a2c <lv_obj_get_screen+0x18>
  405a1e:	4622      	mov	r2, r4
  405a20:	2300      	movs	r3, #0
  405a22:	4807      	ldr	r0, [pc, #28]	; (405a40 <lv_obj_get_screen+0x2c>)
  405a24:	4907      	ldr	r1, [pc, #28]	; (405a44 <lv_obj_get_screen+0x30>)
  405a26:	4788      	blx	r1
  405a28:	e7fe      	b.n	405a28 <lv_obj_get_screen+0x14>
        par   = lv_obj_get_parent(act_p);
  405a2a:	461c      	mov	r4, r3
  405a2c:	4620      	mov	r0, r4
  405a2e:	4b06      	ldr	r3, [pc, #24]	; (405a48 <lv_obj_get_screen+0x34>)
  405a30:	4798      	blx	r3
    } while(par != NULL);
  405a32:	4603      	mov	r3, r0
  405a34:	2800      	cmp	r0, #0
  405a36:	d1f8      	bne.n	405a2a <lv_obj_get_screen+0x16>
}
  405a38:	4620      	mov	r0, r4
  405a3a:	bd10      	pop	{r4, pc}
  405a3c:	00415f95 	.word	0x00415f95
  405a40:	0042c728 	.word	0x0042c728
  405a44:	00415fa1 	.word	0x00415fa1
  405a48:	004059ed 	.word	0x004059ed

00405a4c <lv_obj_get_disp>:
{
  405a4c:	b570      	push	{r4, r5, r6, lr}
  405a4e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405a50:	4b14      	ldr	r3, [pc, #80]	; (405aa4 <lv_obj_get_disp+0x58>)
  405a52:	4798      	blx	r3
  405a54:	b1b8      	cbz	r0, 405a86 <lv_obj_get_disp+0x3a>
    if(obj->parent == NULL)
  405a56:	6823      	ldr	r3, [r4, #0]
  405a58:	b11b      	cbz	r3, 405a62 <lv_obj_get_disp+0x16>
        scr = lv_obj_get_screen(obj); /*get the screen of `obj`*/
  405a5a:	4620      	mov	r0, r4
  405a5c:	4b12      	ldr	r3, [pc, #72]	; (405aa8 <lv_obj_get_disp+0x5c>)
  405a5e:	4798      	blx	r3
  405a60:	4604      	mov	r4, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
  405a62:	4812      	ldr	r0, [pc, #72]	; (405aac <lv_obj_get_disp+0x60>)
  405a64:	4b12      	ldr	r3, [pc, #72]	; (405ab0 <lv_obj_get_disp+0x64>)
  405a66:	4798      	blx	r3
  405a68:	4605      	mov	r5, r0
  405a6a:	b1c5      	cbz	r5, 405a9e <lv_obj_get_disp+0x52>
        _LV_LL_READ(d->scr_ll, s) {
  405a6c:	f105 0638 	add.w	r6, r5, #56	; 0x38
  405a70:	4630      	mov	r0, r6
  405a72:	4b0f      	ldr	r3, [pc, #60]	; (405ab0 <lv_obj_get_disp+0x64>)
  405a74:	4798      	blx	r3
  405a76:	b160      	cbz	r0, 405a92 <lv_obj_get_disp+0x46>
            if(s == scr) return d;
  405a78:	4284      	cmp	r4, r0
  405a7a:	d010      	beq.n	405a9e <lv_obj_get_disp+0x52>
        _LV_LL_READ(d->scr_ll, s) {
  405a7c:	4601      	mov	r1, r0
  405a7e:	4630      	mov	r0, r6
  405a80:	4b0c      	ldr	r3, [pc, #48]	; (405ab4 <lv_obj_get_disp+0x68>)
  405a82:	4798      	blx	r3
  405a84:	e7f7      	b.n	405a76 <lv_obj_get_disp+0x2a>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405a86:	4622      	mov	r2, r4
  405a88:	2300      	movs	r3, #0
  405a8a:	480b      	ldr	r0, [pc, #44]	; (405ab8 <lv_obj_get_disp+0x6c>)
  405a8c:	490b      	ldr	r1, [pc, #44]	; (405abc <lv_obj_get_disp+0x70>)
  405a8e:	4788      	blx	r1
  405a90:	e7fe      	b.n	405a90 <lv_obj_get_disp+0x44>
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
  405a92:	4629      	mov	r1, r5
  405a94:	4805      	ldr	r0, [pc, #20]	; (405aac <lv_obj_get_disp+0x60>)
  405a96:	4b07      	ldr	r3, [pc, #28]	; (405ab4 <lv_obj_get_disp+0x68>)
  405a98:	4798      	blx	r3
  405a9a:	4605      	mov	r5, r0
  405a9c:	e7e5      	b.n	405a6a <lv_obj_get_disp+0x1e>
}
  405a9e:	4628      	mov	r0, r5
  405aa0:	bd70      	pop	{r4, r5, r6, pc}
  405aa2:	bf00      	nop
  405aa4:	00415f95 	.word	0x00415f95
  405aa8:	00405a15 	.word	0x00405a15
  405aac:	2043a290 	.word	0x2043a290
  405ab0:	004162a5 	.word	0x004162a5
  405ab4:	004162b9 	.word	0x004162b9
  405ab8:	0042c728 	.word	0x0042c728
  405abc:	00415fa1 	.word	0x00415fa1

00405ac0 <lv_obj_get_child>:
{
  405ac0:	b538      	push	{r3, r4, r5, lr}
  405ac2:	4604      	mov	r4, r0
  405ac4:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405ac6:	4b09      	ldr	r3, [pc, #36]	; (405aec <lv_obj_get_child+0x2c>)
  405ac8:	4798      	blx	r3
  405aca:	b128      	cbz	r0, 405ad8 <lv_obj_get_child+0x18>
    if(child == NULL) {
  405acc:	b155      	cbz	r5, 405ae4 <lv_obj_get_child+0x24>
        result = _lv_ll_get_next(&obj->child_ll, child);
  405ace:	4629      	mov	r1, r5
  405ad0:	1d20      	adds	r0, r4, #4
  405ad2:	4b07      	ldr	r3, [pc, #28]	; (405af0 <lv_obj_get_child+0x30>)
  405ad4:	4798      	blx	r3
}
  405ad6:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405ad8:	4622      	mov	r2, r4
  405ada:	2300      	movs	r3, #0
  405adc:	4805      	ldr	r0, [pc, #20]	; (405af4 <lv_obj_get_child+0x34>)
  405ade:	4906      	ldr	r1, [pc, #24]	; (405af8 <lv_obj_get_child+0x38>)
  405ae0:	4788      	blx	r1
  405ae2:	e7fe      	b.n	405ae2 <lv_obj_get_child+0x22>
        result = _lv_ll_get_head(&obj->child_ll);
  405ae4:	1d20      	adds	r0, r4, #4
  405ae6:	4b05      	ldr	r3, [pc, #20]	; (405afc <lv_obj_get_child+0x3c>)
  405ae8:	4798      	blx	r3
  405aea:	bd38      	pop	{r3, r4, r5, pc}
  405aec:	00415f95 	.word	0x00415f95
  405af0:	004162b9 	.word	0x004162b9
  405af4:	0042c728 	.word	0x0042c728
  405af8:	00415fa1 	.word	0x00415fa1
  405afc:	004162a5 	.word	0x004162a5

00405b00 <lv_obj_get_coords>:
{
  405b00:	b538      	push	{r3, r4, r5, lr}
  405b02:	4604      	mov	r4, r0
  405b04:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405b06:	4b0b      	ldr	r3, [pc, #44]	; (405b34 <lv_obj_get_coords+0x34>)
  405b08:	4798      	blx	r3
  405b0a:	b120      	cbz	r0, 405b16 <lv_obj_get_coords+0x16>
    lv_area_copy(cords_p, &obj->coords);
  405b0c:	f104 0310 	add.w	r3, r4, #16
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
  405b10:	4629      	mov	r1, r5
  405b12:	2208      	movs	r2, #8
  405b14:	e00a      	b.n	405b2c <lv_obj_get_coords+0x2c>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405b16:	4622      	mov	r2, r4
  405b18:	2300      	movs	r3, #0
  405b1a:	4807      	ldr	r0, [pc, #28]	; (405b38 <lv_obj_get_coords+0x38>)
  405b1c:	4907      	ldr	r1, [pc, #28]	; (405b3c <lv_obj_get_coords+0x3c>)
  405b1e:	4788      	blx	r1
  405b20:	e7fe      	b.n	405b20 <lv_obj_get_coords+0x20>
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
  405b22:	f813 0b01 	ldrb.w	r0, [r3], #1
  405b26:	f801 0b01 	strb.w	r0, [r1], #1
        d8++;
        s8++;
        len--;
  405b2a:	3a01      	subs	r2, #1
    while(len) {
  405b2c:	2a00      	cmp	r2, #0
  405b2e:	d1f8      	bne.n	405b22 <lv_obj_get_coords+0x22>
}
  405b30:	bd38      	pop	{r3, r4, r5, pc}
  405b32:	bf00      	nop
  405b34:	00415f95 	.word	0x00415f95
  405b38:	0042c728 	.word	0x0042c728
  405b3c:	00415fa1 	.word	0x00415fa1

00405b40 <lv_obj_get_x>:
{
  405b40:	b510      	push	{r4, lr}
  405b42:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405b44:	4b0a      	ldr	r3, [pc, #40]	; (405b70 <lv_obj_get_x+0x30>)
  405b46:	4798      	blx	r3
  405b48:	b928      	cbnz	r0, 405b56 <lv_obj_get_x+0x16>
  405b4a:	4622      	mov	r2, r4
  405b4c:	2300      	movs	r3, #0
  405b4e:	4809      	ldr	r0, [pc, #36]	; (405b74 <lv_obj_get_x+0x34>)
  405b50:	4909      	ldr	r1, [pc, #36]	; (405b78 <lv_obj_get_x+0x38>)
  405b52:	4788      	blx	r1
  405b54:	e7fe      	b.n	405b54 <lv_obj_get_x+0x14>
    lv_obj_t * parent = lv_obj_get_parent(obj);
  405b56:	4620      	mov	r0, r4
  405b58:	4b08      	ldr	r3, [pc, #32]	; (405b7c <lv_obj_get_x+0x3c>)
  405b5a:	4798      	blx	r3
    if(parent) {
  405b5c:	4603      	mov	r3, r0
  405b5e:	b120      	cbz	r0, 405b6a <lv_obj_get_x+0x2a>
        rel_x             = obj->coords.x1 - parent->coords.x1;
  405b60:	8a20      	ldrh	r0, [r4, #16]
  405b62:	8a1b      	ldrh	r3, [r3, #16]
  405b64:	1ac0      	subs	r0, r0, r3
  405b66:	b200      	sxth	r0, r0
  405b68:	bd10      	pop	{r4, pc}
        rel_x = obj->coords.x1;
  405b6a:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
}
  405b6e:	bd10      	pop	{r4, pc}
  405b70:	00415f95 	.word	0x00415f95
  405b74:	0042c728 	.word	0x0042c728
  405b78:	00415fa1 	.word	0x00415fa1
  405b7c:	004059ed 	.word	0x004059ed

00405b80 <lv_obj_get_y>:
{
  405b80:	b510      	push	{r4, lr}
  405b82:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405b84:	4b0a      	ldr	r3, [pc, #40]	; (405bb0 <lv_obj_get_y+0x30>)
  405b86:	4798      	blx	r3
  405b88:	b928      	cbnz	r0, 405b96 <lv_obj_get_y+0x16>
  405b8a:	4622      	mov	r2, r4
  405b8c:	2300      	movs	r3, #0
  405b8e:	4809      	ldr	r0, [pc, #36]	; (405bb4 <lv_obj_get_y+0x34>)
  405b90:	4909      	ldr	r1, [pc, #36]	; (405bb8 <lv_obj_get_y+0x38>)
  405b92:	4788      	blx	r1
  405b94:	e7fe      	b.n	405b94 <lv_obj_get_y+0x14>
    lv_obj_t * parent = lv_obj_get_parent(obj);
  405b96:	4620      	mov	r0, r4
  405b98:	4b08      	ldr	r3, [pc, #32]	; (405bbc <lv_obj_get_y+0x3c>)
  405b9a:	4798      	blx	r3
    if(parent) {
  405b9c:	4603      	mov	r3, r0
  405b9e:	b120      	cbz	r0, 405baa <lv_obj_get_y+0x2a>
        rel_y             = obj->coords.y1 - parent->coords.y1;
  405ba0:	8a60      	ldrh	r0, [r4, #18]
  405ba2:	8a5b      	ldrh	r3, [r3, #18]
  405ba4:	1ac0      	subs	r0, r0, r3
  405ba6:	b200      	sxth	r0, r0
  405ba8:	bd10      	pop	{r4, pc}
        rel_y = obj->coords.y1;
  405baa:	f9b4 0012 	ldrsh.w	r0, [r4, #18]
}
  405bae:	bd10      	pop	{r4, pc}
  405bb0:	00415f95 	.word	0x00415f95
  405bb4:	0042c728 	.word	0x0042c728
  405bb8:	00415fa1 	.word	0x00415fa1
  405bbc:	004059ed 	.word	0x004059ed

00405bc0 <lv_obj_get_width>:
{
  405bc0:	b510      	push	{r4, lr}
  405bc2:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405bc4:	4b07      	ldr	r3, [pc, #28]	; (405be4 <lv_obj_get_width+0x24>)
  405bc6:	4798      	blx	r3
  405bc8:	b130      	cbz	r0, 405bd8 <lv_obj_get_width+0x18>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  405bca:	8aa0      	ldrh	r0, [r4, #20]
  405bcc:	8a23      	ldrh	r3, [r4, #16]
  405bce:	1ac0      	subs	r0, r0, r3
  405bd0:	b280      	uxth	r0, r0
  405bd2:	3001      	adds	r0, #1
}
  405bd4:	b200      	sxth	r0, r0
  405bd6:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405bd8:	4622      	mov	r2, r4
  405bda:	2300      	movs	r3, #0
  405bdc:	4802      	ldr	r0, [pc, #8]	; (405be8 <lv_obj_get_width+0x28>)
  405bde:	4903      	ldr	r1, [pc, #12]	; (405bec <lv_obj_get_width+0x2c>)
  405be0:	4788      	blx	r1
  405be2:	e7fe      	b.n	405be2 <lv_obj_get_width+0x22>
  405be4:	00415f95 	.word	0x00415f95
  405be8:	0042c728 	.word	0x0042c728
  405bec:	00415fa1 	.word	0x00415fa1

00405bf0 <lv_obj_get_height>:
{
  405bf0:	b510      	push	{r4, lr}
  405bf2:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405bf4:	4b07      	ldr	r3, [pc, #28]	; (405c14 <lv_obj_get_height+0x24>)
  405bf6:	4798      	blx	r3
  405bf8:	b130      	cbz	r0, 405c08 <lv_obj_get_height+0x18>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  405bfa:	8ae0      	ldrh	r0, [r4, #22]
  405bfc:	8a63      	ldrh	r3, [r4, #18]
  405bfe:	1ac0      	subs	r0, r0, r3
  405c00:	b280      	uxth	r0, r0
  405c02:	3001      	adds	r0, #1
}
  405c04:	b200      	sxth	r0, r0
  405c06:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405c08:	4622      	mov	r2, r4
  405c0a:	2300      	movs	r3, #0
  405c0c:	4802      	ldr	r0, [pc, #8]	; (405c18 <lv_obj_get_height+0x28>)
  405c0e:	4903      	ldr	r1, [pc, #12]	; (405c1c <lv_obj_get_height+0x2c>)
  405c10:	4788      	blx	r1
  405c12:	e7fe      	b.n	405c12 <lv_obj_get_height+0x22>
  405c14:	00415f95 	.word	0x00415f95
  405c18:	0042c728 	.word	0x0042c728
  405c1c:	00415fa1 	.word	0x00415fa1

00405c20 <lv_obj_get_auto_realign>:
{
  405c20:	b510      	push	{r4, lr}
  405c22:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405c24:	4b06      	ldr	r3, [pc, #24]	; (405c40 <lv_obj_get_auto_realign+0x20>)
  405c26:	4798      	blx	r3
  405c28:	b120      	cbz	r0, 405c34 <lv_obj_get_auto_realign+0x14>
    return obj->realign.auto_realign ? true : false;
  405c2a:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
}
  405c2e:	f000 0001 	and.w	r0, r0, #1
  405c32:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405c34:	4622      	mov	r2, r4
  405c36:	2300      	movs	r3, #0
  405c38:	4802      	ldr	r0, [pc, #8]	; (405c44 <lv_obj_get_auto_realign+0x24>)
  405c3a:	4903      	ldr	r1, [pc, #12]	; (405c48 <lv_obj_get_auto_realign+0x28>)
  405c3c:	4788      	blx	r1
  405c3e:	e7fe      	b.n	405c3e <lv_obj_get_auto_realign+0x1e>
  405c40:	00415f95 	.word	0x00415f95
  405c44:	0042c728 	.word	0x0042c728
  405c48:	00415fa1 	.word	0x00415fa1

00405c4c <lv_obj_get_style_list>:
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
  405c4c:	b909      	cbnz	r1, 405c52 <lv_obj_get_style_list+0x6>
  405c4e:	3028      	adds	r0, #40	; 0x28
  405c50:	4770      	bx	lr
{
  405c52:	b500      	push	{lr}
  405c54:	b083      	sub	sp, #12
    info.part = part;
  405c56:	f88d 1000 	strb.w	r1, [sp]
    info.result = NULL;
  405c5a:	2300      	movs	r3, #0
  405c5c:	9301      	str	r3, [sp, #4]
    res = lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STYLE, &info);
  405c5e:	466a      	mov	r2, sp
  405c60:	2108      	movs	r1, #8
  405c62:	4b05      	ldr	r3, [pc, #20]	; (405c78 <lv_obj_get_style_list+0x2c>)
  405c64:	4798      	blx	r3
    if(res != LV_RES_OK) return NULL;
  405c66:	2801      	cmp	r0, #1
  405c68:	d103      	bne.n	405c72 <lv_obj_get_style_list+0x26>
    return info.result;
  405c6a:	9801      	ldr	r0, [sp, #4]
}
  405c6c:	b003      	add	sp, #12
  405c6e:	f85d fb04 	ldr.w	pc, [sp], #4
    if(res != LV_RES_OK) return NULL;
  405c72:	2000      	movs	r0, #0
  405c74:	e7fa      	b.n	405c6c <lv_obj_get_style_list+0x20>
  405c76:	bf00      	nop
  405c78:	00405945 	.word	0x00405945

00405c7c <trans_del>:
{
  405c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405c80:	4607      	mov	r7, r0
  405c82:	4688      	mov	r8, r1
  405c84:	4691      	mov	r9, r2
  405c86:	461e      	mov	r6, r3
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
  405c88:	4819      	ldr	r0, [pc, #100]	; (405cf0 <trans_del+0x74>)
  405c8a:	4b1a      	ldr	r3, [pc, #104]	; (405cf4 <trans_del+0x78>)
  405c8c:	4798      	blx	r3
  405c8e:	4604      	mov	r4, r0
    while(tr != NULL) {
  405c90:	e006      	b.n	405ca0 <trans_del+0x24>
        if(tr->obj == obj && (part == tr->part || part == 0xFF) && (prop == tr->prop || prop == 0xFF)) {
  405c92:	88a3      	ldrh	r3, [r4, #4]
  405c94:	454b      	cmp	r3, r9
  405c96:	d015      	beq.n	405cc4 <trans_del+0x48>
  405c98:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
  405c9c:	d012      	beq.n	405cc4 <trans_del+0x48>
{
  405c9e:	462c      	mov	r4, r5
    while(tr != NULL) {
  405ca0:	b31c      	cbz	r4, 405cea <trans_del+0x6e>
        if(tr == tr_limit) break;
  405ca2:	42b4      	cmp	r4, r6
  405ca4:	d021      	beq.n	405cea <trans_del+0x6e>
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
  405ca6:	4621      	mov	r1, r4
  405ca8:	4811      	ldr	r0, [pc, #68]	; (405cf0 <trans_del+0x74>)
  405caa:	4b13      	ldr	r3, [pc, #76]	; (405cf8 <trans_del+0x7c>)
  405cac:	4798      	blx	r3
  405cae:	4605      	mov	r5, r0
        if(tr->obj == obj && (part == tr->part || part == 0xFF) && (prop == tr->prop || prop == 0xFF)) {
  405cb0:	6820      	ldr	r0, [r4, #0]
  405cb2:	42b8      	cmp	r0, r7
  405cb4:	d1f3      	bne.n	405c9e <trans_del+0x22>
  405cb6:	79a1      	ldrb	r1, [r4, #6]
  405cb8:	4541      	cmp	r1, r8
  405cba:	d0ea      	beq.n	405c92 <trans_del+0x16>
  405cbc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
  405cc0:	d1ed      	bne.n	405c9e <trans_del+0x22>
  405cc2:	e7e6      	b.n	405c92 <trans_del+0x16>
            lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
  405cc4:	4b0d      	ldr	r3, [pc, #52]	; (405cfc <trans_del+0x80>)
  405cc6:	4798      	blx	r3
            lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
  405cc8:	4b0d      	ldr	r3, [pc, #52]	; (405d00 <trans_del+0x84>)
  405cca:	4798      	blx	r3
            lv_style_remove_prop(style_trans, tr->prop);
  405ccc:	88a1      	ldrh	r1, [r4, #4]
  405cce:	4b0d      	ldr	r3, [pc, #52]	; (405d04 <trans_del+0x88>)
  405cd0:	4798      	blx	r3
            lv_anim_del(tr, NULL);
  405cd2:	2100      	movs	r1, #0
  405cd4:	4620      	mov	r0, r4
  405cd6:	4b0c      	ldr	r3, [pc, #48]	; (405d08 <trans_del+0x8c>)
  405cd8:	4798      	blx	r3
            _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
  405cda:	4621      	mov	r1, r4
  405cdc:	4804      	ldr	r0, [pc, #16]	; (405cf0 <trans_del+0x74>)
  405cde:	4b0b      	ldr	r3, [pc, #44]	; (405d0c <trans_del+0x90>)
  405ce0:	4798      	blx	r3
            lv_mem_free(tr);
  405ce2:	4620      	mov	r0, r4
  405ce4:	4b0a      	ldr	r3, [pc, #40]	; (405d10 <trans_del+0x94>)
  405ce6:	4798      	blx	r3
  405ce8:	e7d9      	b.n	405c9e <trans_del+0x22>
  405cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405cee:	bf00      	nop
  405cf0:	2043a334 	.word	0x2043a334
  405cf4:	004162af 	.word	0x004162af
  405cf8:	004162c7 	.word	0x004162c7
  405cfc:	00405c4d 	.word	0x00405c4d
  405d00:	0040acdd 	.word	0x0040acdd
  405d04:	0040a139 	.word	0x0040a139
  405d08:	00415489 	.word	0x00415489
  405d0c:	00416361 	.word	0x00416361
  405d10:	0041679d 	.word	0x0041679d

00405d14 <lv_obj_clean_style_list>:
{
  405d14:	b538      	push	{r3, r4, r5, lr}
  405d16:	4604      	mov	r4, r0
  405d18:	460d      	mov	r5, r1
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
  405d1a:	4b06      	ldr	r3, [pc, #24]	; (405d34 <lv_obj_clean_style_list+0x20>)
  405d1c:	4798      	blx	r3
    if(style_dsc == NULL) {
  405d1e:	b138      	cbz	r0, 405d30 <lv_obj_clean_style_list+0x1c>
    _lv_style_list_reset(style_dsc);
  405d20:	4b05      	ldr	r3, [pc, #20]	; (405d38 <lv_obj_clean_style_list+0x24>)
  405d22:	4798      	blx	r3
    trans_del(obj, part, 0xFF, NULL);
  405d24:	2300      	movs	r3, #0
  405d26:	22ff      	movs	r2, #255	; 0xff
  405d28:	4629      	mov	r1, r5
  405d2a:	4620      	mov	r0, r4
  405d2c:	4c03      	ldr	r4, [pc, #12]	; (405d3c <lv_obj_clean_style_list+0x28>)
  405d2e:	47a0      	blx	r4
  405d30:	bd38      	pop	{r3, r4, r5, pc}
  405d32:	bf00      	nop
  405d34:	00405c4d 	.word	0x00405c4d
  405d38:	0040acf1 	.word	0x0040acf1
  405d3c:	00405c7d 	.word	0x00405c7d

00405d40 <_lv_obj_disable_style_caching>:
{
  405d40:	b570      	push	{r4, r5, r6, lr}
  405d42:	4605      	mov	r5, r0
  405d44:	460e      	mov	r6, r1
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  405d46:	2400      	movs	r4, #0
  405d48:	2c3f      	cmp	r4, #63	; 0x3f
  405d4a:	d80b      	bhi.n	405d64 <_lv_obj_disable_style_caching+0x24>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  405d4c:	4621      	mov	r1, r4
  405d4e:	4628      	mov	r0, r5
  405d50:	4b0c      	ldr	r3, [pc, #48]	; (405d84 <_lv_obj_disable_style_caching+0x44>)
  405d52:	4798      	blx	r3
        if(list == NULL) break;
  405d54:	b130      	cbz	r0, 405d64 <_lv_obj_disable_style_caching+0x24>
        list->ignore_cache = dis;
  405d56:	7942      	ldrb	r2, [r0, #5]
  405d58:	f366 02c3 	bfi	r2, r6, #3, #1
  405d5c:	7142      	strb	r2, [r0, #5]
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  405d5e:	3401      	adds	r4, #1
  405d60:	b2e4      	uxtb	r4, r4
  405d62:	e7f1      	b.n	405d48 <_lv_obj_disable_style_caching+0x8>
  405d64:	2440      	movs	r4, #64	; 0x40
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
  405d66:	2cff      	cmp	r4, #255	; 0xff
  405d68:	d00b      	beq.n	405d82 <_lv_obj_disable_style_caching+0x42>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  405d6a:	4621      	mov	r1, r4
  405d6c:	4628      	mov	r0, r5
  405d6e:	4b05      	ldr	r3, [pc, #20]	; (405d84 <_lv_obj_disable_style_caching+0x44>)
  405d70:	4798      	blx	r3
        if(list == NULL) break;
  405d72:	b130      	cbz	r0, 405d82 <_lv_obj_disable_style_caching+0x42>
        list->ignore_cache = dis;
  405d74:	7942      	ldrb	r2, [r0, #5]
  405d76:	f366 02c3 	bfi	r2, r6, #3, #1
  405d7a:	7142      	strb	r2, [r0, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
  405d7c:	3401      	adds	r4, #1
  405d7e:	b2e4      	uxtb	r4, r4
  405d80:	e7f1      	b.n	405d66 <_lv_obj_disable_style_caching+0x26>
  405d82:	bd70      	pop	{r4, r5, r6, pc}
  405d84:	00405c4d 	.word	0x00405c4d

00405d88 <trans_anim_ready_cb>:
{
  405d88:	b538      	push	{r3, r4, r5, lr}
    lv_style_trans_t * tr = a->var;
  405d8a:	6804      	ldr	r4, [r0, #0]
    _LV_LL_READ(LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
  405d8c:	4816      	ldr	r0, [pc, #88]	; (405de8 <trans_anim_ready_cb+0x60>)
  405d8e:	4b17      	ldr	r3, [pc, #92]	; (405dec <trans_anim_ready_cb+0x64>)
  405d90:	4798      	blx	r3
    bool running = false;
  405d92:	2500      	movs	r5, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
  405d94:	e003      	b.n	405d9e <trans_anim_ready_cb+0x16>
  405d96:	4601      	mov	r1, r0
  405d98:	4813      	ldr	r0, [pc, #76]	; (405de8 <trans_anim_ready_cb+0x60>)
  405d9a:	4b15      	ldr	r3, [pc, #84]	; (405df0 <trans_anim_ready_cb+0x68>)
  405d9c:	4798      	blx	r3
  405d9e:	b178      	cbz	r0, 405dc0 <trans_anim_ready_cb+0x38>
        if(tr_i != tr && tr_i->obj == tr->obj && tr_i->part == tr->part && tr_i->prop == tr->prop) {
  405da0:	42a0      	cmp	r0, r4
  405da2:	d0f8      	beq.n	405d96 <trans_anim_ready_cb+0xe>
  405da4:	6802      	ldr	r2, [r0, #0]
  405da6:	6823      	ldr	r3, [r4, #0]
  405da8:	429a      	cmp	r2, r3
  405daa:	d1f4      	bne.n	405d96 <trans_anim_ready_cb+0xe>
  405dac:	6843      	ldr	r3, [r0, #4]
  405dae:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
  405db2:	6863      	ldr	r3, [r4, #4]
  405db4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  405db8:	429a      	cmp	r2, r3
  405dba:	d1ec      	bne.n	405d96 <trans_anim_ready_cb+0xe>
            running = true;
  405dbc:	2501      	movs	r5, #1
  405dbe:	e7ea      	b.n	405d96 <trans_anim_ready_cb+0xe>
    if(!running) {
  405dc0:	b13d      	cbz	r5, 405dd2 <trans_anim_ready_cb+0x4a>
    _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
  405dc2:	4621      	mov	r1, r4
  405dc4:	4808      	ldr	r0, [pc, #32]	; (405de8 <trans_anim_ready_cb+0x60>)
  405dc6:	4b0b      	ldr	r3, [pc, #44]	; (405df4 <trans_anim_ready_cb+0x6c>)
  405dc8:	4798      	blx	r3
    lv_mem_free(tr);
  405dca:	4620      	mov	r0, r4
  405dcc:	4b0a      	ldr	r3, [pc, #40]	; (405df8 <trans_anim_ready_cb+0x70>)
  405dce:	4798      	blx	r3
  405dd0:	bd38      	pop	{r3, r4, r5, pc}
        lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
  405dd2:	79a1      	ldrb	r1, [r4, #6]
  405dd4:	6820      	ldr	r0, [r4, #0]
  405dd6:	4b09      	ldr	r3, [pc, #36]	; (405dfc <trans_anim_ready_cb+0x74>)
  405dd8:	4798      	blx	r3
        lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
  405dda:	4b09      	ldr	r3, [pc, #36]	; (405e00 <trans_anim_ready_cb+0x78>)
  405ddc:	4798      	blx	r3
        lv_style_remove_prop(style_trans, tr->prop);
  405dde:	88a1      	ldrh	r1, [r4, #4]
  405de0:	4b08      	ldr	r3, [pc, #32]	; (405e04 <trans_anim_ready_cb+0x7c>)
  405de2:	4798      	blx	r3
  405de4:	e7ed      	b.n	405dc2 <trans_anim_ready_cb+0x3a>
  405de6:	bf00      	nop
  405de8:	2043a334 	.word	0x2043a334
  405dec:	004162a5 	.word	0x004162a5
  405df0:	004162b9 	.word	0x004162b9
  405df4:	00416361 	.word	0x00416361
  405df8:	0041679d 	.word	0x0041679d
  405dfc:	00405c4d 	.word	0x00405c4d
  405e00:	0040acdd 	.word	0x0040acdd
  405e04:	0040a139 	.word	0x0040a139

00405e08 <lv_obj_get_hidden>:
{
  405e08:	b510      	push	{r4, lr}
  405e0a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405e0c:	4b06      	ldr	r3, [pc, #24]	; (405e28 <lv_obj_get_hidden+0x20>)
  405e0e:	4798      	blx	r3
  405e10:	b120      	cbz	r0, 405e1c <lv_obj_get_hidden+0x14>
    return obj->hidden == 0 ? false : true;
  405e12:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
  405e16:	f3c0 1000 	ubfx	r0, r0, #4, #1
  405e1a:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405e1c:	4622      	mov	r2, r4
  405e1e:	2300      	movs	r3, #0
  405e20:	4802      	ldr	r0, [pc, #8]	; (405e2c <lv_obj_get_hidden+0x24>)
  405e22:	4903      	ldr	r1, [pc, #12]	; (405e30 <lv_obj_get_hidden+0x28>)
  405e24:	4788      	blx	r1
  405e26:	e7fe      	b.n	405e26 <lv_obj_get_hidden+0x1e>
  405e28:	00415f95 	.word	0x00415f95
  405e2c:	0042c728 	.word	0x0042c728
  405e30:	00415fa1 	.word	0x00415fa1

00405e34 <lv_obj_area_is_visible>:
{
  405e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405e38:	b082      	sub	sp, #8
  405e3a:	4604      	mov	r4, r0
  405e3c:	460d      	mov	r5, r1
    if(lv_obj_get_hidden(obj)) return false;
  405e3e:	4b34      	ldr	r3, [pc, #208]	; (405f10 <lv_obj_area_is_visible+0xdc>)
  405e40:	4798      	blx	r3
  405e42:	b120      	cbz	r0, 405e4e <lv_obj_area_is_visible+0x1a>
  405e44:	2600      	movs	r6, #0
}
  405e46:	4630      	mov	r0, r6
  405e48:	b002      	add	sp, #8
  405e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405e4e:	4606      	mov	r6, r0
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
  405e50:	4620      	mov	r0, r4
  405e52:	4b30      	ldr	r3, [pc, #192]	; (405f14 <lv_obj_area_is_visible+0xe0>)
  405e54:	4798      	blx	r3
  405e56:	4607      	mov	r7, r0
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
  405e58:	4b2f      	ldr	r3, [pc, #188]	; (405f18 <lv_obj_area_is_visible+0xe4>)
  405e5a:	4798      	blx	r3
  405e5c:	4680      	mov	r8, r0
    if(obj_scr == lv_disp_get_scr_act(disp) ||
  405e5e:	4b2f      	ldr	r3, [pc, #188]	; (405f1c <lv_obj_area_is_visible+0xe8>)
  405e60:	4798      	blx	r3
  405e62:	4287      	cmp	r7, r0
  405e64:	d010      	beq.n	405e88 <lv_obj_area_is_visible+0x54>
       obj_scr == lv_disp_get_scr_prev(disp) ||
  405e66:	4640      	mov	r0, r8
  405e68:	4b2d      	ldr	r3, [pc, #180]	; (405f20 <lv_obj_area_is_visible+0xec>)
  405e6a:	4798      	blx	r3
    if(obj_scr == lv_disp_get_scr_act(disp) ||
  405e6c:	4287      	cmp	r7, r0
  405e6e:	d00b      	beq.n	405e88 <lv_obj_area_is_visible+0x54>
       obj_scr == lv_disp_get_layer_top(disp) ||
  405e70:	4640      	mov	r0, r8
  405e72:	4b2c      	ldr	r3, [pc, #176]	; (405f24 <lv_obj_area_is_visible+0xf0>)
  405e74:	4798      	blx	r3
       obj_scr == lv_disp_get_scr_prev(disp) ||
  405e76:	4287      	cmp	r7, r0
  405e78:	d006      	beq.n	405e88 <lv_obj_area_is_visible+0x54>
       obj_scr == lv_disp_get_layer_sys(disp)) {
  405e7a:	4640      	mov	r0, r8
  405e7c:	4b2a      	ldr	r3, [pc, #168]	; (405f28 <lv_obj_area_is_visible+0xf4>)
  405e7e:	4798      	blx	r3
       obj_scr == lv_disp_get_layer_top(disp) ||
  405e80:	4287      	cmp	r7, r0
  405e82:	d001      	beq.n	405e88 <lv_obj_area_is_visible+0x54>
    return true;
  405e84:	2601      	movs	r6, #1
  405e86:	e7de      	b.n	405e46 <lv_obj_area_is_visible+0x12>
        lv_coord_t ext_size = obj->ext_draw_pad;
  405e88:	f9b4 7032 	ldrsh.w	r7, [r4, #50]	; 0x32
        lv_area_copy(&obj_coords, &obj->coords);
  405e8c:	f104 0110 	add.w	r1, r4, #16
    uint8_t * d8 = (uint8_t *)dst;
  405e90:	466a      	mov	r2, sp
  405e92:	2308      	movs	r3, #8
  405e94:	e004      	b.n	405ea0 <lv_obj_area_is_visible+0x6c>
        *d8 = *s8;
  405e96:	f811 0b01 	ldrb.w	r0, [r1], #1
  405e9a:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  405e9e:	3b01      	subs	r3, #1
    while(len) {
  405ea0:	2b00      	cmp	r3, #0
  405ea2:	d1f8      	bne.n	405e96 <lv_obj_area_is_visible+0x62>
        obj_coords.x1 -= ext_size;
  405ea4:	b2bb      	uxth	r3, r7
  405ea6:	f8bd 2000 	ldrh.w	r2, [sp]
  405eaa:	1ad2      	subs	r2, r2, r3
  405eac:	f8ad 2000 	strh.w	r2, [sp]
        obj_coords.y1 -= ext_size;
  405eb0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
  405eb4:	1ad2      	subs	r2, r2, r3
  405eb6:	f8ad 2002 	strh.w	r2, [sp, #2]
        obj_coords.x2 += ext_size;
  405eba:	f8bd 2004 	ldrh.w	r2, [sp, #4]
  405ebe:	441a      	add	r2, r3
  405ec0:	f8ad 2004 	strh.w	r2, [sp, #4]
        obj_coords.y2 += ext_size;
  405ec4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
  405ec8:	4413      	add	r3, r2
  405eca:	f8ad 3006 	strh.w	r3, [sp, #6]
        is_common = _lv_area_intersect(area, area, &obj_coords);
  405ece:	466a      	mov	r2, sp
  405ed0:	4629      	mov	r1, r5
  405ed2:	4628      	mov	r0, r5
  405ed4:	4b15      	ldr	r3, [pc, #84]	; (405f2c <lv_obj_area_is_visible+0xf8>)
  405ed6:	4798      	blx	r3
        if(is_common == false) return false;  /*The area is not on the object*/
  405ed8:	4607      	mov	r7, r0
  405eda:	2800      	cmp	r0, #0
  405edc:	d0b3      	beq.n	405e46 <lv_obj_area_is_visible+0x12>
        lv_obj_t * par = lv_obj_get_parent(obj);
  405ede:	4620      	mov	r0, r4
  405ee0:	4b13      	ldr	r3, [pc, #76]	; (405f30 <lv_obj_area_is_visible+0xfc>)
  405ee2:	4798      	blx	r3
  405ee4:	4604      	mov	r4, r0
        while(par != NULL) {
  405ee6:	b18c      	cbz	r4, 405f0c <lv_obj_area_is_visible+0xd8>
            is_common = _lv_area_intersect(area, area, &par->coords);
  405ee8:	f104 0210 	add.w	r2, r4, #16
  405eec:	4629      	mov	r1, r5
  405eee:	4628      	mov	r0, r5
  405ef0:	4b0e      	ldr	r3, [pc, #56]	; (405f2c <lv_obj_area_is_visible+0xf8>)
  405ef2:	4798      	blx	r3
            if(is_common == false) return false;       /*If no common parts with parent break;*/
  405ef4:	2800      	cmp	r0, #0
  405ef6:	d0a6      	beq.n	405e46 <lv_obj_area_is_visible+0x12>
            if(lv_obj_get_hidden(par)) return false; /*If the parent is hidden then the child is hidden and won't be drawn*/
  405ef8:	4620      	mov	r0, r4
  405efa:	4b05      	ldr	r3, [pc, #20]	; (405f10 <lv_obj_area_is_visible+0xdc>)
  405efc:	4798      	blx	r3
  405efe:	2800      	cmp	r0, #0
  405f00:	d1a1      	bne.n	405e46 <lv_obj_area_is_visible+0x12>
            par = lv_obj_get_parent(par);
  405f02:	4620      	mov	r0, r4
  405f04:	4b0a      	ldr	r3, [pc, #40]	; (405f30 <lv_obj_area_is_visible+0xfc>)
  405f06:	4798      	blx	r3
  405f08:	4604      	mov	r4, r0
  405f0a:	e7ec      	b.n	405ee6 <lv_obj_area_is_visible+0xb2>
    return true;
  405f0c:	463e      	mov	r6, r7
  405f0e:	e79a      	b.n	405e46 <lv_obj_area_is_visible+0x12>
  405f10:	00405e09 	.word	0x00405e09
  405f14:	00405a15 	.word	0x00405a15
  405f18:	00405a4d 	.word	0x00405a4d
  405f1c:	00403659 	.word	0x00403659
  405f20:	00403675 	.word	0x00403675
  405f24:	00403691 	.word	0x00403691
  405f28:	004036ad 	.word	0x004036ad
  405f2c:	00415663 	.word	0x00415663
  405f30:	004059ed 	.word	0x004059ed

00405f34 <lv_obj_invalidate_area>:
{
  405f34:	b530      	push	{r4, r5, lr}
  405f36:	b083      	sub	sp, #12
  405f38:	4605      	mov	r5, r0
  405f3a:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405f3c:	4b10      	ldr	r3, [pc, #64]	; (405f80 <lv_obj_invalidate_area+0x4c>)
  405f3e:	4798      	blx	r3
  405f40:	b118      	cbz	r0, 405f4a <lv_obj_invalidate_area+0x16>
  405f42:	4622      	mov	r2, r4
  405f44:	4669      	mov	r1, sp
  405f46:	2308      	movs	r3, #8
  405f48:	e00a      	b.n	405f60 <lv_obj_invalidate_area+0x2c>
  405f4a:	462a      	mov	r2, r5
  405f4c:	2300      	movs	r3, #0
  405f4e:	480d      	ldr	r0, [pc, #52]	; (405f84 <lv_obj_invalidate_area+0x50>)
  405f50:	490d      	ldr	r1, [pc, #52]	; (405f88 <lv_obj_invalidate_area+0x54>)
  405f52:	4788      	blx	r1
  405f54:	e7fe      	b.n	405f54 <lv_obj_invalidate_area+0x20>
        *d8 = *s8;
  405f56:	f812 0b01 	ldrb.w	r0, [r2], #1
  405f5a:	f801 0b01 	strb.w	r0, [r1], #1
        len--;
  405f5e:	3b01      	subs	r3, #1
    while(len) {
  405f60:	2b00      	cmp	r3, #0
  405f62:	d1f8      	bne.n	405f56 <lv_obj_invalidate_area+0x22>
    bool visible = lv_obj_area_is_visible(obj, &area_tmp);
  405f64:	4669      	mov	r1, sp
  405f66:	4628      	mov	r0, r5
  405f68:	4b08      	ldr	r3, [pc, #32]	; (405f8c <lv_obj_invalidate_area+0x58>)
  405f6a:	4798      	blx	r3
    if(visible) _lv_inv_area(lv_obj_get_disp(obj), &area_tmp);
  405f6c:	b128      	cbz	r0, 405f7a <lv_obj_invalidate_area+0x46>
  405f6e:	4628      	mov	r0, r5
  405f70:	4b07      	ldr	r3, [pc, #28]	; (405f90 <lv_obj_invalidate_area+0x5c>)
  405f72:	4798      	blx	r3
  405f74:	4669      	mov	r1, sp
  405f76:	4b07      	ldr	r3, [pc, #28]	; (405f94 <lv_obj_invalidate_area+0x60>)
  405f78:	4798      	blx	r3
}
  405f7a:	b003      	add	sp, #12
  405f7c:	bd30      	pop	{r4, r5, pc}
  405f7e:	bf00      	nop
  405f80:	00415f95 	.word	0x00415f95
  405f84:	0042c728 	.word	0x0042c728
  405f88:	00415fa1 	.word	0x00415fa1
  405f8c:	00405e35 	.word	0x00405e35
  405f90:	00405a4d 	.word	0x00405a4d
  405f94:	00409745 	.word	0x00409745

00405f98 <lv_obj_invalidate>:
{
  405f98:	b530      	push	{r4, r5, lr}
  405f9a:	b083      	sub	sp, #12
  405f9c:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405f9e:	4b19      	ldr	r3, [pc, #100]	; (406004 <lv_obj_invalidate+0x6c>)
  405fa0:	4798      	blx	r3
  405fa2:	b130      	cbz	r0, 405fb2 <lv_obj_invalidate+0x1a>
    lv_coord_t ext_size = obj->ext_draw_pad;
  405fa4:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
    lv_area_copy(&obj_coords, &obj->coords);
  405fa8:	f104 0010 	add.w	r0, r4, #16
    uint8_t * d8 = (uint8_t *)dst;
  405fac:	4669      	mov	r1, sp
  405fae:	2208      	movs	r2, #8
  405fb0:	e00a      	b.n	405fc8 <lv_obj_invalidate+0x30>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405fb2:	4622      	mov	r2, r4
  405fb4:	2300      	movs	r3, #0
  405fb6:	4814      	ldr	r0, [pc, #80]	; (406008 <lv_obj_invalidate+0x70>)
  405fb8:	4914      	ldr	r1, [pc, #80]	; (40600c <lv_obj_invalidate+0x74>)
  405fba:	4788      	blx	r1
  405fbc:	e7fe      	b.n	405fbc <lv_obj_invalidate+0x24>
        *d8 = *s8;
  405fbe:	f810 5b01 	ldrb.w	r5, [r0], #1
  405fc2:	f801 5b01 	strb.w	r5, [r1], #1
        len--;
  405fc6:	3a01      	subs	r2, #1
    while(len) {
  405fc8:	2a00      	cmp	r2, #0
  405fca:	d1f8      	bne.n	405fbe <lv_obj_invalidate+0x26>
    obj_coords.x1 -= ext_size;
  405fcc:	b29b      	uxth	r3, r3
  405fce:	f8bd 2000 	ldrh.w	r2, [sp]
  405fd2:	1ad2      	subs	r2, r2, r3
  405fd4:	f8ad 2000 	strh.w	r2, [sp]
    obj_coords.y1 -= ext_size;
  405fd8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
  405fdc:	1ad2      	subs	r2, r2, r3
  405fde:	f8ad 2002 	strh.w	r2, [sp, #2]
    obj_coords.x2 += ext_size;
  405fe2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
  405fe6:	441a      	add	r2, r3
  405fe8:	f8ad 2004 	strh.w	r2, [sp, #4]
    obj_coords.y2 += ext_size;
  405fec:	f8bd 2006 	ldrh.w	r2, [sp, #6]
  405ff0:	4413      	add	r3, r2
  405ff2:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_obj_invalidate_area(obj, &obj_coords);
  405ff6:	4669      	mov	r1, sp
  405ff8:	4620      	mov	r0, r4
  405ffa:	4b05      	ldr	r3, [pc, #20]	; (406010 <lv_obj_invalidate+0x78>)
  405ffc:	4798      	blx	r3
}
  405ffe:	b003      	add	sp, #12
  406000:	bd30      	pop	{r4, r5, pc}
  406002:	bf00      	nop
  406004:	00415f95 	.word	0x00415f95
  406008:	0042c728 	.word	0x0042c728
  40600c:	00415fa1 	.word	0x00415fa1
  406010:	00405f35 	.word	0x00405f35

00406014 <lv_obj_move_foreground>:
{
  406014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406016:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406018:	4b11      	ldr	r3, [pc, #68]	; (406060 <lv_obj_move_foreground+0x4c>)
  40601a:	4798      	blx	r3
  40601c:	b928      	cbnz	r0, 40602a <lv_obj_move_foreground+0x16>
  40601e:	462a      	mov	r2, r5
  406020:	2300      	movs	r3, #0
  406022:	4810      	ldr	r0, [pc, #64]	; (406064 <lv_obj_move_foreground+0x50>)
  406024:	4910      	ldr	r1, [pc, #64]	; (406068 <lv_obj_move_foreground+0x54>)
  406026:	4788      	blx	r1
  406028:	e7fe      	b.n	406028 <lv_obj_move_foreground+0x14>
    lv_obj_t * parent = lv_obj_get_parent(obj);
  40602a:	4628      	mov	r0, r5
  40602c:	4b0f      	ldr	r3, [pc, #60]	; (40606c <lv_obj_move_foreground+0x58>)
  40602e:	4798      	blx	r3
  406030:	4604      	mov	r4, r0
    if(_lv_ll_get_head(&parent->child_ll) == obj) return;
  406032:	1d06      	adds	r6, r0, #4
  406034:	4630      	mov	r0, r6
  406036:	4b0e      	ldr	r3, [pc, #56]	; (406070 <lv_obj_move_foreground+0x5c>)
  406038:	4798      	blx	r3
  40603a:	4285      	cmp	r5, r0
  40603c:	d00f      	beq.n	40605e <lv_obj_move_foreground+0x4a>
    lv_obj_invalidate(parent);
  40603e:	4620      	mov	r0, r4
  406040:	4f0c      	ldr	r7, [pc, #48]	; (406074 <lv_obj_move_foreground+0x60>)
  406042:	47b8      	blx	r7
    _lv_ll_chg_list(&parent->child_ll, &parent->child_ll, obj, true);
  406044:	2301      	movs	r3, #1
  406046:	462a      	mov	r2, r5
  406048:	4631      	mov	r1, r6
  40604a:	4630      	mov	r0, r6
  40604c:	4e0a      	ldr	r6, [pc, #40]	; (406078 <lv_obj_move_foreground+0x64>)
  40604e:	47b0      	blx	r6
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
  406050:	69e3      	ldr	r3, [r4, #28]
  406052:	462a      	mov	r2, r5
  406054:	2101      	movs	r1, #1
  406056:	4620      	mov	r0, r4
  406058:	4798      	blx	r3
    lv_obj_invalidate(parent);
  40605a:	4620      	mov	r0, r4
  40605c:	47b8      	blx	r7
  40605e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406060:	00415f95 	.word	0x00415f95
  406064:	0042c728 	.word	0x0042c728
  406068:	00415fa1 	.word	0x00415fa1
  40606c:	004059ed 	.word	0x004059ed
  406070:	004162a5 	.word	0x004162a5
  406074:	00405f99 	.word	0x00405f99
  406078:	00416435 	.word	0x00416435

0040607c <lv_obj_set_pos>:
{
  40607c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  406080:	b083      	sub	sp, #12
  406082:	4604      	mov	r4, r0
  406084:	460f      	mov	r7, r1
  406086:	4615      	mov	r5, r2
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406088:	4b24      	ldr	r3, [pc, #144]	; (40611c <lv_obj_set_pos+0xa0>)
  40608a:	4798      	blx	r3
  40608c:	2800      	cmp	r0, #0
  40608e:	d03f      	beq.n	406110 <lv_obj_set_pos+0x94>
    lv_obj_t * par = obj->parent;
  406090:	6826      	ldr	r6, [r4, #0]
    if(par) {
  406092:	b12e      	cbz	r6, 4060a0 <lv_obj_set_pos+0x24>
        x = x + par->coords.x1;
  406094:	8a33      	ldrh	r3, [r6, #16]
  406096:	441f      	add	r7, r3
  406098:	b23f      	sxth	r7, r7
        y = y + par->coords.y1;
  40609a:	8a73      	ldrh	r3, [r6, #18]
  40609c:	441d      	add	r5, r3
  40609e:	b22d      	sxth	r5, r5
    diff.x = x - obj->coords.x1;
  4060a0:	8a23      	ldrh	r3, [r4, #16]
  4060a2:	1afb      	subs	r3, r7, r3
  4060a4:	fa1f f883 	uxth.w	r8, r3
  4060a8:	fa0f f788 	sxth.w	r7, r8
    diff.y = y - obj->coords.y1;
  4060ac:	8a63      	ldrh	r3, [r4, #18]
  4060ae:	1aed      	subs	r5, r5, r3
  4060b0:	b2ad      	uxth	r5, r5
  4060b2:	fa0f f985 	sxth.w	r9, r5
    if(diff.x == 0 && diff.y == 0) return;
  4060b6:	b917      	cbnz	r7, 4060be <lv_obj_set_pos+0x42>
  4060b8:	f1b9 0f00 	cmp.w	r9, #0
  4060bc:	d025      	beq.n	40610a <lv_obj_set_pos+0x8e>
    lv_obj_invalidate(obj);
  4060be:	4620      	mov	r0, r4
  4060c0:	4b17      	ldr	r3, [pc, #92]	; (406120 <lv_obj_set_pos+0xa4>)
  4060c2:	4798      	blx	r3
    lv_obj_get_coords(obj, &ori);
  4060c4:	4669      	mov	r1, sp
  4060c6:	4620      	mov	r0, r4
  4060c8:	4b16      	ldr	r3, [pc, #88]	; (406124 <lv_obj_set_pos+0xa8>)
  4060ca:	4798      	blx	r3
    obj->coords.x1 += diff.x;
  4060cc:	8a23      	ldrh	r3, [r4, #16]
  4060ce:	4443      	add	r3, r8
  4060d0:	8223      	strh	r3, [r4, #16]
    obj->coords.y1 += diff.y;
  4060d2:	8a63      	ldrh	r3, [r4, #18]
  4060d4:	442b      	add	r3, r5
  4060d6:	8263      	strh	r3, [r4, #18]
    obj->coords.x2 += diff.x;
  4060d8:	8aa3      	ldrh	r3, [r4, #20]
  4060da:	4443      	add	r3, r8
  4060dc:	82a3      	strh	r3, [r4, #20]
    obj->coords.y2 += diff.y;
  4060de:	8ae3      	ldrh	r3, [r4, #22]
  4060e0:	441d      	add	r5, r3
  4060e2:	82e5      	strh	r5, [r4, #22]
    refresh_children_position(obj, diff.x, diff.y);
  4060e4:	464a      	mov	r2, r9
  4060e6:	4639      	mov	r1, r7
  4060e8:	4620      	mov	r0, r4
  4060ea:	4b0f      	ldr	r3, [pc, #60]	; (406128 <lv_obj_set_pos+0xac>)
  4060ec:	4798      	blx	r3
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
  4060ee:	69e3      	ldr	r3, [r4, #28]
  4060f0:	466a      	mov	r2, sp
  4060f2:	2102      	movs	r1, #2
  4060f4:	4620      	mov	r0, r4
  4060f6:	4798      	blx	r3
    if(par) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
  4060f8:	b126      	cbz	r6, 406104 <lv_obj_set_pos+0x88>
  4060fa:	69f3      	ldr	r3, [r6, #28]
  4060fc:	4622      	mov	r2, r4
  4060fe:	2101      	movs	r1, #1
  406100:	4630      	mov	r0, r6
  406102:	4798      	blx	r3
    lv_obj_invalidate(obj);
  406104:	4620      	mov	r0, r4
  406106:	4b06      	ldr	r3, [pc, #24]	; (406120 <lv_obj_set_pos+0xa4>)
  406108:	4798      	blx	r3
}
  40610a:	b003      	add	sp, #12
  40610c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406110:	4622      	mov	r2, r4
  406112:	2300      	movs	r3, #0
  406114:	4805      	ldr	r0, [pc, #20]	; (40612c <lv_obj_set_pos+0xb0>)
  406116:	4906      	ldr	r1, [pc, #24]	; (406130 <lv_obj_set_pos+0xb4>)
  406118:	4788      	blx	r1
  40611a:	e7fe      	b.n	40611a <lv_obj_set_pos+0x9e>
  40611c:	00415f95 	.word	0x00415f95
  406120:	00405f99 	.word	0x00405f99
  406124:	00405b01 	.word	0x00405b01
  406128:	0040545d 	.word	0x0040545d
  40612c:	0042c728 	.word	0x0042c728
  406130:	00415fa1 	.word	0x00415fa1

00406134 <lv_obj_set_x>:
{
  406134:	b538      	push	{r3, r4, r5, lr}
  406136:	4604      	mov	r4, r0
  406138:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40613a:	4b09      	ldr	r3, [pc, #36]	; (406160 <lv_obj_set_x+0x2c>)
  40613c:	4798      	blx	r3
  40613e:	b928      	cbnz	r0, 40614c <lv_obj_set_x+0x18>
  406140:	4622      	mov	r2, r4
  406142:	2300      	movs	r3, #0
  406144:	4807      	ldr	r0, [pc, #28]	; (406164 <lv_obj_set_x+0x30>)
  406146:	4908      	ldr	r1, [pc, #32]	; (406168 <lv_obj_set_x+0x34>)
  406148:	4788      	blx	r1
  40614a:	e7fe      	b.n	40614a <lv_obj_set_x+0x16>
    lv_obj_set_pos(obj, x, lv_obj_get_y(obj));
  40614c:	4620      	mov	r0, r4
  40614e:	4b07      	ldr	r3, [pc, #28]	; (40616c <lv_obj_set_x+0x38>)
  406150:	4798      	blx	r3
  406152:	4602      	mov	r2, r0
  406154:	4629      	mov	r1, r5
  406156:	4620      	mov	r0, r4
  406158:	4b05      	ldr	r3, [pc, #20]	; (406170 <lv_obj_set_x+0x3c>)
  40615a:	4798      	blx	r3
  40615c:	bd38      	pop	{r3, r4, r5, pc}
  40615e:	bf00      	nop
  406160:	00415f95 	.word	0x00415f95
  406164:	0042c728 	.word	0x0042c728
  406168:	00415fa1 	.word	0x00415fa1
  40616c:	00405b81 	.word	0x00405b81
  406170:	0040607d 	.word	0x0040607d

00406174 <lv_obj_set_y>:
{
  406174:	b538      	push	{r3, r4, r5, lr}
  406176:	4604      	mov	r4, r0
  406178:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40617a:	4b09      	ldr	r3, [pc, #36]	; (4061a0 <lv_obj_set_y+0x2c>)
  40617c:	4798      	blx	r3
  40617e:	b928      	cbnz	r0, 40618c <lv_obj_set_y+0x18>
  406180:	4622      	mov	r2, r4
  406182:	2300      	movs	r3, #0
  406184:	4807      	ldr	r0, [pc, #28]	; (4061a4 <lv_obj_set_y+0x30>)
  406186:	4908      	ldr	r1, [pc, #32]	; (4061a8 <lv_obj_set_y+0x34>)
  406188:	4788      	blx	r1
  40618a:	e7fe      	b.n	40618a <lv_obj_set_y+0x16>
    lv_obj_set_pos(obj, lv_obj_get_x(obj), y);
  40618c:	4620      	mov	r0, r4
  40618e:	4b07      	ldr	r3, [pc, #28]	; (4061ac <lv_obj_set_y+0x38>)
  406190:	4798      	blx	r3
  406192:	462a      	mov	r2, r5
  406194:	4601      	mov	r1, r0
  406196:	4620      	mov	r0, r4
  406198:	4b05      	ldr	r3, [pc, #20]	; (4061b0 <lv_obj_set_y+0x3c>)
  40619a:	4798      	blx	r3
  40619c:	bd38      	pop	{r3, r4, r5, pc}
  40619e:	bf00      	nop
  4061a0:	00415f95 	.word	0x00415f95
  4061a4:	0042c728 	.word	0x0042c728
  4061a8:	00415fa1 	.word	0x00415fa1
  4061ac:	00405b41 	.word	0x00405b41
  4061b0:	0040607d 	.word	0x0040607d

004061b4 <obj_align_core>:
{
  4061b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4061b6:	b083      	sub	sp, #12
  4061b8:	4604      	mov	r4, r0
  4061ba:	461d      	mov	r5, r3
  4061bc:	f89d 6020 	ldrb.w	r6, [sp, #32]
    _lv_area_align(&base->coords, &obj->coords, align, &new_pos);
  4061c0:	f101 0010 	add.w	r0, r1, #16
  4061c4:	ab01      	add	r3, sp, #4
  4061c6:	f104 0110 	add.w	r1, r4, #16
  4061ca:	4f18      	ldr	r7, [pc, #96]	; (40622c <obj_align_core+0x78>)
  4061cc:	47b8      	blx	r7
    lv_obj_t * par        = lv_obj_get_parent(obj);
  4061ce:	4620      	mov	r0, r4
  4061d0:	4b17      	ldr	r3, [pc, #92]	; (406230 <obj_align_core+0x7c>)
  4061d2:	4798      	blx	r3
    lv_coord_t par_abs_x  = par->coords.x1;
  4061d4:	f9b0 7010 	ldrsh.w	r7, [r0, #16]
    lv_coord_t par_abs_y  = par->coords.y1;
  4061d8:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
    new_pos.x += x_ofs;
  4061dc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
  4061e0:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
  4061e4:	4411      	add	r1, r2
  4061e6:	b289      	uxth	r1, r1
    new_pos.y += y_ofs;
  4061e8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
  4061ec:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
  4061f0:	4402      	add	r2, r0
  4061f2:	b292      	uxth	r2, r2
    new_pos.x -= par_abs_x;
  4061f4:	1bc9      	subs	r1, r1, r7
  4061f6:	b209      	sxth	r1, r1
  4061f8:	f8ad 1004 	strh.w	r1, [sp, #4]
    new_pos.y -= par_abs_y;
  4061fc:	1ad2      	subs	r2, r2, r3
  4061fe:	b212      	sxth	r2, r2
  406200:	f8ad 2006 	strh.w	r2, [sp, #6]
    if(x_set && y_set) lv_obj_set_pos(obj, new_pos.x, new_pos.y);
  406204:	4235      	tst	r5, r6
  406206:	d103      	bne.n	406210 <obj_align_core+0x5c>
    else if(x_set) lv_obj_set_x(obj, new_pos.x);
  406208:	b935      	cbnz	r5, 406218 <obj_align_core+0x64>
    else if(y_set) lv_obj_set_y(obj, new_pos.y);
  40620a:	b94e      	cbnz	r6, 406220 <obj_align_core+0x6c>
}
  40620c:	b003      	add	sp, #12
  40620e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(x_set && y_set) lv_obj_set_pos(obj, new_pos.x, new_pos.y);
  406210:	4620      	mov	r0, r4
  406212:	4b08      	ldr	r3, [pc, #32]	; (406234 <obj_align_core+0x80>)
  406214:	4798      	blx	r3
  406216:	e7f9      	b.n	40620c <obj_align_core+0x58>
    else if(x_set) lv_obj_set_x(obj, new_pos.x);
  406218:	4620      	mov	r0, r4
  40621a:	4b07      	ldr	r3, [pc, #28]	; (406238 <obj_align_core+0x84>)
  40621c:	4798      	blx	r3
  40621e:	e7f5      	b.n	40620c <obj_align_core+0x58>
    else if(y_set) lv_obj_set_y(obj, new_pos.y);
  406220:	4611      	mov	r1, r2
  406222:	4620      	mov	r0, r4
  406224:	4b05      	ldr	r3, [pc, #20]	; (40623c <obj_align_core+0x88>)
  406226:	4798      	blx	r3
}
  406228:	e7f0      	b.n	40620c <obj_align_core+0x58>
  40622a:	bf00      	nop
  40622c:	004159a1 	.word	0x004159a1
  406230:	004059ed 	.word	0x004059ed
  406234:	0040607d 	.word	0x0040607d
  406238:	00406135 	.word	0x00406135
  40623c:	00406175 	.word	0x00406175

00406240 <lv_obj_align>:
{
  406240:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  406244:	b085      	sub	sp, #20
  406246:	4604      	mov	r4, r0
  406248:	460d      	mov	r5, r1
  40624a:	4690      	mov	r8, r2
  40624c:	461f      	mov	r7, r3
  40624e:	f9bd 6030 	ldrsh.w	r6, [sp, #48]	; 0x30
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406252:	4b19      	ldr	r3, [pc, #100]	; (4062b8 <lv_obj_align+0x78>)
  406254:	4798      	blx	r3
  406256:	b928      	cbnz	r0, 406264 <lv_obj_align+0x24>
  406258:	4622      	mov	r2, r4
  40625a:	2300      	movs	r3, #0
  40625c:	4817      	ldr	r0, [pc, #92]	; (4062bc <lv_obj_align+0x7c>)
  40625e:	4918      	ldr	r1, [pc, #96]	; (4062c0 <lv_obj_align+0x80>)
  406260:	4788      	blx	r1
  406262:	e7fe      	b.n	406262 <lv_obj_align+0x22>
    if(base == NULL) base = lv_obj_get_parent(obj);
  406264:	b14d      	cbz	r5, 40627a <lv_obj_align+0x3a>
    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
  406266:	4628      	mov	r0, r5
  406268:	4b13      	ldr	r3, [pc, #76]	; (4062b8 <lv_obj_align+0x78>)
  40626a:	4798      	blx	r3
  40626c:	b950      	cbnz	r0, 406284 <lv_obj_align+0x44>
  40626e:	462a      	mov	r2, r5
  406270:	2300      	movs	r3, #0
  406272:	4812      	ldr	r0, [pc, #72]	; (4062bc <lv_obj_align+0x7c>)
  406274:	4912      	ldr	r1, [pc, #72]	; (4062c0 <lv_obj_align+0x80>)
  406276:	4788      	blx	r1
  406278:	e7fe      	b.n	406278 <lv_obj_align+0x38>
    if(base == NULL) base = lv_obj_get_parent(obj);
  40627a:	4620      	mov	r0, r4
  40627c:	4b11      	ldr	r3, [pc, #68]	; (4062c4 <lv_obj_align+0x84>)
  40627e:	4798      	blx	r3
  406280:	4605      	mov	r5, r0
  406282:	e7f0      	b.n	406266 <lv_obj_align+0x26>
    obj_align_core(obj, base, align, true, true, x_ofs, y_ofs);
  406284:	9602      	str	r6, [sp, #8]
  406286:	9701      	str	r7, [sp, #4]
  406288:	2301      	movs	r3, #1
  40628a:	9300      	str	r3, [sp, #0]
  40628c:	4642      	mov	r2, r8
  40628e:	4629      	mov	r1, r5
  406290:	4620      	mov	r0, r4
  406292:	f8df 9034 	ldr.w	r9, [pc, #52]	; 4062c8 <lv_obj_align+0x88>
  406296:	47c8      	blx	r9
    obj->realign.align       = align;
  406298:	f884 8048 	strb.w	r8, [r4, #72]	; 0x48
    obj->realign.xofs        = x_ofs;
  40629c:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
    obj->realign.yofs        = y_ofs;
  4062a0:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
    obj->realign.base        = base;
  4062a4:	6425      	str	r5, [r4, #64]	; 0x40
    obj->realign.mid_align = 0;
  4062a6:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
  4062aa:	f36f 0341 	bfc	r3, #1, #1
  4062ae:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
}
  4062b2:	b005      	add	sp, #20
  4062b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4062b8:	00415f95 	.word	0x00415f95
  4062bc:	0042c728 	.word	0x0042c728
  4062c0:	00415fa1 	.word	0x00415fa1
  4062c4:	004059ed 	.word	0x004059ed
  4062c8:	004061b5 	.word	0x004061b5

004062cc <obj_align_mid_core>:
{
  4062cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4062d0:	b083      	sub	sp, #12
  4062d2:	4680      	mov	r8, r0
  4062d4:	9001      	str	r0, [sp, #4]
  4062d6:	460f      	mov	r7, r1
  4062d8:	4616      	mov	r6, r2
  4062da:	469a      	mov	sl, r3
  4062dc:	f89d b030 	ldrb.w	fp, [sp, #48]	; 0x30
    lv_coord_t new_x = lv_obj_get_x(obj);
  4062e0:	4ba4      	ldr	r3, [pc, #656]	; (406574 <obj_align_mid_core+0x2a8>)
  4062e2:	4798      	blx	r3
  4062e4:	4605      	mov	r5, r0
    lv_coord_t new_y = lv_obj_get_y(obj);
  4062e6:	4640      	mov	r0, r8
  4062e8:	4ba3      	ldr	r3, [pc, #652]	; (406578 <obj_align_mid_core+0x2ac>)
  4062ea:	4798      	blx	r3
  4062ec:	4604      	mov	r4, r0
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
  4062ee:	4640      	mov	r0, r8
  4062f0:	4ba2      	ldr	r3, [pc, #648]	; (40657c <obj_align_mid_core+0x2b0>)
  4062f2:	4798      	blx	r3
  4062f4:	4681      	mov	r9, r0
  4062f6:	2800      	cmp	r0, #0
  4062f8:	db22      	blt.n	406340 <obj_align_mid_core+0x74>
  4062fa:	f349 094f 	sbfx	r9, r9, #1, #16
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
  4062fe:	9801      	ldr	r0, [sp, #4]
  406300:	4b9f      	ldr	r3, [pc, #636]	; (406580 <obj_align_mid_core+0x2b4>)
  406302:	4798      	blx	r3
  406304:	4680      	mov	r8, r0
  406306:	2800      	cmp	r0, #0
  406308:	db1d      	blt.n	406346 <obj_align_mid_core+0x7a>
  40630a:	f348 084f 	sbfx	r8, r8, #1, #16
    switch(align) {
  40630e:	2e14      	cmp	r6, #20
  406310:	d82e      	bhi.n	406370 <obj_align_mid_core+0xa4>
  406312:	e8df f016 	tbh	[pc, r6, lsl #1]
  406316:	001b      	.short	0x001b
  406318:	0062005b 	.word	0x0062005b
  40631c:	007c0071 	.word	0x007c0071
  406320:	009a0087 	.word	0x009a0087
  406324:	00b800a9 	.word	0x00b800a9
  406328:	00d200cb 	.word	0x00d200cb
  40632c:	00ec00e1 	.word	0x00ec00e1
  406330:	010a00f7 	.word	0x010a00f7
  406334:	01200119 	.word	0x01200119
  406338:	01440139 	.word	0x01440139
  40633c:	0162014f 	.word	0x0162014f
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
  406340:	f100 0901 	add.w	r9, r0, #1
  406344:	e7d9      	b.n	4062fa <obj_align_mid_core+0x2e>
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
  406346:	f100 0801 	add.w	r8, r0, #1
  40634a:	e7de      	b.n	40630a <obj_align_mid_core+0x3e>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  40634c:	4638      	mov	r0, r7
  40634e:	4b8b      	ldr	r3, [pc, #556]	; (40657c <obj_align_mid_core+0x2b0>)
  406350:	4798      	blx	r3
  406352:	4605      	mov	r5, r0
  406354:	2800      	cmp	r0, #0
  406356:	db35      	blt.n	4063c4 <obj_align_mid_core+0xf8>
  406358:	ebc9 0565 	rsb	r5, r9, r5, asr #1
  40635c:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  40635e:	4638      	mov	r0, r7
  406360:	4b87      	ldr	r3, [pc, #540]	; (406580 <obj_align_mid_core+0x2b4>)
  406362:	4798      	blx	r3
  406364:	4604      	mov	r4, r0
  406366:	2800      	cmp	r0, #0
  406368:	db2e      	blt.n	4063c8 <obj_align_mid_core+0xfc>
  40636a:	ebc8 0464 	rsb	r4, r8, r4, asr #1
  40636e:	b224      	sxth	r4, r4
    lv_obj_t * par        = lv_obj_get_parent(obj);
  406370:	9801      	ldr	r0, [sp, #4]
  406372:	4b84      	ldr	r3, [pc, #528]	; (406584 <obj_align_mid_core+0x2b8>)
  406374:	4798      	blx	r3
    lv_coord_t base_abs_x = base->coords.x1;
  406376:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
    lv_coord_t base_abs_y = base->coords.y1;
  40637a:	f9b7 e012 	ldrsh.w	lr, [r7, #18]
    lv_coord_t par_abs_x  = par->coords.x1;
  40637e:	f9b0 7010 	ldrsh.w	r7, [r0, #16]
    lv_coord_t par_abs_y  = par->coords.y1;
  406382:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
    new_x += x_ofs + base_abs_x;
  406386:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
  40638a:	4411      	add	r1, r2
  40638c:	fa15 f181 	uxtah	r1, r5, r1
  406390:	b289      	uxth	r1, r1
    new_y += y_ofs + base_abs_y;
  406392:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
  406396:	4472      	add	r2, lr
  406398:	fa14 f282 	uxtah	r2, r4, r2
  40639c:	b292      	uxth	r2, r2
    new_x -= par_abs_x;
  40639e:	1bc9      	subs	r1, r1, r7
  4063a0:	b209      	sxth	r1, r1
    new_y -= par_abs_y;
  4063a2:	1ad2      	subs	r2, r2, r3
  4063a4:	b212      	sxth	r2, r2
    if(x_set && y_set) lv_obj_set_pos(obj, new_x, new_y);
  4063a6:	ea1a 0f0b 	tst.w	sl, fp
  4063aa:	f040 8125 	bne.w	4065f8 <obj_align_mid_core+0x32c>
    else if(x_set) lv_obj_set_x(obj, new_x);
  4063ae:	f1ba 0f00 	cmp.w	sl, #0
  4063b2:	f040 8125 	bne.w	406600 <obj_align_mid_core+0x334>
    else if(y_set) lv_obj_set_y(obj, new_y);
  4063b6:	f1bb 0f00 	cmp.w	fp, #0
  4063ba:	f040 8125 	bne.w	406608 <obj_align_mid_core+0x33c>
}
  4063be:	b003      	add	sp, #12
  4063c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  4063c4:	1c45      	adds	r5, r0, #1
  4063c6:	e7c7      	b.n	406358 <obj_align_mid_core+0x8c>
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  4063c8:	1c44      	adds	r4, r0, #1
  4063ca:	e7ce      	b.n	40636a <obj_align_mid_core+0x9e>
            new_x = -obj_w_half;
  4063cc:	f1c9 0500 	rsb	r5, r9, #0
  4063d0:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  4063d2:	f1c8 0400 	rsb	r4, r8, #0
  4063d6:	b224      	sxth	r4, r4
            break;
  4063d8:	e7ca      	b.n	406370 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  4063da:	4638      	mov	r0, r7
  4063dc:	4b67      	ldr	r3, [pc, #412]	; (40657c <obj_align_mid_core+0x2b0>)
  4063de:	4798      	blx	r3
  4063e0:	4605      	mov	r5, r0
  4063e2:	2800      	cmp	r0, #0
  4063e4:	db06      	blt.n	4063f4 <obj_align_mid_core+0x128>
  4063e6:	ebc9 0565 	rsb	r5, r9, r5, asr #1
  4063ea:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  4063ec:	f1c8 0400 	rsb	r4, r8, #0
  4063f0:	b224      	sxth	r4, r4
            break;
  4063f2:	e7bd      	b.n	406370 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  4063f4:	1c45      	adds	r5, r0, #1
  4063f6:	e7f6      	b.n	4063e6 <obj_align_mid_core+0x11a>
            new_x = lv_obj_get_width(base) - obj_w_half;
  4063f8:	4638      	mov	r0, r7
  4063fa:	4b60      	ldr	r3, [pc, #384]	; (40657c <obj_align_mid_core+0x2b0>)
  4063fc:	4798      	blx	r3
  4063fe:	b285      	uxth	r5, r0
  406400:	eba5 0509 	sub.w	r5, r5, r9
  406404:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  406406:	f1c8 0400 	rsb	r4, r8, #0
  40640a:	b224      	sxth	r4, r4
            break;
  40640c:	e7b0      	b.n	406370 <obj_align_mid_core+0xa4>
            new_x = -obj_w_half;
  40640e:	f1c9 0500 	rsb	r5, r9, #0
  406412:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  406414:	4638      	mov	r0, r7
  406416:	4b5a      	ldr	r3, [pc, #360]	; (406580 <obj_align_mid_core+0x2b4>)
  406418:	4798      	blx	r3
  40641a:	b284      	uxth	r4, r0
  40641c:	eba4 0408 	sub.w	r4, r4, r8
  406420:	b224      	sxth	r4, r4
            break;
  406422:	e7a5      	b.n	406370 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  406424:	4638      	mov	r0, r7
  406426:	4b55      	ldr	r3, [pc, #340]	; (40657c <obj_align_mid_core+0x2b0>)
  406428:	4798      	blx	r3
  40642a:	4605      	mov	r5, r0
  40642c:	2800      	cmp	r0, #0
  40642e:	db0a      	blt.n	406446 <obj_align_mid_core+0x17a>
  406430:	ebc9 0565 	rsb	r5, r9, r5, asr #1
  406434:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  406436:	4638      	mov	r0, r7
  406438:	4b51      	ldr	r3, [pc, #324]	; (406580 <obj_align_mid_core+0x2b4>)
  40643a:	4798      	blx	r3
  40643c:	b284      	uxth	r4, r0
  40643e:	eba4 0408 	sub.w	r4, r4, r8
  406442:	b224      	sxth	r4, r4
            break;
  406444:	e794      	b.n	406370 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  406446:	1c45      	adds	r5, r0, #1
  406448:	e7f2      	b.n	406430 <obj_align_mid_core+0x164>
            new_x = lv_obj_get_width(base) - obj_w_half;
  40644a:	4638      	mov	r0, r7
  40644c:	4b4b      	ldr	r3, [pc, #300]	; (40657c <obj_align_mid_core+0x2b0>)
  40644e:	4798      	blx	r3
  406450:	b285      	uxth	r5, r0
  406452:	eba5 0509 	sub.w	r5, r5, r9
  406456:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  406458:	4638      	mov	r0, r7
  40645a:	4b49      	ldr	r3, [pc, #292]	; (406580 <obj_align_mid_core+0x2b4>)
  40645c:	4798      	blx	r3
  40645e:	b284      	uxth	r4, r0
  406460:	eba4 0408 	sub.w	r4, r4, r8
  406464:	b224      	sxth	r4, r4
            break;
  406466:	e783      	b.n	406370 <obj_align_mid_core+0xa4>
            new_x = -obj_w_half;
  406468:	f1c9 0500 	rsb	r5, r9, #0
  40646c:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  40646e:	4638      	mov	r0, r7
  406470:	4b43      	ldr	r3, [pc, #268]	; (406580 <obj_align_mid_core+0x2b4>)
  406472:	4798      	blx	r3
  406474:	4604      	mov	r4, r0
  406476:	2800      	cmp	r0, #0
  406478:	db03      	blt.n	406482 <obj_align_mid_core+0x1b6>
  40647a:	ebc8 0464 	rsb	r4, r8, r4, asr #1
  40647e:	b224      	sxth	r4, r4
            break;
  406480:	e776      	b.n	406370 <obj_align_mid_core+0xa4>
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  406482:	1c44      	adds	r4, r0, #1
  406484:	e7f9      	b.n	40647a <obj_align_mid_core+0x1ae>
            new_x = lv_obj_get_width(base) - obj_w_half;
  406486:	4638      	mov	r0, r7
  406488:	4b3c      	ldr	r3, [pc, #240]	; (40657c <obj_align_mid_core+0x2b0>)
  40648a:	4798      	blx	r3
  40648c:	b285      	uxth	r5, r0
  40648e:	eba5 0509 	sub.w	r5, r5, r9
  406492:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  406494:	4638      	mov	r0, r7
  406496:	4b3a      	ldr	r3, [pc, #232]	; (406580 <obj_align_mid_core+0x2b4>)
  406498:	4798      	blx	r3
  40649a:	4604      	mov	r4, r0
  40649c:	2800      	cmp	r0, #0
  40649e:	db03      	blt.n	4064a8 <obj_align_mid_core+0x1dc>
  4064a0:	ebc8 0464 	rsb	r4, r8, r4, asr #1
  4064a4:	b224      	sxth	r4, r4
            break;
  4064a6:	e763      	b.n	406370 <obj_align_mid_core+0xa4>
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  4064a8:	1c44      	adds	r4, r0, #1
  4064aa:	e7f9      	b.n	4064a0 <obj_align_mid_core+0x1d4>
            new_x = -obj_w_half;
  4064ac:	f1c9 0500 	rsb	r5, r9, #0
  4064b0:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  4064b2:	f1c8 0400 	rsb	r4, r8, #0
  4064b6:	b224      	sxth	r4, r4
            break;
  4064b8:	e75a      	b.n	406370 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  4064ba:	4638      	mov	r0, r7
  4064bc:	4b2f      	ldr	r3, [pc, #188]	; (40657c <obj_align_mid_core+0x2b0>)
  4064be:	4798      	blx	r3
  4064c0:	4605      	mov	r5, r0
  4064c2:	2800      	cmp	r0, #0
  4064c4:	db06      	blt.n	4064d4 <obj_align_mid_core+0x208>
  4064c6:	ebc9 0565 	rsb	r5, r9, r5, asr #1
  4064ca:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  4064cc:	f1c8 0400 	rsb	r4, r8, #0
  4064d0:	b224      	sxth	r4, r4
            break;
  4064d2:	e74d      	b.n	406370 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  4064d4:	1c45      	adds	r5, r0, #1
  4064d6:	e7f6      	b.n	4064c6 <obj_align_mid_core+0x1fa>
            new_x = lv_obj_get_width(base) - obj_w_half;
  4064d8:	4638      	mov	r0, r7
  4064da:	4b28      	ldr	r3, [pc, #160]	; (40657c <obj_align_mid_core+0x2b0>)
  4064dc:	4798      	blx	r3
  4064de:	b285      	uxth	r5, r0
  4064e0:	eba5 0509 	sub.w	r5, r5, r9
  4064e4:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  4064e6:	f1c8 0400 	rsb	r4, r8, #0
  4064ea:	b224      	sxth	r4, r4
            break;
  4064ec:	e740      	b.n	406370 <obj_align_mid_core+0xa4>
            new_x = -obj_w_half;
  4064ee:	f1c9 0500 	rsb	r5, r9, #0
  4064f2:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  4064f4:	4638      	mov	r0, r7
  4064f6:	4b22      	ldr	r3, [pc, #136]	; (406580 <obj_align_mid_core+0x2b4>)
  4064f8:	4798      	blx	r3
  4064fa:	b284      	uxth	r4, r0
  4064fc:	eba4 0408 	sub.w	r4, r4, r8
  406500:	b224      	sxth	r4, r4
            break;
  406502:	e735      	b.n	406370 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  406504:	4638      	mov	r0, r7
  406506:	4b1d      	ldr	r3, [pc, #116]	; (40657c <obj_align_mid_core+0x2b0>)
  406508:	4798      	blx	r3
  40650a:	4605      	mov	r5, r0
  40650c:	2800      	cmp	r0, #0
  40650e:	db0a      	blt.n	406526 <obj_align_mid_core+0x25a>
  406510:	ebc9 0565 	rsb	r5, r9, r5, asr #1
  406514:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  406516:	4638      	mov	r0, r7
  406518:	4b19      	ldr	r3, [pc, #100]	; (406580 <obj_align_mid_core+0x2b4>)
  40651a:	4798      	blx	r3
  40651c:	b284      	uxth	r4, r0
  40651e:	eba4 0408 	sub.w	r4, r4, r8
  406522:	b224      	sxth	r4, r4
            break;
  406524:	e724      	b.n	406370 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  406526:	1c45      	adds	r5, r0, #1
  406528:	e7f2      	b.n	406510 <obj_align_mid_core+0x244>
            new_x = lv_obj_get_width(base) - obj_w_half;
  40652a:	4638      	mov	r0, r7
  40652c:	4b13      	ldr	r3, [pc, #76]	; (40657c <obj_align_mid_core+0x2b0>)
  40652e:	4798      	blx	r3
  406530:	b285      	uxth	r5, r0
  406532:	eba5 0509 	sub.w	r5, r5, r9
  406536:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  406538:	4638      	mov	r0, r7
  40653a:	4b11      	ldr	r3, [pc, #68]	; (406580 <obj_align_mid_core+0x2b4>)
  40653c:	4798      	blx	r3
  40653e:	b284      	uxth	r4, r0
  406540:	eba4 0408 	sub.w	r4, r4, r8
  406544:	b224      	sxth	r4, r4
            break;
  406546:	e713      	b.n	406370 <obj_align_mid_core+0xa4>
            new_x = -obj_w_half;
  406548:	f1c9 0500 	rsb	r5, r9, #0
  40654c:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  40654e:	f1c8 0400 	rsb	r4, r8, #0
  406552:	b224      	sxth	r4, r4
            break;
  406554:	e70c      	b.n	406370 <obj_align_mid_core+0xa4>
            new_x = -obj_w_half;
  406556:	f1c9 0500 	rsb	r5, r9, #0
  40655a:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  40655c:	4638      	mov	r0, r7
  40655e:	4b08      	ldr	r3, [pc, #32]	; (406580 <obj_align_mid_core+0x2b4>)
  406560:	4798      	blx	r3
  406562:	4604      	mov	r4, r0
  406564:	2800      	cmp	r0, #0
  406566:	db03      	blt.n	406570 <obj_align_mid_core+0x2a4>
  406568:	ebc8 0464 	rsb	r4, r8, r4, asr #1
  40656c:	b224      	sxth	r4, r4
            break;
  40656e:	e6ff      	b.n	406370 <obj_align_mid_core+0xa4>
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  406570:	1c44      	adds	r4, r0, #1
  406572:	e7f9      	b.n	406568 <obj_align_mid_core+0x29c>
  406574:	00405b41 	.word	0x00405b41
  406578:	00405b81 	.word	0x00405b81
  40657c:	00405bc1 	.word	0x00405bc1
  406580:	00405bf1 	.word	0x00405bf1
  406584:	004059ed 	.word	0x004059ed
            new_x = -obj_w_half;
  406588:	f1c9 0500 	rsb	r5, r9, #0
  40658c:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  40658e:	4638      	mov	r0, r7
  406590:	4b20      	ldr	r3, [pc, #128]	; (406614 <obj_align_mid_core+0x348>)
  406592:	4798      	blx	r3
  406594:	b284      	uxth	r4, r0
  406596:	eba4 0408 	sub.w	r4, r4, r8
  40659a:	b224      	sxth	r4, r4
            break;
  40659c:	e6e8      	b.n	406370 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) - obj_w_half;
  40659e:	4638      	mov	r0, r7
  4065a0:	4b1d      	ldr	r3, [pc, #116]	; (406618 <obj_align_mid_core+0x34c>)
  4065a2:	4798      	blx	r3
  4065a4:	b285      	uxth	r5, r0
  4065a6:	eba5 0509 	sub.w	r5, r5, r9
  4065aa:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  4065ac:	f1c8 0400 	rsb	r4, r8, #0
  4065b0:	b224      	sxth	r4, r4
            break;
  4065b2:	e6dd      	b.n	406370 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) - obj_w_half;
  4065b4:	4638      	mov	r0, r7
  4065b6:	4b18      	ldr	r3, [pc, #96]	; (406618 <obj_align_mid_core+0x34c>)
  4065b8:	4798      	blx	r3
  4065ba:	b285      	uxth	r5, r0
  4065bc:	eba5 0509 	sub.w	r5, r5, r9
  4065c0:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  4065c2:	4638      	mov	r0, r7
  4065c4:	4b13      	ldr	r3, [pc, #76]	; (406614 <obj_align_mid_core+0x348>)
  4065c6:	4798      	blx	r3
  4065c8:	4604      	mov	r4, r0
  4065ca:	2800      	cmp	r0, #0
  4065cc:	db03      	blt.n	4065d6 <obj_align_mid_core+0x30a>
  4065ce:	ebc8 0464 	rsb	r4, r8, r4, asr #1
  4065d2:	b224      	sxth	r4, r4
            break;
  4065d4:	e6cc      	b.n	406370 <obj_align_mid_core+0xa4>
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  4065d6:	1c44      	adds	r4, r0, #1
  4065d8:	e7f9      	b.n	4065ce <obj_align_mid_core+0x302>
            new_x = lv_obj_get_width(base) - obj_w_half;
  4065da:	4638      	mov	r0, r7
  4065dc:	4b0e      	ldr	r3, [pc, #56]	; (406618 <obj_align_mid_core+0x34c>)
  4065de:	4798      	blx	r3
  4065e0:	b285      	uxth	r5, r0
  4065e2:	eba5 0509 	sub.w	r5, r5, r9
  4065e6:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  4065e8:	4638      	mov	r0, r7
  4065ea:	4b0a      	ldr	r3, [pc, #40]	; (406614 <obj_align_mid_core+0x348>)
  4065ec:	4798      	blx	r3
  4065ee:	b284      	uxth	r4, r0
  4065f0:	eba4 0408 	sub.w	r4, r4, r8
  4065f4:	b224      	sxth	r4, r4
            break;
  4065f6:	e6bb      	b.n	406370 <obj_align_mid_core+0xa4>
    if(x_set && y_set) lv_obj_set_pos(obj, new_x, new_y);
  4065f8:	9801      	ldr	r0, [sp, #4]
  4065fa:	4b08      	ldr	r3, [pc, #32]	; (40661c <obj_align_mid_core+0x350>)
  4065fc:	4798      	blx	r3
  4065fe:	e6de      	b.n	4063be <obj_align_mid_core+0xf2>
    else if(x_set) lv_obj_set_x(obj, new_x);
  406600:	9801      	ldr	r0, [sp, #4]
  406602:	4b07      	ldr	r3, [pc, #28]	; (406620 <obj_align_mid_core+0x354>)
  406604:	4798      	blx	r3
  406606:	e6da      	b.n	4063be <obj_align_mid_core+0xf2>
    else if(y_set) lv_obj_set_y(obj, new_y);
  406608:	4611      	mov	r1, r2
  40660a:	9801      	ldr	r0, [sp, #4]
  40660c:	4b05      	ldr	r3, [pc, #20]	; (406624 <obj_align_mid_core+0x358>)
  40660e:	4798      	blx	r3
}
  406610:	e6d5      	b.n	4063be <obj_align_mid_core+0xf2>
  406612:	bf00      	nop
  406614:	00405bf1 	.word	0x00405bf1
  406618:	00405bc1 	.word	0x00405bc1
  40661c:	0040607d 	.word	0x0040607d
  406620:	00406135 	.word	0x00406135
  406624:	00406175 	.word	0x00406175

00406628 <lv_obj_align_mid>:
{
  406628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40662c:	b085      	sub	sp, #20
  40662e:	4604      	mov	r4, r0
  406630:	460d      	mov	r5, r1
  406632:	4690      	mov	r8, r2
  406634:	461f      	mov	r7, r3
  406636:	f9bd 6030 	ldrsh.w	r6, [sp, #48]	; 0x30
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40663a:	4b19      	ldr	r3, [pc, #100]	; (4066a0 <lv_obj_align_mid+0x78>)
  40663c:	4798      	blx	r3
  40663e:	b928      	cbnz	r0, 40664c <lv_obj_align_mid+0x24>
  406640:	4622      	mov	r2, r4
  406642:	2300      	movs	r3, #0
  406644:	4817      	ldr	r0, [pc, #92]	; (4066a4 <lv_obj_align_mid+0x7c>)
  406646:	4918      	ldr	r1, [pc, #96]	; (4066a8 <lv_obj_align_mid+0x80>)
  406648:	4788      	blx	r1
  40664a:	e7fe      	b.n	40664a <lv_obj_align_mid+0x22>
    if(base == NULL) {
  40664c:	b14d      	cbz	r5, 406662 <lv_obj_align_mid+0x3a>
    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
  40664e:	4628      	mov	r0, r5
  406650:	4b13      	ldr	r3, [pc, #76]	; (4066a0 <lv_obj_align_mid+0x78>)
  406652:	4798      	blx	r3
  406654:	b950      	cbnz	r0, 40666c <lv_obj_align_mid+0x44>
  406656:	462a      	mov	r2, r5
  406658:	2300      	movs	r3, #0
  40665a:	4812      	ldr	r0, [pc, #72]	; (4066a4 <lv_obj_align_mid+0x7c>)
  40665c:	4912      	ldr	r1, [pc, #72]	; (4066a8 <lv_obj_align_mid+0x80>)
  40665e:	4788      	blx	r1
  406660:	e7fe      	b.n	406660 <lv_obj_align_mid+0x38>
        base = lv_obj_get_parent(obj);
  406662:	4620      	mov	r0, r4
  406664:	4b11      	ldr	r3, [pc, #68]	; (4066ac <lv_obj_align_mid+0x84>)
  406666:	4798      	blx	r3
  406668:	4605      	mov	r5, r0
  40666a:	e7f0      	b.n	40664e <lv_obj_align_mid+0x26>
    obj_align_mid_core(obj, base, align, true, true, x_ofs, y_ofs);
  40666c:	9602      	str	r6, [sp, #8]
  40666e:	9701      	str	r7, [sp, #4]
  406670:	2301      	movs	r3, #1
  406672:	9300      	str	r3, [sp, #0]
  406674:	4642      	mov	r2, r8
  406676:	4629      	mov	r1, r5
  406678:	4620      	mov	r0, r4
  40667a:	f8df 9034 	ldr.w	r9, [pc, #52]	; 4066b0 <lv_obj_align_mid+0x88>
  40667e:	47c8      	blx	r9
    obj->realign.align       = align;
  406680:	f884 8048 	strb.w	r8, [r4, #72]	; 0x48
    obj->realign.xofs        = x_ofs;
  406684:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
    obj->realign.yofs        = y_ofs;
  406688:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
    obj->realign.base        = base;
  40668c:	6425      	str	r5, [r4, #64]	; 0x40
    obj->realign.mid_align = 1;
  40668e:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
  406692:	f043 0302 	orr.w	r3, r3, #2
  406696:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
}
  40669a:	b005      	add	sp, #20
  40669c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4066a0:	00415f95 	.word	0x00415f95
  4066a4:	0042c728 	.word	0x0042c728
  4066a8:	00415fa1 	.word	0x00415fa1
  4066ac:	004059ed 	.word	0x004059ed
  4066b0:	004062cd 	.word	0x004062cd

004066b4 <lv_obj_realign>:
{
  4066b4:	b510      	push	{r4, lr}
  4066b6:	b082      	sub	sp, #8
  4066b8:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4066ba:	4b13      	ldr	r3, [pc, #76]	; (406708 <lv_obj_realign+0x54>)
  4066bc:	4798      	blx	r3
  4066be:	b188      	cbz	r0, 4066e4 <lv_obj_realign+0x30>
    if(obj->realign.mid_align)
  4066c0:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
  4066c4:	f013 0f02 	tst.w	r3, #2
  4066c8:	d012      	beq.n	4066f0 <lv_obj_realign+0x3c>
        lv_obj_align_mid(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
  4066ca:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
  4066ce:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
  4066d2:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46
  4066d6:	9100      	str	r1, [sp, #0]
  4066d8:	6c21      	ldr	r1, [r4, #64]	; 0x40
  4066da:	4620      	mov	r0, r4
  4066dc:	4c0b      	ldr	r4, [pc, #44]	; (40670c <lv_obj_realign+0x58>)
  4066de:	47a0      	blx	r4
}
  4066e0:	b002      	add	sp, #8
  4066e2:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4066e4:	4622      	mov	r2, r4
  4066e6:	2300      	movs	r3, #0
  4066e8:	4809      	ldr	r0, [pc, #36]	; (406710 <lv_obj_realign+0x5c>)
  4066ea:	490a      	ldr	r1, [pc, #40]	; (406714 <lv_obj_realign+0x60>)
  4066ec:	4788      	blx	r1
  4066ee:	e7fe      	b.n	4066ee <lv_obj_realign+0x3a>
        lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
  4066f0:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
  4066f4:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
  4066f8:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46
  4066fc:	9100      	str	r1, [sp, #0]
  4066fe:	6c21      	ldr	r1, [r4, #64]	; 0x40
  406700:	4620      	mov	r0, r4
  406702:	4c05      	ldr	r4, [pc, #20]	; (406718 <lv_obj_realign+0x64>)
  406704:	47a0      	blx	r4
}
  406706:	e7eb      	b.n	4066e0 <lv_obj_realign+0x2c>
  406708:	00415f95 	.word	0x00415f95
  40670c:	00406629 	.word	0x00406629
  406710:	0042c728 	.word	0x0042c728
  406714:	00415fa1 	.word	0x00415fa1
  406718:	00406241 	.word	0x00406241

0040671c <refresh_children_style>:
{
  40671c:	b570      	push	{r4, r5, r6, lr}
  40671e:	4606      	mov	r6, r0
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
  406720:	2100      	movs	r1, #0
  406722:	4b0c      	ldr	r3, [pc, #48]	; (406754 <refresh_children_style+0x38>)
  406724:	4798      	blx	r3
  406726:	4604      	mov	r4, r0
    while(child != NULL) {
  406728:	e011      	b.n	40674e <refresh_children_style+0x32>
        lv_obj_invalidate(child);
  40672a:	4620      	mov	r0, r4
  40672c:	4d0a      	ldr	r5, [pc, #40]	; (406758 <refresh_children_style+0x3c>)
  40672e:	47a8      	blx	r5
        child->signal_cb(child, LV_SIGNAL_STYLE_CHG, NULL);
  406730:	69e3      	ldr	r3, [r4, #28]
  406732:	2200      	movs	r2, #0
  406734:	2104      	movs	r1, #4
  406736:	4620      	mov	r0, r4
  406738:	4798      	blx	r3
        lv_obj_invalidate(child);
  40673a:	4620      	mov	r0, r4
  40673c:	47a8      	blx	r5
        refresh_children_style(child); /*Check children too*/
  40673e:	4620      	mov	r0, r4
  406740:	f7ff ffec 	bl	40671c <refresh_children_style>
        child = lv_obj_get_child(obj, child);
  406744:	4621      	mov	r1, r4
  406746:	4630      	mov	r0, r6
  406748:	4b02      	ldr	r3, [pc, #8]	; (406754 <refresh_children_style+0x38>)
  40674a:	4798      	blx	r3
  40674c:	4604      	mov	r4, r0
    while(child != NULL) {
  40674e:	2c00      	cmp	r4, #0
  406750:	d1eb      	bne.n	40672a <refresh_children_style+0xe>
}
  406752:	bd70      	pop	{r4, r5, r6, pc}
  406754:	00405ac1 	.word	0x00405ac1
  406758:	00405f99 	.word	0x00405f99

0040675c <lv_obj_get_click>:
{
  40675c:	b510      	push	{r4, lr}
  40675e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406760:	4b06      	ldr	r3, [pc, #24]	; (40677c <lv_obj_get_click+0x20>)
  406762:	4798      	blx	r3
  406764:	b120      	cbz	r0, 406770 <lv_obj_get_click+0x14>
    return obj->click == 0 ? false : true;
  406766:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
  40676a:	f000 0001 	and.w	r0, r0, #1
  40676e:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406770:	4622      	mov	r2, r4
  406772:	2300      	movs	r3, #0
  406774:	4802      	ldr	r0, [pc, #8]	; (406780 <lv_obj_get_click+0x24>)
  406776:	4903      	ldr	r1, [pc, #12]	; (406784 <lv_obj_get_click+0x28>)
  406778:	4788      	blx	r1
  40677a:	e7fe      	b.n	40677a <lv_obj_get_click+0x1e>
  40677c:	00415f95 	.word	0x00415f95
  406780:	0042c728 	.word	0x0042c728
  406784:	00415fa1 	.word	0x00415fa1

00406788 <lv_obj_get_drag>:
{
  406788:	b510      	push	{r4, lr}
  40678a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40678c:	4b06      	ldr	r3, [pc, #24]	; (4067a8 <lv_obj_get_drag+0x20>)
  40678e:	4798      	blx	r3
  406790:	b120      	cbz	r0, 40679c <lv_obj_get_drag+0x14>
    return obj->drag == 0 ? false : true;
  406792:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
  406796:	f3c0 0040 	ubfx	r0, r0, #1, #1
  40679a:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40679c:	4622      	mov	r2, r4
  40679e:	2300      	movs	r3, #0
  4067a0:	4802      	ldr	r0, [pc, #8]	; (4067ac <lv_obj_get_drag+0x24>)
  4067a2:	4903      	ldr	r1, [pc, #12]	; (4067b0 <lv_obj_get_drag+0x28>)
  4067a4:	4788      	blx	r1
  4067a6:	e7fe      	b.n	4067a6 <lv_obj_get_drag+0x1e>
  4067a8:	00415f95 	.word	0x00415f95
  4067ac:	0042c728 	.word	0x0042c728
  4067b0:	00415fa1 	.word	0x00415fa1

004067b4 <lv_obj_get_drag_dir>:
{
  4067b4:	b510      	push	{r4, lr}
  4067b6:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4067b8:	4b06      	ldr	r3, [pc, #24]	; (4067d4 <lv_obj_get_drag_dir+0x20>)
  4067ba:	4798      	blx	r3
  4067bc:	b120      	cbz	r0, 4067c8 <lv_obj_get_drag_dir+0x14>
    return obj->drag_dir;
  4067be:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
}
  4067c2:	f3c0 0082 	ubfx	r0, r0, #2, #3
  4067c6:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4067c8:	4622      	mov	r2, r4
  4067ca:	2300      	movs	r3, #0
  4067cc:	4802      	ldr	r0, [pc, #8]	; (4067d8 <lv_obj_get_drag_dir+0x24>)
  4067ce:	4903      	ldr	r1, [pc, #12]	; (4067dc <lv_obj_get_drag_dir+0x28>)
  4067d0:	4788      	blx	r1
  4067d2:	e7fe      	b.n	4067d2 <lv_obj_get_drag_dir+0x1e>
  4067d4:	00415f95 	.word	0x00415f95
  4067d8:	0042c728 	.word	0x0042c728
  4067dc:	00415fa1 	.word	0x00415fa1

004067e0 <lv_obj_get_drag_throw>:
{
  4067e0:	b510      	push	{r4, lr}
  4067e2:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4067e4:	4b06      	ldr	r3, [pc, #24]	; (406800 <lv_obj_get_drag_throw+0x20>)
  4067e6:	4798      	blx	r3
  4067e8:	b120      	cbz	r0, 4067f4 <lv_obj_get_drag_throw+0x14>
    return obj->drag_throw == 0 ? false : true;
  4067ea:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
  4067ee:	f3c0 0080 	ubfx	r0, r0, #2, #1
  4067f2:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4067f4:	4622      	mov	r2, r4
  4067f6:	2300      	movs	r3, #0
  4067f8:	4802      	ldr	r0, [pc, #8]	; (406804 <lv_obj_get_drag_throw+0x24>)
  4067fa:	4903      	ldr	r1, [pc, #12]	; (406808 <lv_obj_get_drag_throw+0x28>)
  4067fc:	4788      	blx	r1
  4067fe:	e7fe      	b.n	4067fe <lv_obj_get_drag_throw+0x1e>
  406800:	00415f95 	.word	0x00415f95
  406804:	0042c728 	.word	0x0042c728
  406808:	00415fa1 	.word	0x00415fa1

0040680c <lv_obj_get_drag_parent>:
    return obj->drag_parent == 0 ? false : true;
  40680c:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
}
  406810:	f3c0 00c0 	ubfx	r0, r0, #3, #1
  406814:	4770      	bx	lr

00406816 <lv_obj_get_gesture_parent>:
    return obj->gesture_parent == 0 ? false : true;
  406816:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
  40681a:	f000 0001 	and.w	r0, r0, #1
  40681e:	4770      	bx	lr

00406820 <lv_obj_get_focus_parent>:
    return obj->focus_parent == 0 ? false : true;
  406820:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
  406824:	f3c0 0040 	ubfx	r0, r0, #1, #1
  406828:	4770      	bx	lr
	...

0040682c <lv_obj_get_base_dir>:
{
  40682c:	b510      	push	{r4, lr}
  40682e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406830:	4b05      	ldr	r3, [pc, #20]	; (406848 <lv_obj_get_base_dir+0x1c>)
  406832:	4798      	blx	r3
  406834:	b108      	cbz	r0, 40683a <lv_obj_get_base_dir+0xe>
}
  406836:	2000      	movs	r0, #0
  406838:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40683a:	4622      	mov	r2, r4
  40683c:	2300      	movs	r3, #0
  40683e:	4803      	ldr	r0, [pc, #12]	; (40684c <lv_obj_get_base_dir+0x20>)
  406840:	4903      	ldr	r1, [pc, #12]	; (406850 <lv_obj_get_base_dir+0x24>)
  406842:	4788      	blx	r1
  406844:	e7fe      	b.n	406844 <lv_obj_get_base_dir+0x18>
  406846:	bf00      	nop
  406848:	00415f95 	.word	0x00415f95
  40684c:	0042c728 	.word	0x0042c728
  406850:	00415fa1 	.word	0x00415fa1

00406854 <lv_obj_create>:
{
  406854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406856:	460d      	mov	r5, r1
    if(parent == NULL) {
  406858:	4606      	mov	r6, r0
  40685a:	b150      	cbz	r0, 406872 <lv_obj_create+0x1e>
        LV_ASSERT_OBJ(parent, LV_OBJX_NAME);
  40685c:	4b8e      	ldr	r3, [pc, #568]	; (406a98 <lv_obj_create+0x244>)
  40685e:	4798      	blx	r3
  406860:	2800      	cmp	r0, #0
  406862:	f040 8086 	bne.w	406972 <lv_obj_create+0x11e>
  406866:	4632      	mov	r2, r6
  406868:	2300      	movs	r3, #0
  40686a:	488c      	ldr	r0, [pc, #560]	; (406a9c <lv_obj_create+0x248>)
  40686c:	498c      	ldr	r1, [pc, #560]	; (406aa0 <lv_obj_create+0x24c>)
  40686e:	4788      	blx	r1
  406870:	e7fe      	b.n	406870 <lv_obj_create+0x1c>
        lv_disp_t * disp = lv_disp_get_default();
  406872:	4b8c      	ldr	r3, [pc, #560]	; (406aa4 <lv_obj_create+0x250>)
  406874:	4798      	blx	r3
        if(!disp) {
  406876:	2800      	cmp	r0, #0
  406878:	f000 81f0 	beq.w	406c5c <lv_obj_create+0x408>
        new_obj = _lv_ll_ins_head(&disp->scr_ll);
  40687c:	3038      	adds	r0, #56	; 0x38
  40687e:	4b8a      	ldr	r3, [pc, #552]	; (406aa8 <lv_obj_create+0x254>)
  406880:	4798      	blx	r3
  406882:	4604      	mov	r4, r0
        LV_ASSERT_MEM(new_obj);
  406884:	4b84      	ldr	r3, [pc, #528]	; (406a98 <lv_obj_create+0x244>)
  406886:	4798      	blx	r3
  406888:	b928      	cbnz	r0, 406896 <lv_obj_create+0x42>
  40688a:	4622      	mov	r2, r4
  40688c:	2300      	movs	r3, #0
  40688e:	4887      	ldr	r0, [pc, #540]	; (406aac <lv_obj_create+0x258>)
  406890:	4983      	ldr	r1, [pc, #524]	; (406aa0 <lv_obj_create+0x24c>)
  406892:	4788      	blx	r1
  406894:	e7fe      	b.n	406894 <lv_obj_create+0x40>
        if(new_obj == NULL) return NULL;
  406896:	2c00      	cmp	r4, #0
  406898:	f000 81de 	beq.w	406c58 <lv_obj_create+0x404>
        _lv_memset_00(new_obj, sizeof(lv_obj_t));
  40689c:	214c      	movs	r1, #76	; 0x4c
  40689e:	4620      	mov	r0, r4
  4068a0:	4b83      	ldr	r3, [pc, #524]	; (406ab0 <lv_obj_create+0x25c>)
  4068a2:	4798      	blx	r3
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
  4068a4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
  4068a8:	f36f 1346 	bfc	r3, #5, #2
  4068ac:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        new_obj->signal_cb = lv_obj_signal;
  4068b0:	4b80      	ldr	r3, [pc, #512]	; (406ab4 <lv_obj_create+0x260>)
  4068b2:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
  4068b4:	4b80      	ldr	r3, [pc, #512]	; (406ab8 <lv_obj_create+0x264>)
  4068b6:	6223      	str	r3, [r4, #32]
        new_obj->event_cb = NULL;
  4068b8:	2700      	movs	r7, #0
  4068ba:	61a7      	str	r7, [r4, #24]
        new_obj->coords.x1    = 0;
  4068bc:	8227      	strh	r7, [r4, #16]
        new_obj->coords.y1    = 0;
  4068be:	8267      	strh	r7, [r4, #18]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
  4068c0:	4638      	mov	r0, r7
  4068c2:	4b7e      	ldr	r3, [pc, #504]	; (406abc <lv_obj_create+0x268>)
  4068c4:	4798      	blx	r3
  4068c6:	b283      	uxth	r3, r0
  4068c8:	3b01      	subs	r3, #1
  4068ca:	82a3      	strh	r3, [r4, #20]
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
  4068cc:	4638      	mov	r0, r7
  4068ce:	4b7c      	ldr	r3, [pc, #496]	; (406ac0 <lv_obj_create+0x26c>)
  4068d0:	4798      	blx	r3
  4068d2:	b283      	uxth	r3, r0
  4068d4:	3b01      	subs	r3, #1
  4068d6:	82e3      	strh	r3, [r4, #22]
    _lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
  4068d8:	214c      	movs	r1, #76	; 0x4c
  4068da:	1d20      	adds	r0, r4, #4
  4068dc:	4b79      	ldr	r3, [pc, #484]	; (406ac4 <lv_obj_create+0x270>)
  4068de:	4798      	blx	r3
    new_obj->ext_draw_pad = 0;
  4068e0:	2300      	movs	r3, #0
  4068e2:	8663      	strh	r3, [r4, #50]	; 0x32
    new_obj->ext_click_pad_hor = 0;
  4068e4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    new_obj->ext_click_pad_ver = 0;
  4068e8:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    new_obj->realign.align        = LV_ALIGN_CENTER;
  4068ec:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    new_obj->realign.xofs         = 0;
  4068f0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    new_obj->realign.yofs         = 0;
  4068f4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    new_obj->realign.base         = NULL;
  4068f8:	6423      	str	r3, [r4, #64]	; 0x40
    new_obj->realign.auto_realign = 0;
  4068fa:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
  4068fe:	f363 0200 	bfi	r2, r3, #0, #1
  406902:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
    new_obj->group_p = NULL;
  406906:	63a3      	str	r3, [r4, #56]	; 0x38
    new_obj->adv_hittest  = 0;
  406908:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
    new_obj->click        = 1;
  40690c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    new_obj->drag         = 0;
  406910:	f041 0101 	orr.w	r1, r1, #1
    new_obj->drag_dir     = LV_DRAG_DIR_BOTH;
  406914:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  406918:	2003      	movs	r0, #3
  40691a:	f360 0284 	bfi	r2, r0, #2, #3
    new_obj->protect      = LV_PROTECT_NONE;
  40691e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    new_obj->parent_event = 0;
  406922:	f001 01c1 	and.w	r1, r1, #193	; 0xc1
  406926:	f363 1186 	bfi	r1, r3, #6, #1
  40692a:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    new_obj->gesture_parent = parent ? 1 : 0;
  40692e:	1af1      	subs	r1, r6, r3
  406930:	bf18      	it	ne
  406932:	2101      	movne	r1, #1
  406934:	f361 0200 	bfi	r2, r1, #0, #1
    new_obj->focus_parent  = 0;
  406938:	f363 0241 	bfi	r2, r3, #1, #1
  40693c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    new_obj->state = LV_STATE_DEFAULT;
  406940:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    new_obj->ext_attr = NULL;
  406944:	6263      	str	r3, [r4, #36]	; 0x24
    lv_style_list_init(&new_obj->style_list);
  406946:	f104 0728 	add.w	r7, r4, #40	; 0x28
  40694a:	4638      	mov	r0, r7
  40694c:	4b5e      	ldr	r3, [pc, #376]	; (406ac8 <lv_obj_create+0x274>)
  40694e:	4798      	blx	r3
    if(copy == NULL) {
  406950:	2d00      	cmp	r5, #0
  406952:	f000 8096 	beq.w	406a82 <lv_obj_create+0x22e>
        lv_style_list_copy(&new_obj->style_list, &copy->style_list);
  406956:	f105 0128 	add.w	r1, r5, #40	; 0x28
  40695a:	4638      	mov	r0, r7
  40695c:	4b5b      	ldr	r3, [pc, #364]	; (406acc <lv_obj_create+0x278>)
  40695e:	4798      	blx	r3
    if(copy != NULL) {
  406960:	2d00      	cmp	r5, #0
  406962:	f000 8170 	beq.w	406c46 <lv_obj_create+0x3f2>
        lv_area_copy(&new_obj->coords, &copy->coords);
  406966:	f105 0110 	add.w	r1, r5, #16
    uint8_t * d8 = (uint8_t *)dst;
  40696a:	f104 0210 	add.w	r2, r4, #16
  40696e:	2308      	movs	r3, #8
  406970:	e0bb      	b.n	406aea <lv_obj_create+0x296>
        new_obj = _lv_ll_ins_head(&parent->child_ll);
  406972:	1d30      	adds	r0, r6, #4
  406974:	4b4c      	ldr	r3, [pc, #304]	; (406aa8 <lv_obj_create+0x254>)
  406976:	4798      	blx	r3
  406978:	4604      	mov	r4, r0
        LV_ASSERT_MEM(new_obj);
  40697a:	4b47      	ldr	r3, [pc, #284]	; (406a98 <lv_obj_create+0x244>)
  40697c:	4798      	blx	r3
  40697e:	2800      	cmp	r0, #0
  406980:	d047      	beq.n	406a12 <lv_obj_create+0x1be>
        if(new_obj == NULL) return NULL;
  406982:	2c00      	cmp	r4, #0
  406984:	f000 8168 	beq.w	406c58 <lv_obj_create+0x404>
        _lv_memset_00(new_obj, sizeof(lv_obj_t));
  406988:	214c      	movs	r1, #76	; 0x4c
  40698a:	4620      	mov	r0, r4
  40698c:	4b48      	ldr	r3, [pc, #288]	; (406ab0 <lv_obj_create+0x25c>)
  40698e:	4798      	blx	r3
        new_obj->parent = parent;
  406990:	6026      	str	r6, [r4, #0]
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
  406992:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
  406996:	f36f 1346 	bfc	r3, #5, #2
  40699a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        new_obj->signal_cb = lv_obj_signal;
  40699e:	4b45      	ldr	r3, [pc, #276]	; (406ab4 <lv_obj_create+0x260>)
  4069a0:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
  4069a2:	4b45      	ldr	r3, [pc, #276]	; (406ab8 <lv_obj_create+0x264>)
  4069a4:	6223      	str	r3, [r4, #32]
        new_obj->event_cb = NULL;
  4069a6:	2000      	movs	r0, #0
  4069a8:	61a0      	str	r0, [r4, #24]
        new_obj->coords.y1    = parent->coords.y1;
  4069aa:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
  4069ae:	8263      	strh	r3, [r4, #18]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
  4069b0:	8a77      	ldrh	r7, [r6, #18]
  4069b2:	4b47      	ldr	r3, [pc, #284]	; (406ad0 <lv_obj_create+0x27c>)
  4069b4:	4798      	blx	r3
  4069b6:	2332      	movs	r3, #50	; 0x32
  4069b8:	fb03 f300 	mul.w	r3, r3, r0
  4069bc:	3350      	adds	r3, #80	; 0x50
  4069be:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  4069c2:	da2c      	bge.n	406a1e <lv_obj_create+0x1ca>
  4069c4:	2301      	movs	r3, #1
  4069c6:	443b      	add	r3, r7
  4069c8:	82e3      	strh	r3, [r4, #22]
        if(lv_obj_get_base_dir(new_obj) == LV_BIDI_DIR_RTL) {
  4069ca:	4620      	mov	r0, r4
  4069cc:	4b41      	ldr	r3, [pc, #260]	; (406ad4 <lv_obj_create+0x280>)
  4069ce:	4798      	blx	r3
  4069d0:	2801      	cmp	r0, #1
  4069d2:	d033      	beq.n	406a3c <lv_obj_create+0x1e8>
            new_obj->coords.x1    = parent->coords.x1;
  4069d4:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  4069d8:	8223      	strh	r3, [r4, #16]
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
  4069da:	8a37      	ldrh	r7, [r6, #16]
  4069dc:	2000      	movs	r0, #0
  4069de:	4b3c      	ldr	r3, [pc, #240]	; (406ad0 <lv_obj_create+0x27c>)
  4069e0:	4798      	blx	r3
  4069e2:	2364      	movs	r3, #100	; 0x64
  4069e4:	fb03 f300 	mul.w	r3, r3, r0
  4069e8:	3350      	adds	r3, #80	; 0x50
  4069ea:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  4069ee:	db46      	blt.n	406a7e <lv_obj_create+0x22a>
  4069f0:	2000      	movs	r0, #0
  4069f2:	4b37      	ldr	r3, [pc, #220]	; (406ad0 <lv_obj_create+0x27c>)
  4069f4:	4798      	blx	r3
  4069f6:	2364      	movs	r3, #100	; 0x64
  4069f8:	fb03 f300 	mul.w	r3, r3, r0
  4069fc:	3350      	adds	r3, #80	; 0x50
  4069fe:	4a36      	ldr	r2, [pc, #216]	; (406ad8 <lv_obj_create+0x284>)
  406a00:	fb82 1203 	smull	r1, r2, r2, r3
  406a04:	17db      	asrs	r3, r3, #31
  406a06:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
  406a0a:	b29b      	uxth	r3, r3
  406a0c:	443b      	add	r3, r7
  406a0e:	82a3      	strh	r3, [r4, #20]
  406a10:	e762      	b.n	4068d8 <lv_obj_create+0x84>
        LV_ASSERT_MEM(new_obj);
  406a12:	4622      	mov	r2, r4
  406a14:	2300      	movs	r3, #0
  406a16:	4825      	ldr	r0, [pc, #148]	; (406aac <lv_obj_create+0x258>)
  406a18:	4921      	ldr	r1, [pc, #132]	; (406aa0 <lv_obj_create+0x24c>)
  406a1a:	4788      	blx	r1
  406a1c:	e7fe      	b.n	406a1c <lv_obj_create+0x1c8>
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
  406a1e:	2000      	movs	r0, #0
  406a20:	4b2b      	ldr	r3, [pc, #172]	; (406ad0 <lv_obj_create+0x27c>)
  406a22:	4798      	blx	r3
  406a24:	2332      	movs	r3, #50	; 0x32
  406a26:	fb03 f300 	mul.w	r3, r3, r0
  406a2a:	3350      	adds	r3, #80	; 0x50
  406a2c:	4a2a      	ldr	r2, [pc, #168]	; (406ad8 <lv_obj_create+0x284>)
  406a2e:	fb82 1203 	smull	r1, r2, r2, r3
  406a32:	17db      	asrs	r3, r3, #31
  406a34:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
  406a38:	b29b      	uxth	r3, r3
  406a3a:	e7c4      	b.n	4069c6 <lv_obj_create+0x172>
            new_obj->coords.x2    = parent->coords.x2;
  406a3c:	f9b6 3014 	ldrsh.w	r3, [r6, #20]
  406a40:	82a3      	strh	r3, [r4, #20]
            new_obj->coords.x1    = parent->coords.x2 - LV_OBJ_DEF_WIDTH;
  406a42:	8ab7      	ldrh	r7, [r6, #20]
  406a44:	2000      	movs	r0, #0
  406a46:	4b22      	ldr	r3, [pc, #136]	; (406ad0 <lv_obj_create+0x27c>)
  406a48:	4798      	blx	r3
  406a4a:	2364      	movs	r3, #100	; 0x64
  406a4c:	fb03 f300 	mul.w	r3, r3, r0
  406a50:	3350      	adds	r3, #80	; 0x50
  406a52:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  406a56:	db10      	blt.n	406a7a <lv_obj_create+0x226>
  406a58:	2000      	movs	r0, #0
  406a5a:	4b1d      	ldr	r3, [pc, #116]	; (406ad0 <lv_obj_create+0x27c>)
  406a5c:	4798      	blx	r3
  406a5e:	2364      	movs	r3, #100	; 0x64
  406a60:	fb03 f300 	mul.w	r3, r3, r0
  406a64:	3350      	adds	r3, #80	; 0x50
  406a66:	4a1c      	ldr	r2, [pc, #112]	; (406ad8 <lv_obj_create+0x284>)
  406a68:	fb82 1203 	smull	r1, r2, r2, r3
  406a6c:	17db      	asrs	r3, r3, #31
  406a6e:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
  406a72:	b29b      	uxth	r3, r3
  406a74:	1afb      	subs	r3, r7, r3
  406a76:	8223      	strh	r3, [r4, #16]
  406a78:	e72e      	b.n	4068d8 <lv_obj_create+0x84>
  406a7a:	2301      	movs	r3, #1
  406a7c:	e7fa      	b.n	406a74 <lv_obj_create+0x220>
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
  406a7e:	2301      	movs	r3, #1
  406a80:	e7c4      	b.n	406a0c <lv_obj_create+0x1b8>
        if(parent != NULL) lv_theme_apply(new_obj, LV_THEME_OBJ);
  406a82:	b126      	cbz	r6, 406a8e <lv_obj_create+0x23a>
  406a84:	2102      	movs	r1, #2
  406a86:	4620      	mov	r0, r4
  406a88:	4b14      	ldr	r3, [pc, #80]	; (406adc <lv_obj_create+0x288>)
  406a8a:	4798      	blx	r3
  406a8c:	e768      	b.n	406960 <lv_obj_create+0x10c>
        else lv_theme_apply(new_obj, LV_THEME_SCR);
  406a8e:	2101      	movs	r1, #1
  406a90:	4620      	mov	r0, r4
  406a92:	4b12      	ldr	r3, [pc, #72]	; (406adc <lv_obj_create+0x288>)
  406a94:	4798      	blx	r3
  406a96:	e763      	b.n	406960 <lv_obj_create+0x10c>
  406a98:	00415f95 	.word	0x00415f95
  406a9c:	0042c728 	.word	0x0042c728
  406aa0:	00415fa1 	.word	0x00415fa1
  406aa4:	00414d95 	.word	0x00414d95
  406aa8:	0041620d 	.word	0x0041620d
  406aac:	0042c714 	.word	0x0042c714
  406ab0:	00416c0d 	.word	0x00416c0d
  406ab4:	00409311 	.word	0x00409311
  406ab8:	00408741 	.word	0x00408741
  406abc:	00414da1 	.word	0x00414da1
  406ac0:	00414dd1 	.word	0x00414dd1
  406ac4:	004161fb 	.word	0x004161fb
  406ac8:	00409e91 	.word	0x00409e91
  406acc:	0040ad6d 	.word	0x0040ad6d
  406ad0:	00414dfd 	.word	0x00414dfd
  406ad4:	0040682d 	.word	0x0040682d
  406ad8:	66666667 	.word	0x66666667
  406adc:	00418419 	.word	0x00418419
        *d8 = *s8;
  406ae0:	f811 0b01 	ldrb.w	r0, [r1], #1
  406ae4:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  406ae8:	3b01      	subs	r3, #1
    while(len) {
  406aea:	2b00      	cmp	r3, #0
  406aec:	d1f8      	bne.n	406ae0 <lv_obj_create+0x28c>
        new_obj->ext_draw_pad = copy->ext_draw_pad;
  406aee:	f9b5 3032 	ldrsh.w	r3, [r5, #50]	; 0x32
  406af2:	8663      	strh	r3, [r4, #50]	; 0x32
        new_obj->ext_click_pad_hor = copy->ext_click_pad_hor;
  406af4:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
  406af8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        new_obj->ext_click_pad_ver = copy->ext_click_pad_ver;
  406afc:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
  406b00:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
        new_obj->base_dir = copy->base_dir;
  406b04:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
  406b08:	f3c3 1341 	ubfx	r3, r3, #5, #2
  406b0c:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  406b10:	f363 1246 	bfi	r2, r3, #5, #2
  406b14:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        new_obj->realign.align        = copy->realign.align;
  406b18:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
  406b1c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
        new_obj->realign.xofs         = copy->realign.xofs;
  406b20:	f9b5 3044 	ldrsh.w	r3, [r5, #68]	; 0x44
  406b24:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
        new_obj->realign.yofs         = copy->realign.yofs;
  406b28:	f9b5 3046 	ldrsh.w	r3, [r5, #70]	; 0x46
  406b2c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        new_obj->realign.base         = copy->realign.base;
  406b30:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  406b32:	6423      	str	r3, [r4, #64]	; 0x40
        new_obj->realign.auto_realign = copy->realign.auto_realign;
  406b34:	f895 2049 	ldrb.w	r2, [r5, #73]	; 0x49
  406b38:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
  406b3c:	f362 0300 	bfi	r3, r2, #0, #1
  406b40:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
        new_obj->event_cb = copy->event_cb;
  406b44:	69ab      	ldr	r3, [r5, #24]
  406b46:	61a3      	str	r3, [r4, #24]
        new_obj->adv_hittest  = copy->adv_hittest;
  406b48:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  406b4c:	09db      	lsrs	r3, r3, #7
  406b4e:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
  406b52:	f363 12c7 	bfi	r2, r3, #7, #1
  406b56:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->click        = copy->click;
  406b5a:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
  406b5e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  406b62:	f362 0300 	bfi	r3, r2, #0, #1
  406b66:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        new_obj->drag         = copy->drag;
  406b6a:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  406b6e:	f3c3 0340 	ubfx	r3, r3, #1, #1
  406b72:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
  406b76:	f363 0241 	bfi	r2, r3, #1, #1
  406b7a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->drag_dir     = copy->drag_dir;
  406b7e:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
  406b82:	f3c3 0382 	ubfx	r3, r3, #2, #3
  406b86:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  406b8a:	f363 0284 	bfi	r2, r3, #2, #3
  406b8e:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        new_obj->drag_throw   = copy->drag_throw;
  406b92:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  406b96:	f3c3 0380 	ubfx	r3, r3, #2, #1
  406b9a:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
  406b9e:	f363 0282 	bfi	r2, r3, #2, #1
  406ba2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->drag_parent  = copy->drag_parent;
  406ba6:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  406baa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
  406bae:	b2d2      	uxtb	r2, r2
  406bb0:	f363 02c3 	bfi	r2, r3, #3, #1
  406bb4:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->hidden       = copy->hidden;
  406bb8:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  406bbc:	f3c3 1300 	ubfx	r3, r3, #4, #1
  406bc0:	b2d2      	uxtb	r2, r2
  406bc2:	f363 1204 	bfi	r2, r3, #4, #1
  406bc6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->top          = copy->top;
  406bca:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  406bce:	f3c3 1340 	ubfx	r3, r3, #5, #1
  406bd2:	b2d2      	uxtb	r2, r2
  406bd4:	f363 1245 	bfi	r2, r3, #5, #1
  406bd8:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->parent_event = copy->parent_event;
  406bdc:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  406be0:	f3c3 1380 	ubfx	r3, r3, #6, #1
  406be4:	b2d2      	uxtb	r2, r2
  406be6:	f363 1286 	bfi	r2, r3, #6, #1
  406bea:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->protect      = copy->protect;
  406bee:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
  406bf2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        new_obj->gesture_parent = copy->gesture_parent;
  406bf6:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
  406bfa:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
  406bfe:	f362 0300 	bfi	r3, r2, #0, #1
  406c02:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        new_obj->focus_parent = copy->focus_parent;
  406c06:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
  406c0a:	f3c3 0340 	ubfx	r3, r3, #1, #1
  406c0e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  406c12:	f363 0241 	bfi	r2, r3, #1, #1
  406c16:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        if(copy->group_p != NULL) {
  406c1a:	6ba8      	ldr	r0, [r5, #56]	; 0x38
  406c1c:	b110      	cbz	r0, 406c24 <lv_obj_create+0x3d0>
            lv_group_add_obj(copy->group_p, new_obj);
  406c1e:	4621      	mov	r1, r4
  406c20:	4b0f      	ldr	r3, [pc, #60]	; (406c60 <lv_obj_create+0x40c>)
  406c22:	4798      	blx	r3
        if(lv_obj_get_parent(copy) != NULL && parent != NULL) {
  406c24:	4628      	mov	r0, r5
  406c26:	4b0f      	ldr	r3, [pc, #60]	; (406c64 <lv_obj_create+0x410>)
  406c28:	4798      	blx	r3
  406c2a:	b160      	cbz	r0, 406c46 <lv_obj_create+0x3f2>
  406c2c:	b15e      	cbz	r6, 406c46 <lv_obj_create+0x3f2>
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
  406c2e:	4628      	mov	r0, r5
  406c30:	4b0d      	ldr	r3, [pc, #52]	; (406c68 <lv_obj_create+0x414>)
  406c32:	4798      	blx	r3
  406c34:	4607      	mov	r7, r0
  406c36:	4628      	mov	r0, r5
  406c38:	4b0c      	ldr	r3, [pc, #48]	; (406c6c <lv_obj_create+0x418>)
  406c3a:	4798      	blx	r3
  406c3c:	4602      	mov	r2, r0
  406c3e:	4639      	mov	r1, r7
  406c40:	4620      	mov	r0, r4
  406c42:	4b0b      	ldr	r3, [pc, #44]	; (406c70 <lv_obj_create+0x41c>)
  406c44:	4798      	blx	r3
    if(parent != NULL) {
  406c46:	b13e      	cbz	r6, 406c58 <lv_obj_create+0x404>
        parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, new_obj);
  406c48:	69f3      	ldr	r3, [r6, #28]
  406c4a:	4622      	mov	r2, r4
  406c4c:	2101      	movs	r1, #1
  406c4e:	4630      	mov	r0, r6
  406c50:	4798      	blx	r3
        lv_obj_invalidate(new_obj);
  406c52:	4620      	mov	r0, r4
  406c54:	4b07      	ldr	r3, [pc, #28]	; (406c74 <lv_obj_create+0x420>)
  406c56:	4798      	blx	r3
}
  406c58:	4620      	mov	r0, r4
  406c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return NULL;
  406c5c:	4634      	mov	r4, r6
  406c5e:	e7fb      	b.n	406c58 <lv_obj_create+0x404>
  406c60:	00403851 	.word	0x00403851
  406c64:	004059ed 	.word	0x004059ed
  406c68:	00405b41 	.word	0x00405b41
  406c6c:	00405b81 	.word	0x00405b81
  406c70:	0040607d 	.word	0x0040607d
  406c74:	00405f99 	.word	0x00405f99

00406c78 <lv_obj_set_size>:
{
  406c78:	b570      	push	{r4, r5, r6, lr}
  406c7a:	b082      	sub	sp, #8
  406c7c:	4604      	mov	r4, r0
  406c7e:	460d      	mov	r5, r1
  406c80:	4616      	mov	r6, r2
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406c82:	4b2e      	ldr	r3, [pc, #184]	; (406d3c <lv_obj_set_size+0xc4>)
  406c84:	4798      	blx	r3
  406c86:	b928      	cbnz	r0, 406c94 <lv_obj_set_size+0x1c>
  406c88:	4622      	mov	r2, r4
  406c8a:	2300      	movs	r3, #0
  406c8c:	482c      	ldr	r0, [pc, #176]	; (406d40 <lv_obj_set_size+0xc8>)
  406c8e:	492d      	ldr	r1, [pc, #180]	; (406d44 <lv_obj_set_size+0xcc>)
  406c90:	4788      	blx	r1
  406c92:	e7fe      	b.n	406c92 <lv_obj_set_size+0x1a>
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
  406c94:	4620      	mov	r0, r4
  406c96:	4b2c      	ldr	r3, [pc, #176]	; (406d48 <lv_obj_set_size+0xd0>)
  406c98:	4798      	blx	r3
  406c9a:	42a8      	cmp	r0, r5
  406c9c:	d028      	beq.n	406cf0 <lv_obj_set_size+0x78>
    lv_obj_invalidate(obj);
  406c9e:	4620      	mov	r0, r4
  406ca0:	4b2a      	ldr	r3, [pc, #168]	; (406d4c <lv_obj_set_size+0xd4>)
  406ca2:	4798      	blx	r3
    lv_obj_get_coords(obj, &ori);
  406ca4:	4669      	mov	r1, sp
  406ca6:	4620      	mov	r0, r4
  406ca8:	4b29      	ldr	r3, [pc, #164]	; (406d50 <lv_obj_set_size+0xd8>)
  406caa:	4798      	blx	r3
    obj->coords.y2 = obj->coords.y1 + h - 1;
  406cac:	8a63      	ldrh	r3, [r4, #18]
  406cae:	4433      	add	r3, r6
  406cb0:	b29b      	uxth	r3, r3
  406cb2:	3b01      	subs	r3, #1
  406cb4:	82e3      	strh	r3, [r4, #22]
    if(lv_obj_get_base_dir(obj) == LV_BIDI_DIR_RTL) {
  406cb6:	4620      	mov	r0, r4
  406cb8:	4b26      	ldr	r3, [pc, #152]	; (406d54 <lv_obj_set_size+0xdc>)
  406cba:	4798      	blx	r3
  406cbc:	2801      	cmp	r0, #1
  406cbe:	d01d      	beq.n	406cfc <lv_obj_set_size+0x84>
        obj->coords.x2 = obj->coords.x1 + w - 1;
  406cc0:	8a23      	ldrh	r3, [r4, #16]
  406cc2:	442b      	add	r3, r5
  406cc4:	b29b      	uxth	r3, r3
  406cc6:	3b01      	subs	r3, #1
  406cc8:	82a3      	strh	r3, [r4, #20]
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
  406cca:	69e3      	ldr	r3, [r4, #28]
  406ccc:	466a      	mov	r2, sp
  406cce:	2102      	movs	r1, #2
  406cd0:	4620      	mov	r0, r4
  406cd2:	4798      	blx	r3
    lv_obj_t * par = lv_obj_get_parent(obj);
  406cd4:	4620      	mov	r0, r4
  406cd6:	4b20      	ldr	r3, [pc, #128]	; (406d58 <lv_obj_set_size+0xe0>)
  406cd8:	4798      	blx	r3
    if(par != NULL) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
  406cda:	b118      	cbz	r0, 406ce4 <lv_obj_set_size+0x6c>
  406cdc:	69c5      	ldr	r5, [r0, #28]
  406cde:	4622      	mov	r2, r4
  406ce0:	2101      	movs	r1, #1
  406ce2:	47a8      	blx	r5
    _LV_LL_READ(obj->child_ll, i) {
  406ce4:	1d26      	adds	r6, r4, #4
  406ce6:	4630      	mov	r0, r6
  406ce8:	4b1c      	ldr	r3, [pc, #112]	; (406d5c <lv_obj_set_size+0xe4>)
  406cea:	4798      	blx	r3
  406cec:	4605      	mov	r5, r0
  406cee:	e015      	b.n	406d1c <lv_obj_set_size+0xa4>
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
  406cf0:	4620      	mov	r0, r4
  406cf2:	4b1b      	ldr	r3, [pc, #108]	; (406d60 <lv_obj_set_size+0xe8>)
  406cf4:	4798      	blx	r3
  406cf6:	42b0      	cmp	r0, r6
  406cf8:	d1d1      	bne.n	406c9e <lv_obj_set_size+0x26>
  406cfa:	e019      	b.n	406d30 <lv_obj_set_size+0xb8>
        obj->coords.x1 = obj->coords.x2 - w + 1;
  406cfc:	8aa3      	ldrh	r3, [r4, #20]
  406cfe:	1b5b      	subs	r3, r3, r5
  406d00:	b29b      	uxth	r3, r3
  406d02:	3301      	adds	r3, #1
  406d04:	8223      	strh	r3, [r4, #16]
  406d06:	e7e0      	b.n	406cca <lv_obj_set_size+0x52>
        i->signal_cb(i, LV_SIGNAL_PARENT_SIZE_CHG,  &ori);
  406d08:	69eb      	ldr	r3, [r5, #28]
  406d0a:	466a      	mov	r2, sp
  406d0c:	2103      	movs	r1, #3
  406d0e:	4628      	mov	r0, r5
  406d10:	4798      	blx	r3
    _LV_LL_READ(obj->child_ll, i) {
  406d12:	4629      	mov	r1, r5
  406d14:	4630      	mov	r0, r6
  406d16:	4b13      	ldr	r3, [pc, #76]	; (406d64 <lv_obj_set_size+0xec>)
  406d18:	4798      	blx	r3
  406d1a:	4605      	mov	r5, r0
  406d1c:	2d00      	cmp	r5, #0
  406d1e:	d1f3      	bne.n	406d08 <lv_obj_set_size+0x90>
    lv_obj_invalidate(obj);
  406d20:	4620      	mov	r0, r4
  406d22:	4b0a      	ldr	r3, [pc, #40]	; (406d4c <lv_obj_set_size+0xd4>)
  406d24:	4798      	blx	r3
    if(obj->realign.auto_realign) lv_obj_realign(obj);
  406d26:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
  406d2a:	f013 0f01 	tst.w	r3, #1
  406d2e:	d101      	bne.n	406d34 <lv_obj_set_size+0xbc>
}
  406d30:	b002      	add	sp, #8
  406d32:	bd70      	pop	{r4, r5, r6, pc}
    if(obj->realign.auto_realign) lv_obj_realign(obj);
  406d34:	4620      	mov	r0, r4
  406d36:	4b0c      	ldr	r3, [pc, #48]	; (406d68 <lv_obj_set_size+0xf0>)
  406d38:	4798      	blx	r3
  406d3a:	e7f9      	b.n	406d30 <lv_obj_set_size+0xb8>
  406d3c:	00415f95 	.word	0x00415f95
  406d40:	0042c728 	.word	0x0042c728
  406d44:	00415fa1 	.word	0x00415fa1
  406d48:	00405bc1 	.word	0x00405bc1
  406d4c:	00405f99 	.word	0x00405f99
  406d50:	00405b01 	.word	0x00405b01
  406d54:	0040682d 	.word	0x0040682d
  406d58:	004059ed 	.word	0x004059ed
  406d5c:	004162a5 	.word	0x004162a5
  406d60:	00405bf1 	.word	0x00405bf1
  406d64:	004162b9 	.word	0x004162b9
  406d68:	004066b5 	.word	0x004066b5

00406d6c <lv_obj_set_width>:
{
  406d6c:	b538      	push	{r3, r4, r5, lr}
  406d6e:	4604      	mov	r4, r0
  406d70:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406d72:	4b09      	ldr	r3, [pc, #36]	; (406d98 <lv_obj_set_width+0x2c>)
  406d74:	4798      	blx	r3
  406d76:	b928      	cbnz	r0, 406d84 <lv_obj_set_width+0x18>
  406d78:	4622      	mov	r2, r4
  406d7a:	2300      	movs	r3, #0
  406d7c:	4807      	ldr	r0, [pc, #28]	; (406d9c <lv_obj_set_width+0x30>)
  406d7e:	4908      	ldr	r1, [pc, #32]	; (406da0 <lv_obj_set_width+0x34>)
  406d80:	4788      	blx	r1
  406d82:	e7fe      	b.n	406d82 <lv_obj_set_width+0x16>
    lv_obj_set_size(obj, w, lv_obj_get_height(obj));
  406d84:	4620      	mov	r0, r4
  406d86:	4b07      	ldr	r3, [pc, #28]	; (406da4 <lv_obj_set_width+0x38>)
  406d88:	4798      	blx	r3
  406d8a:	4602      	mov	r2, r0
  406d8c:	4629      	mov	r1, r5
  406d8e:	4620      	mov	r0, r4
  406d90:	4b05      	ldr	r3, [pc, #20]	; (406da8 <lv_obj_set_width+0x3c>)
  406d92:	4798      	blx	r3
  406d94:	bd38      	pop	{r3, r4, r5, pc}
  406d96:	bf00      	nop
  406d98:	00415f95 	.word	0x00415f95
  406d9c:	0042c728 	.word	0x0042c728
  406da0:	00415fa1 	.word	0x00415fa1
  406da4:	00405bf1 	.word	0x00405bf1
  406da8:	00406c79 	.word	0x00406c79

00406dac <lv_obj_set_height>:
{
  406dac:	b538      	push	{r3, r4, r5, lr}
  406dae:	4604      	mov	r4, r0
  406db0:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406db2:	4b09      	ldr	r3, [pc, #36]	; (406dd8 <lv_obj_set_height+0x2c>)
  406db4:	4798      	blx	r3
  406db6:	b928      	cbnz	r0, 406dc4 <lv_obj_set_height+0x18>
  406db8:	4622      	mov	r2, r4
  406dba:	2300      	movs	r3, #0
  406dbc:	4807      	ldr	r0, [pc, #28]	; (406ddc <lv_obj_set_height+0x30>)
  406dbe:	4908      	ldr	r1, [pc, #32]	; (406de0 <lv_obj_set_height+0x34>)
  406dc0:	4788      	blx	r1
  406dc2:	e7fe      	b.n	406dc2 <lv_obj_set_height+0x16>
    lv_obj_set_size(obj, lv_obj_get_width(obj), h);
  406dc4:	4620      	mov	r0, r4
  406dc6:	4b07      	ldr	r3, [pc, #28]	; (406de4 <lv_obj_set_height+0x38>)
  406dc8:	4798      	blx	r3
  406dca:	462a      	mov	r2, r5
  406dcc:	4601      	mov	r1, r0
  406dce:	4620      	mov	r0, r4
  406dd0:	4b05      	ldr	r3, [pc, #20]	; (406de8 <lv_obj_set_height+0x3c>)
  406dd2:	4798      	blx	r3
  406dd4:	bd38      	pop	{r3, r4, r5, pc}
  406dd6:	bf00      	nop
  406dd8:	00415f95 	.word	0x00415f95
  406ddc:	0042c728 	.word	0x0042c728
  406de0:	00415fa1 	.word	0x00415fa1
  406de4:	00405bc1 	.word	0x00405bc1
  406de8:	00406c79 	.word	0x00406c79

00406dec <lv_obj_is_protected>:
{
  406dec:	b538      	push	{r3, r4, r5, lr}
  406dee:	4604      	mov	r4, r0
  406df0:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406df2:	4b08      	ldr	r3, [pc, #32]	; (406e14 <lv_obj_is_protected+0x28>)
  406df4:	4798      	blx	r3
  406df6:	b130      	cbz	r0, 406e06 <lv_obj_is_protected+0x1a>
    return (obj->protect & prot) == 0 ? false : true;
  406df8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
  406dfc:	422b      	tst	r3, r5
}
  406dfe:	bf14      	ite	ne
  406e00:	2001      	movne	r0, #1
  406e02:	2000      	moveq	r0, #0
  406e04:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406e06:	4622      	mov	r2, r4
  406e08:	2300      	movs	r3, #0
  406e0a:	4803      	ldr	r0, [pc, #12]	; (406e18 <lv_obj_is_protected+0x2c>)
  406e0c:	4903      	ldr	r1, [pc, #12]	; (406e1c <lv_obj_is_protected+0x30>)
  406e0e:	4788      	blx	r1
  406e10:	e7fe      	b.n	406e10 <lv_obj_is_protected+0x24>
  406e12:	bf00      	nop
  406e14:	00415f95 	.word	0x00415f95
  406e18:	0042c728 	.word	0x0042c728
  406e1c:	00415fa1 	.word	0x00415fa1

00406e20 <lv_obj_get_state>:
{
  406e20:	b530      	push	{r4, r5, lr}
  406e22:	b083      	sub	sp, #12
  406e24:	4604      	mov	r4, r0
  406e26:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406e28:	4b0d      	ldr	r3, [pc, #52]	; (406e60 <lv_obj_get_state+0x40>)
  406e2a:	4798      	blx	r3
  406e2c:	b128      	cbz	r0, 406e3a <lv_obj_get_state+0x1a>
    if(part < _LV_OBJ_PART_REAL_LAST) return ((lv_obj_t *)obj)->state;
  406e2e:	2d3f      	cmp	r5, #63	; 0x3f
  406e30:	d809      	bhi.n	406e46 <lv_obj_get_state+0x26>
  406e32:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
}
  406e36:	b003      	add	sp, #12
  406e38:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406e3a:	4622      	mov	r2, r4
  406e3c:	2300      	movs	r3, #0
  406e3e:	4809      	ldr	r0, [pc, #36]	; (406e64 <lv_obj_get_state+0x44>)
  406e40:	4909      	ldr	r1, [pc, #36]	; (406e68 <lv_obj_get_state+0x48>)
  406e42:	4788      	blx	r1
  406e44:	e7fe      	b.n	406e44 <lv_obj_get_state+0x24>
    info.part = part;
  406e46:	f88d 5004 	strb.w	r5, [sp, #4]
    info.result = LV_STATE_DEFAULT;
  406e4a:	2300      	movs	r3, #0
  406e4c:	f88d 3005 	strb.w	r3, [sp, #5]
    lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STATE_DSC, &info);
  406e50:	aa01      	add	r2, sp, #4
  406e52:	2109      	movs	r1, #9
  406e54:	4620      	mov	r0, r4
  406e56:	4b05      	ldr	r3, [pc, #20]	; (406e6c <lv_obj_get_state+0x4c>)
  406e58:	4798      	blx	r3
    return info.result;
  406e5a:	f89d 0005 	ldrb.w	r0, [sp, #5]
  406e5e:	e7ea      	b.n	406e36 <lv_obj_get_state+0x16>
  406e60:	00415f95 	.word	0x00415f95
  406e64:	0042c728 	.word	0x0042c728
  406e68:	00415fa1 	.word	0x00415fa1
  406e6c:	00405945 	.word	0x00405945

00406e70 <_lv_obj_get_style_color>:
{
  406e70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  406e74:	b083      	sub	sp, #12
  406e76:	4606      	mov	r6, r0
  406e78:	460d      	mov	r5, r1
  406e7a:	4690      	mov	r8, r2
    attr = prop_ori >> 8;
  406e7c:	ea4f 2912 	mov.w	r9, r2, lsr #8
    while(parent) {
  406e80:	4614      	mov	r4, r2
  406e82:	e006      	b.n	406e92 <_lv_obj_get_style_color+0x22>
        if(res == LV_RES_OK) return value_act;
  406e84:	f8bd 0004 	ldrh.w	r0, [sp, #4]
  406e88:	e026      	b.n	406ed8 <_lv_obj_get_style_color+0x68>
        parent = lv_obj_get_parent(parent);
  406e8a:	4630      	mov	r0, r6
  406e8c:	4b15      	ldr	r3, [pc, #84]	; (406ee4 <_lv_obj_get_style_color+0x74>)
  406e8e:	4798      	blx	r3
  406e90:	4606      	mov	r6, r0
    while(parent) {
  406e92:	b1d6      	cbz	r6, 406eca <_lv_obj_get_style_color+0x5a>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
  406e94:	4629      	mov	r1, r5
  406e96:	4630      	mov	r0, r6
  406e98:	4b13      	ldr	r3, [pc, #76]	; (406ee8 <_lv_obj_get_style_color+0x78>)
  406e9a:	4798      	blx	r3
  406e9c:	4607      	mov	r7, r0
        lv_state_t state = lv_obj_get_state(parent, part);
  406e9e:	4629      	mov	r1, r5
  406ea0:	4630      	mov	r0, r6
  406ea2:	4b12      	ldr	r3, [pc, #72]	; (406eec <_lv_obj_get_style_color+0x7c>)
  406ea4:	4798      	blx	r3
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
  406ea6:	0204      	lsls	r4, r0, #8
  406ea8:	b2a4      	uxth	r4, r4
  406eaa:	4444      	add	r4, r8
  406eac:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_color(list, prop, &value_act);
  406eae:	aa01      	add	r2, sp, #4
  406eb0:	4621      	mov	r1, r4
  406eb2:	4638      	mov	r0, r7
  406eb4:	4b0e      	ldr	r3, [pc, #56]	; (406ef0 <_lv_obj_get_style_color+0x80>)
  406eb6:	4798      	blx	r3
        if(res == LV_RES_OK) return value_act;
  406eb8:	2801      	cmp	r0, #1
  406eba:	d0e3      	beq.n	406e84 <_lv_obj_get_style_color+0x14>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
  406ebc:	f019 0f80 	tst.w	r9, #128	; 0x80
  406ec0:	d003      	beq.n	406eca <_lv_obj_get_style_color+0x5a>
        if(part != LV_OBJ_PART_MAIN) {
  406ec2:	2d00      	cmp	r5, #0
  406ec4:	d0e1      	beq.n	406e8a <_lv_obj_get_style_color+0x1a>
            part = LV_OBJ_PART_MAIN;
  406ec6:	2500      	movs	r5, #0
  406ec8:	e7e3      	b.n	406e92 <_lv_obj_get_style_color+0x22>
    prop = prop & (~LV_STYLE_STATE_MASK);
  406eca:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
  406ece:	3c29      	subs	r4, #41	; 0x29
  406ed0:	2c01      	cmp	r4, #1
  406ed2:	d904      	bls.n	406ede <_lv_obj_get_style_color+0x6e>
    return LV_COLOR_BLACK;
  406ed4:	f04f 0000 	mov.w	r0, #0
}
  406ed8:	b003      	add	sp, #12
  406eda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            return LV_COLOR_WHITE;
  406ede:	4b05      	ldr	r3, [pc, #20]	; (406ef4 <_lv_obj_get_style_color+0x84>)
  406ee0:	8818      	ldrh	r0, [r3, #0]
  406ee2:	e7f9      	b.n	406ed8 <_lv_obj_get_style_color+0x68>
  406ee4:	004059ed 	.word	0x004059ed
  406ee8:	00405c4d 	.word	0x00405c4d
  406eec:	00406e21 	.word	0x00406e21
  406ef0:	0040b039 	.word	0x0040b039
  406ef4:	0042c724 	.word	0x0042c724

00406ef8 <_lv_obj_get_style_opa>:
{
  406ef8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  406efc:	b083      	sub	sp, #12
  406efe:	4607      	mov	r7, r0
  406f00:	460e      	mov	r6, r1
  406f02:	4690      	mov	r8, r2
    attr = prop_ori >> 8;
  406f04:	ea4f 2912 	mov.w	r9, r2, lsr #8
    while(parent) {
  406f08:	4614      	mov	r4, r2
  406f0a:	e023      	b.n	406f54 <_lv_obj_get_style_opa+0x5c>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  406f0c:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
  406f10:	4631      	mov	r1, r6
  406f12:	4638      	mov	r0, r7
  406f14:	4b37      	ldr	r3, [pc, #220]	; (406ff4 <_lv_obj_get_style_opa+0xfc>)
  406f16:	4798      	blx	r3
  406f18:	e02e      	b.n	406f78 <_lv_obj_get_style_opa+0x80>
                    if(list->opa_scale_cover) def = true;
  406f1a:	796b      	ldrb	r3, [r5, #5]
  406f1c:	f013 0f20 	tst.w	r3, #32
  406f20:	d147      	bne.n	406fb2 <_lv_obj_get_style_opa+0xba>
            bool def = false;
  406f22:	2300      	movs	r3, #0
            if(def) {
  406f24:	2b00      	cmp	r3, #0
  406f26:	d152      	bne.n	406fce <_lv_obj_get_style_opa+0xd6>
        lv_state_t state = lv_obj_get_state(parent, part);
  406f28:	4631      	mov	r1, r6
  406f2a:	4638      	mov	r0, r7
  406f2c:	4b32      	ldr	r3, [pc, #200]	; (406ff8 <_lv_obj_get_style_opa+0x100>)
  406f2e:	4798      	blx	r3
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
  406f30:	0204      	lsls	r4, r0, #8
  406f32:	b2a4      	uxth	r4, r4
  406f34:	4444      	add	r4, r8
  406f36:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_opa(list, prop, &value_act);
  406f38:	f10d 0207 	add.w	r2, sp, #7
  406f3c:	4621      	mov	r1, r4
  406f3e:	4628      	mov	r0, r5
  406f40:	4b2e      	ldr	r3, [pc, #184]	; (406ffc <_lv_obj_get_style_opa+0x104>)
  406f42:	4798      	blx	r3
        if(res == LV_RES_OK) return value_act;
  406f44:	2801      	cmp	r0, #1
  406f46:	d03a      	beq.n	406fbe <_lv_obj_get_style_opa+0xc6>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
  406f48:	f019 0f80 	tst.w	r9, #128	; 0x80
  406f4c:	d03f      	beq.n	406fce <_lv_obj_get_style_opa+0xd6>
        if(part != LV_OBJ_PART_MAIN) {
  406f4e:	2e00      	cmp	r6, #0
  406f50:	d038      	beq.n	406fc4 <_lv_obj_get_style_opa+0xcc>
            part = LV_OBJ_PART_MAIN;
  406f52:	2600      	movs	r6, #0
    while(parent) {
  406f54:	2f00      	cmp	r7, #0
  406f56:	d03a      	beq.n	406fce <_lv_obj_get_style_opa+0xd6>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
  406f58:	4631      	mov	r1, r6
  406f5a:	4638      	mov	r0, r7
  406f5c:	4b28      	ldr	r3, [pc, #160]	; (407000 <_lv_obj_get_style_opa+0x108>)
  406f5e:	4798      	blx	r3
  406f60:	4605      	mov	r5, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
  406f62:	7943      	ldrb	r3, [r0, #5]
  406f64:	f013 0f08 	tst.w	r3, #8
  406f68:	d1de      	bne.n	406f28 <_lv_obj_get_style_opa+0x30>
  406f6a:	7902      	ldrb	r2, [r0, #4]
  406f6c:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  406f70:	d0da      	beq.n	406f28 <_lv_obj_get_style_opa+0x30>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  406f72:	f013 0f04 	tst.w	r3, #4
  406f76:	d0c9      	beq.n	406f0c <_lv_obj_get_style_opa+0x14>
            switch(prop & (~LV_STYLE_STATE_MASK)) {
  406f78:	f424 43fe 	bic.w	r3, r4, #32512	; 0x7f00
  406f7c:	f248 020c 	movw	r2, #32780	; 0x800c
  406f80:	4293      	cmp	r3, r2
  406f82:	d0ca      	beq.n	406f1a <_lv_obj_get_style_opa+0x22>
  406f84:	f248 02ad 	movw	r2, #32941	; 0x80ad
  406f88:	4293      	cmp	r3, r2
  406f8a:	d00c      	beq.n	406fa6 <_lv_obj_get_style_opa+0xae>
  406f8c:	2b2c      	cmp	r3, #44	; 0x2c
  406f8e:	d001      	beq.n	406f94 <_lv_obj_get_style_opa+0x9c>
            bool def = false;
  406f90:	2300      	movs	r3, #0
  406f92:	e7c7      	b.n	406f24 <_lv_obj_get_style_opa+0x2c>
                    if(list->bg_opa_cover) return LV_OPA_COVER;     /*Special case, not the default value is used*/
  406f94:	79ab      	ldrb	r3, [r5, #6]
  406f96:	f013 0f10 	tst.w	r3, #16
  406f9a:	d127      	bne.n	406fec <_lv_obj_get_style_opa+0xf4>
                    if(list->bg_opa_transp) def = true;
  406f9c:	f013 0f08 	tst.w	r3, #8
  406fa0:	d109      	bne.n	406fb6 <_lv_obj_get_style_opa+0xbe>
            bool def = false;
  406fa2:	2300      	movs	r3, #0
  406fa4:	e7be      	b.n	406f24 <_lv_obj_get_style_opa+0x2c>
                    if(list->img_recolor_opa_transp) def = true;
  406fa6:	79eb      	ldrb	r3, [r5, #7]
  406fa8:	f013 0f10 	tst.w	r3, #16
  406fac:	d105      	bne.n	406fba <_lv_obj_get_style_opa+0xc2>
            bool def = false;
  406fae:	2300      	movs	r3, #0
  406fb0:	e7b8      	b.n	406f24 <_lv_obj_get_style_opa+0x2c>
                    if(list->opa_scale_cover) def = true;
  406fb2:	2301      	movs	r3, #1
  406fb4:	e7b6      	b.n	406f24 <_lv_obj_get_style_opa+0x2c>
                    if(list->bg_opa_transp) def = true;
  406fb6:	2301      	movs	r3, #1
  406fb8:	e7b4      	b.n	406f24 <_lv_obj_get_style_opa+0x2c>
                    if(list->img_recolor_opa_transp) def = true;
  406fba:	2301      	movs	r3, #1
  406fbc:	e7b2      	b.n	406f24 <_lv_obj_get_style_opa+0x2c>
        if(res == LV_RES_OK) return value_act;
  406fbe:	f89d 0007 	ldrb.w	r0, [sp, #7]
  406fc2:	e014      	b.n	406fee <_lv_obj_get_style_opa+0xf6>
        parent = lv_obj_get_parent(parent);
  406fc4:	4638      	mov	r0, r7
  406fc6:	4b0f      	ldr	r3, [pc, #60]	; (407004 <_lv_obj_get_style_opa+0x10c>)
  406fc8:	4798      	blx	r3
  406fca:	4607      	mov	r7, r0
  406fcc:	e7c2      	b.n	406f54 <_lv_obj_get_style_opa+0x5c>
    prop = prop & (~LV_STYLE_STATE_MASK);
  406fce:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
  406fd2:	b2a4      	uxth	r4, r4
    switch(prop) {
  406fd4:	2c6d      	cmp	r4, #109	; 0x6d
  406fd6:	d007      	beq.n	406fe8 <_lv_obj_get_style_opa+0xf0>
  406fd8:	f248 03ad 	movw	r3, #32941	; 0x80ad
  406fdc:	429c      	cmp	r4, r3
  406fde:	d003      	beq.n	406fe8 <_lv_obj_get_style_opa+0xf0>
  406fe0:	2c2c      	cmp	r4, #44	; 0x2c
  406fe2:	d001      	beq.n	406fe8 <_lv_obj_get_style_opa+0xf0>
    return LV_OPA_COVER;
  406fe4:	20ff      	movs	r0, #255	; 0xff
  406fe6:	e002      	b.n	406fee <_lv_obj_get_style_opa+0xf6>
            return LV_OPA_TRANSP;
  406fe8:	2000      	movs	r0, #0
  406fea:	e000      	b.n	406fee <_lv_obj_get_style_opa+0xf6>
                    if(list->bg_opa_cover) return LV_OPA_COVER;     /*Special case, not the default value is used*/
  406fec:	20ff      	movs	r0, #255	; 0xff
}
  406fee:	b003      	add	sp, #12
  406ff0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406ff4:	00407009 	.word	0x00407009
  406ff8:	00406e21 	.word	0x00406e21
  406ffc:	0040b109 	.word	0x0040b109
  407000:	00405c4d 	.word	0x00405c4d
  407004:	004059ed 	.word	0x004059ed

00407008 <update_style_cache>:
{
  407008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40700c:	4605      	mov	r5, r0
  40700e:	460e      	mov	r6, r1
    if(style_prop_is_cacheble(prop) == false) return;
  407010:	4610      	mov	r0, r2
  407012:	4baf      	ldr	r3, [pc, #700]	; (4072d0 <update_style_cache+0x2c8>)
  407014:	4798      	blx	r3
  407016:	b908      	cbnz	r0, 40701c <update_style_cache+0x14>
  407018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  40701c:	4631      	mov	r1, r6
  40701e:	4628      	mov	r0, r5
  407020:	4bac      	ldr	r3, [pc, #688]	; (4072d4 <update_style_cache+0x2cc>)
  407022:	4798      	blx	r3
  407024:	4604      	mov	r4, r0
    bool ignore_cache_ori = list->ignore_cache;
  407026:	7943      	ldrb	r3, [r0, #5]
  407028:	f3c3 08c0 	ubfx	r8, r3, #3, #1
    list->ignore_cache = 1;
  40702c:	f043 0308 	orr.w	r3, r3, #8
  407030:	7143      	strb	r3, [r0, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  407032:	f248 020c 	movw	r2, #32780	; 0x800c
  407036:	4631      	mov	r1, r6
  407038:	4628      	mov	r0, r5
  40703a:	4ba7      	ldr	r3, [pc, #668]	; (4072d8 <update_style_cache+0x2d0>)
  40703c:	4798      	blx	r3
    list->opa_scale_cover    = lv_obj_get_style_opa_scale(obj, part) == LV_OPA_COVER ? 1 : 0;
  40703e:	28ff      	cmp	r0, #255	; 0xff
  407040:	bf14      	ite	ne
  407042:	2000      	movne	r0, #0
  407044:	2001      	moveq	r0, #1
  407046:	7963      	ldrb	r3, [r4, #5]
  407048:	f360 1345 	bfi	r3, r0, #5, #1
  40704c:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
  40704e:	f248 0282 	movw	r2, #32898	; 0x8082
  407052:	4631      	mov	r1, r6
  407054:	4628      	mov	r0, r5
  407056:	4fa1      	ldr	r7, [pc, #644]	; (4072dc <update_style_cache+0x2d4>)
  407058:	47b8      	blx	r7
  40705a:	b2c0      	uxtb	r0, r0
    list->text_decor_none    = lv_obj_get_style_text_decor(obj, part) == LV_TEXT_DECOR_NONE ? 1 : 0;
  40705c:	fab0 f080 	clz	r0, r0
  407060:	0940      	lsrs	r0, r0, #5
  407062:	79e3      	ldrb	r3, [r4, #7]
  407064:	f360 1386 	bfi	r3, r0, #6, #1
  407068:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  40706a:	f248 028e 	movw	r2, #32910	; 0x808e
  40706e:	4631      	mov	r1, r6
  407070:	4628      	mov	r0, r5
  407072:	4b9b      	ldr	r3, [pc, #620]	; (4072e0 <update_style_cache+0x2d8>)
  407074:	4798      	blx	r3
    list->text_font_normal    = lv_obj_get_style_text_font(obj, part) == LV_THEME_DEFAULT_FONT_NORMAL ? 1 : 0;
  407076:	4b9b      	ldr	r3, [pc, #620]	; (4072e4 <update_style_cache+0x2dc>)
  407078:	4283      	cmp	r3, r0
  40707a:	bf14      	ite	ne
  40707c:	2000      	movne	r0, #0
  40707e:	2001      	moveq	r0, #1
  407080:	79e3      	ldrb	r3, [r4, #7]
  407082:	f360 13c7 	bfi	r3, r0, #7, #1
    list->text_space_zero = 1;
  407086:	b2db      	uxtb	r3, r3
  407088:	f043 0320 	orr.w	r3, r3, #32
  40708c:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
  40708e:	f248 0280 	movw	r2, #32896	; 0x8080
  407092:	4631      	mov	r1, r6
  407094:	4628      	mov	r0, r5
  407096:	47b8      	blx	r7
    if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
  407098:	2800      	cmp	r0, #0
  40709a:	f000 80cf 	beq.w	40723c <update_style_cache+0x234>
        list->text_space_zero = 0;
  40709e:	79e3      	ldrb	r3, [r4, #7]
  4070a0:	f36f 1345 	bfc	r3, #5, #1
  4070a4:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  4070a6:	222c      	movs	r2, #44	; 0x2c
  4070a8:	4631      	mov	r1, r6
  4070aa:	4628      	mov	r0, r5
  4070ac:	f8df 9228 	ldr.w	r9, [pc, #552]	; 4072d8 <update_style_cache+0x2d0>
  4070b0:	47c8      	blx	r9
    list->bg_opa_transp    = bg_opa == LV_OPA_TRANSP ? 1 : 0;
  4070b2:	fab0 f280 	clz	r2, r0
  4070b6:	0952      	lsrs	r2, r2, #5
  4070b8:	79a3      	ldrb	r3, [r4, #6]
  4070ba:	f362 03c3 	bfi	r3, r2, #3, #1
    list->bg_opa_cover     = bg_opa == LV_OPA_COVER ? 1 : 0;
  4070be:	28ff      	cmp	r0, #255	; 0xff
  4070c0:	bf14      	ite	ne
  4070c2:	2000      	movne	r0, #0
  4070c4:	2001      	moveq	r0, #1
  4070c6:	f360 1304 	bfi	r3, r0, #4, #1
  4070ca:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  4070cc:	2230      	movs	r2, #48	; 0x30
  4070ce:	4631      	mov	r1, r6
  4070d0:	4628      	mov	r0, r5
  4070d2:	4f82      	ldr	r7, [pc, #520]	; (4072dc <update_style_cache+0x2d4>)
  4070d4:	47b8      	blx	r7
    list->border_width_zero = lv_obj_get_style_border_width(obj, part) == 0 ? 1 : 0;
  4070d6:	fab0 f080 	clz	r0, r0
  4070da:	0940      	lsrs	r0, r0, #5
  4070dc:	79a3      	ldrb	r3, [r4, #6]
  4070de:	f360 1345 	bfi	r3, r0, #5, #1
  4070e2:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  4070e4:	2231      	movs	r2, #49	; 0x31
  4070e6:	4631      	mov	r1, r6
  4070e8:	4628      	mov	r0, r5
  4070ea:	47b8      	blx	r7
  4070ec:	b2c0      	uxtb	r0, r0
    list->border_side_full = lv_obj_get_style_border_side(obj, part) == LV_BORDER_SIDE_FULL ? 1 : 0;
  4070ee:	280f      	cmp	r0, #15
  4070f0:	bf14      	ite	ne
  4070f2:	2000      	movne	r0, #0
  4070f4:	2001      	moveq	r0, #1
  4070f6:	79a3      	ldrb	r3, [r4, #6]
  4070f8:	f360 1386 	bfi	r3, r0, #6, #1
  4070fc:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  4070fe:	2233      	movs	r2, #51	; 0x33
  407100:	4631      	mov	r1, r6
  407102:	4628      	mov	r0, r5
  407104:	47b8      	blx	r7
    list->border_post_off = lv_obj_get_style_border_post(obj, part) == 0 ? 1 : 0;
  407106:	fab0 f080 	clz	r0, r0
  40710a:	0940      	lsrs	r0, r0, #5
  40710c:	79a3      	ldrb	r3, [r4, #6]
  40710e:	f360 13c7 	bfi	r3, r0, #7, #1
  407112:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  407114:	2202      	movs	r2, #2
  407116:	4631      	mov	r1, r6
  407118:	4628      	mov	r0, r5
  40711a:	47b8      	blx	r7
    list->clip_corner_off   = lv_obj_get_style_clip_corner(obj, part) == false ? 1 : 0;
  40711c:	fab0 f080 	clz	r0, r0
  407120:	0940      	lsrs	r0, r0, #5
  407122:	7963      	ldrb	r3, [r4, #5]
  407124:	f360 1386 	bfi	r3, r0, #6, #1
  407128:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
  40712a:	f248 02ad 	movw	r2, #32941	; 0x80ad
  40712e:	4631      	mov	r1, r6
  407130:	4628      	mov	r0, r5
  407132:	47c8      	blx	r9
    list->img_recolor_opa_transp    = lv_obj_get_style_image_recolor_opa(obj, part) == LV_OPA_TRANSP ? 1 : 0;
  407134:	fab0 f080 	clz	r0, r0
  407138:	0940      	lsrs	r0, r0, #5
  40713a:	79e3      	ldrb	r3, [r4, #7]
  40713c:	f360 1304 	bfi	r3, r0, #4, #1
  407140:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  407142:	2240      	movs	r2, #64	; 0x40
  407144:	4631      	mov	r1, r6
  407146:	4628      	mov	r0, r5
  407148:	47b8      	blx	r7
    list->outline_width_zero    = lv_obj_get_style_outline_width(obj, part) == 0 ? 1 : 0;
  40714a:	fab0 f080 	clz	r0, r0
  40714e:	0940      	lsrs	r0, r0, #5
  407150:	79e3      	ldrb	r3, [r4, #7]
  407152:	f360 0300 	bfi	r3, r0, #0, #1
  407156:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
  407158:	226e      	movs	r2, #110	; 0x6e
  40715a:	4631      	mov	r1, r6
  40715c:	4628      	mov	r0, r5
  40715e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 4072e0 <update_style_cache+0x2d8>
  407162:	47c8      	blx	r9
    list->pattern_img_null    = lv_obj_get_style_pattern_image(obj, part) == NULL ? 1 : 0;
  407164:	fab0 f080 	clz	r0, r0
  407168:	0940      	lsrs	r0, r0, #5
  40716a:	79e3      	ldrb	r3, [r4, #7]
  40716c:	f360 0341 	bfi	r3, r0, #1, #1
  407170:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  407172:	2201      	movs	r2, #1
  407174:	4631      	mov	r1, r6
  407176:	4628      	mov	r0, r5
  407178:	47b8      	blx	r7
    list->radius_zero    = lv_obj_get_style_radius(obj, part) == 0 ? 1 : 0;
  40717a:	fab0 f080 	clz	r0, r0
  40717e:	0940      	lsrs	r0, r0, #5
  407180:	7963      	ldrb	r3, [r4, #5]
  407182:	f360 1304 	bfi	r3, r0, #4, #1
  407186:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
  407188:	2250      	movs	r2, #80	; 0x50
  40718a:	4631      	mov	r1, r6
  40718c:	4628      	mov	r0, r5
  40718e:	47b8      	blx	r7
    list->shadow_width_zero    = lv_obj_get_style_shadow_width(obj, part) == 0 ? 1 : 0;
  407190:	fab0 f080 	clz	r0, r0
  407194:	0940      	lsrs	r0, r0, #5
  407196:	79e3      	ldrb	r3, [r4, #7]
  407198:	f360 0382 	bfi	r3, r0, #2, #1
  40719c:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
  40719e:	227f      	movs	r2, #127	; 0x7f
  4071a0:	4631      	mov	r1, r6
  4071a2:	4628      	mov	r0, r5
  4071a4:	47c8      	blx	r9
    list->value_txt_str    = lv_obj_get_style_value_str(obj, part) == NULL ? 1 : 0;
  4071a6:	fab0 f080 	clz	r0, r0
  4071aa:	0940      	lsrs	r0, r0, #5
  4071ac:	79e3      	ldrb	r3, [r4, #7]
  4071ae:	f360 03c3 	bfi	r3, r0, #3, #1
  4071b2:	71e3      	strb	r3, [r4, #7]
    list->transform_all_zero  = 1;
  4071b4:	7963      	ldrb	r3, [r4, #5]
  4071b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4071ba:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  4071bc:	2206      	movs	r2, #6
  4071be:	4631      	mov	r1, r6
  4071c0:	4628      	mov	r0, r5
  4071c2:	47b8      	blx	r7
    if(lv_obj_get_style_transform_angle(obj, part) != 0 ||
  4071c4:	2800      	cmp	r0, #0
  4071c6:	d042      	beq.n	40724e <update_style_cache+0x246>
        list->transform_all_zero  = 0;
  4071c8:	7963      	ldrb	r3, [r4, #5]
  4071ca:	f36f 13c7 	bfc	r3, #7, #1
  4071ce:	7163      	strb	r3, [r4, #5]
    list->pad_all_zero  = 1;
  4071d0:	79a3      	ldrb	r3, [r4, #6]
  4071d2:	f043 0301 	orr.w	r3, r3, #1
  4071d6:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  4071d8:	2210      	movs	r2, #16
  4071da:	4631      	mov	r1, r6
  4071dc:	4628      	mov	r0, r5
  4071de:	4b3f      	ldr	r3, [pc, #252]	; (4072dc <update_style_cache+0x2d4>)
  4071e0:	4798      	blx	r3
    if(lv_obj_get_style_pad_top(obj, part) != 0 ||
  4071e2:	2800      	cmp	r0, #0
  4071e4:	d047      	beq.n	407276 <update_style_cache+0x26e>
        list->pad_all_zero  = 0;
  4071e6:	79a3      	ldrb	r3, [r4, #6]
  4071e8:	f36f 0300 	bfc	r3, #0, #1
  4071ec:	71a3      	strb	r3, [r4, #6]
    list->margin_all_zero  = 1;
  4071ee:	79a3      	ldrb	r3, [r4, #6]
  4071f0:	f043 0302 	orr.w	r3, r3, #2
  4071f4:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  4071f6:	2215      	movs	r2, #21
  4071f8:	4631      	mov	r1, r6
  4071fa:	4628      	mov	r0, r5
  4071fc:	4b37      	ldr	r3, [pc, #220]	; (4072dc <update_style_cache+0x2d4>)
  4071fe:	4798      	blx	r3
    if(lv_obj_get_style_margin_top(obj, part) != 0 ||
  407200:	2800      	cmp	r0, #0
  407202:	d04e      	beq.n	4072a2 <update_style_cache+0x29a>
        list->margin_all_zero  = 0;
  407204:	79a3      	ldrb	r3, [r4, #6]
  407206:	f36f 0341 	bfc	r3, #1, #1
  40720a:	71a3      	strb	r3, [r4, #6]
    list->blend_mode_all_normal = 1;
  40720c:	79a3      	ldrb	r3, [r4, #6]
  40720e:	f043 0304 	orr.w	r3, r3, #4
  407212:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
  407214:	2220      	movs	r2, #32
  407216:	4631      	mov	r1, r6
  407218:	4628      	mov	r0, r5
  40721a:	4b30      	ldr	r3, [pc, #192]	; (4072dc <update_style_cache+0x2d4>)
  40721c:	4798      	blx	r3
  40721e:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_bg_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  407220:	2800      	cmp	r0, #0
  407222:	d061      	beq.n	4072e8 <update_style_cache+0x2e0>
        list->blend_mode_all_normal = 0;
  407224:	79a3      	ldrb	r3, [r4, #6]
  407226:	f36f 0382 	bfc	r3, #2, #1
  40722a:	71a3      	strb	r3, [r4, #6]
    list->ignore_cache = ignore_cache_ori;
  40722c:	7963      	ldrb	r3, [r4, #5]
  40722e:	f368 03c3 	bfi	r3, r8, #3, #1
    list->valid_cache = 1;
  407232:	b2db      	uxtb	r3, r3
  407234:	f043 0304 	orr.w	r3, r3, #4
  407238:	7163      	strb	r3, [r4, #5]
  40723a:	e6ed      	b.n	407018 <update_style_cache+0x10>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  40723c:	f248 0281 	movw	r2, #32897	; 0x8081
  407240:	4631      	mov	r1, r6
  407242:	4628      	mov	r0, r5
  407244:	47b8      	blx	r7
    if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
  407246:	2800      	cmp	r0, #0
  407248:	f43f af2d 	beq.w	4070a6 <update_style_cache+0x9e>
  40724c:	e727      	b.n	40709e <update_style_cache+0x96>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  40724e:	2204      	movs	r2, #4
  407250:	4631      	mov	r1, r6
  407252:	4628      	mov	r0, r5
  407254:	47b8      	blx	r7
    if(lv_obj_get_style_transform_angle(obj, part) != 0 ||
  407256:	2800      	cmp	r0, #0
  407258:	d1b6      	bne.n	4071c8 <update_style_cache+0x1c0>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  40725a:	2205      	movs	r2, #5
  40725c:	4631      	mov	r1, r6
  40725e:	4628      	mov	r0, r5
  407260:	47b8      	blx	r7
       lv_obj_get_style_transform_width(obj, part) != 0 ||
  407262:	2800      	cmp	r0, #0
  407264:	d1b0      	bne.n	4071c8 <update_style_cache+0x1c0>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  407266:	2207      	movs	r2, #7
  407268:	4631      	mov	r1, r6
  40726a:	4628      	mov	r0, r5
  40726c:	47b8      	blx	r7
       lv_obj_get_style_transform_height(obj, part) != 0 ||
  40726e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  407272:	d1a9      	bne.n	4071c8 <update_style_cache+0x1c0>
  407274:	e7ac      	b.n	4071d0 <update_style_cache+0x1c8>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  407276:	2211      	movs	r2, #17
  407278:	4631      	mov	r1, r6
  40727a:	4628      	mov	r0, r5
  40727c:	4b17      	ldr	r3, [pc, #92]	; (4072dc <update_style_cache+0x2d4>)
  40727e:	4798      	blx	r3
    if(lv_obj_get_style_pad_top(obj, part) != 0 ||
  407280:	2800      	cmp	r0, #0
  407282:	d1b0      	bne.n	4071e6 <update_style_cache+0x1de>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  407284:	2212      	movs	r2, #18
  407286:	4631      	mov	r1, r6
  407288:	4628      	mov	r0, r5
  40728a:	4b14      	ldr	r3, [pc, #80]	; (4072dc <update_style_cache+0x2d4>)
  40728c:	4798      	blx	r3
       lv_obj_get_style_pad_bottom(obj, part) != 0 ||
  40728e:	2800      	cmp	r0, #0
  407290:	d1a9      	bne.n	4071e6 <update_style_cache+0x1de>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  407292:	2213      	movs	r2, #19
  407294:	4631      	mov	r1, r6
  407296:	4628      	mov	r0, r5
  407298:	4b10      	ldr	r3, [pc, #64]	; (4072dc <update_style_cache+0x2d4>)
  40729a:	4798      	blx	r3
       lv_obj_get_style_pad_left(obj, part) != 0 ||
  40729c:	2800      	cmp	r0, #0
  40729e:	d0a6      	beq.n	4071ee <update_style_cache+0x1e6>
  4072a0:	e7a1      	b.n	4071e6 <update_style_cache+0x1de>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  4072a2:	2216      	movs	r2, #22
  4072a4:	4631      	mov	r1, r6
  4072a6:	4628      	mov	r0, r5
  4072a8:	4b0c      	ldr	r3, [pc, #48]	; (4072dc <update_style_cache+0x2d4>)
  4072aa:	4798      	blx	r3
    if(lv_obj_get_style_margin_top(obj, part) != 0 ||
  4072ac:	2800      	cmp	r0, #0
  4072ae:	d1a9      	bne.n	407204 <update_style_cache+0x1fc>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  4072b0:	2217      	movs	r2, #23
  4072b2:	4631      	mov	r1, r6
  4072b4:	4628      	mov	r0, r5
  4072b6:	4b09      	ldr	r3, [pc, #36]	; (4072dc <update_style_cache+0x2d4>)
  4072b8:	4798      	blx	r3
       lv_obj_get_style_margin_bottom(obj, part) != 0 ||
  4072ba:	2800      	cmp	r0, #0
  4072bc:	d1a2      	bne.n	407204 <update_style_cache+0x1fc>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
  4072be:	2218      	movs	r2, #24
  4072c0:	4631      	mov	r1, r6
  4072c2:	4628      	mov	r0, r5
  4072c4:	4b05      	ldr	r3, [pc, #20]	; (4072dc <update_style_cache+0x2d4>)
  4072c6:	4798      	blx	r3
       lv_obj_get_style_margin_left(obj, part) != 0 ||
  4072c8:	2800      	cmp	r0, #0
  4072ca:	d09f      	beq.n	40720c <update_style_cache+0x204>
  4072cc:	e79a      	b.n	407204 <update_style_cache+0x1fc>
  4072ce:	bf00      	nop
  4072d0:	004053b5 	.word	0x004053b5
  4072d4:	00405c4d 	.word	0x00405c4d
  4072d8:	00406ef9 	.word	0x00406ef9
  4072dc:	00407485 	.word	0x00407485
  4072e0:	0040737d 	.word	0x0040737d
  4072e4:	2040008c 	.word	0x2040008c
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
  4072e8:	2232      	movs	r2, #50	; 0x32
  4072ea:	4631      	mov	r1, r6
  4072ec:	4628      	mov	r0, r5
  4072ee:	4b22      	ldr	r3, [pc, #136]	; (407378 <update_style_cache+0x370>)
  4072f0:	4798      	blx	r3
  4072f2:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_bg_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  4072f4:	2800      	cmp	r0, #0
  4072f6:	d195      	bne.n	407224 <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_BLEND_MODE, pattern_blend_mode, lv_blend_mode_t, _int, scalar)
  4072f8:	2260      	movs	r2, #96	; 0x60
  4072fa:	4631      	mov	r1, r6
  4072fc:	4628      	mov	r0, r5
  4072fe:	4b1e      	ldr	r3, [pc, #120]	; (407378 <update_style_cache+0x370>)
  407300:	4798      	blx	r3
  407302:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_border_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  407304:	2800      	cmp	r0, #0
  407306:	d18d      	bne.n	407224 <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_BLEND_MODE, outline_blend_mode, lv_blend_mode_t, _int, scalar)
  407308:	2242      	movs	r2, #66	; 0x42
  40730a:	4631      	mov	r1, r6
  40730c:	4628      	mov	r0, r5
  40730e:	4b1a      	ldr	r3, [pc, #104]	; (407378 <update_style_cache+0x370>)
  407310:	4798      	blx	r3
  407312:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_pattern_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  407314:	2800      	cmp	r0, #0
  407316:	d185      	bne.n	407224 <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_BLEND_MODE, value_blend_mode, lv_blend_mode_t, _int, scalar)
  407318:	2272      	movs	r2, #114	; 0x72
  40731a:	4631      	mov	r1, r6
  40731c:	4628      	mov	r0, r5
  40731e:	4b16      	ldr	r3, [pc, #88]	; (407378 <update_style_cache+0x370>)
  407320:	4798      	blx	r3
  407322:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_outline_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  407324:	2800      	cmp	r0, #0
  407326:	f47f af7d 	bne.w	407224 <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
  40732a:	f248 0283 	movw	r2, #32899	; 0x8083
  40732e:	4631      	mov	r1, r6
  407330:	4628      	mov	r0, r5
  407332:	4b11      	ldr	r3, [pc, #68]	; (407378 <update_style_cache+0x370>)
  407334:	4798      	blx	r3
  407336:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_value_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  407338:	2800      	cmp	r0, #0
  40733a:	f47f af73 	bne.w	407224 <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_BLEND_MODE, line_blend_mode, lv_blend_mode_t, _int, scalar)
  40733e:	2291      	movs	r2, #145	; 0x91
  407340:	4631      	mov	r1, r6
  407342:	4628      	mov	r0, r5
  407344:	4b0c      	ldr	r3, [pc, #48]	; (407378 <update_style_cache+0x370>)
  407346:	4798      	blx	r3
  407348:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_text_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  40734a:	2800      	cmp	r0, #0
  40734c:	f47f af6a 	bne.w	407224 <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
  407350:	f248 02a0 	movw	r2, #32928	; 0x80a0
  407354:	4631      	mov	r1, r6
  407356:	4628      	mov	r0, r5
  407358:	4b07      	ldr	r3, [pc, #28]	; (407378 <update_style_cache+0x370>)
  40735a:	4798      	blx	r3
  40735c:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_line_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  40735e:	2800      	cmp	r0, #0
  407360:	f47f af60 	bne.w	407224 <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_BLEND_MODE, shadow_blend_mode, lv_blend_mode_t, _int, scalar)
  407364:	2254      	movs	r2, #84	; 0x54
  407366:	4631      	mov	r1, r6
  407368:	4628      	mov	r0, r5
  40736a:	4b03      	ldr	r3, [pc, #12]	; (407378 <update_style_cache+0x370>)
  40736c:	4798      	blx	r3
  40736e:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_image_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  407370:	2800      	cmp	r0, #0
  407372:	f43f af5b 	beq.w	40722c <update_style_cache+0x224>
  407376:	e755      	b.n	407224 <update_style_cache+0x21c>
  407378:	00407485 	.word	0x00407485

0040737c <_lv_obj_get_style_ptr>:
{
  40737c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  407380:	b083      	sub	sp, #12
  407382:	4607      	mov	r7, r0
  407384:	460e      	mov	r6, r1
  407386:	4690      	mov	r8, r2
    attr = prop_ori >> 8;
  407388:	ea4f 2912 	mov.w	r9, r2, lsr #8
    while(parent) {
  40738c:	4614      	mov	r4, r2
  40738e:	e02d      	b.n	4073ec <_lv_obj_get_style_ptr+0x70>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  407390:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
  407394:	4631      	mov	r1, r6
  407396:	4638      	mov	r0, r7
  407398:	4b33      	ldr	r3, [pc, #204]	; (407468 <_lv_obj_get_style_ptr+0xec>)
  40739a:	4798      	blx	r3
  40739c:	e037      	b.n	40740e <_lv_obj_get_style_ptr+0x92>
                    if(list->value_txt_str) def = true;
  40739e:	79eb      	ldrb	r3, [r5, #7]
  4073a0:	f013 0f08 	tst.w	r3, #8
  4073a4:	d13f      	bne.n	407426 <_lv_obj_get_style_ptr+0xaa>
            bool def = false;
  4073a6:	2300      	movs	r3, #0
  4073a8:	e00a      	b.n	4073c0 <_lv_obj_get_style_ptr+0x44>
                    if(list->pattern_img_null) def = true;
  4073aa:	79eb      	ldrb	r3, [r5, #7]
  4073ac:	f013 0f02 	tst.w	r3, #2
  4073b0:	d13b      	bne.n	40742a <_lv_obj_get_style_ptr+0xae>
            bool def = false;
  4073b2:	2300      	movs	r3, #0
  4073b4:	e004      	b.n	4073c0 <_lv_obj_get_style_ptr+0x44>
                    if(list->text_font_normal) def = true;
  4073b6:	f995 3007 	ldrsb.w	r3, [r5, #7]
  4073ba:	2b00      	cmp	r3, #0
  4073bc:	db37      	blt.n	40742e <_lv_obj_get_style_ptr+0xb2>
            bool def = false;
  4073be:	2300      	movs	r3, #0
            if(def) {
  4073c0:	2b00      	cmp	r3, #0
  4073c2:	d13f      	bne.n	407444 <_lv_obj_get_style_ptr+0xc8>
        lv_state_t state = lv_obj_get_state(parent, part);
  4073c4:	4631      	mov	r1, r6
  4073c6:	4638      	mov	r0, r7
  4073c8:	4b28      	ldr	r3, [pc, #160]	; (40746c <_lv_obj_get_style_ptr+0xf0>)
  4073ca:	4798      	blx	r3
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
  4073cc:	0204      	lsls	r4, r0, #8
  4073ce:	b2a4      	uxth	r4, r4
  4073d0:	4444      	add	r4, r8
  4073d2:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_ptr(list, prop, &value_act);
  4073d4:	aa01      	add	r2, sp, #4
  4073d6:	4621      	mov	r1, r4
  4073d8:	4628      	mov	r0, r5
  4073da:	4b25      	ldr	r3, [pc, #148]	; (407470 <_lv_obj_get_style_ptr+0xf4>)
  4073dc:	4798      	blx	r3
        if(res == LV_RES_OK)  return value_act;
  4073de:	2801      	cmp	r0, #1
  4073e0:	d027      	beq.n	407432 <_lv_obj_get_style_ptr+0xb6>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
  4073e2:	f019 0f80 	tst.w	r9, #128	; 0x80
  4073e6:	d02d      	beq.n	407444 <_lv_obj_get_style_ptr+0xc8>
        if(part != LV_OBJ_PART_MAIN) {
  4073e8:	b33e      	cbz	r6, 40743a <_lv_obj_get_style_ptr+0xbe>
            part = LV_OBJ_PART_MAIN;
  4073ea:	2600      	movs	r6, #0
    while(parent) {
  4073ec:	b357      	cbz	r7, 407444 <_lv_obj_get_style_ptr+0xc8>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
  4073ee:	4631      	mov	r1, r6
  4073f0:	4638      	mov	r0, r7
  4073f2:	4b20      	ldr	r3, [pc, #128]	; (407474 <_lv_obj_get_style_ptr+0xf8>)
  4073f4:	4798      	blx	r3
  4073f6:	4605      	mov	r5, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
  4073f8:	7943      	ldrb	r3, [r0, #5]
  4073fa:	f013 0f08 	tst.w	r3, #8
  4073fe:	d1e1      	bne.n	4073c4 <_lv_obj_get_style_ptr+0x48>
  407400:	7902      	ldrb	r2, [r0, #4]
  407402:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  407406:	d0dd      	beq.n	4073c4 <_lv_obj_get_style_ptr+0x48>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  407408:	f013 0f04 	tst.w	r3, #4
  40740c:	d0c0      	beq.n	407390 <_lv_obj_get_style_ptr+0x14>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  40740e:	f424 43fe 	bic.w	r3, r4, #32512	; 0x7f00
  407412:	2b7f      	cmp	r3, #127	; 0x7f
  407414:	d0c3      	beq.n	40739e <_lv_obj_get_style_ptr+0x22>
  407416:	f248 028e 	movw	r2, #32910	; 0x808e
  40741a:	4293      	cmp	r3, r2
  40741c:	d0cb      	beq.n	4073b6 <_lv_obj_get_style_ptr+0x3a>
  40741e:	2b6e      	cmp	r3, #110	; 0x6e
  407420:	d0c3      	beq.n	4073aa <_lv_obj_get_style_ptr+0x2e>
            bool def = false;
  407422:	2300      	movs	r3, #0
  407424:	e7cc      	b.n	4073c0 <_lv_obj_get_style_ptr+0x44>
                    if(list->value_txt_str) def = true;
  407426:	2301      	movs	r3, #1
  407428:	e7ca      	b.n	4073c0 <_lv_obj_get_style_ptr+0x44>
                    if(list->pattern_img_null) def = true;
  40742a:	2301      	movs	r3, #1
  40742c:	e7c8      	b.n	4073c0 <_lv_obj_get_style_ptr+0x44>
                    if(list->text_font_normal) def = true;
  40742e:	2301      	movs	r3, #1
  407430:	e7c6      	b.n	4073c0 <_lv_obj_get_style_ptr+0x44>
        if(res == LV_RES_OK)  return value_act;
  407432:	9801      	ldr	r0, [sp, #4]
}
  407434:	b003      	add	sp, #12
  407436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        parent = lv_obj_get_parent(parent);
  40743a:	4638      	mov	r0, r7
  40743c:	4b0e      	ldr	r3, [pc, #56]	; (407478 <_lv_obj_get_style_ptr+0xfc>)
  40743e:	4798      	blx	r3
  407440:	4607      	mov	r7, r0
  407442:	e7d3      	b.n	4073ec <_lv_obj_get_style_ptr+0x70>
    prop = prop & (~LV_STYLE_STATE_MASK);
  407444:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
  407448:	b2a4      	uxth	r4, r4
    switch(prop) {
  40744a:	2cbe      	cmp	r4, #190	; 0xbe
  40744c:	d007      	beq.n	40745e <_lv_obj_get_style_ptr+0xe2>
  40744e:	f248 038e 	movw	r3, #32910	; 0x808e
  407452:	429c      	cmp	r4, r3
  407454:	d005      	beq.n	407462 <_lv_obj_get_style_ptr+0xe6>
  407456:	2c7e      	cmp	r4, #126	; 0x7e
  407458:	d003      	beq.n	407462 <_lv_obj_get_style_ptr+0xe6>
    return NULL;
  40745a:	2000      	movs	r0, #0
  40745c:	e7ea      	b.n	407434 <_lv_obj_get_style_ptr+0xb8>
            return &lv_anim_path_def;
  40745e:	4807      	ldr	r0, [pc, #28]	; (40747c <_lv_obj_get_style_ptr+0x100>)
  407460:	e7e8      	b.n	407434 <_lv_obj_get_style_ptr+0xb8>
            return lv_theme_get_font_normal();
  407462:	4b07      	ldr	r3, [pc, #28]	; (407480 <_lv_obj_get_style_ptr+0x104>)
  407464:	4798      	blx	r3
  407466:	e7e5      	b.n	407434 <_lv_obj_get_style_ptr+0xb8>
  407468:	00407009 	.word	0x00407009
  40746c:	00406e21 	.word	0x00406e21
  407470:	0040b1dd 	.word	0x0040b1dd
  407474:	00405c4d 	.word	0x00405c4d
  407478:	004059ed 	.word	0x004059ed
  40747c:	0042fcc8 	.word	0x0042fcc8
  407480:	0041843d 	.word	0x0041843d

00407484 <_lv_obj_get_style_int>:
{
  407484:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  407488:	b083      	sub	sp, #12
  40748a:	4607      	mov	r7, r0
  40748c:	460e      	mov	r6, r1
  40748e:	4690      	mov	r8, r2
    attr = prop_ori >> 8;
  407490:	ea4f 2912 	mov.w	r9, r2, lsr #8
    while(parent) {
  407494:	4614      	mov	r4, r2
  407496:	e078      	b.n	40758a <_lv_obj_get_style_int+0x106>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  407498:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
  40749c:	4631      	mov	r1, r6
  40749e:	4638      	mov	r0, r7
  4074a0:	4b82      	ldr	r3, [pc, #520]	; (4076ac <_lv_obj_get_style_int+0x228>)
  4074a2:	4798      	blx	r3
  4074a4:	e084      	b.n	4075b0 <_lv_obj_get_style_int+0x12c>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  4074a6:	3b04      	subs	r3, #4
  4074a8:	2b03      	cmp	r3, #3
  4074aa:	d854      	bhi.n	407556 <_lv_obj_get_style_int+0xd2>
                    if(list->transform_all_zero) def = true;
  4074ac:	f995 3005 	ldrsb.w	r3, [r5, #5]
  4074b0:	2b00      	cmp	r3, #0
  4074b2:	f2c0 80c0 	blt.w	407636 <_lv_obj_get_style_int+0x1b2>
            bool def = false;
  4074b6:	2300      	movs	r3, #0
  4074b8:	e04e      	b.n	407558 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  4074ba:	2b20      	cmp	r3, #32
  4074bc:	d029      	beq.n	407512 <_lv_obj_get_style_int+0x8e>
  4074be:	dd0c      	ble.n	4074da <_lv_obj_get_style_int+0x56>
  4074c0:	2b31      	cmp	r3, #49	; 0x31
  4074c2:	f000 809c 	beq.w	4075fe <_lv_obj_get_style_int+0x17a>
  4074c6:	dc24      	bgt.n	407512 <_lv_obj_get_style_int+0x8e>
  4074c8:	2b30      	cmp	r3, #48	; 0x30
  4074ca:	d144      	bne.n	407556 <_lv_obj_get_style_int+0xd2>
                    if(list->border_width_zero) def = true;
  4074cc:	79ab      	ldrb	r3, [r5, #6]
  4074ce:	f013 0f20 	tst.w	r3, #32
  4074d2:	f040 80b2 	bne.w	40763a <_lv_obj_get_style_int+0x1b6>
            bool def = false;
  4074d6:	2300      	movs	r3, #0
  4074d8:	e03e      	b.n	407558 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  4074da:	3b15      	subs	r3, #21
  4074dc:	2b03      	cmp	r3, #3
  4074de:	d83a      	bhi.n	407556 <_lv_obj_get_style_int+0xd2>
                    if(list->margin_all_zero) def = true;
  4074e0:	79ab      	ldrb	r3, [r5, #6]
  4074e2:	f013 0f02 	tst.w	r3, #2
  4074e6:	f040 80b6 	bne.w	407656 <_lv_obj_get_style_int+0x1d2>
            bool def = false;
  4074ea:	2300      	movs	r3, #0
  4074ec:	e034      	b.n	407558 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  4074ee:	2b72      	cmp	r3, #114	; 0x72
  4074f0:	d00f      	beq.n	407512 <_lv_obj_get_style_int+0x8e>
  4074f2:	dc1a      	bgt.n	40752a <_lv_obj_get_style_int+0xa6>
  4074f4:	2b50      	cmp	r3, #80	; 0x50
  4074f6:	f000 808e 	beq.w	407616 <_lv_obj_get_style_int+0x192>
  4074fa:	dc11      	bgt.n	407520 <_lv_obj_get_style_int+0x9c>
  4074fc:	2b40      	cmp	r3, #64	; 0x40
  4074fe:	d106      	bne.n	40750e <_lv_obj_get_style_int+0x8a>
                    if(list->outline_width_zero) def = true;
  407500:	79eb      	ldrb	r3, [r5, #7]
  407502:	f013 0f01 	tst.w	r3, #1
  407506:	f040 809e 	bne.w	407646 <_lv_obj_get_style_int+0x1c2>
            bool def = false;
  40750a:	2300      	movs	r3, #0
  40750c:	e024      	b.n	407558 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  40750e:	2b42      	cmp	r3, #66	; 0x42
  407510:	d121      	bne.n	407556 <_lv_obj_get_style_int+0xd2>
                    if(list->blend_mode_all_normal) def = true;
  407512:	79ab      	ldrb	r3, [r5, #6]
  407514:	f013 0f04 	tst.w	r3, #4
  407518:	f040 809f 	bne.w	40765a <_lv_obj_get_style_int+0x1d6>
            bool def = false;
  40751c:	2300      	movs	r3, #0
  40751e:	e01b      	b.n	407558 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  407520:	2b54      	cmp	r3, #84	; 0x54
  407522:	d0f6      	beq.n	407512 <_lv_obj_get_style_int+0x8e>
  407524:	2b60      	cmp	r3, #96	; 0x60
  407526:	d116      	bne.n	407556 <_lv_obj_get_style_int+0xd2>
  407528:	e7f3      	b.n	407512 <_lv_obj_get_style_int+0x8e>
  40752a:	f248 0281 	movw	r2, #32897	; 0x8081
  40752e:	4293      	cmp	r3, r2
  407530:	dd0b      	ble.n	40754a <_lv_obj_get_style_int+0xc6>
  407532:	f248 0283 	movw	r2, #32899	; 0x8083
  407536:	4293      	cmp	r3, r2
  407538:	d0eb      	beq.n	407512 <_lv_obj_get_style_int+0x8e>
  40753a:	da4f      	bge.n	4075dc <_lv_obj_get_style_int+0x158>
                    if(list->text_decor_none) def = true;
  40753c:	79eb      	ldrb	r3, [r5, #7]
  40753e:	f013 0f40 	tst.w	r3, #64	; 0x40
  407542:	f040 808c 	bne.w	40765e <_lv_obj_get_style_int+0x1da>
            bool def = false;
  407546:	2300      	movs	r3, #0
  407548:	e006      	b.n	407558 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  40754a:	f248 0280 	movw	r2, #32896	; 0x8080
  40754e:	4293      	cmp	r3, r2
  407550:	da4f      	bge.n	4075f2 <_lv_obj_get_style_int+0x16e>
  407552:	2b91      	cmp	r3, #145	; 0x91
  407554:	d0dd      	beq.n	407512 <_lv_obj_get_style_int+0x8e>
            bool def = false;
  407556:	2300      	movs	r3, #0
            if(def) {
  407558:	2b00      	cmp	r3, #0
  40755a:	f040 808c 	bne.w	407676 <_lv_obj_get_style_int+0x1f2>
        lv_state_t state = lv_obj_get_state(parent, part);
  40755e:	4631      	mov	r1, r6
  407560:	4638      	mov	r0, r7
  407562:	4b53      	ldr	r3, [pc, #332]	; (4076b0 <_lv_obj_get_style_int+0x22c>)
  407564:	4798      	blx	r3
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
  407566:	0204      	lsls	r4, r0, #8
  407568:	b2a4      	uxth	r4, r4
  40756a:	4444      	add	r4, r8
  40756c:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_int(list, prop, &value_act);
  40756e:	f10d 0206 	add.w	r2, sp, #6
  407572:	4621      	mov	r1, r4
  407574:	4628      	mov	r0, r5
  407576:	4b4f      	ldr	r3, [pc, #316]	; (4076b4 <_lv_obj_get_style_int+0x230>)
  407578:	4798      	blx	r3
        if(res == LV_RES_OK) return value_act;
  40757a:	2801      	cmp	r0, #1
  40757c:	d071      	beq.n	407662 <_lv_obj_get_style_int+0x1de>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
  40757e:	f019 0f80 	tst.w	r9, #128	; 0x80
  407582:	d078      	beq.n	407676 <_lv_obj_get_style_int+0x1f2>
        if(part != LV_OBJ_PART_MAIN) {
  407584:	2e00      	cmp	r6, #0
  407586:	d071      	beq.n	40766c <_lv_obj_get_style_int+0x1e8>
            part = LV_OBJ_PART_MAIN;
  407588:	2600      	movs	r6, #0
    while(parent) {
  40758a:	2f00      	cmp	r7, #0
  40758c:	d073      	beq.n	407676 <_lv_obj_get_style_int+0x1f2>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
  40758e:	4631      	mov	r1, r6
  407590:	4638      	mov	r0, r7
  407592:	4b49      	ldr	r3, [pc, #292]	; (4076b8 <_lv_obj_get_style_int+0x234>)
  407594:	4798      	blx	r3
  407596:	4605      	mov	r5, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
  407598:	7943      	ldrb	r3, [r0, #5]
  40759a:	f013 0f08 	tst.w	r3, #8
  40759e:	d1de      	bne.n	40755e <_lv_obj_get_style_int+0xda>
  4075a0:	7902      	ldrb	r2, [r0, #4]
  4075a2:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  4075a6:	d0da      	beq.n	40755e <_lv_obj_get_style_int+0xda>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  4075a8:	f013 0f04 	tst.w	r3, #4
  4075ac:	f43f af74 	beq.w	407498 <_lv_obj_get_style_int+0x14>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  4075b0:	f424 43fe 	bic.w	r3, r4, #32512	; 0x7f00
  4075b4:	2b33      	cmp	r3, #51	; 0x33
  4075b6:	d028      	beq.n	40760a <_lv_obj_get_style_int+0x186>
  4075b8:	dc99      	bgt.n	4074ee <_lv_obj_get_style_int+0x6a>
  4075ba:	2b13      	cmp	r3, #19
  4075bc:	f73f af7d 	bgt.w	4074ba <_lv_obj_get_style_int+0x36>
  4075c0:	2b10      	cmp	r3, #16
  4075c2:	da2e      	bge.n	407622 <_lv_obj_get_style_int+0x19e>
  4075c4:	2b02      	cmp	r3, #2
  4075c6:	d00e      	beq.n	4075e6 <_lv_obj_get_style_int+0x162>
  4075c8:	f73f af6d 	bgt.w	4074a6 <_lv_obj_get_style_int+0x22>
  4075cc:	2b01      	cmp	r3, #1
  4075ce:	d1c2      	bne.n	407556 <_lv_obj_get_style_int+0xd2>
                    if(list->radius_zero) def = true;
  4075d0:	796b      	ldrb	r3, [r5, #5]
  4075d2:	f013 0f10 	tst.w	r3, #16
  4075d6:	d138      	bne.n	40764a <_lv_obj_get_style_int+0x1c6>
            bool def = false;
  4075d8:	2300      	movs	r3, #0
  4075da:	e7bd      	b.n	407558 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  4075dc:	f248 02a0 	movw	r2, #32928	; 0x80a0
  4075e0:	4293      	cmp	r3, r2
  4075e2:	d1b8      	bne.n	407556 <_lv_obj_get_style_int+0xd2>
  4075e4:	e795      	b.n	407512 <_lv_obj_get_style_int+0x8e>
                    if(list->clip_corner_off) def = true;
  4075e6:	796b      	ldrb	r3, [r5, #5]
  4075e8:	f013 0f40 	tst.w	r3, #64	; 0x40
  4075ec:	d11f      	bne.n	40762e <_lv_obj_get_style_int+0x1aa>
            bool def = false;
  4075ee:	2300      	movs	r3, #0
  4075f0:	e7b2      	b.n	407558 <_lv_obj_get_style_int+0xd4>
                    if(list->text_space_zero) def = true;
  4075f2:	79eb      	ldrb	r3, [r5, #7]
  4075f4:	f013 0f20 	tst.w	r3, #32
  4075f8:	d11b      	bne.n	407632 <_lv_obj_get_style_int+0x1ae>
            bool def = false;
  4075fa:	2300      	movs	r3, #0
  4075fc:	e7ac      	b.n	407558 <_lv_obj_get_style_int+0xd4>
                    if(list->border_side_full) def = true;
  4075fe:	79ab      	ldrb	r3, [r5, #6]
  407600:	f013 0f40 	tst.w	r3, #64	; 0x40
  407604:	d11b      	bne.n	40763e <_lv_obj_get_style_int+0x1ba>
            bool def = false;
  407606:	2300      	movs	r3, #0
  407608:	e7a6      	b.n	407558 <_lv_obj_get_style_int+0xd4>
                    if(list->border_post_off) def = true;
  40760a:	f995 3006 	ldrsb.w	r3, [r5, #6]
  40760e:	2b00      	cmp	r3, #0
  407610:	db17      	blt.n	407642 <_lv_obj_get_style_int+0x1be>
            bool def = false;
  407612:	2300      	movs	r3, #0
  407614:	e7a0      	b.n	407558 <_lv_obj_get_style_int+0xd4>
                    if(list->shadow_width_zero) def = true;
  407616:	79eb      	ldrb	r3, [r5, #7]
  407618:	f013 0f04 	tst.w	r3, #4
  40761c:	d117      	bne.n	40764e <_lv_obj_get_style_int+0x1ca>
            bool def = false;
  40761e:	2300      	movs	r3, #0
  407620:	e79a      	b.n	407558 <_lv_obj_get_style_int+0xd4>
                    if(list->pad_all_zero) def = true;
  407622:	79ab      	ldrb	r3, [r5, #6]
  407624:	f013 0f01 	tst.w	r3, #1
  407628:	d113      	bne.n	407652 <_lv_obj_get_style_int+0x1ce>
            bool def = false;
  40762a:	2300      	movs	r3, #0
  40762c:	e794      	b.n	407558 <_lv_obj_get_style_int+0xd4>
                    if(list->clip_corner_off) def = true;
  40762e:	2301      	movs	r3, #1
  407630:	e792      	b.n	407558 <_lv_obj_get_style_int+0xd4>
                    if(list->text_space_zero) def = true;
  407632:	2301      	movs	r3, #1
  407634:	e790      	b.n	407558 <_lv_obj_get_style_int+0xd4>
                    if(list->transform_all_zero) def = true;
  407636:	2301      	movs	r3, #1
  407638:	e78e      	b.n	407558 <_lv_obj_get_style_int+0xd4>
                    if(list->border_width_zero) def = true;
  40763a:	2301      	movs	r3, #1
  40763c:	e78c      	b.n	407558 <_lv_obj_get_style_int+0xd4>
                    if(list->border_side_full) def = true;
  40763e:	2301      	movs	r3, #1
  407640:	e78a      	b.n	407558 <_lv_obj_get_style_int+0xd4>
                    if(list->border_post_off) def = true;
  407642:	2301      	movs	r3, #1
  407644:	e788      	b.n	407558 <_lv_obj_get_style_int+0xd4>
                    if(list->outline_width_zero) def = true;
  407646:	2301      	movs	r3, #1
  407648:	e786      	b.n	407558 <_lv_obj_get_style_int+0xd4>
                    if(list->radius_zero) def = true;
  40764a:	2301      	movs	r3, #1
  40764c:	e784      	b.n	407558 <_lv_obj_get_style_int+0xd4>
                    if(list->shadow_width_zero) def = true;
  40764e:	2301      	movs	r3, #1
  407650:	e782      	b.n	407558 <_lv_obj_get_style_int+0xd4>
                    if(list->pad_all_zero) def = true;
  407652:	2301      	movs	r3, #1
  407654:	e780      	b.n	407558 <_lv_obj_get_style_int+0xd4>
                    if(list->margin_all_zero) def = true;
  407656:	2301      	movs	r3, #1
  407658:	e77e      	b.n	407558 <_lv_obj_get_style_int+0xd4>
                    if(list->blend_mode_all_normal) def = true;
  40765a:	2301      	movs	r3, #1
  40765c:	e77c      	b.n	407558 <_lv_obj_get_style_int+0xd4>
                    if(list->text_decor_none) def = true;
  40765e:	2301      	movs	r3, #1
  407660:	e77a      	b.n	407558 <_lv_obj_get_style_int+0xd4>
        if(res == LV_RES_OK) return value_act;
  407662:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
}
  407666:	b003      	add	sp, #12
  407668:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        parent = lv_obj_get_parent(parent);
  40766c:	4638      	mov	r0, r7
  40766e:	4b13      	ldr	r3, [pc, #76]	; (4076bc <_lv_obj_get_style_int+0x238>)
  407670:	4798      	blx	r3
  407672:	4607      	mov	r7, r0
  407674:	e789      	b.n	40758a <_lv_obj_get_style_int+0x106>
    prop = prop & (~LV_STYLE_STATE_MASK);
  407676:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
  40767a:	b2a4      	uxth	r4, r4
    switch(prop) {
  40767c:	2c22      	cmp	r4, #34	; 0x22
  40767e:	d00f      	beq.n	4076a0 <_lv_obj_get_style_int+0x21c>
  407680:	d806      	bhi.n	407690 <_lv_obj_get_style_int+0x20c>
  407682:	2c03      	cmp	r4, #3
  407684:	d010      	beq.n	4076a8 <_lv_obj_get_style_int+0x224>
  407686:	2c07      	cmp	r4, #7
  407688:	d10c      	bne.n	4076a4 <_lv_obj_get_style_int+0x220>
            return LV_IMG_ZOOM_NONE;
  40768a:	f44f 7080 	mov.w	r0, #256	; 0x100
  40768e:	e7ea      	b.n	407666 <_lv_obj_get_style_int+0x1e2>
    switch(prop) {
  407690:	2c31      	cmp	r4, #49	; 0x31
  407692:	d003      	beq.n	40769c <_lv_obj_get_style_int+0x218>
  407694:	2cc0      	cmp	r4, #192	; 0xc0
  407696:	d105      	bne.n	4076a4 <_lv_obj_get_style_int+0x220>
            return LV_DPI / 8;
  407698:	2012      	movs	r0, #18
  40769a:	e7e4      	b.n	407666 <_lv_obj_get_style_int+0x1e2>
            return LV_BORDER_SIDE_FULL;
  40769c:	200f      	movs	r0, #15
  40769e:	e7e2      	b.n	407666 <_lv_obj_get_style_int+0x1e2>
            return 255;
  4076a0:	20ff      	movs	r0, #255	; 0xff
  4076a2:	e7e0      	b.n	407666 <_lv_obj_get_style_int+0x1e2>
    return 0;
  4076a4:	2000      	movs	r0, #0
  4076a6:	e7de      	b.n	407666 <_lv_obj_get_style_int+0x1e2>
            return LV_DPI / 20;
  4076a8:	2007      	movs	r0, #7
  4076aa:	e7dc      	b.n	407666 <_lv_obj_get_style_int+0x1e2>
  4076ac:	00407009 	.word	0x00407009
  4076b0:	00406e21 	.word	0x00406e21
  4076b4:	0040af65 	.word	0x0040af65
  4076b8:	00405c4d 	.word	0x00405c4d
  4076bc:	004059ed 	.word	0x004059ed

004076c0 <lv_obj_get_width_fit>:
{
  4076c0:	b570      	push	{r4, r5, r6, lr}
  4076c2:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4076c4:	4b0e      	ldr	r3, [pc, #56]	; (407700 <lv_obj_get_width_fit+0x40>)
  4076c6:	4798      	blx	r3
  4076c8:	b928      	cbnz	r0, 4076d6 <lv_obj_get_width_fit+0x16>
  4076ca:	4622      	mov	r2, r4
  4076cc:	2300      	movs	r3, #0
  4076ce:	480d      	ldr	r0, [pc, #52]	; (407704 <lv_obj_get_width_fit+0x44>)
  4076d0:	490d      	ldr	r1, [pc, #52]	; (407708 <lv_obj_get_width_fit+0x48>)
  4076d2:	4788      	blx	r1
  4076d4:	e7fe      	b.n	4076d4 <lv_obj_get_width_fit+0x14>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  4076d6:	2212      	movs	r2, #18
  4076d8:	2100      	movs	r1, #0
  4076da:	4620      	mov	r0, r4
  4076dc:	4d0b      	ldr	r5, [pc, #44]	; (40770c <lv_obj_get_width_fit+0x4c>)
  4076de:	47a8      	blx	r5
  4076e0:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  4076e2:	2213      	movs	r2, #19
  4076e4:	2100      	movs	r1, #0
  4076e6:	4620      	mov	r0, r4
  4076e8:	47a8      	blx	r5
  4076ea:	4605      	mov	r5, r0
    return lv_obj_get_width(obj) - left - right;
  4076ec:	4620      	mov	r0, r4
  4076ee:	4b08      	ldr	r3, [pc, #32]	; (407710 <lv_obj_get_width_fit+0x50>)
  4076f0:	4798      	blx	r3
  4076f2:	b280      	uxth	r0, r0
  4076f4:	1b80      	subs	r0, r0, r6
  4076f6:	b280      	uxth	r0, r0
  4076f8:	1b40      	subs	r0, r0, r5
}
  4076fa:	b200      	sxth	r0, r0
  4076fc:	bd70      	pop	{r4, r5, r6, pc}
  4076fe:	bf00      	nop
  407700:	00415f95 	.word	0x00415f95
  407704:	0042c728 	.word	0x0042c728
  407708:	00415fa1 	.word	0x00415fa1
  40770c:	00407485 	.word	0x00407485
  407710:	00405bc1 	.word	0x00405bc1

00407714 <update_style_cache_children>:
{
  407714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407718:	4606      	mov	r6, r0
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
  40771a:	2500      	movs	r5, #0
  40771c:	e009      	b.n	407732 <update_style_cache_children+0x1e>
            list->text_space_zero = 0;
  40771e:	79e3      	ldrb	r3, [r4, #7]
  407720:	f36f 1345 	bfc	r3, #5, #1
  407724:	71e3      	strb	r3, [r4, #7]
        list->ignore_cache = ignore_cache_ori;
  407726:	7963      	ldrb	r3, [r4, #5]
  407728:	f368 03c3 	bfi	r3, r8, #3, #1
  40772c:	7163      	strb	r3, [r4, #5]
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
  40772e:	3501      	adds	r5, #1
  407730:	b2ed      	uxtb	r5, r5
  407732:	2d40      	cmp	r5, #64	; 0x40
  407734:	d058      	beq.n	4077e8 <update_style_cache_children+0xd4>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  407736:	4629      	mov	r1, r5
  407738:	4630      	mov	r0, r6
  40773a:	4b34      	ldr	r3, [pc, #208]	; (40780c <update_style_cache_children+0xf8>)
  40773c:	4798      	blx	r3
        if(list == NULL) break;
  40773e:	4604      	mov	r4, r0
  407740:	2800      	cmp	r0, #0
  407742:	d051      	beq.n	4077e8 <update_style_cache_children+0xd4>
        bool ignore_cache_ori = list->ignore_cache;
  407744:	7943      	ldrb	r3, [r0, #5]
  407746:	f3c3 08c0 	ubfx	r8, r3, #3, #1
        list->ignore_cache = 1;
  40774a:	f043 0308 	orr.w	r3, r3, #8
  40774e:	7143      	strb	r3, [r0, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  407750:	f248 020c 	movw	r2, #32780	; 0x800c
  407754:	4629      	mov	r1, r5
  407756:	4630      	mov	r0, r6
  407758:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 407820 <update_style_cache_children+0x10c>
  40775c:	47c8      	blx	r9
        list->opa_scale_cover    = lv_obj_get_style_opa_scale(obj, part) == LV_OPA_COVER ? 1 : 0;
  40775e:	28ff      	cmp	r0, #255	; 0xff
  407760:	bf14      	ite	ne
  407762:	2000      	movne	r0, #0
  407764:	2001      	moveq	r0, #1
  407766:	7963      	ldrb	r3, [r4, #5]
  407768:	f360 1345 	bfi	r3, r0, #5, #1
  40776c:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
  40776e:	f248 0282 	movw	r2, #32898	; 0x8082
  407772:	4629      	mov	r1, r5
  407774:	4630      	mov	r0, r6
  407776:	4f26      	ldr	r7, [pc, #152]	; (407810 <update_style_cache_children+0xfc>)
  407778:	47b8      	blx	r7
  40777a:	b2c0      	uxtb	r0, r0
        list->text_decor_none    = lv_obj_get_style_text_decor(obj, part) == LV_TEXT_DECOR_NONE ? 1 : 0;
  40777c:	fab0 f080 	clz	r0, r0
  407780:	0940      	lsrs	r0, r0, #5
  407782:	79e3      	ldrb	r3, [r4, #7]
  407784:	f360 1386 	bfi	r3, r0, #6, #1
  407788:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  40778a:	f248 028e 	movw	r2, #32910	; 0x808e
  40778e:	4629      	mov	r1, r5
  407790:	4630      	mov	r0, r6
  407792:	4b20      	ldr	r3, [pc, #128]	; (407814 <update_style_cache_children+0x100>)
  407794:	4798      	blx	r3
  407796:	4682      	mov	sl, r0
        list->text_font_normal    = lv_obj_get_style_text_font(obj, part) == lv_theme_get_font_normal() ? 1 : 0;
  407798:	4b1f      	ldr	r3, [pc, #124]	; (407818 <update_style_cache_children+0x104>)
  40779a:	4798      	blx	r3
  40779c:	4582      	cmp	sl, r0
  40779e:	bf14      	ite	ne
  4077a0:	2000      	movne	r0, #0
  4077a2:	2001      	moveq	r0, #1
  4077a4:	79e3      	ldrb	r3, [r4, #7]
  4077a6:	f360 13c7 	bfi	r3, r0, #7, #1
  4077aa:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
  4077ac:	f248 02ad 	movw	r2, #32941	; 0x80ad
  4077b0:	4629      	mov	r1, r5
  4077b2:	4630      	mov	r0, r6
  4077b4:	47c8      	blx	r9
        list->img_recolor_opa_transp    = lv_obj_get_style_image_recolor_opa(obj, part) == LV_OPA_TRANSP ? 1 : 0;
  4077b6:	fab0 f080 	clz	r0, r0
  4077ba:	0940      	lsrs	r0, r0, #5
  4077bc:	79e3      	ldrb	r3, [r4, #7]
  4077be:	f360 1304 	bfi	r3, r0, #4, #1
        list->text_space_zero = 1;
  4077c2:	b2db      	uxtb	r3, r3
  4077c4:	f043 0320 	orr.w	r3, r3, #32
  4077c8:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
  4077ca:	f248 0280 	movw	r2, #32896	; 0x8080
  4077ce:	4629      	mov	r1, r5
  4077d0:	4630      	mov	r0, r6
  4077d2:	47b8      	blx	r7
        if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
  4077d4:	2800      	cmp	r0, #0
  4077d6:	d1a2      	bne.n	40771e <update_style_cache_children+0xa>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  4077d8:	f248 0281 	movw	r2, #32897	; 0x8081
  4077dc:	4629      	mov	r1, r5
  4077de:	4630      	mov	r0, r6
  4077e0:	47b8      	blx	r7
  4077e2:	2800      	cmp	r0, #0
  4077e4:	d09f      	beq.n	407726 <update_style_cache_children+0x12>
  4077e6:	e79a      	b.n	40771e <update_style_cache_children+0xa>
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
  4077e8:	2100      	movs	r1, #0
  4077ea:	4630      	mov	r0, r6
  4077ec:	4b0b      	ldr	r3, [pc, #44]	; (40781c <update_style_cache_children+0x108>)
  4077ee:	4798      	blx	r3
  4077f0:	4604      	mov	r4, r0
    while(child) {
  4077f2:	e007      	b.n	407804 <update_style_cache_children+0xf0>
        update_style_cache_children(child);
  4077f4:	4620      	mov	r0, r4
  4077f6:	f7ff ff8d 	bl	407714 <update_style_cache_children>
        child = lv_obj_get_child(obj, child);
  4077fa:	4621      	mov	r1, r4
  4077fc:	4630      	mov	r0, r6
  4077fe:	4b07      	ldr	r3, [pc, #28]	; (40781c <update_style_cache_children+0x108>)
  407800:	4798      	blx	r3
  407802:	4604      	mov	r4, r0
    while(child) {
  407804:	2c00      	cmp	r4, #0
  407806:	d1f5      	bne.n	4077f4 <update_style_cache_children+0xe0>
}
  407808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40780c:	00405c4d 	.word	0x00405c4d
  407810:	00407485 	.word	0x00407485
  407814:	0040737d 	.word	0x0040737d
  407818:	0041843d 	.word	0x0041843d
  40781c:	00405ac1 	.word	0x00405ac1
  407820:	00406ef9 	.word	0x00406ef9

00407824 <invalidate_style_cache>:
{
  407824:	b538      	push	{r3, r4, r5, lr}
  407826:	4605      	mov	r5, r0
    if(style_prop_is_cacheble(prop) == false) return;
  407828:	4610      	mov	r0, r2
  40782a:	4b19      	ldr	r3, [pc, #100]	; (407890 <invalidate_style_cache+0x6c>)
  40782c:	4798      	blx	r3
  40782e:	b170      	cbz	r0, 40784e <invalidate_style_cache+0x2a>
  407830:	2400      	movs	r4, #0
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  407832:	2c3f      	cmp	r4, #63	; 0x3f
  407834:	d80c      	bhi.n	407850 <invalidate_style_cache+0x2c>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  407836:	4621      	mov	r1, r4
  407838:	4628      	mov	r0, r5
  40783a:	4b16      	ldr	r3, [pc, #88]	; (407894 <invalidate_style_cache+0x70>)
  40783c:	4798      	blx	r3
        if(list == NULL) break;
  40783e:	b138      	cbz	r0, 407850 <invalidate_style_cache+0x2c>
        list->valid_cache = 0;
  407840:	7942      	ldrb	r2, [r0, #5]
  407842:	f36f 0282 	bfc	r2, #2, #1
  407846:	7142      	strb	r2, [r0, #5]
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  407848:	3401      	adds	r4, #1
  40784a:	b2e4      	uxtb	r4, r4
  40784c:	e7f1      	b.n	407832 <invalidate_style_cache+0xe>
  40784e:	bd38      	pop	{r3, r4, r5, pc}
  407850:	2440      	movs	r4, #64	; 0x40
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
  407852:	2cff      	cmp	r4, #255	; 0xff
  407854:	d00b      	beq.n	40786e <invalidate_style_cache+0x4a>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  407856:	4621      	mov	r1, r4
  407858:	4628      	mov	r0, r5
  40785a:	4b0e      	ldr	r3, [pc, #56]	; (407894 <invalidate_style_cache+0x70>)
  40785c:	4798      	blx	r3
        if(list == NULL) break;
  40785e:	b130      	cbz	r0, 40786e <invalidate_style_cache+0x4a>
        list->valid_cache = 0;
  407860:	7942      	ldrb	r2, [r0, #5]
  407862:	f36f 0282 	bfc	r2, #2, #1
  407866:	7142      	strb	r2, [r0, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
  407868:	3401      	adds	r4, #1
  40786a:	b2e4      	uxtb	r4, r4
  40786c:	e7f1      	b.n	407852 <invalidate_style_cache+0x2e>
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
  40786e:	2100      	movs	r1, #0
  407870:	4628      	mov	r0, r5
  407872:	4b09      	ldr	r3, [pc, #36]	; (407898 <invalidate_style_cache+0x74>)
  407874:	4798      	blx	r3
  407876:	4604      	mov	r4, r0
    while(child) {
  407878:	e007      	b.n	40788a <invalidate_style_cache+0x66>
        update_style_cache_children(child);
  40787a:	4620      	mov	r0, r4
  40787c:	4b07      	ldr	r3, [pc, #28]	; (40789c <invalidate_style_cache+0x78>)
  40787e:	4798      	blx	r3
        child = lv_obj_get_child(obj, child);
  407880:	4621      	mov	r1, r4
  407882:	4628      	mov	r0, r5
  407884:	4b04      	ldr	r3, [pc, #16]	; (407898 <invalidate_style_cache+0x74>)
  407886:	4798      	blx	r3
  407888:	4604      	mov	r4, r0
    while(child) {
  40788a:	2c00      	cmp	r4, #0
  40788c:	d1f5      	bne.n	40787a <invalidate_style_cache+0x56>
  40788e:	bd38      	pop	{r3, r4, r5, pc}
  407890:	004053b5 	.word	0x004053b5
  407894:	00405c4d 	.word	0x00405c4d
  407898:	00405ac1 	.word	0x00405ac1
  40789c:	00407715 	.word	0x00407715

004078a0 <lv_obj_refresh_style>:
{
  4078a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4078a2:	4605      	mov	r5, r0
  4078a4:	460f      	mov	r7, r1
  4078a6:	4614      	mov	r4, r2
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4078a8:	4b37      	ldr	r3, [pc, #220]	; (407988 <lv_obj_refresh_style+0xe8>)
  4078aa:	4798      	blx	r3
  4078ac:	b928      	cbnz	r0, 4078ba <lv_obj_refresh_style+0x1a>
  4078ae:	462a      	mov	r2, r5
  4078b0:	2300      	movs	r3, #0
  4078b2:	4836      	ldr	r0, [pc, #216]	; (40798c <lv_obj_refresh_style+0xec>)
  4078b4:	4936      	ldr	r1, [pc, #216]	; (407990 <lv_obj_refresh_style+0xf0>)
  4078b6:	4788      	blx	r1
  4078b8:	e7fe      	b.n	4078b8 <lv_obj_refresh_style+0x18>
  4078ba:	4606      	mov	r6, r0
    invalidate_style_cache(obj, part, prop);
  4078bc:	4622      	mov	r2, r4
  4078be:	4639      	mov	r1, r7
  4078c0:	4628      	mov	r0, r5
  4078c2:	4b34      	ldr	r3, [pc, #208]	; (407994 <lv_obj_refresh_style+0xf4>)
  4078c4:	4798      	blx	r3
    switch(prop) {
  4078c6:	2c71      	cmp	r4, #113	; 0x71
  4078c8:	d83c      	bhi.n	407944 <lv_obj_refresh_style+0xa4>
  4078ca:	2c70      	cmp	r4, #112	; 0x70
  4078cc:	d20c      	bcs.n	4078e8 <lv_obj_refresh_style+0x48>
  4078ce:	2c41      	cmp	r4, #65	; 0x41
  4078d0:	d82e      	bhi.n	407930 <lv_obj_refresh_style+0x90>
  4078d2:	2c40      	cmp	r4, #64	; 0x40
  4078d4:	d208      	bcs.n	4078e8 <lv_obj_refresh_style+0x48>
  4078d6:	2c02      	cmp	r4, #2
  4078d8:	d305      	bcc.n	4078e6 <lv_obj_refresh_style+0x46>
  4078da:	2c07      	cmp	r4, #7
  4078dc:	d904      	bls.n	4078e8 <lv_obj_refresh_style+0x48>
  4078de:	f1a4 0310 	sub.w	r3, r4, #16
  4078e2:	2b08      	cmp	r3, #8
  4078e4:	d900      	bls.n	4078e8 <lv_obj_refresh_style+0x48>
            real_refr = false;
  4078e6:	2600      	movs	r6, #0
    if(real_refr) {
  4078e8:	2e00      	cmp	r6, #0
  4078ea:	d048      	beq.n	40797e <lv_obj_refresh_style+0xde>
        lv_obj_invalidate(obj);
  4078ec:	4628      	mov	r0, r5
  4078ee:	4b2a      	ldr	r3, [pc, #168]	; (407998 <lv_obj_refresh_style+0xf8>)
  4078f0:	4798      	blx	r3
        obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
  4078f2:	69eb      	ldr	r3, [r5, #28]
  4078f4:	2200      	movs	r2, #0
  4078f6:	2104      	movs	r1, #4
  4078f8:	4628      	mov	r0, r5
  4078fa:	4798      	blx	r3
        switch(prop) {
  4078fc:	2c15      	cmp	r4, #21
  4078fe:	d309      	bcc.n	407914 <lv_obj_refresh_style+0x74>
  407900:	2c18      	cmp	r4, #24
  407902:	d901      	bls.n	407908 <lv_obj_refresh_style+0x68>
  407904:	2cff      	cmp	r4, #255	; 0xff
  407906:	d105      	bne.n	407914 <lv_obj_refresh_style+0x74>
                if(obj->parent) obj->parent->signal_cb(obj->parent, LV_SIGNAL_CHILD_CHG, NULL);
  407908:	6828      	ldr	r0, [r5, #0]
  40790a:	b118      	cbz	r0, 407914 <lv_obj_refresh_style+0x74>
  40790c:	69c3      	ldr	r3, [r0, #28]
  40790e:	2200      	movs	r2, #0
  407910:	2101      	movs	r1, #1
  407912:	4798      	blx	r3
        lv_obj_invalidate(obj);
  407914:	4628      	mov	r0, r5
  407916:	4b20      	ldr	r3, [pc, #128]	; (407998 <lv_obj_refresh_style+0xf8>)
  407918:	4798      	blx	r3
        if(prop == LV_STYLE_PROP_ALL || (prop & LV_STYLE_INHERIT_MASK)) refresh_children_style(obj);
  40791a:	0be3      	lsrs	r3, r4, #15
  40791c:	2cff      	cmp	r4, #255	; 0xff
  40791e:	bf14      	ite	ne
  407920:	461c      	movne	r4, r3
  407922:	f043 0401 	orreq.w	r4, r3, #1
  407926:	b36c      	cbz	r4, 407984 <lv_obj_refresh_style+0xe4>
  407928:	4628      	mov	r0, r5
  40792a:	4b1c      	ldr	r3, [pc, #112]	; (40799c <lv_obj_refresh_style+0xfc>)
  40792c:	4798      	blx	r3
  40792e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(prop) {
  407930:	2c53      	cmp	r4, #83	; 0x53
  407932:	d804      	bhi.n	40793e <lv_obj_refresh_style+0x9e>
  407934:	2c50      	cmp	r4, #80	; 0x50
  407936:	d2d7      	bcs.n	4078e8 <lv_obj_refresh_style+0x48>
  407938:	2c4c      	cmp	r4, #76	; 0x4c
  40793a:	d1d4      	bne.n	4078e6 <lv_obj_refresh_style+0x46>
  40793c:	e7d4      	b.n	4078e8 <lv_obj_refresh_style+0x48>
  40793e:	2c5c      	cmp	r4, #92	; 0x5c
  407940:	d1d1      	bne.n	4078e6 <lv_obj_refresh_style+0x46>
  407942:	e7d1      	b.n	4078e8 <lv_obj_refresh_style+0x48>
  407944:	2c7f      	cmp	r4, #127	; 0x7f
  407946:	d90c      	bls.n	407962 <lv_obj_refresh_style+0xc2>
  407948:	f248 0381 	movw	r3, #32897	; 0x8081
  40794c:	429c      	cmp	r4, r3
  40794e:	d811      	bhi.n	407974 <lv_obj_refresh_style+0xd4>
  407950:	f248 0380 	movw	r3, #32896	; 0x8080
  407954:	429c      	cmp	r4, r3
  407956:	d2c7      	bcs.n	4078e8 <lv_obj_refresh_style+0x48>
  407958:	2c90      	cmp	r4, #144	; 0x90
  40795a:	d0c5      	beq.n	4078e8 <lv_obj_refresh_style+0x48>
  40795c:	2cff      	cmp	r4, #255	; 0xff
  40795e:	d1c2      	bne.n	4078e6 <lv_obj_refresh_style+0x46>
  407960:	e7c2      	b.n	4078e8 <lv_obj_refresh_style+0x48>
  407962:	2c7e      	cmp	r4, #126	; 0x7e
  407964:	d2c0      	bcs.n	4078e8 <lv_obj_refresh_style+0x48>
  407966:	2c73      	cmp	r4, #115	; 0x73
  407968:	d3bd      	bcc.n	4078e6 <lv_obj_refresh_style+0x46>
  40796a:	2c75      	cmp	r4, #117	; 0x75
  40796c:	d9bc      	bls.n	4078e8 <lv_obj_refresh_style+0x48>
  40796e:	2c7c      	cmp	r4, #124	; 0x7c
  407970:	d1b9      	bne.n	4078e6 <lv_obj_refresh_style+0x46>
  407972:	e7b9      	b.n	4078e8 <lv_obj_refresh_style+0x48>
  407974:	f248 038e 	movw	r3, #32910	; 0x808e
  407978:	429c      	cmp	r4, r3
  40797a:	d1b4      	bne.n	4078e6 <lv_obj_refresh_style+0x46>
  40797c:	e7b4      	b.n	4078e8 <lv_obj_refresh_style+0x48>
        lv_obj_invalidate(obj);
  40797e:	4628      	mov	r0, r5
  407980:	4b05      	ldr	r3, [pc, #20]	; (407998 <lv_obj_refresh_style+0xf8>)
  407982:	4798      	blx	r3
  407984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407986:	bf00      	nop
  407988:	00415f95 	.word	0x00415f95
  40798c:	0042c728 	.word	0x0042c728
  407990:	00415fa1 	.word	0x00415fa1
  407994:	00407825 	.word	0x00407825
  407998:	00405f99 	.word	0x00405f99
  40799c:	0040671d 	.word	0x0040671d

004079a0 <lv_obj_add_style>:
    if(style == NULL) return;
  4079a0:	b1aa      	cbz	r2, 4079ce <lv_obj_add_style+0x2e>
{
  4079a2:	b570      	push	{r4, r5, r6, lr}
  4079a4:	4616      	mov	r6, r2
  4079a6:	460d      	mov	r5, r1
  4079a8:	4604      	mov	r4, r0
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
  4079aa:	4b09      	ldr	r3, [pc, #36]	; (4079d0 <lv_obj_add_style+0x30>)
  4079ac:	4798      	blx	r3
    if(style_dsc == NULL) {
  4079ae:	b168      	cbz	r0, 4079cc <lv_obj_add_style+0x2c>
    _lv_style_list_add_style(style_dsc, style);
  4079b0:	4631      	mov	r1, r6
  4079b2:	4b08      	ldr	r3, [pc, #32]	; (4079d4 <lv_obj_add_style+0x34>)
  4079b4:	4798      	blx	r3
    trans_del(obj, part, 0xFF, NULL);
  4079b6:	2300      	movs	r3, #0
  4079b8:	22ff      	movs	r2, #255	; 0xff
  4079ba:	4629      	mov	r1, r5
  4079bc:	4620      	mov	r0, r4
  4079be:	4e06      	ldr	r6, [pc, #24]	; (4079d8 <lv_obj_add_style+0x38>)
  4079c0:	47b0      	blx	r6
    lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
  4079c2:	22ff      	movs	r2, #255	; 0xff
  4079c4:	4629      	mov	r1, r5
  4079c6:	4620      	mov	r0, r4
  4079c8:	4b04      	ldr	r3, [pc, #16]	; (4079dc <lv_obj_add_style+0x3c>)
  4079ca:	4798      	blx	r3
  4079cc:	bd70      	pop	{r4, r5, r6, pc}
  4079ce:	4770      	bx	lr
  4079d0:	00405c4d 	.word	0x00405c4d
  4079d4:	00409f65 	.word	0x00409f65
  4079d8:	00405c7d 	.word	0x00405c7d
  4079dc:	004078a1 	.word	0x004078a1

004079e0 <lv_obj_reset_style_list>:
{
  4079e0:	b538      	push	{r3, r4, r5, lr}
  4079e2:	4604      	mov	r4, r0
  4079e4:	460d      	mov	r5, r1
    lv_obj_clean_style_list(obj, part);
  4079e6:	4b04      	ldr	r3, [pc, #16]	; (4079f8 <lv_obj_reset_style_list+0x18>)
  4079e8:	4798      	blx	r3
    lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
  4079ea:	22ff      	movs	r2, #255	; 0xff
  4079ec:	4629      	mov	r1, r5
  4079ee:	4620      	mov	r0, r4
  4079f0:	4b02      	ldr	r3, [pc, #8]	; (4079fc <lv_obj_reset_style_list+0x1c>)
  4079f2:	4798      	blx	r3
  4079f4:	bd38      	pop	{r3, r4, r5, pc}
  4079f6:	bf00      	nop
  4079f8:	00405d15 	.word	0x00405d15
  4079fc:	004078a1 	.word	0x004078a1

00407a00 <_lv_obj_set_style_local_int>:
{
  407a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407a02:	4605      	mov	r5, r0
  407a04:	460e      	mov	r6, r1
  407a06:	4614      	mov	r4, r2
  407a08:	461f      	mov	r7, r3
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
  407a0a:	4b09      	ldr	r3, [pc, #36]	; (407a30 <_lv_obj_set_style_local_int+0x30>)
  407a0c:	4798      	blx	r3
    _lv_style_list_set_local_int(style_dsc, prop, value);
  407a0e:	463a      	mov	r2, r7
  407a10:	4621      	mov	r1, r4
  407a12:	4b08      	ldr	r3, [pc, #32]	; (407a34 <_lv_obj_set_style_local_int+0x34>)
  407a14:	4798      	blx	r3
    trans_del(obj, part, prop, NULL);
  407a16:	2300      	movs	r3, #0
  407a18:	4622      	mov	r2, r4
  407a1a:	4631      	mov	r1, r6
  407a1c:	4628      	mov	r0, r5
  407a1e:	4f06      	ldr	r7, [pc, #24]	; (407a38 <_lv_obj_set_style_local_int+0x38>)
  407a20:	47b8      	blx	r7
    lv_obj_refresh_style(obj, part, prop & (~LV_STYLE_STATE_MASK));
  407a22:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
  407a26:	4631      	mov	r1, r6
  407a28:	4628      	mov	r0, r5
  407a2a:	4b04      	ldr	r3, [pc, #16]	; (407a3c <_lv_obj_set_style_local_int+0x3c>)
  407a2c:	4798      	blx	r3
  407a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407a30:	00405c4d 	.word	0x00405c4d
  407a34:	0040aef5 	.word	0x0040aef5
  407a38:	00405c7d 	.word	0x00405c7d
  407a3c:	004078a1 	.word	0x004078a1

00407a40 <_lv_obj_set_style_local_color>:
{
  407a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407a42:	4605      	mov	r5, r0
  407a44:	460e      	mov	r6, r1
  407a46:	4614      	mov	r4, r2
  407a48:	461f      	mov	r7, r3
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
  407a4a:	4b09      	ldr	r3, [pc, #36]	; (407a70 <_lv_obj_set_style_local_color+0x30>)
  407a4c:	4798      	blx	r3
    _lv_style_list_set_local_color(style_dsc, prop, color);
  407a4e:	463a      	mov	r2, r7
  407a50:	4621      	mov	r1, r4
  407a52:	4b08      	ldr	r3, [pc, #32]	; (407a74 <_lv_obj_set_style_local_color+0x34>)
  407a54:	4798      	blx	r3
    trans_del(obj, part, prop, NULL);
  407a56:	2300      	movs	r3, #0
  407a58:	4622      	mov	r2, r4
  407a5a:	4631      	mov	r1, r6
  407a5c:	4628      	mov	r0, r5
  407a5e:	4f06      	ldr	r7, [pc, #24]	; (407a78 <_lv_obj_set_style_local_color+0x38>)
  407a60:	47b8      	blx	r7
    lv_obj_refresh_style(obj, part, prop & (~LV_STYLE_STATE_MASK));
  407a62:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
  407a66:	4631      	mov	r1, r6
  407a68:	4628      	mov	r0, r5
  407a6a:	4b04      	ldr	r3, [pc, #16]	; (407a7c <_lv_obj_set_style_local_color+0x3c>)
  407a6c:	4798      	blx	r3
  407a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407a70:	00405c4d 	.word	0x00405c4d
  407a74:	0040af2d 	.word	0x0040af2d
  407a78:	00405c7d 	.word	0x00405c7d
  407a7c:	004078a1 	.word	0x004078a1

00407a80 <_lv_obj_set_style_local_opa>:
{
  407a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407a82:	4605      	mov	r5, r0
  407a84:	460e      	mov	r6, r1
  407a86:	4614      	mov	r4, r2
  407a88:	461f      	mov	r7, r3
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
  407a8a:	4b09      	ldr	r3, [pc, #36]	; (407ab0 <_lv_obj_set_style_local_opa+0x30>)
  407a8c:	4798      	blx	r3
    _lv_style_list_set_local_opa(style_dsc, prop, opa);
  407a8e:	463a      	mov	r2, r7
  407a90:	4621      	mov	r1, r4
  407a92:	4b08      	ldr	r3, [pc, #32]	; (407ab4 <_lv_obj_set_style_local_opa+0x34>)
  407a94:	4798      	blx	r3
    trans_del(obj, part, prop, NULL);
  407a96:	2300      	movs	r3, #0
  407a98:	4622      	mov	r2, r4
  407a9a:	4631      	mov	r1, r6
  407a9c:	4628      	mov	r0, r5
  407a9e:	4f06      	ldr	r7, [pc, #24]	; (407ab8 <_lv_obj_set_style_local_opa+0x38>)
  407aa0:	47b8      	blx	r7
    lv_obj_refresh_style(obj, part, prop & (~LV_STYLE_STATE_MASK));
  407aa2:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
  407aa6:	4631      	mov	r1, r6
  407aa8:	4628      	mov	r0, r5
  407aaa:	4b04      	ldr	r3, [pc, #16]	; (407abc <_lv_obj_set_style_local_opa+0x3c>)
  407aac:	4798      	blx	r3
  407aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407ab0:	00405c4d 	.word	0x00405c4d
  407ab4:	0040af11 	.word	0x0040af11
  407ab8:	00405c7d 	.word	0x00405c7d
  407abc:	004078a1 	.word	0x004078a1

00407ac0 <_lv_obj_set_style_local_ptr>:
{
  407ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407ac2:	4605      	mov	r5, r0
  407ac4:	460e      	mov	r6, r1
  407ac6:	4614      	mov	r4, r2
  407ac8:	461f      	mov	r7, r3
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
  407aca:	4b09      	ldr	r3, [pc, #36]	; (407af0 <_lv_obj_set_style_local_ptr+0x30>)
  407acc:	4798      	blx	r3
    _lv_style_list_set_local_ptr(style_dsc, prop, value);
  407ace:	463a      	mov	r2, r7
  407ad0:	4621      	mov	r1, r4
  407ad2:	4b08      	ldr	r3, [pc, #32]	; (407af4 <_lv_obj_set_style_local_ptr+0x34>)
  407ad4:	4798      	blx	r3
    trans_del(obj, part, prop, NULL);
  407ad6:	2300      	movs	r3, #0
  407ad8:	4622      	mov	r2, r4
  407ada:	4631      	mov	r1, r6
  407adc:	4628      	mov	r0, r5
  407ade:	4f06      	ldr	r7, [pc, #24]	; (407af8 <_lv_obj_set_style_local_ptr+0x38>)
  407ae0:	47b8      	blx	r7
    lv_obj_refresh_style(obj, part, prop & (~LV_STYLE_STATE_MASK));
  407ae2:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
  407ae6:	4631      	mov	r1, r6
  407ae8:	4628      	mov	r0, r5
  407aea:	4b04      	ldr	r3, [pc, #16]	; (407afc <_lv_obj_set_style_local_ptr+0x3c>)
  407aec:	4798      	blx	r3
  407aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407af0:	00405c4d 	.word	0x00405c4d
  407af4:	0040af49 	.word	0x0040af49
  407af8:	00405c7d 	.word	0x00405c7d
  407afc:	004078a1 	.word	0x004078a1

00407b00 <report_style_mod_core>:
{
  407b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407b02:	4604      	mov	r4, r0
  407b04:	460e      	mov	r6, r1
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
  407b06:	2500      	movs	r5, #0
  407b08:	e028      	b.n	407b5c <report_style_mod_core+0x5c>
 */
void _lv_style_list_reset(lv_style_list_t * style_list);

static inline lv_style_t * lv_style_list_get_style(lv_style_list_t * list, uint8_t id)
{
    if(list->has_trans && list->skip_trans) id++;
  407b0a:	1c59      	adds	r1, r3, #1
  407b0c:	b2c9      	uxtb	r1, r1
  407b0e:	e012      	b.n	407b36 <report_style_mod_core+0x36>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  407b10:	2200      	movs	r2, #0
            if(_class == style || style == NULL) {
  407b12:	2c00      	cmp	r4, #0
  407b14:	bf18      	it	ne
  407b16:	4294      	cmpne	r4, r2
  407b18:	d019      	beq.n	407b4e <report_style_mod_core+0x4e>
        for(ci = 0; ci < list->style_cnt; ci++) {
  407b1a:	3301      	adds	r3, #1
  407b1c:	b2db      	uxtb	r3, r3
  407b1e:	793a      	ldrb	r2, [r7, #4]
  407b20:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  407b24:	4293      	cmp	r3, r2
  407b26:	da17      	bge.n	407b58 <report_style_mod_core+0x58>
    if(list->has_trans && list->skip_trans) id++;
  407b28:	88b9      	ldrh	r1, [r7, #4]
  407b2a:	f401 71c0 	and.w	r1, r1, #384	; 0x180
  407b2e:	f5b1 7fc0 	cmp.w	r1, #384	; 0x180
  407b32:	d0ea      	beq.n	407b0a <report_style_mod_core+0xa>
  407b34:	4619      	mov	r1, r3
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  407b36:	7938      	ldrb	r0, [r7, #4]
  407b38:	f010 0f3f 	tst.w	r0, #63	; 0x3f
  407b3c:	d0e8      	beq.n	407b10 <report_style_mod_core+0x10>
  407b3e:	428a      	cmp	r2, r1
  407b40:	dd03      	ble.n	407b4a <report_style_mod_core+0x4a>
    return list->style_list[id];
  407b42:	683a      	ldr	r2, [r7, #0]
  407b44:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  407b48:	e7e3      	b.n	407b12 <report_style_mod_core+0x12>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  407b4a:	2200      	movs	r2, #0
  407b4c:	e7e1      	b.n	407b12 <report_style_mod_core+0x12>
                lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
  407b4e:	22ff      	movs	r2, #255	; 0xff
  407b50:	4629      	mov	r1, r5
  407b52:	4630      	mov	r0, r6
  407b54:	4b0f      	ldr	r3, [pc, #60]	; (407b94 <report_style_mod_core+0x94>)
  407b56:	4798      	blx	r3
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
  407b58:	3501      	adds	r5, #1
  407b5a:	b2ed      	uxtb	r5, r5
  407b5c:	2d40      	cmp	r5, #64	; 0x40
  407b5e:	d007      	beq.n	407b70 <report_style_mod_core+0x70>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  407b60:	4629      	mov	r1, r5
  407b62:	4630      	mov	r0, r6
  407b64:	4b0c      	ldr	r3, [pc, #48]	; (407b98 <report_style_mod_core+0x98>)
  407b66:	4798      	blx	r3
        if(list == NULL) break;
  407b68:	4607      	mov	r7, r0
  407b6a:	b108      	cbz	r0, 407b70 <report_style_mod_core+0x70>
  407b6c:	2300      	movs	r3, #0
  407b6e:	e7d6      	b.n	407b1e <report_style_mod_core+0x1e>
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
  407b70:	2100      	movs	r1, #0
  407b72:	4630      	mov	r0, r6
  407b74:	4b09      	ldr	r3, [pc, #36]	; (407b9c <report_style_mod_core+0x9c>)
  407b76:	4798      	blx	r3
  407b78:	4605      	mov	r5, r0
    while(child) {
  407b7a:	e008      	b.n	407b8e <report_style_mod_core+0x8e>
        report_style_mod_core(style, child);
  407b7c:	4629      	mov	r1, r5
  407b7e:	4620      	mov	r0, r4
  407b80:	f7ff ffbe 	bl	407b00 <report_style_mod_core>
        child = lv_obj_get_child(obj, child);
  407b84:	4629      	mov	r1, r5
  407b86:	4630      	mov	r0, r6
  407b88:	4b04      	ldr	r3, [pc, #16]	; (407b9c <report_style_mod_core+0x9c>)
  407b8a:	4798      	blx	r3
  407b8c:	4605      	mov	r5, r0
    while(child) {
  407b8e:	2d00      	cmp	r5, #0
  407b90:	d1f4      	bne.n	407b7c <report_style_mod_core+0x7c>
}
  407b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407b94:	004078a1 	.word	0x004078a1
  407b98:	00405c4d 	.word	0x00405c4d
  407b9c:	00405ac1 	.word	0x00405ac1

00407ba0 <lv_obj_report_style_mod>:
{
  407ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407ba2:	4606      	mov	r6, r0
    lv_disp_t * d = lv_disp_get_next(NULL);
  407ba4:	2000      	movs	r0, #0
  407ba6:	4b0e      	ldr	r3, [pc, #56]	; (407be0 <lv_obj_report_style_mod+0x40>)
  407ba8:	4798      	blx	r3
  407baa:	4607      	mov	r7, r0
    while(d) {
  407bac:	e00e      	b.n	407bcc <lv_obj_report_style_mod+0x2c>
            report_style_mod_core(style, i);
  407bae:	4621      	mov	r1, r4
  407bb0:	4630      	mov	r0, r6
  407bb2:	4b0c      	ldr	r3, [pc, #48]	; (407be4 <lv_obj_report_style_mod+0x44>)
  407bb4:	4798      	blx	r3
        _LV_LL_READ(d->scr_ll, i) {
  407bb6:	4621      	mov	r1, r4
  407bb8:	4628      	mov	r0, r5
  407bba:	4b0b      	ldr	r3, [pc, #44]	; (407be8 <lv_obj_report_style_mod+0x48>)
  407bbc:	4798      	blx	r3
  407bbe:	4604      	mov	r4, r0
  407bc0:	2c00      	cmp	r4, #0
  407bc2:	d1f4      	bne.n	407bae <lv_obj_report_style_mod+0xe>
        d = lv_disp_get_next(d);
  407bc4:	4638      	mov	r0, r7
  407bc6:	4b06      	ldr	r3, [pc, #24]	; (407be0 <lv_obj_report_style_mod+0x40>)
  407bc8:	4798      	blx	r3
  407bca:	4607      	mov	r7, r0
    while(d) {
  407bcc:	b137      	cbz	r7, 407bdc <lv_obj_report_style_mod+0x3c>
        _LV_LL_READ(d->scr_ll, i) {
  407bce:	f107 0538 	add.w	r5, r7, #56	; 0x38
  407bd2:	4628      	mov	r0, r5
  407bd4:	4b05      	ldr	r3, [pc, #20]	; (407bec <lv_obj_report_style_mod+0x4c>)
  407bd6:	4798      	blx	r3
  407bd8:	4604      	mov	r4, r0
  407bda:	e7f1      	b.n	407bc0 <lv_obj_report_style_mod+0x20>
}
  407bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407bde:	bf00      	nop
  407be0:	00414e81 	.word	0x00414e81
  407be4:	00407b01 	.word	0x00407b01
  407be8:	004162b9 	.word	0x004162b9
  407bec:	004162a5 	.word	0x004162a5

00407bf0 <trans_anim_cb>:
{
  407bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407bf4:	4604      	mov	r4, r0
  407bf6:	460d      	mov	r5, r1
    lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
  407bf8:	7981      	ldrb	r1, [r0, #6]
  407bfa:	6800      	ldr	r0, [r0, #0]
  407bfc:	4b4b      	ldr	r3, [pc, #300]	; (407d2c <trans_anim_cb+0x13c>)
  407bfe:	4798      	blx	r3
    lv_style_t * style = _lv_style_list_get_transition_style(list);
  407c00:	4b4b      	ldr	r3, [pc, #300]	; (407d30 <trans_anim_cb+0x140>)
  407c02:	4798      	blx	r3
    if((tr->prop & 0xF) < LV_STYLE_ID_COLOR) { /*Value*/
  407c04:	88a1      	ldrh	r1, [r4, #4]
  407c06:	f001 030f 	and.w	r3, r1, #15
  407c0a:	2b08      	cmp	r3, #8
  407c0c:	dc1c      	bgt.n	407c48 <trans_anim_cb+0x58>
        if(v == 0) x = tr->start_value._int;
  407c0e:	b955      	cbnz	r5, 407c26 <trans_anim_cb+0x36>
  407c10:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
        _lv_style_set_int(style, tr->prop, x);
  407c14:	4b47      	ldr	r3, [pc, #284]	; (407d34 <trans_anim_cb+0x144>)
  407c16:	4798      	blx	r3
    lv_obj_refresh_style(tr->obj, tr->part, tr->prop);
  407c18:	88a2      	ldrh	r2, [r4, #4]
  407c1a:	79a1      	ldrb	r1, [r4, #6]
  407c1c:	6820      	ldr	r0, [r4, #0]
  407c1e:	4b46      	ldr	r3, [pc, #280]	; (407d38 <trans_anim_cb+0x148>)
  407c20:	4798      	blx	r3
  407c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        else if(v == 255) x = tr->end_value._int;
  407c26:	2dff      	cmp	r5, #255	; 0xff
  407c28:	d00b      	beq.n	407c42 <trans_anim_cb+0x52>
        else x = tr->start_value._int + ((int32_t)((int32_t)(tr->end_value._int - tr->start_value._int) * v) >> 8);
  407c2a:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
  407c2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407c32:	1a9b      	subs	r3, r3, r2
  407c34:	fb03 f505 	mul.w	r5, r3, r5
  407c38:	122d      	asrs	r5, r5, #8
  407c3a:	fa15 f282 	uxtah	r2, r5, r2
  407c3e:	b212      	sxth	r2, r2
  407c40:	e7e8      	b.n	407c14 <trans_anim_cb+0x24>
        else if(v == 255) x = tr->end_value._int;
  407c42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407c46:	e7e5      	b.n	407c14 <trans_anim_cb+0x24>
    else if((tr->prop & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
  407c48:	2b0b      	cmp	r3, #11
  407c4a:	dc50      	bgt.n	407cee <trans_anim_cb+0xfe>
        if(v <= 0) x = tr->start_value._color;
  407c4c:	2d00      	cmp	r5, #0
  407c4e:	dd05      	ble.n	407c5c <trans_anim_cb+0x6c>
        else if(v >= 255) x = tr->end_value._color;
  407c50:	2dfe      	cmp	r5, #254	; 0xfe
  407c52:	dd05      	ble.n	407c60 <trans_anim_cb+0x70>
  407c54:	89a2      	ldrh	r2, [r4, #12]
        _lv_style_set_color(style, tr->prop, x);
  407c56:	4b39      	ldr	r3, [pc, #228]	; (407d3c <trans_anim_cb+0x14c>)
  407c58:	4798      	blx	r3
  407c5a:	e7dd      	b.n	407c18 <trans_anim_cb+0x28>
        if(v <= 0) x = tr->start_value._color;
  407c5c:	8922      	ldrh	r2, [r4, #8]
  407c5e:	e7fa      	b.n	407c56 <trans_anim_cb+0x66>
        else x = lv_color_mix(tr->end_value._color, tr->start_value._color, v);
  407c60:	b2ed      	uxtb	r5, r5
  407c62:	89a7      	ldrh	r7, [r4, #12]
  407c64:	8926      	ldrh	r6, [r4, #8]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  407c66:	f3c7 03c4 	ubfx	r3, r7, #3, #5
  407c6a:	f3c6 02c4 	ubfx	r2, r6, #3, #5
  407c6e:	f1c5 0eff 	rsb	lr, r5, #255	; 0xff
  407c72:	fb0e f202 	mul.w	r2, lr, r2
  407c76:	fb05 2303 	mla	r3, r5, r3, r2
  407c7a:	3380      	adds	r3, #128	; 0x80
  407c7c:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  407c80:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  407c84:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  407c88:	f04f 0200 	mov.w	r2, #0
  407c8c:	f363 02c7 	bfi	r2, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  407c90:	f007 0c07 	and.w	ip, r7, #7
  407c94:	f3c7 3342 	ubfx	r3, r7, #13, #3
  407c98:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
  407c9c:	f006 0807 	and.w	r8, r6, #7
  407ca0:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  407ca4:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
  407ca8:	fb0c fc0e 	mul.w	ip, ip, lr
  407cac:	fb03 c305 	mla	r3, r3, r5, ip
  407cb0:	3380      	adds	r3, #128	; 0x80
  407cb2:	eb03 2c03 	add.w	ip, r3, r3, lsl #8
  407cb6:	eb03 13cc 	add.w	r3, r3, ip, lsl #7
  407cba:	f3c3 6c82 	ubfx	ip, r3, #26, #3
  407cbe:	f36c 0202 	bfi	r2, ip, #0, #3
  407cc2:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  407cc6:	f363 324f 	bfi	r2, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  407cca:	f3c7 2704 	ubfx	r7, r7, #8, #5
  407cce:	f3c6 2604 	ubfx	r6, r6, #8, #5
  407cd2:	fb06 fe0e 	mul.w	lr, r6, lr
  407cd6:	fb07 e505 	mla	r5, r7, r5, lr
  407cda:	3580      	adds	r5, #128	; 0x80
  407cdc:	eb05 2305 	add.w	r3, r5, r5, lsl #8
  407ce0:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
  407ce4:	f3c5 55c4 	ubfx	r5, r5, #23, #5
  407ce8:	f365 220c 	bfi	r2, r5, #8, #5
  407cec:	e7b3      	b.n	407c56 <trans_anim_cb+0x66>
    else if((tr->prop & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
  407cee:	2b0d      	cmp	r3, #13
  407cf0:	dc13      	bgt.n	407d1a <trans_anim_cb+0x12a>
        if(v <= 0) x = tr->start_value._opa;
  407cf2:	2d00      	cmp	r5, #0
  407cf4:	dd05      	ble.n	407d02 <trans_anim_cb+0x112>
        else if(v >= 255) x = tr->end_value._opa;
  407cf6:	2dfe      	cmp	r5, #254	; 0xfe
  407cf8:	dd05      	ble.n	407d06 <trans_anim_cb+0x116>
  407cfa:	7b22      	ldrb	r2, [r4, #12]
        _lv_style_set_opa(style, tr->prop, x);
  407cfc:	4b10      	ldr	r3, [pc, #64]	; (407d40 <trans_anim_cb+0x150>)
  407cfe:	4798      	blx	r3
  407d00:	e78a      	b.n	407c18 <trans_anim_cb+0x28>
        if(v <= 0) x = tr->start_value._opa;
  407d02:	7a22      	ldrb	r2, [r4, #8]
  407d04:	e7fa      	b.n	407cfc <trans_anim_cb+0x10c>
        else x = tr->start_value._opa + (((tr->end_value._opa - tr->start_value._opa) * v) >> 8);
  407d06:	7a22      	ldrb	r2, [r4, #8]
  407d08:	7b23      	ldrb	r3, [r4, #12]
  407d0a:	1a9b      	subs	r3, r3, r2
  407d0c:	fb03 f505 	mul.w	r5, r3, r5
  407d10:	f3c5 2507 	ubfx	r5, r5, #8, #8
  407d14:	442a      	add	r2, r5
  407d16:	b2d2      	uxtb	r2, r2
  407d18:	e7f0      	b.n	407cfc <trans_anim_cb+0x10c>
        if(v < 128) x = tr->start_value._ptr;
  407d1a:	2d7f      	cmp	r5, #127	; 0x7f
  407d1c:	dc03      	bgt.n	407d26 <trans_anim_cb+0x136>
  407d1e:	68a2      	ldr	r2, [r4, #8]
        _lv_style_set_ptr(style, tr->prop, x);
  407d20:	4b08      	ldr	r3, [pc, #32]	; (407d44 <trans_anim_cb+0x154>)
  407d22:	4798      	blx	r3
  407d24:	e778      	b.n	407c18 <trans_anim_cb+0x28>
        else x = tr->end_value._ptr;
  407d26:	68e2      	ldr	r2, [r4, #12]
  407d28:	e7fa      	b.n	407d20 <trans_anim_cb+0x130>
  407d2a:	bf00      	nop
  407d2c:	00405c4d 	.word	0x00405c4d
  407d30:	0040acdd 	.word	0x0040acdd
  407d34:	0040a269 	.word	0x0040a269
  407d38:	004078a1 	.word	0x004078a1
  407d3c:	0040a3f9 	.word	0x0040a3f9
  407d40:	0040a589 	.word	0x0040a589
  407d44:	0040a719 	.word	0x0040a719

00407d48 <trans_anim_start_cb>:
{
  407d48:	b570      	push	{r4, r5, r6, lr}
    lv_style_trans_t * tr = a->var;
  407d4a:	6804      	ldr	r4, [r0, #0]
    lv_style_property_t prop_tmp = tr->prop;
  407d4c:	88a5      	ldrh	r5, [r4, #4]
    if((prop_tmp & 0xF) < LV_STYLE_ID_COLOR) { /*Int*/
  407d4e:	f005 030f 	and.w	r3, r5, #15
  407d52:	2b08      	cmp	r3, #8
  407d54:	dd13      	ble.n	407d7e <trans_anim_start_cb+0x36>
    else if((prop_tmp & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
  407d56:	2b0b      	cmp	r3, #11
  407d58:	dd18      	ble.n	407d8c <trans_anim_start_cb+0x44>
    else if((prop_tmp & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
  407d5a:	2b0d      	cmp	r3, #13
  407d5c:	dd1d      	ble.n	407d9a <trans_anim_start_cb+0x52>
        tr->start_value._ptr = _lv_obj_get_style_ptr(tr->obj, tr->part, prop_tmp);
  407d5e:	462a      	mov	r2, r5
  407d60:	79a1      	ldrb	r1, [r4, #6]
  407d62:	6820      	ldr	r0, [r4, #0]
  407d64:	4b10      	ldr	r3, [pc, #64]	; (407da8 <trans_anim_start_cb+0x60>)
  407d66:	4798      	blx	r3
  407d68:	60a0      	str	r0, [r4, #8]
    tr->prop = 0;
  407d6a:	2300      	movs	r3, #0
  407d6c:	80a3      	strh	r3, [r4, #4]
    trans_del(tr->obj, tr->part, prop_tmp, tr);
  407d6e:	4623      	mov	r3, r4
  407d70:	462a      	mov	r2, r5
  407d72:	79a1      	ldrb	r1, [r4, #6]
  407d74:	6820      	ldr	r0, [r4, #0]
  407d76:	4e0d      	ldr	r6, [pc, #52]	; (407dac <trans_anim_start_cb+0x64>)
  407d78:	47b0      	blx	r6
    tr->prop = prop_tmp;
  407d7a:	80a5      	strh	r5, [r4, #4]
  407d7c:	bd70      	pop	{r4, r5, r6, pc}
        tr->start_value._int = _lv_obj_get_style_int(tr->obj, tr->part, prop_tmp);
  407d7e:	462a      	mov	r2, r5
  407d80:	79a1      	ldrb	r1, [r4, #6]
  407d82:	6820      	ldr	r0, [r4, #0]
  407d84:	4b0a      	ldr	r3, [pc, #40]	; (407db0 <trans_anim_start_cb+0x68>)
  407d86:	4798      	blx	r3
  407d88:	8120      	strh	r0, [r4, #8]
  407d8a:	e7ee      	b.n	407d6a <trans_anim_start_cb+0x22>
        tr->start_value._color = _lv_obj_get_style_color(tr->obj, tr->part, prop_tmp);
  407d8c:	462a      	mov	r2, r5
  407d8e:	79a1      	ldrb	r1, [r4, #6]
  407d90:	6820      	ldr	r0, [r4, #0]
  407d92:	4b08      	ldr	r3, [pc, #32]	; (407db4 <trans_anim_start_cb+0x6c>)
  407d94:	4798      	blx	r3
  407d96:	8120      	strh	r0, [r4, #8]
  407d98:	e7e7      	b.n	407d6a <trans_anim_start_cb+0x22>
        tr->start_value._opa = _lv_obj_get_style_opa(tr->obj, tr->part, prop_tmp);
  407d9a:	462a      	mov	r2, r5
  407d9c:	79a1      	ldrb	r1, [r4, #6]
  407d9e:	6820      	ldr	r0, [r4, #0]
  407da0:	4b05      	ldr	r3, [pc, #20]	; (407db8 <trans_anim_start_cb+0x70>)
  407da2:	4798      	blx	r3
  407da4:	7220      	strb	r0, [r4, #8]
  407da6:	e7e0      	b.n	407d6a <trans_anim_start_cb+0x22>
  407da8:	0040737d 	.word	0x0040737d
  407dac:	00405c7d 	.word	0x00405c7d
  407db0:	00407485 	.word	0x00407485
  407db4:	00406e71 	.word	0x00406e71
  407db8:	00406ef9 	.word	0x00406ef9

00407dbc <trans_create>:
{
  407dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407dc0:	b085      	sub	sp, #20
  407dc2:	4604      	mov	r4, r0
  407dc4:	460d      	mov	r5, r1
  407dc6:	4617      	mov	r7, r2
  407dc8:	4699      	mov	r9, r3
  407dca:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
    lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
  407dce:	4611      	mov	r1, r2
  407dd0:	4bab      	ldr	r3, [pc, #684]	; (408080 <trans_create+0x2c4>)
  407dd2:	4798      	blx	r3
  407dd4:	4606      	mov	r6, r0
    lv_style_t * style_trans = _lv_style_list_get_transition_style(style_list);
  407dd6:	4bab      	ldr	r3, [pc, #684]	; (408084 <trans_create+0x2c8>)
  407dd8:	4798      	blx	r3
  407dda:	9000      	str	r0, [sp, #0]
    bool cache_ori = style_list->ignore_cache;
  407ddc:	f896 a005 	ldrb.w	sl, [r6, #5]
  407de0:	f3ca 0ac0 	ubfx	sl, sl, #3, #1
    if((prop & 0xF) < LV_STYLE_ID_COLOR) { /*Int*/
  407de4:	f005 030f 	and.w	r3, r5, #15
  407de8:	2b08      	cmp	r3, #8
  407dea:	dd41      	ble.n	407e70 <trans_create+0xb4>
    else if((prop & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
  407dec:	2b0b      	cmp	r3, #11
  407dee:	f340 80b2 	ble.w	407f56 <trans_create+0x19a>
    else if((prop & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
  407df2:	2b0d      	cmp	r3, #13
  407df4:	f300 80fb 	bgt.w	407fee <trans_create+0x232>
        style_list->skip_trans = 1;
  407df8:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = 1;
  407dfa:	f043 0309 	orr.w	r3, r3, #9
  407dfe:	7173      	strb	r3, [r6, #5]
        obj->state = prev_state;
  407e00:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        lv_opa_t o1 = _lv_obj_get_style_opa(obj, part, prop);
  407e04:	462a      	mov	r2, r5
  407e06:	4639      	mov	r1, r7
  407e08:	4620      	mov	r0, r4
  407e0a:	f8df b27c 	ldr.w	fp, [pc, #636]	; 408088 <trans_create+0x2cc>
  407e0e:	47d8      	blx	fp
  407e10:	9001      	str	r0, [sp, #4]
        obj->state = new_state;
  407e12:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        lv_opa_t o2 =  _lv_obj_get_style_opa(obj, part, prop);
  407e16:	462a      	mov	r2, r5
  407e18:	4639      	mov	r1, r7
  407e1a:	4620      	mov	r0, r4
  407e1c:	47d8      	blx	fp
  407e1e:	4683      	mov	fp, r0
        style_list->skip_trans = 0;
  407e20:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = cache_ori;
  407e22:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  407e26:	f36a 03c3 	bfi	r3, sl, #3, #1
  407e2a:	7173      	strb	r3, [r6, #5]
        if(o1 == o2) return NULL;
  407e2c:	9b01      	ldr	r3, [sp, #4]
  407e2e:	4283      	cmp	r3, r0
  407e30:	f000 8123 	beq.w	40807a <trans_create+0x2be>
        obj->state = prev_state;
  407e34:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        o1 = _lv_obj_get_style_opa(obj, part, prop);
  407e38:	462a      	mov	r2, r5
  407e3a:	4639      	mov	r1, r7
  407e3c:	4620      	mov	r0, r4
  407e3e:	4b92      	ldr	r3, [pc, #584]	; (408088 <trans_create+0x2cc>)
  407e40:	4798      	blx	r3
  407e42:	4606      	mov	r6, r0
        obj->state = new_state;
  407e44:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        _lv_style_set_opa(style_trans, prop, o1);   /*Be sure `trans_style` has a valid value */
  407e48:	4602      	mov	r2, r0
  407e4a:	4629      	mov	r1, r5
  407e4c:	9800      	ldr	r0, [sp, #0]
  407e4e:	4b8f      	ldr	r3, [pc, #572]	; (40808c <trans_create+0x2d0>)
  407e50:	4798      	blx	r3
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
  407e52:	488f      	ldr	r0, [pc, #572]	; (408090 <trans_create+0x2d4>)
  407e54:	4b8f      	ldr	r3, [pc, #572]	; (408094 <trans_create+0x2d8>)
  407e56:	4798      	blx	r3
  407e58:	4604      	mov	r4, r0
        LV_ASSERT_MEM(tr);
  407e5a:	4b8f      	ldr	r3, [pc, #572]	; (408098 <trans_create+0x2dc>)
  407e5c:	4798      	blx	r3
  407e5e:	2800      	cmp	r0, #0
  407e60:	f000 80bf 	beq.w	407fe2 <trans_create+0x226>
        if(tr == NULL) return NULL;
  407e64:	2c00      	cmp	r4, #0
  407e66:	d03d      	beq.n	407ee4 <trans_create+0x128>
        tr->start_value._opa = o1;
  407e68:	7226      	strb	r6, [r4, #8]
        tr->end_value._opa = o2;
  407e6a:	f884 b00c 	strb.w	fp, [r4, #12]
  407e6e:	e039      	b.n	407ee4 <trans_create+0x128>
        style_list->skip_trans = 1;
  407e70:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = 1;
  407e72:	f043 0309 	orr.w	r3, r3, #9
  407e76:	7173      	strb	r3, [r6, #5]
        obj->state = prev_state;
  407e78:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        lv_style_int_t int1 = _lv_obj_get_style_int(obj, part, prop);
  407e7c:	462a      	mov	r2, r5
  407e7e:	4639      	mov	r1, r7
  407e80:	4620      	mov	r0, r4
  407e82:	f8df b218 	ldr.w	fp, [pc, #536]	; 40809c <trans_create+0x2e0>
  407e86:	47d8      	blx	fp
  407e88:	9001      	str	r0, [sp, #4]
        obj->state = new_state;
  407e8a:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        lv_style_int_t int2 =  _lv_obj_get_style_int(obj, part, prop);
  407e8e:	462a      	mov	r2, r5
  407e90:	4639      	mov	r1, r7
  407e92:	4620      	mov	r0, r4
  407e94:	47d8      	blx	fp
  407e96:	4683      	mov	fp, r0
        style_list->skip_trans = 0;
  407e98:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = cache_ori;
  407e9a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  407e9e:	f36a 03c3 	bfi	r3, sl, #3, #1
  407ea2:	7173      	strb	r3, [r6, #5]
        if(int1 == int2)  return NULL;
  407ea4:	9b01      	ldr	r3, [sp, #4]
  407ea6:	4283      	cmp	r3, r0
  407ea8:	f000 80e5 	beq.w	408076 <trans_create+0x2ba>
        obj->state = prev_state;
  407eac:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        int1 = _lv_obj_get_style_int(obj, part, prop);
  407eb0:	462a      	mov	r2, r5
  407eb2:	4639      	mov	r1, r7
  407eb4:	4620      	mov	r0, r4
  407eb6:	4b79      	ldr	r3, [pc, #484]	; (40809c <trans_create+0x2e0>)
  407eb8:	4798      	blx	r3
  407eba:	4606      	mov	r6, r0
        obj->state = new_state;
  407ebc:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        _lv_style_set_int(style_trans, prop, int1);   /*Be sure `trans_style` has a valid value */
  407ec0:	4602      	mov	r2, r0
  407ec2:	4629      	mov	r1, r5
  407ec4:	9800      	ldr	r0, [sp, #0]
  407ec6:	4b76      	ldr	r3, [pc, #472]	; (4080a0 <trans_create+0x2e4>)
  407ec8:	4798      	blx	r3
        if(prop == LV_STYLE_RADIUS) {
  407eca:	2d01      	cmp	r5, #1
  407ecc:	d00e      	beq.n	407eec <trans_create+0x130>
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
  407ece:	4870      	ldr	r0, [pc, #448]	; (408090 <trans_create+0x2d4>)
  407ed0:	4b70      	ldr	r3, [pc, #448]	; (408094 <trans_create+0x2d8>)
  407ed2:	4798      	blx	r3
  407ed4:	4604      	mov	r4, r0
        LV_ASSERT_MEM(tr);
  407ed6:	4b70      	ldr	r3, [pc, #448]	; (408098 <trans_create+0x2dc>)
  407ed8:	4798      	blx	r3
  407eda:	b3b0      	cbz	r0, 407f4a <trans_create+0x18e>
        if(tr == NULL) return NULL;
  407edc:	b114      	cbz	r4, 407ee4 <trans_create+0x128>
        tr->start_value._int = int1;
  407ede:	8126      	strh	r6, [r4, #8]
        tr->end_value._int = int2;
  407ee0:	f8a4 b00c 	strh.w	fp, [r4, #12]
}
  407ee4:	4620      	mov	r0, r4
  407ee6:	b005      	add	sp, #20
  407ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(int1 == LV_RADIUS_CIRCLE || int2 == LV_RADIUS_CIRCLE) {
  407eec:	f647 73ff 	movw	r3, #32767	; 0x7fff
  407ef0:	459b      	cmp	fp, r3
  407ef2:	bf18      	it	ne
  407ef4:	429e      	cmpne	r6, r3
  407ef6:	d1ea      	bne.n	407ece <trans_create+0x112>
                lv_coord_t whalf = lv_obj_get_width(obj) / 2;
  407ef8:	4620      	mov	r0, r4
  407efa:	4b6a      	ldr	r3, [pc, #424]	; (4080a4 <trans_create+0x2e8>)
  407efc:	4798      	blx	r3
  407efe:	4605      	mov	r5, r0
  407f00:	2800      	cmp	r0, #0
  407f02:	da00      	bge.n	407f06 <trans_create+0x14a>
  407f04:	1c45      	adds	r5, r0, #1
  407f06:	f345 054f 	sbfx	r5, r5, #1, #16
                lv_coord_t hhalf = lv_obj_get_width(obj) / 2;
  407f0a:	4620      	mov	r0, r4
  407f0c:	4b65      	ldr	r3, [pc, #404]	; (4080a4 <trans_create+0x2e8>)
  407f0e:	4798      	blx	r3
  407f10:	4603      	mov	r3, r0
  407f12:	2800      	cmp	r0, #0
  407f14:	da00      	bge.n	407f18 <trans_create+0x15c>
  407f16:	1c43      	adds	r3, r0, #1
  407f18:	f343 034f 	sbfx	r3, r3, #1, #16
                if(int1 == LV_RADIUS_CIRCLE) int1 = LV_MATH_MIN(whalf + 1, hhalf + 1);
  407f1c:	f647 72ff 	movw	r2, #32767	; 0x7fff
  407f20:	4296      	cmp	r6, r2
  407f22:	d105      	bne.n	407f30 <trans_create+0x174>
  407f24:	1c5e      	adds	r6, r3, #1
  407f26:	1c6a      	adds	r2, r5, #1
  407f28:	4296      	cmp	r6, r2
  407f2a:	bfa8      	it	ge
  407f2c:	4616      	movge	r6, r2
  407f2e:	b236      	sxth	r6, r6
                if(int2 == LV_RADIUS_CIRCLE) int2 = LV_MATH_MIN(whalf + 1, hhalf + 1);
  407f30:	f647 72ff 	movw	r2, #32767	; 0x7fff
  407f34:	4593      	cmp	fp, r2
  407f36:	d1ca      	bne.n	407ece <trans_create+0x112>
  407f38:	f103 0b01 	add.w	fp, r3, #1
  407f3c:	3501      	adds	r5, #1
  407f3e:	45ab      	cmp	fp, r5
  407f40:	bfa8      	it	ge
  407f42:	46ab      	movge	fp, r5
  407f44:	fa0f fb8b 	sxth.w	fp, fp
  407f48:	e7c1      	b.n	407ece <trans_create+0x112>
        LV_ASSERT_MEM(tr);
  407f4a:	4622      	mov	r2, r4
  407f4c:	2300      	movs	r3, #0
  407f4e:	4856      	ldr	r0, [pc, #344]	; (4080a8 <trans_create+0x2ec>)
  407f50:	4956      	ldr	r1, [pc, #344]	; (4080ac <trans_create+0x2f0>)
  407f52:	4788      	blx	r1
  407f54:	e7fe      	b.n	407f54 <trans_create+0x198>
        style_list->skip_trans = 1;
  407f56:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = 1;
  407f58:	f043 0309 	orr.w	r3, r3, #9
  407f5c:	7173      	strb	r3, [r6, #5]
        obj->state = prev_state;
  407f5e:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        lv_color_t c1 = _lv_obj_get_style_color(obj, part, prop);
  407f62:	462a      	mov	r2, r5
  407f64:	4639      	mov	r1, r7
  407f66:	4620      	mov	r0, r4
  407f68:	f8df b144 	ldr.w	fp, [pc, #324]	; 4080b0 <trans_create+0x2f4>
  407f6c:	47d8      	blx	fp
  407f6e:	f8ad 0004 	strh.w	r0, [sp, #4]
        obj->state = new_state;
  407f72:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        lv_color_t c2 =  _lv_obj_get_style_color(obj, part, prop);
  407f76:	462a      	mov	r2, r5
  407f78:	4639      	mov	r1, r7
  407f7a:	4620      	mov	r0, r4
  407f7c:	47d8      	blx	fp
  407f7e:	4683      	mov	fp, r0
        style_list->skip_trans = 0;
  407f80:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = cache_ori;
  407f82:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  407f86:	f36a 03c3 	bfi	r3, sl, #3, #1
  407f8a:	7173      	strb	r3, [r6, #5]
        if(c1.full == c2.full) return NULL;
  407f8c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
  407f90:	b283      	uxth	r3, r0
  407f92:	429a      	cmp	r2, r3
  407f94:	d023      	beq.n	407fde <trans_create+0x222>
        obj->state = prev_state;
  407f96:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        c1 = _lv_obj_get_style_color(obj, part, prop);
  407f9a:	462a      	mov	r2, r5
  407f9c:	4639      	mov	r1, r7
  407f9e:	4620      	mov	r0, r4
  407fa0:	4b43      	ldr	r3, [pc, #268]	; (4080b0 <trans_create+0x2f4>)
  407fa2:	4798      	blx	r3
  407fa4:	4602      	mov	r2, r0
  407fa6:	f8ad 0004 	strh.w	r0, [sp, #4]
        obj->state = new_state;
  407faa:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        _lv_style_set_color(style_trans, prop, c1);    /*Be sure `trans_style` has a valid value */
  407fae:	4629      	mov	r1, r5
  407fb0:	9800      	ldr	r0, [sp, #0]
  407fb2:	4b40      	ldr	r3, [pc, #256]	; (4080b4 <trans_create+0x2f8>)
  407fb4:	4798      	blx	r3
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
  407fb6:	4836      	ldr	r0, [pc, #216]	; (408090 <trans_create+0x2d4>)
  407fb8:	4b36      	ldr	r3, [pc, #216]	; (408094 <trans_create+0x2d8>)
  407fba:	4798      	blx	r3
  407fbc:	4604      	mov	r4, r0
        LV_ASSERT_MEM(tr);
  407fbe:	4b36      	ldr	r3, [pc, #216]	; (408098 <trans_create+0x2dc>)
  407fc0:	4798      	blx	r3
  407fc2:	b928      	cbnz	r0, 407fd0 <trans_create+0x214>
  407fc4:	4622      	mov	r2, r4
  407fc6:	2300      	movs	r3, #0
  407fc8:	4837      	ldr	r0, [pc, #220]	; (4080a8 <trans_create+0x2ec>)
  407fca:	4938      	ldr	r1, [pc, #224]	; (4080ac <trans_create+0x2f0>)
  407fcc:	4788      	blx	r1
  407fce:	e7fe      	b.n	407fce <trans_create+0x212>
        if(tr == NULL) return NULL;
  407fd0:	b12c      	cbz	r4, 407fde <trans_create+0x222>
        tr->start_value._color = c1;
  407fd2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  407fd6:	8123      	strh	r3, [r4, #8]
        tr->end_value._color = c2;
  407fd8:	f8a4 b00c 	strh.w	fp, [r4, #12]
  407fdc:	e782      	b.n	407ee4 <trans_create+0x128>
        if(c1.full == c2.full) return NULL;
  407fde:	2400      	movs	r4, #0
  407fe0:	e780      	b.n	407ee4 <trans_create+0x128>
        LV_ASSERT_MEM(tr);
  407fe2:	4622      	mov	r2, r4
  407fe4:	2300      	movs	r3, #0
  407fe6:	4830      	ldr	r0, [pc, #192]	; (4080a8 <trans_create+0x2ec>)
  407fe8:	4930      	ldr	r1, [pc, #192]	; (4080ac <trans_create+0x2f0>)
  407fea:	4788      	blx	r1
  407fec:	e7fe      	b.n	407fec <trans_create+0x230>
        obj->state = prev_state;
  407fee:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        style_list->skip_trans = 1;
  407ff2:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = 1;
  407ff4:	f043 0309 	orr.w	r3, r3, #9
  407ff8:	7173      	strb	r3, [r6, #5]
        const void * p1 = _lv_obj_get_style_ptr(obj, part, prop);
  407ffa:	462a      	mov	r2, r5
  407ffc:	4639      	mov	r1, r7
  407ffe:	4620      	mov	r0, r4
  408000:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 4080c0 <trans_create+0x304>
  408004:	47d8      	blx	fp
  408006:	9002      	str	r0, [sp, #8]
        obj->state = new_state;
  408008:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        const void * p2 = _lv_obj_get_style_ptr(obj, part, prop);
  40800c:	462a      	mov	r2, r5
  40800e:	4639      	mov	r1, r7
  408010:	4620      	mov	r0, r4
  408012:	47d8      	blx	fp
  408014:	a904      	add	r1, sp, #16
  408016:	f841 0d04 	str.w	r0, [r1, #-4]!
        style_list->skip_trans = 0;
  40801a:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = cache_ori;
  40801c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  408020:	f36a 03c3 	bfi	r3, sl, #3, #1
  408024:	7173      	strb	r3, [r6, #5]
        if(memcmp(&p1, &p2, sizeof(const void *)) == 0)  return NULL;
  408026:	2204      	movs	r2, #4
  408028:	a802      	add	r0, sp, #8
  40802a:	4b23      	ldr	r3, [pc, #140]	; (4080b8 <trans_create+0x2fc>)
  40802c:	4798      	blx	r3
  40802e:	b300      	cbz	r0, 408072 <trans_create+0x2b6>
        obj->state = prev_state;
  408030:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        p1 = _lv_obj_get_style_ptr(obj, part, prop);
  408034:	462a      	mov	r2, r5
  408036:	4639      	mov	r1, r7
  408038:	4620      	mov	r0, r4
  40803a:	47d8      	blx	fp
  40803c:	4602      	mov	r2, r0
  40803e:	9002      	str	r0, [sp, #8]
        obj->state = new_state;
  408040:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        _lv_style_set_ptr(style_trans, prop, p1);   /*Be sure `trans_style` has a valid value */
  408044:	4629      	mov	r1, r5
  408046:	9800      	ldr	r0, [sp, #0]
  408048:	4b1c      	ldr	r3, [pc, #112]	; (4080bc <trans_create+0x300>)
  40804a:	4798      	blx	r3
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
  40804c:	4810      	ldr	r0, [pc, #64]	; (408090 <trans_create+0x2d4>)
  40804e:	4b11      	ldr	r3, [pc, #68]	; (408094 <trans_create+0x2d8>)
  408050:	4798      	blx	r3
  408052:	4604      	mov	r4, r0
        LV_ASSERT_MEM(tr);
  408054:	4b10      	ldr	r3, [pc, #64]	; (408098 <trans_create+0x2dc>)
  408056:	4798      	blx	r3
  408058:	b128      	cbz	r0, 408066 <trans_create+0x2aa>
        if(tr == NULL) return NULL;
  40805a:	b154      	cbz	r4, 408072 <trans_create+0x2b6>
        tr->start_value._ptr = p1;
  40805c:	9b02      	ldr	r3, [sp, #8]
  40805e:	60a3      	str	r3, [r4, #8]
        tr->end_value._ptr = p2;
  408060:	9b03      	ldr	r3, [sp, #12]
  408062:	60e3      	str	r3, [r4, #12]
  408064:	e73e      	b.n	407ee4 <trans_create+0x128>
        LV_ASSERT_MEM(tr);
  408066:	4622      	mov	r2, r4
  408068:	2300      	movs	r3, #0
  40806a:	480f      	ldr	r0, [pc, #60]	; (4080a8 <trans_create+0x2ec>)
  40806c:	490f      	ldr	r1, [pc, #60]	; (4080ac <trans_create+0x2f0>)
  40806e:	4788      	blx	r1
  408070:	e7fe      	b.n	408070 <trans_create+0x2b4>
        if(memcmp(&p1, &p2, sizeof(const void *)) == 0)  return NULL;
  408072:	2400      	movs	r4, #0
  408074:	e736      	b.n	407ee4 <trans_create+0x128>
        if(int1 == int2)  return NULL;
  408076:	2400      	movs	r4, #0
  408078:	e734      	b.n	407ee4 <trans_create+0x128>
        if(o1 == o2) return NULL;
  40807a:	2400      	movs	r4, #0
  40807c:	e732      	b.n	407ee4 <trans_create+0x128>
  40807e:	bf00      	nop
  408080:	00405c4d 	.word	0x00405c4d
  408084:	0040acdd 	.word	0x0040acdd
  408088:	00406ef9 	.word	0x00406ef9
  40808c:	0040a589 	.word	0x0040a589
  408090:	2043a334 	.word	0x2043a334
  408094:	0041620d 	.word	0x0041620d
  408098:	00415f95 	.word	0x00415f95
  40809c:	00407485 	.word	0x00407485
  4080a0:	0040a269 	.word	0x0040a269
  4080a4:	00405bc1 	.word	0x00405bc1
  4080a8:	0042c714 	.word	0x0042c714
  4080ac:	00415fa1 	.word	0x00415fa1
  4080b0:	00406e71 	.word	0x00406e71
  4080b4:	0040a3f9 	.word	0x0040a3f9
  4080b8:	00427dd5 	.word	0x00427dd5
  4080bc:	0040a719 	.word	0x0040a719
  4080c0:	0040737d 	.word	0x0040737d

004080c4 <lv_obj_get_signal_cb>:
{
  4080c4:	b510      	push	{r4, lr}
  4080c6:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4080c8:	4b05      	ldr	r3, [pc, #20]	; (4080e0 <lv_obj_get_signal_cb+0x1c>)
  4080ca:	4798      	blx	r3
  4080cc:	b108      	cbz	r0, 4080d2 <lv_obj_get_signal_cb+0xe>
}
  4080ce:	69e0      	ldr	r0, [r4, #28]
  4080d0:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4080d2:	4622      	mov	r2, r4
  4080d4:	2300      	movs	r3, #0
  4080d6:	4803      	ldr	r0, [pc, #12]	; (4080e4 <lv_obj_get_signal_cb+0x20>)
  4080d8:	4903      	ldr	r1, [pc, #12]	; (4080e8 <lv_obj_get_signal_cb+0x24>)
  4080da:	4788      	blx	r1
  4080dc:	e7fe      	b.n	4080dc <lv_obj_get_signal_cb+0x18>
  4080de:	bf00      	nop
  4080e0:	00415f95 	.word	0x00415f95
  4080e4:	0042c728 	.word	0x0042c728
  4080e8:	00415fa1 	.word	0x00415fa1

004080ec <lv_obj_get_design_cb>:
{
  4080ec:	b510      	push	{r4, lr}
  4080ee:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4080f0:	4b05      	ldr	r3, [pc, #20]	; (408108 <lv_obj_get_design_cb+0x1c>)
  4080f2:	4798      	blx	r3
  4080f4:	b108      	cbz	r0, 4080fa <lv_obj_get_design_cb+0xe>
}
  4080f6:	6a20      	ldr	r0, [r4, #32]
  4080f8:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4080fa:	4622      	mov	r2, r4
  4080fc:	2300      	movs	r3, #0
  4080fe:	4803      	ldr	r0, [pc, #12]	; (40810c <lv_obj_get_design_cb+0x20>)
  408100:	4903      	ldr	r1, [pc, #12]	; (408110 <lv_obj_get_design_cb+0x24>)
  408102:	4788      	blx	r1
  408104:	e7fe      	b.n	408104 <lv_obj_get_design_cb+0x18>
  408106:	bf00      	nop
  408108:	00415f95 	.word	0x00415f95
  40810c:	0042c728 	.word	0x0042c728
  408110:	00415fa1 	.word	0x00415fa1

00408114 <lv_obj_get_ext_attr>:
{
  408114:	b510      	push	{r4, lr}
  408116:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  408118:	4b05      	ldr	r3, [pc, #20]	; (408130 <lv_obj_get_ext_attr+0x1c>)
  40811a:	4798      	blx	r3
  40811c:	b108      	cbz	r0, 408122 <lv_obj_get_ext_attr+0xe>
}
  40811e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  408120:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  408122:	4622      	mov	r2, r4
  408124:	2300      	movs	r3, #0
  408126:	4803      	ldr	r0, [pc, #12]	; (408134 <lv_obj_get_ext_attr+0x20>)
  408128:	4903      	ldr	r1, [pc, #12]	; (408138 <lv_obj_get_ext_attr+0x24>)
  40812a:	4788      	blx	r1
  40812c:	e7fe      	b.n	40812c <lv_obj_get_ext_attr+0x18>
  40812e:	bf00      	nop
  408130:	00415f95 	.word	0x00415f95
  408134:	0042c728 	.word	0x0042c728
  408138:	00415fa1 	.word	0x00415fa1

0040813c <lv_obj_get_group>:
{
  40813c:	b510      	push	{r4, lr}
  40813e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  408140:	4b05      	ldr	r3, [pc, #20]	; (408158 <lv_obj_get_group+0x1c>)
  408142:	4798      	blx	r3
  408144:	b108      	cbz	r0, 40814a <lv_obj_get_group+0xe>
}
  408146:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  408148:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40814a:	4622      	mov	r2, r4
  40814c:	2300      	movs	r3, #0
  40814e:	4803      	ldr	r0, [pc, #12]	; (40815c <lv_obj_get_group+0x20>)
  408150:	4903      	ldr	r1, [pc, #12]	; (408160 <lv_obj_get_group+0x24>)
  408152:	4788      	blx	r1
  408154:	e7fe      	b.n	408154 <lv_obj_get_group+0x18>
  408156:	bf00      	nop
  408158:	00415f95 	.word	0x00415f95
  40815c:	0042c728 	.word	0x0042c728
  408160:	00415fa1 	.word	0x00415fa1

00408164 <obj_del_core>:
{
  408164:	b570      	push	{r4, r5, r6, lr}
  408166:	4605      	mov	r5, r0
    lv_event_send(obj, LV_EVENT_DELETE, NULL);
  408168:	2200      	movs	r2, #0
  40816a:	2115      	movs	r1, #21
  40816c:	4b33      	ldr	r3, [pc, #204]	; (40823c <obj_del_core+0xd8>)
  40816e:	4798      	blx	r3
    lv_group_t * group = lv_obj_get_group(obj);
  408170:	4628      	mov	r0, r5
  408172:	4b33      	ldr	r3, [pc, #204]	; (408240 <obj_del_core+0xdc>)
  408174:	4798      	blx	r3
    if(group) lv_group_remove_obj(obj);
  408176:	4606      	mov	r6, r0
  408178:	b110      	cbz	r0, 408180 <obj_del_core+0x1c>
  40817a:	4628      	mov	r0, r5
  40817c:	4b31      	ldr	r3, [pc, #196]	; (408244 <obj_del_core+0xe0>)
  40817e:	4798      	blx	r3
    lv_anim_del(obj, NULL);
  408180:	2100      	movs	r1, #0
  408182:	4628      	mov	r0, r5
  408184:	4b30      	ldr	r3, [pc, #192]	; (408248 <obj_del_core+0xe4>)
  408186:	4798      	blx	r3
    trans_del(obj, 0xFF, 0xFF, NULL);
  408188:	2300      	movs	r3, #0
  40818a:	22ff      	movs	r2, #255	; 0xff
  40818c:	4611      	mov	r1, r2
  40818e:	4628      	mov	r0, r5
  408190:	4c2e      	ldr	r4, [pc, #184]	; (40824c <obj_del_core+0xe8>)
  408192:	47a0      	blx	r4
    i = _lv_ll_get_head(&(obj->child_ll));
  408194:	1d2c      	adds	r4, r5, #4
  408196:	4620      	mov	r0, r4
  408198:	4b2d      	ldr	r3, [pc, #180]	; (408250 <obj_del_core+0xec>)
  40819a:	4798      	blx	r3
    while(i != NULL) {
  40819c:	e004      	b.n	4081a8 <obj_del_core+0x44>
        obj_del_core(i);
  40819e:	f7ff ffe1 	bl	408164 <obj_del_core>
        i = _lv_ll_get_head(&(obj->child_ll));
  4081a2:	4620      	mov	r0, r4
  4081a4:	4b2a      	ldr	r3, [pc, #168]	; (408250 <obj_del_core+0xec>)
  4081a6:	4798      	blx	r3
    while(i != NULL) {
  4081a8:	2800      	cmp	r0, #0
  4081aa:	d1f8      	bne.n	40819e <obj_del_core+0x3a>
    lv_event_mark_deleted(obj);
  4081ac:	4628      	mov	r0, r5
  4081ae:	4b29      	ldr	r3, [pc, #164]	; (408254 <obj_del_core+0xf0>)
  4081b0:	4798      	blx	r3
    lv_indev_t * indev = lv_indev_get_next(NULL);
  4081b2:	2000      	movs	r0, #0
  4081b4:	4b28      	ldr	r3, [pc, #160]	; (408258 <obj_del_core+0xf4>)
  4081b6:	4798      	blx	r3
  4081b8:	4604      	mov	r4, r0
    while(indev) {
  4081ba:	e00d      	b.n	4081d8 <obj_del_core+0x74>
            lv_indev_reset(indev, obj);
  4081bc:	4629      	mov	r1, r5
  4081be:	4620      	mov	r0, r4
  4081c0:	4b26      	ldr	r3, [pc, #152]	; (40825c <obj_del_core+0xf8>)
  4081c2:	4798      	blx	r3
        if(indev->proc.types.pointer.last_pressed == obj) {
  4081c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4081c6:	429d      	cmp	r5, r3
  4081c8:	d00e      	beq.n	4081e8 <obj_del_core+0x84>
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
  4081ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
  4081cc:	429e      	cmp	r6, r3
  4081ce:	d00e      	beq.n	4081ee <obj_del_core+0x8a>
        indev = lv_indev_get_next(indev);
  4081d0:	4620      	mov	r0, r4
  4081d2:	4b21      	ldr	r3, [pc, #132]	; (408258 <obj_del_core+0xf4>)
  4081d4:	4798      	blx	r3
  4081d6:	4604      	mov	r4, r0
    while(indev) {
  4081d8:	b194      	cbz	r4, 408200 <obj_del_core+0x9c>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
  4081da:	6b63      	ldr	r3, [r4, #52]	; 0x34
  4081dc:	429d      	cmp	r5, r3
  4081de:	d0ed      	beq.n	4081bc <obj_del_core+0x58>
  4081e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4081e2:	429d      	cmp	r5, r3
  4081e4:	d1ee      	bne.n	4081c4 <obj_del_core+0x60>
  4081e6:	e7e9      	b.n	4081bc <obj_del_core+0x58>
            indev->proc.types.pointer.last_pressed = NULL;
  4081e8:	2300      	movs	r3, #0
  4081ea:	63e3      	str	r3, [r4, #60]	; 0x3c
  4081ec:	e7ed      	b.n	4081ca <obj_del_core+0x66>
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
  4081ee:	4b1c      	ldr	r3, [pc, #112]	; (408260 <obj_del_core+0xfc>)
  4081f0:	4798      	blx	r3
  4081f2:	4285      	cmp	r5, r0
  4081f4:	d1ec      	bne.n	4081d0 <obj_del_core+0x6c>
            lv_indev_reset(indev, obj);
  4081f6:	4629      	mov	r1, r5
  4081f8:	4620      	mov	r0, r4
  4081fa:	4b18      	ldr	r3, [pc, #96]	; (40825c <obj_del_core+0xf8>)
  4081fc:	4798      	blx	r3
  4081fe:	e7e7      	b.n	4081d0 <obj_del_core+0x6c>
    obj->signal_cb(obj, LV_SIGNAL_CLEANUP, NULL);
  408200:	69eb      	ldr	r3, [r5, #28]
  408202:	2200      	movs	r2, #0
  408204:	4611      	mov	r1, r2
  408206:	4628      	mov	r0, r5
  408208:	4798      	blx	r3
    lv_obj_t * par = lv_obj_get_parent(obj);
  40820a:	4628      	mov	r0, r5
  40820c:	4b15      	ldr	r3, [pc, #84]	; (408264 <obj_del_core+0x100>)
  40820e:	4798      	blx	r3
    if(par == NULL) { /*It is a screen*/
  408210:	b158      	cbz	r0, 40822a <obj_del_core+0xc6>
        _lv_ll_remove(&(par->child_ll), obj);
  408212:	4629      	mov	r1, r5
  408214:	3004      	adds	r0, #4
  408216:	4b14      	ldr	r3, [pc, #80]	; (408268 <obj_del_core+0x104>)
  408218:	4798      	blx	r3
    if(obj->ext_attr != NULL) lv_mem_free(obj->ext_attr);
  40821a:	6a68      	ldr	r0, [r5, #36]	; 0x24
  40821c:	b108      	cbz	r0, 408222 <obj_del_core+0xbe>
  40821e:	4b13      	ldr	r3, [pc, #76]	; (40826c <obj_del_core+0x108>)
  408220:	4798      	blx	r3
    lv_mem_free(obj); /*Free the object itself*/
  408222:	4628      	mov	r0, r5
  408224:	4b11      	ldr	r3, [pc, #68]	; (40826c <obj_del_core+0x108>)
  408226:	4798      	blx	r3
  408228:	bd70      	pop	{r4, r5, r6, pc}
        lv_disp_t * d = lv_obj_get_disp(obj);
  40822a:	4628      	mov	r0, r5
  40822c:	4b10      	ldr	r3, [pc, #64]	; (408270 <obj_del_core+0x10c>)
  40822e:	4798      	blx	r3
        _lv_ll_remove(&d->scr_ll, obj);
  408230:	4629      	mov	r1, r5
  408232:	3038      	adds	r0, #56	; 0x38
  408234:	4b0c      	ldr	r3, [pc, #48]	; (408268 <obj_del_core+0x104>)
  408236:	4798      	blx	r3
  408238:	e7ef      	b.n	40821a <obj_del_core+0xb6>
  40823a:	bf00      	nop
  40823c:	004058d1 	.word	0x004058d1
  408240:	0040813d 	.word	0x0040813d
  408244:	004038dd 	.word	0x004038dd
  408248:	00415489 	.word	0x00415489
  40824c:	00405c7d 	.word	0x00405c7d
  408250:	004162a5 	.word	0x004162a5
  408254:	00405399 	.word	0x00405399
  408258:	00415121 	.word	0x00415121
  40825c:	00404c69 	.word	0x00404c69
  408260:	00404d61 	.word	0x00404d61
  408264:	004059ed 	.word	0x004059ed
  408268:	00416361 	.word	0x00416361
  40826c:	0041679d 	.word	0x0041679d
  408270:	00405a4d 	.word	0x00405a4d

00408274 <lv_obj_del>:
{
  408274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408276:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  408278:	4b16      	ldr	r3, [pc, #88]	; (4082d4 <lv_obj_del+0x60>)
  40827a:	4798      	blx	r3
  40827c:	b928      	cbnz	r0, 40828a <lv_obj_del+0x16>
  40827e:	4622      	mov	r2, r4
  408280:	2300      	movs	r3, #0
  408282:	4815      	ldr	r0, [pc, #84]	; (4082d8 <lv_obj_del+0x64>)
  408284:	4915      	ldr	r1, [pc, #84]	; (4082dc <lv_obj_del+0x68>)
  408286:	4788      	blx	r1
  408288:	e7fe      	b.n	408288 <lv_obj_del+0x14>
  40828a:	4605      	mov	r5, r0
    lv_obj_invalidate(obj);
  40828c:	4620      	mov	r0, r4
  40828e:	4b14      	ldr	r3, [pc, #80]	; (4082e0 <lv_obj_del+0x6c>)
  408290:	4798      	blx	r3
    lv_obj_t * par = lv_obj_get_parent(obj);
  408292:	4620      	mov	r0, r4
  408294:	4b13      	ldr	r3, [pc, #76]	; (4082e4 <lv_obj_del+0x70>)
  408296:	4798      	blx	r3
    if(par == NULL) {
  408298:	4607      	mov	r7, r0
  40829a:	b178      	cbz	r0, 4082bc <lv_obj_del+0x48>
    bool act_scr_del = false;
  40829c:	2500      	movs	r5, #0
    lv_disp_t * disp = NULL;
  40829e:	462e      	mov	r6, r5
    obj_del_core(obj);
  4082a0:	4620      	mov	r0, r4
  4082a2:	4b11      	ldr	r3, [pc, #68]	; (4082e8 <lv_obj_del+0x74>)
  4082a4:	4798      	blx	r3
    if(par) {
  4082a6:	b127      	cbz	r7, 4082b2 <lv_obj_del+0x3e>
        par->signal_cb(par, LV_SIGNAL_CHILD_CHG, NULL);
  4082a8:	69fb      	ldr	r3, [r7, #28]
  4082aa:	2200      	movs	r2, #0
  4082ac:	2101      	movs	r1, #1
  4082ae:	4638      	mov	r0, r7
  4082b0:	4798      	blx	r3
    if(act_scr_del)  {
  4082b2:	b10d      	cbz	r5, 4082b8 <lv_obj_del+0x44>
        disp->act_scr = NULL;
  4082b4:	2300      	movs	r3, #0
  4082b6:	6473      	str	r3, [r6, #68]	; 0x44
}
  4082b8:	2000      	movs	r0, #0
  4082ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        disp = lv_obj_get_disp(obj);
  4082bc:	4620      	mov	r0, r4
  4082be:	4b0b      	ldr	r3, [pc, #44]	; (4082ec <lv_obj_del+0x78>)
  4082c0:	4798      	blx	r3
        if(!disp) return LV_RES_INV;   /*Shouldn't happen*/
  4082c2:	4606      	mov	r6, r0
  4082c4:	2800      	cmp	r0, #0
  4082c6:	d0f7      	beq.n	4082b8 <lv_obj_del+0x44>
        if(disp->act_scr == obj) act_scr_del = true;
  4082c8:	6c43      	ldr	r3, [r0, #68]	; 0x44
  4082ca:	429c      	cmp	r4, r3
  4082cc:	d0e8      	beq.n	4082a0 <lv_obj_del+0x2c>
    bool act_scr_del = false;
  4082ce:	2500      	movs	r5, #0
  4082d0:	e7e6      	b.n	4082a0 <lv_obj_del+0x2c>
  4082d2:	bf00      	nop
  4082d4:	00415f95 	.word	0x00415f95
  4082d8:	0042c728 	.word	0x0042c728
  4082dc:	00415fa1 	.word	0x00415fa1
  4082e0:	00405f99 	.word	0x00405f99
  4082e4:	004059ed 	.word	0x004059ed
  4082e8:	00408165 	.word	0x00408165
  4082ec:	00405a4d 	.word	0x00405a4d

004082f0 <lv_obj_del_async_cb>:
{
  4082f0:	b510      	push	{r4, lr}
  4082f2:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4082f4:	4b06      	ldr	r3, [pc, #24]	; (408310 <lv_obj_del_async_cb+0x20>)
  4082f6:	4798      	blx	r3
  4082f8:	b928      	cbnz	r0, 408306 <lv_obj_del_async_cb+0x16>
  4082fa:	4622      	mov	r2, r4
  4082fc:	2300      	movs	r3, #0
  4082fe:	4805      	ldr	r0, [pc, #20]	; (408314 <lv_obj_del_async_cb+0x24>)
  408300:	4905      	ldr	r1, [pc, #20]	; (408318 <lv_obj_del_async_cb+0x28>)
  408302:	4788      	blx	r1
  408304:	e7fe      	b.n	408304 <lv_obj_del_async_cb+0x14>
    lv_obj_del(obj);
  408306:	4620      	mov	r0, r4
  408308:	4b04      	ldr	r3, [pc, #16]	; (40831c <lv_obj_del_async_cb+0x2c>)
  40830a:	4798      	blx	r3
  40830c:	bd10      	pop	{r4, pc}
  40830e:	bf00      	nop
  408310:	00415f95 	.word	0x00415f95
  408314:	0042c728 	.word	0x0042c728
  408318:	00415fa1 	.word	0x00415fa1
  40831c:	00408275 	.word	0x00408275

00408320 <lv_obj_is_focused>:
{
  408320:	b538      	push	{r3, r4, r5, lr}
  408322:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  408324:	4b0a      	ldr	r3, [pc, #40]	; (408350 <lv_obj_is_focused+0x30>)
  408326:	4798      	blx	r3
  408328:	b148      	cbz	r0, 40833e <lv_obj_is_focused+0x1e>
  40832a:	4604      	mov	r4, r0
    if(obj->group_p) {
  40832c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
  40832e:	b160      	cbz	r0, 40834a <lv_obj_is_focused+0x2a>
        if(lv_group_get_focused(obj->group_p) == obj) return true;
  408330:	4b08      	ldr	r3, [pc, #32]	; (408354 <lv_obj_is_focused+0x34>)
  408332:	4798      	blx	r3
  408334:	4285      	cmp	r5, r0
  408336:	d000      	beq.n	40833a <lv_obj_is_focused+0x1a>
    return false;
  408338:	2400      	movs	r4, #0
}
  40833a:	4620      	mov	r0, r4
  40833c:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40833e:	462a      	mov	r2, r5
  408340:	2300      	movs	r3, #0
  408342:	4805      	ldr	r0, [pc, #20]	; (408358 <lv_obj_is_focused+0x38>)
  408344:	4905      	ldr	r1, [pc, #20]	; (40835c <lv_obj_is_focused+0x3c>)
  408346:	4788      	blx	r1
  408348:	e7fe      	b.n	408348 <lv_obj_is_focused+0x28>
    return false;
  40834a:	2400      	movs	r4, #0
  40834c:	e7f5      	b.n	40833a <lv_obj_is_focused+0x1a>
  40834e:	bf00      	nop
  408350:	00415f95 	.word	0x00415f95
  408354:	00403989 	.word	0x00403989
  408358:	0042c728 	.word	0x0042c728
  40835c:	00415fa1 	.word	0x00415fa1

00408360 <lv_obj_is_point_on_coords>:
{
  408360:	b500      	push	{lr}
  408362:	b083      	sub	sp, #12
    ext_area.x1 = obj->coords.x1 - obj->ext_click_pad_hor;
  408364:	8a02      	ldrh	r2, [r0, #16]
  408366:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
  40836a:	1ad2      	subs	r2, r2, r3
  40836c:	f8ad 2000 	strh.w	r2, [sp]
    ext_area.x2 = obj->coords.x2 + obj->ext_click_pad_hor;
  408370:	8a82      	ldrh	r2, [r0, #20]
  408372:	4413      	add	r3, r2
  408374:	f8ad 3004 	strh.w	r3, [sp, #4]
    ext_area.y1 = obj->coords.y1 - obj->ext_click_pad_ver;
  408378:	8a42      	ldrh	r2, [r0, #18]
  40837a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
  40837e:	1ad2      	subs	r2, r2, r3
  408380:	f8ad 2002 	strh.w	r2, [sp, #2]
    ext_area.y2 = obj->coords.y2 + obj->ext_click_pad_ver;
  408384:	8ac2      	ldrh	r2, [r0, #22]
  408386:	4413      	add	r3, r2
  408388:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(!_lv_area_is_point_on(&ext_area, point, 0)) {
  40838c:	2200      	movs	r2, #0
  40838e:	4668      	mov	r0, sp
  408390:	4b02      	ldr	r3, [pc, #8]	; (40839c <lv_obj_is_point_on_coords+0x3c>)
  408392:	4798      	blx	r3
}
  408394:	b003      	add	sp, #12
  408396:	f85d fb04 	ldr.w	pc, [sp], #4
  40839a:	bf00      	nop
  40839c:	00415705 	.word	0x00415705

004083a0 <lv_obj_hittest>:
{
  4083a0:	b500      	push	{lr}
  4083a2:	b083      	sub	sp, #12
    if(obj->adv_hittest) {
  4083a4:	f990 3034 	ldrsb.w	r3, [r0, #52]	; 0x34
  4083a8:	2b00      	cmp	r3, #0
  4083aa:	db04      	blt.n	4083b6 <lv_obj_hittest+0x16>
        return lv_obj_is_point_on_coords(obj, point);
  4083ac:	4b07      	ldr	r3, [pc, #28]	; (4083cc <lv_obj_hittest+0x2c>)
  4083ae:	4798      	blx	r3
}
  4083b0:	b003      	add	sp, #12
  4083b2:	f85d fb04 	ldr.w	pc, [sp], #4
        hit_info.point = point;
  4083b6:	9100      	str	r1, [sp, #0]
        hit_info.result = true;
  4083b8:	2301      	movs	r3, #1
  4083ba:	f88d 3004 	strb.w	r3, [sp, #4]
        obj->signal_cb(obj, LV_SIGNAL_HIT_TEST, &hit_info);
  4083be:	69c3      	ldr	r3, [r0, #28]
  4083c0:	466a      	mov	r2, sp
  4083c2:	210a      	movs	r1, #10
  4083c4:	4798      	blx	r3
        return hit_info.result;
  4083c6:	f89d 0004 	ldrb.w	r0, [sp, #4]
  4083ca:	e7f1      	b.n	4083b0 <lv_obj_hittest+0x10>
  4083cc:	00408361 	.word	0x00408361

004083d0 <lv_obj_handle_get_type_signal>:
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
  4083d0:	2300      	movs	r3, #0
  4083d2:	2b06      	cmp	r3, #6
  4083d4:	d805      	bhi.n	4083e2 <lv_obj_handle_get_type_signal+0x12>
        if(buf->type[i] == NULL) break;
  4083d6:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
  4083da:	b112      	cbz	r2, 4083e2 <lv_obj_handle_get_type_signal+0x12>
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
  4083dc:	3301      	adds	r3, #1
  4083de:	b2db      	uxtb	r3, r3
  4083e0:	e7f7      	b.n	4083d2 <lv_obj_handle_get_type_signal+0x2>
    buf->type[i] = name;
  4083e2:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
  4083e6:	2001      	movs	r0, #1
  4083e8:	4770      	bx	lr
	...

004083ec <lv_obj_init_draw_rect_dsc>:
{
  4083ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4083f0:	4605      	mov	r5, r0
  4083f2:	460e      	mov	r6, r1
  4083f4:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  4083f6:	2201      	movs	r2, #1
  4083f8:	4ba9      	ldr	r3, [pc, #676]	; (4086a0 <lv_obj_init_draw_rect_dsc+0x2b4>)
  4083fa:	4798      	blx	r3
    draw_dsc->radius = lv_obj_get_style_radius(obj, part);
  4083fc:	8020      	strh	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  4083fe:	f248 020c 	movw	r2, #32780	; 0x800c
  408402:	4631      	mov	r1, r6
  408404:	4628      	mov	r0, r5
  408406:	4ba7      	ldr	r3, [pc, #668]	; (4086a4 <lv_obj_init_draw_rect_dsc+0x2b8>)
  408408:	4798      	blx	r3
    if(opa_scale <= LV_OPA_MIN) {
  40840a:	2802      	cmp	r0, #2
  40840c:	d966      	bls.n	4084dc <lv_obj_init_draw_rect_dsc+0xf0>
  40840e:	4607      	mov	r7, r0
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
  408410:	7b23      	ldrb	r3, [r4, #12]
  408412:	2b00      	cmp	r3, #0
  408414:	d16d      	bne.n	4084f2 <lv_obj_init_draw_rect_dsc+0x106>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  408416:	2230      	movs	r2, #48	; 0x30
  408418:	4631      	mov	r1, r6
  40841a:	4628      	mov	r0, r5
  40841c:	4ba0      	ldr	r3, [pc, #640]	; (4086a0 <lv_obj_init_draw_rect_dsc+0x2b4>)
  40841e:	4798      	blx	r3
    draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
  408420:	8220      	strh	r0, [r4, #16]
    if(draw_dsc->border_width) {
  408422:	b118      	cbz	r0, 40842c <lv_obj_init_draw_rect_dsc+0x40>
        if(draw_dsc->border_opa != LV_OPA_TRANSP) {
  408424:	7d23      	ldrb	r3, [r4, #20]
  408426:	2b00      	cmp	r3, #0
  408428:	f040 8093 	bne.w	408552 <lv_obj_init_draw_rect_dsc+0x166>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  40842c:	2240      	movs	r2, #64	; 0x40
  40842e:	4631      	mov	r1, r6
  408430:	4628      	mov	r0, r5
  408432:	4b9b      	ldr	r3, [pc, #620]	; (4086a0 <lv_obj_init_draw_rect_dsc+0x2b4>)
  408434:	4798      	blx	r3
    draw_dsc->outline_width = lv_obj_get_style_outline_width(obj, part);
  408436:	8360      	strh	r0, [r4, #26]
    if(draw_dsc->outline_width) {
  408438:	b118      	cbz	r0, 408442 <lv_obj_init_draw_rect_dsc+0x56>
        if(draw_dsc->outline_opa != LV_OPA_TRANSP) {
  40843a:	7fa3      	ldrb	r3, [r4, #30]
  40843c:	2b00      	cmp	r3, #0
  40843e:	f040 80a5 	bne.w	40858c <lv_obj_init_draw_rect_dsc+0x1a0>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
  408442:	226e      	movs	r2, #110	; 0x6e
  408444:	4631      	mov	r1, r6
  408446:	4628      	mov	r0, r5
  408448:	4b97      	ldr	r3, [pc, #604]	; (4086a8 <lv_obj_init_draw_rect_dsc+0x2bc>)
  40844a:	4798      	blx	r3
    draw_dsc->pattern_image = lv_obj_get_style_pattern_image(obj, part);
  40844c:	62e0      	str	r0, [r4, #44]	; 0x2c
    if(draw_dsc->pattern_image) {
  40844e:	b120      	cbz	r0, 40845a <lv_obj_init_draw_rect_dsc+0x6e>
        if(draw_dsc->pattern_opa != LV_OPA_TRANSP) {
  408450:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
  408454:	2b00      	cmp	r3, #0
  408456:	f040 80b5 	bne.w	4085c4 <lv_obj_init_draw_rect_dsc+0x1d8>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
  40845a:	2250      	movs	r2, #80	; 0x50
  40845c:	4631      	mov	r1, r6
  40845e:	4628      	mov	r0, r5
  408460:	4b8f      	ldr	r3, [pc, #572]	; (4086a0 <lv_obj_init_draw_rect_dsc+0x2b4>)
  408462:	4798      	blx	r3
    draw_dsc->shadow_width = lv_obj_get_style_shadow_width(obj, part);
  408464:	8460      	strh	r0, [r4, #34]	; 0x22
    if(draw_dsc->shadow_width) {
  408466:	b120      	cbz	r0, 408472 <lv_obj_init_draw_rect_dsc+0x86>
        if(draw_dsc->shadow_opa > LV_OPA_MIN) {
  408468:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  40846c:	2b02      	cmp	r3, #2
  40846e:	f200 80ee 	bhi.w	40864e <lv_obj_init_draw_rect_dsc+0x262>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
  408472:	227f      	movs	r2, #127	; 0x7f
  408474:	4631      	mov	r1, r6
  408476:	4628      	mov	r0, r5
  408478:	4b8b      	ldr	r3, [pc, #556]	; (4086a8 <lv_obj_init_draw_rect_dsc+0x2bc>)
  40847a:	4798      	blx	r3
    draw_dsc->value_str = lv_obj_get_style_value_str(obj, part);
  40847c:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(draw_dsc->value_str) {
  40847e:	b120      	cbz	r0, 40848a <lv_obj_init_draw_rect_dsc+0x9e>
        if(draw_dsc->value_opa > LV_OPA_MIN) {
  408480:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  408484:	2b02      	cmp	r3, #2
  408486:	f200 8115 	bhi.w	4086b4 <lv_obj_init_draw_rect_dsc+0x2c8>
    if(opa_scale < LV_OPA_MAX) {
  40848a:	2ffc      	cmp	r7, #252	; 0xfc
  40848c:	d824      	bhi.n	4084d8 <lv_obj_init_draw_rect_dsc+0xec>
        draw_dsc->bg_opa = (uint16_t)((uint16_t)draw_dsc->bg_opa * opa_scale) >> 8;
  40848e:	7b23      	ldrb	r3, [r4, #12]
  408490:	b2bf      	uxth	r7, r7
  408492:	fb13 f307 	smulbb	r3, r3, r7
  408496:	f3c3 2307 	ubfx	r3, r3, #8, #8
  40849a:	7323      	strb	r3, [r4, #12]
        draw_dsc->border_opa = (uint16_t)((uint16_t)draw_dsc->border_opa * opa_scale) >> 8;
  40849c:	7d23      	ldrb	r3, [r4, #20]
  40849e:	fb17 f303 	smulbb	r3, r7, r3
  4084a2:	f3c3 2307 	ubfx	r3, r3, #8, #8
  4084a6:	7523      	strb	r3, [r4, #20]
        draw_dsc->shadow_opa = (uint16_t)((uint16_t)draw_dsc->shadow_opa * opa_scale) >> 8;
  4084a8:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  4084ac:	fb17 f303 	smulbb	r3, r7, r3
  4084b0:	f3c3 2307 	ubfx	r3, r3, #8, #8
  4084b4:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        draw_dsc->pattern_opa = (uint16_t)((uint16_t)draw_dsc->pattern_opa * opa_scale) >> 8;
  4084b8:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
  4084bc:	fb17 f303 	smulbb	r3, r7, r3
  4084c0:	f3c3 2307 	ubfx	r3, r3, #8, #8
  4084c4:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        draw_dsc->value_opa = (uint16_t)((uint16_t)draw_dsc->value_opa * opa_scale) >> 8;
  4084c8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  4084cc:	fb17 f703 	smulbb	r7, r7, r3
  4084d0:	f3c7 2707 	ubfx	r7, r7, #8, #8
  4084d4:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
  4084d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        draw_dsc->bg_opa = LV_OPA_TRANSP;
  4084dc:	2300      	movs	r3, #0
  4084de:	7323      	strb	r3, [r4, #12]
        draw_dsc->border_opa = LV_OPA_TRANSP;
  4084e0:	7523      	strb	r3, [r4, #20]
        draw_dsc->shadow_opa = LV_OPA_TRANSP;
  4084e2:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        draw_dsc->pattern_opa = LV_OPA_TRANSP;
  4084e6:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        draw_dsc->value_opa = LV_OPA_TRANSP;
  4084ea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        return;
  4084ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  4084f2:	222c      	movs	r2, #44	; 0x2c
  4084f4:	4631      	mov	r1, r6
  4084f6:	4628      	mov	r0, r5
  4084f8:	4b6a      	ldr	r3, [pc, #424]	; (4086a4 <lv_obj_init_draw_rect_dsc+0x2b8>)
  4084fa:	4798      	blx	r3
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
  4084fc:	7320      	strb	r0, [r4, #12]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
  4084fe:	2802      	cmp	r0, #2
  408500:	d989      	bls.n	408416 <lv_obj_init_draw_rect_dsc+0x2a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  408502:	2229      	movs	r2, #41	; 0x29
  408504:	4631      	mov	r1, r6
  408506:	4628      	mov	r0, r5
  408508:	4b68      	ldr	r3, [pc, #416]	; (4086ac <lv_obj_init_draw_rect_dsc+0x2c0>)
  40850a:	4798      	blx	r3
            draw_dsc->bg_color = lv_obj_get_style_bg_color(obj, part);
  40850c:	8060      	strh	r0, [r4, #2]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
  40850e:	2223      	movs	r2, #35	; 0x23
  408510:	4631      	mov	r1, r6
  408512:	4628      	mov	r0, r5
  408514:	4b62      	ldr	r3, [pc, #392]	; (4086a0 <lv_obj_init_draw_rect_dsc+0x2b4>)
  408516:	4798      	blx	r3
  408518:	b2c0      	uxtb	r0, r0
            draw_dsc->bg_grad_dir =  lv_obj_get_style_bg_grad_dir(obj, part);
  40851a:	71a0      	strb	r0, [r4, #6]
            if(draw_dsc->bg_grad_dir != LV_GRAD_DIR_NONE) {
  40851c:	b930      	cbnz	r0, 40852c <lv_obj_init_draw_rect_dsc+0x140>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
  40851e:	2220      	movs	r2, #32
  408520:	4631      	mov	r1, r6
  408522:	4628      	mov	r0, r5
  408524:	4b5e      	ldr	r3, [pc, #376]	; (4086a0 <lv_obj_init_draw_rect_dsc+0x2b4>)
  408526:	4798      	blx	r3
            draw_dsc->bg_blend_mode = lv_obj_get_style_bg_blend_mode(obj, part);
  408528:	7360      	strb	r0, [r4, #13]
  40852a:	e774      	b.n	408416 <lv_obj_init_draw_rect_dsc+0x2a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
  40852c:	222a      	movs	r2, #42	; 0x2a
  40852e:	4631      	mov	r1, r6
  408530:	4628      	mov	r0, r5
  408532:	4b5e      	ldr	r3, [pc, #376]	; (4086ac <lv_obj_init_draw_rect_dsc+0x2c0>)
  408534:	4798      	blx	r3
                draw_dsc->bg_grad_color = lv_obj_get_style_bg_grad_color(obj, part);
  408536:	80a0      	strh	r0, [r4, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
  408538:	2221      	movs	r2, #33	; 0x21
  40853a:	4631      	mov	r1, r6
  40853c:	4628      	mov	r0, r5
  40853e:	f8df 8160 	ldr.w	r8, [pc, #352]	; 4086a0 <lv_obj_init_draw_rect_dsc+0x2b4>
  408542:	47c0      	blx	r8
                draw_dsc->bg_main_color_stop =  lv_obj_get_style_bg_main_stop(obj, part);
  408544:	8120      	strh	r0, [r4, #8]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
  408546:	2222      	movs	r2, #34	; 0x22
  408548:	4631      	mov	r1, r6
  40854a:	4628      	mov	r0, r5
  40854c:	47c0      	blx	r8
                draw_dsc->bg_grad_color_stop =  lv_obj_get_style_bg_grad_stop(obj, part);
  40854e:	8160      	strh	r0, [r4, #10]
  408550:	e7e5      	b.n	40851e <lv_obj_init_draw_rect_dsc+0x132>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
  408552:	223c      	movs	r2, #60	; 0x3c
  408554:	4631      	mov	r1, r6
  408556:	4628      	mov	r0, r5
  408558:	4b52      	ldr	r3, [pc, #328]	; (4086a4 <lv_obj_init_draw_rect_dsc+0x2b8>)
  40855a:	4798      	blx	r3
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
  40855c:	7520      	strb	r0, [r4, #20]
            if(draw_dsc->border_opa > LV_OPA_MIN) {
  40855e:	2802      	cmp	r0, #2
  408560:	d806      	bhi.n	408570 <lv_obj_init_draw_rect_dsc+0x184>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
  408562:	2232      	movs	r2, #50	; 0x32
  408564:	4631      	mov	r1, r6
  408566:	4628      	mov	r0, r5
  408568:	4b4d      	ldr	r3, [pc, #308]	; (4086a0 <lv_obj_init_draw_rect_dsc+0x2b4>)
  40856a:	4798      	blx	r3
            draw_dsc->border_blend_mode = lv_obj_get_style_border_blend_mode(obj, part);
  40856c:	7560      	strb	r0, [r4, #21]
  40856e:	e75d      	b.n	40842c <lv_obj_init_draw_rect_dsc+0x40>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  408570:	2231      	movs	r2, #49	; 0x31
  408572:	4631      	mov	r1, r6
  408574:	4628      	mov	r0, r5
  408576:	4b4a      	ldr	r3, [pc, #296]	; (4086a0 <lv_obj_init_draw_rect_dsc+0x2b4>)
  408578:	4798      	blx	r3
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
  40857a:	b2c0      	uxtb	r0, r0
  40857c:	8260      	strh	r0, [r4, #18]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  40857e:	2239      	movs	r2, #57	; 0x39
  408580:	4631      	mov	r1, r6
  408582:	4628      	mov	r0, r5
  408584:	4b49      	ldr	r3, [pc, #292]	; (4086ac <lv_obj_init_draw_rect_dsc+0x2c0>)
  408586:	4798      	blx	r3
                draw_dsc->border_color = lv_obj_get_style_border_color(obj, part);
  408588:	81e0      	strh	r0, [r4, #14]
  40858a:	e7ea      	b.n	408562 <lv_obj_init_draw_rect_dsc+0x176>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  40858c:	224c      	movs	r2, #76	; 0x4c
  40858e:	4631      	mov	r1, r6
  408590:	4628      	mov	r0, r5
  408592:	4b44      	ldr	r3, [pc, #272]	; (4086a4 <lv_obj_init_draw_rect_dsc+0x2b8>)
  408594:	4798      	blx	r3
            draw_dsc->outline_opa = lv_obj_get_style_outline_opa(obj, part);
  408596:	77a0      	strb	r0, [r4, #30]
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
  408598:	2802      	cmp	r0, #2
  40859a:	d806      	bhi.n	4085aa <lv_obj_init_draw_rect_dsc+0x1be>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_BLEND_MODE, outline_blend_mode, lv_blend_mode_t, _int, scalar)
  40859c:	2242      	movs	r2, #66	; 0x42
  40859e:	4631      	mov	r1, r6
  4085a0:	4628      	mov	r0, r5
  4085a2:	4b3f      	ldr	r3, [pc, #252]	; (4086a0 <lv_obj_init_draw_rect_dsc+0x2b4>)
  4085a4:	4798      	blx	r3
            draw_dsc->outline_blend_mode = lv_obj_get_style_outline_blend_mode(obj, part);
  4085a6:	77e0      	strb	r0, [r4, #31]
  4085a8:	e74b      	b.n	408442 <lv_obj_init_draw_rect_dsc+0x56>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
  4085aa:	2241      	movs	r2, #65	; 0x41
  4085ac:	4631      	mov	r1, r6
  4085ae:	4628      	mov	r0, r5
  4085b0:	4b3b      	ldr	r3, [pc, #236]	; (4086a0 <lv_obj_init_draw_rect_dsc+0x2b4>)
  4085b2:	4798      	blx	r3
                draw_dsc->outline_pad = lv_obj_get_style_outline_pad(obj, part);
  4085b4:	83a0      	strh	r0, [r4, #28]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
  4085b6:	2249      	movs	r2, #73	; 0x49
  4085b8:	4631      	mov	r1, r6
  4085ba:	4628      	mov	r0, r5
  4085bc:	4b3b      	ldr	r3, [pc, #236]	; (4086ac <lv_obj_init_draw_rect_dsc+0x2c0>)
  4085be:	4798      	blx	r3
                draw_dsc->outline_color = lv_obj_get_style_outline_color(obj, part);
  4085c0:	8320      	strh	r0, [r4, #24]
  4085c2:	e7eb      	b.n	40859c <lv_obj_init_draw_rect_dsc+0x1b0>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_OPA, pattern_opa, lv_opa_t, _opa, scalar)
  4085c4:	226c      	movs	r2, #108	; 0x6c
  4085c6:	4631      	mov	r1, r6
  4085c8:	4628      	mov	r0, r5
  4085ca:	4b36      	ldr	r3, [pc, #216]	; (4086a4 <lv_obj_init_draw_rect_dsc+0x2b8>)
  4085cc:	4798      	blx	r3
            draw_dsc->pattern_opa = lv_obj_get_style_pattern_opa(obj, part);
  4085ce:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
            if(draw_dsc->pattern_opa > LV_OPA_MIN) {
  4085d2:	2802      	cmp	r0, #2
  4085d4:	f67f af41 	bls.w	40845a <lv_obj_init_draw_rect_dsc+0x6e>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR_OPA, pattern_recolor_opa, lv_opa_t, _opa, scalar)
  4085d8:	226d      	movs	r2, #109	; 0x6d
  4085da:	4631      	mov	r1, r6
  4085dc:	4628      	mov	r0, r5
  4085de:	4b31      	ldr	r3, [pc, #196]	; (4086a4 <lv_obj_init_draw_rect_dsc+0x2b8>)
  4085e0:	4798      	blx	r3
                draw_dsc->pattern_recolor_opa = lv_obj_get_style_pattern_recolor_opa(obj, part);
  4085e2:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_REPEAT, pattern_repeat, bool, _int, scalar)
  4085e6:	2261      	movs	r2, #97	; 0x61
  4085e8:	4631      	mov	r1, r6
  4085ea:	4628      	mov	r0, r5
  4085ec:	4b2c      	ldr	r3, [pc, #176]	; (4086a0 <lv_obj_init_draw_rect_dsc+0x2b4>)
  4085ee:	4798      	blx	r3
  4085f0:	3000      	adds	r0, #0
  4085f2:	bf18      	it	ne
  4085f4:	2001      	movne	r0, #1
                draw_dsc->pattern_repeat = lv_obj_get_style_pattern_repeat(obj, part);
  4085f6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
  4085fa:	f360 0300 	bfi	r3, r0, #0, #1
  4085fe:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
                if(lv_img_src_get_type(draw_dsc->pattern_image) == LV_IMG_SRC_SYMBOL) {
  408602:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  408604:	4b2a      	ldr	r3, [pc, #168]	; (4086b0 <lv_obj_init_draw_rect_dsc+0x2c4>)
  408606:	4798      	blx	r3
  408608:	2802      	cmp	r0, #2
  40860a:	d00b      	beq.n	408624 <lv_obj_init_draw_rect_dsc+0x238>
                else if(draw_dsc->pattern_recolor_opa > LV_OPA_MIN) {
  40860c:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
  408610:	2b02      	cmp	r3, #2
  408612:	d815      	bhi.n	408640 <lv_obj_init_draw_rect_dsc+0x254>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_BLEND_MODE, pattern_blend_mode, lv_blend_mode_t, _int, scalar)
  408614:	2260      	movs	r2, #96	; 0x60
  408616:	4631      	mov	r1, r6
  408618:	4628      	mov	r0, r5
  40861a:	4b21      	ldr	r3, [pc, #132]	; (4086a0 <lv_obj_init_draw_rect_dsc+0x2b4>)
  40861c:	4798      	blx	r3
                draw_dsc->pattern_blend_mode = lv_obj_get_style_pattern_blend_mode(obj, part);
  40861e:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  408622:	e71a      	b.n	40845a <lv_obj_init_draw_rect_dsc+0x6e>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
  408624:	2269      	movs	r2, #105	; 0x69
  408626:	4631      	mov	r1, r6
  408628:	4628      	mov	r0, r5
  40862a:	4b20      	ldr	r3, [pc, #128]	; (4086ac <lv_obj_init_draw_rect_dsc+0x2c0>)
  40862c:	4798      	blx	r3
                    draw_dsc->pattern_recolor = lv_obj_get_style_pattern_recolor(obj, part);
  40862e:	86a0      	strh	r0, [r4, #52]	; 0x34
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  408630:	f248 028e 	movw	r2, #32910	; 0x808e
  408634:	4631      	mov	r1, r6
  408636:	4628      	mov	r0, r5
  408638:	4b1b      	ldr	r3, [pc, #108]	; (4086a8 <lv_obj_init_draw_rect_dsc+0x2bc>)
  40863a:	4798      	blx	r3
                    draw_dsc->pattern_font = lv_obj_get_style_text_font(obj, part);
  40863c:	6320      	str	r0, [r4, #48]	; 0x30
  40863e:	e7e9      	b.n	408614 <lv_obj_init_draw_rect_dsc+0x228>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
  408640:	2269      	movs	r2, #105	; 0x69
  408642:	4631      	mov	r1, r6
  408644:	4628      	mov	r0, r5
  408646:	4b19      	ldr	r3, [pc, #100]	; (4086ac <lv_obj_init_draw_rect_dsc+0x2c0>)
  408648:	4798      	blx	r3
                    draw_dsc->pattern_recolor = lv_obj_get_style_pattern_recolor(obj, part);
  40864a:	86a0      	strh	r0, [r4, #52]	; 0x34
  40864c:	e7e2      	b.n	408614 <lv_obj_init_draw_rect_dsc+0x228>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OPA, shadow_opa, lv_opa_t, _opa, scalar)
  40864e:	225c      	movs	r2, #92	; 0x5c
  408650:	4631      	mov	r1, r6
  408652:	4628      	mov	r0, r5
  408654:	4b13      	ldr	r3, [pc, #76]	; (4086a4 <lv_obj_init_draw_rect_dsc+0x2b8>)
  408656:	4798      	blx	r3
            draw_dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, part);
  408658:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
            if(draw_dsc->shadow_opa > LV_OPA_MIN) {
  40865c:	2802      	cmp	r0, #2
  40865e:	f67f af08 	bls.w	408472 <lv_obj_init_draw_rect_dsc+0x86>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
  408662:	2251      	movs	r2, #81	; 0x51
  408664:	4631      	mov	r1, r6
  408666:	4628      	mov	r0, r5
  408668:	f8df 8034 	ldr.w	r8, [pc, #52]	; 4086a0 <lv_obj_init_draw_rect_dsc+0x2b4>
  40866c:	47c0      	blx	r8
                draw_dsc->shadow_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
  40866e:	84a0      	strh	r0, [r4, #36]	; 0x24
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
  408670:	2252      	movs	r2, #82	; 0x52
  408672:	4631      	mov	r1, r6
  408674:	4628      	mov	r0, r5
  408676:	47c0      	blx	r8
                draw_dsc->shadow_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
  408678:	84e0      	strh	r0, [r4, #38]	; 0x26
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
  40867a:	2253      	movs	r2, #83	; 0x53
  40867c:	4631      	mov	r1, r6
  40867e:	4628      	mov	r0, r5
  408680:	47c0      	blx	r8
                draw_dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, part);
  408682:	8520      	strh	r0, [r4, #40]	; 0x28
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
  408684:	2259      	movs	r2, #89	; 0x59
  408686:	4631      	mov	r1, r6
  408688:	4628      	mov	r0, r5
  40868a:	4b08      	ldr	r3, [pc, #32]	; (4086ac <lv_obj_init_draw_rect_dsc+0x2c0>)
  40868c:	4798      	blx	r3
                draw_dsc->shadow_color = lv_obj_get_style_shadow_color(obj, part);
  40868e:	8420      	strh	r0, [r4, #32]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_BLEND_MODE, shadow_blend_mode, lv_blend_mode_t, _int, scalar)
  408690:	2254      	movs	r2, #84	; 0x54
  408692:	4631      	mov	r1, r6
  408694:	4628      	mov	r0, r5
  408696:	47c0      	blx	r8
                draw_dsc->shadow_blend_mode = lv_obj_get_style_shadow_blend_mode(obj, part);
  408698:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
  40869c:	e6e9      	b.n	408472 <lv_obj_init_draw_rect_dsc+0x86>
  40869e:	bf00      	nop
  4086a0:	00407485 	.word	0x00407485
  4086a4:	00406ef9 	.word	0x00406ef9
  4086a8:	0040737d 	.word	0x0040737d
  4086ac:	00406e71 	.word	0x00406e71
  4086b0:	0040d6dd 	.word	0x0040d6dd
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
  4086b4:	227c      	movs	r2, #124	; 0x7c
  4086b6:	4631      	mov	r1, r6
  4086b8:	4628      	mov	r0, r5
  4086ba:	4b1d      	ldr	r3, [pc, #116]	; (408730 <lv_obj_init_draw_rect_dsc+0x344>)
  4086bc:	4798      	blx	r3
            draw_dsc->value_opa = lv_obj_get_style_value_opa(obj, part);
  4086be:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
            if(draw_dsc->value_opa > LV_OPA_MIN) {
  4086c2:	2802      	cmp	r0, #2
  4086c4:	f67f aee1 	bls.w	40848a <lv_obj_init_draw_rect_dsc+0x9e>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
  4086c8:	2273      	movs	r2, #115	; 0x73
  4086ca:	4631      	mov	r1, r6
  4086cc:	4628      	mov	r0, r5
  4086ce:	f8df 806c 	ldr.w	r8, [pc, #108]	; 40873c <lv_obj_init_draw_rect_dsc+0x350>
  4086d2:	47c0      	blx	r8
                draw_dsc->value_ofs_x = lv_obj_get_style_value_ofs_x(obj, part);
  4086d4:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
  4086d8:	2274      	movs	r2, #116	; 0x74
  4086da:	4631      	mov	r1, r6
  4086dc:	4628      	mov	r0, r5
  4086de:	47c0      	blx	r8
                draw_dsc->value_ofs_y = lv_obj_get_style_value_ofs_y(obj, part);
  4086e0:	f8a4 004a 	strh.w	r0, [r4, #74]	; 0x4a
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  4086e4:	2279      	movs	r2, #121	; 0x79
  4086e6:	4631      	mov	r1, r6
  4086e8:	4628      	mov	r0, r5
  4086ea:	4b12      	ldr	r3, [pc, #72]	; (408734 <lv_obj_init_draw_rect_dsc+0x348>)
  4086ec:	4798      	blx	r3
                draw_dsc->value_color = lv_obj_get_style_value_color(obj, part);
  4086ee:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
  4086f2:	227e      	movs	r2, #126	; 0x7e
  4086f4:	4631      	mov	r1, r6
  4086f6:	4628      	mov	r0, r5
  4086f8:	4b0f      	ldr	r3, [pc, #60]	; (408738 <lv_obj_init_draw_rect_dsc+0x34c>)
  4086fa:	4798      	blx	r3
                draw_dsc->value_font = lv_obj_get_style_value_font(obj, part);
  4086fc:	6420      	str	r0, [r4, #64]	; 0x40
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int, scalar)
  4086fe:	2270      	movs	r2, #112	; 0x70
  408700:	4631      	mov	r1, r6
  408702:	4628      	mov	r0, r5
  408704:	47c0      	blx	r8
                draw_dsc->value_letter_space = lv_obj_get_style_value_letter_space(obj, part);
  408706:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LINE_SPACE, value_line_space, lv_style_int_t, _int, scalar)
  40870a:	2271      	movs	r2, #113	; 0x71
  40870c:	4631      	mov	r1, r6
  40870e:	4628      	mov	r0, r5
  408710:	47c0      	blx	r8
                draw_dsc->value_line_space = lv_obj_get_style_value_line_space(obj, part);
  408712:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
  408716:	2275      	movs	r2, #117	; 0x75
  408718:	4631      	mov	r1, r6
  40871a:	4628      	mov	r0, r5
  40871c:	47c0      	blx	r8
                draw_dsc->value_align = lv_obj_get_style_value_align(obj, part);
  40871e:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_BLEND_MODE, value_blend_mode, lv_blend_mode_t, _int, scalar)
  408722:	2272      	movs	r2, #114	; 0x72
  408724:	4631      	mov	r1, r6
  408726:	4628      	mov	r0, r5
  408728:	47c0      	blx	r8
                draw_dsc->value_blend_mode = lv_obj_get_style_value_blend_mode(obj, part);
  40872a:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  40872e:	e6ac      	b.n	40848a <lv_obj_init_draw_rect_dsc+0x9e>
  408730:	00406ef9 	.word	0x00406ef9
  408734:	00406e71 	.word	0x00406e71
  408738:	0040737d 	.word	0x0040737d
  40873c:	00407485 	.word	0x00407485

00408740 <lv_obj_design>:
{
  408740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408744:	b09a      	sub	sp, #104	; 0x68
  408746:	4604      	mov	r4, r0
  408748:	460e      	mov	r6, r1
    if(mode == LV_DESIGN_COVER_CHK) {
  40874a:	2a02      	cmp	r2, #2
  40874c:	d008      	beq.n	408760 <lv_obj_design+0x20>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
  40874e:	2a00      	cmp	r2, #0
  408750:	d06d      	beq.n	40882e <lv_obj_design+0xee>
    else if(mode == LV_DESIGN_DRAW_POST) {
  408752:	2a01      	cmp	r2, #1
  408754:	f000 80f4 	beq.w	408940 <lv_obj_design+0x200>
    return LV_DESIGN_RES_OK;
  408758:	2000      	movs	r0, #0
}
  40875a:	b01a      	add	sp, #104	; 0x68
  40875c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  408760:	2100      	movs	r1, #0
  408762:	4ba3      	ldr	r3, [pc, #652]	; (4089f0 <lv_obj_design+0x2b0>)
  408764:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) return LV_DESIGN_RES_MASKED;
  408766:	b108      	cbz	r0, 40876c <lv_obj_design+0x2c>
  408768:	2003      	movs	r0, #3
  40876a:	e7f6      	b.n	40875a <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  40876c:	2201      	movs	r2, #1
  40876e:	2100      	movs	r1, #0
  408770:	4620      	mov	r0, r4
  408772:	4d9f      	ldr	r5, [pc, #636]	; (4089f0 <lv_obj_design+0x2b0>)
  408774:	47a8      	blx	r5
  408776:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  408778:	2204      	movs	r2, #4
  40877a:	2100      	movs	r1, #0
  40877c:	4620      	mov	r0, r4
  40877e:	47a8      	blx	r5
  408780:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  408782:	2205      	movs	r2, #5
  408784:	2100      	movs	r1, #0
  408786:	4620      	mov	r0, r4
  408788:	47a8      	blx	r5
        lv_area_copy(&coords, &obj->coords);
  40878a:	f104 0110 	add.w	r1, r4, #16
    uint8_t * d8 = (uint8_t *)dst;
  40878e:	aa05      	add	r2, sp, #20
  408790:	2308      	movs	r3, #8
    while(len) {
  408792:	b12b      	cbz	r3, 4087a0 <lv_obj_design+0x60>
        *d8 = *s8;
  408794:	f811 5b01 	ldrb.w	r5, [r1], #1
  408798:	f802 5b01 	strb.w	r5, [r2], #1
        len--;
  40879c:	3b01      	subs	r3, #1
  40879e:	e7f8      	b.n	408792 <lv_obj_design+0x52>
        coords.x1 -= w;
  4087a0:	fa1f f888 	uxth.w	r8, r8
  4087a4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  4087a8:	eba3 0308 	sub.w	r3, r3, r8
  4087ac:	f8ad 3014 	strh.w	r3, [sp, #20]
        coords.x2 += w;
  4087b0:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  4087b4:	4498      	add	r8, r3
  4087b6:	f8ad 8018 	strh.w	r8, [sp, #24]
        coords.y1 -= h;
  4087ba:	b280      	uxth	r0, r0
  4087bc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4087c0:	1a1b      	subs	r3, r3, r0
  4087c2:	f8ad 3016 	strh.w	r3, [sp, #22]
        coords.y2 += h;
  4087c6:	f8bd 301a 	ldrh.w	r3, [sp, #26]
  4087ca:	4418      	add	r0, r3
  4087cc:	f8ad 001a 	strh.w	r0, [sp, #26]
        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
  4087d0:	463a      	mov	r2, r7
  4087d2:	a905      	add	r1, sp, #20
  4087d4:	4630      	mov	r0, r6
  4087d6:	4b87      	ldr	r3, [pc, #540]	; (4089f4 <lv_obj_design+0x2b4>)
  4087d8:	4798      	blx	r3
  4087da:	b908      	cbnz	r0, 4087e0 <lv_obj_design+0xa0>
  4087dc:	2002      	movs	r0, #2
  4087de:	e7bc      	b.n	40875a <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  4087e0:	222c      	movs	r2, #44	; 0x2c
  4087e2:	2100      	movs	r1, #0
  4087e4:	4620      	mov	r0, r4
  4087e6:	4b84      	ldr	r3, [pc, #528]	; (4089f8 <lv_obj_design+0x2b8>)
  4087e8:	4798      	blx	r3
        if(lv_obj_get_style_bg_opa(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
  4087ea:	28fc      	cmp	r0, #252	; 0xfc
  4087ec:	d801      	bhi.n	4087f2 <lv_obj_design+0xb2>
  4087ee:	2002      	movs	r0, #2
  4087f0:	e7b3      	b.n	40875a <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
  4087f2:	2220      	movs	r2, #32
  4087f4:	2100      	movs	r1, #0
  4087f6:	4620      	mov	r0, r4
  4087f8:	4b7d      	ldr	r3, [pc, #500]	; (4089f0 <lv_obj_design+0x2b0>)
  4087fa:	4798      	blx	r3
  4087fc:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_bg_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
  4087fe:	b108      	cbz	r0, 408804 <lv_obj_design+0xc4>
  408800:	2002      	movs	r0, #2
  408802:	e7aa      	b.n	40875a <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
  408804:	2232      	movs	r2, #50	; 0x32
  408806:	2100      	movs	r1, #0
  408808:	4620      	mov	r0, r4
  40880a:	4b79      	ldr	r3, [pc, #484]	; (4089f0 <lv_obj_design+0x2b0>)
  40880c:	4798      	blx	r3
  40880e:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_border_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
  408810:	b108      	cbz	r0, 408816 <lv_obj_design+0xd6>
  408812:	2002      	movs	r0, #2
  408814:	e7a1      	b.n	40875a <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  408816:	f248 020c 	movw	r2, #32780	; 0x800c
  40881a:	2100      	movs	r1, #0
  40881c:	4620      	mov	r0, r4
  40881e:	4b76      	ldr	r3, [pc, #472]	; (4089f8 <lv_obj_design+0x2b8>)
  408820:	4798      	blx	r3
        if(lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
  408822:	28fc      	cmp	r0, #252	; 0xfc
  408824:	d901      	bls.n	40882a <lv_obj_design+0xea>
        return LV_DESIGN_RES_COVER;
  408826:	2001      	movs	r0, #1
  408828:	e797      	b.n	40875a <lv_obj_design+0x1a>
        if(lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
  40882a:	2002      	movs	r0, #2
  40882c:	e795      	b.n	40875a <lv_obj_design+0x1a>
        lv_draw_rect_dsc_init(&draw_dsc);
  40882e:	a805      	add	r0, sp, #20
  408830:	4b72      	ldr	r3, [pc, #456]	; (4089fc <lv_obj_design+0x2bc>)
  408832:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  408834:	2233      	movs	r2, #51	; 0x33
  408836:	2100      	movs	r1, #0
  408838:	4620      	mov	r0, r4
  40883a:	4b6d      	ldr	r3, [pc, #436]	; (4089f0 <lv_obj_design+0x2b0>)
  40883c:	4798      	blx	r3
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
  40883e:	b128      	cbz	r0, 40884c <lv_obj_design+0x10c>
            draw_dsc.border_post = 1;
  408840:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
  408844:	f043 0301 	orr.w	r3, r3, #1
  408848:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
        lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
  40884c:	aa05      	add	r2, sp, #20
  40884e:	2100      	movs	r1, #0
  408850:	4620      	mov	r0, r4
  408852:	4b6b      	ldr	r3, [pc, #428]	; (408a00 <lv_obj_design+0x2c0>)
  408854:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  408856:	2204      	movs	r2, #4
  408858:	2100      	movs	r1, #0
  40885a:	4620      	mov	r0, r4
  40885c:	4d64      	ldr	r5, [pc, #400]	; (4089f0 <lv_obj_design+0x2b0>)
  40885e:	47a8      	blx	r5
  408860:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  408862:	2205      	movs	r2, #5
  408864:	2100      	movs	r1, #0
  408866:	4620      	mov	r0, r4
  408868:	47a8      	blx	r5
        lv_area_copy(&coords, &obj->coords);
  40886a:	f104 0710 	add.w	r7, r4, #16
    const uint8_t * s8 = (const uint8_t *)src;
  40886e:	4639      	mov	r1, r7
    uint8_t * d8 = (uint8_t *)dst;
  408870:	aa01      	add	r2, sp, #4
  408872:	2308      	movs	r3, #8
  408874:	e004      	b.n	408880 <lv_obj_design+0x140>
        *d8 = *s8;
  408876:	f811 5b01 	ldrb.w	r5, [r1], #1
  40887a:	f802 5b01 	strb.w	r5, [r2], #1
        len--;
  40887e:	3b01      	subs	r3, #1
    while(len) {
  408880:	2b00      	cmp	r3, #0
  408882:	d1f8      	bne.n	408876 <lv_obj_design+0x136>
        coords.x1 -= w;
  408884:	fa1f f888 	uxth.w	r8, r8
  408888:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  40888c:	eba3 0308 	sub.w	r3, r3, r8
  408890:	f8ad 3004 	strh.w	r3, [sp, #4]
        coords.x2 += w;
  408894:	f8bd 3008 	ldrh.w	r3, [sp, #8]
  408898:	4498      	add	r8, r3
  40889a:	f8ad 8008 	strh.w	r8, [sp, #8]
        coords.y1 -= h;
  40889e:	b280      	uxth	r0, r0
  4088a0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4088a4:	1a1b      	subs	r3, r3, r0
  4088a6:	f8ad 3006 	strh.w	r3, [sp, #6]
        coords.y2 += h;
  4088aa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
  4088ae:	4418      	add	r0, r3
  4088b0:	f8ad 000a 	strh.w	r0, [sp, #10]
        lv_draw_rect(&coords, clip_area, &draw_dsc);
  4088b4:	aa05      	add	r2, sp, #20
  4088b6:	4631      	mov	r1, r6
  4088b8:	a801      	add	r0, sp, #4
  4088ba:	4b52      	ldr	r3, [pc, #328]	; (408a04 <lv_obj_design+0x2c4>)
  4088bc:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  4088be:	2202      	movs	r2, #2
  4088c0:	2100      	movs	r1, #0
  4088c2:	4620      	mov	r0, r4
  4088c4:	4b4a      	ldr	r3, [pc, #296]	; (4089f0 <lv_obj_design+0x2b0>)
  4088c6:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
  4088c8:	b908      	cbnz	r0, 4088ce <lv_obj_design+0x18e>
    return LV_DESIGN_RES_OK;
  4088ca:	2000      	movs	r0, #0
  4088cc:	e745      	b.n	40875a <lv_obj_design+0x1a>
            lv_draw_mask_radius_param_t * mp = _lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
  4088ce:	201c      	movs	r0, #28
  4088d0:	4b4d      	ldr	r3, [pc, #308]	; (408a08 <lv_obj_design+0x2c8>)
  4088d2:	4798      	blx	r3
  4088d4:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  4088d6:	2201      	movs	r2, #1
  4088d8:	2100      	movs	r1, #0
  4088da:	4620      	mov	r0, r4
  4088dc:	4b44      	ldr	r3, [pc, #272]	; (4089f0 <lv_obj_design+0x2b0>)
  4088de:	4798      	blx	r3
            if(draw_dsc.border_post && draw_dsc.border_opa >= LV_OPA_MIN && draw_dsc.border_width > 0) {
  4088e0:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
  4088e4:	f013 0f01 	tst.w	r3, #1
  4088e8:	d01e      	beq.n	408928 <lv_obj_design+0x1e8>
  4088ea:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
  4088ee:	2b01      	cmp	r3, #1
  4088f0:	d91a      	bls.n	408928 <lv_obj_design+0x1e8>
  4088f2:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
  4088f6:	2b00      	cmp	r3, #0
  4088f8:	dd16      	ble.n	408928 <lv_obj_design+0x1e8>
                cc_area.x1 = obj->coords.x1 + 1;
  4088fa:	8a23      	ldrh	r3, [r4, #16]
  4088fc:	3301      	adds	r3, #1
  4088fe:	f8ad 300c 	strh.w	r3, [sp, #12]
                cc_area.y1 = obj->coords.y1 + 1;
  408902:	8a63      	ldrh	r3, [r4, #18]
  408904:	3301      	adds	r3, #1
  408906:	f8ad 300e 	strh.w	r3, [sp, #14]
                cc_area.x2 = obj->coords.x2 - 1;
  40890a:	8aa3      	ldrh	r3, [r4, #20]
  40890c:	3b01      	subs	r3, #1
  40890e:	f8ad 3010 	strh.w	r3, [sp, #16]
                cc_area.y2 = obj->coords.y2 - 1;
  408912:	8ae3      	ldrh	r3, [r4, #22]
  408914:	3b01      	subs	r3, #1
  408916:	f8ad 3012 	strh.w	r3, [sp, #18]
                lv_draw_mask_radius_init(mp, &cc_area, r, false);
  40891a:	2300      	movs	r3, #0
  40891c:	4602      	mov	r2, r0
  40891e:	a903      	add	r1, sp, #12
  408920:	4628      	mov	r0, r5
  408922:	4e3a      	ldr	r6, [pc, #232]	; (408a0c <lv_obj_design+0x2cc>)
  408924:	47b0      	blx	r6
            if(draw_dsc.border_post && draw_dsc.border_opa >= LV_OPA_MIN && draw_dsc.border_width > 0) {
  408926:	e005      	b.n	408934 <lv_obj_design+0x1f4>
                lv_draw_mask_radius_init(mp, &obj->coords, r, false);
  408928:	2300      	movs	r3, #0
  40892a:	4602      	mov	r2, r0
  40892c:	4639      	mov	r1, r7
  40892e:	4628      	mov	r0, r5
  408930:	4e36      	ldr	r6, [pc, #216]	; (408a0c <lv_obj_design+0x2cc>)
  408932:	47b0      	blx	r6
            lv_draw_mask_add(mp, obj + 8);
  408934:	f504 7118 	add.w	r1, r4, #608	; 0x260
  408938:	4628      	mov	r0, r5
  40893a:	4b35      	ldr	r3, [pc, #212]	; (408a10 <lv_obj_design+0x2d0>)
  40893c:	4798      	blx	r3
  40893e:	e7c4      	b.n	4088ca <lv_obj_design+0x18a>
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  408940:	2202      	movs	r2, #2
  408942:	2100      	movs	r1, #0
  408944:	4b2a      	ldr	r3, [pc, #168]	; (4089f0 <lv_obj_design+0x2b0>)
  408946:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
  408948:	b938      	cbnz	r0, 40895a <lv_obj_design+0x21a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  40894a:	2233      	movs	r2, #51	; 0x33
  40894c:	2100      	movs	r1, #0
  40894e:	4620      	mov	r0, r4
  408950:	4b27      	ldr	r3, [pc, #156]	; (4089f0 <lv_obj_design+0x2b0>)
  408952:	4798      	blx	r3
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
  408954:	b940      	cbnz	r0, 408968 <lv_obj_design+0x228>
    return LV_DESIGN_RES_OK;
  408956:	2000      	movs	r0, #0
  408958:	e6ff      	b.n	40875a <lv_obj_design+0x1a>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(obj + 8);
  40895a:	f504 7018 	add.w	r0, r4, #608	; 0x260
  40895e:	4b2d      	ldr	r3, [pc, #180]	; (408a14 <lv_obj_design+0x2d4>)
  408960:	4798      	blx	r3
            _lv_mem_buf_release(param);
  408962:	4b2d      	ldr	r3, [pc, #180]	; (408a18 <lv_obj_design+0x2d8>)
  408964:	4798      	blx	r3
  408966:	e7f0      	b.n	40894a <lv_obj_design+0x20a>
            lv_draw_rect_dsc_init(&draw_dsc);
  408968:	a805      	add	r0, sp, #20
  40896a:	4b24      	ldr	r3, [pc, #144]	; (4089fc <lv_obj_design+0x2bc>)
  40896c:	4798      	blx	r3
            draw_dsc.bg_opa = LV_OPA_TRANSP;
  40896e:	2500      	movs	r5, #0
  408970:	f88d 5020 	strb.w	r5, [sp, #32]
            draw_dsc.pattern_opa = LV_OPA_TRANSP;
  408974:	f88d 504a 	strb.w	r5, [sp, #74]	; 0x4a
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
  408978:	f88d 503e 	strb.w	r5, [sp, #62]	; 0x3e
            draw_dsc.value_opa = LV_OPA_TRANSP;
  40897c:	f88d 5058 	strb.w	r5, [sp, #88]	; 0x58
            lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
  408980:	aa05      	add	r2, sp, #20
  408982:	4629      	mov	r1, r5
  408984:	4620      	mov	r0, r4
  408986:	4b1e      	ldr	r3, [pc, #120]	; (408a00 <lv_obj_design+0x2c0>)
  408988:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  40898a:	2204      	movs	r2, #4
  40898c:	4629      	mov	r1, r5
  40898e:	4620      	mov	r0, r4
  408990:	4f17      	ldr	r7, [pc, #92]	; (4089f0 <lv_obj_design+0x2b0>)
  408992:	47b8      	blx	r7
  408994:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  408996:	2205      	movs	r2, #5
  408998:	4629      	mov	r1, r5
  40899a:	4620      	mov	r0, r4
  40899c:	47b8      	blx	r7
            lv_area_copy(&coords, &obj->coords);
  40899e:	3410      	adds	r4, #16
    uint8_t * d8 = (uint8_t *)dst;
  4089a0:	aa03      	add	r2, sp, #12
  4089a2:	2308      	movs	r3, #8
  4089a4:	e004      	b.n	4089b0 <lv_obj_design+0x270>
        *d8 = *s8;
  4089a6:	f814 1b01 	ldrb.w	r1, [r4], #1
  4089aa:	f802 1b01 	strb.w	r1, [r2], #1
        len--;
  4089ae:	3b01      	subs	r3, #1
    while(len) {
  4089b0:	2b00      	cmp	r3, #0
  4089b2:	d1f8      	bne.n	4089a6 <lv_obj_design+0x266>
            coords.x1 -= w;
  4089b4:	fa1f f788 	uxth.w	r7, r8
  4089b8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4089bc:	1bdb      	subs	r3, r3, r7
  4089be:	f8ad 300c 	strh.w	r3, [sp, #12]
            coords.x2 += w;
  4089c2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  4089c6:	441f      	add	r7, r3
  4089c8:	f8ad 7010 	strh.w	r7, [sp, #16]
            coords.y1 -= h;
  4089cc:	b280      	uxth	r0, r0
  4089ce:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  4089d2:	1a1b      	subs	r3, r3, r0
  4089d4:	f8ad 300e 	strh.w	r3, [sp, #14]
            coords.y2 += h;
  4089d8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  4089dc:	4418      	add	r0, r3
  4089de:	f8ad 0012 	strh.w	r0, [sp, #18]
            lv_draw_rect(&coords, clip_area, &draw_dsc);
  4089e2:	aa05      	add	r2, sp, #20
  4089e4:	4631      	mov	r1, r6
  4089e6:	a803      	add	r0, sp, #12
  4089e8:	4b06      	ldr	r3, [pc, #24]	; (408a04 <lv_obj_design+0x2c4>)
  4089ea:	4798      	blx	r3
    return LV_DESIGN_RES_OK;
  4089ec:	2000      	movs	r0, #0
  4089ee:	e6b4      	b.n	40875a <lv_obj_design+0x1a>
  4089f0:	00407485 	.word	0x00407485
  4089f4:	004158d9 	.word	0x004158d9
  4089f8:	00406ef9 	.word	0x00406ef9
  4089fc:	0041250d 	.word	0x0041250d
  408a00:	004083ed 	.word	0x004083ed
  408a04:	00412559 	.word	0x00412559
  408a08:	00416a81 	.word	0x00416a81
  408a0c:	0040fedd 	.word	0x0040fedd
  408a10:	0040fc61 	.word	0x0040fc61
  408a14:	0040fd09 	.word	0x0040fd09
  408a18:	00416831 	.word	0x00416831

00408a1c <lv_obj_init_draw_label_dsc>:
{
  408a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408a1e:	4605      	mov	r5, r0
  408a20:	460e      	mov	r6, r1
  408a22:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
  408a24:	f248 028c 	movw	r2, #32908	; 0x808c
  408a28:	4b2a      	ldr	r3, [pc, #168]	; (408ad4 <lv_obj_init_draw_label_dsc+0xb8>)
  408a2a:	4798      	blx	r3
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
  408a2c:	7320      	strb	r0, [r4, #12]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
  408a2e:	2802      	cmp	r0, #2
  408a30:	d800      	bhi.n	408a34 <lv_obj_init_draw_label_dsc+0x18>
  408a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  408a34:	f248 020c 	movw	r2, #32780	; 0x800c
  408a38:	4631      	mov	r1, r6
  408a3a:	4628      	mov	r0, r5
  408a3c:	4b25      	ldr	r3, [pc, #148]	; (408ad4 <lv_obj_init_draw_label_dsc+0xb8>)
  408a3e:	4798      	blx	r3
    if(opa_scale < LV_OPA_MAX) {
  408a40:	28fc      	cmp	r0, #252	; 0xfc
  408a42:	d805      	bhi.n	408a50 <lv_obj_init_draw_label_dsc+0x34>
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
  408a44:	7b23      	ldrb	r3, [r4, #12]
  408a46:	fb10 f003 	smulbb	r0, r0, r3
  408a4a:	f3c0 2007 	ubfx	r0, r0, #8, #8
  408a4e:	7320      	strb	r0, [r4, #12]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
  408a50:	7b23      	ldrb	r3, [r4, #12]
  408a52:	2b02      	cmp	r3, #2
  408a54:	d9ed      	bls.n	408a32 <lv_obj_init_draw_label_dsc+0x16>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  408a56:	f248 0289 	movw	r2, #32905	; 0x8089
  408a5a:	4631      	mov	r1, r6
  408a5c:	4628      	mov	r0, r5
  408a5e:	4b1e      	ldr	r3, [pc, #120]	; (408ad8 <lv_obj_init_draw_label_dsc+0xbc>)
  408a60:	4798      	blx	r3
    draw_dsc->color = lv_obj_get_style_text_color(obj, part);
  408a62:	8020      	strh	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
  408a64:	f248 0280 	movw	r2, #32896	; 0x8080
  408a68:	4631      	mov	r1, r6
  408a6a:	4628      	mov	r0, r5
  408a6c:	4f1b      	ldr	r7, [pc, #108]	; (408adc <lv_obj_init_draw_label_dsc+0xc0>)
  408a6e:	47b8      	blx	r7
    draw_dsc->letter_space = lv_obj_get_style_text_letter_space(obj, part);
  408a70:	8220      	strh	r0, [r4, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  408a72:	f248 0281 	movw	r2, #32897	; 0x8081
  408a76:	4631      	mov	r1, r6
  408a78:	4628      	mov	r0, r5
  408a7a:	47b8      	blx	r7
    draw_dsc->line_space = lv_obj_get_style_text_line_space(obj, part);
  408a7c:	81e0      	strh	r0, [r4, #14]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
  408a7e:	f248 0282 	movw	r2, #32898	; 0x8082
  408a82:	4631      	mov	r1, r6
  408a84:	4628      	mov	r0, r5
  408a86:	47b8      	blx	r7
    draw_dsc->decor = lv_obj_get_style_text_decor(obj, part);
  408a88:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
  408a8c:	f248 0283 	movw	r2, #32899	; 0x8083
  408a90:	4631      	mov	r1, r6
  408a92:	4628      	mov	r0, r5
  408a94:	47b8      	blx	r7
    draw_dsc->blend_mode = lv_obj_get_style_text_blend_mode(obj, part);
  408a96:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  408a9a:	f248 028e 	movw	r2, #32910	; 0x808e
  408a9e:	4631      	mov	r1, r6
  408aa0:	4628      	mov	r0, r5
  408aa2:	4b0f      	ldr	r3, [pc, #60]	; (408ae0 <lv_obj_init_draw_label_dsc+0xc4>)
  408aa4:	4798      	blx	r3
    draw_dsc->font = lv_obj_get_style_text_font(obj, part);
  408aa6:	60a0      	str	r0, [r4, #8]
    if(draw_dsc->sel_start != LV_DRAW_LABEL_NO_TXT_SEL && draw_dsc->sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
  408aa8:	6962      	ldr	r2, [r4, #20]
  408aaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
  408aae:	429a      	cmp	r2, r3
  408ab0:	d0bf      	beq.n	408a32 <lv_obj_init_draw_label_dsc+0x16>
  408ab2:	69a2      	ldr	r2, [r4, #24]
  408ab4:	429a      	cmp	r2, r3
  408ab6:	d0bc      	beq.n	408a32 <lv_obj_init_draw_label_dsc+0x16>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
  408ab8:	f248 028a 	movw	r2, #32906	; 0x808a
  408abc:	4631      	mov	r1, r6
  408abe:	4628      	mov	r0, r5
  408ac0:	4f05      	ldr	r7, [pc, #20]	; (408ad8 <lv_obj_init_draw_label_dsc+0xbc>)
  408ac2:	47b8      	blx	r7
        draw_dsc->sel_color = lv_obj_get_style_text_sel_color(obj, part);
  408ac4:	8060      	strh	r0, [r4, #2]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color, nonscalar)
  408ac6:	f248 028b 	movw	r2, #32907	; 0x808b
  408aca:	4631      	mov	r1, r6
  408acc:	4628      	mov	r0, r5
  408ace:	47b8      	blx	r7
        draw_dsc->sel_bg_color = lv_obj_get_style_text_sel_bg_color(obj, part);
  408ad0:	80a0      	strh	r0, [r4, #4]
  408ad2:	e7ae      	b.n	408a32 <lv_obj_init_draw_label_dsc+0x16>
  408ad4:	00406ef9 	.word	0x00406ef9
  408ad8:	00406e71 	.word	0x00406e71
  408adc:	00407485 	.word	0x00407485
  408ae0:	0040737d 	.word	0x0040737d

00408ae4 <lv_obj_init_draw_img_dsc>:
{
  408ae4:	b570      	push	{r4, r5, r6, lr}
  408ae6:	4605      	mov	r5, r0
  408ae8:	460e      	mov	r6, r1
  408aea:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
  408aec:	f248 02ac 	movw	r2, #32940	; 0x80ac
  408af0:	4b25      	ldr	r3, [pc, #148]	; (408b88 <lv_obj_init_draw_img_dsc+0xa4>)
  408af2:	4798      	blx	r3
    draw_dsc->opa = lv_obj_get_style_image_opa(obj, part);
  408af4:	7020      	strb	r0, [r4, #0]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
  408af6:	2802      	cmp	r0, #2
  408af8:	d800      	bhi.n	408afc <lv_obj_init_draw_img_dsc+0x18>
  408afa:	bd70      	pop	{r4, r5, r6, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  408afc:	f248 020c 	movw	r2, #32780	; 0x800c
  408b00:	4631      	mov	r1, r6
  408b02:	4628      	mov	r0, r5
  408b04:	4b20      	ldr	r3, [pc, #128]	; (408b88 <lv_obj_init_draw_img_dsc+0xa4>)
  408b06:	4798      	blx	r3
    if(opa_scale < LV_OPA_MAX) {
  408b08:	28fc      	cmp	r0, #252	; 0xfc
  408b0a:	d805      	bhi.n	408b18 <lv_obj_init_draw_img_dsc+0x34>
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
  408b0c:	7823      	ldrb	r3, [r4, #0]
  408b0e:	fb10 f003 	smulbb	r0, r0, r3
  408b12:	f3c0 2007 	ubfx	r0, r0, #8, #8
  408b16:	7020      	strb	r0, [r4, #0]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
  408b18:	7823      	ldrb	r3, [r4, #0]
  408b1a:	2b02      	cmp	r3, #2
  408b1c:	d9ed      	bls.n	408afa <lv_obj_init_draw_img_dsc+0x16>
    draw_dsc->angle = 0;
  408b1e:	2300      	movs	r3, #0
  408b20:	8063      	strh	r3, [r4, #2]
    draw_dsc->zoom = LV_IMG_ZOOM_NONE;
  408b22:	f44f 7380 	mov.w	r3, #256	; 0x100
  408b26:	8123      	strh	r3, [r4, #8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  408b28:	8aab      	ldrh	r3, [r5, #20]
  408b2a:	8a2a      	ldrh	r2, [r5, #16]
  408b2c:	1a9b      	subs	r3, r3, r2
  408b2e:	b29b      	uxth	r3, r3
  408b30:	3301      	adds	r3, #1
  408b32:	b21b      	sxth	r3, r3
    draw_dsc->pivot.x = lv_area_get_width(&obj->coords) / 2;
  408b34:	2b00      	cmp	r3, #0
  408b36:	db1b      	blt.n	408b70 <lv_obj_init_draw_img_dsc+0x8c>
  408b38:	105b      	asrs	r3, r3, #1
  408b3a:	80a3      	strh	r3, [r4, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  408b3c:	8aeb      	ldrh	r3, [r5, #22]
  408b3e:	8a6a      	ldrh	r2, [r5, #18]
  408b40:	1a9b      	subs	r3, r3, r2
  408b42:	b29b      	uxth	r3, r3
  408b44:	3301      	adds	r3, #1
  408b46:	b21b      	sxth	r3, r3
    draw_dsc->pivot.y = lv_area_get_height(&obj->coords) / 2;
  408b48:	2b00      	cmp	r3, #0
  408b4a:	db13      	blt.n	408b74 <lv_obj_init_draw_img_dsc+0x90>
  408b4c:	105b      	asrs	r3, r3, #1
  408b4e:	80e3      	strh	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
  408b50:	f248 02ad 	movw	r2, #32941	; 0x80ad
  408b54:	4631      	mov	r1, r6
  408b56:	4628      	mov	r0, r5
  408b58:	4b0b      	ldr	r3, [pc, #44]	; (408b88 <lv_obj_init_draw_img_dsc+0xa4>)
  408b5a:	4798      	blx	r3
    draw_dsc->recolor_opa = lv_obj_get_style_image_recolor_opa(obj, part);
  408b5c:	72a0      	strb	r0, [r4, #10]
    if(draw_dsc->recolor_opa > 0) {
  408b5e:	b958      	cbnz	r0, 408b78 <lv_obj_init_draw_img_dsc+0x94>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
  408b60:	f248 02a0 	movw	r2, #32928	; 0x80a0
  408b64:	4631      	mov	r1, r6
  408b66:	4628      	mov	r0, r5
  408b68:	4b08      	ldr	r3, [pc, #32]	; (408b8c <lv_obj_init_draw_img_dsc+0xa8>)
  408b6a:	4798      	blx	r3
    draw_dsc->blend_mode = lv_obj_get_style_image_blend_mode(obj, part);
  408b6c:	73a0      	strb	r0, [r4, #14]
  408b6e:	e7c4      	b.n	408afa <lv_obj_init_draw_img_dsc+0x16>
    draw_dsc->pivot.x = lv_area_get_width(&obj->coords) / 2;
  408b70:	3301      	adds	r3, #1
  408b72:	e7e1      	b.n	408b38 <lv_obj_init_draw_img_dsc+0x54>
    draw_dsc->pivot.y = lv_area_get_height(&obj->coords) / 2;
  408b74:	3301      	adds	r3, #1
  408b76:	e7e9      	b.n	408b4c <lv_obj_init_draw_img_dsc+0x68>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  408b78:	f248 02a9 	movw	r2, #32937	; 0x80a9
  408b7c:	4631      	mov	r1, r6
  408b7e:	4628      	mov	r0, r5
  408b80:	4b03      	ldr	r3, [pc, #12]	; (408b90 <lv_obj_init_draw_img_dsc+0xac>)
  408b82:	4798      	blx	r3
        draw_dsc->recolor = lv_obj_get_style_image_recolor(obj, part);
  408b84:	81a0      	strh	r0, [r4, #12]
  408b86:	e7eb      	b.n	408b60 <lv_obj_init_draw_img_dsc+0x7c>
  408b88:	00406ef9 	.word	0x00406ef9
  408b8c:	00407485 	.word	0x00407485
  408b90:	00406e71 	.word	0x00406e71

00408b94 <lv_obj_init_draw_line_dsc>:
{
  408b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408b96:	4605      	mov	r5, r0
  408b98:	460e      	mov	r6, r1
  408b9a:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  408b9c:	2290      	movs	r2, #144	; 0x90
  408b9e:	4b24      	ldr	r3, [pc, #144]	; (408c30 <lv_obj_init_draw_line_dsc+0x9c>)
  408ba0:	4798      	blx	r3
    draw_dsc->width = lv_obj_get_style_line_width(obj, part);
  408ba2:	8060      	strh	r0, [r4, #2]
    if(draw_dsc->width == 0) return;
  408ba4:	b900      	cbnz	r0, 408ba8 <lv_obj_init_draw_line_dsc+0x14>
  408ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
  408ba8:	229c      	movs	r2, #156	; 0x9c
  408baa:	4631      	mov	r1, r6
  408bac:	4628      	mov	r0, r5
  408bae:	4b21      	ldr	r3, [pc, #132]	; (408c34 <lv_obj_init_draw_line_dsc+0xa0>)
  408bb0:	4798      	blx	r3
    draw_dsc->opa = lv_obj_get_style_line_opa(obj, part);
  408bb2:	7220      	strb	r0, [r4, #8]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
  408bb4:	2802      	cmp	r0, #2
  408bb6:	d9f6      	bls.n	408ba6 <lv_obj_init_draw_line_dsc+0x12>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  408bb8:	f248 020c 	movw	r2, #32780	; 0x800c
  408bbc:	4631      	mov	r1, r6
  408bbe:	4628      	mov	r0, r5
  408bc0:	4b1c      	ldr	r3, [pc, #112]	; (408c34 <lv_obj_init_draw_line_dsc+0xa0>)
  408bc2:	4798      	blx	r3
    if(opa_scale < LV_OPA_MAX) {
  408bc4:	28fc      	cmp	r0, #252	; 0xfc
  408bc6:	d805      	bhi.n	408bd4 <lv_obj_init_draw_line_dsc+0x40>
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
  408bc8:	7a23      	ldrb	r3, [r4, #8]
  408bca:	fb10 f003 	smulbb	r0, r0, r3
  408bce:	f3c0 2007 	ubfx	r0, r0, #8, #8
  408bd2:	7220      	strb	r0, [r4, #8]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
  408bd4:	7a23      	ldrb	r3, [r4, #8]
  408bd6:	2b02      	cmp	r3, #2
  408bd8:	d9e5      	bls.n	408ba6 <lv_obj_init_draw_line_dsc+0x12>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  408bda:	2299      	movs	r2, #153	; 0x99
  408bdc:	4631      	mov	r1, r6
  408bde:	4628      	mov	r0, r5
  408be0:	4b15      	ldr	r3, [pc, #84]	; (408c38 <lv_obj_init_draw_line_dsc+0xa4>)
  408be2:	4798      	blx	r3
    draw_dsc->color = lv_obj_get_style_line_color(obj, part);
  408be4:	8020      	strh	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_WIDTH, line_dash_width, lv_style_int_t, _int, scalar)
  408be6:	2292      	movs	r2, #146	; 0x92
  408be8:	4631      	mov	r1, r6
  408bea:	4628      	mov	r0, r5
  408bec:	4b10      	ldr	r3, [pc, #64]	; (408c30 <lv_obj_init_draw_line_dsc+0x9c>)
  408bee:	4798      	blx	r3
    draw_dsc->dash_width = lv_obj_get_style_line_dash_width(obj, part);
  408bf0:	80a0      	strh	r0, [r4, #4]
    if(draw_dsc->dash_width) {
  408bf2:	b9b0      	cbnz	r0, 408c22 <lv_obj_init_draw_line_dsc+0x8e>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
  408bf4:	2294      	movs	r2, #148	; 0x94
  408bf6:	4631      	mov	r1, r6
  408bf8:	4628      	mov	r0, r5
  408bfa:	4f0d      	ldr	r7, [pc, #52]	; (408c30 <lv_obj_init_draw_line_dsc+0x9c>)
  408bfc:	47b8      	blx	r7
  408bfe:	3000      	adds	r0, #0
  408c00:	bf18      	it	ne
  408c02:	2001      	movne	r0, #1
    draw_dsc->round_start = lv_obj_get_style_line_rounded(obj, part);
  408c04:	7a63      	ldrb	r3, [r4, #9]
  408c06:	f360 0382 	bfi	r3, r0, #2, #1
    draw_dsc->round_end = draw_dsc->round_start;
  408c0a:	f360 03c3 	bfi	r3, r0, #3, #1
  408c0e:	7263      	strb	r3, [r4, #9]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_BLEND_MODE, line_blend_mode, lv_blend_mode_t, _int, scalar)
  408c10:	2291      	movs	r2, #145	; 0x91
  408c12:	4631      	mov	r1, r6
  408c14:	4628      	mov	r0, r5
  408c16:	47b8      	blx	r7
    draw_dsc->blend_mode = lv_obj_get_style_line_blend_mode(obj, part);
  408c18:	7a63      	ldrb	r3, [r4, #9]
  408c1a:	f360 0301 	bfi	r3, r0, #0, #2
  408c1e:	7263      	strb	r3, [r4, #9]
  408c20:	e7c1      	b.n	408ba6 <lv_obj_init_draw_line_dsc+0x12>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int, scalar)
  408c22:	2293      	movs	r2, #147	; 0x93
  408c24:	4631      	mov	r1, r6
  408c26:	4628      	mov	r0, r5
  408c28:	4b01      	ldr	r3, [pc, #4]	; (408c30 <lv_obj_init_draw_line_dsc+0x9c>)
  408c2a:	4798      	blx	r3
        draw_dsc->dash_gap = lv_obj_get_style_line_dash_gap(obj, part);
  408c2c:	80e0      	strh	r0, [r4, #6]
  408c2e:	e7e1      	b.n	408bf4 <lv_obj_init_draw_line_dsc+0x60>
  408c30:	00407485 	.word	0x00407485
  408c34:	00406ef9 	.word	0x00406ef9
  408c38:	00406e71 	.word	0x00406e71

00408c3c <style_snapshot>:
{
  408c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408c40:	b083      	sub	sp, #12
  408c42:	4605      	mov	r5, r0
  408c44:	4689      	mov	r9, r1
  408c46:	4614      	mov	r4, r2
    _lv_obj_disable_style_caching(obj, true);
  408c48:	2101      	movs	r1, #1
  408c4a:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 408e3c <style_snapshot+0x200>
  408c4e:	47c0      	blx	r8
    _lv_memset_00(shot, sizeof(style_snapshot_t));
  408c50:	21bc      	movs	r1, #188	; 0xbc
  408c52:	4620      	mov	r0, r4
  408c54:	4b6d      	ldr	r3, [pc, #436]	; (408e0c <style_snapshot+0x1d0>)
  408c56:	4798      	blx	r3
    lv_draw_rect_dsc_init(&shot->rect);
  408c58:	4620      	mov	r0, r4
  408c5a:	4b6d      	ldr	r3, [pc, #436]	; (408e10 <style_snapshot+0x1d4>)
  408c5c:	4798      	blx	r3
    lv_draw_label_dsc_init(&shot->label);
  408c5e:	f104 0a54 	add.w	sl, r4, #84	; 0x54
  408c62:	4650      	mov	r0, sl
  408c64:	4b6b      	ldr	r3, [pc, #428]	; (408e14 <style_snapshot+0x1d8>)
  408c66:	4798      	blx	r3
    lv_draw_img_dsc_init(&shot->img);
  408c68:	f104 0382 	add.w	r3, r4, #130	; 0x82
  408c6c:	9301      	str	r3, [sp, #4]
  408c6e:	4618      	mov	r0, r3
  408c70:	4b69      	ldr	r3, [pc, #420]	; (408e18 <style_snapshot+0x1dc>)
  408c72:	4798      	blx	r3
    lv_draw_line_dsc_init(&shot->line);
  408c74:	f104 0678 	add.w	r6, r4, #120	; 0x78
  408c78:	4630      	mov	r0, r6
  408c7a:	4b68      	ldr	r3, [pc, #416]	; (408e1c <style_snapshot+0x1e0>)
  408c7c:	4798      	blx	r3
    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  408c7e:	4649      	mov	r1, r9
  408c80:	4628      	mov	r0, r5
  408c82:	4b67      	ldr	r3, [pc, #412]	; (408e20 <style_snapshot+0x1e4>)
  408c84:	4798      	blx	r3
  408c86:	4607      	mov	r7, r0
    bool trans_ori = list->skip_trans;
  408c88:	7943      	ldrb	r3, [r0, #5]
  408c8a:	f003 0b01 	and.w	fp, r3, #1
    list->skip_trans = 1;
  408c8e:	f043 0301 	orr.w	r3, r3, #1
  408c92:	7143      	strb	r3, [r0, #5]
    lv_obj_init_draw_rect_dsc(obj, part, &shot->rect);
  408c94:	4622      	mov	r2, r4
  408c96:	4649      	mov	r1, r9
  408c98:	4628      	mov	r0, r5
  408c9a:	4b62      	ldr	r3, [pc, #392]	; (408e24 <style_snapshot+0x1e8>)
  408c9c:	4798      	blx	r3
    lv_obj_init_draw_label_dsc(obj, part, &shot->label);
  408c9e:	4652      	mov	r2, sl
  408ca0:	4649      	mov	r1, r9
  408ca2:	4628      	mov	r0, r5
  408ca4:	4b60      	ldr	r3, [pc, #384]	; (408e28 <style_snapshot+0x1ec>)
  408ca6:	4798      	blx	r3
    lv_obj_init_draw_img_dsc(obj, part, &shot->img);
  408ca8:	9a01      	ldr	r2, [sp, #4]
  408caa:	4649      	mov	r1, r9
  408cac:	4628      	mov	r0, r5
  408cae:	4b5f      	ldr	r3, [pc, #380]	; (408e2c <style_snapshot+0x1f0>)
  408cb0:	4798      	blx	r3
    lv_obj_init_draw_line_dsc(obj, part, &shot->line);
  408cb2:	4632      	mov	r2, r6
  408cb4:	4649      	mov	r1, r9
  408cb6:	4628      	mov	r0, r5
  408cb8:	4b5d      	ldr	r3, [pc, #372]	; (408e30 <style_snapshot+0x1f4>)
  408cba:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  408cbc:	2210      	movs	r2, #16
  408cbe:	4649      	mov	r1, r9
  408cc0:	4628      	mov	r0, r5
  408cc2:	4e5c      	ldr	r6, [pc, #368]	; (408e34 <style_snapshot+0x1f8>)
  408cc4:	47b0      	blx	r6
    shot->pad_top = lv_obj_get_style_pad_top(obj, part);
  408cc6:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  408cca:	2211      	movs	r2, #17
  408ccc:	4649      	mov	r1, r9
  408cce:	4628      	mov	r0, r5
  408cd0:	47b0      	blx	r6
    shot->pad_bottom = lv_obj_get_style_pad_bottom(obj, part);
  408cd2:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  408cd6:	2213      	movs	r2, #19
  408cd8:	4649      	mov	r1, r9
  408cda:	4628      	mov	r0, r5
  408cdc:	47b0      	blx	r6
    shot->pad_right = lv_obj_get_style_pad_right(obj, part);
  408cde:	f8a4 0096 	strh.w	r0, [r4, #150]	; 0x96
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  408ce2:	2212      	movs	r2, #18
  408ce4:	4649      	mov	r1, r9
  408ce6:	4628      	mov	r0, r5
  408ce8:	47b0      	blx	r6
    shot->pad_left = lv_obj_get_style_pad_left(obj, part);
  408cea:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  408cee:	2214      	movs	r2, #20
  408cf0:	4649      	mov	r1, r9
  408cf2:	4628      	mov	r0, r5
  408cf4:	47b0      	blx	r6
    shot->pad_inner = lv_obj_get_style_pad_inner(obj, part);
  408cf6:	f8a4 009a 	strh.w	r0, [r4, #154]	; 0x9a
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  408cfa:	2215      	movs	r2, #21
  408cfc:	4649      	mov	r1, r9
  408cfe:	4628      	mov	r0, r5
  408d00:	47b0      	blx	r6
    shot->margin_top = lv_obj_get_style_margin_top(obj, part);
  408d02:	f8a4 009c 	strh.w	r0, [r4, #156]	; 0x9c
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  408d06:	2216      	movs	r2, #22
  408d08:	4649      	mov	r1, r9
  408d0a:	4628      	mov	r0, r5
  408d0c:	47b0      	blx	r6
    shot->margin_bottom = lv_obj_get_style_margin_bottom(obj, part);
  408d0e:	f8a4 009e 	strh.w	r0, [r4, #158]	; 0x9e
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  408d12:	2217      	movs	r2, #23
  408d14:	4649      	mov	r1, r9
  408d16:	4628      	mov	r0, r5
  408d18:	47b0      	blx	r6
    shot->margin_left = lv_obj_get_style_margin_left(obj, part);
  408d1a:	f8a4 00a0 	strh.w	r0, [r4, #160]	; 0xa0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
  408d1e:	2218      	movs	r2, #24
  408d20:	4649      	mov	r1, r9
  408d22:	4628      	mov	r0, r5
  408d24:	47b0      	blx	r6
    shot->margin_right = lv_obj_get_style_margin_right(obj, part);
  408d26:	f8a4 00a2 	strh.w	r0, [r4, #162]	; 0xa2
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  408d2a:	2203      	movs	r2, #3
  408d2c:	4649      	mov	r1, r9
  408d2e:	4628      	mov	r0, r5
  408d30:	47b0      	blx	r6
    shot->size = lv_obj_get_style_size(obj, part);
  408d32:	f8a4 00a4 	strh.w	r0, [r4, #164]	; 0xa4
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  408d36:	2204      	movs	r2, #4
  408d38:	4649      	mov	r1, r9
  408d3a:	4628      	mov	r0, r5
  408d3c:	47b0      	blx	r6
    shot->transform_width = lv_obj_get_style_transform_width(obj, part);
  408d3e:	f8a4 00a6 	strh.w	r0, [r4, #166]	; 0xa6
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  408d42:	2205      	movs	r2, #5
  408d44:	4649      	mov	r1, r9
  408d46:	4628      	mov	r0, r5
  408d48:	47b0      	blx	r6
    shot->transform_height = lv_obj_get_style_transform_height(obj, part);
  408d4a:	f8a4 00a8 	strh.w	r0, [r4, #168]	; 0xa8
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  408d4e:	2206      	movs	r2, #6
  408d50:	4649      	mov	r1, r9
  408d52:	4628      	mov	r0, r5
  408d54:	47b0      	blx	r6
    shot->transform_angle = lv_obj_get_style_transform_angle(obj, part);
  408d56:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  408d5a:	2207      	movs	r2, #7
  408d5c:	4649      	mov	r1, r9
  408d5e:	4628      	mov	r0, r5
  408d60:	47b0      	blx	r6
    shot->transform_zoom = lv_obj_get_style_transform_zoom(obj, part);
  408d62:	f8a4 00ac 	strh.w	r0, [r4, #172]	; 0xac
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
#else
/*For compatibility*/
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr, scalar)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
  408d66:	22c0      	movs	r2, #192	; 0xc0
  408d68:	4649      	mov	r1, r9
  408d6a:	4628      	mov	r0, r5
  408d6c:	47b0      	blx	r6
    shot->scale_width = lv_obj_get_style_scale_width(obj, part);
  408d6e:	f8a4 00ae 	strh.w	r0, [r4, #174]	; 0xae
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_BORDER_WIDTH, scale_border_width, lv_style_int_t, _int, scalar)
  408d72:	22c1      	movs	r2, #193	; 0xc1
  408d74:	4649      	mov	r1, r9
  408d76:	4628      	mov	r0, r5
  408d78:	47b0      	blx	r6
    shot->scale_border_width = lv_obj_get_style_scale_border_width(obj, part);
  408d7a:	f8a4 00b0 	strh.w	r0, [r4, #176]	; 0xb0
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
  408d7e:	22c2      	movs	r2, #194	; 0xc2
  408d80:	4649      	mov	r1, r9
  408d82:	4628      	mov	r0, r5
  408d84:	47b0      	blx	r6
    shot->scale_end_border_width = lv_obj_get_style_scale_end_border_width(obj, part);
  408d86:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
  408d8a:	22c3      	movs	r2, #195	; 0xc3
  408d8c:	4649      	mov	r1, r9
  408d8e:	4628      	mov	r0, r5
  408d90:	47b0      	blx	r6
    shot->scale_end_line_width = lv_obj_get_style_scale_end_line_width(obj, part);
  408d92:	f8a4 00b4 	strh.w	r0, [r4, #180]	; 0xb4
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
  408d96:	22c9      	movs	r2, #201	; 0xc9
  408d98:	4649      	mov	r1, r9
  408d9a:	4628      	mov	r0, r5
  408d9c:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 408e40 <style_snapshot+0x204>
  408da0:	47d0      	blx	sl
    shot->scale_grad_color = lv_obj_get_style_scale_grad_color(obj, part);
  408da2:	f8a4 00b6 	strh.w	r0, [r4, #182]	; 0xb6
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
  408da6:	22ca      	movs	r2, #202	; 0xca
  408da8:	4649      	mov	r1, r9
  408daa:	4628      	mov	r0, r5
  408dac:	47d0      	blx	sl
    shot->scale_end_color = lv_obj_get_style_scale_end_color(obj, part);
  408dae:	f8a4 00b8 	strh.w	r0, [r4, #184]	; 0xb8
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  408db2:	f248 020c 	movw	r2, #32780	; 0x800c
  408db6:	4649      	mov	r1, r9
  408db8:	4628      	mov	r0, r5
  408dba:	4b1f      	ldr	r3, [pc, #124]	; (408e38 <style_snapshot+0x1fc>)
  408dbc:	4798      	blx	r3
    shot->opa_scale = lv_obj_get_style_opa_scale(obj, part);
  408dbe:	f884 00ba 	strb.w	r0, [r4, #186]	; 0xba
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  408dc2:	2202      	movs	r2, #2
  408dc4:	4649      	mov	r1, r9
  408dc6:	4628      	mov	r0, r5
  408dc8:	47b0      	blx	r6
  408dca:	3000      	adds	r0, #0
  408dcc:	bf18      	it	ne
  408dce:	2001      	movne	r0, #1
    shot->clip_corner = lv_obj_get_style_clip_corner(obj, part);
  408dd0:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
  408dd4:	f360 0300 	bfi	r3, r0, #0, #1
  408dd8:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  408ddc:	2233      	movs	r2, #51	; 0x33
  408dde:	4649      	mov	r1, r9
  408de0:	4628      	mov	r0, r5
  408de2:	47b0      	blx	r6
  408de4:	3000      	adds	r0, #0
  408de6:	bf18      	it	ne
  408de8:	2001      	movne	r0, #1
    shot->border_post  = lv_obj_get_style_border_post(obj, part);
  408dea:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
  408dee:	f360 0341 	bfi	r3, r0, #1, #1
  408df2:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
    _lv_obj_disable_style_caching(obj, false);
  408df6:	2100      	movs	r1, #0
  408df8:	4628      	mov	r0, r5
  408dfa:	47c0      	blx	r8
    list->skip_trans = trans_ori;
  408dfc:	797b      	ldrb	r3, [r7, #5]
  408dfe:	f36b 0300 	bfi	r3, fp, #0, #1
  408e02:	717b      	strb	r3, [r7, #5]
}
  408e04:	b003      	add	sp, #12
  408e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408e0a:	bf00      	nop
  408e0c:	00416c0d 	.word	0x00416c0d
  408e10:	0041250d 	.word	0x0041250d
  408e14:	0040df85 	.word	0x0040df85
  408e18:	0040d3f1 	.word	0x0040d3f1
  408e1c:	0040edd5 	.word	0x0040edd5
  408e20:	00405c4d 	.word	0x00405c4d
  408e24:	004083ed 	.word	0x004083ed
  408e28:	00408a1d 	.word	0x00408a1d
  408e2c:	00408ae5 	.word	0x00408ae5
  408e30:	00408b95 	.word	0x00408b95
  408e34:	00407485 	.word	0x00407485
  408e38:	00406ef9 	.word	0x00406ef9
  408e3c:	00405d41 	.word	0x00405d41
  408e40:	00406e71 	.word	0x00406e71

00408e44 <lv_obj_set_state>:
    if(obj->state == new_state) return;
  408e44:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  408e48:	428b      	cmp	r3, r1
  408e4a:	f000 80e4 	beq.w	409016 <lv_obj_set_state+0x1d2>
{
  408e4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408e52:	b0e5      	sub	sp, #404	; 0x194
  408e54:	4688      	mov	r8, r1
  408e56:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  408e58:	4b6f      	ldr	r3, [pc, #444]	; (409018 <lv_obj_set_state+0x1d4>)
  408e5a:	4798      	blx	r3
  408e5c:	b120      	cbz	r0, 408e68 <lv_obj_set_state+0x24>
    lv_state_t prev_state = obj->state;
  408e5e:	f894 a03d 	ldrb.w	sl, [r4, #61]	; 0x3d
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  408e62:	2500      	movs	r5, #0
    style_snapshot_res_t cmp_res = STYLE_COMPARE_SAME;
  408e64:	46ab      	mov	fp, r5
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  408e66:	e007      	b.n	408e78 <lv_obj_set_state+0x34>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  408e68:	4622      	mov	r2, r4
  408e6a:	2300      	movs	r3, #0
  408e6c:	486b      	ldr	r0, [pc, #428]	; (40901c <lv_obj_set_state+0x1d8>)
  408e6e:	496c      	ldr	r1, [pc, #432]	; (409020 <lv_obj_set_state+0x1dc>)
  408e70:	4788      	blx	r1
  408e72:	e7fe      	b.n	408e72 <lv_obj_set_state+0x2e>
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  408e74:	3501      	adds	r5, #1
  408e76:	b2ed      	uxtb	r5, r5
  408e78:	2d3f      	cmp	r5, #63	; 0x3f
  408e7a:	d81c      	bhi.n	408eb6 <lv_obj_set_state+0x72>
        lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
  408e7c:	4629      	mov	r1, r5
  408e7e:	4620      	mov	r0, r4
  408e80:	4b68      	ldr	r3, [pc, #416]	; (409024 <lv_obj_set_state+0x1e0>)
  408e82:	4798      	blx	r3
        if(style_list == NULL) break;   /*No more style lists*/
  408e84:	b1b8      	cbz	r0, 408eb6 <lv_obj_set_state+0x72>
        obj->state = prev_state;
  408e86:	f884 a03d 	strb.w	sl, [r4, #61]	; 0x3d
        style_snapshot(obj, part, &shot_pre);
  408e8a:	aa06      	add	r2, sp, #24
  408e8c:	4629      	mov	r1, r5
  408e8e:	4620      	mov	r0, r4
  408e90:	4e65      	ldr	r6, [pc, #404]	; (409028 <lv_obj_set_state+0x1e4>)
  408e92:	47b0      	blx	r6
        obj->state = new_state;
  408e94:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        style_snapshot(obj, part, &shot_post);
  408e98:	aa35      	add	r2, sp, #212	; 0xd4
  408e9a:	4629      	mov	r1, r5
  408e9c:	4620      	mov	r0, r4
  408e9e:	47b0      	blx	r6
        style_snapshot_res_t r = style_snapshot_compare(&shot_pre, &shot_post);
  408ea0:	a935      	add	r1, sp, #212	; 0xd4
  408ea2:	a806      	add	r0, sp, #24
  408ea4:	4b61      	ldr	r3, [pc, #388]	; (40902c <lv_obj_set_state+0x1e8>)
  408ea6:	4798      	blx	r3
        if(r == STYLE_COMPARE_DIFF) {
  408ea8:	2802      	cmp	r0, #2
  408eaa:	d003      	beq.n	408eb4 <lv_obj_set_state+0x70>
        if(r == STYLE_COMPARE_VISUAL_DIFF) {
  408eac:	2801      	cmp	r0, #1
  408eae:	d1e1      	bne.n	408e74 <lv_obj_set_state+0x30>
            cmp_res = STYLE_COMPARE_VISUAL_DIFF;
  408eb0:	4683      	mov	fp, r0
  408eb2:	e7df      	b.n	408e74 <lv_obj_set_state+0x30>
            cmp_res = STYLE_COMPARE_DIFF;
  408eb4:	4683      	mov	fp, r0
    obj->state = new_state;
  408eb6:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
    if(cmp_res == STYLE_COMPARE_SAME) {
  408eba:	f1bb 0f00 	cmp.w	fp, #0
  408ebe:	f000 80a3 	beq.w	409008 <lv_obj_set_state+0x1c4>
  408ec2:	2500      	movs	r5, #0
  408ec4:	f8cd a014 	str.w	sl, [sp, #20]
  408ec8:	e04b      	b.n	408f62 <lv_obj_set_state+0x11e>
                    a.early_apply = 0;
  408eca:	f89d 310e 	ldrb.w	r3, [sp, #270]	; 0x10e
  408ece:	f36f 0300 	bfc	r3, #0, #1
  408ed2:	f88d 310e 	strb.w	r3, [sp, #270]	; 0x10e
                    lv_anim_start(&a);
  408ed6:	a835      	add	r0, sp, #212	; 0xd4
  408ed8:	4b55      	ldr	r3, [pc, #340]	; (409030 <lv_obj_set_state+0x1ec>)
  408eda:	4798      	blx	r3
        for(i = 0; i < LV_STYLE_TRANS_NUM_MAX; i++) {
  408edc:	3601      	adds	r6, #1
  408ede:	b2f6      	uxtb	r6, r6
  408ee0:	2e05      	cmp	r6, #5
  408ee2:	d836      	bhi.n	408f52 <lv_obj_set_state+0x10e>
            if(props[i] != 0) {
  408ee4:	ab06      	add	r3, sp, #24
  408ee6:	f833 7016 	ldrh.w	r7, [r3, r6, lsl #1]
  408eea:	2f00      	cmp	r7, #0
  408eec:	d0f6      	beq.n	408edc <lv_obj_set_state+0x98>
                _lv_style_list_add_trans_style(style_list);
  408eee:	4650      	mov	r0, sl
  408ef0:	4b50      	ldr	r3, [pc, #320]	; (409034 <lv_obj_set_state+0x1f0>)
  408ef2:	4798      	blx	r3
                lv_style_trans_t * tr = trans_create(obj, props[i], part, prev_state, new_state);
  408ef4:	f8cd 8000 	str.w	r8, [sp]
  408ef8:	9b05      	ldr	r3, [sp, #20]
  408efa:	462a      	mov	r2, r5
  408efc:	4639      	mov	r1, r7
  408efe:	4620      	mov	r0, r4
  408f00:	f8df 9158 	ldr.w	r9, [pc, #344]	; 40905c <lv_obj_set_state+0x218>
  408f04:	47c8      	blx	r9
                if(tr) {
  408f06:	4681      	mov	r9, r0
  408f08:	2800      	cmp	r0, #0
  408f0a:	d0e7      	beq.n	408edc <lv_obj_set_state+0x98>
                    tr->obj = obj;
  408f0c:	6004      	str	r4, [r0, #0]
                    tr->prop = props[i];
  408f0e:	8087      	strh	r7, [r0, #4]
                    tr->part = part;
  408f10:	7185      	strb	r5, [r0, #6]
                    lv_anim_init(&a);
  408f12:	a835      	add	r0, sp, #212	; 0xd4
  408f14:	4b48      	ldr	r3, [pc, #288]	; (409038 <lv_obj_set_state+0x1f4>)
  408f16:	4798      	blx	r3
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param var pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
    a->var     = var;
  408f18:	f8cd 90d4 	str.w	r9, [sp, #212]	; 0xd4
 *                LittelvGL's built-in functions can be used.
 *                E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
    a->exec_cb = exec_cb;
  408f1c:	4b47      	ldr	r3, [pc, #284]	; (40903c <lv_obj_set_state+0x1f8>)
  408f1e:	9336      	str	r3, [sp, #216]	; 0xd8
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param start_cb a function call when the animation starts
 */
static inline void lv_anim_set_start_cb(lv_anim_t * a, lv_anim_ready_cb_t start_cb)
{
    a->start_cb = start_cb;
  408f20:	4b47      	ldr	r3, [pc, #284]	; (409040 <lv_obj_set_state+0x1fc>)
  408f22:	9337      	str	r3, [sp, #220]	; 0xdc
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param ready_cb a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
    a->ready_cb = ready_cb;
  408f24:	4b47      	ldr	r3, [pc, #284]	; (409044 <lv_obj_set_state+0x200>)
  408f26:	9338      	str	r3, [sp, #224]	; 0xe0
    a->start = start;
  408f28:	2300      	movs	r3, #0
  408f2a:	933b      	str	r3, [sp, #236]	; 0xec
    a->current = start;
  408f2c:	933c      	str	r3, [sp, #240]	; 0xf0
    a->end   = end;
  408f2e:	23ff      	movs	r3, #255	; 0xff
  408f30:	933d      	str	r3, [sp, #244]	; 0xf4
    a->time     = duration;
  408f32:	9b04      	ldr	r3, [sp, #16]
  408f34:	933e      	str	r3, [sp, #248]	; 0xf8
    a->act_time = -(int32_t)(delay);
  408f36:	9b03      	ldr	r3, [sp, #12]
  408f38:	425b      	negs	r3, r3
  408f3a:	933f      	str	r3, [sp, #252]	; 0xfc
    const uint8_t * s8 = (const uint8_t *)src;
  408f3c:	9902      	ldr	r1, [sp, #8]
    uint8_t * d8 = (uint8_t *)dst;
  408f3e:	aa39      	add	r2, sp, #228	; 0xe4
  408f40:	2308      	movs	r3, #8
    while(len) {
  408f42:	2b00      	cmp	r3, #0
  408f44:	d0c1      	beq.n	408eca <lv_obj_set_state+0x86>
        *d8 = *s8;
  408f46:	f811 0b01 	ldrb.w	r0, [r1], #1
  408f4a:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  408f4e:	3b01      	subs	r3, #1
  408f50:	e7f7      	b.n	408f42 <lv_obj_set_state+0xfe>
        if(cmp_res == STYLE_COMPARE_DIFF) lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
  408f52:	f1bb 0f02 	cmp.w	fp, #2
  408f56:	d048      	beq.n	408fea <lv_obj_set_state+0x1a6>
        if(cmp_res == STYLE_COMPARE_VISUAL_DIFF) {
  408f58:	f1bb 0f01 	cmp.w	fp, #1
  408f5c:	d04b      	beq.n	408ff6 <lv_obj_set_state+0x1b2>
    for(part = 0; part < _LV_OBJ_PART_REAL_LAST; part++) {
  408f5e:	3501      	adds	r5, #1
  408f60:	b2ed      	uxtb	r5, r5
  408f62:	2d3f      	cmp	r5, #63	; 0x3f
  408f64:	d84d      	bhi.n	409002 <lv_obj_set_state+0x1be>
        lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
  408f66:	4629      	mov	r1, r5
  408f68:	4620      	mov	r0, r4
  408f6a:	4b2e      	ldr	r3, [pc, #184]	; (409024 <lv_obj_set_state+0x1e0>)
  408f6c:	4798      	blx	r3
        if(style_list == NULL) break;   /*No more style lists*/
  408f6e:	4682      	mov	sl, r0
  408f70:	2800      	cmp	r0, #0
  408f72:	d046      	beq.n	409002 <lv_obj_set_state+0x1be>
        if(style_list->ignore_trans) continue;
  408f74:	7943      	ldrb	r3, [r0, #5]
  408f76:	f013 0f02 	tst.w	r3, #2
  408f7a:	d1f0      	bne.n	408f5e <lv_obj_set_state+0x11a>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  408f7c:	22b0      	movs	r2, #176	; 0xb0
  408f7e:	4629      	mov	r1, r5
  408f80:	4620      	mov	r0, r4
  408f82:	4e31      	ldr	r6, [pc, #196]	; (409048 <lv_obj_set_state+0x204>)
  408f84:	47b0      	blx	r6
  408f86:	9004      	str	r0, [sp, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int, scalar)
  408f88:	22b1      	movs	r2, #177	; 0xb1
  408f8a:	4629      	mov	r1, r5
  408f8c:	4620      	mov	r0, r4
  408f8e:	47b0      	blx	r6
  408f90:	9003      	str	r0, [sp, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
  408f92:	22be      	movs	r2, #190	; 0xbe
  408f94:	4629      	mov	r1, r5
  408f96:	4620      	mov	r0, r4
  408f98:	4b2c      	ldr	r3, [pc, #176]	; (40904c <lv_obj_set_state+0x208>)
  408f9a:	4798      	blx	r3
  408f9c:	9002      	str	r0, [sp, #8]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_1, transition_prop_1, lv_style_int_t, _int, scalar)
  408f9e:	22b2      	movs	r2, #178	; 0xb2
  408fa0:	4629      	mov	r1, r5
  408fa2:	4620      	mov	r0, r4
  408fa4:	47b0      	blx	r6
        props[0] = lv_obj_get_style_transition_prop_1(obj, part);
  408fa6:	f8ad 0018 	strh.w	r0, [sp, #24]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_2, transition_prop_2, lv_style_int_t, _int, scalar)
  408faa:	22b3      	movs	r2, #179	; 0xb3
  408fac:	4629      	mov	r1, r5
  408fae:	4620      	mov	r0, r4
  408fb0:	47b0      	blx	r6
        props[1] = lv_obj_get_style_transition_prop_2(obj, part);
  408fb2:	f8ad 001a 	strh.w	r0, [sp, #26]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
  408fb6:	22b4      	movs	r2, #180	; 0xb4
  408fb8:	4629      	mov	r1, r5
  408fba:	4620      	mov	r0, r4
  408fbc:	47b0      	blx	r6
        props[2] = lv_obj_get_style_transition_prop_3(obj, part);
  408fbe:	f8ad 001c 	strh.w	r0, [sp, #28]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
  408fc2:	22b5      	movs	r2, #181	; 0xb5
  408fc4:	4629      	mov	r1, r5
  408fc6:	4620      	mov	r0, r4
  408fc8:	47b0      	blx	r6
        props[3] = lv_obj_get_style_transition_prop_4(obj, part);
  408fca:	f8ad 001e 	strh.w	r0, [sp, #30]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
  408fce:	22b6      	movs	r2, #182	; 0xb6
  408fd0:	4629      	mov	r1, r5
  408fd2:	4620      	mov	r0, r4
  408fd4:	47b0      	blx	r6
        props[4] = lv_obj_get_style_transition_prop_5(obj, part);
  408fd6:	f8ad 0020 	strh.w	r0, [sp, #32]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  408fda:	22b7      	movs	r2, #183	; 0xb7
  408fdc:	4629      	mov	r1, r5
  408fde:	4620      	mov	r0, r4
  408fe0:	47b0      	blx	r6
        props[5] = lv_obj_get_style_transition_prop_6(obj, part);
  408fe2:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
        for(i = 0; i < LV_STYLE_TRANS_NUM_MAX; i++) {
  408fe6:	2600      	movs	r6, #0
  408fe8:	e77a      	b.n	408ee0 <lv_obj_set_state+0x9c>
        if(cmp_res == STYLE_COMPARE_DIFF) lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
  408fea:	22ff      	movs	r2, #255	; 0xff
  408fec:	4629      	mov	r1, r5
  408fee:	4620      	mov	r0, r4
  408ff0:	4b17      	ldr	r3, [pc, #92]	; (409050 <lv_obj_set_state+0x20c>)
  408ff2:	4798      	blx	r3
  408ff4:	e7b0      	b.n	408f58 <lv_obj_set_state+0x114>
            invalidate_style_cache(obj, part, LV_STYLE_PROP_ALL);
  408ff6:	22ff      	movs	r2, #255	; 0xff
  408ff8:	4629      	mov	r1, r5
  408ffa:	4620      	mov	r0, r4
  408ffc:	4b15      	ldr	r3, [pc, #84]	; (409054 <lv_obj_set_state+0x210>)
  408ffe:	4798      	blx	r3
  409000:	e7ad      	b.n	408f5e <lv_obj_set_state+0x11a>
    if(cmp_res == STYLE_COMPARE_VISUAL_DIFF) {
  409002:	f1bb 0f01 	cmp.w	fp, #1
  409006:	d002      	beq.n	40900e <lv_obj_set_state+0x1ca>
}
  409008:	b065      	add	sp, #404	; 0x194
  40900a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_obj_invalidate(obj);
  40900e:	4620      	mov	r0, r4
  409010:	4b11      	ldr	r3, [pc, #68]	; (409058 <lv_obj_set_state+0x214>)
  409012:	4798      	blx	r3
  409014:	e7f8      	b.n	409008 <lv_obj_set_state+0x1c4>
  409016:	4770      	bx	lr
  409018:	00415f95 	.word	0x00415f95
  40901c:	0042c728 	.word	0x0042c728
  409020:	00415fa1 	.word	0x00415fa1
  409024:	00405c4d 	.word	0x00405c4d
  409028:	00408c3d 	.word	0x00408c3d
  40902c:	004054ad 	.word	0x004054ad
  409030:	004154f5 	.word	0x004154f5
  409034:	0040ae7d 	.word	0x0040ae7d
  409038:	0041543d 	.word	0x0041543d
  40903c:	00407bf1 	.word	0x00407bf1
  409040:	00407d49 	.word	0x00407d49
  409044:	00405d89 	.word	0x00405d89
  409048:	00407485 	.word	0x00407485
  40904c:	0040737d 	.word	0x0040737d
  409050:	004078a1 	.word	0x004078a1
  409054:	00407825 	.word	0x00407825
  409058:	00405f99 	.word	0x00405f99
  40905c:	00407dbd 	.word	0x00407dbd

00409060 <lv_obj_add_state>:
{
  409060:	b538      	push	{r3, r4, r5, lr}
  409062:	4605      	mov	r5, r0
  409064:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  409066:	4b09      	ldr	r3, [pc, #36]	; (40908c <lv_obj_add_state+0x2c>)
  409068:	4798      	blx	r3
  40906a:	b148      	cbz	r0, 409080 <lv_obj_add_state+0x20>
    lv_state_t new_state = obj->state | state;
  40906c:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
  409070:	ea43 0104 	orr.w	r1, r3, r4
    if(obj->state != new_state) {
  409074:	428b      	cmp	r3, r1
  409076:	d002      	beq.n	40907e <lv_obj_add_state+0x1e>
        lv_obj_set_state(obj, new_state);
  409078:	4628      	mov	r0, r5
  40907a:	4b05      	ldr	r3, [pc, #20]	; (409090 <lv_obj_add_state+0x30>)
  40907c:	4798      	blx	r3
  40907e:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  409080:	462a      	mov	r2, r5
  409082:	2300      	movs	r3, #0
  409084:	4803      	ldr	r0, [pc, #12]	; (409094 <lv_obj_add_state+0x34>)
  409086:	4904      	ldr	r1, [pc, #16]	; (409098 <lv_obj_add_state+0x38>)
  409088:	4788      	blx	r1
  40908a:	e7fe      	b.n	40908a <lv_obj_add_state+0x2a>
  40908c:	00415f95 	.word	0x00415f95
  409090:	00408e45 	.word	0x00408e45
  409094:	0042c728 	.word	0x0042c728
  409098:	00415fa1 	.word	0x00415fa1

0040909c <lv_obj_clear_state>:
{
  40909c:	b538      	push	{r3, r4, r5, lr}
  40909e:	4604      	mov	r4, r0
  4090a0:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4090a2:	4b0a      	ldr	r3, [pc, #40]	; (4090cc <lv_obj_clear_state+0x30>)
  4090a4:	4798      	blx	r3
  4090a6:	b158      	cbz	r0, 4090c0 <lv_obj_clear_state+0x24>
    lv_state_t new_state = obj->state & (~state);
  4090a8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  4090ac:	b259      	sxtb	r1, r3
  4090ae:	ea21 0105 	bic.w	r1, r1, r5
  4090b2:	b2c9      	uxtb	r1, r1
    if(obj->state != new_state) {
  4090b4:	428b      	cmp	r3, r1
  4090b6:	d002      	beq.n	4090be <lv_obj_clear_state+0x22>
        lv_obj_set_state(obj, new_state);
  4090b8:	4620      	mov	r0, r4
  4090ba:	4b05      	ldr	r3, [pc, #20]	; (4090d0 <lv_obj_clear_state+0x34>)
  4090bc:	4798      	blx	r3
  4090be:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4090c0:	4622      	mov	r2, r4
  4090c2:	2300      	movs	r3, #0
  4090c4:	4803      	ldr	r0, [pc, #12]	; (4090d4 <lv_obj_clear_state+0x38>)
  4090c6:	4904      	ldr	r1, [pc, #16]	; (4090d8 <lv_obj_clear_state+0x3c>)
  4090c8:	4788      	blx	r1
  4090ca:	e7fe      	b.n	4090ca <lv_obj_clear_state+0x2e>
  4090cc:	00415f95 	.word	0x00415f95
  4090d0:	00408e45 	.word	0x00408e45
  4090d4:	0042c728 	.word	0x0042c728
  4090d8:	00415fa1 	.word	0x00415fa1

004090dc <lv_obj_get_draw_rect_ext_pad_size>:
{
  4090dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4090e0:	b089      	sub	sp, #36	; 0x24
  4090e2:	4604      	mov	r4, r0
  4090e4:	460e      	mov	r6, r1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
  4090e6:	2250      	movs	r2, #80	; 0x50
  4090e8:	4b78      	ldr	r3, [pc, #480]	; (4092cc <lv_obj_get_draw_rect_ext_pad_size+0x1f0>)
  4090ea:	4798      	blx	r3
    if(sh_width) {
  4090ec:	4607      	mov	r7, r0
  4090ee:	bb68      	cbnz	r0, 40914c <lv_obj_get_draw_rect_ext_pad_size+0x70>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
  4090f0:	227f      	movs	r2, #127	; 0x7f
  4090f2:	4631      	mov	r1, r6
  4090f4:	4620      	mov	r0, r4
  4090f6:	4b76      	ldr	r3, [pc, #472]	; (4092d0 <lv_obj_get_draw_rect_ext_pad_size+0x1f4>)
  4090f8:	4798      	blx	r3
    if(value_str) {
  4090fa:	4605      	mov	r5, r0
  4090fc:	b130      	cbz	r0, 40910c <lv_obj_get_draw_rect_ext_pad_size+0x30>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
  4090fe:	227c      	movs	r2, #124	; 0x7c
  409100:	4631      	mov	r1, r6
  409102:	4620      	mov	r0, r4
  409104:	4b73      	ldr	r3, [pc, #460]	; (4092d4 <lv_obj_get_draw_rect_ext_pad_size+0x1f8>)
  409106:	4798      	blx	r3
        if(value_opa > LV_OPA_MIN) {
  409108:	2802      	cmp	r0, #2
  40910a:	d851      	bhi.n	4091b0 <lv_obj_get_draw_rect_ext_pad_size+0xd4>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  40910c:	2240      	movs	r2, #64	; 0x40
  40910e:	4631      	mov	r1, r6
  409110:	4620      	mov	r0, r4
  409112:	4b6e      	ldr	r3, [pc, #440]	; (4092cc <lv_obj_get_draw_rect_ext_pad_size+0x1f0>)
  409114:	4798      	blx	r3
    if(outline_width) {
  409116:	4605      	mov	r5, r0
  409118:	2800      	cmp	r0, #0
  40911a:	f040 80c4 	bne.w	4092a6 <lv_obj_get_draw_rect_ext_pad_size+0x1ca>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  40911e:	2204      	movs	r2, #4
  409120:	4631      	mov	r1, r6
  409122:	4620      	mov	r0, r4
  409124:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 4092cc <lv_obj_get_draw_rect_ext_pad_size+0x1f0>
  409128:	47c0      	blx	r8
  40912a:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  40912c:	2205      	movs	r2, #5
  40912e:	4631      	mov	r1, r6
  409130:	4620      	mov	r0, r4
  409132:	47c0      	blx	r8
    lv_coord_t wh = LV_MATH_MAX(w, h);
  409134:	42a8      	cmp	r0, r5
  409136:	bfb8      	it	lt
  409138:	4628      	movlt	r0, r5
  40913a:	b200      	sxth	r0, r0
    if(wh > 0) s += wh;
  40913c:	2800      	cmp	r0, #0
  40913e:	dd01      	ble.n	409144 <lv_obj_get_draw_rect_ext_pad_size+0x68>
  409140:	4438      	add	r0, r7
  409142:	b207      	sxth	r7, r0
}
  409144:	4638      	mov	r0, r7
  409146:	b009      	add	sp, #36	; 0x24
  409148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OPA, shadow_opa, lv_opa_t, _opa, scalar)
  40914c:	225c      	movs	r2, #92	; 0x5c
  40914e:	4631      	mov	r1, r6
  409150:	4620      	mov	r0, r4
  409152:	4b60      	ldr	r3, [pc, #384]	; (4092d4 <lv_obj_get_draw_rect_ext_pad_size+0x1f8>)
  409154:	4798      	blx	r3
        if(sh_opa > LV_OPA_MIN) {
  409156:	2802      	cmp	r0, #2
  409158:	d801      	bhi.n	40915e <lv_obj_get_draw_rect_ext_pad_size+0x82>
    lv_coord_t s = 0;
  40915a:	2700      	movs	r7, #0
  40915c:	e7c8      	b.n	4090f0 <lv_obj_get_draw_rect_ext_pad_size+0x14>
            sh_width = sh_width / 2;    /*THe blur adds only half width*/
  40915e:	463b      	mov	r3, r7
  409160:	2f00      	cmp	r7, #0
  409162:	db23      	blt.n	4091ac <lv_obj_get_draw_rect_ext_pad_size+0xd0>
  409164:	f343 074f 	sbfx	r7, r3, #1, #16
            sh_width++;
  409168:	3701      	adds	r7, #1
  40916a:	b2bf      	uxth	r7, r7
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
  40916c:	2253      	movs	r2, #83	; 0x53
  40916e:	4631      	mov	r1, r6
  409170:	4620      	mov	r0, r4
  409172:	f8df 8158 	ldr.w	r8, [pc, #344]	; 4092cc <lv_obj_get_draw_rect_ext_pad_size+0x1f0>
  409176:	47c0      	blx	r8
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
  409178:	fa17 f780 	uxtah	r7, r7, r0
  40917c:	b2bf      	uxth	r7, r7
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
  40917e:	2251      	movs	r2, #81	; 0x51
  409180:	4631      	mov	r1, r6
  409182:	4620      	mov	r0, r4
  409184:	47c0      	blx	r8
  409186:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
  409188:	2252      	movs	r2, #82	; 0x52
  40918a:	4631      	mov	r1, r6
  40918c:	4620      	mov	r0, r4
  40918e:	47c0      	blx	r8
            sh_width += LV_MATH_MAX(LV_MATH_ABS(sh_ofs_x), LV_MATH_ABS(sh_ofs_y));
  409190:	2800      	cmp	r0, #0
  409192:	bfb8      	it	lt
  409194:	4240      	neglt	r0, r0
  409196:	2d00      	cmp	r5, #0
  409198:	bfb8      	it	lt
  40919a:	426d      	neglt	r5, r5
  40919c:	42a8      	cmp	r0, r5
  40919e:	bfac      	ite	ge
  4091a0:	183f      	addge	r7, r7, r0
  4091a2:	197f      	addlt	r7, r7, r5
  4091a4:	b238      	sxth	r0, r7
            s = LV_MATH_MAX(s, sh_width);
  4091a6:	ea20 77e0 	bic.w	r7, r0, r0, asr #31
  4091aa:	e7a1      	b.n	4090f0 <lv_obj_get_draw_rect_ext_pad_size+0x14>
            sh_width = sh_width / 2;    /*THe blur adds only half width*/
  4091ac:	1c7b      	adds	r3, r7, #1
  4091ae:	e7d9      	b.n	409164 <lv_obj_get_draw_rect_ext_pad_size+0x88>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int, scalar)
  4091b0:	2270      	movs	r2, #112	; 0x70
  4091b2:	4631      	mov	r1, r6
  4091b4:	4620      	mov	r0, r4
  4091b6:	f8df 8114 	ldr.w	r8, [pc, #276]	; 4092cc <lv_obj_get_draw_rect_ext_pad_size+0x1f0>
  4091ba:	47c0      	blx	r8
  4091bc:	4682      	mov	sl, r0
  4091be:	2270      	movs	r2, #112	; 0x70
  4091c0:	4631      	mov	r1, r6
  4091c2:	4620      	mov	r0, r4
  4091c4:	47c0      	blx	r8
  4091c6:	4683      	mov	fp, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
  4091c8:	227e      	movs	r2, #126	; 0x7e
  4091ca:	4631      	mov	r1, r6
  4091cc:	4620      	mov	r0, r4
  4091ce:	4b40      	ldr	r3, [pc, #256]	; (4092d0 <lv_obj_get_draw_rect_ext_pad_size+0x1f4>)
  4091d0:	4798      	blx	r3
            _lv_txt_get_size(&txt_size, value_str, font, letter_space, line_space, LV_COORD_MAX, LV_TXT_FLAG_NONE);
  4091d2:	f04f 0900 	mov.w	r9, #0
  4091d6:	f8cd 9008 	str.w	r9, [sp, #8]
  4091da:	f647 4318 	movw	r3, #31768	; 0x7c18
  4091de:	9301      	str	r3, [sp, #4]
  4091e0:	f8cd b000 	str.w	fp, [sp]
  4091e4:	4653      	mov	r3, sl
  4091e6:	4602      	mov	r2, r0
  4091e8:	4629      	mov	r1, r5
  4091ea:	a804      	add	r0, sp, #16
  4091ec:	4d3a      	ldr	r5, [pc, #232]	; (4092d8 <lv_obj_get_draw_rect_ext_pad_size+0x1fc>)
  4091ee:	47a8      	blx	r5
            value_area.x1 = 0;
  4091f0:	f8ad 9018 	strh.w	r9, [sp, #24]
            value_area.y1 = 0;
  4091f4:	f8ad 901a 	strh.w	r9, [sp, #26]
            value_area.x2 = txt_size.x - 1;
  4091f8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  4091fc:	3b01      	subs	r3, #1
  4091fe:	f8ad 301c 	strh.w	r3, [sp, #28]
            value_area.y2 = txt_size.y - 1;
  409202:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  409206:	3b01      	subs	r3, #1
  409208:	f8ad 301e 	strh.w	r3, [sp, #30]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
  40920c:	2275      	movs	r2, #117	; 0x75
  40920e:	4631      	mov	r1, r6
  409210:	4620      	mov	r0, r4
  409212:	47c0      	blx	r8
  409214:	fa5f f980 	uxtb.w	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
  409218:	2273      	movs	r2, #115	; 0x73
  40921a:	4631      	mov	r1, r6
  40921c:	4620      	mov	r0, r4
  40921e:	47c0      	blx	r8
  409220:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
  409222:	2274      	movs	r2, #116	; 0x74
  409224:	4631      	mov	r1, r6
  409226:	4620      	mov	r0, r4
  409228:	47c0      	blx	r8
  40922a:	4680      	mov	r8, r0
            _lv_area_align(&obj->coords, &value_area, align, &p_align);
  40922c:	ab05      	add	r3, sp, #20
  40922e:	464a      	mov	r2, r9
  409230:	a906      	add	r1, sp, #24
  409232:	f104 0010 	add.w	r0, r4, #16
  409236:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 4092dc <lv_obj_get_draw_rect_ext_pad_size+0x200>
  40923a:	47c8      	blx	r9
            value_area.x1 += p_align.x + xofs;
  40923c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
  409240:	442a      	add	r2, r5
  409242:	b292      	uxth	r2, r2
  409244:	f8bd 0018 	ldrh.w	r0, [sp, #24]
  409248:	4410      	add	r0, r2
  40924a:	b205      	sxth	r5, r0
            value_area.y1 += p_align.y + yofs;
  40924c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  409250:	4443      	add	r3, r8
  409252:	b29b      	uxth	r3, r3
  409254:	f8bd 101a 	ldrh.w	r1, [sp, #26]
  409258:	4419      	add	r1, r3
  40925a:	b209      	sxth	r1, r1
            value_area.x2 += p_align.x + xofs;
  40925c:	f8bd 001c 	ldrh.w	r0, [sp, #28]
  409260:	4402      	add	r2, r0
  409262:	b212      	sxth	r2, r2
            value_area.y2 += p_align.y + yofs;
  409264:	f8bd 001e 	ldrh.w	r0, [sp, #30]
  409268:	4403      	add	r3, r0
  40926a:	b21b      	sxth	r3, r3
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
  40926c:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
  409270:	1b40      	subs	r0, r0, r5
  409272:	42b8      	cmp	r0, r7
  409274:	bfb8      	it	lt
  409276:	4638      	movlt	r0, r7
  409278:	b200      	sxth	r0, r0
            s = LV_MATH_MAX(s, obj->coords.y1 - value_area.y1);
  40927a:	f9b4 5012 	ldrsh.w	r5, [r4, #18]
  40927e:	1a69      	subs	r1, r5, r1
  409280:	4288      	cmp	r0, r1
  409282:	bfb8      	it	lt
  409284:	4608      	movlt	r0, r1
  409286:	b200      	sxth	r0, r0
            s = LV_MATH_MAX(s, value_area.x2 - obj->coords.x2);
  409288:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
  40928c:	1a52      	subs	r2, r2, r1
  40928e:	4290      	cmp	r0, r2
  409290:	bfb8      	it	lt
  409292:	4610      	movlt	r0, r2
  409294:	b200      	sxth	r0, r0
            s = LV_MATH_MAX(s, value_area.y2 - obj->coords.y2);
  409296:	f9b4 7016 	ldrsh.w	r7, [r4, #22]
  40929a:	1bdf      	subs	r7, r3, r7
  40929c:	42b8      	cmp	r0, r7
  40929e:	bfb8      	it	lt
  4092a0:	4638      	movlt	r0, r7
  4092a2:	b207      	sxth	r7, r0
  4092a4:	e732      	b.n	40910c <lv_obj_get_draw_rect_ext_pad_size+0x30>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  4092a6:	224c      	movs	r2, #76	; 0x4c
  4092a8:	4631      	mov	r1, r6
  4092aa:	4620      	mov	r0, r4
  4092ac:	4b09      	ldr	r3, [pc, #36]	; (4092d4 <lv_obj_get_draw_rect_ext_pad_size+0x1f8>)
  4092ae:	4798      	blx	r3
        if(outline_opa > LV_OPA_MIN) {
  4092b0:	2802      	cmp	r0, #2
  4092b2:	f67f af34 	bls.w	40911e <lv_obj_get_draw_rect_ext_pad_size+0x42>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
  4092b6:	2241      	movs	r2, #65	; 0x41
  4092b8:	4631      	mov	r1, r6
  4092ba:	4620      	mov	r0, r4
  4092bc:	4b03      	ldr	r3, [pc, #12]	; (4092cc <lv_obj_get_draw_rect_ext_pad_size+0x1f0>)
  4092be:	4798      	blx	r3
            s = LV_MATH_MAX(s, outline_pad + outline_width);
  4092c0:	4428      	add	r0, r5
  4092c2:	42b8      	cmp	r0, r7
  4092c4:	bfb8      	it	lt
  4092c6:	4638      	movlt	r0, r7
  4092c8:	b207      	sxth	r7, r0
  4092ca:	e728      	b.n	40911e <lv_obj_get_draw_rect_ext_pad_size+0x42>
  4092cc:	00407485 	.word	0x00407485
  4092d0:	0040737d 	.word	0x0040737d
  4092d4:	00406ef9 	.word	0x00406ef9
  4092d8:	00417fa5 	.word	0x00417fa5
  4092dc:	004159a1 	.word	0x004159a1

004092e0 <lv_obj_get_focused_obj>:
{
  4092e0:	b510      	push	{r4, lr}
    if(obj == NULL) return NULL;
  4092e2:	4604      	mov	r4, r0
  4092e4:	b928      	cbnz	r0, 4092f2 <lv_obj_get_focused_obj+0x12>
  4092e6:	2000      	movs	r0, #0
  4092e8:	bd10      	pop	{r4, pc}
        focus_obj = lv_obj_get_parent(focus_obj);
  4092ea:	4620      	mov	r0, r4
  4092ec:	4b06      	ldr	r3, [pc, #24]	; (409308 <lv_obj_get_focused_obj+0x28>)
  4092ee:	4798      	blx	r3
  4092f0:	4604      	mov	r4, r0
    while(lv_obj_get_focus_parent(focus_obj) != false && focus_obj != NULL) {
  4092f2:	4620      	mov	r0, r4
  4092f4:	4b05      	ldr	r3, [pc, #20]	; (40930c <lv_obj_get_focused_obj+0x2c>)
  4092f6:	4798      	blx	r3
  4092f8:	b118      	cbz	r0, 409302 <lv_obj_get_focused_obj+0x22>
  4092fa:	2c00      	cmp	r4, #0
  4092fc:	d1f5      	bne.n	4092ea <lv_obj_get_focused_obj+0xa>
    return (lv_obj_t *)focus_obj;
  4092fe:	4620      	mov	r0, r4
  409300:	bd10      	pop	{r4, pc}
  409302:	4620      	mov	r0, r4
}
  409304:	bd10      	pop	{r4, pc}
  409306:	bf00      	nop
  409308:	004059ed 	.word	0x004059ed
  40930c:	00406821 	.word	0x00406821

00409310 <lv_obj_signal>:
    if(sign == LV_SIGNAL_GET_STYLE) {
  409310:	2908      	cmp	r1, #8
  409312:	d01a      	beq.n	40934a <lv_obj_signal+0x3a>
{
  409314:	b510      	push	{r4, lr}
  409316:	4604      	mov	r4, r0
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  409318:	2907      	cmp	r1, #7
  40931a:	d020      	beq.n	40935e <lv_obj_signal+0x4e>
    if(sign == LV_SIGNAL_CHILD_CHG) {
  40931c:	2901      	cmp	r1, #1
  40931e:	d023      	beq.n	409368 <lv_obj_signal+0x58>
    else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
  409320:	2906      	cmp	r1, #6
  409322:	d027      	beq.n	409374 <lv_obj_signal+0x64>
    else if(sign == LV_SIGNAL_PARENT_SIZE_CHG) {
  409324:	2903      	cmp	r1, #3
  409326:	d030      	beq.n	40938a <lv_obj_signal+0x7a>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
  409328:	2904      	cmp	r1, #4
  40932a:	d039      	beq.n	4093a0 <lv_obj_signal+0x90>
    else if(sign == LV_SIGNAL_PRESSED) {
  40932c:	290b      	cmp	r1, #11
  40932e:	d03b      	beq.n	4093a8 <lv_obj_signal+0x98>
    else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
  409330:	f1a1 030d 	sub.w	r3, r1, #13
  409334:	b2db      	uxtb	r3, r3
  409336:	2b01      	cmp	r3, #1
  409338:	d93b      	bls.n	4093b2 <lv_obj_signal+0xa2>
    else if(sign == LV_SIGNAL_FOCUS) {
  40933a:	2916      	cmp	r1, #22
  40933c:	d03e      	beq.n	4093bc <lv_obj_signal+0xac>
    else if(sign == LV_SIGNAL_DEFOCUS) {
  40933e:	2917      	cmp	r1, #23
  409340:	d056      	beq.n	4093f0 <lv_obj_signal+0xe0>
    else if(sign == LV_SIGNAL_CLEANUP) {
  409342:	2900      	cmp	r1, #0
  409344:	d05b      	beq.n	4093fe <lv_obj_signal+0xee>
    lv_res_t res = LV_RES_OK;
  409346:	2001      	movs	r0, #1
}
  409348:	bd10      	pop	{r4, pc}
        if(info->part == LV_OBJ_PART_MAIN) info->result = &obj->style_list;
  40934a:	7813      	ldrb	r3, [r2, #0]
  40934c:	b91b      	cbnz	r3, 409356 <lv_obj_signal+0x46>
  40934e:	3028      	adds	r0, #40	; 0x28
  409350:	6050      	str	r0, [r2, #4]
        return LV_RES_OK;
  409352:	2001      	movs	r0, #1
  409354:	4770      	bx	lr
        else info->result = NULL;
  409356:	2300      	movs	r3, #0
  409358:	6053      	str	r3, [r2, #4]
        return LV_RES_OK;
  40935a:	2001      	movs	r0, #1
  40935c:	4770      	bx	lr
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  40935e:	492b      	ldr	r1, [pc, #172]	; (40940c <lv_obj_signal+0xfc>)
  409360:	4610      	mov	r0, r2
  409362:	4b2b      	ldr	r3, [pc, #172]	; (409410 <lv_obj_signal+0x100>)
  409364:	4798      	blx	r3
  409366:	bd10      	pop	{r4, pc}
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
  409368:	4b2a      	ldr	r3, [pc, #168]	; (409414 <lv_obj_signal+0x104>)
  40936a:	4798      	blx	r3
  40936c:	2800      	cmp	r0, #0
  40936e:	d14a      	bne.n	409406 <lv_obj_signal+0xf6>
    lv_res_t res = LV_RES_OK;
  409370:	2001      	movs	r0, #1
  409372:	bd10      	pop	{r4, pc}
        lv_coord_t d = lv_obj_get_draw_rect_ext_pad_size(obj, LV_OBJ_PART_MAIN);
  409374:	2100      	movs	r1, #0
  409376:	4b28      	ldr	r3, [pc, #160]	; (409418 <lv_obj_signal+0x108>)
  409378:	4798      	blx	r3
        obj->ext_draw_pad = LV_MATH_MAX(obj->ext_draw_pad, d);
  40937a:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
  40937e:	4298      	cmp	r0, r3
  409380:	bfb8      	it	lt
  409382:	4618      	movlt	r0, r3
  409384:	8660      	strh	r0, [r4, #50]	; 0x32
    lv_res_t res = LV_RES_OK;
  409386:	2001      	movs	r0, #1
  409388:	bd10      	pop	{r4, pc}
        if(obj->realign.auto_realign) {
  40938a:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
  40938e:	f013 0f01 	tst.w	r3, #1
  409392:	d101      	bne.n	409398 <lv_obj_signal+0x88>
    lv_res_t res = LV_RES_OK;
  409394:	2001      	movs	r0, #1
  409396:	bd10      	pop	{r4, pc}
            lv_obj_realign(obj);
  409398:	4b20      	ldr	r3, [pc, #128]	; (40941c <lv_obj_signal+0x10c>)
  40939a:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  40939c:	2001      	movs	r0, #1
  40939e:	bd10      	pop	{r4, pc}
        lv_obj_refresh_ext_draw_pad(obj);
  4093a0:	4b1f      	ldr	r3, [pc, #124]	; (409420 <lv_obj_signal+0x110>)
  4093a2:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  4093a4:	2001      	movs	r0, #1
  4093a6:	bd10      	pop	{r4, pc}
        lv_obj_add_state(obj, LV_STATE_PRESSED);
  4093a8:	2110      	movs	r1, #16
  4093aa:	4b1e      	ldr	r3, [pc, #120]	; (409424 <lv_obj_signal+0x114>)
  4093ac:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  4093ae:	2001      	movs	r0, #1
  4093b0:	bd10      	pop	{r4, pc}
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
  4093b2:	2110      	movs	r1, #16
  4093b4:	4b1c      	ldr	r3, [pc, #112]	; (409428 <lv_obj_signal+0x118>)
  4093b6:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  4093b8:	2001      	movs	r0, #1
  4093ba:	bd10      	pop	{r4, pc}
        editing = lv_group_get_editing(lv_obj_get_group(obj));
  4093bc:	4b1b      	ldr	r3, [pc, #108]	; (40942c <lv_obj_signal+0x11c>)
  4093be:	4798      	blx	r3
  4093c0:	4b1b      	ldr	r3, [pc, #108]	; (409430 <lv_obj_signal+0x120>)
  4093c2:	4798      	blx	r3
        if(editing) {
  4093c4:	b138      	cbz	r0, 4093d6 <lv_obj_signal+0xc6>
            obj = lv_obj_get_focused_obj(obj);
  4093c6:	4620      	mov	r0, r4
  4093c8:	4b1a      	ldr	r3, [pc, #104]	; (409434 <lv_obj_signal+0x124>)
  4093ca:	4798      	blx	r3
            lv_obj_add_state(obj, state);
  4093cc:	2106      	movs	r1, #6
  4093ce:	4b15      	ldr	r3, [pc, #84]	; (409424 <lv_obj_signal+0x114>)
  4093d0:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  4093d2:	2001      	movs	r0, #1
  4093d4:	bd10      	pop	{r4, pc}
            obj = lv_obj_get_focused_obj(obj);
  4093d6:	4620      	mov	r0, r4
  4093d8:	4b16      	ldr	r3, [pc, #88]	; (409434 <lv_obj_signal+0x124>)
  4093da:	4798      	blx	r3
  4093dc:	4604      	mov	r4, r0
            lv_obj_add_state(obj, LV_STATE_FOCUSED);
  4093de:	2102      	movs	r1, #2
  4093e0:	4b10      	ldr	r3, [pc, #64]	; (409424 <lv_obj_signal+0x114>)
  4093e2:	4798      	blx	r3
            lv_obj_clear_state(obj, LV_STATE_EDITED);
  4093e4:	2104      	movs	r1, #4
  4093e6:	4620      	mov	r0, r4
  4093e8:	4b0f      	ldr	r3, [pc, #60]	; (409428 <lv_obj_signal+0x118>)
  4093ea:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  4093ec:	2001      	movs	r0, #1
  4093ee:	bd10      	pop	{r4, pc}
        obj = lv_obj_get_focused_obj(obj);
  4093f0:	4b10      	ldr	r3, [pc, #64]	; (409434 <lv_obj_signal+0x124>)
  4093f2:	4798      	blx	r3
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED);
  4093f4:	2106      	movs	r1, #6
  4093f6:	4b0c      	ldr	r3, [pc, #48]	; (409428 <lv_obj_signal+0x118>)
  4093f8:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  4093fa:	2001      	movs	r0, #1
  4093fc:	bd10      	pop	{r4, pc}
        lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
  4093fe:	4b0e      	ldr	r3, [pc, #56]	; (409438 <lv_obj_signal+0x128>)
  409400:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  409402:	2001      	movs	r0, #1
  409404:	bd10      	pop	{r4, pc}
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
  409406:	2000      	movs	r0, #0
  409408:	bd10      	pop	{r4, pc}
  40940a:	bf00      	nop
  40940c:	0042c738 	.word	0x0042c738
  409410:	004083d1 	.word	0x004083d1
  409414:	00406ded 	.word	0x00406ded
  409418:	004090dd 	.word	0x004090dd
  40941c:	004066b5 	.word	0x004066b5
  409420:	004059bd 	.word	0x004059bd
  409424:	00409061 	.word	0x00409061
  409428:	0040909d 	.word	0x0040909d
  40942c:	0040813d 	.word	0x0040813d
  409430:	00403ae1 	.word	0x00403ae1
  409434:	004092e1 	.word	0x004092e1
  409438:	00405d15 	.word	0x00405d15

0040943c <lv_refr_join_area>:

/**
 * Join the areas which has got common parts
 */
static void lv_refr_join_area(void)
{
  40943c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  409440:	b082      	sub	sp, #8
    uint32_t join_from;
    uint32_t join_in;
    lv_area_t joined_area;
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
  409442:	2500      	movs	r5, #0
  409444:	e057      	b.n	4094f6 <lv_refr_join_area+0xba>
        *d8 = *s8;
  409446:	f811 0b01 	ldrb.w	r0, [r1], #1
  40944a:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40944e:	3b01      	subs	r3, #1
    while(len) {
  409450:	2b00      	cmp	r3, #0
  409452:	d1f8      	bne.n	409446 <lv_refr_join_area+0xa>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);

                /*Mark 'join_form' is joined into 'join_in'*/
                disp_refr->inv_area_joined[join_from] = 1;
  409454:	4426      	add	r6, r4
  409456:	2301      	movs	r3, #1
  409458:	f886 3162 	strb.w	r3, [r6, #354]	; 0x162
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
  40945c:	3401      	adds	r4, #1
  40945e:	4b2f      	ldr	r3, [pc, #188]	; (40951c <lv_refr_join_area+0xe0>)
  409460:	6819      	ldr	r1, [r3, #0]
  409462:	f8b1 3182 	ldrh.w	r3, [r1, #386]	; 0x182
  409466:	f3c3 0309 	ubfx	r3, r3, #0, #10
  40946a:	429c      	cmp	r4, r3
  40946c:	d242      	bcs.n	4094f4 <lv_refr_join_area+0xb8>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
  40946e:	190b      	adds	r3, r1, r4
  409470:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
  409474:	2b00      	cmp	r3, #0
  409476:	d1f1      	bne.n	40945c <lv_refr_join_area+0x20>
  409478:	42ac      	cmp	r4, r5
  40947a:	d0ef      	beq.n	40945c <lv_refr_join_area+0x20>
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
  40947c:	f105 000c 	add.w	r0, r5, #12
  409480:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
  409484:	f104 030c 	add.w	r3, r4, #12
  409488:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  40948c:	3102      	adds	r1, #2
  40948e:	3002      	adds	r0, #2
  409490:	4b23      	ldr	r3, [pc, #140]	; (409520 <lv_refr_join_area+0xe4>)
  409492:	4798      	blx	r3
  409494:	2800      	cmp	r0, #0
  409496:	d0e1      	beq.n	40945c <lv_refr_join_area+0x20>
            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
  409498:	f8df 8080 	ldr.w	r8, [pc, #128]	; 40951c <lv_refr_join_area+0xe0>
  40949c:	f8d8 2000 	ldr.w	r2, [r8]
  4094a0:	f105 070c 	add.w	r7, r5, #12
  4094a4:	00ff      	lsls	r7, r7, #3
  4094a6:	19d1      	adds	r1, r2, r7
  4094a8:	f104 060c 	add.w	r6, r4, #12
  4094ac:	00f6      	lsls	r6, r6, #3
  4094ae:	4432      	add	r2, r6
  4094b0:	3202      	adds	r2, #2
  4094b2:	3102      	adds	r1, #2
  4094b4:	4668      	mov	r0, sp
  4094b6:	4b1b      	ldr	r3, [pc, #108]	; (409524 <lv_refr_join_area+0xe8>)
  4094b8:	4798      	blx	r3
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
  4094ba:	4668      	mov	r0, sp
  4094bc:	f8df a068 	ldr.w	sl, [pc, #104]	; 409528 <lv_refr_join_area+0xec>
  4094c0:	47d0      	blx	sl
  4094c2:	4681      	mov	r9, r0
  4094c4:	f8d8 0000 	ldr.w	r0, [r8]
  4094c8:	4438      	add	r0, r7
  4094ca:	3002      	adds	r0, #2
  4094cc:	47d0      	blx	sl
  4094ce:	4607      	mov	r7, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
  4094d0:	f8d8 0000 	ldr.w	r0, [r8]
  4094d4:	4430      	add	r0, r6
  4094d6:	3002      	adds	r0, #2
  4094d8:	47d0      	blx	sl
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
  4094da:	4438      	add	r0, r7
  4094dc:	4581      	cmp	r9, r0
  4094de:	d2bd      	bcs.n	40945c <lv_refr_join_area+0x20>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
  4094e0:	f8d8 6000 	ldr.w	r6, [r8]
  4094e4:	f105 020c 	add.w	r2, r5, #12
  4094e8:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
  4094ec:	3202      	adds	r2, #2
    const uint8_t * s8 = (const uint8_t *)src;
  4094ee:	4669      	mov	r1, sp
  4094f0:	2308      	movs	r3, #8
  4094f2:	e7ad      	b.n	409450 <lv_refr_join_area+0x14>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
  4094f4:	3501      	adds	r5, #1
  4094f6:	4b09      	ldr	r3, [pc, #36]	; (40951c <lv_refr_join_area+0xe0>)
  4094f8:	681b      	ldr	r3, [r3, #0]
  4094fa:	f8b3 2182 	ldrh.w	r2, [r3, #386]	; 0x182
  4094fe:	f3c2 0209 	ubfx	r2, r2, #0, #10
  409502:	4295      	cmp	r5, r2
  409504:	d206      	bcs.n	409514 <lv_refr_join_area+0xd8>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
  409506:	442b      	add	r3, r5
  409508:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
  40950c:	2b00      	cmp	r3, #0
  40950e:	d1f1      	bne.n	4094f4 <lv_refr_join_area+0xb8>
  409510:	2400      	movs	r4, #0
  409512:	e7a4      	b.n	40945e <lv_refr_join_area+0x22>
            }
        }
    }
}
  409514:	b002      	add	sp, #8
  409516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40951a:	bf00      	nop
  40951c:	2040c42c 	.word	0x2040c42c
  409520:	00415895 	.word	0x00415895
  409524:	004156bb 	.word	0x004156bb
  409528:	00415647 	.word	0x00415647

0040952c <lv_refr_get_top_obj>:
 * @param area_p pointer to an area
 * @param obj the first object to start the searching (typically a screen)
 * @return
 */
static lv_obj_t * lv_refr_get_top_obj(const lv_area_t * area_p, lv_obj_t * obj)
{
  40952c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  409530:	4606      	mov	r6, r0
  409532:	4688      	mov	r8, r1
    lv_obj_t * found_p = NULL;

    /*If this object is fully cover the draw area check the children too */
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
  409534:	2200      	movs	r2, #0
  409536:	3110      	adds	r1, #16
  409538:	4b20      	ldr	r3, [pc, #128]	; (4095bc <lv_refr_get_top_obj+0x90>)
  40953a:	4798      	blx	r3
  40953c:	b3b8      	cbz	r0, 4095ae <lv_refr_get_top_obj+0x82>
  40953e:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
  409542:	f013 0f10 	tst.w	r3, #16
  409546:	d134      	bne.n	4095b2 <lv_refr_get_top_obj+0x86>
        lv_design_res_t design_res = obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK);
  409548:	f8d8 3020 	ldr.w	r3, [r8, #32]
  40954c:	2202      	movs	r2, #2
  40954e:	4631      	mov	r1, r6
  409550:	4640      	mov	r0, r8
  409552:	4798      	blx	r3
  409554:	4681      	mov	r9, r0
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
  409556:	2803      	cmp	r0, #3
  409558:	d02d      	beq.n	4095b6 <lv_refr_get_top_obj+0x8a>

#if LV_USE_OPA_SCALE
        if(design_res == LV_DESIGN_RES_COVER && lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) != LV_OPA_COVER) {
  40955a:	2801      	cmp	r0, #1
  40955c:	d013      	beq.n	409586 <lv_refr_get_top_obj+0x5a>
            design_res = LV_DESIGN_RES_NOT_COVER;
        }
#endif

        lv_obj_t * i;
        _LV_LL_READ(obj->child_ll, i) {
  40955e:	f108 0704 	add.w	r7, r8, #4
  409562:	4638      	mov	r0, r7
  409564:	4b16      	ldr	r3, [pc, #88]	; (4095c0 <lv_refr_get_top_obj+0x94>)
  409566:	4798      	blx	r3
  409568:	4604      	mov	r4, r0
    lv_obj_t * found_p = NULL;
  40956a:	2500      	movs	r5, #0
        _LV_LL_READ(obj->child_ll, i) {
  40956c:	b1b4      	cbz	r4, 40959c <lv_refr_get_top_obj+0x70>
            found_p = lv_refr_get_top_obj(area_p, i);
  40956e:	4621      	mov	r1, r4
  409570:	4630      	mov	r0, r6
  409572:	f7ff ffdb 	bl	40952c <lv_refr_get_top_obj>

            /*If a children is ok then break*/
            if(found_p != NULL) {
  409576:	4605      	mov	r5, r0
  409578:	b980      	cbnz	r0, 40959c <lv_refr_get_top_obj+0x70>
        _LV_LL_READ(obj->child_ll, i) {
  40957a:	4621      	mov	r1, r4
  40957c:	4638      	mov	r0, r7
  40957e:	4b11      	ldr	r3, [pc, #68]	; (4095c4 <lv_refr_get_top_obj+0x98>)
  409580:	4798      	blx	r3
  409582:	4604      	mov	r4, r0
  409584:	e7f2      	b.n	40956c <lv_refr_get_top_obj+0x40>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  409586:	f248 020c 	movw	r2, #32780	; 0x800c
  40958a:	2100      	movs	r1, #0
  40958c:	4640      	mov	r0, r8
  40958e:	4b0e      	ldr	r3, [pc, #56]	; (4095c8 <lv_refr_get_top_obj+0x9c>)
  409590:	4798      	blx	r3
        if(design_res == LV_DESIGN_RES_COVER && lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) != LV_OPA_COVER) {
  409592:	28ff      	cmp	r0, #255	; 0xff
  409594:	d0e3      	beq.n	40955e <lv_refr_get_top_obj+0x32>
            design_res = LV_DESIGN_RES_NOT_COVER;
  409596:	f04f 0902 	mov.w	r9, #2
  40959a:	e7e0      	b.n	40955e <lv_refr_get_top_obj+0x32>
                break;
            }
        }

        /*If no better children use this object*/
        if(found_p == NULL) {
  40959c:	b115      	cbz	r5, 4095a4 <lv_refr_get_top_obj+0x78>
            }
        }
    }

    return found_p;
}
  40959e:	4628      	mov	r0, r5
  4095a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            if(design_res == LV_DESIGN_RES_COVER) {
  4095a4:	f1b9 0f01 	cmp.w	r9, #1
  4095a8:	d1f9      	bne.n	40959e <lv_refr_get_top_obj+0x72>
                found_p = obj;
  4095aa:	4645      	mov	r5, r8
  4095ac:	e7f7      	b.n	40959e <lv_refr_get_top_obj+0x72>
    lv_obj_t * found_p = NULL;
  4095ae:	2500      	movs	r5, #0
  4095b0:	e7f5      	b.n	40959e <lv_refr_get_top_obj+0x72>
  4095b2:	2500      	movs	r5, #0
  4095b4:	e7f3      	b.n	40959e <lv_refr_get_top_obj+0x72>
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
  4095b6:	2500      	movs	r5, #0
  4095b8:	e7f1      	b.n	40959e <lv_refr_get_top_obj+0x72>
  4095ba:	bf00      	nop
  4095bc:	004158d9 	.word	0x004158d9
  4095c0:	004162a5 	.word	0x004162a5
  4095c4:	004162b9 	.word	0x004162b9
  4095c8:	00406ef9 	.word	0x00406ef9

004095cc <lv_refr_obj>:
 * @param mask_ori_p pointer to an area, the objects will be drawn only here
 */
static void lv_refr_obj(lv_obj_t * obj, const lv_area_t * mask_ori_p)
{
    /*Do not refresh hidden objects*/
    if(obj->hidden != 0) return;
  4095cc:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
  4095d0:	f013 0f10 	tst.w	r3, #16
  4095d4:	d000      	beq.n	4095d8 <lv_refr_obj+0xc>
  4095d6:	4770      	bx	lr
{
  4095d8:	b570      	push	{r4, r5, r6, lr}
  4095da:	b08a      	sub	sp, #40	; 0x28
  4095dc:	460e      	mov	r6, r1
  4095de:	4605      	mov	r5, r0
    /* Truncate the original mask to the coordinates of the parent
     * because the parent and its children are visible only here */
    lv_area_t obj_mask;
    lv_area_t obj_ext_mask;
    lv_area_t obj_area;
    lv_coord_t ext_size = obj->ext_draw_pad;
  4095e0:	f9b0 4032 	ldrsh.w	r4, [r0, #50]	; 0x32
    lv_obj_get_coords(obj, &obj_area);
  4095e4:	a904      	add	r1, sp, #16
  4095e6:	4b33      	ldr	r3, [pc, #204]	; (4096b4 <lv_refr_obj+0xe8>)
  4095e8:	4798      	blx	r3
    obj_area.x1 -= ext_size;
  4095ea:	b2a3      	uxth	r3, r4
  4095ec:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  4095f0:	1ad2      	subs	r2, r2, r3
  4095f2:	f8ad 2010 	strh.w	r2, [sp, #16]
    obj_area.y1 -= ext_size;
  4095f6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  4095fa:	1ad2      	subs	r2, r2, r3
  4095fc:	f8ad 2012 	strh.w	r2, [sp, #18]
    obj_area.x2 += ext_size;
  409600:	f8bd 2014 	ldrh.w	r2, [sp, #20]
  409604:	441a      	add	r2, r3
  409606:	f8ad 2014 	strh.w	r2, [sp, #20]
    obj_area.y2 += ext_size;
  40960a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  40960e:	4413      	add	r3, r2
  409610:	f8ad 3016 	strh.w	r3, [sp, #22]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
  409614:	aa04      	add	r2, sp, #16
  409616:	4631      	mov	r1, r6
  409618:	a806      	add	r0, sp, #24
  40961a:	4b27      	ldr	r3, [pc, #156]	; (4096b8 <lv_refr_obj+0xec>)
  40961c:	4798      	blx	r3

    /*Draw the parent and its children only if they ore on 'mask_parent'*/
    if(union_ok != false) {
  40961e:	b1a8      	cbz	r0, 40964c <lv_refr_obj+0x80>

        /* Redraw the object */
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
  409620:	6a2b      	ldr	r3, [r5, #32]
  409622:	b11b      	cbz	r3, 40962c <lv_refr_obj+0x60>
  409624:	2200      	movs	r2, #0
  409626:	a906      	add	r1, sp, #24
  409628:	4628      	mov	r0, r5
  40962a:	4798      	blx	r3
#if LV_COLOR_DEPTH == 32
        debug_color.ch.alpha = 0xff;
#endif
#endif
        /*Create a new 'obj_mask' without 'ext_size' because the children can't be visible there*/
        lv_obj_get_coords(obj, &obj_area);
  40962c:	a904      	add	r1, sp, #16
  40962e:	4628      	mov	r0, r5
  409630:	4b20      	ldr	r3, [pc, #128]	; (4096b4 <lv_refr_obj+0xe8>)
  409632:	4798      	blx	r3
        union_ok = _lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
  409634:	aa04      	add	r2, sp, #16
  409636:	4631      	mov	r1, r6
  409638:	a808      	add	r0, sp, #32
  40963a:	4b1f      	ldr	r3, [pc, #124]	; (4096b8 <lv_refr_obj+0xec>)
  40963c:	4798      	blx	r3
        if(union_ok != false) {
  40963e:	b938      	cbnz	r0, 409650 <lv_refr_obj+0x84>
                }
            }
        }

        /* If all the children are redrawn make 'post draw' design */
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
  409640:	6a2b      	ldr	r3, [r5, #32]
  409642:	b11b      	cbz	r3, 40964c <lv_refr_obj+0x80>
  409644:	2201      	movs	r2, #1
  409646:	a906      	add	r1, sp, #24
  409648:	4628      	mov	r0, r5
  40964a:	4798      	blx	r3
    }
}
  40964c:	b00a      	add	sp, #40	; 0x28
  40964e:	bd70      	pop	{r4, r5, r6, pc}
            _LV_LL_READ_BACK(obj->child_ll, child_p) {
  409650:	1d2e      	adds	r6, r5, #4
  409652:	4630      	mov	r0, r6
  409654:	4b19      	ldr	r3, [pc, #100]	; (4096bc <lv_refr_obj+0xf0>)
  409656:	4798      	blx	r3
  409658:	4604      	mov	r4, r0
  40965a:	e004      	b.n	409666 <lv_refr_obj+0x9a>
  40965c:	4621      	mov	r1, r4
  40965e:	4630      	mov	r0, r6
  409660:	4b17      	ldr	r3, [pc, #92]	; (4096c0 <lv_refr_obj+0xf4>)
  409662:	4798      	blx	r3
  409664:	4604      	mov	r4, r0
  409666:	2c00      	cmp	r4, #0
  409668:	d0ea      	beq.n	409640 <lv_refr_obj+0x74>
                lv_obj_get_coords(child_p, &child_area);
  40966a:	a902      	add	r1, sp, #8
  40966c:	4620      	mov	r0, r4
  40966e:	4b11      	ldr	r3, [pc, #68]	; (4096b4 <lv_refr_obj+0xe8>)
  409670:	4798      	blx	r3
                child_area.x1 -= ext_size;
  409672:	8e63      	ldrh	r3, [r4, #50]	; 0x32
  409674:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  409678:	1ad2      	subs	r2, r2, r3
  40967a:	f8ad 2008 	strh.w	r2, [sp, #8]
                child_area.y1 -= ext_size;
  40967e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
  409682:	1ad2      	subs	r2, r2, r3
  409684:	f8ad 200a 	strh.w	r2, [sp, #10]
                child_area.x2 += ext_size;
  409688:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  40968c:	441a      	add	r2, r3
  40968e:	f8ad 200c 	strh.w	r2, [sp, #12]
                child_area.y2 += ext_size;
  409692:	f8bd 200e 	ldrh.w	r2, [sp, #14]
  409696:	4413      	add	r3, r2
  409698:	f8ad 300e 	strh.w	r3, [sp, #14]
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
  40969c:	aa02      	add	r2, sp, #8
  40969e:	a908      	add	r1, sp, #32
  4096a0:	4668      	mov	r0, sp
  4096a2:	4b05      	ldr	r3, [pc, #20]	; (4096b8 <lv_refr_obj+0xec>)
  4096a4:	4798      	blx	r3
                if(union_ok) {
  4096a6:	2800      	cmp	r0, #0
  4096a8:	d0d8      	beq.n	40965c <lv_refr_obj+0x90>
                    lv_refr_obj(child_p, &mask_child);
  4096aa:	4669      	mov	r1, sp
  4096ac:	4620      	mov	r0, r4
  4096ae:	f7ff ff8d 	bl	4095cc <lv_refr_obj>
  4096b2:	e7d3      	b.n	40965c <lv_refr_obj+0x90>
  4096b4:	00405b01 	.word	0x00405b01
  4096b8:	00415663 	.word	0x00415663
  4096bc:	004162af 	.word	0x004162af
  4096c0:	004162c7 	.word	0x004162c7

004096c4 <lv_refr_obj_and_children>:
{
  4096c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4096c6:	460e      	mov	r6, r1
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
  4096c8:	4604      	mov	r4, r0
  4096ca:	b150      	cbz	r0, 4096e2 <lv_refr_obj_and_children+0x1e>
    if(top_p == NULL) return;  /*Shouldn't happen*/
  4096cc:	2c00      	cmp	r4, #0
  4096ce:	d02c      	beq.n	40972a <lv_refr_obj_and_children+0x66>
    lv_refr_obj(top_p, mask_p);
  4096d0:	4631      	mov	r1, r6
  4096d2:	4620      	mov	r0, r4
  4096d4:	4b15      	ldr	r3, [pc, #84]	; (40972c <lv_refr_obj_and_children+0x68>)
  4096d6:	4798      	blx	r3
    par = lv_obj_get_parent(top_p);
  4096d8:	4620      	mov	r0, r4
  4096da:	4b15      	ldr	r3, [pc, #84]	; (409730 <lv_refr_obj_and_children+0x6c>)
  4096dc:	4798      	blx	r3
  4096de:	4607      	mov	r7, r0
    while(par != NULL) {
  4096e0:	e01b      	b.n	40971a <lv_refr_obj_and_children+0x56>
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
  4096e2:	4b14      	ldr	r3, [pc, #80]	; (409734 <lv_refr_obj_and_children+0x70>)
  4096e4:	6818      	ldr	r0, [r3, #0]
  4096e6:	4b14      	ldr	r3, [pc, #80]	; (409738 <lv_refr_obj_and_children+0x74>)
  4096e8:	4798      	blx	r3
  4096ea:	4604      	mov	r4, r0
  4096ec:	e7ee      	b.n	4096cc <lv_refr_obj_and_children+0x8>
            lv_refr_obj(i, mask_p);
  4096ee:	4631      	mov	r1, r6
  4096f0:	4620      	mov	r0, r4
  4096f2:	4b0e      	ldr	r3, [pc, #56]	; (40972c <lv_refr_obj_and_children+0x68>)
  4096f4:	4798      	blx	r3
            i = _lv_ll_get_prev(&(par->child_ll), i);
  4096f6:	4621      	mov	r1, r4
  4096f8:	4628      	mov	r0, r5
  4096fa:	4b10      	ldr	r3, [pc, #64]	; (40973c <lv_refr_obj_and_children+0x78>)
  4096fc:	4798      	blx	r3
  4096fe:	4604      	mov	r4, r0
        while(i != NULL) {
  409700:	2c00      	cmp	r4, #0
  409702:	d1f4      	bne.n	4096ee <lv_refr_obj_and_children+0x2a>
        if(par->design_cb) par->design_cb(par, mask_p, LV_DESIGN_DRAW_POST);
  409704:	6a3b      	ldr	r3, [r7, #32]
  409706:	b11b      	cbz	r3, 409710 <lv_refr_obj_and_children+0x4c>
  409708:	2201      	movs	r2, #1
  40970a:	4631      	mov	r1, r6
  40970c:	4638      	mov	r0, r7
  40970e:	4798      	blx	r3
        par = lv_obj_get_parent(par);
  409710:	4638      	mov	r0, r7
  409712:	4b07      	ldr	r3, [pc, #28]	; (409730 <lv_refr_obj_and_children+0x6c>)
  409714:	4798      	blx	r3
        border_p = par;
  409716:	463c      	mov	r4, r7
        par = lv_obj_get_parent(par);
  409718:	4607      	mov	r7, r0
    while(par != NULL) {
  40971a:	b137      	cbz	r7, 40972a <lv_refr_obj_and_children+0x66>
        lv_obj_t * i = _lv_ll_get_prev(&(par->child_ll), border_p);
  40971c:	1d3d      	adds	r5, r7, #4
  40971e:	4621      	mov	r1, r4
  409720:	4628      	mov	r0, r5
  409722:	4b06      	ldr	r3, [pc, #24]	; (40973c <lv_refr_obj_and_children+0x78>)
  409724:	4798      	blx	r3
  409726:	4604      	mov	r4, r0
        while(i != NULL) {
  409728:	e7ea      	b.n	409700 <lv_refr_obj_and_children+0x3c>
  40972a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40972c:	004095cd 	.word	0x004095cd
  409730:	004059ed 	.word	0x004059ed
  409734:	2040c42c 	.word	0x2040c42c
  409738:	00403659 	.word	0x00403659
  40973c:	004162c7 	.word	0x004162c7

00409740 <_lv_refr_init>:
{
  409740:	4770      	bx	lr
	...

00409744 <_lv_inv_area>:
{
  409744:	b530      	push	{r4, r5, lr}
  409746:	b085      	sub	sp, #20
  409748:	460c      	mov	r4, r1
    if(!disp) disp = lv_disp_get_default();
  40974a:	4605      	mov	r5, r0
  40974c:	2800      	cmp	r0, #0
  40974e:	d035      	beq.n	4097bc <_lv_inv_area+0x78>
    if(!disp) return;
  409750:	2d00      	cmp	r5, #0
  409752:	d03d      	beq.n	4097d0 <_lv_inv_area+0x8c>
    if(area_p == NULL) {
  409754:	2c00      	cmp	r4, #0
  409756:	d035      	beq.n	4097c4 <_lv_inv_area+0x80>
    scr_area.x1 = 0;
  409758:	2300      	movs	r3, #0
  40975a:	f8ad 3008 	strh.w	r3, [sp, #8]
    scr_area.y1 = 0;
  40975e:	f8ad 300a 	strh.w	r3, [sp, #10]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
  409762:	4628      	mov	r0, r5
  409764:	4b34      	ldr	r3, [pc, #208]	; (409838 <_lv_inv_area+0xf4>)
  409766:	4798      	blx	r3
  409768:	b280      	uxth	r0, r0
  40976a:	3801      	subs	r0, #1
  40976c:	f8ad 000c 	strh.w	r0, [sp, #12]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
  409770:	4628      	mov	r0, r5
  409772:	4b32      	ldr	r3, [pc, #200]	; (40983c <_lv_inv_area+0xf8>)
  409774:	4798      	blx	r3
  409776:	b280      	uxth	r0, r0
  409778:	3801      	subs	r0, #1
  40977a:	f8ad 000e 	strh.w	r0, [sp, #14]
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
  40977e:	aa02      	add	r2, sp, #8
  409780:	4621      	mov	r1, r4
  409782:	4668      	mov	r0, sp
  409784:	4b2e      	ldr	r3, [pc, #184]	; (409840 <_lv_inv_area+0xfc>)
  409786:	4798      	blx	r3
    if(suc != false) {
  409788:	b310      	cbz	r0, 4097d0 <_lv_inv_area+0x8c>
        if(disp->driver.rounder_cb) disp->driver.rounder_cb(&disp->driver, &com_area);
  40978a:	692b      	ldr	r3, [r5, #16]
  40978c:	b113      	cbz	r3, 409794 <_lv_inv_area+0x50>
  40978e:	4669      	mov	r1, sp
  409790:	4628      	mov	r0, r5
  409792:	4798      	blx	r3
{
  409794:	2400      	movs	r4, #0
        for(i = 0; i < disp->inv_p; i++) {
  409796:	f8b5 3182 	ldrh.w	r3, [r5, #386]	; 0x182
  40979a:	f3c3 0309 	ubfx	r3, r3, #0, #10
  40979e:	429c      	cmp	r4, r3
  4097a0:	da18      	bge.n	4097d4 <_lv_inv_area+0x90>
            if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
  4097a2:	f104 010c 	add.w	r1, r4, #12
  4097a6:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
  4097aa:	2200      	movs	r2, #0
  4097ac:	3102      	adds	r1, #2
  4097ae:	4668      	mov	r0, sp
  4097b0:	4b24      	ldr	r3, [pc, #144]	; (409844 <_lv_inv_area+0x100>)
  4097b2:	4798      	blx	r3
  4097b4:	b960      	cbnz	r0, 4097d0 <_lv_inv_area+0x8c>
        for(i = 0; i < disp->inv_p; i++) {
  4097b6:	3401      	adds	r4, #1
  4097b8:	b2a4      	uxth	r4, r4
  4097ba:	e7ec      	b.n	409796 <_lv_inv_area+0x52>
    if(!disp) disp = lv_disp_get_default();
  4097bc:	4b22      	ldr	r3, [pc, #136]	; (409848 <_lv_inv_area+0x104>)
  4097be:	4798      	blx	r3
  4097c0:	4605      	mov	r5, r0
  4097c2:	e7c5      	b.n	409750 <_lv_inv_area+0xc>
        disp->inv_p = 0;
  4097c4:	f8b5 3182 	ldrh.w	r3, [r5, #386]	; 0x182
  4097c8:	f36f 0309 	bfc	r3, #0, #10
  4097cc:	f8a5 3182 	strh.w	r3, [r5, #386]	; 0x182
}
  4097d0:	b005      	add	sp, #20
  4097d2:	bd30      	pop	{r4, r5, pc}
        if(disp->inv_p < LV_INV_BUF_SIZE) {
  4097d4:	2b1f      	cmp	r3, #31
  4097d6:	dc1b      	bgt.n	409810 <_lv_inv_area+0xcc>
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
  4097d8:	330c      	adds	r3, #12
  4097da:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
  4097de:	3302      	adds	r3, #2
  4097e0:	4669      	mov	r1, sp
  4097e2:	2208      	movs	r2, #8
  4097e4:	e004      	b.n	4097f0 <_lv_inv_area+0xac>
        *d8 = *s8;
  4097e6:	f811 0b01 	ldrb.w	r0, [r1], #1
  4097ea:	f803 0b01 	strb.w	r0, [r3], #1
        len--;
  4097ee:	3a01      	subs	r2, #1
    while(len) {
  4097f0:	2a00      	cmp	r2, #0
  4097f2:	d1f8      	bne.n	4097e6 <_lv_inv_area+0xa2>
        disp->inv_p++;
  4097f4:	f8b5 3182 	ldrh.w	r3, [r5, #386]	; 0x182
  4097f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
  4097fc:	3201      	adds	r2, #1
  4097fe:	f362 0309 	bfi	r3, r2, #0, #10
  409802:	f8a5 3182 	strh.w	r3, [r5, #386]	; 0x182
        lv_task_set_prio(disp->refr_task, LV_REFR_TASK_PRIO);
  409806:	2103      	movs	r1, #3
  409808:	6b68      	ldr	r0, [r5, #52]	; 0x34
  40980a:	4b10      	ldr	r3, [pc, #64]	; (40984c <_lv_inv_area+0x108>)
  40980c:	4798      	blx	r3
  40980e:	e7df      	b.n	4097d0 <_lv_inv_area+0x8c>
            disp->inv_p = 0;
  409810:	f8b5 3182 	ldrh.w	r3, [r5, #386]	; 0x182
  409814:	f36f 0309 	bfc	r3, #0, #10
  409818:	f8a5 3182 	strh.w	r3, [r5, #386]	; 0x182
            lv_area_copy(&disp->inv_areas[disp->inv_p], &scr_area);
  40981c:	f105 0162 	add.w	r1, r5, #98	; 0x62
    const uint8_t * s8 = (const uint8_t *)src;
  409820:	aa02      	add	r2, sp, #8
  409822:	2308      	movs	r3, #8
  409824:	e004      	b.n	409830 <_lv_inv_area+0xec>
        *d8 = *s8;
  409826:	f812 0b01 	ldrb.w	r0, [r2], #1
  40982a:	f801 0b01 	strb.w	r0, [r1], #1
        len--;
  40982e:	3b01      	subs	r3, #1
    while(len) {
  409830:	2b00      	cmp	r3, #0
  409832:	d1f8      	bne.n	409826 <_lv_inv_area+0xe2>
  409834:	e7de      	b.n	4097f4 <_lv_inv_area+0xb0>
  409836:	bf00      	nop
  409838:	00414da1 	.word	0x00414da1
  40983c:	00414dd1 	.word	0x00414dd1
  409840:	00415663 	.word	0x00415663
  409844:	004158d9 	.word	0x004158d9
  409848:	00414d95 	.word	0x00414d95
  40984c:	00417999 	.word	0x00417999

00409850 <_lv_refr_get_disp_refreshing>:
}
  409850:	4b01      	ldr	r3, [pc, #4]	; (409858 <_lv_refr_get_disp_refreshing+0x8>)
  409852:	6818      	ldr	r0, [r3, #0]
  409854:	4770      	bx	lr
  409856:	bf00      	nop
  409858:	2040c42c 	.word	0x2040c42c

0040985c <lv_refr_vdb_flush>:

/**
 * Flush the content of the VDB
 */
static void lv_refr_vdb_flush(void)
{
  40985c:	b538      	push	{r3, r4, r5, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
  40985e:	4d1e      	ldr	r5, [pc, #120]	; (4098d8 <lv_refr_vdb_flush+0x7c>)
  409860:	6828      	ldr	r0, [r5, #0]
  409862:	4b1e      	ldr	r3, [pc, #120]	; (4098dc <lv_refr_vdb_flush+0x80>)
  409864:	4798      	blx	r3
  409866:	4604      	mov	r4, r0

    /*In double buffered mode wait until the other buffer is flushed before flushing the current
     * one*/
    if(lv_disp_is_double_buf(disp_refr)) {
  409868:	6828      	ldr	r0, [r5, #0]
  40986a:	4b1d      	ldr	r3, [pc, #116]	; (4098e0 <lv_refr_vdb_flush+0x84>)
  40986c:	4798      	blx	r3
  40986e:	b978      	cbnz	r0, 409890 <lv_refr_vdb_flush+0x34>
        while(vdb->flushing) {
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
        }
    }

    vdb->flushing = 1;
  409870:	2301      	movs	r3, #1
  409872:	61a3      	str	r3, [r4, #24]

    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
  409874:	4b18      	ldr	r3, [pc, #96]	; (4098d8 <lv_refr_vdb_flush+0x7c>)
  409876:	681b      	ldr	r3, [r3, #0]
  409878:	685b      	ldr	r3, [r3, #4]
  40987a:	6a1a      	ldr	r2, [r3, #32]
  40987c:	f012 0f01 	tst.w	r2, #1
  409880:	d010      	beq.n	4098a4 <lv_refr_vdb_flush+0x48>
  409882:	6a1b      	ldr	r3, [r3, #32]
  409884:	f013 0f02 	tst.w	r3, #2
  409888:	d00c      	beq.n	4098a4 <lv_refr_vdb_flush+0x48>
  40988a:	2301      	movs	r3, #1
  40988c:	61e3      	str	r3, [r4, #28]
  40988e:	e00b      	b.n	4098a8 <lv_refr_vdb_flush+0x4c>
        while(vdb->flushing) {
  409890:	69a3      	ldr	r3, [r4, #24]
  409892:	2b00      	cmp	r3, #0
  409894:	d0ec      	beq.n	409870 <lv_refr_vdb_flush+0x14>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
  409896:	4b10      	ldr	r3, [pc, #64]	; (4098d8 <lv_refr_vdb_flush+0x7c>)
  409898:	6818      	ldr	r0, [r3, #0]
  40989a:	69c3      	ldr	r3, [r0, #28]
  40989c:	2b00      	cmp	r3, #0
  40989e:	d0f7      	beq.n	409890 <lv_refr_vdb_flush+0x34>
  4098a0:	4798      	blx	r3
  4098a2:	e7f5      	b.n	409890 <lv_refr_vdb_flush+0x34>
    else vdb->flushing_last = 0;
  4098a4:	2300      	movs	r3, #0
  4098a6:	61e3      	str	r3, [r4, #28]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  4098a8:	4b0e      	ldr	r3, [pc, #56]	; (4098e4 <lv_refr_vdb_flush+0x88>)
  4098aa:	4798      	blx	r3
  4098ac:	4605      	mov	r5, r0
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
  4098ae:	6a43      	ldr	r3, [r0, #36]	; 0x24
  4098b0:	b103      	cbz	r3, 4098b4 <lv_refr_vdb_flush+0x58>
  4098b2:	4798      	blx	r3

    if(disp->driver.flush_cb) disp->driver.flush_cb(&disp->driver, &vdb->area, vdb->buf_act);
  4098b4:	68eb      	ldr	r3, [r5, #12]
  4098b6:	b123      	cbz	r3, 4098c2 <lv_refr_vdb_flush+0x66>
  4098b8:	68a2      	ldr	r2, [r4, #8]
  4098ba:	f104 0110 	add.w	r1, r4, #16
  4098be:	4628      	mov	r0, r5
  4098c0:	4798      	blx	r3

    if(vdb->buf1 && vdb->buf2) {
  4098c2:	6823      	ldr	r3, [r4, #0]
  4098c4:	b12b      	cbz	r3, 4098d2 <lv_refr_vdb_flush+0x76>
  4098c6:	6862      	ldr	r2, [r4, #4]
  4098c8:	b11a      	cbz	r2, 4098d2 <lv_refr_vdb_flush+0x76>
        if(vdb->buf_act == vdb->buf1)
  4098ca:	68a1      	ldr	r1, [r4, #8]
  4098cc:	428b      	cmp	r3, r1
  4098ce:	d001      	beq.n	4098d4 <lv_refr_vdb_flush+0x78>
            vdb->buf_act = vdb->buf2;
        else
            vdb->buf_act = vdb->buf1;
  4098d0:	60a3      	str	r3, [r4, #8]
  4098d2:	bd38      	pop	{r3, r4, r5, pc}
            vdb->buf_act = vdb->buf2;
  4098d4:	60a2      	str	r2, [r4, #8]
  4098d6:	bd38      	pop	{r3, r4, r5, pc}
  4098d8:	2040c42c 	.word	0x2040c42c
  4098dc:	00414ea5 	.word	0x00414ea5
  4098e0:	00414edd 	.word	0x00414edd
  4098e4:	00409851 	.word	0x00409851

004098e8 <lv_refr_area_part>:
{
  4098e8:	b570      	push	{r4, r5, r6, lr}
  4098ea:	b09c      	sub	sp, #112	; 0x70
  4098ec:	4606      	mov	r6, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
  4098ee:	4d4c      	ldr	r5, [pc, #304]	; (409a20 <lv_refr_area_part+0x138>)
  4098f0:	6828      	ldr	r0, [r5, #0]
  4098f2:	4b4c      	ldr	r3, [pc, #304]	; (409a24 <lv_refr_area_part+0x13c>)
  4098f4:	4798      	blx	r3
  4098f6:	4604      	mov	r4, r0
    if(lv_disp_is_double_buf(disp_refr) == false) {
  4098f8:	6828      	ldr	r0, [r5, #0]
  4098fa:	4b4b      	ldr	r3, [pc, #300]	; (409a28 <lv_refr_area_part+0x140>)
  4098fc:	4798      	blx	r3
  4098fe:	b940      	cbnz	r0, 409912 <lv_refr_area_part+0x2a>
        while(vdb->flushing) {
  409900:	69a3      	ldr	r3, [r4, #24]
  409902:	b133      	cbz	r3, 409912 <lv_refr_area_part+0x2a>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
  409904:	4b46      	ldr	r3, [pc, #280]	; (409a20 <lv_refr_area_part+0x138>)
  409906:	6818      	ldr	r0, [r3, #0]
  409908:	69c3      	ldr	r3, [r0, #28]
  40990a:	2b00      	cmp	r3, #0
  40990c:	d0f8      	beq.n	409900 <lv_refr_area_part+0x18>
  40990e:	4798      	blx	r3
  409910:	e7f6      	b.n	409900 <lv_refr_area_part+0x18>
    _lv_area_intersect(&start_mask, area_p, &vdb->area);
  409912:	f104 0210 	add.w	r2, r4, #16
  409916:	4631      	mov	r1, r6
  409918:	a81a      	add	r0, sp, #104	; 0x68
  40991a:	4b44      	ldr	r3, [pc, #272]	; (409a2c <lv_refr_area_part+0x144>)
  40991c:	4798      	blx	r3
    top_act_scr = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
  40991e:	4d40      	ldr	r5, [pc, #256]	; (409a20 <lv_refr_area_part+0x138>)
  409920:	6828      	ldr	r0, [r5, #0]
  409922:	4b43      	ldr	r3, [pc, #268]	; (409a30 <lv_refr_area_part+0x148>)
  409924:	4798      	blx	r3
  409926:	4601      	mov	r1, r0
  409928:	a81a      	add	r0, sp, #104	; 0x68
  40992a:	4b42      	ldr	r3, [pc, #264]	; (409a34 <lv_refr_area_part+0x14c>)
  40992c:	4798      	blx	r3
  40992e:	4604      	mov	r4, r0
    if(disp_refr->prev_scr) {
  409930:	682b      	ldr	r3, [r5, #0]
  409932:	6c99      	ldr	r1, [r3, #72]	; 0x48
  409934:	2900      	cmp	r1, #0
  409936:	d03d      	beq.n	4099b4 <lv_refr_area_part+0xcc>
        top_prev_scr = lv_refr_get_top_obj(&start_mask, disp_refr->prev_scr);
  409938:	a81a      	add	r0, sp, #104	; 0x68
  40993a:	4b3e      	ldr	r3, [pc, #248]	; (409a34 <lv_refr_area_part+0x14c>)
  40993c:	4798      	blx	r3
  40993e:	4605      	mov	r5, r0
    if(top_act_scr == NULL && top_prev_scr == NULL) {
  409940:	2c00      	cmp	r4, #0
  409942:	bf08      	it	eq
  409944:	2d00      	cmpeq	r5, #0
  409946:	d113      	bne.n	409970 <lv_refr_area_part+0x88>
        if(disp_refr->bg_img) {
  409948:	4b35      	ldr	r3, [pc, #212]	; (409a20 <lv_refr_area_part+0x138>)
  40994a:	681b      	ldr	r3, [r3, #0]
  40994c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  40994e:	2b00      	cmp	r3, #0
  409950:	d04a      	beq.n	4099e8 <lv_refr_area_part+0x100>
            lv_draw_img_dsc_init(&dsc);
  409952:	a805      	add	r0, sp, #20
  409954:	4b38      	ldr	r3, [pc, #224]	; (409a38 <lv_refr_area_part+0x150>)
  409956:	4798      	blx	r3
            dsc.opa = disp_refr->bg_opa;
  409958:	4b31      	ldr	r3, [pc, #196]	; (409a20 <lv_refr_area_part+0x138>)
  40995a:	681b      	ldr	r3, [r3, #0]
  40995c:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
  409960:	f88d 2014 	strb.w	r2, [sp, #20]
            res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
  409964:	a902      	add	r1, sp, #8
  409966:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
  409968:	4b34      	ldr	r3, [pc, #208]	; (409a3c <lv_refr_area_part+0x154>)
  40996a:	4798      	blx	r3
            if(res == LV_RES_OK) {
  40996c:	2801      	cmp	r0, #1
  40996e:	d023      	beq.n	4099b8 <lv_refr_area_part+0xd0>
    if(disp_refr->prev_scr) {
  409970:	4b2b      	ldr	r3, [pc, #172]	; (409a20 <lv_refr_area_part+0x138>)
  409972:	681b      	ldr	r3, [r3, #0]
  409974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  409976:	b12b      	cbz	r3, 409984 <lv_refr_area_part+0x9c>
        if(top_prev_scr == NULL) {
  409978:	2d00      	cmp	r5, #0
  40997a:	d048      	beq.n	409a0e <lv_refr_area_part+0x126>
        lv_refr_obj_and_children(top_prev_scr, &start_mask);
  40997c:	a91a      	add	r1, sp, #104	; 0x68
  40997e:	4628      	mov	r0, r5
  409980:	4b2f      	ldr	r3, [pc, #188]	; (409a40 <lv_refr_area_part+0x158>)
  409982:	4798      	blx	r3
    if(top_act_scr == NULL) {
  409984:	2c00      	cmp	r4, #0
  409986:	d044      	beq.n	409a12 <lv_refr_area_part+0x12a>
    lv_refr_obj_and_children(top_act_scr, &start_mask);
  409988:	a91a      	add	r1, sp, #104	; 0x68
  40998a:	4620      	mov	r0, r4
  40998c:	4d2c      	ldr	r5, [pc, #176]	; (409a40 <lv_refr_area_part+0x158>)
  40998e:	47a8      	blx	r5
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
  409990:	4c23      	ldr	r4, [pc, #140]	; (409a20 <lv_refr_area_part+0x138>)
  409992:	6820      	ldr	r0, [r4, #0]
  409994:	4b2b      	ldr	r3, [pc, #172]	; (409a44 <lv_refr_area_part+0x15c>)
  409996:	4798      	blx	r3
  409998:	a91a      	add	r1, sp, #104	; 0x68
  40999a:	47a8      	blx	r5
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
  40999c:	6820      	ldr	r0, [r4, #0]
  40999e:	4b2a      	ldr	r3, [pc, #168]	; (409a48 <lv_refr_area_part+0x160>)
  4099a0:	4798      	blx	r3
  4099a2:	a91a      	add	r1, sp, #104	; 0x68
  4099a4:	47a8      	blx	r5
    if(lv_disp_is_true_double_buf(disp_refr) == false) {
  4099a6:	6820      	ldr	r0, [r4, #0]
  4099a8:	4b28      	ldr	r3, [pc, #160]	; (409a4c <lv_refr_area_part+0x164>)
  4099aa:	4798      	blx	r3
  4099ac:	2800      	cmp	r0, #0
  4099ae:	d034      	beq.n	409a1a <lv_refr_area_part+0x132>
}
  4099b0:	b01c      	add	sp, #112	; 0x70
  4099b2:	bd70      	pop	{r4, r5, r6, pc}
    lv_obj_t * top_prev_scr = NULL;
  4099b4:	2500      	movs	r5, #0
  4099b6:	e7c3      	b.n	409940 <lv_refr_area_part+0x58>
                lv_area_set(&a, 0, 0, header.w - 1, header.h - 1);
  4099b8:	9b02      	ldr	r3, [sp, #8]
  4099ba:	f3c3 238a 	ubfx	r3, r3, #10, #11
  4099be:	f8bd 200a 	ldrh.w	r2, [sp, #10]
  4099c2:	f3c2 124a 	ubfx	r2, r2, #5, #11
  4099c6:	3a01      	subs	r2, #1
  4099c8:	9200      	str	r2, [sp, #0]
  4099ca:	3b01      	subs	r3, #1
  4099cc:	2200      	movs	r2, #0
  4099ce:	4611      	mov	r1, r2
  4099d0:	a803      	add	r0, sp, #12
  4099d2:	4e1f      	ldr	r6, [pc, #124]	; (409a50 <lv_refr_area_part+0x168>)
  4099d4:	47b0      	blx	r6
                lv_draw_img(&a, &start_mask, disp_refr->bg_img, &dsc);
  4099d6:	4b12      	ldr	r3, [pc, #72]	; (409a20 <lv_refr_area_part+0x138>)
  4099d8:	681a      	ldr	r2, [r3, #0]
  4099da:	ab05      	add	r3, sp, #20
  4099dc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
  4099de:	a91a      	add	r1, sp, #104	; 0x68
  4099e0:	a803      	add	r0, sp, #12
  4099e2:	4e1c      	ldr	r6, [pc, #112]	; (409a54 <lv_refr_area_part+0x16c>)
  4099e4:	47b0      	blx	r6
  4099e6:	e7c3      	b.n	409970 <lv_refr_area_part+0x88>
            lv_draw_rect_dsc_init(&dsc);
  4099e8:	a805      	add	r0, sp, #20
  4099ea:	4b1b      	ldr	r3, [pc, #108]	; (409a58 <lv_refr_area_part+0x170>)
  4099ec:	4798      	blx	r3
            dsc.bg_color = disp_refr->bg_color;
  4099ee:	4b0c      	ldr	r3, [pc, #48]	; (409a20 <lv_refr_area_part+0x138>)
  4099f0:	681b      	ldr	r3, [r3, #0]
  4099f2:	f8b3 205a 	ldrh.w	r2, [r3, #90]	; 0x5a
  4099f6:	f8ad 2016 	strh.w	r2, [sp, #22]
            dsc.bg_opa = disp_refr->bg_opa;
  4099fa:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
  4099fe:	f88d 3020 	strb.w	r3, [sp, #32]
            lv_draw_rect(&start_mask, &start_mask, &dsc);
  409a02:	aa05      	add	r2, sp, #20
  409a04:	a91a      	add	r1, sp, #104	; 0x68
  409a06:	4608      	mov	r0, r1
  409a08:	4b14      	ldr	r3, [pc, #80]	; (409a5c <lv_refr_area_part+0x174>)
  409a0a:	4798      	blx	r3
  409a0c:	e7b0      	b.n	409970 <lv_refr_area_part+0x88>
            top_prev_scr = disp_refr->prev_scr;
  409a0e:	461d      	mov	r5, r3
  409a10:	e7b4      	b.n	40997c <lv_refr_area_part+0x94>
        top_act_scr = disp_refr->act_scr;
  409a12:	4b03      	ldr	r3, [pc, #12]	; (409a20 <lv_refr_area_part+0x138>)
  409a14:	681b      	ldr	r3, [r3, #0]
  409a16:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  409a18:	e7b6      	b.n	409988 <lv_refr_area_part+0xa0>
        lv_refr_vdb_flush();
  409a1a:	4b11      	ldr	r3, [pc, #68]	; (409a60 <lv_refr_area_part+0x178>)
  409a1c:	4798      	blx	r3
}
  409a1e:	e7c7      	b.n	4099b0 <lv_refr_area_part+0xc8>
  409a20:	2040c42c 	.word	0x2040c42c
  409a24:	00414ea5 	.word	0x00414ea5
  409a28:	00414edd 	.word	0x00414edd
  409a2c:	00415663 	.word	0x00415663
  409a30:	00403659 	.word	0x00403659
  409a34:	0040952d 	.word	0x0040952d
  409a38:	0040d3f1 	.word	0x0040d3f1
  409a3c:	004139b9 	.word	0x004139b9
  409a40:	004096c5 	.word	0x004096c5
  409a44:	00403691 	.word	0x00403691
  409a48:	004036ad 	.word	0x004036ad
  409a4c:	00414ef5 	.word	0x00414ef5
  409a50:	0041562d 	.word	0x0041562d
  409a54:	0040d69d 	.word	0x0040d69d
  409a58:	0041250d 	.word	0x0041250d
  409a5c:	00412559 	.word	0x00412559
  409a60:	0040985d 	.word	0x0040985d

00409a64 <lv_refr_area>:
{
  409a64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  409a68:	b083      	sub	sp, #12
  409a6a:	4606      	mov	r6, r0
    if(lv_disp_is_true_double_buf(disp_refr)) {
  409a6c:	4b62      	ldr	r3, [pc, #392]	; (409bf8 <lv_refr_area+0x194>)
  409a6e:	6818      	ldr	r0, [r3, #0]
  409a70:	4b62      	ldr	r3, [pc, #392]	; (409bfc <lv_refr_area+0x198>)
  409a72:	4798      	blx	r3
  409a74:	2800      	cmp	r0, #0
  409a76:	d157      	bne.n	409b28 <lv_refr_area+0xc4>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
  409a78:	f8df 917c 	ldr.w	r9, [pc, #380]	; 409bf8 <lv_refr_area+0x194>
  409a7c:	f8d9 0000 	ldr.w	r0, [r9]
  409a80:	4b5f      	ldr	r3, [pc, #380]	; (409c00 <lv_refr_area+0x19c>)
  409a82:	4798      	blx	r3
  409a84:	4605      	mov	r5, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  409a86:	f8b6 8004 	ldrh.w	r8, [r6, #4]
  409a8a:	8833      	ldrh	r3, [r6, #0]
  409a8c:	eba8 0803 	sub.w	r8, r8, r3
  409a90:	fa1f f888 	uxth.w	r8, r8
  409a94:	f108 0801 	add.w	r8, r8, #1
  409a98:	fa0f f888 	sxth.w	r8, r8
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  409a9c:	f9b6 7006 	ldrsh.w	r7, [r6, #6]
  409aa0:	b2bc      	uxth	r4, r7
  409aa2:	8873      	ldrh	r3, [r6, #2]
  409aa4:	1ae4      	subs	r4, r4, r3
  409aa6:	b2a4      	uxth	r4, r4
  409aa8:	3401      	adds	r4, #1
  409aaa:	b224      	sxth	r4, r4
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
  409aac:	f8d9 0000 	ldr.w	r0, [r9]
  409ab0:	4b54      	ldr	r3, [pc, #336]	; (409c04 <lv_refr_area+0x1a0>)
  409ab2:	4798      	blx	r3
        lv_coord_t y2 =
  409ab4:	42b8      	cmp	r0, r7
  409ab6:	dd59      	ble.n	409b6c <lv_refr_area+0x108>
  409ab8:	f9b6 7006 	ldrsh.w	r7, [r6, #6]
        int32_t max_row = (uint32_t)vdb->size / w;
  409abc:	68eb      	ldr	r3, [r5, #12]
  409abe:	fbb3 f3f8 	udiv	r3, r3, r8
        if(max_row > h) max_row = h;
  409ac2:	46a0      	mov	r8, r4
  409ac4:	42a3      	cmp	r3, r4
  409ac6:	dc00      	bgt.n	409aca <lv_refr_area+0x66>
        int32_t max_row = (uint32_t)vdb->size / w;
  409ac8:	4698      	mov	r8, r3
        if(disp_refr->driver.rounder_cb) {
  409aca:	4b4b      	ldr	r3, [pc, #300]	; (409bf8 <lv_refr_area+0x194>)
  409acc:	681b      	ldr	r3, [r3, #0]
  409ace:	691b      	ldr	r3, [r3, #16]
  409ad0:	b32b      	cbz	r3, 409b1e <lv_refr_area+0xba>
            tmp.x1 = 0;
  409ad2:	2300      	movs	r3, #0
  409ad4:	f8ad 3000 	strh.w	r3, [sp]
            tmp.x2 = 0;
  409ad8:	f8ad 3004 	strh.w	r3, [sp, #4]
            tmp.y1 = 0;
  409adc:	f8ad 3002 	strh.w	r3, [sp, #2]
            lv_coord_t h_tmp = max_row;
  409ae0:	fa0f f988 	sxth.w	r9, r8
                tmp.y2 = h_tmp - 1;
  409ae4:	f109 34ff 	add.w	r4, r9, #4294967295
  409ae8:	b224      	sxth	r4, r4
  409aea:	f8ad 4006 	strh.w	r4, [sp, #6]
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
  409aee:	4b42      	ldr	r3, [pc, #264]	; (409bf8 <lv_refr_area+0x194>)
  409af0:	6818      	ldr	r0, [r3, #0]
  409af2:	6903      	ldr	r3, [r0, #16]
  409af4:	4669      	mov	r1, sp
  409af6:	4798      	blx	r3
  409af8:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
  409afc:	b293      	uxth	r3, r2
  409afe:	f8bd 1002 	ldrh.w	r1, [sp, #2]
  409b02:	1a5b      	subs	r3, r3, r1
  409b04:	b29b      	uxth	r3, r3
  409b06:	3301      	adds	r3, #1
  409b08:	b21b      	sxth	r3, r3
                if(lv_area_get_height(&tmp) <= max_row) break;
  409b0a:	4598      	cmp	r8, r3
  409b0c:	da02      	bge.n	409b14 <lv_refr_area+0xb0>
                h_tmp--;
  409b0e:	46a1      	mov	r9, r4
            } while(h_tmp > 0);
  409b10:	2c00      	cmp	r4, #0
  409b12:	dce7      	bgt.n	409ae4 <lv_refr_area+0x80>
            if(h_tmp <= 0) {
  409b14:	f1b9 0f00 	cmp.w	r9, #0
  409b18:	dd25      	ble.n	409b66 <lv_refr_area+0x102>
                max_row = tmp.y2 + 1;
  409b1a:	f102 0801 	add.w	r8, r2, #1
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
  409b1e:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
        lv_coord_t row_last = 0;
  409b22:	f04f 0900 	mov.w	r9, #0
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
  409b26:	e031      	b.n	409b8c <lv_refr_area+0x128>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
  409b28:	4c33      	ldr	r4, [pc, #204]	; (409bf8 <lv_refr_area+0x194>)
  409b2a:	6820      	ldr	r0, [r4, #0]
  409b2c:	4b34      	ldr	r3, [pc, #208]	; (409c00 <lv_refr_area+0x19c>)
  409b2e:	4798      	blx	r3
  409b30:	4605      	mov	r5, r0
        vdb->area.x1        = 0;
  409b32:	2700      	movs	r7, #0
  409b34:	8207      	strh	r7, [r0, #16]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
  409b36:	6820      	ldr	r0, [r4, #0]
  409b38:	4b33      	ldr	r3, [pc, #204]	; (409c08 <lv_refr_area+0x1a4>)
  409b3a:	4798      	blx	r3
  409b3c:	b280      	uxth	r0, r0
  409b3e:	3801      	subs	r0, #1
  409b40:	82a8      	strh	r0, [r5, #20]
        vdb->area.y1        = 0;
  409b42:	826f      	strh	r7, [r5, #18]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
  409b44:	6820      	ldr	r0, [r4, #0]
  409b46:	4b2f      	ldr	r3, [pc, #188]	; (409c04 <lv_refr_area+0x1a0>)
  409b48:	4798      	blx	r3
  409b4a:	b280      	uxth	r0, r0
  409b4c:	3801      	subs	r0, #1
  409b4e:	82e8      	strh	r0, [r5, #22]
        disp_refr->driver.buffer->last_part = 1;
  409b50:	6823      	ldr	r3, [r4, #0]
  409b52:	685a      	ldr	r2, [r3, #4]
  409b54:	f892 3020 	ldrb.w	r3, [r2, #32]
  409b58:	f043 0302 	orr.w	r3, r3, #2
  409b5c:	f882 3020 	strb.w	r3, [r2, #32]
        lv_refr_area_part(area_p);
  409b60:	4630      	mov	r0, r6
  409b62:	4b2a      	ldr	r3, [pc, #168]	; (409c0c <lv_refr_area+0x1a8>)
  409b64:	4798      	blx	r3
}
  409b66:	b003      	add	sp, #12
  409b68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
  409b6c:	f8d9 0000 	ldr.w	r0, [r9]
  409b70:	4b24      	ldr	r3, [pc, #144]	; (409c04 <lv_refr_area+0x1a0>)
  409b72:	4798      	blx	r3
  409b74:	b287      	uxth	r7, r0
  409b76:	3f01      	subs	r7, #1
        lv_coord_t y2 =
  409b78:	b23f      	sxth	r7, r7
  409b7a:	e79f      	b.n	409abc <lv_refr_area+0x58>
            row_last = vdb->area.y2;
  409b7c:	f9b5 9016 	ldrsh.w	r9, [r5, #22]
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
  409b80:	454f      	cmp	r7, r9
  409b82:	d018      	beq.n	409bb6 <lv_refr_area+0x152>
            lv_refr_area_part(area_p);
  409b84:	4630      	mov	r0, r6
  409b86:	4b21      	ldr	r3, [pc, #132]	; (409c0c <lv_refr_area+0x1a8>)
  409b88:	4798      	blx	r3
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
  409b8a:	b223      	sxth	r3, r4
  409b8c:	eb03 0208 	add.w	r2, r3, r8
  409b90:	3a01      	subs	r2, #1
  409b92:	42ba      	cmp	r2, r7
  409b94:	dc19      	bgt.n	409bca <lv_refr_area+0x166>
            vdb->area.x1 = area_p->x1;
  409b96:	f9b6 2000 	ldrsh.w	r2, [r6]
  409b9a:	822a      	strh	r2, [r5, #16]
            vdb->area.x2 = area_p->x2;
  409b9c:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
  409ba0:	82aa      	strh	r2, [r5, #20]
            vdb->area.y1 = row;
  409ba2:	826b      	strh	r3, [r5, #18]
            vdb->area.y2 = row + max_row - 1;
  409ba4:	4443      	add	r3, r8
  409ba6:	b29c      	uxth	r4, r3
  409ba8:	1e63      	subs	r3, r4, #1
  409baa:	b21b      	sxth	r3, r3
  409bac:	82eb      	strh	r3, [r5, #22]
            if(vdb->area.y2 > y2) vdb->area.y2 = y2;
  409bae:	429f      	cmp	r7, r3
  409bb0:	dae4      	bge.n	409b7c <lv_refr_area+0x118>
  409bb2:	82ef      	strh	r7, [r5, #22]
  409bb4:	e7e2      	b.n	409b7c <lv_refr_area+0x118>
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
  409bb6:	4b10      	ldr	r3, [pc, #64]	; (409bf8 <lv_refr_area+0x194>)
  409bb8:	681b      	ldr	r3, [r3, #0]
  409bba:	685a      	ldr	r2, [r3, #4]
  409bbc:	f892 3020 	ldrb.w	r3, [r2, #32]
  409bc0:	f043 0302 	orr.w	r3, r3, #2
  409bc4:	f882 3020 	strb.w	r3, [r2, #32]
  409bc8:	e7dc      	b.n	409b84 <lv_refr_area+0x120>
        if(y2 != row_last) {
  409bca:	45b9      	cmp	r9, r7
  409bcc:	d0cb      	beq.n	409b66 <lv_refr_area+0x102>
            vdb->area.x1 = area_p->x1;
  409bce:	f9b6 2000 	ldrsh.w	r2, [r6]
  409bd2:	822a      	strh	r2, [r5, #16]
            vdb->area.x2 = area_p->x2;
  409bd4:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
  409bd8:	82aa      	strh	r2, [r5, #20]
            vdb->area.y1 = row;
  409bda:	826b      	strh	r3, [r5, #18]
            vdb->area.y2 = y2;
  409bdc:	82ef      	strh	r7, [r5, #22]
            disp_refr->driver.buffer->last_part = 1;
  409bde:	4b06      	ldr	r3, [pc, #24]	; (409bf8 <lv_refr_area+0x194>)
  409be0:	681b      	ldr	r3, [r3, #0]
  409be2:	685a      	ldr	r2, [r3, #4]
  409be4:	f892 3020 	ldrb.w	r3, [r2, #32]
  409be8:	f043 0302 	orr.w	r3, r3, #2
  409bec:	f882 3020 	strb.w	r3, [r2, #32]
            lv_refr_area_part(area_p);
  409bf0:	4630      	mov	r0, r6
  409bf2:	4b06      	ldr	r3, [pc, #24]	; (409c0c <lv_refr_area+0x1a8>)
  409bf4:	4798      	blx	r3
  409bf6:	e7b6      	b.n	409b66 <lv_refr_area+0x102>
  409bf8:	2040c42c 	.word	0x2040c42c
  409bfc:	00414ef5 	.word	0x00414ef5
  409c00:	00414ea5 	.word	0x00414ea5
  409c04:	00414dd1 	.word	0x00414dd1
  409c08:	00414da1 	.word	0x00414da1
  409c0c:	004098e9 	.word	0x004098e9

00409c10 <lv_refr_areas>:
    px_num = 0;
  409c10:	2200      	movs	r2, #0
  409c12:	4b2b      	ldr	r3, [pc, #172]	; (409cc0 <lv_refr_areas+0xb0>)
  409c14:	601a      	str	r2, [r3, #0]
    if(disp_refr->inv_p == 0) return;
  409c16:	4b2b      	ldr	r3, [pc, #172]	; (409cc4 <lv_refr_areas+0xb4>)
  409c18:	681a      	ldr	r2, [r3, #0]
  409c1a:	f8b2 3182 	ldrh.w	r3, [r2, #386]	; 0x182
  409c1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
  409c22:	2b00      	cmp	r3, #0
  409c24:	d04b      	beq.n	409cbe <lv_refr_areas+0xae>
{
  409c26:	b570      	push	{r4, r5, r6, lr}
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
  409c28:	1e5e      	subs	r6, r3, #1
  409c2a:	2e00      	cmp	r6, #0
  409c2c:	db05      	blt.n	409c3a <lv_refr_areas+0x2a>
        if(disp_refr->inv_area_joined[i] == 0) {
  409c2e:	1993      	adds	r3, r2, r6
  409c30:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
  409c34:	b113      	cbz	r3, 409c3c <lv_refr_areas+0x2c>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
  409c36:	3e01      	subs	r6, #1
  409c38:	e7f7      	b.n	409c2a <lv_refr_areas+0x1a>
    int32_t last_i = 0;
  409c3a:	2600      	movs	r6, #0
    disp_refr->driver.buffer->last_area = 0;
  409c3c:	6851      	ldr	r1, [r2, #4]
  409c3e:	f891 3020 	ldrb.w	r3, [r1, #32]
  409c42:	f36f 0300 	bfc	r3, #0, #1
  409c46:	f881 3020 	strb.w	r3, [r1, #32]
    disp_refr->driver.buffer->last_part = 0;
  409c4a:	6852      	ldr	r2, [r2, #4]
  409c4c:	f892 3020 	ldrb.w	r3, [r2, #32]
  409c50:	f36f 0341 	bfc	r3, #1, #1
  409c54:	f882 3020 	strb.w	r3, [r2, #32]
    for(i = 0; i < disp_refr->inv_p; i++) {
  409c58:	2400      	movs	r4, #0
  409c5a:	e01f      	b.n	409c9c <lv_refr_areas+0x8c>
            if(i == last_i) disp_refr->driver.buffer->last_area = 1;
  409c5c:	6842      	ldr	r2, [r0, #4]
  409c5e:	f892 3020 	ldrb.w	r3, [r2, #32]
  409c62:	f043 0301 	orr.w	r3, r3, #1
  409c66:	f882 3020 	strb.w	r3, [r2, #32]
            disp_refr->driver.buffer->last_part = 0;
  409c6a:	6842      	ldr	r2, [r0, #4]
  409c6c:	f892 3020 	ldrb.w	r3, [r2, #32]
  409c70:	f36f 0341 	bfc	r3, #1, #1
  409c74:	f882 3020 	strb.w	r3, [r2, #32]
            lv_refr_area(&disp_refr->inv_areas[i]);
  409c78:	f104 050c 	add.w	r5, r4, #12
  409c7c:	00ed      	lsls	r5, r5, #3
  409c7e:	4428      	add	r0, r5
  409c80:	3002      	adds	r0, #2
  409c82:	4b11      	ldr	r3, [pc, #68]	; (409cc8 <lv_refr_areas+0xb8>)
  409c84:	4798      	blx	r3
            px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
  409c86:	4b0f      	ldr	r3, [pc, #60]	; (409cc4 <lv_refr_areas+0xb4>)
  409c88:	6818      	ldr	r0, [r3, #0]
  409c8a:	4428      	add	r0, r5
  409c8c:	3002      	adds	r0, #2
  409c8e:	4b0f      	ldr	r3, [pc, #60]	; (409ccc <lv_refr_areas+0xbc>)
  409c90:	4798      	blx	r3
  409c92:	4a0b      	ldr	r2, [pc, #44]	; (409cc0 <lv_refr_areas+0xb0>)
  409c94:	6813      	ldr	r3, [r2, #0]
  409c96:	4418      	add	r0, r3
  409c98:	6010      	str	r0, [r2, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
  409c9a:	3401      	adds	r4, #1
  409c9c:	4b09      	ldr	r3, [pc, #36]	; (409cc4 <lv_refr_areas+0xb4>)
  409c9e:	6818      	ldr	r0, [r3, #0]
  409ca0:	f8b0 3182 	ldrh.w	r3, [r0, #386]	; 0x182
  409ca4:	f3c3 0309 	ubfx	r3, r3, #0, #10
  409ca8:	429c      	cmp	r4, r3
  409caa:	da07      	bge.n	409cbc <lv_refr_areas+0xac>
        if(disp_refr->inv_area_joined[i] == 0) {
  409cac:	1903      	adds	r3, r0, r4
  409cae:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
  409cb2:	2b00      	cmp	r3, #0
  409cb4:	d1f1      	bne.n	409c9a <lv_refr_areas+0x8a>
            if(i == last_i) disp_refr->driver.buffer->last_area = 1;
  409cb6:	42b4      	cmp	r4, r6
  409cb8:	d1d7      	bne.n	409c6a <lv_refr_areas+0x5a>
  409cba:	e7cf      	b.n	409c5c <lv_refr_areas+0x4c>
  409cbc:	bd70      	pop	{r4, r5, r6, pc}
  409cbe:	4770      	bx	lr
  409cc0:	2040c430 	.word	0x2040c430
  409cc4:	2040c42c 	.word	0x2040c42c
  409cc8:	00409a65 	.word	0x00409a65
  409ccc:	00415647 	.word	0x00415647

00409cd0 <_lv_disp_refr_task>:
{
  409cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409cd4:	b085      	sub	sp, #20
  409cd6:	4605      	mov	r5, r0
    uint32_t start = lv_tick_get();
  409cd8:	4b58      	ldr	r3, [pc, #352]	; (409e3c <_lv_disp_refr_task+0x16c>)
  409cda:	4798      	blx	r3
  409cdc:	9001      	str	r0, [sp, #4]
    disp_refr = task->user_data;
  409cde:	68eb      	ldr	r3, [r5, #12]
  409ce0:	4c57      	ldr	r4, [pc, #348]	; (409e40 <_lv_disp_refr_task+0x170>)
  409ce2:	6023      	str	r3, [r4, #0]
    lv_task_set_prio(task, LV_TASK_PRIO_OFF);
  409ce4:	2100      	movs	r1, #0
  409ce6:	4628      	mov	r0, r5
  409ce8:	4b56      	ldr	r3, [pc, #344]	; (409e44 <_lv_disp_refr_task+0x174>)
  409cea:	4798      	blx	r3
    if(disp_refr->act_scr == NULL) {
  409cec:	6823      	ldr	r3, [r4, #0]
  409cee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  409cf0:	b18a      	cbz	r2, 409d16 <_lv_disp_refr_task+0x46>
    lv_refr_join_area();
  409cf2:	4b55      	ldr	r3, [pc, #340]	; (409e48 <_lv_disp_refr_task+0x178>)
  409cf4:	4798      	blx	r3
    lv_refr_areas();
  409cf6:	4b55      	ldr	r3, [pc, #340]	; (409e4c <_lv_disp_refr_task+0x17c>)
  409cf8:	4798      	blx	r3
    if(disp_refr->inv_p != 0) {
  409cfa:	4b51      	ldr	r3, [pc, #324]	; (409e40 <_lv_disp_refr_task+0x170>)
  409cfc:	6818      	ldr	r0, [r3, #0]
  409cfe:	f8b0 3182 	ldrh.w	r3, [r0, #386]	; 0x182
  409d02:	f3c3 0309 	ubfx	r3, r3, #0, #10
  409d06:	b96b      	cbnz	r3, 409d24 <_lv_disp_refr_task+0x54>
    _lv_mem_buf_free_all();
  409d08:	4b51      	ldr	r3, [pc, #324]	; (409e50 <_lv_disp_refr_task+0x180>)
  409d0a:	4798      	blx	r3
    _lv_font_clean_up_fmt_txt();
  409d0c:	4b51      	ldr	r3, [pc, #324]	; (409e54 <_lv_disp_refr_task+0x184>)
  409d0e:	4798      	blx	r3
}
  409d10:	b005      	add	sp, #20
  409d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disp_refr->inv_p = 0;
  409d16:	f8b3 2182 	ldrh.w	r2, [r3, #386]	; 0x182
  409d1a:	f36f 0209 	bfc	r2, #0, #10
  409d1e:	f8a3 2182 	strh.w	r2, [r3, #386]	; 0x182
        return;
  409d22:	e7f5      	b.n	409d10 <_lv_disp_refr_task+0x40>
        if(lv_disp_is_true_double_buf(disp_refr)) {
  409d24:	4b4c      	ldr	r3, [pc, #304]	; (409e58 <_lv_disp_refr_task+0x188>)
  409d26:	4798      	blx	r3
  409d28:	b118      	cbz	r0, 409d32 <_lv_disp_refr_task+0x62>
            if(disp_refr->driver.set_px_cb) {
  409d2a:	4b45      	ldr	r3, [pc, #276]	; (409e40 <_lv_disp_refr_task+0x170>)
  409d2c:	6818      	ldr	r0, [r3, #0]
  409d2e:	6943      	ldr	r3, [r0, #20]
  409d30:	b1fb      	cbz	r3, 409d72 <_lv_disp_refr_task+0xa2>
        _lv_memset_00(disp_refr->inv_areas, sizeof(disp_refr->inv_areas));
  409d32:	4c43      	ldr	r4, [pc, #268]	; (409e40 <_lv_disp_refr_task+0x170>)
  409d34:	6820      	ldr	r0, [r4, #0]
  409d36:	f44f 7180 	mov.w	r1, #256	; 0x100
  409d3a:	3062      	adds	r0, #98	; 0x62
  409d3c:	4d47      	ldr	r5, [pc, #284]	; (409e5c <_lv_disp_refr_task+0x18c>)
  409d3e:	47a8      	blx	r5
        _lv_memset_00(disp_refr->inv_area_joined, sizeof(disp_refr->inv_area_joined));
  409d40:	6820      	ldr	r0, [r4, #0]
  409d42:	2120      	movs	r1, #32
  409d44:	f500 70b1 	add.w	r0, r0, #354	; 0x162
  409d48:	47a8      	blx	r5
        disp_refr->inv_p = 0;
  409d4a:	6823      	ldr	r3, [r4, #0]
  409d4c:	f8b3 2182 	ldrh.w	r2, [r3, #386]	; 0x182
  409d50:	f36f 0209 	bfc	r2, #0, #10
  409d54:	f8a3 2182 	strh.w	r2, [r3, #386]	; 0x182
        elaps = lv_tick_elaps(start);
  409d58:	9801      	ldr	r0, [sp, #4]
  409d5a:	4b41      	ldr	r3, [pc, #260]	; (409e60 <_lv_disp_refr_task+0x190>)
  409d5c:	4798      	blx	r3
        if(disp_refr->driver.monitor_cb) {
  409d5e:	6824      	ldr	r4, [r4, #0]
  409d60:	69a3      	ldr	r3, [r4, #24]
  409d62:	2b00      	cmp	r3, #0
  409d64:	d0d0      	beq.n	409d08 <_lv_disp_refr_task+0x38>
            disp_refr->driver.monitor_cb(&disp_refr->driver, elaps, px_num);
  409d66:	4a3f      	ldr	r2, [pc, #252]	; (409e64 <_lv_disp_refr_task+0x194>)
  409d68:	6812      	ldr	r2, [r2, #0]
  409d6a:	4601      	mov	r1, r0
  409d6c:	4620      	mov	r0, r4
  409d6e:	4798      	blx	r3
  409d70:	e7ca      	b.n	409d08 <_lv_disp_refr_task+0x38>
                lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
  409d72:	4b3d      	ldr	r3, [pc, #244]	; (409e68 <_lv_disp_refr_task+0x198>)
  409d74:	4798      	blx	r3
  409d76:	4604      	mov	r4, r0
                lv_refr_vdb_flush();
  409d78:	4b3c      	ldr	r3, [pc, #240]	; (409e6c <_lv_disp_refr_task+0x19c>)
  409d7a:	4798      	blx	r3
                while(vdb->flushing);
  409d7c:	69a3      	ldr	r3, [r4, #24]
  409d7e:	2b00      	cmp	r3, #0
  409d80:	d1fc      	bne.n	409d7c <_lv_disp_refr_task+0xac>
                copy_buf = _lv_mem_buf_get(disp_refr->driver.hor_res * sizeof(lv_color_t));
  409d82:	4b2f      	ldr	r3, [pc, #188]	; (409e40 <_lv_disp_refr_task+0x170>)
  409d84:	681b      	ldr	r3, [r3, #0]
  409d86:	f9b3 0000 	ldrsh.w	r0, [r3]
  409d8a:	0040      	lsls	r0, r0, #1
  409d8c:	4b38      	ldr	r3, [pc, #224]	; (409e70 <_lv_disp_refr_task+0x1a0>)
  409d8e:	4798      	blx	r3
  409d90:	9003      	str	r0, [sp, #12]
                uint8_t * buf_act = (uint8_t *)vdb->buf_act;
  409d92:	f8d4 b008 	ldr.w	fp, [r4, #8]
                uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
  409d96:	f8d4 a000 	ldr.w	sl, [r4]
  409d9a:	45d3      	cmp	fp, sl
  409d9c:	d006      	beq.n	409dac <_lv_disp_refr_task+0xdc>
                lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
  409d9e:	4b28      	ldr	r3, [pc, #160]	; (409e40 <_lv_disp_refr_task+0x170>)
  409da0:	6818      	ldr	r0, [r3, #0]
  409da2:	4b34      	ldr	r3, [pc, #208]	; (409e74 <_lv_disp_refr_task+0x1a4>)
  409da4:	4798      	blx	r3
  409da6:	4681      	mov	r9, r0
                for(a = 0; a < disp_refr->inv_p; a++) {
  409da8:	2600      	movs	r6, #0
  409daa:	e01d      	b.n	409de8 <_lv_disp_refr_task+0x118>
                uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
  409dac:	f8d4 a004 	ldr.w	sl, [r4, #4]
  409db0:	e7f5      	b.n	409d9e <_lv_disp_refr_task+0xce>
                            _lv_memcpy(copy_buf, buf_ina + start_offs, line_length);
  409db2:	9a02      	ldr	r2, [sp, #8]
  409db4:	eb0a 0105 	add.w	r1, sl, r5
  409db8:	9803      	ldr	r0, [sp, #12]
  409dba:	4f2f      	ldr	r7, [pc, #188]	; (409e78 <_lv_disp_refr_task+0x1a8>)
  409dbc:	47b8      	blx	r7
                            _lv_memcpy(buf_act + start_offs, copy_buf, line_length);
  409dbe:	9a02      	ldr	r2, [sp, #8]
  409dc0:	9903      	ldr	r1, [sp, #12]
  409dc2:	eb0b 0005 	add.w	r0, fp, r5
  409dc6:	47b8      	blx	r7
                            start_offs += hres * sizeof(lv_color_t);
  409dc8:	eb05 0549 	add.w	r5, r5, r9, lsl #1
                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
  409dcc:	3401      	adds	r4, #1
  409dce:	b224      	sxth	r4, r4
  409dd0:	4b1b      	ldr	r3, [pc, #108]	; (409e40 <_lv_disp_refr_task+0x170>)
  409dd2:	681b      	ldr	r3, [r3, #0]
  409dd4:	f108 020c 	add.w	r2, r8, #12
  409dd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  409ddc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  409de0:	429c      	cmp	r4, r3
  409de2:	dde6      	ble.n	409db2 <_lv_disp_refr_task+0xe2>
                for(a = 0; a < disp_refr->inv_p; a++) {
  409de4:	3601      	adds	r6, #1
  409de6:	b2b6      	uxth	r6, r6
  409de8:	46b0      	mov	r8, r6
  409dea:	4b15      	ldr	r3, [pc, #84]	; (409e40 <_lv_disp_refr_task+0x170>)
  409dec:	681b      	ldr	r3, [r3, #0]
  409dee:	f8b3 2182 	ldrh.w	r2, [r3, #386]	; 0x182
  409df2:	f3c2 0209 	ubfx	r2, r2, #0, #10
  409df6:	4296      	cmp	r6, r2
  409df8:	da18      	bge.n	409e2c <_lv_disp_refr_task+0x15c>
                    if(disp_refr->inv_area_joined[a] == 0) {
  409dfa:	199a      	adds	r2, r3, r6
  409dfc:	f892 2162 	ldrb.w	r2, [r2, #354]	; 0x162
  409e00:	2a00      	cmp	r2, #0
  409e02:	d1ef      	bne.n	409de4 <_lv_disp_refr_task+0x114>
                            (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
  409e04:	f108 020c 	add.w	r2, r8, #12
  409e08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  409e0c:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
  409e10:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
  409e14:	fb04 2509 	mla	r5, r4, r9, r2
                        uint32_t start_offs =
  409e18:	006d      	lsls	r5, r5, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  409e1a:	88db      	ldrh	r3, [r3, #6]
  409e1c:	b292      	uxth	r2, r2
  409e1e:	1a9b      	subs	r3, r3, r2
  409e20:	b29b      	uxth	r3, r3
  409e22:	3301      	adds	r3, #1
  409e24:	b21b      	sxth	r3, r3
                        uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
  409e26:	005b      	lsls	r3, r3, #1
  409e28:	9302      	str	r3, [sp, #8]
                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
  409e2a:	e7d1      	b.n	409dd0 <_lv_disp_refr_task+0x100>
                if(copy_buf) _lv_mem_buf_release(copy_buf);
  409e2c:	9b03      	ldr	r3, [sp, #12]
  409e2e:	2b00      	cmp	r3, #0
  409e30:	f43f af7f 	beq.w	409d32 <_lv_disp_refr_task+0x62>
  409e34:	4618      	mov	r0, r3
  409e36:	4b11      	ldr	r3, [pc, #68]	; (409e7c <_lv_disp_refr_task+0x1ac>)
  409e38:	4798      	blx	r3
  409e3a:	e77a      	b.n	409d32 <_lv_disp_refr_task+0x62>
  409e3c:	004151ad 	.word	0x004151ad
  409e40:	2040c42c 	.word	0x2040c42c
  409e44:	00417999 	.word	0x00417999
  409e48:	0040943d 	.word	0x0040943d
  409e4c:	00409c11 	.word	0x00409c11
  409e50:	0041688d 	.word	0x0041688d
  409e54:	00414d01 	.word	0x00414d01
  409e58:	00414ef5 	.word	0x00414ef5
  409e5c:	00416c0d 	.word	0x00416c0d
  409e60:	004151c9 	.word	0x004151c9
  409e64:	2040c430 	.word	0x2040c430
  409e68:	00414ea5 	.word	0x00414ea5
  409e6c:	0040985d 	.word	0x0040985d
  409e70:	00416a81 	.word	0x00416a81
  409e74:	00414da1 	.word	0x00414da1
  409e78:	004168e9 	.word	0x004168e9
  409e7c:	00416831 	.word	0x00416831

00409e80 <lv_style_init>:
/**
 * Initialize a style
 * @param style pointer to a style to initialize
 */
void lv_style_init(lv_style_t * style)
{
  409e80:	b508      	push	{r3, lr}
    _lv_memset_00(style, sizeof(lv_style_t));
  409e82:	2104      	movs	r1, #4
  409e84:	4b01      	ldr	r3, [pc, #4]	; (409e8c <lv_style_init+0xc>)
  409e86:	4798      	blx	r3
  409e88:	bd08      	pop	{r3, pc}
  409e8a:	bf00      	nop
  409e8c:	00416c0d 	.word	0x00416c0d

00409e90 <lv_style_list_init>:
/**
 * Initialize a style list
 * @param list a style list to initialize
 */
void lv_style_list_init(lv_style_list_t * list)
{
  409e90:	b508      	push	{r3, lr}
    _lv_memset_00(list, sizeof(lv_style_list_t));
  409e92:	2108      	movs	r1, #8
  409e94:	4b01      	ldr	r3, [pc, #4]	; (409e9c <lv_style_list_init+0xc>)
  409e96:	4798      	blx	r3
  409e98:	bd08      	pop	{r3, pc}
  409e9a:	bf00      	nop
  409e9c:	00416c0d 	.word	0x00416c0d

00409ea0 <_lv_style_list_remove_style>:
 * Remove a style from a style list
 * @param style_list pointer to a style list
 * @param style pointer to a style to remove
 */
void _lv_style_list_remove_style(lv_style_list_t * list, lv_style_t * style)
{
  409ea0:	b570      	push	{r4, r5, r6, lr}
    LV_ASSERT_STYLE_LIST(list);
    LV_ASSERT_STYLE(style);

    if(list->style_cnt == 0) return;
  409ea2:	7903      	ldrb	r3, [r0, #4]
  409ea4:	f013 063f 	ands.w	r6, r3, #63	; 0x3f
  409ea8:	d051      	beq.n	409f4e <_lv_style_list_remove_style+0xae>
  409eaa:	2300      	movs	r3, #0

    /*Check if the style really exists here*/
    uint8_t i;
    bool found = false;
    for(i = 0; i < list->style_cnt; i++) {
  409eac:	7902      	ldrb	r2, [r0, #4]
  409eae:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  409eb2:	4293      	cmp	r3, r2
  409eb4:	da07      	bge.n	409ec6 <_lv_style_list_remove_style+0x26>
        if(list->style_list[i] == style) {
  409eb6:	6804      	ldr	r4, [r0, #0]
  409eb8:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
  409ebc:	428c      	cmp	r4, r1
  409ebe:	d016      	beq.n	409eee <_lv_style_list_remove_style+0x4e>
    for(i = 0; i < list->style_cnt; i++) {
  409ec0:	3301      	adds	r3, #1
  409ec2:	b2db      	uxtb	r3, r3
  409ec4:	e7f2      	b.n	409eac <_lv_style_list_remove_style+0xc>
    bool found = false;
  409ec6:	2300      	movs	r3, #0
            found = true;
            break;
        }
    }
    if(found == false) return;
  409ec8:	2b00      	cmp	r3, #0
  409eca:	d040      	beq.n	409f4e <_lv_style_list_remove_style+0xae>
  409ecc:	460d      	mov	r5, r1
  409ece:	4604      	mov	r4, r0

    if(list->style_cnt == 1) {
  409ed0:	2e01      	cmp	r6, #1
  409ed2:	d00e      	beq.n	409ef2 <_lv_style_list_remove_style+0x52>
        list->style_cnt = 0;
        list->has_local = 0;
        return;
    }

    lv_style_t ** new_classes = lv_mem_alloc(sizeof(lv_style_t *) * (list->style_cnt - 1));
  409ed4:	3a01      	subs	r2, #1
  409ed6:	0090      	lsls	r0, r2, #2
  409ed8:	4b1d      	ldr	r3, [pc, #116]	; (409f50 <_lv_style_list_remove_style+0xb0>)
  409eda:	4798      	blx	r3
  409edc:	4606      	mov	r6, r0
    LV_ASSERT_MEM(new_classes);
  409ede:	4b1d      	ldr	r3, [pc, #116]	; (409f54 <_lv_style_list_remove_style+0xb4>)
  409ee0:	4798      	blx	r3
  409ee2:	b190      	cbz	r0, 409f0a <_lv_style_list_remove_style+0x6a>
    if(new_classes == NULL) {
  409ee4:	2e00      	cmp	r6, #0
  409ee6:	d032      	beq.n	409f4e <_lv_style_list_remove_style+0xae>
  409ee8:	2100      	movs	r1, #0
  409eea:	460b      	mov	r3, r1
  409eec:	e015      	b.n	409f1a <_lv_style_list_remove_style+0x7a>
            found = true;
  409eee:	2301      	movs	r3, #1
  409ef0:	e7ea      	b.n	409ec8 <_lv_style_list_remove_style+0x28>
        lv_mem_free(list->style_list);
  409ef2:	6800      	ldr	r0, [r0, #0]
  409ef4:	4b18      	ldr	r3, [pc, #96]	; (409f58 <_lv_style_list_remove_style+0xb8>)
  409ef6:	4798      	blx	r3
        list->style_list = NULL;
  409ef8:	2200      	movs	r2, #0
  409efa:	6022      	str	r2, [r4, #0]
        list->style_cnt = 0;
  409efc:	7923      	ldrb	r3, [r4, #4]
        list->has_local = 0;
  409efe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  409f02:	f362 1386 	bfi	r3, r2, #6, #1
  409f06:	7123      	strb	r3, [r4, #4]
        return;
  409f08:	bd70      	pop	{r4, r5, r6, pc}
    LV_ASSERT_MEM(new_classes);
  409f0a:	4632      	mov	r2, r6
  409f0c:	2300      	movs	r3, #0
  409f0e:	4813      	ldr	r0, [pc, #76]	; (409f5c <_lv_style_list_remove_style+0xbc>)
  409f10:	4913      	ldr	r1, [pc, #76]	; (409f60 <_lv_style_list_remove_style+0xc0>)
  409f12:	4788      	blx	r1
  409f14:	e7fe      	b.n	409f14 <_lv_style_list_remove_style+0x74>
        LV_LOG_WARN("lv_style_list_remove_style: couldn't reallocate class list");
        return;
    }
    uint8_t j;
    for(i = 0, j = 0; i < list->style_cnt; i++) {
  409f16:	3301      	adds	r3, #1
  409f18:	b2db      	uxtb	r3, r3
  409f1a:	7922      	ldrb	r2, [r4, #4]
  409f1c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  409f20:	4293      	cmp	r3, r2
  409f22:	da09      	bge.n	409f38 <_lv_style_list_remove_style+0x98>
        if(list->style_list[i] == style) continue;
  409f24:	6822      	ldr	r2, [r4, #0]
  409f26:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  409f2a:	4295      	cmp	r5, r2
  409f2c:	d0f3      	beq.n	409f16 <_lv_style_list_remove_style+0x76>
        new_classes[j] = list->style_list[i];
  409f2e:	f846 2021 	str.w	r2, [r6, r1, lsl #2]
        j++;
  409f32:	3101      	adds	r1, #1
  409f34:	b2c9      	uxtb	r1, r1
  409f36:	e7ee      	b.n	409f16 <_lv_style_list_remove_style+0x76>

    }

    lv_mem_free(list->style_list);
  409f38:	6820      	ldr	r0, [r4, #0]
  409f3a:	4b07      	ldr	r3, [pc, #28]	; (409f58 <_lv_style_list_remove_style+0xb8>)
  409f3c:	4798      	blx	r3

    list->style_cnt--;
  409f3e:	7923      	ldrb	r3, [r4, #4]
  409f40:	f003 023f 	and.w	r2, r3, #63	; 0x3f
  409f44:	323f      	adds	r2, #63	; 0x3f
  409f46:	f362 0305 	bfi	r3, r2, #0, #6
  409f4a:	7123      	strb	r3, [r4, #4]
    list->style_list = new_classes;
  409f4c:	6026      	str	r6, [r4, #0]
  409f4e:	bd70      	pop	{r4, r5, r6, pc}
  409f50:	004166d9 	.word	0x004166d9
  409f54:	00415f95 	.word	0x00415f95
  409f58:	0041679d 	.word	0x0041679d
  409f5c:	0042c714 	.word	0x0042c714
  409f60:	00415fa1 	.word	0x00415fa1

00409f64 <_lv_style_list_add_style>:
    if(list == NULL) return;
  409f64:	2800      	cmp	r0, #0
  409f66:	d048      	beq.n	409ffa <_lv_style_list_add_style+0x96>
{
  409f68:	b570      	push	{r4, r5, r6, lr}
  409f6a:	4604      	mov	r4, r0
  409f6c:	460e      	mov	r6, r1
    _lv_style_list_remove_style(list, style);
  409f6e:	4b23      	ldr	r3, [pc, #140]	; (409ffc <_lv_style_list_add_style+0x98>)
  409f70:	4798      	blx	r3
    if(list->style_cnt == 0) new_classes = lv_mem_alloc(sizeof(lv_style_t *));
  409f72:	7923      	ldrb	r3, [r4, #4]
  409f74:	f013 0f3f 	tst.w	r3, #63	; 0x3f
  409f78:	d117      	bne.n	409faa <_lv_style_list_add_style+0x46>
  409f7a:	2004      	movs	r0, #4
  409f7c:	4b20      	ldr	r3, [pc, #128]	; (40a000 <_lv_style_list_add_style+0x9c>)
  409f7e:	4798      	blx	r3
  409f80:	4605      	mov	r5, r0
    LV_ASSERT_MEM(new_classes);
  409f82:	4628      	mov	r0, r5
  409f84:	4b1f      	ldr	r3, [pc, #124]	; (40a004 <_lv_style_list_add_style+0xa0>)
  409f86:	4798      	blx	r3
  409f88:	b1c8      	cbz	r0, 409fbe <_lv_style_list_add_style+0x5a>
    if(new_classes == NULL) {
  409f8a:	2d00      	cmp	r5, #0
  409f8c:	d034      	beq.n	409ff8 <_lv_style_list_add_style+0x94>
    if(list->has_trans) first_style++;
  409f8e:	7923      	ldrb	r3, [r4, #4]
  409f90:	f013 0f80 	tst.w	r3, #128	; 0x80
  409f94:	d119      	bne.n	409fca <_lv_style_list_add_style+0x66>
    uint8_t first_style = 0;
  409f96:	2200      	movs	r2, #0
    if(list->has_local) first_style++;
  409f98:	f013 0f40 	tst.w	r3, #64	; 0x40
  409f9c:	d001      	beq.n	409fa2 <_lv_style_list_add_style+0x3e>
  409f9e:	3201      	adds	r2, #1
  409fa0:	b2d2      	uxtb	r2, r2
    for(i = list->style_cnt; i > first_style; i--) {
  409fa2:	7923      	ldrb	r3, [r4, #4]
  409fa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  409fa8:	e01a      	b.n	409fe0 <_lv_style_list_add_style+0x7c>
    else new_classes = lv_mem_realloc(list->style_list, sizeof(lv_style_t *) * (list->style_cnt + 1));
  409faa:	7921      	ldrb	r1, [r4, #4]
  409fac:	f001 013f 	and.w	r1, r1, #63	; 0x3f
  409fb0:	3101      	adds	r1, #1
  409fb2:	0089      	lsls	r1, r1, #2
  409fb4:	6820      	ldr	r0, [r4, #0]
  409fb6:	4b14      	ldr	r3, [pc, #80]	; (40a008 <_lv_style_list_add_style+0xa4>)
  409fb8:	4798      	blx	r3
  409fba:	4605      	mov	r5, r0
  409fbc:	e7e1      	b.n	409f82 <_lv_style_list_add_style+0x1e>
    LV_ASSERT_MEM(new_classes);
  409fbe:	462a      	mov	r2, r5
  409fc0:	2300      	movs	r3, #0
  409fc2:	4812      	ldr	r0, [pc, #72]	; (40a00c <_lv_style_list_add_style+0xa8>)
  409fc4:	4912      	ldr	r1, [pc, #72]	; (40a010 <_lv_style_list_add_style+0xac>)
  409fc6:	4788      	blx	r1
  409fc8:	e7fe      	b.n	409fc8 <_lv_style_list_add_style+0x64>
    if(list->has_trans) first_style++;
  409fca:	2201      	movs	r2, #1
  409fcc:	e7e4      	b.n	409f98 <_lv_style_list_add_style+0x34>
        new_classes[i] = new_classes[i - 1];
  409fce:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
  409fd2:	4419      	add	r1, r3
  409fd4:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
  409fd8:	f845 1023 	str.w	r1, [r5, r3, lsl #2]
    for(i = list->style_cnt; i > first_style; i--) {
  409fdc:	3b01      	subs	r3, #1
  409fde:	b2db      	uxtb	r3, r3
  409fe0:	4293      	cmp	r3, r2
  409fe2:	d8f4      	bhi.n	409fce <_lv_style_list_add_style+0x6a>
    new_classes[first_style] = style;
  409fe4:	f845 6022 	str.w	r6, [r5, r2, lsl #2]
    list->style_cnt++;
  409fe8:	7923      	ldrb	r3, [r4, #4]
  409fea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
  409fee:	3201      	adds	r2, #1
  409ff0:	f362 0305 	bfi	r3, r2, #0, #6
  409ff4:	7123      	strb	r3, [r4, #4]
    list->style_list = new_classes;
  409ff6:	6025      	str	r5, [r4, #0]
  409ff8:	bd70      	pop	{r4, r5, r6, pc}
  409ffa:	4770      	bx	lr
  409ffc:	00409ea1 	.word	0x00409ea1
  40a000:	004166d9 	.word	0x004166d9
  40a004:	00415f95 	.word	0x00415f95
  40a008:	00416a09 	.word	0x00416a09
  40a00c:	0042c714 	.word	0x0042c714
  40a010:	00415fa1 	.word	0x00415fa1

0040a014 <get_alloc_local_style>:
 * Get he local style from a style list. Allocate it if not exists yet.
 * @param list pointer to a style list
 * @return pointer to the local style
 */
static lv_style_t * get_alloc_local_style(lv_style_list_t * list)
{
  40a014:	b538      	push	{r3, r4, r5, lr}
    LV_ASSERT_STYLE_LIST(list);

    if(list->has_local) return lv_style_list_get_style(list, list->has_trans ? 1 : 0);
  40a016:	7902      	ldrb	r2, [r0, #4]
  40a018:	f012 0f40 	tst.w	r2, #64	; 0x40
  40a01c:	d015      	beq.n	40a04a <get_alloc_local_style+0x36>
  40a01e:	09d3      	lsrs	r3, r2, #7
    if(list->has_trans && list->skip_trans) id++;
  40a020:	8881      	ldrh	r1, [r0, #4]
  40a022:	f401 71c0 	and.w	r1, r1, #384	; 0x180
  40a026:	f5b1 7fc0 	cmp.w	r1, #384	; 0x180
  40a02a:	d00c      	beq.n	40a046 <get_alloc_local_style+0x32>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40a02c:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  40a030:	d027      	beq.n	40a082 <get_alloc_local_style+0x6e>
  40a032:	7902      	ldrb	r2, [r0, #4]
  40a034:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  40a038:	4293      	cmp	r3, r2
  40a03a:	da24      	bge.n	40a086 <get_alloc_local_style+0x72>
    return list->style_list[id];
  40a03c:	6802      	ldr	r2, [r0, #0]
  40a03e:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    /*Add the local style to the first place*/
    _lv_style_list_add_style(list, local_style);
    list->has_local = 1;

    return local_style;
}
  40a042:	4628      	mov	r0, r5
  40a044:	bd38      	pop	{r3, r4, r5, pc}
    if(list->has_trans && list->skip_trans) id++;
  40a046:	3301      	adds	r3, #1
  40a048:	e7f0      	b.n	40a02c <get_alloc_local_style+0x18>
  40a04a:	4604      	mov	r4, r0
    lv_style_t * local_style = lv_mem_alloc(sizeof(lv_style_t));
  40a04c:	2004      	movs	r0, #4
  40a04e:	4b0f      	ldr	r3, [pc, #60]	; (40a08c <get_alloc_local_style+0x78>)
  40a050:	4798      	blx	r3
  40a052:	4605      	mov	r5, r0
    LV_ASSERT_MEM(local_style);
  40a054:	4b0e      	ldr	r3, [pc, #56]	; (40a090 <get_alloc_local_style+0x7c>)
  40a056:	4798      	blx	r3
  40a058:	b168      	cbz	r0, 40a076 <get_alloc_local_style+0x62>
    if(local_style == NULL) {
  40a05a:	2d00      	cmp	r5, #0
  40a05c:	d0f1      	beq.n	40a042 <get_alloc_local_style+0x2e>
    lv_style_init(local_style);
  40a05e:	4628      	mov	r0, r5
  40a060:	4b0c      	ldr	r3, [pc, #48]	; (40a094 <get_alloc_local_style+0x80>)
  40a062:	4798      	blx	r3
    _lv_style_list_add_style(list, local_style);
  40a064:	4629      	mov	r1, r5
  40a066:	4620      	mov	r0, r4
  40a068:	4b0b      	ldr	r3, [pc, #44]	; (40a098 <get_alloc_local_style+0x84>)
  40a06a:	4798      	blx	r3
    list->has_local = 1;
  40a06c:	7923      	ldrb	r3, [r4, #4]
  40a06e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a072:	7123      	strb	r3, [r4, #4]
    return local_style;
  40a074:	e7e5      	b.n	40a042 <get_alloc_local_style+0x2e>
    LV_ASSERT_MEM(local_style);
  40a076:	462a      	mov	r2, r5
  40a078:	2300      	movs	r3, #0
  40a07a:	4808      	ldr	r0, [pc, #32]	; (40a09c <get_alloc_local_style+0x88>)
  40a07c:	4908      	ldr	r1, [pc, #32]	; (40a0a0 <get_alloc_local_style+0x8c>)
  40a07e:	4788      	blx	r1
  40a080:	e7fe      	b.n	40a080 <get_alloc_local_style+0x6c>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40a082:	2500      	movs	r5, #0
  40a084:	e7dd      	b.n	40a042 <get_alloc_local_style+0x2e>
  40a086:	2500      	movs	r5, #0
  40a088:	e7db      	b.n	40a042 <get_alloc_local_style+0x2e>
  40a08a:	bf00      	nop
  40a08c:	004166d9 	.word	0x004166d9
  40a090:	00415f95 	.word	0x00415f95
  40a094:	00409e81 	.word	0x00409e81
  40a098:	00409f65 	.word	0x00409f65
  40a09c:	0042c714 	.word	0x0042c714
  40a0a0:	00415fa1 	.word	0x00415fa1

0040a0a4 <lv_style_reset>:
{
  40a0a4:	b510      	push	{r4, lr}
  40a0a6:	4604      	mov	r4, r0
    lv_mem_free(style->map);
  40a0a8:	6800      	ldr	r0, [r0, #0]
  40a0aa:	4b02      	ldr	r3, [pc, #8]	; (40a0b4 <lv_style_reset+0x10>)
  40a0ac:	4798      	blx	r3
    style->map = NULL;
  40a0ae:	2300      	movs	r3, #0
  40a0b0:	6023      	str	r3, [r4, #0]
  40a0b2:	bd10      	pop	{r4, pc}
  40a0b4:	0041679d 	.word	0x0041679d

0040a0b8 <_lv_style_get_mem_size>:
    if(style->map == NULL) return 0;
  40a0b8:	6803      	ldr	r3, [r0, #0]
  40a0ba:	b30b      	cbz	r3, 40a100 <_lv_style_get_mem_size+0x48>
{
  40a0bc:	b082      	sub	sp, #8
  40a0be:	2200      	movs	r2, #0
  40a0c0:	e001      	b.n	40a0c6 <_lv_style_get_mem_size+0xe>
 */
static inline size_t get_prop_size(uint8_t prop_id)
{
    prop_id &= 0xF;
    size_t size = sizeof(lv_style_property_t);
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a0c2:	2304      	movs	r3, #4
 * @param idx index of the style in style->map
 * @return index of next property in style->map
 */
static inline size_t get_next_prop_index(uint8_t prop_id, size_t idx)
{
    return idx + get_prop_size(prop_id);
  40a0c4:	441a      	add	r2, r3
    prop_p[0] = style->map[idx];
  40a0c6:	6803      	ldr	r3, [r0, #0]
  40a0c8:	5c99      	ldrb	r1, [r3, r2]
  40a0ca:	f88d 1006 	strb.w	r1, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a0ce:	4413      	add	r3, r2
  40a0d0:	785b      	ldrb	r3, [r3, #1]
  40a0d2:	f88d 3007 	strb.w	r3, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  40a0d6:	b2cb      	uxtb	r3, r1
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40a0d8:	2bff      	cmp	r3, #255	; 0xff
  40a0da:	d00d      	beq.n	40a0f8 <_lv_style_get_mem_size+0x40>
    prop_id &= 0xF;
  40a0dc:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a0e0:	2b08      	cmp	r3, #8
  40a0e2:	d9ee      	bls.n	40a0c2 <_lv_style_get_mem_size+0xa>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a0e4:	2b0b      	cmp	r3, #11
  40a0e6:	d903      	bls.n	40a0f0 <_lv_style_get_mem_size+0x38>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40a0e8:	2b0d      	cmp	r3, #13
  40a0ea:	d803      	bhi.n	40a0f4 <_lv_style_get_mem_size+0x3c>
  40a0ec:	2303      	movs	r3, #3
  40a0ee:	e7e9      	b.n	40a0c4 <_lv_style_get_mem_size+0xc>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a0f0:	2304      	movs	r3, #4
  40a0f2:	e7e7      	b.n	40a0c4 <_lv_style_get_mem_size+0xc>
    else size += sizeof(const void *);
  40a0f4:	2306      	movs	r3, #6
  40a0f6:	e7e5      	b.n	40a0c4 <_lv_style_get_mem_size+0xc>
    return i + sizeof(lv_style_property_t);
  40a0f8:	1c90      	adds	r0, r2, #2
  40a0fa:	b280      	uxth	r0, r0
}
  40a0fc:	b002      	add	sp, #8
  40a0fe:	4770      	bx	lr
    if(style->map == NULL) return 0;
  40a100:	2000      	movs	r0, #0
  40a102:	4770      	bx	lr

0040a104 <lv_style_copy>:
    if(style_src == NULL) return;
  40a104:	b181      	cbz	r1, 40a128 <lv_style_copy+0x24>
{
  40a106:	b570      	push	{r4, r5, r6, lr}
  40a108:	460c      	mov	r4, r1
    if(style_src->map == NULL) return;
  40a10a:	680a      	ldr	r2, [r1, #0]
  40a10c:	b15a      	cbz	r2, 40a126 <lv_style_copy+0x22>
  40a10e:	4605      	mov	r5, r0
    uint16_t size = _lv_style_get_mem_size(style_src);
  40a110:	4608      	mov	r0, r1
  40a112:	4b06      	ldr	r3, [pc, #24]	; (40a12c <lv_style_copy+0x28>)
  40a114:	4798      	blx	r3
  40a116:	4606      	mov	r6, r0
    style_dest->map = lv_mem_alloc(size);
  40a118:	4b05      	ldr	r3, [pc, #20]	; (40a130 <lv_style_copy+0x2c>)
  40a11a:	4798      	blx	r3
  40a11c:	6028      	str	r0, [r5, #0]
    _lv_memcpy(style_dest->map, style_src->map, size);
  40a11e:	4632      	mov	r2, r6
  40a120:	6821      	ldr	r1, [r4, #0]
  40a122:	4b04      	ldr	r3, [pc, #16]	; (40a134 <lv_style_copy+0x30>)
  40a124:	4798      	blx	r3
  40a126:	bd70      	pop	{r4, r5, r6, pc}
  40a128:	4770      	bx	lr
  40a12a:	bf00      	nop
  40a12c:	0040a0b9 	.word	0x0040a0b9
  40a130:	004166d9 	.word	0x004166d9
  40a134:	004168e9 	.word	0x004168e9

0040a138 <lv_style_remove_prop>:
    if(style == NULL) return false;
  40a138:	2800      	cmp	r0, #0
  40a13a:	f000 808d 	beq.w	40a258 <lv_style_remove_prop+0x120>
{
  40a13e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a142:	b082      	sub	sp, #8
  40a144:	4604      	mov	r4, r0
    if(style->map == NULL) return -1;
  40a146:	6803      	ldr	r3, [r0, #0]
  40a148:	2b00      	cmp	r3, #0
  40a14a:	d05e      	beq.n	40a20a <lv_style_remove_prop+0xd2>
    uint8_t id_to_find = prop & 0xFF;
  40a14c:	b2cd      	uxtb	r5, r1
    attr = (prop >> 8) & 0xFF;
  40a14e:	0a0e      	lsrs	r6, r1, #8
    size_t i = 0;
  40a150:	2200      	movs	r2, #0
    int16_t id_guess = -1;
  40a152:	f04f 37ff 	mov.w	r7, #4294967295
    int16_t weight = -1;
  40a156:	46be      	mov	lr, r7
  40a158:	e03b      	b.n	40a1d2 <lv_style_remove_prop+0x9a>
    prop_p[0] = style->map[idx];
  40a15a:	f8d4 c000 	ldr.w	ip, [r4]
  40a15e:	f81c 8002 	ldrb.w	r8, [ip, r2]
  40a162:	f88d 8006 	strb.w	r8, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a166:	f81c 0000 	ldrb.w	r0, [ip, r0]
  40a16a:	f88d 0007 	strb.w	r0, [sp, #7]
    return prop;
  40a16e:	f8bd c006 	ldrh.w	ip, [sp, #6]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  40a172:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
  40a176:	fa5f f08c 	uxtb.w	r0, ip
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40a17a:	ea86 0800 	eor.w	r8, r6, r0
  40a17e:	f018 0f7f 	tst.w	r8, #127	; 0x7f
  40a182:	d00c      	beq.n	40a19e <lv_style_remove_prop+0x66>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40a184:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  40a188:	f006 087f 	and.w	r8, r6, #127	; 0x7f
  40a18c:	ea30 0808 	bics.w	r8, r0, r8
  40a190:	d12d      	bne.n	40a1ee <lv_style_remove_prop+0xb6>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40a192:	4570      	cmp	r0, lr
  40a194:	dd2b      	ble.n	40a1ee <lv_style_remove_prop+0xb6>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40a196:	f00c 0e7f 	and.w	lr, ip, #127	; 0x7f
                    id_guess = i;
  40a19a:	b217      	sxth	r7, r2
  40a19c:	e027      	b.n	40a1ee <lv_style_remove_prop+0xb6>
                return i;
  40a19e:	4617      	mov	r7, r2
    if(id >= 0) {
  40a1a0:	2f00      	cmp	r7, #0
  40a1a2:	db5b      	blt.n	40a25c <lv_style_remove_prop+0x124>
        attr_found = get_style_prop_attr(style, id);
  40a1a4:	463d      	mov	r5, r7
    prop_p[0] = style->map[idx];
  40a1a6:	6823      	ldr	r3, [r4, #0]
  40a1a8:	5dda      	ldrb	r2, [r3, r7]
  40a1aa:	f88d 2006 	strb.w	r2, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a1ae:	441f      	add	r7, r3
  40a1b0:	787b      	ldrb	r3, [r7, #1]
  40a1b2:	f88d 3007 	strb.w	r3, [sp, #7]
    return prop;
  40a1b6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
        attr_goal = (prop >> 8) & 0xFFU;
  40a1ba:	0a0b      	lsrs	r3, r1, #8
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
  40a1bc:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
  40a1c0:	f013 0f7f 	tst.w	r3, #127	; 0x7f
  40a1c4:	d024      	beq.n	40a210 <lv_style_remove_prop+0xd8>
    return false;
  40a1c6:	2000      	movs	r0, #0
}
  40a1c8:	b002      	add	sp, #8
  40a1ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a1ce:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40a1d0:	441a      	add	r2, r3
    prop_p[0] = style->map[idx];
  40a1d2:	6823      	ldr	r3, [r4, #0]
  40a1d4:	5c98      	ldrb	r0, [r3, r2]
  40a1d6:	f88d 0006 	strb.w	r0, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a1da:	1c50      	adds	r0, r2, #1
  40a1dc:	5c1b      	ldrb	r3, [r3, r0]
  40a1de:	f88d 3007 	strb.w	r3, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  40a1e2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40a1e6:	2bff      	cmp	r3, #255	; 0xff
  40a1e8:	d0da      	beq.n	40a1a0 <lv_style_remove_prop+0x68>
        if(prop_id == id_to_find) {
  40a1ea:	429d      	cmp	r5, r3
  40a1ec:	d0b5      	beq.n	40a15a <lv_style_remove_prop+0x22>
    prop_id &= 0xF;
  40a1ee:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a1f2:	2b08      	cmp	r3, #8
  40a1f4:	d9eb      	bls.n	40a1ce <lv_style_remove_prop+0x96>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a1f6:	2b0b      	cmp	r3, #11
  40a1f8:	d903      	bls.n	40a202 <lv_style_remove_prop+0xca>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40a1fa:	2b0d      	cmp	r3, #13
  40a1fc:	d803      	bhi.n	40a206 <lv_style_remove_prop+0xce>
  40a1fe:	2303      	movs	r3, #3
  40a200:	e7e6      	b.n	40a1d0 <lv_style_remove_prop+0x98>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a202:	2304      	movs	r3, #4
  40a204:	e7e4      	b.n	40a1d0 <lv_style_remove_prop+0x98>
    else size += sizeof(const void *);
  40a206:	2306      	movs	r3, #6
  40a208:	e7e2      	b.n	40a1d0 <lv_style_remove_prop+0x98>
    if(style->map == NULL) return -1;
  40a20a:	f04f 37ff 	mov.w	r7, #4294967295
  40a20e:	e7c7      	b.n	40a1a0 <lv_style_remove_prop+0x68>
  40a210:	460e      	mov	r6, r1
            uint32_t map_size = _lv_style_get_mem_size(style);
  40a212:	4620      	mov	r0, r4
  40a214:	4b12      	ldr	r3, [pc, #72]	; (40a260 <lv_style_remove_prop+0x128>)
  40a216:	4798      	blx	r3
    prop_id &= 0xF;
  40a218:	f006 010f 	and.w	r1, r6, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a21c:	2908      	cmp	r1, #8
  40a21e:	d905      	bls.n	40a22c <lv_style_remove_prop+0xf4>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a220:	290b      	cmp	r1, #11
  40a222:	d90f      	bls.n	40a244 <lv_style_remove_prop+0x10c>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40a224:	290d      	cmp	r1, #13
  40a226:	d80f      	bhi.n	40a248 <lv_style_remove_prop+0x110>
  40a228:	2603      	movs	r6, #3
  40a22a:	e000      	b.n	40a22e <lv_style_remove_prop+0xf6>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a22c:	2604      	movs	r6, #4
            for(i = id; i < map_size - prop_size; i++) {
  40a22e:	462b      	mov	r3, r5
  40a230:	b2f2      	uxtb	r2, r6
  40a232:	1a81      	subs	r1, r0, r2
  40a234:	428b      	cmp	r3, r1
  40a236:	d209      	bcs.n	40a24c <lv_style_remove_prop+0x114>
                style->map[i] = style->map[i + prop_size];
  40a238:	6821      	ldr	r1, [r4, #0]
  40a23a:	441a      	add	r2, r3
  40a23c:	5c8a      	ldrb	r2, [r1, r2]
  40a23e:	54ca      	strb	r2, [r1, r3]
            for(i = id; i < map_size - prop_size; i++) {
  40a240:	3301      	adds	r3, #1
  40a242:	e7f5      	b.n	40a230 <lv_style_remove_prop+0xf8>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a244:	2604      	movs	r6, #4
  40a246:	e7f2      	b.n	40a22e <lv_style_remove_prop+0xf6>
    else size += sizeof(const void *);
  40a248:	2606      	movs	r6, #6
  40a24a:	e7f0      	b.n	40a22e <lv_style_remove_prop+0xf6>
    style->map = lv_mem_realloc(style->map, sz);
  40a24c:	6820      	ldr	r0, [r4, #0]
  40a24e:	4b05      	ldr	r3, [pc, #20]	; (40a264 <lv_style_remove_prop+0x12c>)
  40a250:	4798      	blx	r3
  40a252:	6020      	str	r0, [r4, #0]
            return true;
  40a254:	2001      	movs	r0, #1
  40a256:	e7b7      	b.n	40a1c8 <lv_style_remove_prop+0x90>
    if(style == NULL) return false;
  40a258:	2000      	movs	r0, #0
  40a25a:	4770      	bx	lr
    return false;
  40a25c:	2000      	movs	r0, #0
  40a25e:	e7b3      	b.n	40a1c8 <lv_style_remove_prop+0x90>
  40a260:	0040a0b9 	.word	0x0040a0b9
  40a264:	00416a09 	.word	0x00416a09

0040a268 <_lv_style_set_int>:
{
  40a268:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a26a:	b085      	sub	sp, #20
  40a26c:	f8ad 1006 	strh.w	r1, [sp, #6]
  40a270:	f8ad 2004 	strh.w	r2, [sp, #4]
    if(style->map == NULL) return -1;
  40a274:	6803      	ldr	r3, [r0, #0]
  40a276:	2b00      	cmp	r3, #0
  40a278:	d061      	beq.n	40a33e <_lv_style_set_int+0xd6>
    uint8_t id_to_find = prop & 0xFF;
  40a27a:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  40a27c:	0a0d      	lsrs	r5, r1, #8
    size_t i = 0;
  40a27e:	2200      	movs	r2, #0
    int16_t id_guess = -1;
  40a280:	f04f 34ff 	mov.w	r4, #4294967295
    int16_t weight = -1;
  40a284:	4627      	mov	r7, r4
  40a286:	e023      	b.n	40a2d0 <_lv_style_set_int+0x68>
    prop_p[0] = style->map[idx];
  40a288:	f8d0 e000 	ldr.w	lr, [r0]
  40a28c:	f81e c002 	ldrb.w	ip, [lr, r2]
  40a290:	f88d c00c 	strb.w	ip, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a294:	f81e 1001 	ldrb.w	r1, [lr, r1]
  40a298:	f88d 100d 	strb.w	r1, [sp, #13]
    return prop;
  40a29c:	f8bd e00c 	ldrh.w	lr, [sp, #12]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  40a2a0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
  40a2a4:	fa5f f18e 	uxtb.w	r1, lr
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40a2a8:	ea85 0c01 	eor.w	ip, r5, r1
  40a2ac:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
  40a2b0:	d02b      	beq.n	40a30a <_lv_style_set_int+0xa2>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40a2b2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  40a2b6:	f005 0c7f 	and.w	ip, r5, #127	; 0x7f
  40a2ba:	ea31 0c0c 	bics.w	ip, r1, ip
  40a2be:	d115      	bne.n	40a2ec <_lv_style_set_int+0x84>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40a2c0:	42b9      	cmp	r1, r7
  40a2c2:	dd13      	ble.n	40a2ec <_lv_style_set_int+0x84>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40a2c4:	f00e 077f 	and.w	r7, lr, #127	; 0x7f
                    id_guess = i;
  40a2c8:	b214      	sxth	r4, r2
  40a2ca:	e00f      	b.n	40a2ec <_lv_style_set_int+0x84>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a2cc:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40a2ce:	441a      	add	r2, r3
    prop_p[0] = style->map[idx];
  40a2d0:	6803      	ldr	r3, [r0, #0]
  40a2d2:	5c99      	ldrb	r1, [r3, r2]
  40a2d4:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a2d8:	1c51      	adds	r1, r2, #1
  40a2da:	5c5b      	ldrb	r3, [r3, r1]
  40a2dc:	f88d 300d 	strb.w	r3, [sp, #13]
    return get_style_prop(style, idx) & 0xFF;
  40a2e0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40a2e4:	2bff      	cmp	r3, #255	; 0xff
  40a2e6:	d00f      	beq.n	40a308 <_lv_style_set_int+0xa0>
        if(prop_id == id_to_find) {
  40a2e8:	429e      	cmp	r6, r3
  40a2ea:	d0cd      	beq.n	40a288 <_lv_style_set_int+0x20>
    prop_id &= 0xF;
  40a2ec:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a2f0:	2b08      	cmp	r3, #8
  40a2f2:	d9eb      	bls.n	40a2cc <_lv_style_set_int+0x64>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a2f4:	2b0b      	cmp	r3, #11
  40a2f6:	d903      	bls.n	40a300 <_lv_style_set_int+0x98>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40a2f8:	2b0d      	cmp	r3, #13
  40a2fa:	d803      	bhi.n	40a304 <_lv_style_set_int+0x9c>
  40a2fc:	2303      	movs	r3, #3
  40a2fe:	e7e6      	b.n	40a2ce <_lv_style_set_int+0x66>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a300:	2304      	movs	r3, #4
  40a302:	e7e4      	b.n	40a2ce <_lv_style_set_int+0x66>
    else size += sizeof(const void *);
  40a304:	2306      	movs	r3, #6
  40a306:	e7e2      	b.n	40a2ce <_lv_style_set_int+0x66>
    return id_guess;
  40a308:	4622      	mov	r2, r4
    if(id >= 0) {
  40a30a:	2a00      	cmp	r2, #0
  40a30c:	db23      	blt.n	40a356 <_lv_style_set_int+0xee>
    prop_p[0] = style->map[idx];
  40a30e:	6803      	ldr	r3, [r0, #0]
  40a310:	5c99      	ldrb	r1, [r3, r2]
  40a312:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a316:	4413      	add	r3, r2
  40a318:	785b      	ldrb	r3, [r3, #1]
  40a31a:	f88d 300d 	strb.w	r3, [sp, #13]
    return prop;
  40a31e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
        attr_goal = (prop >> 8) & 0xFFU;
  40a322:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40a326:	0a1b      	lsrs	r3, r3, #8
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
  40a328:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
  40a32c:	f013 0f7f 	tst.w	r3, #127	; 0x7f
  40a330:	d111      	bne.n	40a356 <_lv_style_set_int+0xee>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &value, sizeof(lv_style_int_t));
  40a332:	6803      	ldr	r3, [r0, #0]
  40a334:	3202      	adds	r2, #2
  40a336:	441a      	add	r2, r3
    const uint8_t * s8 = (const uint8_t *)src;
  40a338:	a901      	add	r1, sp, #4
  40a33a:	2302      	movs	r3, #2
  40a33c:	e007      	b.n	40a34e <_lv_style_set_int+0xe6>
    if(style->map == NULL) return -1;
  40a33e:	f04f 32ff 	mov.w	r2, #4294967295
  40a342:	e7e2      	b.n	40a30a <_lv_style_set_int+0xa2>
        *d8 = *s8;
  40a344:	f811 0b01 	ldrb.w	r0, [r1], #1
  40a348:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40a34c:	3b01      	subs	r3, #1
    while(len) {
  40a34e:	2b00      	cmp	r3, #0
  40a350:	d1f8      	bne.n	40a344 <_lv_style_set_int+0xdc>
}
  40a352:	b005      	add	sp, #20
  40a354:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a356:	4605      	mov	r5, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
  40a358:	23ff      	movs	r3, #255	; 0xff
  40a35a:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
  40a35e:	4b21      	ldr	r3, [pc, #132]	; (40a3e4 <_lv_style_set_int+0x17c>)
  40a360:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
  40a362:	4603      	mov	r3, r0
  40a364:	b908      	cbnz	r0, 40a36a <_lv_style_set_int+0x102>
  40a366:	3302      	adds	r3, #2
  40a368:	b29b      	uxth	r3, r3
    size += sizeof(lv_style_property_t) + sizeof(lv_style_int_t);
  40a36a:	3304      	adds	r3, #4
  40a36c:	b29c      	uxth	r4, r3
    style->map = lv_mem_realloc(style->map, sz);
  40a36e:	4621      	mov	r1, r4
  40a370:	6828      	ldr	r0, [r5, #0]
  40a372:	4b1d      	ldr	r3, [pc, #116]	; (40a3e8 <_lv_style_set_int+0x180>)
  40a374:	4798      	blx	r3
  40a376:	6028      	str	r0, [r5, #0]
    LV_ASSERT_MEM(style->map);
  40a378:	4b1c      	ldr	r3, [pc, #112]	; (40a3ec <_lv_style_set_int+0x184>)
  40a37a:	4798      	blx	r3
  40a37c:	b148      	cbz	r0, 40a392 <_lv_style_set_int+0x12a>
    if(style == NULL) return;
  40a37e:	2d00      	cmp	r5, #0
  40a380:	d0e7      	beq.n	40a352 <_lv_style_set_int+0xea>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
  40a382:	682b      	ldr	r3, [r5, #0]
  40a384:	1f20      	subs	r0, r4, #4
  40a386:	1fa2      	subs	r2, r4, #6
  40a388:	4413      	add	r3, r2
    const uint8_t * s8 = (const uint8_t *)src;
  40a38a:	f10d 0106 	add.w	r1, sp, #6
  40a38e:	2202      	movs	r2, #2
  40a390:	e00a      	b.n	40a3a8 <_lv_style_set_int+0x140>
    LV_ASSERT_MEM(style->map);
  40a392:	682a      	ldr	r2, [r5, #0]
  40a394:	2300      	movs	r3, #0
  40a396:	4816      	ldr	r0, [pc, #88]	; (40a3f0 <_lv_style_set_int+0x188>)
  40a398:	4916      	ldr	r1, [pc, #88]	; (40a3f4 <_lv_style_set_int+0x18c>)
  40a39a:	4788      	blx	r1
  40a39c:	e7fe      	b.n	40a39c <_lv_style_set_int+0x134>
        *d8 = *s8;
  40a39e:	f811 6b01 	ldrb.w	r6, [r1], #1
  40a3a2:	f803 6b01 	strb.w	r6, [r3], #1
        len--;
  40a3a6:	3a01      	subs	r2, #1
    while(len) {
  40a3a8:	2a00      	cmp	r2, #0
  40a3aa:	d1f8      	bne.n	40a39e <_lv_style_set_int+0x136>
    _lv_memcpy_small(style->map + size - sizeof(lv_style_int_t) - end_mark_size, &value, sizeof(lv_style_int_t));
  40a3ac:	682b      	ldr	r3, [r5, #0]
  40a3ae:	3c02      	subs	r4, #2
  40a3b0:	4403      	add	r3, r0
    const uint8_t * s8 = (const uint8_t *)src;
  40a3b2:	a901      	add	r1, sp, #4
  40a3b4:	2202      	movs	r2, #2
  40a3b6:	e004      	b.n	40a3c2 <_lv_style_set_int+0x15a>
        *d8 = *s8;
  40a3b8:	f811 0b01 	ldrb.w	r0, [r1], #1
  40a3bc:	f803 0b01 	strb.w	r0, [r3], #1
        len--;
  40a3c0:	3a01      	subs	r2, #1
    while(len) {
  40a3c2:	2a00      	cmp	r2, #0
  40a3c4:	d1f8      	bne.n	40a3b8 <_lv_style_set_int+0x150>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
  40a3c6:	682b      	ldr	r3, [r5, #0]
  40a3c8:	441c      	add	r4, r3
    const uint8_t * s8 = (const uint8_t *)src;
  40a3ca:	f10d 020e 	add.w	r2, sp, #14
  40a3ce:	2302      	movs	r3, #2
  40a3d0:	e004      	b.n	40a3dc <_lv_style_set_int+0x174>
        *d8 = *s8;
  40a3d2:	f812 1b01 	ldrb.w	r1, [r2], #1
  40a3d6:	f804 1b01 	strb.w	r1, [r4], #1
        len--;
  40a3da:	3b01      	subs	r3, #1
    while(len) {
  40a3dc:	2b00      	cmp	r3, #0
  40a3de:	d1f8      	bne.n	40a3d2 <_lv_style_set_int+0x16a>
  40a3e0:	e7b7      	b.n	40a352 <_lv_style_set_int+0xea>
  40a3e2:	bf00      	nop
  40a3e4:	0040a0b9 	.word	0x0040a0b9
  40a3e8:	00416a09 	.word	0x00416a09
  40a3ec:	00415f95 	.word	0x00415f95
  40a3f0:	0042c714 	.word	0x0042c714
  40a3f4:	00415fa1 	.word	0x00415fa1

0040a3f8 <_lv_style_set_color>:
{
  40a3f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a3fa:	b085      	sub	sp, #20
  40a3fc:	f8ad 2004 	strh.w	r2, [sp, #4]
  40a400:	f8ad 1006 	strh.w	r1, [sp, #6]
    if(style->map == NULL) return -1;
  40a404:	6803      	ldr	r3, [r0, #0]
  40a406:	2b00      	cmp	r3, #0
  40a408:	d061      	beq.n	40a4ce <_lv_style_set_color+0xd6>
    uint8_t id_to_find = prop & 0xFF;
  40a40a:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  40a40c:	0a0d      	lsrs	r5, r1, #8
    size_t i = 0;
  40a40e:	2200      	movs	r2, #0
    int16_t id_guess = -1;
  40a410:	f04f 34ff 	mov.w	r4, #4294967295
    int16_t weight = -1;
  40a414:	4627      	mov	r7, r4
  40a416:	e023      	b.n	40a460 <_lv_style_set_color+0x68>
    prop_p[0] = style->map[idx];
  40a418:	f8d0 e000 	ldr.w	lr, [r0]
  40a41c:	f81e c002 	ldrb.w	ip, [lr, r2]
  40a420:	f88d c00c 	strb.w	ip, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a424:	f81e 1001 	ldrb.w	r1, [lr, r1]
  40a428:	f88d 100d 	strb.w	r1, [sp, #13]
    return prop;
  40a42c:	f8bd e00c 	ldrh.w	lr, [sp, #12]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  40a430:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
  40a434:	fa5f f18e 	uxtb.w	r1, lr
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40a438:	ea85 0c01 	eor.w	ip, r5, r1
  40a43c:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
  40a440:	d02b      	beq.n	40a49a <_lv_style_set_color+0xa2>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40a442:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  40a446:	f005 0c7f 	and.w	ip, r5, #127	; 0x7f
  40a44a:	ea31 0c0c 	bics.w	ip, r1, ip
  40a44e:	d115      	bne.n	40a47c <_lv_style_set_color+0x84>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40a450:	42b9      	cmp	r1, r7
  40a452:	dd13      	ble.n	40a47c <_lv_style_set_color+0x84>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40a454:	f00e 077f 	and.w	r7, lr, #127	; 0x7f
                    id_guess = i;
  40a458:	b214      	sxth	r4, r2
  40a45a:	e00f      	b.n	40a47c <_lv_style_set_color+0x84>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a45c:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40a45e:	441a      	add	r2, r3
    prop_p[0] = style->map[idx];
  40a460:	6803      	ldr	r3, [r0, #0]
  40a462:	5c99      	ldrb	r1, [r3, r2]
  40a464:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a468:	1c51      	adds	r1, r2, #1
  40a46a:	5c5b      	ldrb	r3, [r3, r1]
  40a46c:	f88d 300d 	strb.w	r3, [sp, #13]
    return get_style_prop(style, idx) & 0xFF;
  40a470:	f89d 300c 	ldrb.w	r3, [sp, #12]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40a474:	2bff      	cmp	r3, #255	; 0xff
  40a476:	d00f      	beq.n	40a498 <_lv_style_set_color+0xa0>
        if(prop_id == id_to_find) {
  40a478:	429e      	cmp	r6, r3
  40a47a:	d0cd      	beq.n	40a418 <_lv_style_set_color+0x20>
    prop_id &= 0xF;
  40a47c:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a480:	2b08      	cmp	r3, #8
  40a482:	d9eb      	bls.n	40a45c <_lv_style_set_color+0x64>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a484:	2b0b      	cmp	r3, #11
  40a486:	d903      	bls.n	40a490 <_lv_style_set_color+0x98>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40a488:	2b0d      	cmp	r3, #13
  40a48a:	d803      	bhi.n	40a494 <_lv_style_set_color+0x9c>
  40a48c:	2303      	movs	r3, #3
  40a48e:	e7e6      	b.n	40a45e <_lv_style_set_color+0x66>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a490:	2304      	movs	r3, #4
  40a492:	e7e4      	b.n	40a45e <_lv_style_set_color+0x66>
    else size += sizeof(const void *);
  40a494:	2306      	movs	r3, #6
  40a496:	e7e2      	b.n	40a45e <_lv_style_set_color+0x66>
    return id_guess;
  40a498:	4622      	mov	r2, r4
    if(id >= 0) {
  40a49a:	2a00      	cmp	r2, #0
  40a49c:	db23      	blt.n	40a4e6 <_lv_style_set_color+0xee>
    prop_p[0] = style->map[idx];
  40a49e:	6803      	ldr	r3, [r0, #0]
  40a4a0:	5c99      	ldrb	r1, [r3, r2]
  40a4a2:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a4a6:	4413      	add	r3, r2
  40a4a8:	785b      	ldrb	r3, [r3, #1]
  40a4aa:	f88d 300d 	strb.w	r3, [sp, #13]
    return prop;
  40a4ae:	f8bd 100c 	ldrh.w	r1, [sp, #12]
        attr_goal = (prop >> 8) & 0xFFU;
  40a4b2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40a4b6:	0a1b      	lsrs	r3, r3, #8
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
  40a4b8:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
  40a4bc:	f013 0f7f 	tst.w	r3, #127	; 0x7f
  40a4c0:	d111      	bne.n	40a4e6 <_lv_style_set_color+0xee>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &color, sizeof(lv_color_t));
  40a4c2:	6803      	ldr	r3, [r0, #0]
  40a4c4:	3202      	adds	r2, #2
  40a4c6:	441a      	add	r2, r3
    const uint8_t * s8 = (const uint8_t *)src;
  40a4c8:	a901      	add	r1, sp, #4
  40a4ca:	2302      	movs	r3, #2
  40a4cc:	e007      	b.n	40a4de <_lv_style_set_color+0xe6>
    if(style->map == NULL) return -1;
  40a4ce:	f04f 32ff 	mov.w	r2, #4294967295
  40a4d2:	e7e2      	b.n	40a49a <_lv_style_set_color+0xa2>
        *d8 = *s8;
  40a4d4:	f811 0b01 	ldrb.w	r0, [r1], #1
  40a4d8:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40a4dc:	3b01      	subs	r3, #1
    while(len) {
  40a4de:	2b00      	cmp	r3, #0
  40a4e0:	d1f8      	bne.n	40a4d4 <_lv_style_set_color+0xdc>
}
  40a4e2:	b005      	add	sp, #20
  40a4e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a4e6:	4605      	mov	r5, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
  40a4e8:	23ff      	movs	r3, #255	; 0xff
  40a4ea:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
  40a4ee:	4b21      	ldr	r3, [pc, #132]	; (40a574 <_lv_style_set_color+0x17c>)
  40a4f0:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
  40a4f2:	4603      	mov	r3, r0
  40a4f4:	b908      	cbnz	r0, 40a4fa <_lv_style_set_color+0x102>
  40a4f6:	3302      	adds	r3, #2
  40a4f8:	b29b      	uxth	r3, r3
    size += sizeof(lv_style_property_t) + sizeof(lv_color_t);
  40a4fa:	3304      	adds	r3, #4
  40a4fc:	b29c      	uxth	r4, r3
    style->map = lv_mem_realloc(style->map, sz);
  40a4fe:	4621      	mov	r1, r4
  40a500:	6828      	ldr	r0, [r5, #0]
  40a502:	4b1d      	ldr	r3, [pc, #116]	; (40a578 <_lv_style_set_color+0x180>)
  40a504:	4798      	blx	r3
  40a506:	6028      	str	r0, [r5, #0]
    LV_ASSERT_MEM(style->map);
  40a508:	4b1c      	ldr	r3, [pc, #112]	; (40a57c <_lv_style_set_color+0x184>)
  40a50a:	4798      	blx	r3
  40a50c:	b148      	cbz	r0, 40a522 <_lv_style_set_color+0x12a>
    if(style == NULL) return;
  40a50e:	2d00      	cmp	r5, #0
  40a510:	d0e7      	beq.n	40a4e2 <_lv_style_set_color+0xea>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
  40a512:	682b      	ldr	r3, [r5, #0]
  40a514:	1f20      	subs	r0, r4, #4
  40a516:	1fa2      	subs	r2, r4, #6
  40a518:	4413      	add	r3, r2
    const uint8_t * s8 = (const uint8_t *)src;
  40a51a:	f10d 0106 	add.w	r1, sp, #6
  40a51e:	2202      	movs	r2, #2
  40a520:	e00a      	b.n	40a538 <_lv_style_set_color+0x140>
    LV_ASSERT_MEM(style->map);
  40a522:	682a      	ldr	r2, [r5, #0]
  40a524:	2300      	movs	r3, #0
  40a526:	4816      	ldr	r0, [pc, #88]	; (40a580 <_lv_style_set_color+0x188>)
  40a528:	4916      	ldr	r1, [pc, #88]	; (40a584 <_lv_style_set_color+0x18c>)
  40a52a:	4788      	blx	r1
  40a52c:	e7fe      	b.n	40a52c <_lv_style_set_color+0x134>
        *d8 = *s8;
  40a52e:	f811 6b01 	ldrb.w	r6, [r1], #1
  40a532:	f803 6b01 	strb.w	r6, [r3], #1
        len--;
  40a536:	3a01      	subs	r2, #1
    while(len) {
  40a538:	2a00      	cmp	r2, #0
  40a53a:	d1f8      	bne.n	40a52e <_lv_style_set_color+0x136>
    _lv_memcpy_small(style->map + size - sizeof(lv_color_t) - end_mark_size, &color, sizeof(lv_color_t));
  40a53c:	682b      	ldr	r3, [r5, #0]
  40a53e:	3c02      	subs	r4, #2
  40a540:	4403      	add	r3, r0
    const uint8_t * s8 = (const uint8_t *)src;
  40a542:	a901      	add	r1, sp, #4
  40a544:	2202      	movs	r2, #2
  40a546:	e004      	b.n	40a552 <_lv_style_set_color+0x15a>
        *d8 = *s8;
  40a548:	f811 0b01 	ldrb.w	r0, [r1], #1
  40a54c:	f803 0b01 	strb.w	r0, [r3], #1
        len--;
  40a550:	3a01      	subs	r2, #1
    while(len) {
  40a552:	2a00      	cmp	r2, #0
  40a554:	d1f8      	bne.n	40a548 <_lv_style_set_color+0x150>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
  40a556:	682b      	ldr	r3, [r5, #0]
  40a558:	441c      	add	r4, r3
    const uint8_t * s8 = (const uint8_t *)src;
  40a55a:	f10d 020e 	add.w	r2, sp, #14
  40a55e:	2302      	movs	r3, #2
  40a560:	e004      	b.n	40a56c <_lv_style_set_color+0x174>
        *d8 = *s8;
  40a562:	f812 1b01 	ldrb.w	r1, [r2], #1
  40a566:	f804 1b01 	strb.w	r1, [r4], #1
        len--;
  40a56a:	3b01      	subs	r3, #1
    while(len) {
  40a56c:	2b00      	cmp	r3, #0
  40a56e:	d1f8      	bne.n	40a562 <_lv_style_set_color+0x16a>
  40a570:	e7b7      	b.n	40a4e2 <_lv_style_set_color+0xea>
  40a572:	bf00      	nop
  40a574:	0040a0b9 	.word	0x0040a0b9
  40a578:	00416a09 	.word	0x00416a09
  40a57c:	00415f95 	.word	0x00415f95
  40a580:	0042c714 	.word	0x0042c714
  40a584:	00415fa1 	.word	0x00415fa1

0040a588 <_lv_style_set_opa>:
{
  40a588:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a58a:	b085      	sub	sp, #20
  40a58c:	f8ad 1006 	strh.w	r1, [sp, #6]
  40a590:	f88d 2005 	strb.w	r2, [sp, #5]
    if(style->map == NULL) return -1;
  40a594:	6803      	ldr	r3, [r0, #0]
  40a596:	2b00      	cmp	r3, #0
  40a598:	d064      	beq.n	40a664 <_lv_style_set_opa+0xdc>
    uint8_t id_to_find = prop & 0xFF;
  40a59a:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  40a59c:	0a0d      	lsrs	r5, r1, #8
    size_t i = 0;
  40a59e:	2200      	movs	r2, #0
    int16_t id_guess = -1;
  40a5a0:	f04f 34ff 	mov.w	r4, #4294967295
    int16_t weight = -1;
  40a5a4:	4627      	mov	r7, r4
  40a5a6:	e023      	b.n	40a5f0 <_lv_style_set_opa+0x68>
    prop_p[0] = style->map[idx];
  40a5a8:	f8d0 e000 	ldr.w	lr, [r0]
  40a5ac:	f81e c002 	ldrb.w	ip, [lr, r2]
  40a5b0:	f88d c00c 	strb.w	ip, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a5b4:	f81e 1001 	ldrb.w	r1, [lr, r1]
  40a5b8:	f88d 100d 	strb.w	r1, [sp, #13]
    return prop;
  40a5bc:	f8bd e00c 	ldrh.w	lr, [sp, #12]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  40a5c0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
  40a5c4:	fa5f f18e 	uxtb.w	r1, lr
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40a5c8:	ea85 0c01 	eor.w	ip, r5, r1
  40a5cc:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
  40a5d0:	d02b      	beq.n	40a62a <_lv_style_set_opa+0xa2>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40a5d2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  40a5d6:	f005 0c7f 	and.w	ip, r5, #127	; 0x7f
  40a5da:	ea31 0c0c 	bics.w	ip, r1, ip
  40a5de:	d115      	bne.n	40a60c <_lv_style_set_opa+0x84>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40a5e0:	42b9      	cmp	r1, r7
  40a5e2:	dd13      	ble.n	40a60c <_lv_style_set_opa+0x84>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40a5e4:	f00e 077f 	and.w	r7, lr, #127	; 0x7f
                    id_guess = i;
  40a5e8:	b214      	sxth	r4, r2
  40a5ea:	e00f      	b.n	40a60c <_lv_style_set_opa+0x84>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a5ec:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40a5ee:	441a      	add	r2, r3
    prop_p[0] = style->map[idx];
  40a5f0:	6803      	ldr	r3, [r0, #0]
  40a5f2:	5c99      	ldrb	r1, [r3, r2]
  40a5f4:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a5f8:	1c51      	adds	r1, r2, #1
  40a5fa:	5c5b      	ldrb	r3, [r3, r1]
  40a5fc:	f88d 300d 	strb.w	r3, [sp, #13]
    return get_style_prop(style, idx) & 0xFF;
  40a600:	f89d 300c 	ldrb.w	r3, [sp, #12]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40a604:	2bff      	cmp	r3, #255	; 0xff
  40a606:	d00f      	beq.n	40a628 <_lv_style_set_opa+0xa0>
        if(prop_id == id_to_find) {
  40a608:	429e      	cmp	r6, r3
  40a60a:	d0cd      	beq.n	40a5a8 <_lv_style_set_opa+0x20>
    prop_id &= 0xF;
  40a60c:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a610:	2b08      	cmp	r3, #8
  40a612:	d9eb      	bls.n	40a5ec <_lv_style_set_opa+0x64>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a614:	2b0b      	cmp	r3, #11
  40a616:	d903      	bls.n	40a620 <_lv_style_set_opa+0x98>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40a618:	2b0d      	cmp	r3, #13
  40a61a:	d803      	bhi.n	40a624 <_lv_style_set_opa+0x9c>
  40a61c:	2303      	movs	r3, #3
  40a61e:	e7e6      	b.n	40a5ee <_lv_style_set_opa+0x66>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a620:	2304      	movs	r3, #4
  40a622:	e7e4      	b.n	40a5ee <_lv_style_set_opa+0x66>
    else size += sizeof(const void *);
  40a624:	2306      	movs	r3, #6
  40a626:	e7e2      	b.n	40a5ee <_lv_style_set_opa+0x66>
    return id_guess;
  40a628:	4622      	mov	r2, r4
    if(id >= 0) {
  40a62a:	2a00      	cmp	r2, #0
  40a62c:	db23      	blt.n	40a676 <_lv_style_set_opa+0xee>
    prop_p[0] = style->map[idx];
  40a62e:	6803      	ldr	r3, [r0, #0]
  40a630:	5c99      	ldrb	r1, [r3, r2]
  40a632:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a636:	4413      	add	r3, r2
  40a638:	785b      	ldrb	r3, [r3, #1]
  40a63a:	f88d 300d 	strb.w	r3, [sp, #13]
    return prop;
  40a63e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
        attr_goal = (prop >> 8) & 0xFFU;
  40a642:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40a646:	0a1b      	lsrs	r3, r3, #8
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
  40a648:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
  40a64c:	f013 0f7f 	tst.w	r3, #127	; 0x7f
  40a650:	d111      	bne.n	40a676 <_lv_style_set_opa+0xee>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &opa, sizeof(lv_opa_t));
  40a652:	6803      	ldr	r3, [r0, #0]
  40a654:	3202      	adds	r2, #2
  40a656:	441a      	add	r2, r3
    const uint8_t * s8 = (const uint8_t *)src;
  40a658:	f10d 0105 	add.w	r1, sp, #5
  40a65c:	2301      	movs	r3, #1
    while(len) {
  40a65e:	b923      	cbnz	r3, 40a66a <_lv_style_set_opa+0xe2>
}
  40a660:	b005      	add	sp, #20
  40a662:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(style->map == NULL) return -1;
  40a664:	f04f 32ff 	mov.w	r2, #4294967295
  40a668:	e7df      	b.n	40a62a <_lv_style_set_opa+0xa2>
        *d8 = *s8;
  40a66a:	f811 0b01 	ldrb.w	r0, [r1], #1
  40a66e:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40a672:	3b01      	subs	r3, #1
  40a674:	e7f3      	b.n	40a65e <_lv_style_set_opa+0xd6>
  40a676:	4605      	mov	r5, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
  40a678:	23ff      	movs	r3, #255	; 0xff
  40a67a:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
  40a67e:	4b21      	ldr	r3, [pc, #132]	; (40a704 <_lv_style_set_opa+0x17c>)
  40a680:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
  40a682:	4603      	mov	r3, r0
  40a684:	b908      	cbnz	r0, 40a68a <_lv_style_set_opa+0x102>
  40a686:	3302      	adds	r3, #2
  40a688:	b29b      	uxth	r3, r3
    size += sizeof(lv_style_property_t) + sizeof(lv_opa_t);
  40a68a:	3303      	adds	r3, #3
  40a68c:	b29c      	uxth	r4, r3
    style->map = lv_mem_realloc(style->map, sz);
  40a68e:	4621      	mov	r1, r4
  40a690:	6828      	ldr	r0, [r5, #0]
  40a692:	4b1d      	ldr	r3, [pc, #116]	; (40a708 <_lv_style_set_opa+0x180>)
  40a694:	4798      	blx	r3
  40a696:	6028      	str	r0, [r5, #0]
    LV_ASSERT_MEM(style->map);
  40a698:	4b1c      	ldr	r3, [pc, #112]	; (40a70c <_lv_style_set_opa+0x184>)
  40a69a:	4798      	blx	r3
  40a69c:	b148      	cbz	r0, 40a6b2 <_lv_style_set_opa+0x12a>
    if(style == NULL) return;
  40a69e:	2d00      	cmp	r5, #0
  40a6a0:	d0de      	beq.n	40a660 <_lv_style_set_opa+0xd8>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
  40a6a2:	682b      	ldr	r3, [r5, #0]
  40a6a4:	1ee0      	subs	r0, r4, #3
  40a6a6:	1f62      	subs	r2, r4, #5
  40a6a8:	4413      	add	r3, r2
    const uint8_t * s8 = (const uint8_t *)src;
  40a6aa:	f10d 0106 	add.w	r1, sp, #6
  40a6ae:	2202      	movs	r2, #2
  40a6b0:	e00a      	b.n	40a6c8 <_lv_style_set_opa+0x140>
    LV_ASSERT_MEM(style->map);
  40a6b2:	682a      	ldr	r2, [r5, #0]
  40a6b4:	2300      	movs	r3, #0
  40a6b6:	4816      	ldr	r0, [pc, #88]	; (40a710 <_lv_style_set_opa+0x188>)
  40a6b8:	4916      	ldr	r1, [pc, #88]	; (40a714 <_lv_style_set_opa+0x18c>)
  40a6ba:	4788      	blx	r1
  40a6bc:	e7fe      	b.n	40a6bc <_lv_style_set_opa+0x134>
        *d8 = *s8;
  40a6be:	f811 6b01 	ldrb.w	r6, [r1], #1
  40a6c2:	f803 6b01 	strb.w	r6, [r3], #1
        len--;
  40a6c6:	3a01      	subs	r2, #1
    while(len) {
  40a6c8:	2a00      	cmp	r2, #0
  40a6ca:	d1f8      	bne.n	40a6be <_lv_style_set_opa+0x136>
    _lv_memcpy_small(style->map + size - sizeof(lv_opa_t) - end_mark_size, &opa, sizeof(lv_opa_t));
  40a6cc:	682b      	ldr	r3, [r5, #0]
  40a6ce:	3c02      	subs	r4, #2
  40a6d0:	4403      	add	r3, r0
    const uint8_t * s8 = (const uint8_t *)src;
  40a6d2:	f10d 0105 	add.w	r1, sp, #5
  40a6d6:	2201      	movs	r2, #1
    while(len) {
  40a6d8:	b92a      	cbnz	r2, 40a6e6 <_lv_style_set_opa+0x15e>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
  40a6da:	682b      	ldr	r3, [r5, #0]
  40a6dc:	441c      	add	r4, r3
    const uint8_t * s8 = (const uint8_t *)src;
  40a6de:	f10d 020e 	add.w	r2, sp, #14
  40a6e2:	2302      	movs	r3, #2
  40a6e4:	e00a      	b.n	40a6fc <_lv_style_set_opa+0x174>
        *d8 = *s8;
  40a6e6:	f811 0b01 	ldrb.w	r0, [r1], #1
  40a6ea:	f803 0b01 	strb.w	r0, [r3], #1
        len--;
  40a6ee:	3a01      	subs	r2, #1
  40a6f0:	e7f2      	b.n	40a6d8 <_lv_style_set_opa+0x150>
        *d8 = *s8;
  40a6f2:	f812 1b01 	ldrb.w	r1, [r2], #1
  40a6f6:	f804 1b01 	strb.w	r1, [r4], #1
        len--;
  40a6fa:	3b01      	subs	r3, #1
    while(len) {
  40a6fc:	2b00      	cmp	r3, #0
  40a6fe:	d1f8      	bne.n	40a6f2 <_lv_style_set_opa+0x16a>
  40a700:	e7ae      	b.n	40a660 <_lv_style_set_opa+0xd8>
  40a702:	bf00      	nop
  40a704:	0040a0b9 	.word	0x0040a0b9
  40a708:	00416a09 	.word	0x00416a09
  40a70c:	00415f95 	.word	0x00415f95
  40a710:	0042c714 	.word	0x0042c714
  40a714:	00415fa1 	.word	0x00415fa1

0040a718 <_lv_style_set_ptr>:
{
  40a718:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a71a:	b085      	sub	sp, #20
  40a71c:	9200      	str	r2, [sp, #0]
  40a71e:	f8ad 1006 	strh.w	r1, [sp, #6]
    if(style->map == NULL) return -1;
  40a722:	6803      	ldr	r3, [r0, #0]
  40a724:	2b00      	cmp	r3, #0
  40a726:	d061      	beq.n	40a7ec <_lv_style_set_ptr+0xd4>
    uint8_t id_to_find = prop & 0xFF;
  40a728:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  40a72a:	0a0d      	lsrs	r5, r1, #8
    size_t i = 0;
  40a72c:	2200      	movs	r2, #0
    int16_t id_guess = -1;
  40a72e:	f04f 34ff 	mov.w	r4, #4294967295
    int16_t weight = -1;
  40a732:	4627      	mov	r7, r4
  40a734:	e023      	b.n	40a77e <_lv_style_set_ptr+0x66>
    prop_p[0] = style->map[idx];
  40a736:	f8d0 e000 	ldr.w	lr, [r0]
  40a73a:	f81e c002 	ldrb.w	ip, [lr, r2]
  40a73e:	f88d c00c 	strb.w	ip, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a742:	f81e 1001 	ldrb.w	r1, [lr, r1]
  40a746:	f88d 100d 	strb.w	r1, [sp, #13]
    return prop;
  40a74a:	f8bd e00c 	ldrh.w	lr, [sp, #12]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  40a74e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
  40a752:	fa5f f18e 	uxtb.w	r1, lr
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40a756:	ea85 0c01 	eor.w	ip, r5, r1
  40a75a:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
  40a75e:	d02b      	beq.n	40a7b8 <_lv_style_set_ptr+0xa0>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40a760:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  40a764:	f005 0c7f 	and.w	ip, r5, #127	; 0x7f
  40a768:	ea31 0c0c 	bics.w	ip, r1, ip
  40a76c:	d115      	bne.n	40a79a <_lv_style_set_ptr+0x82>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40a76e:	42b9      	cmp	r1, r7
  40a770:	dd13      	ble.n	40a79a <_lv_style_set_ptr+0x82>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40a772:	f00e 077f 	and.w	r7, lr, #127	; 0x7f
                    id_guess = i;
  40a776:	b214      	sxth	r4, r2
  40a778:	e00f      	b.n	40a79a <_lv_style_set_ptr+0x82>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a77a:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40a77c:	441a      	add	r2, r3
    prop_p[0] = style->map[idx];
  40a77e:	6803      	ldr	r3, [r0, #0]
  40a780:	5c99      	ldrb	r1, [r3, r2]
  40a782:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a786:	1c51      	adds	r1, r2, #1
  40a788:	5c5b      	ldrb	r3, [r3, r1]
  40a78a:	f88d 300d 	strb.w	r3, [sp, #13]
    return get_style_prop(style, idx) & 0xFF;
  40a78e:	f89d 300c 	ldrb.w	r3, [sp, #12]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40a792:	2bff      	cmp	r3, #255	; 0xff
  40a794:	d00f      	beq.n	40a7b6 <_lv_style_set_ptr+0x9e>
        if(prop_id == id_to_find) {
  40a796:	429e      	cmp	r6, r3
  40a798:	d0cd      	beq.n	40a736 <_lv_style_set_ptr+0x1e>
    prop_id &= 0xF;
  40a79a:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a79e:	2b08      	cmp	r3, #8
  40a7a0:	d9eb      	bls.n	40a77a <_lv_style_set_ptr+0x62>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a7a2:	2b0b      	cmp	r3, #11
  40a7a4:	d903      	bls.n	40a7ae <_lv_style_set_ptr+0x96>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40a7a6:	2b0d      	cmp	r3, #13
  40a7a8:	d803      	bhi.n	40a7b2 <_lv_style_set_ptr+0x9a>
  40a7aa:	2303      	movs	r3, #3
  40a7ac:	e7e6      	b.n	40a77c <_lv_style_set_ptr+0x64>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a7ae:	2304      	movs	r3, #4
  40a7b0:	e7e4      	b.n	40a77c <_lv_style_set_ptr+0x64>
    else size += sizeof(const void *);
  40a7b2:	2306      	movs	r3, #6
  40a7b4:	e7e2      	b.n	40a77c <_lv_style_set_ptr+0x64>
    return id_guess;
  40a7b6:	4622      	mov	r2, r4
    if(id >= 0) {
  40a7b8:	2a00      	cmp	r2, #0
  40a7ba:	db23      	blt.n	40a804 <_lv_style_set_ptr+0xec>
    prop_p[0] = style->map[idx];
  40a7bc:	6803      	ldr	r3, [r0, #0]
  40a7be:	5c99      	ldrb	r1, [r3, r2]
  40a7c0:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a7c4:	4413      	add	r3, r2
  40a7c6:	785b      	ldrb	r3, [r3, #1]
  40a7c8:	f88d 300d 	strb.w	r3, [sp, #13]
    return prop;
  40a7cc:	f8bd 100c 	ldrh.w	r1, [sp, #12]
        attr_goal = (prop >> 8) & 0xFFU;
  40a7d0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40a7d4:	0a1b      	lsrs	r3, r3, #8
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
  40a7d6:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
  40a7da:	f013 0f7f 	tst.w	r3, #127	; 0x7f
  40a7de:	d111      	bne.n	40a804 <_lv_style_set_ptr+0xec>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &p, sizeof(const void *));
  40a7e0:	6803      	ldr	r3, [r0, #0]
  40a7e2:	3202      	adds	r2, #2
  40a7e4:	441a      	add	r2, r3
    const uint8_t * s8 = (const uint8_t *)src;
  40a7e6:	4669      	mov	r1, sp
  40a7e8:	2304      	movs	r3, #4
  40a7ea:	e007      	b.n	40a7fc <_lv_style_set_ptr+0xe4>
    if(style->map == NULL) return -1;
  40a7ec:	f04f 32ff 	mov.w	r2, #4294967295
  40a7f0:	e7e2      	b.n	40a7b8 <_lv_style_set_ptr+0xa0>
        *d8 = *s8;
  40a7f2:	f811 0b01 	ldrb.w	r0, [r1], #1
  40a7f6:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40a7fa:	3b01      	subs	r3, #1
    while(len) {
  40a7fc:	2b00      	cmp	r3, #0
  40a7fe:	d1f8      	bne.n	40a7f2 <_lv_style_set_ptr+0xda>
}
  40a800:	b005      	add	sp, #20
  40a802:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a804:	4605      	mov	r5, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
  40a806:	23ff      	movs	r3, #255	; 0xff
  40a808:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
  40a80c:	4b21      	ldr	r3, [pc, #132]	; (40a894 <_lv_style_set_ptr+0x17c>)
  40a80e:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
  40a810:	4603      	mov	r3, r0
  40a812:	b908      	cbnz	r0, 40a818 <_lv_style_set_ptr+0x100>
  40a814:	3302      	adds	r3, #2
  40a816:	b29b      	uxth	r3, r3
    size += sizeof(lv_style_property_t) + sizeof(const void *);
  40a818:	3306      	adds	r3, #6
  40a81a:	b29c      	uxth	r4, r3
    style->map = lv_mem_realloc(style->map, sz);
  40a81c:	4621      	mov	r1, r4
  40a81e:	6828      	ldr	r0, [r5, #0]
  40a820:	4b1d      	ldr	r3, [pc, #116]	; (40a898 <_lv_style_set_ptr+0x180>)
  40a822:	4798      	blx	r3
  40a824:	6028      	str	r0, [r5, #0]
    LV_ASSERT_MEM(style->map);
  40a826:	4b1d      	ldr	r3, [pc, #116]	; (40a89c <_lv_style_set_ptr+0x184>)
  40a828:	4798      	blx	r3
  40a82a:	b150      	cbz	r0, 40a842 <_lv_style_set_ptr+0x12a>
    if(style == NULL) return;
  40a82c:	2d00      	cmp	r5, #0
  40a82e:	d0e7      	beq.n	40a800 <_lv_style_set_ptr+0xe8>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
  40a830:	682b      	ldr	r3, [r5, #0]
  40a832:	1fa0      	subs	r0, r4, #6
  40a834:	f1a4 0208 	sub.w	r2, r4, #8
  40a838:	4413      	add	r3, r2
    const uint8_t * s8 = (const uint8_t *)src;
  40a83a:	f10d 0106 	add.w	r1, sp, #6
  40a83e:	2202      	movs	r2, #2
  40a840:	e00a      	b.n	40a858 <_lv_style_set_ptr+0x140>
    LV_ASSERT_MEM(style->map);
  40a842:	682a      	ldr	r2, [r5, #0]
  40a844:	2300      	movs	r3, #0
  40a846:	4816      	ldr	r0, [pc, #88]	; (40a8a0 <_lv_style_set_ptr+0x188>)
  40a848:	4916      	ldr	r1, [pc, #88]	; (40a8a4 <_lv_style_set_ptr+0x18c>)
  40a84a:	4788      	blx	r1
  40a84c:	e7fe      	b.n	40a84c <_lv_style_set_ptr+0x134>
        *d8 = *s8;
  40a84e:	f811 6b01 	ldrb.w	r6, [r1], #1
  40a852:	f803 6b01 	strb.w	r6, [r3], #1
        len--;
  40a856:	3a01      	subs	r2, #1
    while(len) {
  40a858:	2a00      	cmp	r2, #0
  40a85a:	d1f8      	bne.n	40a84e <_lv_style_set_ptr+0x136>
    _lv_memcpy_small(style->map + size - sizeof(const void *) - end_mark_size, &p, sizeof(const void *));
  40a85c:	682b      	ldr	r3, [r5, #0]
  40a85e:	3c02      	subs	r4, #2
  40a860:	4403      	add	r3, r0
    const uint8_t * s8 = (const uint8_t *)src;
  40a862:	4669      	mov	r1, sp
  40a864:	2204      	movs	r2, #4
  40a866:	e004      	b.n	40a872 <_lv_style_set_ptr+0x15a>
        *d8 = *s8;
  40a868:	f811 0b01 	ldrb.w	r0, [r1], #1
  40a86c:	f803 0b01 	strb.w	r0, [r3], #1
        len--;
  40a870:	3a01      	subs	r2, #1
    while(len) {
  40a872:	2a00      	cmp	r2, #0
  40a874:	d1f8      	bne.n	40a868 <_lv_style_set_ptr+0x150>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
  40a876:	682b      	ldr	r3, [r5, #0]
  40a878:	441c      	add	r4, r3
    const uint8_t * s8 = (const uint8_t *)src;
  40a87a:	f10d 020e 	add.w	r2, sp, #14
  40a87e:	2302      	movs	r3, #2
  40a880:	e004      	b.n	40a88c <_lv_style_set_ptr+0x174>
        *d8 = *s8;
  40a882:	f812 1b01 	ldrb.w	r1, [r2], #1
  40a886:	f804 1b01 	strb.w	r1, [r4], #1
        len--;
  40a88a:	3b01      	subs	r3, #1
    while(len) {
  40a88c:	2b00      	cmp	r3, #0
  40a88e:	d1f8      	bne.n	40a882 <_lv_style_set_ptr+0x16a>
  40a890:	e7b6      	b.n	40a800 <_lv_style_set_ptr+0xe8>
  40a892:	bf00      	nop
  40a894:	0040a0b9 	.word	0x0040a0b9
  40a898:	00416a09 	.word	0x00416a09
  40a89c:	00415f95 	.word	0x00415f95
  40a8a0:	0042c714 	.word	0x0042c714
  40a8a4:	00415fa1 	.word	0x00415fa1

0040a8a8 <_lv_style_get_int>:
    if(style == NULL) return -1;
  40a8a8:	2800      	cmp	r0, #0
  40a8aa:	d077      	beq.n	40a99c <_lv_style_get_int+0xf4>
{
  40a8ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a8b0:	b082      	sub	sp, #8
  40a8b2:	4692      	mov	sl, r2
  40a8b4:	4605      	mov	r5, r0
    if(style->map == NULL) return -1;
  40a8b6:	6803      	ldr	r3, [r0, #0]
  40a8b8:	2b00      	cmp	r3, #0
  40a8ba:	d072      	beq.n	40a9a2 <_lv_style_get_int+0xfa>
    if(style->map == NULL) return -1;
  40a8bc:	2b00      	cmp	r3, #0
  40a8be:	d051      	beq.n	40a964 <_lv_style_get_int+0xbc>
    uint8_t id_to_find = prop & 0xFF;
  40a8c0:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  40a8c2:	0a0f      	lsrs	r7, r1, #8
    size_t i = 0;
  40a8c4:	2000      	movs	r0, #0
    int16_t id_guess = -1;
  40a8c6:	f04f 3eff 	mov.w	lr, #4294967295
    int16_t weight = -1;
  40a8ca:	46f4      	mov	ip, lr
  40a8cc:	e02e      	b.n	40a92c <_lv_style_get_int+0x84>
    prop_p[0] = style->map[idx];
  40a8ce:	682a      	ldr	r2, [r5, #0]
  40a8d0:	f812 9000 	ldrb.w	r9, [r2, r0]
  40a8d4:	f88d 9006 	strb.w	r9, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a8d8:	5d14      	ldrb	r4, [r2, r4]
  40a8da:	f88d 4007 	strb.w	r4, [sp, #7]
    return prop;
  40a8de:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  40a8e2:	ea4f 2818 	mov.w	r8, r8, lsr #8
  40a8e6:	fa5f f488 	uxtb.w	r4, r8
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40a8ea:	ea87 0904 	eor.w	r9, r7, r4
  40a8ee:	f019 0f7f 	tst.w	r9, #127	; 0x7f
  40a8f2:	d00d      	beq.n	40a910 <_lv_style_get_int+0x68>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40a8f4:	f004 047f 	and.w	r4, r4, #127	; 0x7f
  40a8f8:	f007 097f 	and.w	r9, r7, #127	; 0x7f
  40a8fc:	ea34 0209 	bics.w	r2, r4, r9
  40a900:	d122      	bne.n	40a948 <_lv_style_get_int+0xa0>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40a902:	4564      	cmp	r4, ip
  40a904:	dd20      	ble.n	40a948 <_lv_style_get_int+0xa0>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40a906:	f008 0c7f 	and.w	ip, r8, #127	; 0x7f
                    id_guess = i;
  40a90a:	fa0f fe80 	sxth.w	lr, r0
  40a90e:	e01b      	b.n	40a948 <_lv_style_get_int+0xa0>
                return i;
  40a910:	4686      	mov	lr, r0
    if(id < 0) {
  40a912:	f1be 0f00 	cmp.w	lr, #0
  40a916:	db47      	blt.n	40a9a8 <_lv_style_get_int+0x100>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_style_int_t));
  40a918:	682b      	ldr	r3, [r5, #0]
  40a91a:	4674      	mov	r4, lr
  40a91c:	f10e 0e02 	add.w	lr, lr, #2
  40a920:	449e      	add	lr, r3
    uint8_t * d8 = (uint8_t *)dst;
  40a922:	4652      	mov	r2, sl
  40a924:	2302      	movs	r3, #2
  40a926:	e025      	b.n	40a974 <_lv_style_get_int+0xcc>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a928:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40a92a:	4418      	add	r0, r3
    prop_p[0] = style->map[idx];
  40a92c:	682b      	ldr	r3, [r5, #0]
  40a92e:	5c1c      	ldrb	r4, [r3, r0]
  40a930:	f88d 4006 	strb.w	r4, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a934:	1c44      	adds	r4, r0, #1
  40a936:	5d1b      	ldrb	r3, [r3, r4]
  40a938:	f88d 3007 	strb.w	r3, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  40a93c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40a940:	2bff      	cmp	r3, #255	; 0xff
  40a942:	d0e6      	beq.n	40a912 <_lv_style_get_int+0x6a>
        if(prop_id == id_to_find) {
  40a944:	429e      	cmp	r6, r3
  40a946:	d0c2      	beq.n	40a8ce <_lv_style_get_int+0x26>
    prop_id &= 0xF;
  40a948:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a94c:	2b08      	cmp	r3, #8
  40a94e:	d9eb      	bls.n	40a928 <_lv_style_get_int+0x80>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a950:	2b0b      	cmp	r3, #11
  40a952:	d903      	bls.n	40a95c <_lv_style_get_int+0xb4>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40a954:	2b0d      	cmp	r3, #13
  40a956:	d803      	bhi.n	40a960 <_lv_style_get_int+0xb8>
  40a958:	2303      	movs	r3, #3
  40a95a:	e7e6      	b.n	40a92a <_lv_style_get_int+0x82>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a95c:	2304      	movs	r3, #4
  40a95e:	e7e4      	b.n	40a92a <_lv_style_get_int+0x82>
    else size += sizeof(const void *);
  40a960:	2306      	movs	r3, #6
  40a962:	e7e2      	b.n	40a92a <_lv_style_get_int+0x82>
    if(style->map == NULL) return -1;
  40a964:	f04f 3eff 	mov.w	lr, #4294967295
  40a968:	e7d3      	b.n	40a912 <_lv_style_get_int+0x6a>
        *d8 = *s8;
  40a96a:	f81e 0b01 	ldrb.w	r0, [lr], #1
  40a96e:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40a972:	3b01      	subs	r3, #1
    while(len) {
  40a974:	2b00      	cmp	r3, #0
  40a976:	d1f8      	bne.n	40a96a <_lv_style_get_int+0xc2>
    prop_p[0] = style->map[idx];
  40a978:	682b      	ldr	r3, [r5, #0]
  40a97a:	5d1a      	ldrb	r2, [r3, r4]
  40a97c:	f88d 2006 	strb.w	r2, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a980:	4423      	add	r3, r4
  40a982:	785b      	ldrb	r3, [r3, #1]
  40a984:	f88d 3007 	strb.w	r3, [sp, #7]
    return prop;
  40a988:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        attr_goal = (prop >> 8) & 0xFF;
  40a98c:	0a08      	lsrs	r0, r1, #8
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
  40a98e:	ea00 2013 	and.w	r0, r0, r3, lsr #8
  40a992:	f000 007f 	and.w	r0, r0, #127	; 0x7f
}
  40a996:	b002      	add	sp, #8
  40a998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(style == NULL) return -1;
  40a99c:	f04f 30ff 	mov.w	r0, #4294967295
  40a9a0:	4770      	bx	lr
    if(style->map == NULL) return -1;
  40a9a2:	f04f 30ff 	mov.w	r0, #4294967295
  40a9a6:	e7f6      	b.n	40a996 <_lv_style_get_int+0xee>
        return -1;
  40a9a8:	f04f 30ff 	mov.w	r0, #4294967295
  40a9ac:	e7f3      	b.n	40a996 <_lv_style_get_int+0xee>

0040a9ae <_lv_style_get_opa>:
    if(style == NULL) return -1;
  40a9ae:	2800      	cmp	r0, #0
  40a9b0:	d076      	beq.n	40aaa0 <_lv_style_get_opa+0xf2>
{
  40a9b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a9b6:	b082      	sub	sp, #8
  40a9b8:	4692      	mov	sl, r2
  40a9ba:	4605      	mov	r5, r0
    if(style->map == NULL) return -1;
  40a9bc:	6803      	ldr	r3, [r0, #0]
  40a9be:	2b00      	cmp	r3, #0
  40a9c0:	d071      	beq.n	40aaa6 <_lv_style_get_opa+0xf8>
    if(style->map == NULL) return -1;
  40a9c2:	2b00      	cmp	r3, #0
  40a9c4:	d063      	beq.n	40aa8e <_lv_style_get_opa+0xe0>
    uint8_t id_to_find = prop & 0xFF;
  40a9c6:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  40a9c8:	0a0f      	lsrs	r7, r1, #8
    size_t i = 0;
  40a9ca:	2000      	movs	r0, #0
    int16_t id_guess = -1;
  40a9cc:	f04f 3eff 	mov.w	lr, #4294967295
    int16_t weight = -1;
  40a9d0:	46f4      	mov	ip, lr
  40a9d2:	e040      	b.n	40aa56 <_lv_style_get_opa+0xa8>
    prop_p[0] = style->map[idx];
  40a9d4:	682a      	ldr	r2, [r5, #0]
  40a9d6:	f812 9000 	ldrb.w	r9, [r2, r0]
  40a9da:	f88d 9006 	strb.w	r9, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a9de:	5d14      	ldrb	r4, [r2, r4]
  40a9e0:	f88d 4007 	strb.w	r4, [sp, #7]
    return prop;
  40a9e4:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  40a9e8:	ea4f 2818 	mov.w	r8, r8, lsr #8
  40a9ec:	fa5f f488 	uxtb.w	r4, r8
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40a9f0:	ea87 0904 	eor.w	r9, r7, r4
  40a9f4:	f019 0f7f 	tst.w	r9, #127	; 0x7f
  40a9f8:	d00d      	beq.n	40aa16 <_lv_style_get_opa+0x68>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40a9fa:	f004 047f 	and.w	r4, r4, #127	; 0x7f
  40a9fe:	f007 097f 	and.w	r9, r7, #127	; 0x7f
  40aa02:	ea34 0209 	bics.w	r2, r4, r9
  40aa06:	d134      	bne.n	40aa72 <_lv_style_get_opa+0xc4>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40aa08:	4564      	cmp	r4, ip
  40aa0a:	dd32      	ble.n	40aa72 <_lv_style_get_opa+0xc4>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40aa0c:	f008 0c7f 	and.w	ip, r8, #127	; 0x7f
                    id_guess = i;
  40aa10:	fa0f fe80 	sxth.w	lr, r0
  40aa14:	e02d      	b.n	40aa72 <_lv_style_get_opa+0xc4>
                return i;
  40aa16:	4686      	mov	lr, r0
    if(id < 0) {
  40aa18:	f1be 0f00 	cmp.w	lr, #0
  40aa1c:	db46      	blt.n	40aaac <_lv_style_get_opa+0xfe>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_opa_t));
  40aa1e:	6828      	ldr	r0, [r5, #0]
  40aa20:	4674      	mov	r4, lr
  40aa22:	f10e 0e02 	add.w	lr, lr, #2
  40aa26:	4486      	add	lr, r0
    uint8_t * d8 = (uint8_t *)dst;
  40aa28:	4652      	mov	r2, sl
  40aa2a:	2301      	movs	r3, #1
    while(len) {
  40aa2c:	bb93      	cbnz	r3, 40aa94 <_lv_style_get_opa+0xe6>
    prop_p[0] = style->map[idx];
  40aa2e:	682b      	ldr	r3, [r5, #0]
  40aa30:	5d1a      	ldrb	r2, [r3, r4]
  40aa32:	f88d 2006 	strb.w	r2, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40aa36:	4423      	add	r3, r4
  40aa38:	785b      	ldrb	r3, [r3, #1]
  40aa3a:	f88d 3007 	strb.w	r3, [sp, #7]
    return prop;
  40aa3e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        attr_goal = (prop >> 8) & 0xFF;
  40aa42:	0a08      	lsrs	r0, r1, #8
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
  40aa44:	ea00 2013 	and.w	r0, r0, r3, lsr #8
  40aa48:	f000 007f 	and.w	r0, r0, #127	; 0x7f
}
  40aa4c:	b002      	add	sp, #8
  40aa4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40aa52:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40aa54:	4418      	add	r0, r3
    prop_p[0] = style->map[idx];
  40aa56:	682b      	ldr	r3, [r5, #0]
  40aa58:	5c1c      	ldrb	r4, [r3, r0]
  40aa5a:	f88d 4006 	strb.w	r4, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40aa5e:	1c44      	adds	r4, r0, #1
  40aa60:	5d1b      	ldrb	r3, [r3, r4]
  40aa62:	f88d 3007 	strb.w	r3, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  40aa66:	f89d 3006 	ldrb.w	r3, [sp, #6]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40aa6a:	2bff      	cmp	r3, #255	; 0xff
  40aa6c:	d0d4      	beq.n	40aa18 <_lv_style_get_opa+0x6a>
        if(prop_id == id_to_find) {
  40aa6e:	429e      	cmp	r6, r3
  40aa70:	d0b0      	beq.n	40a9d4 <_lv_style_get_opa+0x26>
    prop_id &= 0xF;
  40aa72:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40aa76:	2b08      	cmp	r3, #8
  40aa78:	d9eb      	bls.n	40aa52 <_lv_style_get_opa+0xa4>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40aa7a:	2b0b      	cmp	r3, #11
  40aa7c:	d903      	bls.n	40aa86 <_lv_style_get_opa+0xd8>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40aa7e:	2b0d      	cmp	r3, #13
  40aa80:	d803      	bhi.n	40aa8a <_lv_style_get_opa+0xdc>
  40aa82:	2303      	movs	r3, #3
  40aa84:	e7e6      	b.n	40aa54 <_lv_style_get_opa+0xa6>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40aa86:	2304      	movs	r3, #4
  40aa88:	e7e4      	b.n	40aa54 <_lv_style_get_opa+0xa6>
    else size += sizeof(const void *);
  40aa8a:	2306      	movs	r3, #6
  40aa8c:	e7e2      	b.n	40aa54 <_lv_style_get_opa+0xa6>
    if(style->map == NULL) return -1;
  40aa8e:	f04f 3eff 	mov.w	lr, #4294967295
  40aa92:	e7c1      	b.n	40aa18 <_lv_style_get_opa+0x6a>
        *d8 = *s8;
  40aa94:	f81e 0b01 	ldrb.w	r0, [lr], #1
  40aa98:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40aa9c:	3b01      	subs	r3, #1
  40aa9e:	e7c5      	b.n	40aa2c <_lv_style_get_opa+0x7e>
    if(style == NULL) return -1;
  40aaa0:	f04f 30ff 	mov.w	r0, #4294967295
  40aaa4:	4770      	bx	lr
    if(style->map == NULL) return -1;
  40aaa6:	f04f 30ff 	mov.w	r0, #4294967295
  40aaaa:	e7cf      	b.n	40aa4c <_lv_style_get_opa+0x9e>
        return -1;
  40aaac:	f04f 30ff 	mov.w	r0, #4294967295
  40aab0:	e7cc      	b.n	40aa4c <_lv_style_get_opa+0x9e>

0040aab2 <_lv_style_get_color>:
    if(style == NULL) return -1;
  40aab2:	2800      	cmp	r0, #0
  40aab4:	d077      	beq.n	40aba6 <_lv_style_get_color+0xf4>
{
  40aab6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40aaba:	b082      	sub	sp, #8
  40aabc:	4692      	mov	sl, r2
  40aabe:	4605      	mov	r5, r0
    if(style->map == NULL) return -1;
  40aac0:	6803      	ldr	r3, [r0, #0]
  40aac2:	2b00      	cmp	r3, #0
  40aac4:	d072      	beq.n	40abac <_lv_style_get_color+0xfa>
    if(style->map == NULL) return -1;
  40aac6:	2b00      	cmp	r3, #0
  40aac8:	d051      	beq.n	40ab6e <_lv_style_get_color+0xbc>
    uint8_t id_to_find = prop & 0xFF;
  40aaca:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  40aacc:	0a0f      	lsrs	r7, r1, #8
    size_t i = 0;
  40aace:	2000      	movs	r0, #0
    int16_t id_guess = -1;
  40aad0:	f04f 3eff 	mov.w	lr, #4294967295
    int16_t weight = -1;
  40aad4:	46f4      	mov	ip, lr
  40aad6:	e02e      	b.n	40ab36 <_lv_style_get_color+0x84>
    prop_p[0] = style->map[idx];
  40aad8:	682a      	ldr	r2, [r5, #0]
  40aada:	f812 9000 	ldrb.w	r9, [r2, r0]
  40aade:	f88d 9006 	strb.w	r9, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40aae2:	5d14      	ldrb	r4, [r2, r4]
  40aae4:	f88d 4007 	strb.w	r4, [sp, #7]
    return prop;
  40aae8:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  40aaec:	ea4f 2818 	mov.w	r8, r8, lsr #8
  40aaf0:	fa5f f488 	uxtb.w	r4, r8
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40aaf4:	ea87 0904 	eor.w	r9, r7, r4
  40aaf8:	f019 0f7f 	tst.w	r9, #127	; 0x7f
  40aafc:	d00d      	beq.n	40ab1a <_lv_style_get_color+0x68>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40aafe:	f004 047f 	and.w	r4, r4, #127	; 0x7f
  40ab02:	f007 097f 	and.w	r9, r7, #127	; 0x7f
  40ab06:	ea34 0209 	bics.w	r2, r4, r9
  40ab0a:	d122      	bne.n	40ab52 <_lv_style_get_color+0xa0>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40ab0c:	4564      	cmp	r4, ip
  40ab0e:	dd20      	ble.n	40ab52 <_lv_style_get_color+0xa0>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40ab10:	f008 0c7f 	and.w	ip, r8, #127	; 0x7f
                    id_guess = i;
  40ab14:	fa0f fe80 	sxth.w	lr, r0
  40ab18:	e01b      	b.n	40ab52 <_lv_style_get_color+0xa0>
                return i;
  40ab1a:	4686      	mov	lr, r0
    if(id < 0) {
  40ab1c:	f1be 0f00 	cmp.w	lr, #0
  40ab20:	db47      	blt.n	40abb2 <_lv_style_get_color+0x100>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_color_t));
  40ab22:	682b      	ldr	r3, [r5, #0]
  40ab24:	4674      	mov	r4, lr
  40ab26:	f10e 0e02 	add.w	lr, lr, #2
  40ab2a:	449e      	add	lr, r3
    uint8_t * d8 = (uint8_t *)dst;
  40ab2c:	4652      	mov	r2, sl
  40ab2e:	2302      	movs	r3, #2
  40ab30:	e025      	b.n	40ab7e <_lv_style_get_color+0xcc>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40ab32:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40ab34:	4418      	add	r0, r3
    prop_p[0] = style->map[idx];
  40ab36:	682b      	ldr	r3, [r5, #0]
  40ab38:	5c1c      	ldrb	r4, [r3, r0]
  40ab3a:	f88d 4006 	strb.w	r4, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40ab3e:	1c44      	adds	r4, r0, #1
  40ab40:	5d1b      	ldrb	r3, [r3, r4]
  40ab42:	f88d 3007 	strb.w	r3, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  40ab46:	f89d 3006 	ldrb.w	r3, [sp, #6]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40ab4a:	2bff      	cmp	r3, #255	; 0xff
  40ab4c:	d0e6      	beq.n	40ab1c <_lv_style_get_color+0x6a>
        if(prop_id == id_to_find) {
  40ab4e:	429e      	cmp	r6, r3
  40ab50:	d0c2      	beq.n	40aad8 <_lv_style_get_color+0x26>
    prop_id &= 0xF;
  40ab52:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40ab56:	2b08      	cmp	r3, #8
  40ab58:	d9eb      	bls.n	40ab32 <_lv_style_get_color+0x80>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40ab5a:	2b0b      	cmp	r3, #11
  40ab5c:	d903      	bls.n	40ab66 <_lv_style_get_color+0xb4>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40ab5e:	2b0d      	cmp	r3, #13
  40ab60:	d803      	bhi.n	40ab6a <_lv_style_get_color+0xb8>
  40ab62:	2303      	movs	r3, #3
  40ab64:	e7e6      	b.n	40ab34 <_lv_style_get_color+0x82>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40ab66:	2304      	movs	r3, #4
  40ab68:	e7e4      	b.n	40ab34 <_lv_style_get_color+0x82>
    else size += sizeof(const void *);
  40ab6a:	2306      	movs	r3, #6
  40ab6c:	e7e2      	b.n	40ab34 <_lv_style_get_color+0x82>
    if(style->map == NULL) return -1;
  40ab6e:	f04f 3eff 	mov.w	lr, #4294967295
  40ab72:	e7d3      	b.n	40ab1c <_lv_style_get_color+0x6a>
        *d8 = *s8;
  40ab74:	f81e 0b01 	ldrb.w	r0, [lr], #1
  40ab78:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40ab7c:	3b01      	subs	r3, #1
    while(len) {
  40ab7e:	2b00      	cmp	r3, #0
  40ab80:	d1f8      	bne.n	40ab74 <_lv_style_get_color+0xc2>
    prop_p[0] = style->map[idx];
  40ab82:	682b      	ldr	r3, [r5, #0]
  40ab84:	5d1a      	ldrb	r2, [r3, r4]
  40ab86:	f88d 2006 	strb.w	r2, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40ab8a:	4423      	add	r3, r4
  40ab8c:	785b      	ldrb	r3, [r3, #1]
  40ab8e:	f88d 3007 	strb.w	r3, [sp, #7]
    return prop;
  40ab92:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        attr_goal = (prop >> 8) & 0xFF;
  40ab96:	0a08      	lsrs	r0, r1, #8
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
  40ab98:	ea00 2013 	and.w	r0, r0, r3, lsr #8
  40ab9c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
}
  40aba0:	b002      	add	sp, #8
  40aba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(style == NULL) return -1;
  40aba6:	f04f 30ff 	mov.w	r0, #4294967295
  40abaa:	4770      	bx	lr
    if(style->map == NULL) return -1;
  40abac:	f04f 30ff 	mov.w	r0, #4294967295
  40abb0:	e7f6      	b.n	40aba0 <_lv_style_get_color+0xee>
        return -1;
  40abb2:	f04f 30ff 	mov.w	r0, #4294967295
  40abb6:	e7f3      	b.n	40aba0 <_lv_style_get_color+0xee>

0040abb8 <_lv_style_get_ptr>:
    if(style == NULL) return -1;
  40abb8:	2800      	cmp	r0, #0
  40abba:	d077      	beq.n	40acac <_lv_style_get_ptr+0xf4>
{
  40abbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40abc0:	b082      	sub	sp, #8
  40abc2:	4692      	mov	sl, r2
  40abc4:	4605      	mov	r5, r0
    if(style->map == NULL) return -1;
  40abc6:	6803      	ldr	r3, [r0, #0]
  40abc8:	2b00      	cmp	r3, #0
  40abca:	d072      	beq.n	40acb2 <_lv_style_get_ptr+0xfa>
    if(style->map == NULL) return -1;
  40abcc:	2b00      	cmp	r3, #0
  40abce:	d051      	beq.n	40ac74 <_lv_style_get_ptr+0xbc>
    uint8_t id_to_find = prop & 0xFF;
  40abd0:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  40abd2:	0a0f      	lsrs	r7, r1, #8
    size_t i = 0;
  40abd4:	2000      	movs	r0, #0
    int16_t id_guess = -1;
  40abd6:	f04f 3eff 	mov.w	lr, #4294967295
    int16_t weight = -1;
  40abda:	46f4      	mov	ip, lr
  40abdc:	e02e      	b.n	40ac3c <_lv_style_get_ptr+0x84>
    prop_p[0] = style->map[idx];
  40abde:	682a      	ldr	r2, [r5, #0]
  40abe0:	f812 9000 	ldrb.w	r9, [r2, r0]
  40abe4:	f88d 9006 	strb.w	r9, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40abe8:	5d14      	ldrb	r4, [r2, r4]
  40abea:	f88d 4007 	strb.w	r4, [sp, #7]
    return prop;
  40abee:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  40abf2:	ea4f 2818 	mov.w	r8, r8, lsr #8
  40abf6:	fa5f f488 	uxtb.w	r4, r8
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40abfa:	ea87 0904 	eor.w	r9, r7, r4
  40abfe:	f019 0f7f 	tst.w	r9, #127	; 0x7f
  40ac02:	d00d      	beq.n	40ac20 <_lv_style_get_ptr+0x68>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40ac04:	f004 047f 	and.w	r4, r4, #127	; 0x7f
  40ac08:	f007 097f 	and.w	r9, r7, #127	; 0x7f
  40ac0c:	ea34 0209 	bics.w	r2, r4, r9
  40ac10:	d122      	bne.n	40ac58 <_lv_style_get_ptr+0xa0>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40ac12:	4564      	cmp	r4, ip
  40ac14:	dd20      	ble.n	40ac58 <_lv_style_get_ptr+0xa0>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40ac16:	f008 0c7f 	and.w	ip, r8, #127	; 0x7f
                    id_guess = i;
  40ac1a:	fa0f fe80 	sxth.w	lr, r0
  40ac1e:	e01b      	b.n	40ac58 <_lv_style_get_ptr+0xa0>
                return i;
  40ac20:	4686      	mov	lr, r0
    if(id < 0) {
  40ac22:	f1be 0f00 	cmp.w	lr, #0
  40ac26:	db47      	blt.n	40acb8 <_lv_style_get_ptr+0x100>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(const void *));
  40ac28:	682b      	ldr	r3, [r5, #0]
  40ac2a:	4676      	mov	r6, lr
  40ac2c:	f10e 0002 	add.w	r0, lr, #2
  40ac30:	4418      	add	r0, r3
    uint8_t * d8 = (uint8_t *)dst;
  40ac32:	4652      	mov	r2, sl
  40ac34:	2304      	movs	r3, #4
  40ac36:	e025      	b.n	40ac84 <_lv_style_get_ptr+0xcc>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40ac38:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40ac3a:	4418      	add	r0, r3
    prop_p[0] = style->map[idx];
  40ac3c:	682b      	ldr	r3, [r5, #0]
  40ac3e:	5c1c      	ldrb	r4, [r3, r0]
  40ac40:	f88d 4006 	strb.w	r4, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40ac44:	1c44      	adds	r4, r0, #1
  40ac46:	5d1b      	ldrb	r3, [r3, r4]
  40ac48:	f88d 3007 	strb.w	r3, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  40ac4c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40ac50:	2bff      	cmp	r3, #255	; 0xff
  40ac52:	d0e6      	beq.n	40ac22 <_lv_style_get_ptr+0x6a>
        if(prop_id == id_to_find) {
  40ac54:	429e      	cmp	r6, r3
  40ac56:	d0c2      	beq.n	40abde <_lv_style_get_ptr+0x26>
    prop_id &= 0xF;
  40ac58:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40ac5c:	2b08      	cmp	r3, #8
  40ac5e:	d9eb      	bls.n	40ac38 <_lv_style_get_ptr+0x80>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40ac60:	2b0b      	cmp	r3, #11
  40ac62:	d903      	bls.n	40ac6c <_lv_style_get_ptr+0xb4>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40ac64:	2b0d      	cmp	r3, #13
  40ac66:	d803      	bhi.n	40ac70 <_lv_style_get_ptr+0xb8>
  40ac68:	2303      	movs	r3, #3
  40ac6a:	e7e6      	b.n	40ac3a <_lv_style_get_ptr+0x82>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40ac6c:	2304      	movs	r3, #4
  40ac6e:	e7e4      	b.n	40ac3a <_lv_style_get_ptr+0x82>
    else size += sizeof(const void *);
  40ac70:	2306      	movs	r3, #6
  40ac72:	e7e2      	b.n	40ac3a <_lv_style_get_ptr+0x82>
    if(style->map == NULL) return -1;
  40ac74:	f04f 3eff 	mov.w	lr, #4294967295
  40ac78:	e7d3      	b.n	40ac22 <_lv_style_get_ptr+0x6a>
        *d8 = *s8;
  40ac7a:	f810 4b01 	ldrb.w	r4, [r0], #1
  40ac7e:	f802 4b01 	strb.w	r4, [r2], #1
        len--;
  40ac82:	3b01      	subs	r3, #1
    while(len) {
  40ac84:	2b00      	cmp	r3, #0
  40ac86:	d1f8      	bne.n	40ac7a <_lv_style_get_ptr+0xc2>
    prop_p[0] = style->map[idx];
  40ac88:	682b      	ldr	r3, [r5, #0]
  40ac8a:	5d9a      	ldrb	r2, [r3, r6]
  40ac8c:	f88d 2006 	strb.w	r2, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40ac90:	4433      	add	r3, r6
  40ac92:	785b      	ldrb	r3, [r3, #1]
  40ac94:	f88d 3007 	strb.w	r3, [sp, #7]
    return prop;
  40ac98:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        attr_goal = (prop >> 8) & 0xFF;
  40ac9c:	0a08      	lsrs	r0, r1, #8
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
  40ac9e:	ea00 2013 	and.w	r0, r0, r3, lsr #8
  40aca2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
}
  40aca6:	b002      	add	sp, #8
  40aca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(style == NULL) return -1;
  40acac:	f04f 30ff 	mov.w	r0, #4294967295
  40acb0:	4770      	bx	lr
    if(style->map == NULL) return -1;
  40acb2:	f04f 30ff 	mov.w	r0, #4294967295
  40acb6:	e7f6      	b.n	40aca6 <_lv_style_get_ptr+0xee>
        return -1;
  40acb8:	f04f 30ff 	mov.w	r0, #4294967295
  40acbc:	e7f3      	b.n	40aca6 <_lv_style_get_ptr+0xee>

0040acbe <lv_style_list_get_local_style>:
    if(!list->has_local) return NULL;
  40acbe:	7903      	ldrb	r3, [r0, #4]
  40acc0:	f013 0f40 	tst.w	r3, #64	; 0x40
  40acc4:	d008      	beq.n	40acd8 <lv_style_list_get_local_style+0x1a>
    if(list->has_trans) return list->style_list[1];
  40acc6:	f013 0f80 	tst.w	r3, #128	; 0x80
  40acca:	d102      	bne.n	40acd2 <lv_style_list_get_local_style+0x14>
    else return list->style_list[0];
  40accc:	6803      	ldr	r3, [r0, #0]
  40acce:	6818      	ldr	r0, [r3, #0]
  40acd0:	4770      	bx	lr
    if(list->has_trans) return list->style_list[1];
  40acd2:	6803      	ldr	r3, [r0, #0]
  40acd4:	6858      	ldr	r0, [r3, #4]
  40acd6:	4770      	bx	lr
    if(!list->has_local) return NULL;
  40acd8:	2000      	movs	r0, #0
}
  40acda:	4770      	bx	lr

0040acdc <_lv_style_list_get_transition_style>:
    if(!list->has_trans) return NULL;
  40acdc:	f990 3004 	ldrsb.w	r3, [r0, #4]
  40ace0:	2b00      	cmp	r3, #0
  40ace2:	da02      	bge.n	40acea <_lv_style_list_get_transition_style+0xe>
    return list->style_list[0];
  40ace4:	6803      	ldr	r3, [r0, #0]
  40ace6:	6818      	ldr	r0, [r3, #0]
  40ace8:	4770      	bx	lr
    if(!list->has_trans) return NULL;
  40acea:	2000      	movs	r0, #0
}
  40acec:	4770      	bx	lr
	...

0040acf0 <_lv_style_list_reset>:
    if(list == NULL) return;
  40acf0:	2800      	cmp	r0, #0
  40acf2:	d032      	beq.n	40ad5a <_lv_style_list_reset+0x6a>
{
  40acf4:	b538      	push	{r3, r4, r5, lr}
  40acf6:	4604      	mov	r4, r0
    if(list->has_local) {
  40acf8:	7903      	ldrb	r3, [r0, #4]
  40acfa:	f013 0f40 	tst.w	r3, #64	; 0x40
  40acfe:	d008      	beq.n	40ad12 <_lv_style_list_reset+0x22>
        lv_style_t * local = lv_style_list_get_local_style(list);
  40ad00:	4b16      	ldr	r3, [pc, #88]	; (40ad5c <_lv_style_list_reset+0x6c>)
  40ad02:	4798      	blx	r3
        if(local) {
  40ad04:	4605      	mov	r5, r0
  40ad06:	b120      	cbz	r0, 40ad12 <_lv_style_list_reset+0x22>
            lv_style_reset(local);
  40ad08:	4b15      	ldr	r3, [pc, #84]	; (40ad60 <_lv_style_list_reset+0x70>)
  40ad0a:	4798      	blx	r3
            lv_mem_free(local);
  40ad0c:	4628      	mov	r0, r5
  40ad0e:	4b15      	ldr	r3, [pc, #84]	; (40ad64 <_lv_style_list_reset+0x74>)
  40ad10:	4798      	blx	r3
    if(list->has_trans) {
  40ad12:	f994 3004 	ldrsb.w	r3, [r4, #4]
  40ad16:	2b00      	cmp	r3, #0
  40ad18:	db13      	blt.n	40ad42 <_lv_style_list_reset+0x52>
    if(list->style_cnt > 0) lv_mem_free(list->style_list);
  40ad1a:	7923      	ldrb	r3, [r4, #4]
  40ad1c:	f013 0f3f 	tst.w	r3, #63	; 0x3f
  40ad20:	d002      	beq.n	40ad28 <_lv_style_list_reset+0x38>
  40ad22:	6820      	ldr	r0, [r4, #0]
  40ad24:	4b0f      	ldr	r3, [pc, #60]	; (40ad64 <_lv_style_list_reset+0x74>)
  40ad26:	4798      	blx	r3
    list->style_list = NULL;
  40ad28:	2200      	movs	r2, #0
  40ad2a:	6022      	str	r2, [r4, #0]
    list->style_cnt = 0;
  40ad2c:	7923      	ldrb	r3, [r4, #4]
    list->has_trans = 0;
  40ad2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40ad32:	f362 13c7 	bfi	r3, r2, #7, #1
  40ad36:	7123      	strb	r3, [r4, #4]
    list->skip_trans = 0;
  40ad38:	7963      	ldrb	r3, [r4, #5]
  40ad3a:	f362 0300 	bfi	r3, r2, #0, #1
  40ad3e:	7163      	strb	r3, [r4, #5]
  40ad40:	bd38      	pop	{r3, r4, r5, pc}
        lv_style_t * trans = _lv_style_list_get_transition_style(list);
  40ad42:	4620      	mov	r0, r4
  40ad44:	4b08      	ldr	r3, [pc, #32]	; (40ad68 <_lv_style_list_reset+0x78>)
  40ad46:	4798      	blx	r3
        if(trans) {
  40ad48:	4605      	mov	r5, r0
  40ad4a:	2800      	cmp	r0, #0
  40ad4c:	d0e5      	beq.n	40ad1a <_lv_style_list_reset+0x2a>
            lv_style_reset(trans);
  40ad4e:	4b04      	ldr	r3, [pc, #16]	; (40ad60 <_lv_style_list_reset+0x70>)
  40ad50:	4798      	blx	r3
            lv_mem_free(trans);
  40ad52:	4628      	mov	r0, r5
  40ad54:	4b03      	ldr	r3, [pc, #12]	; (40ad64 <_lv_style_list_reset+0x74>)
  40ad56:	4798      	blx	r3
  40ad58:	e7df      	b.n	40ad1a <_lv_style_list_reset+0x2a>
  40ad5a:	4770      	bx	lr
  40ad5c:	0040acbf 	.word	0x0040acbf
  40ad60:	0040a0a5 	.word	0x0040a0a5
  40ad64:	0041679d 	.word	0x0041679d
  40ad68:	0040acdd 	.word	0x0040acdd

0040ad6c <lv_style_list_copy>:
{
  40ad6c:	b570      	push	{r4, r5, r6, lr}
  40ad6e:	4605      	mov	r5, r0
  40ad70:	460c      	mov	r4, r1
    _lv_style_list_reset(list_dest);
  40ad72:	4b3d      	ldr	r3, [pc, #244]	; (40ae68 <lv_style_list_copy+0xfc>)
  40ad74:	4798      	blx	r3
    if(list_src->style_list == NULL) return;
  40ad76:	6823      	ldr	r3, [r4, #0]
  40ad78:	2b00      	cmp	r3, #0
  40ad7a:	d059      	beq.n	40ae30 <lv_style_list_copy+0xc4>
    if(list_src->has_local == 0) {
  40ad7c:	7923      	ldrb	r3, [r4, #4]
  40ad7e:	f013 0f40 	tst.w	r3, #64	; 0x40
  40ad82:	d12f      	bne.n	40ade4 <lv_style_list_copy+0x78>
        if(list_src->has_trans) {
  40ad84:	f013 0f80 	tst.w	r3, #128	; 0x80
  40ad88:	d113      	bne.n	40adb2 <lv_style_list_copy+0x46>
            list_dest->style_list = lv_mem_alloc(list_src->style_cnt * sizeof(lv_style_t *));
  40ad8a:	7920      	ldrb	r0, [r4, #4]
  40ad8c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  40ad90:	0080      	lsls	r0, r0, #2
  40ad92:	4b36      	ldr	r3, [pc, #216]	; (40ae6c <lv_style_list_copy+0x100>)
  40ad94:	4798      	blx	r3
  40ad96:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list, list_src->style_cnt * sizeof(lv_style_t *));
  40ad98:	7922      	ldrb	r2, [r4, #4]
  40ad9a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  40ad9e:	0092      	lsls	r2, r2, #2
  40ada0:	6821      	ldr	r1, [r4, #0]
  40ada2:	4b33      	ldr	r3, [pc, #204]	; (40ae70 <lv_style_list_copy+0x104>)
  40ada4:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt;
  40ada6:	7922      	ldrb	r2, [r4, #4]
  40ada8:	792b      	ldrb	r3, [r5, #4]
  40adaa:	f362 0305 	bfi	r3, r2, #0, #6
  40adae:	712b      	strb	r3, [r5, #4]
  40adb0:	bd70      	pop	{r4, r5, r6, pc}
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
  40adb2:	f003 003f 	and.w	r0, r3, #63	; 0x3f
  40adb6:	3801      	subs	r0, #1
  40adb8:	0080      	lsls	r0, r0, #2
  40adba:	4b2c      	ldr	r3, [pc, #176]	; (40ae6c <lv_style_list_copy+0x100>)
  40adbc:	4798      	blx	r3
  40adbe:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
  40adc0:	6821      	ldr	r1, [r4, #0]
  40adc2:	7922      	ldrb	r2, [r4, #4]
  40adc4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  40adc8:	3a01      	subs	r2, #1
  40adca:	0092      	lsls	r2, r2, #2
  40adcc:	3104      	adds	r1, #4
  40adce:	4b28      	ldr	r3, [pc, #160]	; (40ae70 <lv_style_list_copy+0x104>)
  40add0:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt - 1;
  40add2:	7923      	ldrb	r3, [r4, #4]
  40add4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40add8:	3b01      	subs	r3, #1
  40adda:	792a      	ldrb	r2, [r5, #4]
  40addc:	f363 0205 	bfi	r2, r3, #0, #6
  40ade0:	712a      	strb	r2, [r5, #4]
  40ade2:	bd70      	pop	{r4, r5, r6, pc}
        if(list_src->has_trans) {
  40ade4:	f013 0f80 	tst.w	r3, #128	; 0x80
  40ade8:	d123      	bne.n	40ae32 <lv_style_list_copy+0xc6>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
  40adea:	7920      	ldrb	r0, [r4, #4]
  40adec:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  40adf0:	3801      	subs	r0, #1
  40adf2:	0080      	lsls	r0, r0, #2
  40adf4:	4b1d      	ldr	r3, [pc, #116]	; (40ae6c <lv_style_list_copy+0x100>)
  40adf6:	4798      	blx	r3
  40adf8:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
  40adfa:	6821      	ldr	r1, [r4, #0]
  40adfc:	7922      	ldrb	r2, [r4, #4]
  40adfe:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  40ae02:	3a01      	subs	r2, #1
  40ae04:	0092      	lsls	r2, r2, #2
  40ae06:	3104      	adds	r1, #4
  40ae08:	4b19      	ldr	r3, [pc, #100]	; (40ae70 <lv_style_list_copy+0x104>)
  40ae0a:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt - 1;
  40ae0c:	7923      	ldrb	r3, [r4, #4]
  40ae0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40ae12:	3b01      	subs	r3, #1
  40ae14:	792a      	ldrb	r2, [r5, #4]
  40ae16:	f363 0205 	bfi	r2, r3, #0, #6
  40ae1a:	712a      	strb	r2, [r5, #4]
        lv_style_t * local_style = get_alloc_local_style(list_dest);
  40ae1c:	4628      	mov	r0, r5
  40ae1e:	4d15      	ldr	r5, [pc, #84]	; (40ae74 <lv_style_list_copy+0x108>)
  40ae20:	47a8      	blx	r5
  40ae22:	4606      	mov	r6, r0
        lv_style_copy(local_style, get_alloc_local_style((lv_style_list_t *)list_src));
  40ae24:	4620      	mov	r0, r4
  40ae26:	47a8      	blx	r5
  40ae28:	4601      	mov	r1, r0
  40ae2a:	4630      	mov	r0, r6
  40ae2c:	4b12      	ldr	r3, [pc, #72]	; (40ae78 <lv_style_list_copy+0x10c>)
  40ae2e:	4798      	blx	r3
  40ae30:	bd70      	pop	{r4, r5, r6, pc}
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 2) * sizeof(lv_style_t *));
  40ae32:	7920      	ldrb	r0, [r4, #4]
  40ae34:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  40ae38:	3802      	subs	r0, #2
  40ae3a:	0080      	lsls	r0, r0, #2
  40ae3c:	4b0b      	ldr	r3, [pc, #44]	; (40ae6c <lv_style_list_copy+0x100>)
  40ae3e:	4798      	blx	r3
  40ae40:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 2, (list_src->style_cnt - 2) * sizeof(lv_style_t *));
  40ae42:	6821      	ldr	r1, [r4, #0]
  40ae44:	7922      	ldrb	r2, [r4, #4]
  40ae46:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  40ae4a:	3a02      	subs	r2, #2
  40ae4c:	0092      	lsls	r2, r2, #2
  40ae4e:	3108      	adds	r1, #8
  40ae50:	4b07      	ldr	r3, [pc, #28]	; (40ae70 <lv_style_list_copy+0x104>)
  40ae52:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt - 2;
  40ae54:	7923      	ldrb	r3, [r4, #4]
  40ae56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40ae5a:	3b02      	subs	r3, #2
  40ae5c:	792a      	ldrb	r2, [r5, #4]
  40ae5e:	f363 0205 	bfi	r2, r3, #0, #6
  40ae62:	712a      	strb	r2, [r5, #4]
  40ae64:	e7da      	b.n	40ae1c <lv_style_list_copy+0xb0>
  40ae66:	bf00      	nop
  40ae68:	0040acf1 	.word	0x0040acf1
  40ae6c:	004166d9 	.word	0x004166d9
  40ae70:	004168e9 	.word	0x004168e9
  40ae74:	0040a015 	.word	0x0040a015
  40ae78:	0040a105 	.word	0x0040a105

0040ae7c <_lv_style_list_add_trans_style>:
{
  40ae7c:	b538      	push	{r3, r4, r5, lr}
  40ae7e:	4604      	mov	r4, r0
    if(list->has_trans) return _lv_style_list_get_transition_style(list);
  40ae80:	f990 3004 	ldrsb.w	r3, [r0, #4]
  40ae84:	2b00      	cmp	r3, #0
  40ae86:	db1c      	blt.n	40aec2 <_lv_style_list_add_trans_style+0x46>
    lv_style_t * trans_style = lv_mem_alloc(sizeof(lv_style_t));
  40ae88:	2004      	movs	r0, #4
  40ae8a:	4b13      	ldr	r3, [pc, #76]	; (40aed8 <_lv_style_list_add_trans_style+0x5c>)
  40ae8c:	4798      	blx	r3
  40ae8e:	4605      	mov	r5, r0
    LV_ASSERT_MEM(trans_style);
  40ae90:	4b12      	ldr	r3, [pc, #72]	; (40aedc <_lv_style_list_add_trans_style+0x60>)
  40ae92:	4798      	blx	r3
  40ae94:	b1d0      	cbz	r0, 40aecc <_lv_style_list_add_trans_style+0x50>
    if(trans_style == NULL) {
  40ae96:	b1bd      	cbz	r5, 40aec8 <_lv_style_list_add_trans_style+0x4c>
    lv_style_init(trans_style);
  40ae98:	4628      	mov	r0, r5
  40ae9a:	4b11      	ldr	r3, [pc, #68]	; (40aee0 <_lv_style_list_add_trans_style+0x64>)
  40ae9c:	4798      	blx	r3
    _lv_style_list_add_style(list, trans_style);
  40ae9e:	4629      	mov	r1, r5
  40aea0:	4620      	mov	r0, r4
  40aea2:	4b10      	ldr	r3, [pc, #64]	; (40aee4 <_lv_style_list_add_trans_style+0x68>)
  40aea4:	4798      	blx	r3
    list->has_trans = 1;
  40aea6:	7923      	ldrb	r3, [r4, #4]
  40aea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40aeac:	7123      	strb	r3, [r4, #4]
    if(list->has_local) {
  40aeae:	f013 0f40 	tst.w	r3, #64	; 0x40
  40aeb2:	d009      	beq.n	40aec8 <_lv_style_list_add_trans_style+0x4c>
        lv_style_t * tmp = list->style_list[0];
  40aeb4:	6823      	ldr	r3, [r4, #0]
  40aeb6:	681a      	ldr	r2, [r3, #0]
        list->style_list[0] = list->style_list[1];
  40aeb8:	6859      	ldr	r1, [r3, #4]
  40aeba:	6019      	str	r1, [r3, #0]
        list->style_list[1] = tmp;
  40aebc:	6823      	ldr	r3, [r4, #0]
  40aebe:	605a      	str	r2, [r3, #4]
  40aec0:	e002      	b.n	40aec8 <_lv_style_list_add_trans_style+0x4c>
    if(list->has_trans) return _lv_style_list_get_transition_style(list);
  40aec2:	4b09      	ldr	r3, [pc, #36]	; (40aee8 <_lv_style_list_add_trans_style+0x6c>)
  40aec4:	4798      	blx	r3
  40aec6:	4605      	mov	r5, r0
}
  40aec8:	4628      	mov	r0, r5
  40aeca:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_MEM(trans_style);
  40aecc:	462a      	mov	r2, r5
  40aece:	2300      	movs	r3, #0
  40aed0:	4806      	ldr	r0, [pc, #24]	; (40aeec <_lv_style_list_add_trans_style+0x70>)
  40aed2:	4907      	ldr	r1, [pc, #28]	; (40aef0 <_lv_style_list_add_trans_style+0x74>)
  40aed4:	4788      	blx	r1
  40aed6:	e7fe      	b.n	40aed6 <_lv_style_list_add_trans_style+0x5a>
  40aed8:	004166d9 	.word	0x004166d9
  40aedc:	00415f95 	.word	0x00415f95
  40aee0:	00409e81 	.word	0x00409e81
  40aee4:	00409f65 	.word	0x00409f65
  40aee8:	0040acdd 	.word	0x0040acdd
  40aeec:	0042c714 	.word	0x0042c714
  40aef0:	00415fa1 	.word	0x00415fa1

0040aef4 <_lv_style_list_set_local_int>:
{
  40aef4:	b538      	push	{r3, r4, r5, lr}
  40aef6:	460c      	mov	r4, r1
  40aef8:	4615      	mov	r5, r2
    lv_style_t * local = get_alloc_local_style(list);
  40aefa:	4b03      	ldr	r3, [pc, #12]	; (40af08 <_lv_style_list_set_local_int+0x14>)
  40aefc:	4798      	blx	r3
    _lv_style_set_int(local, prop, value);
  40aefe:	462a      	mov	r2, r5
  40af00:	4621      	mov	r1, r4
  40af02:	4b02      	ldr	r3, [pc, #8]	; (40af0c <_lv_style_list_set_local_int+0x18>)
  40af04:	4798      	blx	r3
  40af06:	bd38      	pop	{r3, r4, r5, pc}
  40af08:	0040a015 	.word	0x0040a015
  40af0c:	0040a269 	.word	0x0040a269

0040af10 <_lv_style_list_set_local_opa>:
{
  40af10:	b538      	push	{r3, r4, r5, lr}
  40af12:	460c      	mov	r4, r1
  40af14:	4615      	mov	r5, r2
    lv_style_t * local = get_alloc_local_style(list);
  40af16:	4b03      	ldr	r3, [pc, #12]	; (40af24 <_lv_style_list_set_local_opa+0x14>)
  40af18:	4798      	blx	r3
    _lv_style_set_opa(local, prop, value);
  40af1a:	462a      	mov	r2, r5
  40af1c:	4621      	mov	r1, r4
  40af1e:	4b02      	ldr	r3, [pc, #8]	; (40af28 <_lv_style_list_set_local_opa+0x18>)
  40af20:	4798      	blx	r3
  40af22:	bd38      	pop	{r3, r4, r5, pc}
  40af24:	0040a015 	.word	0x0040a015
  40af28:	0040a589 	.word	0x0040a589

0040af2c <_lv_style_list_set_local_color>:
{
  40af2c:	b538      	push	{r3, r4, r5, lr}
  40af2e:	460c      	mov	r4, r1
  40af30:	4615      	mov	r5, r2
    lv_style_t * local = get_alloc_local_style(list);
  40af32:	4b03      	ldr	r3, [pc, #12]	; (40af40 <_lv_style_list_set_local_color+0x14>)
  40af34:	4798      	blx	r3
    _lv_style_set_color(local, prop, value);
  40af36:	462a      	mov	r2, r5
  40af38:	4621      	mov	r1, r4
  40af3a:	4b02      	ldr	r3, [pc, #8]	; (40af44 <_lv_style_list_set_local_color+0x18>)
  40af3c:	4798      	blx	r3
  40af3e:	bd38      	pop	{r3, r4, r5, pc}
  40af40:	0040a015 	.word	0x0040a015
  40af44:	0040a3f9 	.word	0x0040a3f9

0040af48 <_lv_style_list_set_local_ptr>:
{
  40af48:	b538      	push	{r3, r4, r5, lr}
  40af4a:	460c      	mov	r4, r1
  40af4c:	4615      	mov	r5, r2
    lv_style_t * local = get_alloc_local_style(list);
  40af4e:	4b03      	ldr	r3, [pc, #12]	; (40af5c <_lv_style_list_set_local_ptr+0x14>)
  40af50:	4798      	blx	r3
    _lv_style_set_ptr(local, prop, value);
  40af52:	462a      	mov	r2, r5
  40af54:	4621      	mov	r1, r4
  40af56:	4b02      	ldr	r3, [pc, #8]	; (40af60 <_lv_style_list_set_local_ptr+0x18>)
  40af58:	4798      	blx	r3
  40af5a:	bd38      	pop	{r3, r4, r5, pc}
  40af5c:	0040a015 	.word	0x0040a015
  40af60:	0040a719 	.word	0x0040a719

0040af64 <_lv_style_list_get_int>:
    if(list == NULL) return LV_RES_INV;
  40af64:	2800      	cmp	r0, #0
  40af66:	d05e      	beq.n	40b026 <_lv_style_list_get_int+0xc2>
{
  40af68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40af6c:	b083      	sub	sp, #12
  40af6e:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
  40af70:	6803      	ldr	r3, [r0, #0]
  40af72:	2b00      	cmp	r3, #0
  40af74:	d059      	beq.n	40b02a <_lv_style_list_get_int+0xc6>
  40af76:	4691      	mov	r9, r2
  40af78:	460f      	mov	r7, r1
    int16_t weight_goal = attr;
  40af7a:	ea4f 2811 	mov.w	r8, r1, lsr #8
    lv_style_int_t value_act = 0;
  40af7e:	2400      	movs	r4, #0
  40af80:	f8ad 4006 	strh.w	r4, [sp, #6]
    int16_t weight = -1;
  40af84:	f04f 36ff 	mov.w	r6, #4294967295
    for(ci = 0; ci < list->style_cnt; ci++) {
  40af88:	e017      	b.n	40afba <_lv_style_list_get_int+0x56>
    if(list->has_trans && list->skip_trans) id++;
  40af8a:	3101      	adds	r1, #1
  40af8c:	b2c9      	uxtb	r1, r1
  40af8e:	e020      	b.n	40afd2 <_lv_style_list_get_int+0x6e>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40af90:	2000      	movs	r0, #0
        int16_t weight_act = _lv_style_get_int(_class, prop, &value_act);
  40af92:	f10d 0206 	add.w	r2, sp, #6
  40af96:	4639      	mov	r1, r7
  40af98:	4b26      	ldr	r3, [pc, #152]	; (40b034 <_lv_style_list_get_int+0xd0>)
  40af9a:	4798      	blx	r3
        if(weight_act == weight_goal) {
  40af9c:	4580      	cmp	r8, r0
  40af9e:	d024      	beq.n	40afea <_lv_style_list_get_int+0x86>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40afa0:	f995 3004 	ldrsb.w	r3, [r5, #4]
  40afa4:	2b00      	cmp	r3, #0
  40afa6:	db28      	blt.n	40affa <_lv_style_list_get_int+0x96>
        else if(weight_act > weight) {
  40afa8:	4286      	cmp	r6, r0
  40afaa:	da04      	bge.n	40afb6 <_lv_style_list_get_int+0x52>
            *res = value_act;
  40afac:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
  40afb0:	f8a9 3000 	strh.w	r3, [r9]
            weight =  weight_act;
  40afb4:	4606      	mov	r6, r0
    for(ci = 0; ci < list->style_cnt; ci++) {
  40afb6:	3401      	adds	r4, #1
  40afb8:	b224      	sxth	r4, r4
  40afba:	792b      	ldrb	r3, [r5, #4]
  40afbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40afc0:	429c      	cmp	r4, r3
  40afc2:	da2c      	bge.n	40b01e <_lv_style_list_get_int+0xba>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
  40afc4:	b2e1      	uxtb	r1, r4
    if(list->has_trans && list->skip_trans) id++;
  40afc6:	88aa      	ldrh	r2, [r5, #4]
  40afc8:	f402 72c0 	and.w	r2, r2, #384	; 0x180
  40afcc:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
  40afd0:	d0db      	beq.n	40af8a <_lv_style_list_get_int+0x26>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40afd2:	792a      	ldrb	r2, [r5, #4]
  40afd4:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  40afd8:	d0da      	beq.n	40af90 <_lv_style_list_get_int+0x2c>
  40afda:	428b      	cmp	r3, r1
  40afdc:	dd03      	ble.n	40afe6 <_lv_style_list_get_int+0x82>
    return list->style_list[id];
  40afde:	682b      	ldr	r3, [r5, #0]
  40afe0:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  40afe4:	e7d5      	b.n	40af92 <_lv_style_list_get_int+0x2e>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40afe6:	2000      	movs	r0, #0
  40afe8:	e7d3      	b.n	40af92 <_lv_style_list_get_int+0x2e>
            *res = value_act;
  40afea:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
  40afee:	f8a9 3000 	strh.w	r3, [r9]
            return LV_RES_OK;
  40aff2:	2001      	movs	r0, #1
}
  40aff4:	b003      	add	sp, #12
  40aff6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40affa:	fab4 f384 	clz	r3, r4
  40affe:	095b      	lsrs	r3, r3, #5
  40b000:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  40b004:	d1d0      	bne.n	40afa8 <_lv_style_list_get_int+0x44>
  40b006:	2b00      	cmp	r3, #0
  40b008:	d0ce      	beq.n	40afa8 <_lv_style_list_get_int+0x44>
  40b00a:	796b      	ldrb	r3, [r5, #5]
  40b00c:	f013 0f01 	tst.w	r3, #1
  40b010:	d1ca      	bne.n	40afa8 <_lv_style_list_get_int+0x44>
            *res = value_act;
  40b012:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
  40b016:	f8a9 3000 	strh.w	r3, [r9]
            return LV_RES_OK;
  40b01a:	2001      	movs	r0, #1
  40b01c:	e7ea      	b.n	40aff4 <_lv_style_list_get_int+0x90>
    if(weight >= 0) return LV_RES_OK;
  40b01e:	2e00      	cmp	r6, #0
  40b020:	db05      	blt.n	40b02e <_lv_style_list_get_int+0xca>
  40b022:	2001      	movs	r0, #1
  40b024:	e7e6      	b.n	40aff4 <_lv_style_list_get_int+0x90>
    if(list == NULL) return LV_RES_INV;
  40b026:	2000      	movs	r0, #0
  40b028:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
  40b02a:	2000      	movs	r0, #0
  40b02c:	e7e2      	b.n	40aff4 <_lv_style_list_get_int+0x90>
    else return LV_RES_INV;
  40b02e:	2000      	movs	r0, #0
  40b030:	e7e0      	b.n	40aff4 <_lv_style_list_get_int+0x90>
  40b032:	bf00      	nop
  40b034:	0040a8a9 	.word	0x0040a8a9

0040b038 <_lv_style_list_get_color>:
    if(list == NULL) return LV_RES_INV;
  40b038:	2800      	cmp	r0, #0
  40b03a:	d05d      	beq.n	40b0f8 <_lv_style_list_get_color+0xc0>
{
  40b03c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40b040:	b083      	sub	sp, #12
  40b042:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
  40b044:	6803      	ldr	r3, [r0, #0]
  40b046:	2b00      	cmp	r3, #0
  40b048:	d058      	beq.n	40b0fc <_lv_style_list_get_color+0xc4>
  40b04a:	4691      	mov	r9, r2
  40b04c:	460f      	mov	r7, r1
    int16_t weight_goal = attr;
  40b04e:	ea4f 2811 	mov.w	r8, r1, lsr #8
    value_act.full = 0;
  40b052:	2400      	movs	r4, #0
  40b054:	f8ad 4004 	strh.w	r4, [sp, #4]
    int16_t weight = -1;
  40b058:	f04f 36ff 	mov.w	r6, #4294967295
    for(ci = 0; ci < list->style_cnt; ci++) {
  40b05c:	e016      	b.n	40b08c <_lv_style_list_get_color+0x54>
    if(list->has_trans && list->skip_trans) id++;
  40b05e:	3101      	adds	r1, #1
  40b060:	b2c9      	uxtb	r1, r1
  40b062:	e01f      	b.n	40b0a4 <_lv_style_list_get_color+0x6c>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40b064:	2000      	movs	r0, #0
        int16_t weight_act = _lv_style_get_color(_class, prop, &value_act);
  40b066:	aa01      	add	r2, sp, #4
  40b068:	4639      	mov	r1, r7
  40b06a:	4b26      	ldr	r3, [pc, #152]	; (40b104 <_lv_style_list_get_color+0xcc>)
  40b06c:	4798      	blx	r3
        if(weight_act == weight_goal) {
  40b06e:	4580      	cmp	r8, r0
  40b070:	d024      	beq.n	40b0bc <_lv_style_list_get_color+0x84>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40b072:	f995 3004 	ldrsb.w	r3, [r5, #4]
  40b076:	2b00      	cmp	r3, #0
  40b078:	db28      	blt.n	40b0cc <_lv_style_list_get_color+0x94>
        else if(weight_act > weight) {
  40b07a:	4286      	cmp	r6, r0
  40b07c:	da04      	bge.n	40b088 <_lv_style_list_get_color+0x50>
            *res = value_act;
  40b07e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  40b082:	f8a9 3000 	strh.w	r3, [r9]
            weight =  weight_act;
  40b086:	4606      	mov	r6, r0
    for(ci = 0; ci < list->style_cnt; ci++) {
  40b088:	3401      	adds	r4, #1
  40b08a:	b224      	sxth	r4, r4
  40b08c:	792b      	ldrb	r3, [r5, #4]
  40b08e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40b092:	429c      	cmp	r4, r3
  40b094:	da2c      	bge.n	40b0f0 <_lv_style_list_get_color+0xb8>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
  40b096:	b2e1      	uxtb	r1, r4
    if(list->has_trans && list->skip_trans) id++;
  40b098:	88aa      	ldrh	r2, [r5, #4]
  40b09a:	f402 72c0 	and.w	r2, r2, #384	; 0x180
  40b09e:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
  40b0a2:	d0dc      	beq.n	40b05e <_lv_style_list_get_color+0x26>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40b0a4:	792a      	ldrb	r2, [r5, #4]
  40b0a6:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  40b0aa:	d0db      	beq.n	40b064 <_lv_style_list_get_color+0x2c>
  40b0ac:	428b      	cmp	r3, r1
  40b0ae:	dd03      	ble.n	40b0b8 <_lv_style_list_get_color+0x80>
    return list->style_list[id];
  40b0b0:	682b      	ldr	r3, [r5, #0]
  40b0b2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  40b0b6:	e7d6      	b.n	40b066 <_lv_style_list_get_color+0x2e>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40b0b8:	2000      	movs	r0, #0
  40b0ba:	e7d4      	b.n	40b066 <_lv_style_list_get_color+0x2e>
            *res = value_act;
  40b0bc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  40b0c0:	f8a9 3000 	strh.w	r3, [r9]
            return LV_RES_OK;
  40b0c4:	2001      	movs	r0, #1
}
  40b0c6:	b003      	add	sp, #12
  40b0c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40b0cc:	fab4 f384 	clz	r3, r4
  40b0d0:	095b      	lsrs	r3, r3, #5
  40b0d2:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  40b0d6:	d1d0      	bne.n	40b07a <_lv_style_list_get_color+0x42>
  40b0d8:	2b00      	cmp	r3, #0
  40b0da:	d0ce      	beq.n	40b07a <_lv_style_list_get_color+0x42>
  40b0dc:	796b      	ldrb	r3, [r5, #5]
  40b0de:	f013 0f01 	tst.w	r3, #1
  40b0e2:	d1ca      	bne.n	40b07a <_lv_style_list_get_color+0x42>
            *res = value_act;
  40b0e4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  40b0e8:	f8a9 3000 	strh.w	r3, [r9]
            return LV_RES_OK;
  40b0ec:	2001      	movs	r0, #1
  40b0ee:	e7ea      	b.n	40b0c6 <_lv_style_list_get_color+0x8e>
    if(weight >= 0)  return LV_RES_OK;
  40b0f0:	2e00      	cmp	r6, #0
  40b0f2:	db05      	blt.n	40b100 <_lv_style_list_get_color+0xc8>
  40b0f4:	2001      	movs	r0, #1
  40b0f6:	e7e6      	b.n	40b0c6 <_lv_style_list_get_color+0x8e>
    if(list == NULL) return LV_RES_INV;
  40b0f8:	2000      	movs	r0, #0
  40b0fa:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
  40b0fc:	2000      	movs	r0, #0
  40b0fe:	e7e2      	b.n	40b0c6 <_lv_style_list_get_color+0x8e>
    else return LV_RES_INV;
  40b100:	2000      	movs	r0, #0
  40b102:	e7e0      	b.n	40b0c6 <_lv_style_list_get_color+0x8e>
  40b104:	0040aab3 	.word	0x0040aab3

0040b108 <_lv_style_list_get_opa>:
    if(list == NULL) return LV_RES_INV;
  40b108:	2800      	cmp	r0, #0
  40b10a:	d05e      	beq.n	40b1ca <_lv_style_list_get_opa+0xc2>
{
  40b10c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40b110:	b083      	sub	sp, #12
  40b112:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
  40b114:	6803      	ldr	r3, [r0, #0]
  40b116:	2b00      	cmp	r3, #0
  40b118:	d059      	beq.n	40b1ce <_lv_style_list_get_opa+0xc6>
  40b11a:	4691      	mov	r9, r2
  40b11c:	460f      	mov	r7, r1
    int16_t weight_goal = attr;
  40b11e:	ea4f 2811 	mov.w	r8, r1, lsr #8
    lv_opa_t value_act = LV_OPA_TRANSP;
  40b122:	2400      	movs	r4, #0
  40b124:	f88d 4007 	strb.w	r4, [sp, #7]
    int16_t weight = -1;
  40b128:	f04f 36ff 	mov.w	r6, #4294967295
    for(ci = 0; ci < list->style_cnt; ci++) {
  40b12c:	e017      	b.n	40b15e <_lv_style_list_get_opa+0x56>
    if(list->has_trans && list->skip_trans) id++;
  40b12e:	3101      	adds	r1, #1
  40b130:	b2c9      	uxtb	r1, r1
  40b132:	e020      	b.n	40b176 <_lv_style_list_get_opa+0x6e>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40b134:	2000      	movs	r0, #0
        int16_t weight_act = _lv_style_get_opa(_class, prop, &value_act);
  40b136:	f10d 0207 	add.w	r2, sp, #7
  40b13a:	4639      	mov	r1, r7
  40b13c:	4b26      	ldr	r3, [pc, #152]	; (40b1d8 <_lv_style_list_get_opa+0xd0>)
  40b13e:	4798      	blx	r3
        if(weight_act == weight_goal) {
  40b140:	4580      	cmp	r8, r0
  40b142:	d024      	beq.n	40b18e <_lv_style_list_get_opa+0x86>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40b144:	f995 3004 	ldrsb.w	r3, [r5, #4]
  40b148:	2b00      	cmp	r3, #0
  40b14a:	db28      	blt.n	40b19e <_lv_style_list_get_opa+0x96>
        else if(weight_act > weight) {
  40b14c:	4286      	cmp	r6, r0
  40b14e:	da04      	bge.n	40b15a <_lv_style_list_get_opa+0x52>
            *res = value_act;
  40b150:	f89d 3007 	ldrb.w	r3, [sp, #7]
  40b154:	f889 3000 	strb.w	r3, [r9]
            weight =  weight_act;
  40b158:	4606      	mov	r6, r0
    for(ci = 0; ci < list->style_cnt; ci++) {
  40b15a:	3401      	adds	r4, #1
  40b15c:	b224      	sxth	r4, r4
  40b15e:	792b      	ldrb	r3, [r5, #4]
  40b160:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40b164:	429c      	cmp	r4, r3
  40b166:	da2c      	bge.n	40b1c2 <_lv_style_list_get_opa+0xba>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
  40b168:	b2e1      	uxtb	r1, r4
    if(list->has_trans && list->skip_trans) id++;
  40b16a:	88aa      	ldrh	r2, [r5, #4]
  40b16c:	f402 72c0 	and.w	r2, r2, #384	; 0x180
  40b170:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
  40b174:	d0db      	beq.n	40b12e <_lv_style_list_get_opa+0x26>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40b176:	792a      	ldrb	r2, [r5, #4]
  40b178:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  40b17c:	d0da      	beq.n	40b134 <_lv_style_list_get_opa+0x2c>
  40b17e:	428b      	cmp	r3, r1
  40b180:	dd03      	ble.n	40b18a <_lv_style_list_get_opa+0x82>
    return list->style_list[id];
  40b182:	682b      	ldr	r3, [r5, #0]
  40b184:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  40b188:	e7d5      	b.n	40b136 <_lv_style_list_get_opa+0x2e>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40b18a:	2000      	movs	r0, #0
  40b18c:	e7d3      	b.n	40b136 <_lv_style_list_get_opa+0x2e>
            *res = value_act;
  40b18e:	f89d 3007 	ldrb.w	r3, [sp, #7]
  40b192:	f889 3000 	strb.w	r3, [r9]
            return LV_RES_OK;
  40b196:	2001      	movs	r0, #1
}
  40b198:	b003      	add	sp, #12
  40b19a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40b19e:	fab4 f384 	clz	r3, r4
  40b1a2:	095b      	lsrs	r3, r3, #5
  40b1a4:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  40b1a8:	d1d0      	bne.n	40b14c <_lv_style_list_get_opa+0x44>
  40b1aa:	2b00      	cmp	r3, #0
  40b1ac:	d0ce      	beq.n	40b14c <_lv_style_list_get_opa+0x44>
  40b1ae:	796b      	ldrb	r3, [r5, #5]
  40b1b0:	f013 0f01 	tst.w	r3, #1
  40b1b4:	d1ca      	bne.n	40b14c <_lv_style_list_get_opa+0x44>
            *res = value_act;
  40b1b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
  40b1ba:	f889 3000 	strb.w	r3, [r9]
            return LV_RES_OK;
  40b1be:	2001      	movs	r0, #1
  40b1c0:	e7ea      	b.n	40b198 <_lv_style_list_get_opa+0x90>
    if(weight >= 0)  return LV_RES_OK;
  40b1c2:	2e00      	cmp	r6, #0
  40b1c4:	db05      	blt.n	40b1d2 <_lv_style_list_get_opa+0xca>
  40b1c6:	2001      	movs	r0, #1
  40b1c8:	e7e6      	b.n	40b198 <_lv_style_list_get_opa+0x90>
    if(list == NULL) return LV_RES_INV;
  40b1ca:	2000      	movs	r0, #0
  40b1cc:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
  40b1ce:	2000      	movs	r0, #0
  40b1d0:	e7e2      	b.n	40b198 <_lv_style_list_get_opa+0x90>
    else return LV_RES_INV;
  40b1d2:	2000      	movs	r0, #0
  40b1d4:	e7e0      	b.n	40b198 <_lv_style_list_get_opa+0x90>
  40b1d6:	bf00      	nop
  40b1d8:	0040a9af 	.word	0x0040a9af

0040b1dc <_lv_style_list_get_ptr>:
    if(list == NULL) return LV_RES_INV;
  40b1dc:	2800      	cmp	r0, #0
  40b1de:	d058      	beq.n	40b292 <_lv_style_list_get_ptr+0xb6>
{
  40b1e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40b1e4:	b083      	sub	sp, #12
  40b1e6:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
  40b1e8:	6803      	ldr	r3, [r0, #0]
  40b1ea:	2b00      	cmp	r3, #0
  40b1ec:	d053      	beq.n	40b296 <_lv_style_list_get_ptr+0xba>
  40b1ee:	4691      	mov	r9, r2
  40b1f0:	460f      	mov	r7, r1
    int16_t weight_goal = attr;
  40b1f2:	ea4f 2811 	mov.w	r8, r1, lsr #8
    for(ci = 0; ci < list->style_cnt; ci++) {
  40b1f6:	2400      	movs	r4, #0
    int16_t weight = -1;
  40b1f8:	f04f 36ff 	mov.w	r6, #4294967295
    for(ci = 0; ci < list->style_cnt; ci++) {
  40b1fc:	e015      	b.n	40b22a <_lv_style_list_get_ptr+0x4e>
    if(list->has_trans && list->skip_trans) id++;
  40b1fe:	3101      	adds	r1, #1
  40b200:	b2c9      	uxtb	r1, r1
  40b202:	e01e      	b.n	40b242 <_lv_style_list_get_ptr+0x66>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40b204:	2000      	movs	r0, #0
        int16_t weight_act = _lv_style_get_ptr(_class, prop, &value_act);
  40b206:	aa01      	add	r2, sp, #4
  40b208:	4639      	mov	r1, r7
  40b20a:	4b25      	ldr	r3, [pc, #148]	; (40b2a0 <_lv_style_list_get_ptr+0xc4>)
  40b20c:	4798      	blx	r3
        if(weight_act == weight_goal) {
  40b20e:	4580      	cmp	r8, r0
  40b210:	d023      	beq.n	40b25a <_lv_style_list_get_ptr+0x7e>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40b212:	f995 3004 	ldrsb.w	r3, [r5, #4]
  40b216:	2b00      	cmp	r3, #0
  40b218:	db26      	blt.n	40b268 <_lv_style_list_get_ptr+0x8c>
        else if(weight_act > weight) {
  40b21a:	4286      	cmp	r6, r0
  40b21c:	da03      	bge.n	40b226 <_lv_style_list_get_ptr+0x4a>
            *res = value_act;
  40b21e:	9b01      	ldr	r3, [sp, #4]
  40b220:	f8c9 3000 	str.w	r3, [r9]
            weight =  weight_act;
  40b224:	4606      	mov	r6, r0
    for(ci = 0; ci < list->style_cnt; ci++) {
  40b226:	3401      	adds	r4, #1
  40b228:	b224      	sxth	r4, r4
  40b22a:	792b      	ldrb	r3, [r5, #4]
  40b22c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40b230:	429c      	cmp	r4, r3
  40b232:	da2a      	bge.n	40b28a <_lv_style_list_get_ptr+0xae>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
  40b234:	b2e1      	uxtb	r1, r4
    if(list->has_trans && list->skip_trans) id++;
  40b236:	88aa      	ldrh	r2, [r5, #4]
  40b238:	f402 72c0 	and.w	r2, r2, #384	; 0x180
  40b23c:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
  40b240:	d0dd      	beq.n	40b1fe <_lv_style_list_get_ptr+0x22>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40b242:	792a      	ldrb	r2, [r5, #4]
  40b244:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  40b248:	d0dc      	beq.n	40b204 <_lv_style_list_get_ptr+0x28>
  40b24a:	428b      	cmp	r3, r1
  40b24c:	dd03      	ble.n	40b256 <_lv_style_list_get_ptr+0x7a>
    return list->style_list[id];
  40b24e:	682b      	ldr	r3, [r5, #0]
  40b250:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  40b254:	e7d7      	b.n	40b206 <_lv_style_list_get_ptr+0x2a>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40b256:	2000      	movs	r0, #0
  40b258:	e7d5      	b.n	40b206 <_lv_style_list_get_ptr+0x2a>
            *res = value_act;
  40b25a:	9b01      	ldr	r3, [sp, #4]
  40b25c:	f8c9 3000 	str.w	r3, [r9]
            return LV_RES_OK;
  40b260:	2001      	movs	r0, #1
}
  40b262:	b003      	add	sp, #12
  40b264:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40b268:	fab4 f384 	clz	r3, r4
  40b26c:	095b      	lsrs	r3, r3, #5
  40b26e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  40b272:	d1d2      	bne.n	40b21a <_lv_style_list_get_ptr+0x3e>
  40b274:	2b00      	cmp	r3, #0
  40b276:	d0d0      	beq.n	40b21a <_lv_style_list_get_ptr+0x3e>
  40b278:	796b      	ldrb	r3, [r5, #5]
  40b27a:	f013 0f01 	tst.w	r3, #1
  40b27e:	d1cc      	bne.n	40b21a <_lv_style_list_get_ptr+0x3e>
            *res = value_act;
  40b280:	9b01      	ldr	r3, [sp, #4]
  40b282:	f8c9 3000 	str.w	r3, [r9]
            return LV_RES_OK;
  40b286:	2001      	movs	r0, #1
  40b288:	e7eb      	b.n	40b262 <_lv_style_list_get_ptr+0x86>
    if(weight >= 0)  return LV_RES_OK;
  40b28a:	2e00      	cmp	r6, #0
  40b28c:	db05      	blt.n	40b29a <_lv_style_list_get_ptr+0xbe>
  40b28e:	2001      	movs	r0, #1
  40b290:	e7e7      	b.n	40b262 <_lv_style_list_get_ptr+0x86>
    if(list == NULL) return LV_RES_INV;
  40b292:	2000      	movs	r0, #0
  40b294:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
  40b296:	2000      	movs	r0, #0
  40b298:	e7e3      	b.n	40b262 <_lv_style_list_get_ptr+0x86>
    else return LV_RES_INV;
  40b29a:	2000      	movs	r0, #0
  40b29c:	e7e1      	b.n	40b262 <_lv_style_list_get_ptr+0x86>
  40b29e:	bf00      	nop
  40b2a0:	0040abb9 	.word	0x0040abb9

0040b2a4 <map_blended>:
}
#if LV_USE_BLEND_MODES
static void map_blended(const lv_area_t * disp_area, lv_color_t * disp_buf,  const lv_area_t * draw_area,
                        const lv_area_t * map_area, const lv_color_t * map_buf, lv_opa_t opa,
                        const lv_opa_t * mask, lv_draw_mask_res_t mask_res, lv_blend_mode_t mode)
{
  40b2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b2a8:	b085      	sub	sp, #20
  40b2aa:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
  40b2ae:	9400      	str	r4, [sp, #0]
  40b2b0:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40b2b4:	8884      	ldrh	r4, [r0, #4]
  40b2b6:	f9b0 c000 	ldrsh.w	ip, [r0]
  40b2ba:	fa1f f58c 	uxth.w	r5, ip
  40b2be:	1b64      	subs	r4, r4, r5
  40b2c0:	b2a4      	uxth	r4, r4
  40b2c2:	3401      	adds	r4, #1
  40b2c4:	b224      	sxth	r4, r4
  40b2c6:	9402      	str	r4, [sp, #8]
  40b2c8:	8895      	ldrh	r5, [r2, #4]
  40b2ca:	f9b2 4000 	ldrsh.w	r4, [r2]
  40b2ce:	b2a6      	uxth	r6, r4
  40b2d0:	1bad      	subs	r5, r5, r6
  40b2d2:	b2ad      	uxth	r5, r5
  40b2d4:	3501      	adds	r5, #1
  40b2d6:	b22e      	sxth	r6, r5
  40b2d8:	9603      	str	r6, [sp, #12]
  40b2da:	889d      	ldrh	r5, [r3, #4]
  40b2dc:	f9b3 e000 	ldrsh.w	lr, [r3]
  40b2e0:	fa1f f68e 	uxth.w	r6, lr
  40b2e4:	1bad      	subs	r5, r5, r6
  40b2e6:	b2ad      	uxth	r5, r5
  40b2e8:	3501      	adds	r5, #1
  40b2ea:	b22e      	sxth	r6, r5
  40b2ec:	9601      	str	r6, [sp, #4]

    /*Get the width of the `mask_area` it will be used to go to the next line*/
    int32_t map_w = lv_area_get_width(map_area);

    /*Create a temp. disp_buf which always point to current line to draw*/
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
  40b2ee:	f9b2 b002 	ldrsh.w	fp, [r2, #2]
  40b2f2:	9d02      	ldr	r5, [sp, #8]
  40b2f4:	fb0b f605 	mul.w	r6, fp, r5
  40b2f8:	eb01 0646 	add.w	r6, r1, r6, lsl #1

    /*Create a temp. map_buf which always point to current line to draw*/
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
  40b2fc:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
  40b300:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  40b304:	1aed      	subs	r5, r5, r3
  40b306:	ebab 0505 	sub.w	r5, fp, r5
  40b30a:	9b01      	ldr	r3, [sp, #4]
  40b30c:	fb05 f503 	mul.w	r5, r5, r3
  40b310:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40b312:	eb03 0545 	add.w	r5, r3, r5, lsl #1

    lv_color_t (*blend_fp)(lv_color_t, lv_color_t, lv_opa_t);
    switch(mode) {
  40b316:	2f01      	cmp	r7, #1
  40b318:	d004      	beq.n	40b324 <map_blended+0x80>
  40b31a:	2f02      	cmp	r7, #2
  40b31c:	d00f      	beq.n	40b33e <map_blended+0x9a>
            disp_buf_tmp += disp_w;
            mask_tmp += draw_area_w;
            map_buf_tmp += map_w;
        }
    }
}
  40b31e:	b005      	add	sp, #20
  40b320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            blend_fp = color_blend_true_color_additive;
  40b324:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 40b3e8 <map_blended+0x144>
  40b328:	4617      	mov	r7, r2
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40b32a:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  40b32e:	2b01      	cmp	r3, #1
  40b330:	d008      	beq.n	40b344 <map_blended+0xa0>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
  40b332:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40b334:	eba3 0904 	sub.w	r9, r3, r4
        map_buf_tmp -= draw_area->x1;
  40b338:	eba5 0844 	sub.w	r8, r5, r4, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b33c:	e04d      	b.n	40b3da <map_blended+0x136>
            blend_fp = color_blend_true_color_subtractive;
  40b33e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 40b3ec <map_blended+0x148>
  40b342:	e7f1      	b.n	40b328 <map_blended+0x84>
        map_buf_tmp += (draw_area->x1 - (map_area->x1 - disp_area->x1));
  40b344:	ebae 030c 	sub.w	r3, lr, ip
  40b348:	1ae3      	subs	r3, r4, r3
        map_buf_tmp -= draw_area->x1;
  40b34a:	0064      	lsls	r4, r4, #1
  40b34c:	ebc4 0343 	rsb	r3, r4, r3, lsl #1
  40b350:	441d      	add	r5, r3
  40b352:	f8dd 9008 	ldr.w	r9, [sp, #8]
  40b356:	f8dd 8000 	ldr.w	r8, [sp]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b35a:	e013      	b.n	40b384 <map_blended+0xe0>
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa);
  40b35c:	4642      	mov	r2, r8
  40b35e:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
  40b362:	f835 0014 	ldrh.w	r0, [r5, r4, lsl #1]
  40b366:	47d0      	blx	sl
  40b368:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40b36c:	3401      	adds	r4, #1
  40b36e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
  40b372:	429c      	cmp	r4, r3
  40b374:	ddf2      	ble.n	40b35c <map_blended+0xb8>
            disp_buf_tmp += disp_w;
  40b376:	eb06 0649 	add.w	r6, r6, r9, lsl #1
            map_buf_tmp += map_w;
  40b37a:	9b01      	ldr	r3, [sp, #4]
  40b37c:	eb05 0543 	add.w	r5, r5, r3, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b380:	f10b 0b01 	add.w	fp, fp, #1
  40b384:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
  40b388:	459b      	cmp	fp, r3
  40b38a:	dcc8      	bgt.n	40b31e <map_blended+0x7a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40b38c:	f9b7 4000 	ldrsh.w	r4, [r7]
  40b390:	e7ed      	b.n	40b36e <map_blended+0xca>
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
  40b392:	9a00      	ldr	r2, [sp, #0]
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa_tmp);
  40b394:	f836 1015 	ldrh.w	r1, [r6, r5, lsl #1]
  40b398:	f838 0015 	ldrh.w	r0, [r8, r5, lsl #1]
  40b39c:	47d0      	blx	sl
  40b39e:	f826 0015 	strh.w	r0, [r6, r5, lsl #1]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40b3a2:	3401      	adds	r4, #1
  40b3a4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
  40b3a8:	429c      	cmp	r4, r3
  40b3aa:	dc0c      	bgt.n	40b3c6 <map_blended+0x122>
                if(mask_tmp[x] == 0) continue;
  40b3ac:	4625      	mov	r5, r4
  40b3ae:	f819 2004 	ldrb.w	r2, [r9, r4]
  40b3b2:	2a00      	cmp	r2, #0
  40b3b4:	d0f5      	beq.n	40b3a2 <map_blended+0xfe>
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
  40b3b6:	2afc      	cmp	r2, #252	; 0xfc
  40b3b8:	d8eb      	bhi.n	40b392 <map_blended+0xee>
  40b3ba:	9b00      	ldr	r3, [sp, #0]
  40b3bc:	fb02 f203 	mul.w	r2, r2, r3
  40b3c0:	f3c2 2207 	ubfx	r2, r2, #8, #8
  40b3c4:	e7e6      	b.n	40b394 <map_blended+0xf0>
            disp_buf_tmp += disp_w;
  40b3c6:	9b02      	ldr	r3, [sp, #8]
  40b3c8:	eb06 0643 	add.w	r6, r6, r3, lsl #1
            mask_tmp += draw_area_w;
  40b3cc:	9b03      	ldr	r3, [sp, #12]
  40b3ce:	4499      	add	r9, r3
            map_buf_tmp += map_w;
  40b3d0:	9b01      	ldr	r3, [sp, #4]
  40b3d2:	eb08 0843 	add.w	r8, r8, r3, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b3d6:	f10b 0b01 	add.w	fp, fp, #1
  40b3da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
  40b3de:	459b      	cmp	fp, r3
  40b3e0:	dc9d      	bgt.n	40b31e <map_blended+0x7a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40b3e2:	f9b7 4000 	ldrsh.w	r4, [r7]
  40b3e6:	e7dd      	b.n	40b3a4 <map_blended+0x100>
  40b3e8:	0040c5b1 	.word	0x0040c5b1
  40b3ec:	0040c69f 	.word	0x0040c69f

0040b3f0 <fill_set_px>:
{
  40b3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b3f4:	b089      	sub	sp, #36	; 0x24
  40b3f6:	4604      	mov	r4, r0
  40b3f8:	9106      	str	r1, [sp, #24]
  40b3fa:	4615      	mov	r5, r2
  40b3fc:	4698      	mov	r8, r3
  40b3fe:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40b402:	4b33      	ldr	r3, [pc, #204]	; (40b4d0 <fill_set_px+0xe0>)
  40b404:	4798      	blx	r3
  40b406:	4606      	mov	r6, r0
  40b408:	88a3      	ldrh	r3, [r4, #4]
  40b40a:	8822      	ldrh	r2, [r4, #0]
  40b40c:	1a9b      	subs	r3, r3, r2
  40b40e:	b29b      	uxth	r3, r3
  40b410:	3301      	adds	r3, #1
  40b412:	b21b      	sxth	r3, r3
  40b414:	9305      	str	r3, [sp, #20]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40b416:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
  40b41a:	2b01      	cmp	r3, #1
  40b41c:	d00d      	beq.n	40b43a <fill_set_px+0x4a>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
  40b41e:	f9b5 2000 	ldrsh.w	r2, [r5]
  40b422:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  40b424:	1abf      	subs	r7, r7, r2
  40b426:	88ab      	ldrh	r3, [r5, #4]
  40b428:	b292      	uxth	r2, r2
  40b42a:	1a9b      	subs	r3, r3, r2
  40b42c:	b29b      	uxth	r3, r3
  40b42e:	3301      	adds	r3, #1
  40b430:	b21b      	sxth	r3, r3
  40b432:	9307      	str	r3, [sp, #28]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b434:	f9b5 a002 	ldrsh.w	sl, [r5, #2]
  40b438:	e03f      	b.n	40b4ba <fill_set_px+0xca>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b43a:	f9b5 a002 	ldrsh.w	sl, [r5, #2]
  40b43e:	f8dd b018 	ldr.w	fp, [sp, #24]
  40b442:	e014      	b.n	40b46e <fill_set_px+0x7e>
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
  40b444:	f8d6 9014 	ldr.w	r9, [r6, #20]
  40b448:	9702      	str	r7, [sp, #8]
  40b44a:	f8ad 8004 	strh.w	r8, [sp, #4]
  40b44e:	fa0f f38a 	sxth.w	r3, sl
  40b452:	9300      	str	r3, [sp, #0]
  40b454:	b223      	sxth	r3, r4
  40b456:	9a05      	ldr	r2, [sp, #20]
  40b458:	4659      	mov	r1, fp
  40b45a:	4630      	mov	r0, r6
  40b45c:	47c8      	blx	r9
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40b45e:	3401      	adds	r4, #1
  40b460:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  40b464:	429c      	cmp	r4, r3
  40b466:	dded      	ble.n	40b444 <fill_set_px+0x54>
  40b468:	46b9      	mov	r9, r7
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b46a:	f10a 0a01 	add.w	sl, sl, #1
  40b46e:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40b472:	459a      	cmp	sl, r3
  40b474:	dc28      	bgt.n	40b4c8 <fill_set_px+0xd8>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40b476:	f9b5 4000 	ldrsh.w	r4, [r5]
  40b47a:	464f      	mov	r7, r9
  40b47c:	e7f0      	b.n	40b460 <fill_set_px+0x70>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40b47e:	3401      	adds	r4, #1
  40b480:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  40b484:	429c      	cmp	r4, r3
  40b486:	dc14      	bgt.n	40b4b2 <fill_set_px+0xc2>
                if(mask_tmp[x]) {
  40b488:	5d3b      	ldrb	r3, [r7, r4]
  40b48a:	2b00      	cmp	r3, #0
  40b48c:	d0f7      	beq.n	40b47e <fill_set_px+0x8e>
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
  40b48e:	f8d6 b014 	ldr.w	fp, [r6, #20]
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
  40b492:	fb03 f309 	mul.w	r3, r3, r9
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
  40b496:	f3c3 2307 	ubfx	r3, r3, #8, #8
  40b49a:	9302      	str	r3, [sp, #8]
  40b49c:	f8ad 8004 	strh.w	r8, [sp, #4]
  40b4a0:	fa0f f38a 	sxth.w	r3, sl
  40b4a4:	9300      	str	r3, [sp, #0]
  40b4a6:	b223      	sxth	r3, r4
  40b4a8:	9a05      	ldr	r2, [sp, #20]
  40b4aa:	9906      	ldr	r1, [sp, #24]
  40b4ac:	4630      	mov	r0, r6
  40b4ae:	47d8      	blx	fp
  40b4b0:	e7e5      	b.n	40b47e <fill_set_px+0x8e>
            mask_tmp += draw_area_w;
  40b4b2:	9b07      	ldr	r3, [sp, #28]
  40b4b4:	441f      	add	r7, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b4b6:	f10a 0a01 	add.w	sl, sl, #1
  40b4ba:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40b4be:	459a      	cmp	sl, r3
  40b4c0:	dc02      	bgt.n	40b4c8 <fill_set_px+0xd8>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40b4c2:	f9b5 4000 	ldrsh.w	r4, [r5]
  40b4c6:	e7db      	b.n	40b480 <fill_set_px+0x90>
}
  40b4c8:	b009      	add	sp, #36	; 0x24
  40b4ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b4ce:	bf00      	nop
  40b4d0:	00409851 	.word	0x00409851

0040b4d4 <map_set_px>:
{
  40b4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b4d8:	b089      	sub	sp, #36	; 0x24
  40b4da:	4604      	mov	r4, r0
  40b4dc:	9105      	str	r1, [sp, #20]
  40b4de:	4615      	mov	r5, r2
  40b4e0:	461f      	mov	r7, r3
  40b4e2:	f89d a04c 	ldrb.w	sl, [sp, #76]	; 0x4c
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40b4e6:	4b48      	ldr	r3, [pc, #288]	; (40b608 <map_set_px+0x134>)
  40b4e8:	4798      	blx	r3
  40b4ea:	4606      	mov	r6, r0
  40b4ec:	88a3      	ldrh	r3, [r4, #4]
  40b4ee:	f9b4 9000 	ldrsh.w	r9, [r4]
  40b4f2:	fa1f f289 	uxth.w	r2, r9
  40b4f6:	1a9b      	subs	r3, r3, r2
  40b4f8:	b29b      	uxth	r3, r3
  40b4fa:	3301      	adds	r3, #1
  40b4fc:	b21b      	sxth	r3, r3
  40b4fe:	9304      	str	r3, [sp, #16]
  40b500:	88ab      	ldrh	r3, [r5, #4]
  40b502:	f9b5 2000 	ldrsh.w	r2, [r5]
  40b506:	b291      	uxth	r1, r2
  40b508:	1a5b      	subs	r3, r3, r1
  40b50a:	b29b      	uxth	r3, r3
  40b50c:	3301      	adds	r3, #1
  40b50e:	b21b      	sxth	r3, r3
  40b510:	9307      	str	r3, [sp, #28]
  40b512:	88b9      	ldrh	r1, [r7, #4]
  40b514:	f9b7 3000 	ldrsh.w	r3, [r7]
  40b518:	b298      	uxth	r0, r3
  40b51a:	1a09      	subs	r1, r1, r0
  40b51c:	b289      	uxth	r1, r1
  40b51e:	3101      	adds	r1, #1
  40b520:	b209      	sxth	r1, r1
  40b522:	9106      	str	r1, [sp, #24]
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
  40b524:	f9b5 8002 	ldrsh.w	r8, [r5, #2]
  40b528:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
  40b52c:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
  40b530:	1a09      	subs	r1, r1, r0
  40b532:	eba8 0101 	sub.w	r1, r8, r1
  40b536:	9806      	ldr	r0, [sp, #24]
  40b538:	fb01 f100 	mul.w	r1, r1, r0
    map_buf_tmp += (draw_area->x1 - (map_area->x1 - disp_area->x1));
  40b53c:	eba3 0909 	sub.w	r9, r3, r9
  40b540:	eba2 0909 	sub.w	r9, r2, r9
  40b544:	ea4f 0949 	mov.w	r9, r9, lsl #1
    map_buf_tmp -= draw_area->x1;
  40b548:	eb09 0941 	add.w	r9, r9, r1, lsl #1
  40b54c:	eba9 0942 	sub.w	r9, r9, r2, lsl #1
  40b550:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40b552:	4499      	add	r9, r3
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40b554:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
  40b558:	2b01      	cmp	r3, #1
  40b55a:	d024      	beq.n	40b5a6 <map_set_px+0xd2>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
  40b55c:	9f14      	ldr	r7, [sp, #80]	; 0x50
  40b55e:	1abf      	subs	r7, r7, r2
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b560:	e047      	b.n	40b5f2 <map_set_px+0x11e>
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
  40b562:	f8d6 a014 	ldr.w	sl, [r6, #20]
  40b566:	9702      	str	r7, [sp, #8]
  40b568:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
  40b56c:	f8ad 3004 	strh.w	r3, [sp, #4]
  40b570:	fa0f f388 	sxth.w	r3, r8
  40b574:	9300      	str	r3, [sp, #0]
  40b576:	b223      	sxth	r3, r4
  40b578:	9a04      	ldr	r2, [sp, #16]
  40b57a:	4659      	mov	r1, fp
  40b57c:	4630      	mov	r0, r6
  40b57e:	47d0      	blx	sl
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40b580:	3401      	adds	r4, #1
  40b582:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  40b586:	429c      	cmp	r4, r3
  40b588:	ddeb      	ble.n	40b562 <map_set_px+0x8e>
  40b58a:	46ba      	mov	sl, r7
            map_buf_tmp += map_w;
  40b58c:	9b06      	ldr	r3, [sp, #24]
  40b58e:	eb09 0943 	add.w	r9, r9, r3, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b592:	f108 0801 	add.w	r8, r8, #1
  40b596:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40b59a:	4598      	cmp	r8, r3
  40b59c:	dc30      	bgt.n	40b600 <map_set_px+0x12c>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40b59e:	f9b5 4000 	ldrsh.w	r4, [r5]
  40b5a2:	4657      	mov	r7, sl
  40b5a4:	e7ed      	b.n	40b582 <map_set_px+0xae>
  40b5a6:	f8dd b014 	ldr.w	fp, [sp, #20]
  40b5aa:	e7f4      	b.n	40b596 <map_set_px+0xc2>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40b5ac:	3401      	adds	r4, #1
  40b5ae:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  40b5b2:	429c      	cmp	r4, r3
  40b5b4:	dc16      	bgt.n	40b5e4 <map_set_px+0x110>
                if(mask_tmp[x]) {
  40b5b6:	5d3b      	ldrb	r3, [r7, r4]
  40b5b8:	2b00      	cmp	r3, #0
  40b5ba:	d0f7      	beq.n	40b5ac <map_set_px+0xd8>
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
  40b5bc:	f8d6 b014 	ldr.w	fp, [r6, #20]
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
  40b5c0:	fb03 f30a 	mul.w	r3, r3, sl
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
  40b5c4:	f3c3 2307 	ubfx	r3, r3, #8, #8
  40b5c8:	9302      	str	r3, [sp, #8]
  40b5ca:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
  40b5ce:	f8ad 3004 	strh.w	r3, [sp, #4]
  40b5d2:	fa0f f388 	sxth.w	r3, r8
  40b5d6:	9300      	str	r3, [sp, #0]
  40b5d8:	b223      	sxth	r3, r4
  40b5da:	9a04      	ldr	r2, [sp, #16]
  40b5dc:	9905      	ldr	r1, [sp, #20]
  40b5de:	4630      	mov	r0, r6
  40b5e0:	47d8      	blx	fp
  40b5e2:	e7e3      	b.n	40b5ac <map_set_px+0xd8>
            mask_tmp += draw_area_w;
  40b5e4:	9b07      	ldr	r3, [sp, #28]
  40b5e6:	441f      	add	r7, r3
            map_buf_tmp += map_w;
  40b5e8:	9b06      	ldr	r3, [sp, #24]
  40b5ea:	eb09 0943 	add.w	r9, r9, r3, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b5ee:	f108 0801 	add.w	r8, r8, #1
  40b5f2:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40b5f6:	4598      	cmp	r8, r3
  40b5f8:	dc02      	bgt.n	40b600 <map_set_px+0x12c>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40b5fa:	f9b5 4000 	ldrsh.w	r4, [r5]
  40b5fe:	e7d6      	b.n	40b5ae <map_set_px+0xda>
}
  40b600:	b009      	add	sp, #36	; 0x24
  40b602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b606:	bf00      	nop
  40b608:	00409851 	.word	0x00409851

0040b60c <map_normal>:
{
  40b60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b610:	b08f      	sub	sp, #60	; 0x3c
  40b612:	4686      	mov	lr, r0
  40b614:	4614      	mov	r4, r2
  40b616:	9206      	str	r2, [sp, #24]
  40b618:	f89d 7064 	ldrb.w	r7, [sp, #100]	; 0x64
  40b61c:	8882      	ldrh	r2, [r0, #4]
  40b61e:	f9b0 0000 	ldrsh.w	r0, [r0]
  40b622:	9003      	str	r0, [sp, #12]
  40b624:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  40b628:	1a12      	subs	r2, r2, r0
  40b62a:	b292      	uxth	r2, r2
  40b62c:	3201      	adds	r2, #1
  40b62e:	b212      	sxth	r2, r2
  40b630:	9208      	str	r2, [sp, #32]
  40b632:	88a2      	ldrh	r2, [r4, #4]
  40b634:	f9b4 c000 	ldrsh.w	ip, [r4]
  40b638:	fa1f f08c 	uxth.w	r0, ip
  40b63c:	1a12      	subs	r2, r2, r0
  40b63e:	b292      	uxth	r2, r2
  40b640:	3201      	adds	r2, #1
  40b642:	b212      	sxth	r2, r2
  40b644:	9209      	str	r2, [sp, #36]	; 0x24
    int32_t draw_area_w = lv_area_get_width(draw_area);
  40b646:	4693      	mov	fp, r2
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40b648:	88e0      	ldrh	r0, [r4, #6]
  40b64a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
  40b64e:	b294      	uxth	r4, r2
  40b650:	1b00      	subs	r0, r0, r4
  40b652:	b280      	uxth	r0, r0
  40b654:	3001      	adds	r0, #1
  40b656:	b204      	sxth	r4, r0
  40b658:	940a      	str	r4, [sp, #40]	; 0x28
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40b65a:	8898      	ldrh	r0, [r3, #4]
  40b65c:	f9b3 5000 	ldrsh.w	r5, [r3]
  40b660:	b2ac      	uxth	r4, r5
  40b662:	1b00      	subs	r0, r0, r4
  40b664:	b280      	uxth	r0, r0
  40b666:	3001      	adds	r0, #1
  40b668:	b204      	sxth	r4, r0
  40b66a:	9407      	str	r4, [sp, #28]
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
  40b66c:	9808      	ldr	r0, [sp, #32]
  40b66e:	fb02 c400 	mla	r4, r2, r0, ip
  40b672:	eb01 0444 	add.w	r4, r1, r4, lsl #1
    const lv_color_t * map_buf_first = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
  40b676:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  40b67a:	f9be 1002 	ldrsh.w	r1, [lr, #2]
  40b67e:	1a5b      	subs	r3, r3, r1
  40b680:	1ad3      	subs	r3, r2, r3
  40b682:	9a07      	ldr	r2, [sp, #28]
  40b684:	fb03 f302 	mul.w	r3, r3, r2
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
  40b688:	9803      	ldr	r0, [sp, #12]
  40b68a:	1a2d      	subs	r5, r5, r0
  40b68c:	ebac 0505 	sub.w	r5, ip, r5
  40b690:	006d      	lsls	r5, r5, #1
  40b692:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  40b696:	9d18      	ldr	r5, [sp, #96]	; 0x60
  40b698:	441d      	add	r5, r3
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40b69a:	4b8a      	ldr	r3, [pc, #552]	; (40b8c4 <map_normal+0x2b8>)
  40b69c:	4798      	blx	r3
  40b69e:	9003      	str	r0, [sp, #12]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40b6a0:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
  40b6a4:	2b01      	cmp	r3, #1
  40b6a6:	d008      	beq.n	40b6ba <map_normal+0xae>
        if(opa > LV_OPA_MAX) {
  40b6a8:	2ffd      	cmp	r7, #253	; 0xfd
  40b6aa:	f240 8383 	bls.w	40bdb4 <map_normal+0x7a8>
            int32_t x_end4 = draw_area_w - 4;
  40b6ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40b6b0:	3b04      	subs	r3, #4
  40b6b2:	9303      	str	r3, [sp, #12]
            for(y = 0; y < draw_area_h; y++) {
  40b6b4:	2300      	movs	r3, #0
  40b6b6:	9306      	str	r3, [sp, #24]
  40b6b8:	e308      	b.n	40bccc <map_normal+0x6c0>
        if(disp->driver.gpu_blend_cb && (lv_area_get_size(draw_area) > GPU_SIZE_LIMIT)) {
  40b6ba:	6a83      	ldr	r3, [r0, #40]	; 0x28
  40b6bc:	b32b      	cbz	r3, 40b70a <map_normal+0xfe>
  40b6be:	9e06      	ldr	r6, [sp, #24]
  40b6c0:	4630      	mov	r0, r6
  40b6c2:	4b81      	ldr	r3, [pc, #516]	; (40b8c8 <map_normal+0x2bc>)
  40b6c4:	4798      	blx	r3
  40b6c6:	28f0      	cmp	r0, #240	; 0xf0
  40b6c8:	d91f      	bls.n	40b70a <map_normal+0xfe>
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b6ca:	4631      	mov	r1, r6
  40b6cc:	f9b6 6002 	ldrsh.w	r6, [r6, #2]
  40b6d0:	f8dd 800c 	ldr.w	r8, [sp, #12]
  40b6d4:	f8dd a020 	ldr.w	sl, [sp, #32]
  40b6d8:	4689      	mov	r9, r1
  40b6da:	46bb      	mov	fp, r7
  40b6dc:	e00e      	b.n	40b6fc <map_normal+0xf0>
                disp->driver.gpu_blend_cb(&disp->driver, disp_buf_first, map_buf_first, draw_area_w, opa);
  40b6de:	f8d8 7028 	ldr.w	r7, [r8, #40]	; 0x28
  40b6e2:	f8cd b000 	str.w	fp, [sp]
  40b6e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40b6e8:	462a      	mov	r2, r5
  40b6ea:	4621      	mov	r1, r4
  40b6ec:	4640      	mov	r0, r8
  40b6ee:	47b8      	blx	r7
                disp_buf_first += disp_w;
  40b6f0:	eb04 044a 	add.w	r4, r4, sl, lsl #1
                map_buf_first += map_w;
  40b6f4:	9b07      	ldr	r3, [sp, #28]
  40b6f6:	eb05 0543 	add.w	r5, r5, r3, lsl #1
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b6fa:	3601      	adds	r6, #1
  40b6fc:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
  40b700:	429e      	cmp	r6, r3
  40b702:	ddec      	ble.n	40b6de <map_normal+0xd2>
}
  40b704:	b00f      	add	sp, #60	; 0x3c
  40b706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(opa > LV_OPA_MAX) {
  40b70a:	2ffd      	cmp	r7, #253	; 0xfd
  40b70c:	d812      	bhi.n	40b734 <map_normal+0x128>
  40b70e:	f04f 0800 	mov.w	r8, #0
  40b712:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  40b716:	e069      	b.n	40b7ec <map_normal+0x1e0>
                _lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
  40b718:	ea4f 0249 	mov.w	r2, r9, lsl #1
  40b71c:	4629      	mov	r1, r5
  40b71e:	4620      	mov	r0, r4
  40b720:	4b6a      	ldr	r3, [pc, #424]	; (40b8cc <map_normal+0x2c0>)
  40b722:	4798      	blx	r3
                disp_buf_first += disp_w;
  40b724:	eb04 044a 	add.w	r4, r4, sl, lsl #1
                map_buf_first += map_w;
  40b728:	eb05 0548 	add.w	r5, r5, r8, lsl #1
            for(y = 0; y < draw_area_h; y++) {
  40b72c:	3601      	adds	r6, #1
  40b72e:	42be      	cmp	r6, r7
  40b730:	dbf2      	blt.n	40b718 <map_normal+0x10c>
  40b732:	e7e7      	b.n	40b704 <map_normal+0xf8>
  40b734:	2600      	movs	r6, #0
  40b736:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40b738:	f8dd 801c 	ldr.w	r8, [sp, #28]
  40b73c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
  40b740:	f8dd a020 	ldr.w	sl, [sp, #32]
  40b744:	e7f3      	b.n	40b72e <map_normal+0x122>
  40b746:	f835 301c 	ldrh.w	r3, [r5, ip, lsl #1]
  40b74a:	f834 101c 	ldrh.w	r1, [r4, ip, lsl #1]
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b74e:	f3c3 02c4 	ubfx	r2, r3, #3, #5
  40b752:	f3c1 06c4 	ubfx	r6, r1, #3, #5
  40b756:	f1c7 00ff 	rsb	r0, r7, #255	; 0xff
  40b75a:	fb00 f606 	mul.w	r6, r0, r6
  40b75e:	fb07 6202 	mla	r2, r7, r2, r6
  40b762:	3280      	adds	r2, #128	; 0x80
  40b764:	eb02 2602 	add.w	r6, r2, r2, lsl #8
  40b768:	eb02 12c6 	add.w	r2, r2, r6, lsl #7
  40b76c:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  40b770:	f362 0ac7 	bfi	sl, r2, #3, #5
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b774:	f003 0607 	and.w	r6, r3, #7
  40b778:	f3c3 3242 	ubfx	r2, r3, #13, #3
  40b77c:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
  40b780:	f001 0e07 	and.w	lr, r1, #7
  40b784:	f3c1 3642 	ubfx	r6, r1, #13, #3
  40b788:	eb06 06ce 	add.w	r6, r6, lr, lsl #3
  40b78c:	fb06 f600 	mul.w	r6, r6, r0
  40b790:	fb02 6207 	mla	r2, r2, r7, r6
  40b794:	3280      	adds	r2, #128	; 0x80
  40b796:	eb02 2602 	add.w	r6, r2, r2, lsl #8
  40b79a:	eb02 12c6 	add.w	r2, r2, r6, lsl #7
  40b79e:	f3c2 6682 	ubfx	r6, r2, #26, #3
  40b7a2:	f366 0a02 	bfi	sl, r6, #0, #3
  40b7a6:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  40b7aa:	f362 3a4f 	bfi	sl, r2, #13, #3
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b7ae:	f3c3 2304 	ubfx	r3, r3, #8, #5
  40b7b2:	f3c1 2104 	ubfx	r1, r1, #8, #5
  40b7b6:	fb01 f000 	mul.w	r0, r1, r0
  40b7ba:	fb03 0307 	mla	r3, r3, r7, r0
  40b7be:	3380      	adds	r3, #128	; 0x80
  40b7c0:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40b7c4:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40b7c8:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40b7cc:	f363 2a0c 	bfi	sl, r3, #8, #5
                        disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa);
  40b7d0:	f824 a01c 	strh.w	sl, [r4, ip, lsl #1]
                for(x = 0; x < draw_area_w; x++) {
  40b7d4:	f10c 0c01 	add.w	ip, ip, #1
  40b7d8:	45dc      	cmp	ip, fp
  40b7da:	dbb4      	blt.n	40b746 <map_normal+0x13a>
                disp_buf_first += disp_w;
  40b7dc:	9b08      	ldr	r3, [sp, #32]
  40b7de:	eb04 0443 	add.w	r4, r4, r3, lsl #1
                map_buf_first += map_w;
  40b7e2:	9b07      	ldr	r3, [sp, #28]
  40b7e4:	eb05 0543 	add.w	r5, r5, r3, lsl #1
            for(y = 0; y < draw_area_h; y++) {
  40b7e8:	f108 0801 	add.w	r8, r8, #1
  40b7ec:	45c8      	cmp	r8, r9
  40b7ee:	da89      	bge.n	40b704 <map_normal+0xf8>
  40b7f0:	f04f 0c00 	mov.w	ip, #0
  40b7f4:	e7f0      	b.n	40b7d8 <map_normal+0x1cc>
                    MAP_NORMAL_MASK_PX(x)
  40b7f6:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
  40b7fa:	f824 1013 	strh.w	r1, [r4, r3, lsl #1]
  40b7fe:	3201      	adds	r2, #1
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
  40b800:	3301      	adds	r3, #1
  40b802:	455b      	cmp	r3, fp
  40b804:	f280 81e6 	bge.w	40bbd4 <map_normal+0x5c8>
  40b808:	f012 0f03 	tst.w	r2, #3
  40b80c:	d04c      	beq.n	40b8a8 <map_normal+0x29c>
                    MAP_NORMAL_MASK_PX(x)
  40b80e:	7811      	ldrb	r1, [r2, #0]
  40b810:	2900      	cmp	r1, #0
  40b812:	d0f4      	beq.n	40b7fe <map_normal+0x1f2>
  40b814:	29ff      	cmp	r1, #255	; 0xff
  40b816:	d0ee      	beq.n	40b7f6 <map_normal+0x1ea>
  40b818:	f835 7013 	ldrh.w	r7, [r5, r3, lsl #1]
  40b81c:	f834 6013 	ldrh.w	r6, [r4, r3, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b820:	f3c7 00c4 	ubfx	r0, r7, #3, #5
  40b824:	f3c6 0cc4 	ubfx	ip, r6, #3, #5
  40b828:	f1c1 0eff 	rsb	lr, r1, #255	; 0xff
  40b82c:	fb0e fc0c 	mul.w	ip, lr, ip
  40b830:	fb01 c000 	mla	r0, r1, r0, ip
  40b834:	3080      	adds	r0, #128	; 0x80
  40b836:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40b83a:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40b83e:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40b842:	f360 08c7 	bfi	r8, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b846:	f007 0c07 	and.w	ip, r7, #7
  40b84a:	f3c7 3042 	ubfx	r0, r7, #13, #3
  40b84e:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
  40b852:	f006 0a07 	and.w	sl, r6, #7
  40b856:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  40b85a:	eb0c 0cca 	add.w	ip, ip, sl, lsl #3
  40b85e:	fb0c fc0e 	mul.w	ip, ip, lr
  40b862:	fb00 c001 	mla	r0, r0, r1, ip
  40b866:	3080      	adds	r0, #128	; 0x80
  40b868:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40b86c:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40b870:	f3c0 6c82 	ubfx	ip, r0, #26, #3
  40b874:	f36c 0802 	bfi	r8, ip, #0, #3
  40b878:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40b87c:	f360 384f 	bfi	r8, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b880:	f3c7 2704 	ubfx	r7, r7, #8, #5
  40b884:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40b888:	fb06 fe0e 	mul.w	lr, r6, lr
  40b88c:	fb07 e101 	mla	r1, r7, r1, lr
  40b890:	3180      	adds	r1, #128	; 0x80
  40b892:	eb01 2001 	add.w	r0, r1, r1, lsl #8
  40b896:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  40b89a:	f3c1 51c4 	ubfx	r1, r1, #23, #5
  40b89e:	f361 280c 	bfi	r8, r1, #8, #5
  40b8a2:	f824 8013 	strh.w	r8, [r4, r3, lsl #1]
  40b8a6:	e7aa      	b.n	40b7fe <map_normal+0x1f2>
  40b8a8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  40b8ac:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
  40b8b0:	f8bd b014 	ldrh.w	fp, [sp, #20]
  40b8b4:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
  40b8b8:	f8bd e02e 	ldrh.w	lr, [sp, #46]	; 0x2e
  40b8bc:	f8ad 8036 	strh.w	r8, [sp, #54]	; 0x36
  40b8c0:	e01b      	b.n	40b8fa <map_normal+0x2ee>
  40b8c2:	bf00      	nop
  40b8c4:	00409851 	.word	0x00409851
  40b8c8:	00415647 	.word	0x00415647
  40b8cc:	004168e9 	.word	0x004168e9
                            disp_buf_first[x] = map_buf_first[x];
  40b8d0:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
  40b8d4:	f824 1013 	strh.w	r1, [r4, r3, lsl #1]
                            disp_buf_first[x + 1] = map_buf_first[x + 1];
  40b8d8:	1c59      	adds	r1, r3, #1
  40b8da:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
  40b8de:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
                            disp_buf_first[x + 2] = map_buf_first[x + 2];
  40b8e2:	1c99      	adds	r1, r3, #2
  40b8e4:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
  40b8e8:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
                            disp_buf_first[x + 3] = map_buf_first[x + 3];
  40b8ec:	1cd9      	adds	r1, r3, #3
  40b8ee:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
  40b8f2:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
                    mask32++;
  40b8f6:	3204      	adds	r2, #4
                for(; x < x_end4; x += 4) {
  40b8f8:	3304      	adds	r3, #4
  40b8fa:	9903      	ldr	r1, [sp, #12]
  40b8fc:	428b      	cmp	r3, r1
  40b8fe:	f280 8176 	bge.w	40bbee <map_normal+0x5e2>
                    if(*mask32) {
  40b902:	6811      	ldr	r1, [r2, #0]
  40b904:	2900      	cmp	r1, #0
  40b906:	d0f6      	beq.n	40b8f6 <map_normal+0x2ea>
                        if((*mask32) == 0xFFFFFFFF) {
  40b908:	f1b1 3fff 	cmp.w	r1, #4294967295
  40b90c:	d0e0      	beq.n	40b8d0 <map_normal+0x2c4>
                            MAP_NORMAL_MASK_PX(x)
  40b90e:	7811      	ldrb	r1, [r2, #0]
  40b910:	2900      	cmp	r1, #0
  40b912:	d049      	beq.n	40b9a8 <map_normal+0x39c>
  40b914:	29ff      	cmp	r1, #255	; 0xff
  40b916:	f000 8146 	beq.w	40bba6 <map_normal+0x59a>
  40b91a:	f835 c013 	ldrh.w	ip, [r5, r3, lsl #1]
  40b91e:	f834 6013 	ldrh.w	r6, [r4, r3, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b922:	f3cc 00c4 	ubfx	r0, ip, #3, #5
  40b926:	f3c6 08c4 	ubfx	r8, r6, #3, #5
  40b92a:	f1c1 09ff 	rsb	r9, r1, #255	; 0xff
  40b92e:	fb09 f808 	mul.w	r8, r9, r8
  40b932:	fb01 8000 	mla	r0, r1, r0, r8
  40b936:	3080      	adds	r0, #128	; 0x80
  40b938:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40b93c:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40b940:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40b944:	f360 0ec7 	bfi	lr, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b948:	f00c 0807 	and.w	r8, ip, #7
  40b94c:	f3cc 3042 	ubfx	r0, ip, #13, #3
  40b950:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
  40b954:	f006 0707 	and.w	r7, r6, #7
  40b958:	f3c6 3842 	ubfx	r8, r6, #13, #3
  40b95c:	eb08 08c7 	add.w	r8, r8, r7, lsl #3
  40b960:	fb08 f809 	mul.w	r8, r8, r9
  40b964:	fb00 8001 	mla	r0, r0, r1, r8
  40b968:	3080      	adds	r0, #128	; 0x80
  40b96a:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40b96e:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40b972:	f3c0 6882 	ubfx	r8, r0, #26, #3
  40b976:	f368 0e02 	bfi	lr, r8, #0, #3
  40b97a:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40b97e:	f360 3e4f 	bfi	lr, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b982:	f3cc 2c04 	ubfx	ip, ip, #8, #5
  40b986:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40b98a:	fb06 f609 	mul.w	r6, r6, r9
  40b98e:	fb0c 6601 	mla	r6, ip, r1, r6
  40b992:	3680      	adds	r6, #128	; 0x80
  40b994:	eb06 2106 	add.w	r1, r6, r6, lsl #8
  40b998:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
  40b99c:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  40b9a0:	f366 2e0c 	bfi	lr, r6, #8, #5
  40b9a4:	f824 e013 	strh.w	lr, [r4, r3, lsl #1]
                            MAP_NORMAL_MASK_PX(x + 1)
  40b9a8:	7851      	ldrb	r1, [r2, #1]
  40b9aa:	2900      	cmp	r1, #0
  40b9ac:	d056      	beq.n	40ba5c <map_normal+0x450>
  40b9ae:	29ff      	cmp	r1, #255	; 0xff
  40b9b0:	f000 80fe 	beq.w	40bbb0 <map_normal+0x5a4>
  40b9b4:	f103 0901 	add.w	r9, r3, #1
  40b9b8:	f835 c019 	ldrh.w	ip, [r5, r9, lsl #1]
  40b9bc:	f834 6019 	ldrh.w	r6, [r4, r9, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b9c0:	f3cc 00c4 	ubfx	r0, ip, #3, #5
  40b9c4:	f3c6 08c4 	ubfx	r8, r6, #3, #5
  40b9c8:	f1c1 07ff 	rsb	r7, r1, #255	; 0xff
  40b9cc:	9705      	str	r7, [sp, #20]
  40b9ce:	fb07 f808 	mul.w	r8, r7, r8
  40b9d2:	fb01 8000 	mla	r0, r1, r0, r8
  40b9d6:	3080      	adds	r0, #128	; 0x80
  40b9d8:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40b9dc:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40b9e0:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40b9e4:	9f04      	ldr	r7, [sp, #16]
  40b9e6:	f360 07c7 	bfi	r7, r0, #3, #5
  40b9ea:	9704      	str	r7, [sp, #16]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b9ec:	f00c 0807 	and.w	r8, ip, #7
  40b9f0:	f3cc 3042 	ubfx	r0, ip, #13, #3
  40b9f4:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
  40b9f8:	f006 0807 	and.w	r8, r6, #7
  40b9fc:	4647      	mov	r7, r8
  40b9fe:	f3c6 3842 	ubfx	r8, r6, #13, #3
  40ba02:	eb08 08c7 	add.w	r8, r8, r7, lsl #3
  40ba06:	9f05      	ldr	r7, [sp, #20]
  40ba08:	fb08 f807 	mul.w	r8, r8, r7
  40ba0c:	fb00 8001 	mla	r0, r0, r1, r8
  40ba10:	3080      	adds	r0, #128	; 0x80
  40ba12:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40ba16:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40ba1a:	f3c0 6882 	ubfx	r8, r0, #26, #3
  40ba1e:	9f04      	ldr	r7, [sp, #16]
  40ba20:	f368 0702 	bfi	r7, r8, #0, #3
  40ba24:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40ba28:	f360 374f 	bfi	r7, r0, #13, #3
  40ba2c:	4638      	mov	r0, r7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40ba2e:	f3cc 2c04 	ubfx	ip, ip, #8, #5
  40ba32:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40ba36:	9f05      	ldr	r7, [sp, #20]
  40ba38:	fb06 f607 	mul.w	r6, r6, r7
  40ba3c:	fb0c 6601 	mla	r6, ip, r1, r6
  40ba40:	3680      	adds	r6, #128	; 0x80
  40ba42:	eb06 2106 	add.w	r1, r6, r6, lsl #8
  40ba46:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
  40ba4a:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  40ba4e:	4601      	mov	r1, r0
  40ba50:	f366 210c 	bfi	r1, r6, #8, #5
  40ba54:	f8ad 1010 	strh.w	r1, [sp, #16]
  40ba58:	f824 1019 	strh.w	r1, [r4, r9, lsl #1]
                            MAP_NORMAL_MASK_PX(x + 2)
  40ba5c:	7891      	ldrb	r1, [r2, #2]
  40ba5e:	2900      	cmp	r1, #0
  40ba60:	d04e      	beq.n	40bb00 <map_normal+0x4f4>
  40ba62:	29ff      	cmp	r1, #255	; 0xff
  40ba64:	f000 80aa 	beq.w	40bbbc <map_normal+0x5b0>
  40ba68:	f103 0902 	add.w	r9, r3, #2
  40ba6c:	f835 c019 	ldrh.w	ip, [r5, r9, lsl #1]
  40ba70:	f834 6019 	ldrh.w	r6, [r4, r9, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40ba74:	f3cc 00c4 	ubfx	r0, ip, #3, #5
  40ba78:	f3c6 08c4 	ubfx	r8, r6, #3, #5
  40ba7c:	f1c1 07ff 	rsb	r7, r1, #255	; 0xff
  40ba80:	9705      	str	r7, [sp, #20]
  40ba82:	fb07 f808 	mul.w	r8, r7, r8
  40ba86:	fb01 8000 	mla	r0, r1, r0, r8
  40ba8a:	3080      	adds	r0, #128	; 0x80
  40ba8c:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40ba90:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40ba94:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40ba98:	f360 0ac7 	bfi	sl, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40ba9c:	f00c 0807 	and.w	r8, ip, #7
  40baa0:	f3cc 3042 	ubfx	r0, ip, #13, #3
  40baa4:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
  40baa8:	f006 0807 	and.w	r8, r6, #7
  40baac:	4647      	mov	r7, r8
  40baae:	f3c6 3842 	ubfx	r8, r6, #13, #3
  40bab2:	eb08 08c7 	add.w	r8, r8, r7, lsl #3
  40bab6:	9f05      	ldr	r7, [sp, #20]
  40bab8:	fb08 f807 	mul.w	r8, r8, r7
  40babc:	fb00 8001 	mla	r0, r0, r1, r8
  40bac0:	3080      	adds	r0, #128	; 0x80
  40bac2:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40bac6:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40baca:	f3c0 6882 	ubfx	r8, r0, #26, #3
  40bace:	f368 0a02 	bfi	sl, r8, #0, #3
  40bad2:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40bad6:	f360 3a4f 	bfi	sl, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40bada:	f3cc 2c04 	ubfx	ip, ip, #8, #5
  40bade:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40bae2:	fb06 f607 	mul.w	r6, r6, r7
  40bae6:	fb0c 6601 	mla	r6, ip, r1, r6
  40baea:	3680      	adds	r6, #128	; 0x80
  40baec:	eb06 2106 	add.w	r1, r6, r6, lsl #8
  40baf0:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
  40baf4:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  40baf8:	f366 2a0c 	bfi	sl, r6, #8, #5
  40bafc:	f824 a019 	strh.w	sl, [r4, r9, lsl #1]
                            MAP_NORMAL_MASK_PX(x + 3)
  40bb00:	78d1      	ldrb	r1, [r2, #3]
  40bb02:	2900      	cmp	r1, #0
  40bb04:	f43f aef7 	beq.w	40b8f6 <map_normal+0x2ea>
  40bb08:	29ff      	cmp	r1, #255	; 0xff
  40bb0a:	d05d      	beq.n	40bbc8 <map_normal+0x5bc>
  40bb0c:	f103 0903 	add.w	r9, r3, #3
  40bb10:	f835 c019 	ldrh.w	ip, [r5, r9, lsl #1]
  40bb14:	f834 6019 	ldrh.w	r6, [r4, r9, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40bb18:	f3cc 00c4 	ubfx	r0, ip, #3, #5
  40bb1c:	f3c6 08c4 	ubfx	r8, r6, #3, #5
  40bb20:	f1c1 07ff 	rsb	r7, r1, #255	; 0xff
  40bb24:	9705      	str	r7, [sp, #20]
  40bb26:	fb07 f808 	mul.w	r8, r7, r8
  40bb2a:	fb01 8000 	mla	r0, r1, r0, r8
  40bb2e:	3080      	adds	r0, #128	; 0x80
  40bb30:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40bb34:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40bb38:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40bb3c:	f360 0bc7 	bfi	fp, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40bb40:	f00c 0807 	and.w	r8, ip, #7
  40bb44:	f3cc 3042 	ubfx	r0, ip, #13, #3
  40bb48:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
  40bb4c:	f006 0807 	and.w	r8, r6, #7
  40bb50:	4647      	mov	r7, r8
  40bb52:	f3c6 3842 	ubfx	r8, r6, #13, #3
  40bb56:	eb08 08c7 	add.w	r8, r8, r7, lsl #3
  40bb5a:	9f05      	ldr	r7, [sp, #20]
  40bb5c:	fb08 f807 	mul.w	r8, r8, r7
  40bb60:	fb00 8001 	mla	r0, r0, r1, r8
  40bb64:	3080      	adds	r0, #128	; 0x80
  40bb66:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40bb6a:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40bb6e:	f3c0 6882 	ubfx	r8, r0, #26, #3
  40bb72:	f368 0b02 	bfi	fp, r8, #0, #3
  40bb76:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40bb7a:	f360 3b4f 	bfi	fp, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40bb7e:	f3cc 2c04 	ubfx	ip, ip, #8, #5
  40bb82:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40bb86:	fb06 f607 	mul.w	r6, r6, r7
  40bb8a:	fb0c 6601 	mla	r6, ip, r1, r6
  40bb8e:	3680      	adds	r6, #128	; 0x80
  40bb90:	eb06 2106 	add.w	r1, r6, r6, lsl #8
  40bb94:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
  40bb98:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  40bb9c:	f366 2b0c 	bfi	fp, r6, #8, #5
  40bba0:	f824 b019 	strh.w	fp, [r4, r9, lsl #1]
  40bba4:	e6a7      	b.n	40b8f6 <map_normal+0x2ea>
                            MAP_NORMAL_MASK_PX(x)
  40bba6:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
  40bbaa:	f824 1013 	strh.w	r1, [r4, r3, lsl #1]
  40bbae:	e6fb      	b.n	40b9a8 <map_normal+0x39c>
                            MAP_NORMAL_MASK_PX(x + 1)
  40bbb0:	1c59      	adds	r1, r3, #1
  40bbb2:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
  40bbb6:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
  40bbba:	e74f      	b.n	40ba5c <map_normal+0x450>
                            MAP_NORMAL_MASK_PX(x + 2)
  40bbbc:	1c99      	adds	r1, r3, #2
  40bbbe:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
  40bbc2:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
  40bbc6:	e79b      	b.n	40bb00 <map_normal+0x4f4>
                            MAP_NORMAL_MASK_PX(x + 3)
  40bbc8:	1cd9      	adds	r1, r3, #3
  40bbca:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
  40bbce:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
  40bbd2:	e690      	b.n	40b8f6 <map_normal+0x2ea>
  40bbd4:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  40bbd8:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
  40bbdc:	f8bd b014 	ldrh.w	fp, [sp, #20]
  40bbe0:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
  40bbe4:	f8bd e02e 	ldrh.w	lr, [sp, #46]	; 0x2e
  40bbe8:	f8ad 8036 	strh.w	r8, [sp, #54]	; 0x36
  40bbec:	e685      	b.n	40b8fa <map_normal+0x2ee>
  40bbee:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
  40bbf2:	f8ad b014 	strh.w	fp, [sp, #20]
  40bbf6:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40bbfa:	f8ad a02c 	strh.w	sl, [sp, #44]	; 0x2c
  40bbfe:	f8ad e02e 	strh.w	lr, [sp, #46]	; 0x2e
  40bc02:	f8bd 8036 	ldrh.w	r8, [sp, #54]	; 0x36
  40bc06:	e005      	b.n	40bc14 <map_normal+0x608>
                    MAP_NORMAL_MASK_PX(x)
  40bc08:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
  40bc0c:	f824 1013 	strh.w	r1, [r4, r3, lsl #1]
  40bc10:	3201      	adds	r2, #1
                for(; x < draw_area_w ; x++) {
  40bc12:	3301      	adds	r3, #1
  40bc14:	455b      	cmp	r3, fp
  40bc16:	da4c      	bge.n	40bcb2 <map_normal+0x6a6>
                    MAP_NORMAL_MASK_PX(x)
  40bc18:	7811      	ldrb	r1, [r2, #0]
  40bc1a:	2900      	cmp	r1, #0
  40bc1c:	d0f8      	beq.n	40bc10 <map_normal+0x604>
  40bc1e:	29ff      	cmp	r1, #255	; 0xff
  40bc20:	d0f2      	beq.n	40bc08 <map_normal+0x5fc>
  40bc22:	f835 7013 	ldrh.w	r7, [r5, r3, lsl #1]
  40bc26:	f834 6013 	ldrh.w	r6, [r4, r3, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40bc2a:	f3c7 00c4 	ubfx	r0, r7, #3, #5
  40bc2e:	f3c6 0cc4 	ubfx	ip, r6, #3, #5
  40bc32:	f1c1 0eff 	rsb	lr, r1, #255	; 0xff
  40bc36:	fb0e fc0c 	mul.w	ip, lr, ip
  40bc3a:	fb01 c000 	mla	r0, r1, r0, ip
  40bc3e:	3080      	adds	r0, #128	; 0x80
  40bc40:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40bc44:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40bc48:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40bc4c:	f360 09c7 	bfi	r9, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40bc50:	f007 0c07 	and.w	ip, r7, #7
  40bc54:	f3c7 3042 	ubfx	r0, r7, #13, #3
  40bc58:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
  40bc5c:	f006 0a07 	and.w	sl, r6, #7
  40bc60:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  40bc64:	eb0c 0cca 	add.w	ip, ip, sl, lsl #3
  40bc68:	fb0c fc0e 	mul.w	ip, ip, lr
  40bc6c:	fb00 c001 	mla	r0, r0, r1, ip
  40bc70:	3080      	adds	r0, #128	; 0x80
  40bc72:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40bc76:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40bc7a:	f3c0 6c82 	ubfx	ip, r0, #26, #3
  40bc7e:	f36c 0902 	bfi	r9, ip, #0, #3
  40bc82:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40bc86:	f360 394f 	bfi	r9, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40bc8a:	f3c7 2704 	ubfx	r7, r7, #8, #5
  40bc8e:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40bc92:	fb06 fe0e 	mul.w	lr, r6, lr
  40bc96:	fb07 e101 	mla	r1, r7, r1, lr
  40bc9a:	3180      	adds	r1, #128	; 0x80
  40bc9c:	eb01 2001 	add.w	r0, r1, r1, lsl #8
  40bca0:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  40bca4:	f3c1 51c4 	ubfx	r1, r1, #23, #5
  40bca8:	f361 290c 	bfi	r9, r1, #8, #5
  40bcac:	f824 9013 	strh.w	r9, [r4, r3, lsl #1]
  40bcb0:	e7ae      	b.n	40bc10 <map_normal+0x604>
                disp_buf_first += disp_w;
  40bcb2:	9b08      	ldr	r3, [sp, #32]
  40bcb4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
                mask += draw_area_w;
  40bcb8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40bcba:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40bcbc:	4413      	add	r3, r2
  40bcbe:	931a      	str	r3, [sp, #104]	; 0x68
                map_buf_first += map_w;
  40bcc0:	9b07      	ldr	r3, [sp, #28]
  40bcc2:	eb05 0543 	add.w	r5, r5, r3, lsl #1
            for(y = 0; y < draw_area_h; y++) {
  40bcc6:	9b06      	ldr	r3, [sp, #24]
  40bcc8:	3301      	adds	r3, #1
  40bcca:	9306      	str	r3, [sp, #24]
  40bccc:	9b06      	ldr	r3, [sp, #24]
  40bcce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40bcd0:	4293      	cmp	r3, r2
  40bcd2:	f6bf ad17 	bge.w	40b704 <map_normal+0xf8>
  40bcd6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40bcd8:	2300      	movs	r3, #0
  40bcda:	e592      	b.n	40b802 <map_normal+0x1f6>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
  40bcdc:	9b03      	ldr	r3, [sp, #12]
  40bcde:	f835 001e 	ldrh.w	r0, [r5, lr, lsl #1]
  40bce2:	f834 101e 	ldrh.w	r1, [r4, lr, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40bce6:	f3c0 02c4 	ubfx	r2, r0, #3, #5
  40bcea:	f3c1 07c4 	ubfx	r7, r1, #3, #5
  40bcee:	f1c3 0cff 	rsb	ip, r3, #255	; 0xff
  40bcf2:	fb0c f707 	mul.w	r7, ip, r7
  40bcf6:	fb03 7202 	mla	r2, r3, r2, r7
  40bcfa:	3280      	adds	r2, #128	; 0x80
  40bcfc:	eb02 2702 	add.w	r7, r2, r2, lsl #8
  40bd00:	eb02 12c7 	add.w	r2, r2, r7, lsl #7
  40bd04:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  40bd08:	f362 06c7 	bfi	r6, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40bd0c:	f000 0707 	and.w	r7, r0, #7
  40bd10:	f3c0 3242 	ubfx	r2, r0, #13, #3
  40bd14:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
  40bd18:	f001 0907 	and.w	r9, r1, #7
  40bd1c:	f3c1 3742 	ubfx	r7, r1, #13, #3
  40bd20:	eb07 07c9 	add.w	r7, r7, r9, lsl #3
  40bd24:	fb07 f70c 	mul.w	r7, r7, ip
  40bd28:	fb02 7203 	mla	r2, r2, r3, r7
  40bd2c:	3280      	adds	r2, #128	; 0x80
  40bd2e:	eb02 2702 	add.w	r7, r2, r2, lsl #8
  40bd32:	eb02 12c7 	add.w	r2, r2, r7, lsl #7
  40bd36:	f3c2 6782 	ubfx	r7, r2, #26, #3
  40bd3a:	f367 0602 	bfi	r6, r7, #0, #3
  40bd3e:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  40bd42:	f362 364f 	bfi	r6, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40bd46:	f3c0 2004 	ubfx	r0, r0, #8, #5
  40bd4a:	f3c1 2104 	ubfx	r1, r1, #8, #5
  40bd4e:	fb01 fc0c 	mul.w	ip, r1, ip
  40bd52:	fb00 c303 	mla	r3, r0, r3, ip
  40bd56:	3380      	adds	r3, #128	; 0x80
  40bd58:	eb03 2c03 	add.w	ip, r3, r3, lsl #8
  40bd5c:	eb03 13cc 	add.w	r3, r3, ip, lsl #7
  40bd60:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40bd64:	f363 260c 	bfi	r6, r3, #8, #5
                            disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa_tmp);
  40bd68:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
                for(x = 0; x < draw_area_w; x++) {
  40bd6c:	f108 0801 	add.w	r8, r8, #1
  40bd70:	45d8      	cmp	r8, fp
  40bd72:	da0c      	bge.n	40bd8e <map_normal+0x782>
                    if(mask[x]) {
  40bd74:	46c6      	mov	lr, r8
  40bd76:	f81a 3008 	ldrb.w	r3, [sl, r8]
  40bd7a:	2b00      	cmp	r3, #0
  40bd7c:	d0f6      	beq.n	40bd6c <map_normal+0x760>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
  40bd7e:	2bfc      	cmp	r3, #252	; 0xfc
  40bd80:	d8ac      	bhi.n	40bcdc <map_normal+0x6d0>
  40bd82:	9a03      	ldr	r2, [sp, #12]
  40bd84:	fb03 f302 	mul.w	r3, r3, r2
  40bd88:	f3c3 2307 	ubfx	r3, r3, #8, #8
  40bd8c:	e7a7      	b.n	40bcde <map_normal+0x6d2>
                disp_buf_first += disp_w;
  40bd8e:	9b08      	ldr	r3, [sp, #32]
  40bd90:	eb04 0443 	add.w	r4, r4, r3, lsl #1
                mask += draw_area_w;
  40bd94:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40bd96:	449a      	add	sl, r3
                map_buf_first += map_w;
  40bd98:	9b07      	ldr	r3, [sp, #28]
  40bd9a:	eb05 0543 	add.w	r5, r5, r3, lsl #1
            for(y = 0; y < draw_area_h; y++) {
  40bd9e:	9b04      	ldr	r3, [sp, #16]
  40bda0:	3301      	adds	r3, #1
  40bda2:	9304      	str	r3, [sp, #16]
  40bda4:	9b04      	ldr	r3, [sp, #16]
  40bda6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40bda8:	4293      	cmp	r3, r2
  40bdaa:	f6bf acab 	bge.w	40b704 <map_normal+0xf8>
  40bdae:	f04f 0800 	mov.w	r8, #0
  40bdb2:	e7dd      	b.n	40bd70 <map_normal+0x764>
  40bdb4:	2300      	movs	r3, #0
  40bdb6:	9304      	str	r3, [sp, #16]
  40bdb8:	9703      	str	r7, [sp, #12]
  40bdba:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
  40bdbe:	e7f1      	b.n	40bda4 <map_normal+0x798>

0040bdc0 <fill_normal>:
{
  40bdc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40bdc4:	b091      	sub	sp, #68	; 0x44
  40bdc6:	4605      	mov	r5, r0
  40bdc8:	9103      	str	r1, [sp, #12]
  40bdca:	4616      	mov	r6, r2
  40bdcc:	920a      	str	r2, [sp, #40]	; 0x28
  40bdce:	461c      	mov	r4, r3
  40bdd0:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
  40bdd4:	9006      	str	r0, [sp, #24]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40bdd6:	4bc5      	ldr	r3, [pc, #788]	; (40c0ec <fill_normal+0x32c>)
  40bdd8:	4798      	blx	r3
  40bdda:	900b      	str	r0, [sp, #44]	; 0x2c
  40bddc:	88ab      	ldrh	r3, [r5, #4]
  40bdde:	882a      	ldrh	r2, [r5, #0]
  40bde0:	1a9b      	subs	r3, r3, r2
  40bde2:	b29b      	uxth	r3, r3
  40bde4:	3301      	adds	r3, #1
  40bde6:	b218      	sxth	r0, r3
  40bde8:	4605      	mov	r5, r0
  40bdea:	9008      	str	r0, [sp, #32]
  40bdec:	88b3      	ldrh	r3, [r6, #4]
  40bdee:	4630      	mov	r0, r6
  40bdf0:	f9b6 1000 	ldrsh.w	r1, [r6]
  40bdf4:	b28a      	uxth	r2, r1
  40bdf6:	1a9b      	subs	r3, r3, r2
  40bdf8:	b29b      	uxth	r3, r3
  40bdfa:	3301      	adds	r3, #1
  40bdfc:	b21b      	sxth	r3, r3
  40bdfe:	9307      	str	r3, [sp, #28]
    int32_t draw_area_w = lv_area_get_width(draw_area);
  40be00:	461e      	mov	r6, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40be02:	88c3      	ldrh	r3, [r0, #6]
  40be04:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
  40be08:	b290      	uxth	r0, r2
  40be0a:	1a1b      	subs	r3, r3, r0
  40be0c:	b29b      	uxth	r3, r3
  40be0e:	3301      	adds	r3, #1
  40be10:	b21b      	sxth	r3, r3
  40be12:	930d      	str	r3, [sp, #52]	; 0x34
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
  40be14:	4696      	mov	lr, r2
  40be16:	fb02 1205 	mla	r2, r2, r5, r1
  40be1a:	9b03      	ldr	r3, [sp, #12]
  40be1c:	eb03 0542 	add.w	r5, r3, r2, lsl #1
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40be20:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
  40be24:	2b01      	cmp	r3, #1
  40be26:	d00f      	beq.n	40be48 <fill_normal+0x88>
        last_dest_color.full = disp_buf_first[0].full;
  40be28:	9b03      	ldr	r3, [sp, #12]
  40be2a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  40be2e:	461a      	mov	r2, r3
        int32_t x_end4 = draw_area_w - 4;
  40be30:	9907      	ldr	r1, [sp, #28]
  40be32:	3904      	subs	r1, #4
  40be34:	9103      	str	r1, [sp, #12]
        if(opa > LV_OPA_MAX) {
  40be36:	9906      	ldr	r1, [sp, #24]
  40be38:	29fd      	cmp	r1, #253	; 0xfd
  40be3a:	f200 8335 	bhi.w	40c4a8 <fill_normal+0x6e8>
  40be3e:	f04f 0800 	mov.w	r8, #0
  40be42:	4641      	mov	r1, r8
  40be44:	46a3      	mov	fp, r4
  40be46:	e3a7      	b.n	40c598 <fill_normal+0x7d8>
        if(opa > LV_OPA_MAX) {
  40be48:	9b06      	ldr	r3, [sp, #24]
  40be4a:	2bfd      	cmp	r3, #253	; 0xfd
  40be4c:	d922      	bls.n	40be94 <fill_normal+0xd4>
            if(disp->driver.gpu_fill_cb && lv_area_get_size(draw_area) > GPU_SIZE_LIMIT) {
  40be4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40be50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40be52:	b123      	cbz	r3, 40be5e <fill_normal+0x9e>
  40be54:	980a      	ldr	r0, [sp, #40]	; 0x28
  40be56:	4ba6      	ldr	r3, [pc, #664]	; (40c0f0 <fill_normal+0x330>)
  40be58:	4798      	blx	r3
  40be5a:	28f0      	cmp	r0, #240	; 0xf0
  40be5c:	d804      	bhi.n	40be68 <fill_normal+0xa8>
{
  40be5e:	2600      	movs	r6, #0
  40be60:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  40be62:	f8dd 8020 	ldr.w	r8, [sp, #32]
  40be66:	e010      	b.n	40be8a <fill_normal+0xca>
                disp->driver.gpu_fill_cb(&disp->driver, disp_buf, disp_w, draw_area, color);
  40be68:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40be6a:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  40be6c:	f8ad 4000 	strh.w	r4, [sp]
  40be70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40be72:	9a08      	ldr	r2, [sp, #32]
  40be74:	9903      	ldr	r1, [sp, #12]
  40be76:	47a8      	blx	r5
                return;
  40be78:	e009      	b.n	40be8e <fill_normal+0xce>
                lv_color_fill(disp_buf_first, color, draw_area_w);
  40be7a:	9a07      	ldr	r2, [sp, #28]
  40be7c:	4621      	mov	r1, r4
  40be7e:	4628      	mov	r0, r5
  40be80:	4b9c      	ldr	r3, [pc, #624]	; (40c0f4 <fill_normal+0x334>)
  40be82:	4798      	blx	r3
                disp_buf_first += disp_w;
  40be84:	eb05 0548 	add.w	r5, r5, r8, lsl #1
            for(y = 0; y < draw_area_h; y++) {
  40be88:	3601      	adds	r6, #1
  40be8a:	42be      	cmp	r6, r7
  40be8c:	dbf5      	blt.n	40be7a <fill_normal+0xba>
}
  40be8e:	b011      	add	sp, #68	; 0x44
  40be90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(disp->driver.gpu_blend_cb && lv_area_get_size(draw_area) > GPU_SIZE_LIMIT) {
  40be94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40be96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40be98:	b123      	cbz	r3, 40bea4 <fill_normal+0xe4>
  40be9a:	980a      	ldr	r0, [sp, #40]	; 0x28
  40be9c:	4b94      	ldr	r3, [pc, #592]	; (40c0f0 <fill_normal+0x330>)
  40be9e:	4798      	blx	r3
  40bea0:	28f0      	cmp	r0, #240	; 0xf0
  40bea2:	d864      	bhi.n	40bf6e <fill_normal+0x1ae>
            lv_color_t last_dest_color = LV_COLOR_BLACK;
  40bea4:	f04f 0e00 	mov.w	lr, #0
  40bea8:	4670      	mov	r0, lr
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40beaa:	f3c4 03c4 	ubfx	r3, r4, #3, #5
  40beae:	9f06      	ldr	r7, [sp, #24]
  40beb0:	fb07 f303 	mul.w	r3, r7, r3
  40beb4:	3380      	adds	r3, #128	; 0x80
  40beb6:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40beba:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40bebe:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40bec2:	f04f 0200 	mov.w	r2, #0
  40bec6:	f363 02c7 	bfi	r2, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40beca:	f004 0107 	and.w	r1, r4, #7
  40bece:	f3c4 3342 	ubfx	r3, r4, #13, #3
  40bed2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  40bed6:	fb03 f307 	mul.w	r3, r3, r7
  40beda:	3380      	adds	r3, #128	; 0x80
  40bedc:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  40bee0:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  40bee4:	f3c3 6182 	ubfx	r1, r3, #26, #3
  40bee8:	f361 0202 	bfi	r2, r1, #0, #3
  40beec:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  40bef0:	f363 324f 	bfi	r2, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40bef4:	f3c4 2304 	ubfx	r3, r4, #8, #5
  40bef8:	fb03 f307 	mul.w	r3, r3, r7
  40befc:	3380      	adds	r3, #128	; 0x80
  40befe:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  40bf02:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  40bf06:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40bf0a:	f363 220c 	bfi	r2, r3, #8, #5
}

LV_ATTRIBUTE_FAST_MEM static inline void lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out)
{
#if LV_COLOR_DEPTH != 1
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
  40bf0e:	f3c4 01c4 	ubfx	r1, r4, #3, #5
  40bf12:	46bc      	mov	ip, r7
  40bf14:	b2bb      	uxth	r3, r7
  40bf16:	fb01 f103 	mul.w	r1, r1, r3
  40bf1a:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
  40bf1e:	f004 0707 	and.w	r7, r4, #7
  40bf22:	f3c4 3142 	ubfx	r1, r4, #13, #3
  40bf26:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
  40bf2a:	fb13 f101 	smulbb	r1, r3, r1
  40bf2e:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
  40bf32:	f3c4 2404 	ubfx	r4, r4, #8, #5
  40bf36:	fb03 f304 	mul.w	r3, r3, r4
  40bf3a:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
            lv_opa_t opa_inv = 255 - opa;
  40bf3e:	4661      	mov	r1, ip
  40bf40:	43cc      	mvns	r4, r1
  40bf42:	b2e4      	uxtb	r4, r4
  40bf44:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
  40bf48:	f8dd 8020 	ldr.w	r8, [sp, #32]
            for(y = 0; y < draw_area_h; y++) {
  40bf4c:	e069      	b.n	40c022 <fill_normal+0x262>
                for(x = 0; x < draw_area_w ; x++) blend_buf[x].full = color.full;
  40bf4e:	4a6a      	ldr	r2, [pc, #424]	; (40c0f8 <fill_normal+0x338>)
  40bf50:	f822 4013 	strh.w	r4, [r2, r3, lsl #1]
  40bf54:	3301      	adds	r3, #1
  40bf56:	42b3      	cmp	r3, r6
  40bf58:	dbf9      	blt.n	40bf4e <fill_normal+0x18e>
                for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40bf5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40bf5c:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
  40bf60:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  40bf62:	f8dd 9020 	ldr.w	r9, [sp, #32]
  40bf66:	4690      	mov	r8, r2
  40bf68:	f8dd a018 	ldr.w	sl, [sp, #24]
  40bf6c:	e00c      	b.n	40bf88 <fill_normal+0x1c8>
  40bf6e:	2300      	movs	r3, #0
  40bf70:	e7f1      	b.n	40bf56 <fill_normal+0x196>
                    disp->driver.gpu_blend_cb(&disp->driver, disp_buf_first, blend_buf, draw_area_w, opa);
  40bf72:	6ab7      	ldr	r7, [r6, #40]	; 0x28
  40bf74:	f8cd a000 	str.w	sl, [sp]
  40bf78:	9b07      	ldr	r3, [sp, #28]
  40bf7a:	4a5f      	ldr	r2, [pc, #380]	; (40c0f8 <fill_normal+0x338>)
  40bf7c:	4629      	mov	r1, r5
  40bf7e:	4630      	mov	r0, r6
  40bf80:	47b8      	blx	r7
                    disp_buf_first += disp_w;
  40bf82:	eb05 0549 	add.w	r5, r5, r9, lsl #1
                for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40bf86:	3401      	adds	r4, #1
  40bf88:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
  40bf8c:	429c      	cmp	r4, r3
  40bf8e:	ddf0      	ble.n	40bf72 <fill_normal+0x1b2>
  40bf90:	e77d      	b.n	40be8e <fill_normal+0xce>
                    disp_buf_first[x] = last_res_color;
  40bf92:	803a      	strh	r2, [r7, #0]
                for(x = 0; x < draw_area_w; x++) {
  40bf94:	3101      	adds	r1, #1
  40bf96:	42b1      	cmp	r1, r6
  40bf98:	da3f      	bge.n	40c01a <fill_normal+0x25a>
                    if(last_dest_color.full != disp_buf_first[x].full) {
  40bf9a:	b283      	uxth	r3, r0
  40bf9c:	eb05 0741 	add.w	r7, r5, r1, lsl #1
  40bfa0:	f835 9011 	ldrh.w	r9, [r5, r1, lsl #1]
  40bfa4:	454b      	cmp	r3, r9
  40bfa6:	d0f4      	beq.n	40bf92 <fill_normal+0x1d2>
                        last_dest_color = disp_buf_first[x];
  40bfa8:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix_premult(uint16_t * premult_c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40bfac:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
  40bfb0:	f3c0 03c4 	ubfx	r3, r0, #3, #5
  40bfb4:	fb04 2303 	mla	r3, r4, r3, r2
  40bfb8:	3380      	adds	r3, #128	; 0x80
  40bfba:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40bfbe:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40bfc2:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40bfc6:	f363 0ac7 	bfi	sl, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40bfca:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
  40bfce:	f000 0907 	and.w	r9, r0, #7
  40bfd2:	f3c0 3342 	ubfx	r3, r0, #13, #3
  40bfd6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
  40bfda:	fb03 2304 	mla	r3, r3, r4, r2
  40bfde:	3380      	adds	r3, #128	; 0x80
  40bfe0:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40bfe4:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40bfe8:	f3c3 6282 	ubfx	r2, r3, #26, #3
  40bfec:	f362 0a02 	bfi	sl, r2, #0, #3
  40bff0:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  40bff4:	f363 3a4f 	bfi	sl, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40bff8:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
  40bffc:	f3c0 2304 	ubfx	r3, r0, #8, #5
  40c000:	fb03 2304 	mla	r3, r3, r4, r2
  40c004:	3380      	adds	r3, #128	; 0x80
  40c006:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40c00a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40c00e:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40c012:	f363 2a0c 	bfi	sl, r3, #8, #5
  40c016:	4652      	mov	r2, sl
  40c018:	e7bb      	b.n	40bf92 <fill_normal+0x1d2>
                disp_buf_first += disp_w;
  40c01a:	eb05 0548 	add.w	r5, r5, r8, lsl #1
            for(y = 0; y < draw_area_h; y++) {
  40c01e:	f10e 0e01 	add.w	lr, lr, #1
  40c022:	45e6      	cmp	lr, ip
  40c024:	f6bf af33 	bge.w	40be8e <fill_normal+0xce>
  40c028:	2100      	movs	r1, #0
  40c02a:	e7b4      	b.n	40bf96 <fill_normal+0x1d6>
                    FILL_NORMAL_MASK_PX(x, color)
  40c02c:	f825 4013 	strh.w	r4, [r5, r3, lsl #1]
  40c030:	3201      	adds	r2, #1
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
  40c032:	3301      	adds	r3, #1
  40c034:	42b3      	cmp	r3, r6
  40c036:	f280 81c0 	bge.w	40c3ba <fill_normal+0x5fa>
  40c03a:	f012 0f03 	tst.w	r2, #3
  40c03e:	d04a      	beq.n	40c0d6 <fill_normal+0x316>
                    FILL_NORMAL_MASK_PX(x, color)
  40c040:	7811      	ldrb	r1, [r2, #0]
  40c042:	2900      	cmp	r1, #0
  40c044:	d0f4      	beq.n	40c030 <fill_normal+0x270>
  40c046:	29ff      	cmp	r1, #255	; 0xff
  40c048:	d0f0      	beq.n	40c02c <fill_normal+0x26c>
  40c04a:	f835 e013 	ldrh.w	lr, [r5, r3, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40c04e:	f3c4 00c4 	ubfx	r0, r4, #3, #5
  40c052:	f3ce 09c4 	ubfx	r9, lr, #3, #5
  40c056:	f1c1 0cff 	rsb	ip, r1, #255	; 0xff
  40c05a:	fb0c f909 	mul.w	r9, ip, r9
  40c05e:	fb01 9000 	mla	r0, r1, r0, r9
  40c062:	3080      	adds	r0, #128	; 0x80
  40c064:	eb00 2900 	add.w	r9, r0, r0, lsl #8
  40c068:	eb00 10c9 	add.w	r0, r0, r9, lsl #7
  40c06c:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40c070:	f360 07c7 	bfi	r7, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40c074:	f004 0007 	and.w	r0, r4, #7
  40c078:	f3c4 3942 	ubfx	r9, r4, #13, #3
  40c07c:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
  40c080:	f00e 0a07 	and.w	sl, lr, #7
  40c084:	f3ce 3942 	ubfx	r9, lr, #13, #3
  40c088:	eb09 09ca 	add.w	r9, r9, sl, lsl #3
  40c08c:	fb09 f90c 	mul.w	r9, r9, ip
  40c090:	fb00 9001 	mla	r0, r0, r1, r9
  40c094:	3080      	adds	r0, #128	; 0x80
  40c096:	eb00 2900 	add.w	r9, r0, r0, lsl #8
  40c09a:	eb00 10c9 	add.w	r0, r0, r9, lsl #7
  40c09e:	f3c0 6982 	ubfx	r9, r0, #26, #3
  40c0a2:	f369 0702 	bfi	r7, r9, #0, #3
  40c0a6:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40c0aa:	f360 374f 	bfi	r7, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40c0ae:	f3c4 2004 	ubfx	r0, r4, #8, #5
  40c0b2:	f3ce 2e04 	ubfx	lr, lr, #8, #5
  40c0b6:	fb0e fc0c 	mul.w	ip, lr, ip
  40c0ba:	fb00 c101 	mla	r1, r0, r1, ip
  40c0be:	3180      	adds	r1, #128	; 0x80
  40c0c0:	eb01 2001 	add.w	r0, r1, r1, lsl #8
  40c0c4:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  40c0c8:	f3c1 51c4 	ubfx	r1, r1, #23, #5
  40c0cc:	f361 270c 	bfi	r7, r1, #8, #5
  40c0d0:	f825 7013 	strh.w	r7, [r5, r3, lsl #1]
  40c0d4:	e7ac      	b.n	40c030 <fill_normal+0x270>
  40c0d6:	960a      	str	r6, [sp, #40]	; 0x28
  40c0d8:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
  40c0dc:	f8bd a026 	ldrh.w	sl, [sp, #38]	; 0x26
  40c0e0:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
  40c0e4:	f8ad 7032 	strh.w	r7, [sp, #50]	; 0x32
  40c0e8:	e015      	b.n	40c116 <fill_normal+0x356>
  40c0ea:	bf00      	nop
  40c0ec:	00409851 	.word	0x00409851
  40c0f0:	00415647 	.word	0x00415647
  40c0f4:	00415e51 	.word	0x00415e51
  40c0f8:	2040c434 	.word	0x2040c434
                            disp_buf_first[x] = color;
  40c0fc:	f825 4013 	strh.w	r4, [r5, r3, lsl #1]
                            disp_buf_first[x + 1] = color;
  40c100:	1c59      	adds	r1, r3, #1
  40c102:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
                            disp_buf_first[x + 2] = color;
  40c106:	1c99      	adds	r1, r3, #2
  40c108:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
                            disp_buf_first[x + 3] = color;
  40c10c:	1cd9      	adds	r1, r3, #3
  40c10e:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
                    mask32++;
  40c112:	3204      	adds	r2, #4
                for(; x <= x_end4; x += 4) {
  40c114:	3304      	adds	r3, #4
  40c116:	9903      	ldr	r1, [sp, #12]
  40c118:	428b      	cmp	r3, r1
  40c11a:	f300 8158 	bgt.w	40c3ce <fill_normal+0x60e>
                    if(*mask32) {
  40c11e:	6811      	ldr	r1, [r2, #0]
  40c120:	2900      	cmp	r1, #0
  40c122:	d0f6      	beq.n	40c112 <fill_normal+0x352>
                        if((*mask32) == 0xFFFFFFFF) {
  40c124:	f1b1 3fff 	cmp.w	r1, #4294967295
  40c128:	d0e8      	beq.n	40c0fc <fill_normal+0x33c>
                            FILL_NORMAL_MASK_PX(x, color)
  40c12a:	7811      	ldrb	r1, [r2, #0]
  40c12c:	2900      	cmp	r1, #0
  40c12e:	d047      	beq.n	40c1c0 <fill_normal+0x400>
  40c130:	29ff      	cmp	r1, #255	; 0xff
  40c132:	f000 8133 	beq.w	40c39c <fill_normal+0x5dc>
  40c136:	f835 6013 	ldrh.w	r6, [r5, r3, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40c13a:	f3c4 00c4 	ubfx	r0, r4, #3, #5
  40c13e:	f3c6 0cc4 	ubfx	ip, r6, #3, #5
  40c142:	f1c1 08ff 	rsb	r8, r1, #255	; 0xff
  40c146:	fb08 fc0c 	mul.w	ip, r8, ip
  40c14a:	fb01 c000 	mla	r0, r1, r0, ip
  40c14e:	3080      	adds	r0, #128	; 0x80
  40c150:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40c154:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40c158:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40c15c:	f360 0ec7 	bfi	lr, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40c160:	f004 0007 	and.w	r0, r4, #7
  40c164:	f3c4 3c42 	ubfx	ip, r4, #13, #3
  40c168:	eb0c 00c0 	add.w	r0, ip, r0, lsl #3
  40c16c:	f006 0907 	and.w	r9, r6, #7
  40c170:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  40c174:	eb0c 0cc9 	add.w	ip, ip, r9, lsl #3
  40c178:	fb0c fc08 	mul.w	ip, ip, r8
  40c17c:	fb00 c001 	mla	r0, r0, r1, ip
  40c180:	3080      	adds	r0, #128	; 0x80
  40c182:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40c186:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40c18a:	f3c0 6c82 	ubfx	ip, r0, #26, #3
  40c18e:	f36c 0e02 	bfi	lr, ip, #0, #3
  40c192:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40c196:	f360 3e4f 	bfi	lr, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40c19a:	f3c4 2004 	ubfx	r0, r4, #8, #5
  40c19e:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40c1a2:	fb06 f608 	mul.w	r6, r6, r8
  40c1a6:	fb00 6601 	mla	r6, r0, r1, r6
  40c1aa:	3680      	adds	r6, #128	; 0x80
  40c1ac:	eb06 2006 	add.w	r0, r6, r6, lsl #8
  40c1b0:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
  40c1b4:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  40c1b8:	f366 2e0c 	bfi	lr, r6, #8, #5
  40c1bc:	f825 e013 	strh.w	lr, [r5, r3, lsl #1]
                            FILL_NORMAL_MASK_PX(x + 1, color)
  40c1c0:	7851      	ldrb	r1, [r2, #1]
  40c1c2:	2900      	cmp	r1, #0
  40c1c4:	d04f      	beq.n	40c266 <fill_normal+0x4a6>
  40c1c6:	29ff      	cmp	r1, #255	; 0xff
  40c1c8:	f000 80eb 	beq.w	40c3a2 <fill_normal+0x5e2>
  40c1cc:	f103 0901 	add.w	r9, r3, #1
  40c1d0:	f835 6019 	ldrh.w	r6, [r5, r9, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40c1d4:	f3c4 00c4 	ubfx	r0, r4, #3, #5
  40c1d8:	f3c6 0cc4 	ubfx	ip, r6, #3, #5
  40c1dc:	f1c1 08ff 	rsb	r8, r1, #255	; 0xff
  40c1e0:	fb08 fc0c 	mul.w	ip, r8, ip
  40c1e4:	fb01 c000 	mla	r0, r1, r0, ip
  40c1e8:	3080      	adds	r0, #128	; 0x80
  40c1ea:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40c1ee:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40c1f2:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40c1f6:	9f04      	ldr	r7, [sp, #16]
  40c1f8:	f360 07c7 	bfi	r7, r0, #3, #5
  40c1fc:	9704      	str	r7, [sp, #16]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40c1fe:	f004 0007 	and.w	r0, r4, #7
  40c202:	f3c4 3c42 	ubfx	ip, r4, #13, #3
  40c206:	eb0c 00c0 	add.w	r0, ip, r0, lsl #3
  40c20a:	f006 0707 	and.w	r7, r6, #7
  40c20e:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  40c212:	eb0c 0cc7 	add.w	ip, ip, r7, lsl #3
  40c216:	fb0c fc08 	mul.w	ip, ip, r8
  40c21a:	fb00 c001 	mla	r0, r0, r1, ip
  40c21e:	3080      	adds	r0, #128	; 0x80
  40c220:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40c224:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40c228:	f3c0 6c82 	ubfx	ip, r0, #26, #3
  40c22c:	9f04      	ldr	r7, [sp, #16]
  40c22e:	f36c 0702 	bfi	r7, ip, #0, #3
  40c232:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40c236:	f360 374f 	bfi	r7, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40c23a:	f3c4 2004 	ubfx	r0, r4, #8, #5
  40c23e:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40c242:	fb06 f608 	mul.w	r6, r6, r8
  40c246:	fb00 6601 	mla	r6, r0, r1, r6
  40c24a:	3680      	adds	r6, #128	; 0x80
  40c24c:	eb06 2006 	add.w	r0, r6, r6, lsl #8
  40c250:	eb06 10c0 	add.w	r0, r6, r0, lsl #7
  40c254:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40c258:	4639      	mov	r1, r7
  40c25a:	f360 210c 	bfi	r1, r0, #8, #5
  40c25e:	f8ad 1010 	strh.w	r1, [sp, #16]
  40c262:	f825 1019 	strh.w	r1, [r5, r9, lsl #1]
                            FILL_NORMAL_MASK_PX(x + 2, color)
  40c266:	7891      	ldrb	r1, [r2, #2]
  40c268:	2900      	cmp	r1, #0
  40c26a:	d049      	beq.n	40c300 <fill_normal+0x540>
  40c26c:	29ff      	cmp	r1, #255	; 0xff
  40c26e:	f000 809c 	beq.w	40c3aa <fill_normal+0x5ea>
  40c272:	f103 0902 	add.w	r9, r3, #2
  40c276:	f835 6019 	ldrh.w	r6, [r5, r9, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40c27a:	f3c4 00c4 	ubfx	r0, r4, #3, #5
  40c27e:	f3c6 0cc4 	ubfx	ip, r6, #3, #5
  40c282:	f1c1 08ff 	rsb	r8, r1, #255	; 0xff
  40c286:	fb08 fc0c 	mul.w	ip, r8, ip
  40c28a:	fb01 c000 	mla	r0, r1, r0, ip
  40c28e:	3080      	adds	r0, #128	; 0x80
  40c290:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40c294:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40c298:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40c29c:	f360 0ac7 	bfi	sl, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40c2a0:	f004 0007 	and.w	r0, r4, #7
  40c2a4:	f3c4 3c42 	ubfx	ip, r4, #13, #3
  40c2a8:	eb0c 00c0 	add.w	r0, ip, r0, lsl #3
  40c2ac:	f006 0707 	and.w	r7, r6, #7
  40c2b0:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  40c2b4:	eb0c 0cc7 	add.w	ip, ip, r7, lsl #3
  40c2b8:	fb0c fc08 	mul.w	ip, ip, r8
  40c2bc:	fb00 c001 	mla	r0, r0, r1, ip
  40c2c0:	3080      	adds	r0, #128	; 0x80
  40c2c2:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40c2c6:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40c2ca:	f3c0 6c82 	ubfx	ip, r0, #26, #3
  40c2ce:	f36c 0a02 	bfi	sl, ip, #0, #3
  40c2d2:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40c2d6:	f360 3a4f 	bfi	sl, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40c2da:	f3c4 2004 	ubfx	r0, r4, #8, #5
  40c2de:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40c2e2:	fb06 f608 	mul.w	r6, r6, r8
  40c2e6:	fb00 6601 	mla	r6, r0, r1, r6
  40c2ea:	3680      	adds	r6, #128	; 0x80
  40c2ec:	eb06 2006 	add.w	r0, r6, r6, lsl #8
  40c2f0:	eb06 10c0 	add.w	r0, r6, r0, lsl #7
  40c2f4:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40c2f8:	f360 2a0c 	bfi	sl, r0, #8, #5
  40c2fc:	f825 a019 	strh.w	sl, [r5, r9, lsl #1]
                            FILL_NORMAL_MASK_PX(x + 3, color)
  40c300:	78d1      	ldrb	r1, [r2, #3]
  40c302:	2900      	cmp	r1, #0
  40c304:	f43f af05 	beq.w	40c112 <fill_normal+0x352>
  40c308:	29ff      	cmp	r1, #255	; 0xff
  40c30a:	d052      	beq.n	40c3b2 <fill_normal+0x5f2>
  40c30c:	f103 0903 	add.w	r9, r3, #3
  40c310:	f835 6019 	ldrh.w	r6, [r5, r9, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40c314:	f3c4 00c4 	ubfx	r0, r4, #3, #5
  40c318:	f3c6 0cc4 	ubfx	ip, r6, #3, #5
  40c31c:	f1c1 08ff 	rsb	r8, r1, #255	; 0xff
  40c320:	fb08 fc0c 	mul.w	ip, r8, ip
  40c324:	fb01 c000 	mla	r0, r1, r0, ip
  40c328:	3080      	adds	r0, #128	; 0x80
  40c32a:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40c32e:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40c332:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40c336:	f360 0bc7 	bfi	fp, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40c33a:	f004 0007 	and.w	r0, r4, #7
  40c33e:	f3c4 3c42 	ubfx	ip, r4, #13, #3
  40c342:	eb0c 00c0 	add.w	r0, ip, r0, lsl #3
  40c346:	f006 0707 	and.w	r7, r6, #7
  40c34a:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  40c34e:	eb0c 0cc7 	add.w	ip, ip, r7, lsl #3
  40c352:	fb0c fc08 	mul.w	ip, ip, r8
  40c356:	fb00 c001 	mla	r0, r0, r1, ip
  40c35a:	3080      	adds	r0, #128	; 0x80
  40c35c:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40c360:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40c364:	f3c0 6c82 	ubfx	ip, r0, #26, #3
  40c368:	f36c 0b02 	bfi	fp, ip, #0, #3
  40c36c:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40c370:	f360 3b4f 	bfi	fp, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40c374:	f3c4 2004 	ubfx	r0, r4, #8, #5
  40c378:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40c37c:	fb06 f608 	mul.w	r6, r6, r8
  40c380:	fb00 6601 	mla	r6, r0, r1, r6
  40c384:	3680      	adds	r6, #128	; 0x80
  40c386:	eb06 2006 	add.w	r0, r6, r6, lsl #8
  40c38a:	eb06 10c0 	add.w	r0, r6, r0, lsl #7
  40c38e:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40c392:	f360 2b0c 	bfi	fp, r0, #8, #5
  40c396:	f825 b019 	strh.w	fp, [r5, r9, lsl #1]
  40c39a:	e6ba      	b.n	40c112 <fill_normal+0x352>
                            FILL_NORMAL_MASK_PX(x, color)
  40c39c:	f825 4013 	strh.w	r4, [r5, r3, lsl #1]
  40c3a0:	e70e      	b.n	40c1c0 <fill_normal+0x400>
                            FILL_NORMAL_MASK_PX(x + 1, color)
  40c3a2:	1c59      	adds	r1, r3, #1
  40c3a4:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
  40c3a8:	e75d      	b.n	40c266 <fill_normal+0x4a6>
                            FILL_NORMAL_MASK_PX(x + 2, color)
  40c3aa:	1c99      	adds	r1, r3, #2
  40c3ac:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
  40c3b0:	e7a6      	b.n	40c300 <fill_normal+0x540>
                            FILL_NORMAL_MASK_PX(x + 3, color)
  40c3b2:	1cd9      	adds	r1, r3, #3
  40c3b4:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
  40c3b8:	e6ab      	b.n	40c112 <fill_normal+0x352>
  40c3ba:	960a      	str	r6, [sp, #40]	; 0x28
  40c3bc:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
  40c3c0:	f8bd a026 	ldrh.w	sl, [sp, #38]	; 0x26
  40c3c4:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
  40c3c8:	f8ad 7032 	strh.w	r7, [sp, #50]	; 0x32
  40c3cc:	e6a3      	b.n	40c116 <fill_normal+0x356>
  40c3ce:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  40c3d0:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  40c3d4:	f8ad a026 	strh.w	sl, [sp, #38]	; 0x26
  40c3d8:	f8ad e030 	strh.w	lr, [sp, #48]	; 0x30
  40c3dc:	f8bd 7032 	ldrh.w	r7, [sp, #50]	; 0x32
  40c3e0:	e003      	b.n	40c3ea <fill_normal+0x62a>
                    FILL_NORMAL_MASK_PX(x, color)
  40c3e2:	f825 4013 	strh.w	r4, [r5, r3, lsl #1]
  40c3e6:	3201      	adds	r2, #1
                for(; x < draw_area_w ; x++) {
  40c3e8:	3301      	adds	r3, #1
  40c3ea:	42b3      	cmp	r3, r6
  40c3ec:	da4a      	bge.n	40c484 <fill_normal+0x6c4>
                    FILL_NORMAL_MASK_PX(x, color)
  40c3ee:	7811      	ldrb	r1, [r2, #0]
  40c3f0:	2900      	cmp	r1, #0
  40c3f2:	d0f8      	beq.n	40c3e6 <fill_normal+0x626>
  40c3f4:	29ff      	cmp	r1, #255	; 0xff
  40c3f6:	d0f4      	beq.n	40c3e2 <fill_normal+0x622>
  40c3f8:	f835 e013 	ldrh.w	lr, [r5, r3, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40c3fc:	f3c4 00c4 	ubfx	r0, r4, #3, #5
  40c400:	f3ce 09c4 	ubfx	r9, lr, #3, #5
  40c404:	f1c1 0cff 	rsb	ip, r1, #255	; 0xff
  40c408:	fb0c f909 	mul.w	r9, ip, r9
  40c40c:	fb01 9000 	mla	r0, r1, r0, r9
  40c410:	3080      	adds	r0, #128	; 0x80
  40c412:	eb00 2900 	add.w	r9, r0, r0, lsl #8
  40c416:	eb00 10c9 	add.w	r0, r0, r9, lsl #7
  40c41a:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40c41e:	f360 08c7 	bfi	r8, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40c422:	f004 0007 	and.w	r0, r4, #7
  40c426:	f3c4 3942 	ubfx	r9, r4, #13, #3
  40c42a:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
  40c42e:	f00e 0a07 	and.w	sl, lr, #7
  40c432:	f3ce 3942 	ubfx	r9, lr, #13, #3
  40c436:	eb09 09ca 	add.w	r9, r9, sl, lsl #3
  40c43a:	fb09 f90c 	mul.w	r9, r9, ip
  40c43e:	fb00 9001 	mla	r0, r0, r1, r9
  40c442:	3080      	adds	r0, #128	; 0x80
  40c444:	eb00 2900 	add.w	r9, r0, r0, lsl #8
  40c448:	eb00 10c9 	add.w	r0, r0, r9, lsl #7
  40c44c:	f3c0 6982 	ubfx	r9, r0, #26, #3
  40c450:	f369 0802 	bfi	r8, r9, #0, #3
  40c454:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40c458:	f360 384f 	bfi	r8, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40c45c:	f3c4 2004 	ubfx	r0, r4, #8, #5
  40c460:	f3ce 2e04 	ubfx	lr, lr, #8, #5
  40c464:	fb0e fc0c 	mul.w	ip, lr, ip
  40c468:	fb00 c101 	mla	r1, r0, r1, ip
  40c46c:	3180      	adds	r1, #128	; 0x80
  40c46e:	eb01 2001 	add.w	r0, r1, r1, lsl #8
  40c472:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  40c476:	f3c1 51c4 	ubfx	r1, r1, #23, #5
  40c47a:	f361 280c 	bfi	r8, r1, #8, #5
  40c47e:	f825 8013 	strh.w	r8, [r5, r3, lsl #1]
  40c482:	e7b0      	b.n	40c3e6 <fill_normal+0x626>
                disp_buf_first += disp_w;
  40c484:	9b08      	ldr	r3, [sp, #32]
  40c486:	eb05 0543 	add.w	r5, r5, r3, lsl #1
                mask += draw_area_w;
  40c48a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40c48c:	9a07      	ldr	r2, [sp, #28]
  40c48e:	4413      	add	r3, r2
  40c490:	931b      	str	r3, [sp, #108]	; 0x6c
            for(y = 0; y < draw_area_h; y++) {
  40c492:	9b06      	ldr	r3, [sp, #24]
  40c494:	3301      	adds	r3, #1
  40c496:	9306      	str	r3, [sp, #24]
  40c498:	9b06      	ldr	r3, [sp, #24]
  40c49a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40c49c:	4293      	cmp	r3, r2
  40c49e:	f6bf acf6 	bge.w	40be8e <fill_normal+0xce>
  40c4a2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  40c4a4:	2300      	movs	r3, #0
  40c4a6:	e5c5      	b.n	40c034 <fill_normal+0x274>
  40c4a8:	2300      	movs	r3, #0
  40c4aa:	9306      	str	r3, [sp, #24]
  40c4ac:	e7f4      	b.n	40c498 <fill_normal+0x6d8>
                                                                   (uint32_t)((uint32_t)(*mask_tmp_x) * opa) >> 8;
  40c4ae:	9c06      	ldr	r4, [sp, #24]
  40c4b0:	fb00 f804 	mul.w	r8, r0, r4
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
  40c4b4:	f3c8 2807 	ubfx	r8, r8, #8, #8
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
  40c4b8:	4281      	cmp	r1, r0
  40c4ba:	d05c      	beq.n	40c576 <fill_normal+0x7b6>
                                if(opa_tmp == LV_OPA_COVER) last_res_color = color;
  40c4bc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
  40c4c0:	d05f      	beq.n	40c582 <fill_normal+0x7c2>
  40c4c2:	f835 201c 	ldrh.w	r2, [r5, ip, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40c4c6:	f3cb 03c4 	ubfx	r3, fp, #3, #5
  40c4ca:	f3c2 01c4 	ubfx	r1, r2, #3, #5
  40c4ce:	f1c8 04ff 	rsb	r4, r8, #255	; 0xff
  40c4d2:	fb04 f101 	mul.w	r1, r4, r1
  40c4d6:	fb08 1303 	mla	r3, r8, r3, r1
  40c4da:	3380      	adds	r3, #128	; 0x80
  40c4dc:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  40c4e0:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  40c4e4:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40c4e8:	f363 09c7 	bfi	r9, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40c4ec:	f00b 0307 	and.w	r3, fp, #7
  40c4f0:	f3cb 3142 	ubfx	r1, fp, #13, #3
  40c4f4:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
  40c4f8:	f002 0707 	and.w	r7, r2, #7
  40c4fc:	f3c2 3142 	ubfx	r1, r2, #13, #3
  40c500:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
  40c504:	fb01 f104 	mul.w	r1, r1, r4
  40c508:	fb03 1308 	mla	r3, r3, r8, r1
  40c50c:	3380      	adds	r3, #128	; 0x80
  40c50e:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  40c512:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  40c516:	f3c3 6182 	ubfx	r1, r3, #26, #3
  40c51a:	f361 0902 	bfi	r9, r1, #0, #3
  40c51e:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  40c522:	f363 394f 	bfi	r9, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40c526:	f3cb 2304 	ubfx	r3, fp, #8, #5
  40c52a:	f3c2 2204 	ubfx	r2, r2, #8, #5
  40c52e:	fb02 f204 	mul.w	r2, r2, r4
  40c532:	fb03 2408 	mla	r4, r3, r8, r2
  40c536:	3480      	adds	r4, #128	; 0x80
  40c538:	eb04 2304 	add.w	r3, r4, r4, lsl #8
  40c53c:	eb04 14c3 	add.w	r4, r4, r3, lsl #7
  40c540:	f3c4 54c4 	ubfx	r4, r4, #23, #5
  40c544:	f364 290c 	bfi	r9, r4, #8, #5
  40c548:	464b      	mov	r3, r9
                            last_dest_color.full = disp_buf_first[x].full;
  40c54a:	f835 201c 	ldrh.w	r2, [r5, ip, lsl #1]
                            last_mask = *mask_tmp_x;
  40c54e:	4601      	mov	r1, r0
                        disp_buf_first[x] = last_res_color;
  40c550:	f825 301c 	strh.w	r3, [r5, ip, lsl #1]
                    mask_tmp_x++;
  40c554:	f10a 0a01 	add.w	sl, sl, #1
                for(x = 0; x < draw_area_w; x++) {
  40c558:	f10c 0c01 	add.w	ip, ip, #1
  40c55c:	45b4      	cmp	ip, r6
  40c55e:	da12      	bge.n	40c586 <fill_normal+0x7c6>
                    if(*mask_tmp_x) {
  40c560:	f89a 0000 	ldrb.w	r0, [sl]
  40c564:	2800      	cmp	r0, #0
  40c566:	d0f5      	beq.n	40c554 <fill_normal+0x794>
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
  40c568:	4281      	cmp	r1, r0
  40c56a:	d0a5      	beq.n	40c4b8 <fill_normal+0x6f8>
  40c56c:	28ff      	cmp	r0, #255	; 0xff
  40c56e:	d19e      	bne.n	40c4ae <fill_normal+0x6ee>
  40c570:	f8dd 8018 	ldr.w	r8, [sp, #24]
  40c574:	e7a0      	b.n	40c4b8 <fill_normal+0x6f8>
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
  40c576:	b294      	uxth	r4, r2
  40c578:	f835 701c 	ldrh.w	r7, [r5, ip, lsl #1]
  40c57c:	42bc      	cmp	r4, r7
  40c57e:	d19d      	bne.n	40c4bc <fill_normal+0x6fc>
  40c580:	e7e6      	b.n	40c550 <fill_normal+0x790>
                                if(opa_tmp == LV_OPA_COVER) last_res_color = color;
  40c582:	465b      	mov	r3, fp
  40c584:	e7e1      	b.n	40c54a <fill_normal+0x78a>
                disp_buf_first += disp_w;
  40c586:	9808      	ldr	r0, [sp, #32]
  40c588:	eb05 0540 	add.w	r5, r5, r0, lsl #1
                mask += draw_area_w;
  40c58c:	981b      	ldr	r0, [sp, #108]	; 0x6c
  40c58e:	9c07      	ldr	r4, [sp, #28]
  40c590:	4420      	add	r0, r4
  40c592:	901b      	str	r0, [sp, #108]	; 0x6c
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40c594:	f10e 0e01 	add.w	lr, lr, #1
  40c598:	980a      	ldr	r0, [sp, #40]	; 0x28
  40c59a:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
  40c59e:	4586      	cmp	lr, r0
  40c5a0:	f73f ac75 	bgt.w	40be8e <fill_normal+0xce>
  40c5a4:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
  40c5a8:	f04f 0c00 	mov.w	ip, #0
  40c5ac:	e7d6      	b.n	40c55c <fill_normal+0x79c>
  40c5ae:	bf00      	nop

0040c5b0 <color_blend_true_color_additive>:

static inline lv_color_t color_blend_true_color_additive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{

    if(opa <= LV_OPA_MIN) return bg;
  40c5b0:	2a02      	cmp	r2, #2
  40c5b2:	d972      	bls.n	40c69a <color_blend_true_color_additive+0xea>
{
  40c5b4:	b4f0      	push	{r4, r5, r6, r7}
    uint32_t tmp;
#if LV_COLOR_DEPTH == 1
    tmp = bg.full + fg.full;
    fg.full = LV_MATH_MIN(tmp, 1);
#else
    tmp = bg.ch.red + fg.ch.red;
  40c5b6:	f3c1 03c4 	ubfx	r3, r1, #3, #5
  40c5ba:	f3c0 04c4 	ubfx	r4, r0, #3, #5
  40c5be:	4423      	add	r3, r4
#if LV_COLOR_DEPTH == 8
    fg.ch.red = LV_MATH_MIN(tmp, 7);
#elif LV_COLOR_DEPTH == 16
    fg.ch.red = LV_MATH_MIN(tmp, 31);
  40c5c0:	2b1f      	cmp	r3, #31
  40c5c2:	bf28      	it	cs
  40c5c4:	231f      	movcs	r3, #31
  40c5c6:	f363 00c7 	bfi	r0, r3, #3, #5
#elif LV_COLOR_DEPTH == 16
#if LV_COLOR_16_SWAP == 0
    tmp = bg.ch.green + fg.ch.green;
    fg.ch.green = LV_MATH_MIN(tmp, 63);
#else
    tmp = (bg.ch.green_h << 3) + bg.ch.green_l + (fg.ch.green_h << 3) + fg.ch.green_l;
  40c5ca:	f001 0307 	and.w	r3, r1, #7
  40c5ce:	f3c1 3442 	ubfx	r4, r1, #13, #3
  40c5d2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  40c5d6:	f000 0407 	and.w	r4, r0, #7
  40c5da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  40c5de:	f3c0 3442 	ubfx	r4, r0, #13, #3
  40c5e2:	4423      	add	r3, r4
    tmp = LV_MATH_MIN(tmp, 63);
  40c5e4:	2b3f      	cmp	r3, #63	; 0x3f
  40c5e6:	bf28      	it	cs
  40c5e8:	233f      	movcs	r3, #63	; 0x3f
    fg.ch.green_h = tmp >> 3;
  40c5ea:	f3c3 04c2 	ubfx	r4, r3, #3, #3
  40c5ee:	f364 0002 	bfi	r0, r4, #0, #3
    fg.ch.green_l = tmp & 0x7;
  40c5f2:	f363 304f 	bfi	r0, r3, #13, #3

#elif LV_COLOR_DEPTH == 32
    fg.ch.green = LV_MATH_MIN(tmp, 255);
#endif

    tmp = bg.ch.blue + fg.ch.blue;
  40c5f6:	f3c1 2304 	ubfx	r3, r1, #8, #5
  40c5fa:	f3c0 2404 	ubfx	r4, r0, #8, #5
  40c5fe:	4423      	add	r3, r4
#if LV_COLOR_DEPTH == 8
    fg.ch.blue = LV_MATH_MIN(tmp, 4);
#elif LV_COLOR_DEPTH == 16
    fg.ch.blue = LV_MATH_MIN(tmp, 31);
  40c600:	2b1f      	cmp	r3, #31
  40c602:	bf28      	it	cs
  40c604:	231f      	movcs	r3, #31
  40c606:	f363 200c 	bfi	r0, r3, #8, #5
#elif LV_COLOR_DEPTH == 32
    fg.ch.blue = LV_MATH_MIN(tmp, 255);
#endif
#endif

    if(opa == LV_OPA_COVER) return fg;
  40c60a:	2aff      	cmp	r2, #255	; 0xff
  40c60c:	d043      	beq.n	40c696 <color_blend_true_color_additive+0xe6>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40c60e:	f3c0 03c4 	ubfx	r3, r0, #3, #5
  40c612:	f3c1 04c4 	ubfx	r4, r1, #3, #5
  40c616:	f1c2 06ff 	rsb	r6, r2, #255	; 0xff
  40c61a:	fb06 f404 	mul.w	r4, r6, r4
  40c61e:	fb02 4303 	mla	r3, r2, r3, r4
  40c622:	3380      	adds	r3, #128	; 0x80
  40c624:	eb03 2403 	add.w	r4, r3, r3, lsl #8
  40c628:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
  40c62c:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40c630:	f04f 0500 	mov.w	r5, #0
  40c634:	f363 05c7 	bfi	r5, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40c638:	f000 0407 	and.w	r4, r0, #7
  40c63c:	f3c0 3342 	ubfx	r3, r0, #13, #3
  40c640:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  40c644:	f001 0707 	and.w	r7, r1, #7
  40c648:	f3c1 3442 	ubfx	r4, r1, #13, #3
  40c64c:	eb04 04c7 	add.w	r4, r4, r7, lsl #3
  40c650:	fb04 f406 	mul.w	r4, r4, r6
  40c654:	fb03 4302 	mla	r3, r3, r2, r4
  40c658:	3380      	adds	r3, #128	; 0x80
  40c65a:	eb03 2403 	add.w	r4, r3, r3, lsl #8
  40c65e:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
  40c662:	f3c3 6482 	ubfx	r4, r3, #26, #3
  40c666:	f364 0502 	bfi	r5, r4, #0, #3
  40c66a:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  40c66e:	f363 354f 	bfi	r5, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40c672:	f3c0 2304 	ubfx	r3, r0, #8, #5
  40c676:	f3c1 2404 	ubfx	r4, r1, #8, #5
  40c67a:	fb04 f406 	mul.w	r4, r4, r6
  40c67e:	fb03 4202 	mla	r2, r3, r2, r4
  40c682:	3280      	adds	r2, #128	; 0x80
  40c684:	eb02 2302 	add.w	r3, r2, r2, lsl #8
  40c688:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
  40c68c:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  40c690:	f362 250c 	bfi	r5, r2, #8, #5
  40c694:	4628      	mov	r0, r5

    return lv_color_mix(fg, bg, opa);
}
  40c696:	bcf0      	pop	{r4, r5, r6, r7}
  40c698:	4770      	bx	lr
    if(opa <= LV_OPA_MIN) return bg;
  40c69a:	4608      	mov	r0, r1
  40c69c:	4770      	bx	lr

0040c69e <color_blend_true_color_subtractive>:

static inline lv_color_t color_blend_true_color_subtractive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{

    if(opa <= LV_OPA_MIN) return bg;
  40c69e:	2a02      	cmp	r2, #2
  40c6a0:	d96f      	bls.n	40c782 <color_blend_true_color_subtractive+0xe4>
{
  40c6a2:	b4f0      	push	{r4, r5, r6, r7}

    int32_t tmp;
    tmp = bg.ch.red - fg.ch.red;
  40c6a4:	f3c1 03c4 	ubfx	r3, r1, #3, #5
  40c6a8:	f3c0 04c4 	ubfx	r4, r0, #3, #5
  40c6ac:	1b1b      	subs	r3, r3, r4
    fg.ch.red = LV_MATH_MAX(tmp, 0);
  40c6ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40c6b2:	f363 00c7 	bfi	r0, r3, #3, #5

#if LV_COLOR_16_SWAP == 0
    tmp = bg.ch.green - fg.ch.green;
    fg.ch.green = LV_MATH_MAX(tmp, 0);
#else
    tmp = (bg.ch.green_h << 3) + bg.ch.green_l + (fg.ch.green_h << 3) + fg.ch.green_l;
  40c6b6:	f001 0307 	and.w	r3, r1, #7
  40c6ba:	f3c1 3442 	ubfx	r4, r1, #13, #3
  40c6be:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  40c6c2:	f000 0407 	and.w	r4, r0, #7
  40c6c6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  40c6ca:	f3c0 3442 	ubfx	r4, r0, #13, #3
  40c6ce:	4423      	add	r3, r4
    tmp = LV_MATH_MAX(tmp, 0);
  40c6d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    fg.ch.green_h = tmp >> 3;
  40c6d4:	f3c3 04c2 	ubfx	r4, r3, #3, #3
  40c6d8:	f364 0002 	bfi	r0, r4, #0, #3
    fg.ch.green_l = tmp & 0x7;
  40c6dc:	f363 304f 	bfi	r0, r3, #13, #3
#endif

    tmp = bg.ch.blue - fg.ch.blue;
  40c6e0:	f3c1 2304 	ubfx	r3, r1, #8, #5
  40c6e4:	f3c0 2404 	ubfx	r4, r0, #8, #5
  40c6e8:	1b1b      	subs	r3, r3, r4
    fg.ch.blue = LV_MATH_MAX(tmp, 0);
  40c6ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40c6ee:	f363 200c 	bfi	r0, r3, #8, #5

    if(opa == LV_OPA_COVER) return fg;
  40c6f2:	2aff      	cmp	r2, #255	; 0xff
  40c6f4:	d043      	beq.n	40c77e <color_blend_true_color_subtractive+0xe0>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40c6f6:	f3c0 03c4 	ubfx	r3, r0, #3, #5
  40c6fa:	f3c1 04c4 	ubfx	r4, r1, #3, #5
  40c6fe:	f1c2 06ff 	rsb	r6, r2, #255	; 0xff
  40c702:	fb06 f404 	mul.w	r4, r6, r4
  40c706:	fb02 4303 	mla	r3, r2, r3, r4
  40c70a:	3380      	adds	r3, #128	; 0x80
  40c70c:	eb03 2403 	add.w	r4, r3, r3, lsl #8
  40c710:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
  40c714:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40c718:	f04f 0500 	mov.w	r5, #0
  40c71c:	f363 05c7 	bfi	r5, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40c720:	f000 0407 	and.w	r4, r0, #7
  40c724:	f3c0 3342 	ubfx	r3, r0, #13, #3
  40c728:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  40c72c:	f001 0707 	and.w	r7, r1, #7
  40c730:	f3c1 3442 	ubfx	r4, r1, #13, #3
  40c734:	eb04 04c7 	add.w	r4, r4, r7, lsl #3
  40c738:	fb04 f406 	mul.w	r4, r4, r6
  40c73c:	fb03 4302 	mla	r3, r3, r2, r4
  40c740:	3380      	adds	r3, #128	; 0x80
  40c742:	eb03 2403 	add.w	r4, r3, r3, lsl #8
  40c746:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
  40c74a:	f3c3 6482 	ubfx	r4, r3, #26, #3
  40c74e:	f364 0502 	bfi	r5, r4, #0, #3
  40c752:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  40c756:	f363 354f 	bfi	r5, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40c75a:	f3c0 2304 	ubfx	r3, r0, #8, #5
  40c75e:	f3c1 2404 	ubfx	r4, r1, #8, #5
  40c762:	fb04 f406 	mul.w	r4, r4, r6
  40c766:	fb03 4202 	mla	r2, r3, r2, r4
  40c76a:	3280      	adds	r2, #128	; 0x80
  40c76c:	eb02 2302 	add.w	r3, r2, r2, lsl #8
  40c770:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
  40c774:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  40c778:	f362 250c 	bfi	r5, r2, #8, #5
  40c77c:	4628      	mov	r0, r5

    return lv_color_mix(fg, bg, opa);
}
  40c77e:	bcf0      	pop	{r4, r5, r6, r7}
  40c780:	4770      	bx	lr
    if(opa <= LV_OPA_MIN) return bg;
  40c782:	4608      	mov	r0, r1
  40c784:	4770      	bx	lr
	...

0040c788 <fill_blended>:
{
  40c788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c78c:	b085      	sub	sp, #20
  40c78e:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
  40c792:	9400      	str	r4, [sp, #0]
  40c794:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40c798:	8884      	ldrh	r4, [r0, #4]
  40c79a:	8800      	ldrh	r0, [r0, #0]
  40c79c:	1a20      	subs	r0, r4, r0
  40c79e:	b280      	uxth	r0, r0
  40c7a0:	3001      	adds	r0, #1
  40c7a2:	b200      	sxth	r0, r0
  40c7a4:	9002      	str	r0, [sp, #8]
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
  40c7a6:	f9b2 b002 	ldrsh.w	fp, [r2, #2]
  40c7aa:	fb0b f000 	mul.w	r0, fp, r0
  40c7ae:	eb01 0540 	add.w	r5, r1, r0, lsl #1
    switch(mode) {
  40c7b2:	2e01      	cmp	r6, #1
  40c7b4:	d004      	beq.n	40c7c0 <fill_blended+0x38>
  40c7b6:	2e02      	cmp	r6, #2
  40c7b8:	d01b      	beq.n	40c7f2 <fill_blended+0x6a>
}
  40c7ba:	b005      	add	sp, #20
  40c7bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            blend_fp = color_blend_true_color_additive;
  40c7c0:	f8df a154 	ldr.w	sl, [pc, #340]	; 40c918 <fill_blended+0x190>
  40c7c4:	f8ad 3006 	strh.w	r3, [sp, #6]
  40c7c8:	4690      	mov	r8, r2
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40c7ca:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
  40c7ce:	2b01      	cmp	r3, #1
  40c7d0:	d012      	beq.n	40c7f8 <fill_blended+0x70>
  40c7d2:	8893      	ldrh	r3, [r2, #4]
  40c7d4:	f9b2 2000 	ldrsh.w	r2, [r2]
  40c7d8:	b294      	uxth	r4, r2
  40c7da:	1b1b      	subs	r3, r3, r4
  40c7dc:	b29b      	uxth	r3, r3
  40c7de:	3301      	adds	r3, #1
  40c7e0:	b21b      	sxth	r3, r3
  40c7e2:	9303      	str	r3, [sp, #12]
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
  40c7e4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  40c7e6:	1abf      	subs	r7, r7, r2
        last_dest_color.full = disp_buf_tmp[0].full;
  40c7e8:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
  40c7ec:	4686      	mov	lr, r0
        lv_opa_t last_mask = LV_OPA_TRANSP;
  40c7ee:	2100      	movs	r1, #0
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40c7f0:	e089      	b.n	40c906 <fill_blended+0x17e>
            blend_fp = color_blend_true_color_subtractive;
  40c7f2:	f8df a128 	ldr.w	sl, [pc, #296]	; 40c91c <fill_blended+0x194>
  40c7f6:	e7e5      	b.n	40c7c4 <fill_blended+0x3c>
        lv_color_t last_dest_color = LV_COLOR_BLACK;
  40c7f8:	f04f 0600 	mov.w	r6, #0
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40c7fc:	f8bd 4006 	ldrh.w	r4, [sp, #6]
  40c800:	f3c4 03c4 	ubfx	r3, r4, #3, #5
  40c804:	9900      	ldr	r1, [sp, #0]
  40c806:	fb01 f303 	mul.w	r3, r1, r3
  40c80a:	3380      	adds	r3, #128	; 0x80
  40c80c:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40c810:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40c814:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40c818:	4630      	mov	r0, r6
  40c81a:	f363 00c7 	bfi	r0, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40c81e:	f004 0207 	and.w	r2, r4, #7
  40c822:	f3c4 3342 	ubfx	r3, r4, #13, #3
  40c826:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40c82a:	fb03 f301 	mul.w	r3, r3, r1
  40c82e:	3380      	adds	r3, #128	; 0x80
  40c830:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40c834:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40c838:	f3c3 6282 	ubfx	r2, r3, #26, #3
  40c83c:	f362 0002 	bfi	r0, r2, #0, #3
  40c840:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  40c844:	f363 304f 	bfi	r0, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40c848:	f3c4 2304 	ubfx	r3, r4, #8, #5
  40c84c:	fb03 f301 	mul.w	r3, r3, r1
  40c850:	3380      	adds	r3, #128	; 0x80
  40c852:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40c856:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40c85a:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40c85e:	f363 200c 	bfi	r0, r3, #8, #5
  40c862:	f8dd 9008 	ldr.w	r9, [sp, #8]
  40c866:	e018      	b.n	40c89a <fill_blended+0x112>
                disp_buf_tmp[x] = last_res_color;
  40c868:	8038      	strh	r0, [r7, #0]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40c86a:	3401      	adds	r4, #1
  40c86c:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
  40c870:	429c      	cmp	r4, r3
  40c872:	dc0e      	bgt.n	40c892 <fill_blended+0x10a>
                if(last_dest_color.full != disp_buf_tmp[x].full) {
  40c874:	b2b3      	uxth	r3, r6
  40c876:	eb05 0744 	add.w	r7, r5, r4, lsl #1
  40c87a:	f835 2014 	ldrh.w	r2, [r5, r4, lsl #1]
  40c87e:	4293      	cmp	r3, r2
  40c880:	d0f2      	beq.n	40c868 <fill_blended+0xe0>
                    last_dest_color = disp_buf_tmp[x];
  40c882:	f835 6014 	ldrh.w	r6, [r5, r4, lsl #1]
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa);
  40c886:	9a00      	ldr	r2, [sp, #0]
  40c888:	4631      	mov	r1, r6
  40c88a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
  40c88e:	47d0      	blx	sl
  40c890:	e7ea      	b.n	40c868 <fill_blended+0xe0>
            disp_buf_tmp += disp_w;
  40c892:	eb05 0549 	add.w	r5, r5, r9, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40c896:	f10b 0b01 	add.w	fp, fp, #1
  40c89a:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
  40c89e:	459b      	cmp	fp, r3
  40c8a0:	dc8b      	bgt.n	40c7ba <fill_blended+0x32>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40c8a2:	f9b8 4000 	ldrsh.w	r4, [r8]
  40c8a6:	e7e1      	b.n	40c86c <fill_blended+0xe4>
                if(mask_tmp[x] != last_mask || last_dest_color.full != disp_buf_tmp[x].full) {
  40c8a8:	fa1f f38e 	uxth.w	r3, lr
  40c8ac:	f835 c014 	ldrh.w	ip, [r5, r4, lsl #1]
  40c8b0:	4563      	cmp	r3, ip
  40c8b2:	d119      	bne.n	40c8e8 <fill_blended+0x160>
  40c8b4:	e009      	b.n	40c8ca <fill_blended+0x142>
                    lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask_tmp[x] * opa) >> 8;
  40c8b6:	9a00      	ldr	r2, [sp, #0]
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa_tmp);
  40c8b8:	f835 1016 	ldrh.w	r1, [r5, r6, lsl #1]
  40c8bc:	f8bd 0006 	ldrh.w	r0, [sp, #6]
  40c8c0:	47d0      	blx	sl
                    last_mask = mask_tmp[x];
  40c8c2:	f899 1000 	ldrb.w	r1, [r9]
                    last_dest_color.full = disp_buf_tmp[x].full;
  40c8c6:	f835 e016 	ldrh.w	lr, [r5, r6, lsl #1]
                disp_buf_tmp[x] = last_res_color;
  40c8ca:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40c8ce:	3401      	adds	r4, #1
  40c8d0:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
  40c8d4:	429c      	cmp	r4, r3
  40c8d6:	dc0f      	bgt.n	40c8f8 <fill_blended+0x170>
                if(mask_tmp[x] == 0) continue;
  40c8d8:	4626      	mov	r6, r4
  40c8da:	eb07 0904 	add.w	r9, r7, r4
  40c8de:	5d3a      	ldrb	r2, [r7, r4]
  40c8e0:	2a00      	cmp	r2, #0
  40c8e2:	d0f4      	beq.n	40c8ce <fill_blended+0x146>
                if(mask_tmp[x] != last_mask || last_dest_color.full != disp_buf_tmp[x].full) {
  40c8e4:	4291      	cmp	r1, r2
  40c8e6:	d0df      	beq.n	40c8a8 <fill_blended+0x120>
                    lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask_tmp[x] * opa) >> 8;
  40c8e8:	2afc      	cmp	r2, #252	; 0xfc
  40c8ea:	d8e4      	bhi.n	40c8b6 <fill_blended+0x12e>
  40c8ec:	9b00      	ldr	r3, [sp, #0]
  40c8ee:	fb02 f203 	mul.w	r2, r2, r3
  40c8f2:	f3c2 2207 	ubfx	r2, r2, #8, #8
  40c8f6:	e7df      	b.n	40c8b8 <fill_blended+0x130>
            disp_buf_tmp += disp_w;
  40c8f8:	9b02      	ldr	r3, [sp, #8]
  40c8fa:	eb05 0543 	add.w	r5, r5, r3, lsl #1
            mask_tmp += draw_area_w;
  40c8fe:	9b03      	ldr	r3, [sp, #12]
  40c900:	441f      	add	r7, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40c902:	f10b 0b01 	add.w	fp, fp, #1
  40c906:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
  40c90a:	459b      	cmp	fp, r3
  40c90c:	f73f af55 	bgt.w	40c7ba <fill_blended+0x32>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40c910:	f9b8 4000 	ldrsh.w	r4, [r8]
  40c914:	e7dc      	b.n	40c8d0 <fill_blended+0x148>
  40c916:	bf00      	nop
  40c918:	0040c5b1 	.word	0x0040c5b1
  40c91c:	0040c69f 	.word	0x0040c69f

0040c920 <_lv_blend_fill>:
{
  40c920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c924:	b08b      	sub	sp, #44	; 0x2c
  40c926:	f89d 6050 	ldrb.w	r6, [sp, #80]	; 0x50
  40c92a:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
  40c92e:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
    if(opa < LV_OPA_MIN) return;
  40c932:	2d01      	cmp	r5, #1
  40c934:	d900      	bls.n	40c938 <_lv_blend_fill+0x18>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
  40c936:	b916      	cbnz	r6, 40c93e <_lv_blend_fill+0x1e>
}
  40c938:	b00b      	add	sp, #44	; 0x2c
  40c93a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c93e:	461c      	mov	r4, r3
  40c940:	f8ad 201e 	strh.w	r2, [sp, #30]
  40c944:	9106      	str	r1, [sp, #24]
  40c946:	9005      	str	r0, [sp, #20]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40c948:	4b37      	ldr	r3, [pc, #220]	; (40ca28 <_lv_blend_fill+0x108>)
  40c94a:	4798      	blx	r3
  40c94c:	4681      	mov	r9, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40c94e:	4b37      	ldr	r3, [pc, #220]	; (40ca2c <_lv_blend_fill+0x10c>)
  40c950:	4798      	blx	r3
  40c952:	4680      	mov	r8, r0
    const lv_area_t * disp_area = &vdb->area;
  40c954:	f100 0a10 	add.w	sl, r0, #16
    lv_color_t * disp_buf = vdb->buf_act;
  40c958:	f8d0 b008 	ldr.w	fp, [r0, #8]
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
  40c95c:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
  40c960:	b10b      	cbz	r3, 40c966 <_lv_blend_fill+0x46>
  40c962:	4648      	mov	r0, r9
  40c964:	4798      	blx	r3
    is_common = _lv_area_intersect(&draw_area, clip_area, fill_area);
  40c966:	9a06      	ldr	r2, [sp, #24]
  40c968:	9905      	ldr	r1, [sp, #20]
  40c96a:	a808      	add	r0, sp, #32
  40c96c:	4b30      	ldr	r3, [pc, #192]	; (40ca30 <_lv_blend_fill+0x110>)
  40c96e:	4798      	blx	r3
    if(!is_common) return;
  40c970:	2800      	cmp	r0, #0
  40c972:	d0e1      	beq.n	40c938 <_lv_blend_fill+0x18>
    draw_area.x1 -= disp_area->x1;
  40c974:	f8b8 e010 	ldrh.w	lr, [r8, #16]
  40c978:	f8bd 2020 	ldrh.w	r2, [sp, #32]
  40c97c:	eba2 020e 	sub.w	r2, r2, lr
  40c980:	b292      	uxth	r2, r2
  40c982:	f8ad 2020 	strh.w	r2, [sp, #32]
    draw_area.y1 -= disp_area->y1;
  40c986:	f8b8 0012 	ldrh.w	r0, [r8, #18]
  40c98a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
  40c98e:	1a09      	subs	r1, r1, r0
  40c990:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
    draw_area.x2 -= disp_area->x1;
  40c994:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  40c998:	eba3 030e 	sub.w	r3, r3, lr
  40c99c:	b29b      	uxth	r3, r3
  40c99e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    draw_area.y2 -= disp_area->y1;
  40c9a2:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
  40c9a6:	1a09      	subs	r1, r1, r0
  40c9a8:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
    if(mask && disp->driver.antialiasing == 0)
  40c9ac:	b1ac      	cbz	r4, 40c9da <_lv_blend_fill+0xba>
  40c9ae:	f899 1008 	ldrb.w	r1, [r9, #8]
  40c9b2:	f011 0f01 	tst.w	r1, #1
  40c9b6:	d110      	bne.n	40c9da <_lv_blend_fill+0xba>
  40c9b8:	1a9a      	subs	r2, r3, r2
  40c9ba:	b292      	uxth	r2, r2
  40c9bc:	3201      	adds	r2, #1
  40c9be:	b212      	sxth	r2, r2
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
  40c9c0:	2300      	movs	r3, #0
  40c9c2:	e002      	b.n	40c9ca <_lv_blend_fill+0xaa>
  40c9c4:	2000      	movs	r0, #0
  40c9c6:	7008      	strb	r0, [r1, #0]
  40c9c8:	3301      	adds	r3, #1
  40c9ca:	4293      	cmp	r3, r2
  40c9cc:	da05      	bge.n	40c9da <_lv_blend_fill+0xba>
  40c9ce:	18e1      	adds	r1, r4, r3
  40c9d0:	5ce0      	ldrb	r0, [r4, r3]
  40c9d2:	2880      	cmp	r0, #128	; 0x80
  40c9d4:	d9f6      	bls.n	40c9c4 <_lv_blend_fill+0xa4>
  40c9d6:	20ff      	movs	r0, #255	; 0xff
  40c9d8:	e7f5      	b.n	40c9c6 <_lv_blend_fill+0xa6>
    if(disp->driver.set_px_cb) {
  40c9da:	f8d9 3014 	ldr.w	r3, [r9, #20]
  40c9de:	b153      	cbz	r3, 40c9f6 <_lv_blend_fill+0xd6>
        fill_set_px(disp_area, disp_buf, &draw_area, color, opa, mask, mask_res);
  40c9e0:	9602      	str	r6, [sp, #8]
  40c9e2:	9401      	str	r4, [sp, #4]
  40c9e4:	9500      	str	r5, [sp, #0]
  40c9e6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40c9ea:	aa08      	add	r2, sp, #32
  40c9ec:	4659      	mov	r1, fp
  40c9ee:	4650      	mov	r0, sl
  40c9f0:	4c10      	ldr	r4, [pc, #64]	; (40ca34 <_lv_blend_fill+0x114>)
  40c9f2:	47a0      	blx	r4
  40c9f4:	e7a0      	b.n	40c938 <_lv_blend_fill+0x18>
    else if(mode == LV_BLEND_MODE_NORMAL) {
  40c9f6:	b957      	cbnz	r7, 40ca0e <_lv_blend_fill+0xee>
        fill_normal(disp_area, disp_buf, &draw_area, color, opa, mask, mask_res);
  40c9f8:	9602      	str	r6, [sp, #8]
  40c9fa:	9401      	str	r4, [sp, #4]
  40c9fc:	9500      	str	r5, [sp, #0]
  40c9fe:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40ca02:	aa08      	add	r2, sp, #32
  40ca04:	4659      	mov	r1, fp
  40ca06:	4650      	mov	r0, sl
  40ca08:	4c0b      	ldr	r4, [pc, #44]	; (40ca38 <_lv_blend_fill+0x118>)
  40ca0a:	47a0      	blx	r4
  40ca0c:	e794      	b.n	40c938 <_lv_blend_fill+0x18>
        fill_blended(disp_area, disp_buf, &draw_area, color, opa, mask, mask_res, mode);
  40ca0e:	9703      	str	r7, [sp, #12]
  40ca10:	9602      	str	r6, [sp, #8]
  40ca12:	9401      	str	r4, [sp, #4]
  40ca14:	9500      	str	r5, [sp, #0]
  40ca16:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40ca1a:	aa08      	add	r2, sp, #32
  40ca1c:	4659      	mov	r1, fp
  40ca1e:	4650      	mov	r0, sl
  40ca20:	4c06      	ldr	r4, [pc, #24]	; (40ca3c <_lv_blend_fill+0x11c>)
  40ca22:	47a0      	blx	r4
  40ca24:	e788      	b.n	40c938 <_lv_blend_fill+0x18>
  40ca26:	bf00      	nop
  40ca28:	00409851 	.word	0x00409851
  40ca2c:	00414ea5 	.word	0x00414ea5
  40ca30:	00415663 	.word	0x00415663
  40ca34:	0040b3f1 	.word	0x0040b3f1
  40ca38:	0040bdc1 	.word	0x0040bdc1
  40ca3c:	0040c789 	.word	0x0040c789

0040ca40 <_lv_blend_map>:
{
  40ca40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ca44:	b08b      	sub	sp, #44	; 0x2c
  40ca46:	f89d 6050 	ldrb.w	r6, [sp, #80]	; 0x50
  40ca4a:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
  40ca4e:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
    if(opa < LV_OPA_MIN) return;
  40ca52:	2d01      	cmp	r5, #1
  40ca54:	d900      	bls.n	40ca58 <_lv_blend_map+0x18>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
  40ca56:	b916      	cbnz	r6, 40ca5e <_lv_blend_map+0x1e>
}
  40ca58:	b00b      	add	sp, #44	; 0x2c
  40ca5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ca5e:	461c      	mov	r4, r3
  40ca60:	4617      	mov	r7, r2
  40ca62:	460a      	mov	r2, r1
  40ca64:	9106      	str	r1, [sp, #24]
  40ca66:	4601      	mov	r1, r0
    is_common = _lv_area_intersect(&draw_area, clip_area, map_area);
  40ca68:	a808      	add	r0, sp, #32
  40ca6a:	4b37      	ldr	r3, [pc, #220]	; (40cb48 <_lv_blend_map+0x108>)
  40ca6c:	4798      	blx	r3
    if(!is_common) return;
  40ca6e:	2800      	cmp	r0, #0
  40ca70:	d0f2      	beq.n	40ca58 <_lv_blend_map+0x18>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40ca72:	4b36      	ldr	r3, [pc, #216]	; (40cb4c <_lv_blend_map+0x10c>)
  40ca74:	4798      	blx	r3
  40ca76:	4682      	mov	sl, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40ca78:	4b35      	ldr	r3, [pc, #212]	; (40cb50 <_lv_blend_map+0x110>)
  40ca7a:	4798      	blx	r3
  40ca7c:	4681      	mov	r9, r0
    const lv_area_t * disp_area = &vdb->area;
  40ca7e:	f100 0b10 	add.w	fp, r0, #16
    lv_color_t * disp_buf = vdb->buf_act;
  40ca82:	6883      	ldr	r3, [r0, #8]
  40ca84:	9307      	str	r3, [sp, #28]
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
  40ca86:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  40ca8a:	b10b      	cbz	r3, 40ca90 <_lv_blend_map+0x50>
  40ca8c:	4650      	mov	r0, sl
  40ca8e:	4798      	blx	r3
    draw_area.x1 -= disp_area->x1;
  40ca90:	f8b9 e010 	ldrh.w	lr, [r9, #16]
  40ca94:	f8bd 2020 	ldrh.w	r2, [sp, #32]
  40ca98:	eba2 020e 	sub.w	r2, r2, lr
  40ca9c:	b292      	uxth	r2, r2
  40ca9e:	f8ad 2020 	strh.w	r2, [sp, #32]
    draw_area.y1 -= disp_area->y1;
  40caa2:	f8b9 0012 	ldrh.w	r0, [r9, #18]
  40caa6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
  40caaa:	1a09      	subs	r1, r1, r0
  40caac:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
    draw_area.x2 -= disp_area->x1;
  40cab0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  40cab4:	eba3 030e 	sub.w	r3, r3, lr
  40cab8:	b29b      	uxth	r3, r3
  40caba:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    draw_area.y2 -= disp_area->y1;
  40cabe:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
  40cac2:	1a09      	subs	r1, r1, r0
  40cac4:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
    if(mask && disp->driver.antialiasing == 0)
  40cac8:	b1ac      	cbz	r4, 40caf6 <_lv_blend_map+0xb6>
  40caca:	f89a 1008 	ldrb.w	r1, [sl, #8]
  40cace:	f011 0f01 	tst.w	r1, #1
  40cad2:	d110      	bne.n	40caf6 <_lv_blend_map+0xb6>
  40cad4:	1a9a      	subs	r2, r3, r2
  40cad6:	b292      	uxth	r2, r2
  40cad8:	3201      	adds	r2, #1
  40cada:	b212      	sxth	r2, r2
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
  40cadc:	2300      	movs	r3, #0
  40cade:	e002      	b.n	40cae6 <_lv_blend_map+0xa6>
  40cae0:	2000      	movs	r0, #0
  40cae2:	7008      	strb	r0, [r1, #0]
  40cae4:	3301      	adds	r3, #1
  40cae6:	4293      	cmp	r3, r2
  40cae8:	da05      	bge.n	40caf6 <_lv_blend_map+0xb6>
  40caea:	18e1      	adds	r1, r4, r3
  40caec:	5ce0      	ldrb	r0, [r4, r3]
  40caee:	2880      	cmp	r0, #128	; 0x80
  40caf0:	d9f6      	bls.n	40cae0 <_lv_blend_map+0xa0>
  40caf2:	20ff      	movs	r0, #255	; 0xff
  40caf4:	e7f5      	b.n	40cae2 <_lv_blend_map+0xa2>
    if(disp->driver.set_px_cb) {
  40caf6:	f8da 3014 	ldr.w	r3, [sl, #20]
  40cafa:	b153      	cbz	r3, 40cb12 <_lv_blend_map+0xd2>
        map_set_px(disp_area, disp_buf, &draw_area, map_area, map_buf, opa, mask, mask_res);
  40cafc:	9603      	str	r6, [sp, #12]
  40cafe:	9402      	str	r4, [sp, #8]
  40cb00:	9501      	str	r5, [sp, #4]
  40cb02:	9700      	str	r7, [sp, #0]
  40cb04:	9b06      	ldr	r3, [sp, #24]
  40cb06:	aa08      	add	r2, sp, #32
  40cb08:	9907      	ldr	r1, [sp, #28]
  40cb0a:	4658      	mov	r0, fp
  40cb0c:	4c11      	ldr	r4, [pc, #68]	; (40cb54 <_lv_blend_map+0x114>)
  40cb0e:	47a0      	blx	r4
  40cb10:	e7a2      	b.n	40ca58 <_lv_blend_map+0x18>
    else if(mode == LV_BLEND_MODE_NORMAL) {
  40cb12:	f1b8 0f00 	cmp.w	r8, #0
  40cb16:	d10a      	bne.n	40cb2e <_lv_blend_map+0xee>
        map_normal(disp_area, disp_buf, &draw_area, map_area, map_buf, opa, mask, mask_res);
  40cb18:	9603      	str	r6, [sp, #12]
  40cb1a:	9402      	str	r4, [sp, #8]
  40cb1c:	9501      	str	r5, [sp, #4]
  40cb1e:	9700      	str	r7, [sp, #0]
  40cb20:	9b06      	ldr	r3, [sp, #24]
  40cb22:	aa08      	add	r2, sp, #32
  40cb24:	9907      	ldr	r1, [sp, #28]
  40cb26:	4658      	mov	r0, fp
  40cb28:	4c0b      	ldr	r4, [pc, #44]	; (40cb58 <_lv_blend_map+0x118>)
  40cb2a:	47a0      	blx	r4
  40cb2c:	e794      	b.n	40ca58 <_lv_blend_map+0x18>
        map_blended(disp_area, disp_buf, &draw_area, map_area, map_buf, opa, mask, mask_res, mode);
  40cb2e:	f8cd 8010 	str.w	r8, [sp, #16]
  40cb32:	9603      	str	r6, [sp, #12]
  40cb34:	9402      	str	r4, [sp, #8]
  40cb36:	9501      	str	r5, [sp, #4]
  40cb38:	9700      	str	r7, [sp, #0]
  40cb3a:	9b06      	ldr	r3, [sp, #24]
  40cb3c:	aa08      	add	r2, sp, #32
  40cb3e:	9907      	ldr	r1, [sp, #28]
  40cb40:	4658      	mov	r0, fp
  40cb42:	4c06      	ldr	r4, [pc, #24]	; (40cb5c <_lv_blend_map+0x11c>)
  40cb44:	47a0      	blx	r4
  40cb46:	e787      	b.n	40ca58 <_lv_blend_map+0x18>
  40cb48:	00415663 	.word	0x00415663
  40cb4c:	00409851 	.word	0x00409851
  40cb50:	00414ea5 	.word	0x00414ea5
  40cb54:	0040b4d5 	.word	0x0040b4d5
  40cb58:	0040b60d 	.word	0x0040b60d
  40cb5c:	0040b2a5 	.word	0x0040b2a5

0040cb60 <lv_draw_map>:
 */
LV_ATTRIBUTE_FAST_MEM static void lv_draw_map(const lv_area_t * map_area, const lv_area_t * clip_area,
                                              const uint8_t * map_p,
                                              const lv_draw_img_dsc_t * draw_dsc,
                                              bool chroma_key, bool alpha_byte)
{
  40cb60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40cb64:	b0bd      	sub	sp, #244	; 0xf4
  40cb66:	9016      	str	r0, [sp, #88]	; 0x58
  40cb68:	911f      	str	r1, [sp, #124]	; 0x7c
  40cb6a:	4616      	mov	r6, r2
  40cb6c:	930a      	str	r3, [sp, #40]	; 0x28
  40cb6e:	f89d 3118 	ldrb.w	r3, [sp, #280]	; 0x118
  40cb72:	930d      	str	r3, [sp, #52]	; 0x34
  40cb74:	f89d 311c 	ldrb.w	r3, [sp, #284]	; 0x11c
  40cb78:	9308      	str	r3, [sp, #32]
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
  40cb7a:	aa3a      	add	r2, sp, #232	; 0xe8
  40cb7c:	2308      	movs	r3, #8
  40cb7e:	e004      	b.n	40cb8a <lv_draw_map+0x2a>
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
  40cb80:	f811 0b01 	ldrb.w	r0, [r1], #1
  40cb84:	f802 0b01 	strb.w	r0, [r2], #1
        d8++;
        s8++;
        len--;
  40cb88:	3b01      	subs	r3, #1
    while(len) {
  40cb8a:	2b00      	cmp	r3, #0
  40cb8c:	d1f8      	bne.n	40cb80 <lv_draw_map+0x20>
    /* Use the clip area as draw area*/
    lv_area_t draw_area;
    lv_area_copy(&draw_area, clip_area);

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40cb8e:	4ba6      	ldr	r3, [pc, #664]	; (40ce28 <lv_draw_map+0x2c8>)
  40cb90:	4798      	blx	r3
  40cb92:	4680      	mov	r8, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40cb94:	4ba5      	ldr	r3, [pc, #660]	; (40ce2c <lv_draw_map+0x2cc>)
  40cb96:	4798      	blx	r3
  40cb98:	9014      	str	r0, [sp, #80]	; 0x50
    const lv_area_t * disp_area = &vdb->area;

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
  40cb9a:	8a01      	ldrh	r1, [r0, #16]
  40cb9c:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	; 0xe8
  40cba0:	1a5b      	subs	r3, r3, r1
  40cba2:	f8ad 30e8 	strh.w	r3, [sp, #232]	; 0xe8
    draw_area.y1 -= disp_area->y1;
  40cba6:	8a42      	ldrh	r2, [r0, #18]
  40cba8:	f8bd 30ea 	ldrh.w	r3, [sp, #234]	; 0xea
  40cbac:	1a9b      	subs	r3, r3, r2
  40cbae:	f8ad 30ea 	strh.w	r3, [sp, #234]	; 0xea
    draw_area.x2 -= disp_area->x1;
  40cbb2:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
  40cbb6:	1a5b      	subs	r3, r3, r1
  40cbb8:	f8ad 30ec 	strh.w	r3, [sp, #236]	; 0xec
    draw_area.y2 -= disp_area->y1;
  40cbbc:	f8bd 30ee 	ldrh.w	r3, [sp, #238]	; 0xee
  40cbc0:	1a9b      	subs	r3, r3, r2
  40cbc2:	f8ad 30ee 	strh.w	r3, [sp, #238]	; 0xee

    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
  40cbc6:	4b9a      	ldr	r3, [pc, #616]	; (40ce30 <lv_draw_map+0x2d0>)
  40cbc8:	4798      	blx	r3

    /*The simplest case just copy the pixels into the VDB*/
    if(other_mask_cnt == 0 && draw_dsc->angle == 0 && draw_dsc->zoom == LV_IMG_ZOOM_NONE &&
  40cbca:	9015      	str	r0, [sp, #84]	; 0x54
  40cbcc:	b930      	cbnz	r0, 40cbdc <lv_draw_map+0x7c>
  40cbce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40cbd0:	8853      	ldrh	r3, [r2, #2]
  40cbd2:	b91b      	cbnz	r3, 40cbdc <lv_draw_map+0x7c>
  40cbd4:	8913      	ldrh	r3, [r2, #8]
  40cbd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40cbda:	d055      	beq.n	40cc88 <lv_draw_map+0x128>
    }
#endif
    /*In the other cases every pixel need to be checked one-by-one*/
    else {
        /*The pixel size in byte is different if an alpha byte is added too*/
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
  40cbdc:	9b08      	ldr	r3, [sp, #32]
  40cbde:	2b00      	cmp	r3, #0
  40cbe0:	d068      	beq.n	40ccb4 <lv_draw_map+0x154>
  40cbe2:	2303      	movs	r3, #3
  40cbe4:	9307      	str	r3, [sp, #28]
  40cbe6:	9916      	ldr	r1, [sp, #88]	; 0x58
  40cbe8:	888d      	ldrh	r5, [r1, #4]
  40cbea:	f9b1 2000 	ldrsh.w	r2, [r1]
  40cbee:	b293      	uxth	r3, r2
  40cbf0:	1aed      	subs	r5, r5, r3
  40cbf2:	b2ad      	uxth	r5, r5
  40cbf4:	3501      	adds	r5, #1
  40cbf6:	b22d      	sxth	r5, r5

        /*Go to the first displayed pixel of the map*/
        int32_t map_w = lv_area_get_width(map_area);
  40cbf8:	9519      	str	r5, [sp, #100]	; 0x64
        const uint8_t * map_buf_tmp = map_p;
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
  40cbfa:	f9bd 00ea 	ldrsh.w	r0, [sp, #234]	; 0xea
  40cbfe:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  40cc02:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40cc04:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  40cc08:	1a5b      	subs	r3, r3, r1
  40cc0a:	1ac3      	subs	r3, r0, r3
  40cc0c:	fb03 f305 	mul.w	r3, r3, r5
  40cc10:	9f07      	ldr	r7, [sp, #28]
  40cc12:	971a      	str	r7, [sp, #104]	; 0x68
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
  40cc14:	f9bd c0e8 	ldrsh.w	ip, [sp, #232]	; 0xe8
  40cc18:	f9b4 e010 	ldrsh.w	lr, [r4, #16]
  40cc1c:	eba2 020e 	sub.w	r2, r2, lr
  40cc20:	ebac 0202 	sub.w	r2, ip, r2
  40cc24:	fb02 f207 	mul.w	r2, r2, r7
  40cc28:	fb07 2303 	mla	r3, r7, r3, r2
  40cc2c:	18f3      	adds	r3, r6, r3
  40cc2e:	9311      	str	r3, [sp, #68]	; 0x44
        uint32_t px_i = 0;

        const uint8_t * map_px;

        lv_area_t blend_area;
        blend_area.x1 = draw_area.x1 + disp_area->x1;
  40cc30:	fa1f f78c 	uxth.w	r7, ip
  40cc34:	fa17 f38e 	uxtah	r3, r7, lr
  40cc38:	b29b      	uxth	r3, r3
  40cc3a:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
  40cc3e:	f8bd 20ec 	ldrh.w	r2, [sp, #236]	; 0xec
  40cc42:	1bd2      	subs	r2, r2, r7
  40cc44:	b292      	uxth	r2, r2
  40cc46:	3201      	adds	r2, #1
  40cc48:	b292      	uxth	r2, r2
  40cc4a:	fa0f f982 	sxth.w	r9, r2
        blend_area.x2 = blend_area.x1 + lv_area_get_width(&draw_area) - 1;
  40cc4e:	4413      	add	r3, r2
  40cc50:	b29b      	uxth	r3, r3
  40cc52:	3b01      	subs	r3, #1
  40cc54:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
        blend_area.y1 = disp_area->y1 + draw_area.y1;
  40cc58:	b280      	uxth	r0, r0
  40cc5a:	fa10 f381 	uxtah	r3, r0, r1
  40cc5e:	b21b      	sxth	r3, r3
  40cc60:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
        blend_area.y2 = blend_area.y1;
  40cc64:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40cc68:	f8bd 30ee 	ldrh.w	r3, [sp, #238]	; 0xee
  40cc6c:	1a1b      	subs	r3, r3, r0
  40cc6e:	b29b      	uxth	r3, r3
  40cc70:	3301      	adds	r3, #1
  40cc72:	b21b      	sxth	r3, r3
  40cc74:	9318      	str	r3, [sp, #96]	; 0x60

        lv_coord_t draw_area_h = lv_area_get_height(&draw_area);
        lv_coord_t draw_area_w = lv_area_get_width(&draw_area);

#if LV_USE_IMG_TRANSFORM
        bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
  40cc76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40cc78:	8853      	ldrh	r3, [r2, #2]
  40cc7a:	b9f3      	cbnz	r3, 40ccba <lv_draw_map+0x15a>
  40cc7c:	8913      	ldrh	r3, [r2, #8]
  40cc7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40cc82:	d051      	beq.n	40cd28 <lv_draw_map+0x1c8>
  40cc84:	2301      	movs	r3, #1
  40cc86:	e019      	b.n	40ccbc <lv_draw_map+0x15c>
       chroma_key == false && alpha_byte == false && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
  40cc88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40cc8a:	2b00      	cmp	r3, #0
  40cc8c:	d1a6      	bne.n	40cbdc <lv_draw_map+0x7c>
  40cc8e:	9b08      	ldr	r3, [sp, #32]
  40cc90:	2b00      	cmp	r3, #0
  40cc92:	d1a3      	bne.n	40cbdc <lv_draw_map+0x7c>
  40cc94:	7a93      	ldrb	r3, [r2, #10]
  40cc96:	2b00      	cmp	r3, #0
  40cc98:	d1a0      	bne.n	40cbdc <lv_draw_map+0x7c>
        _lv_blend_map(clip_area, map_area, (lv_color_t *)map_p, NULL, LV_DRAW_MASK_RES_FULL_COVER, draw_dsc->opa,
  40cc9a:	7b93      	ldrb	r3, [r2, #14]
  40cc9c:	9302      	str	r3, [sp, #8]
  40cc9e:	7813      	ldrb	r3, [r2, #0]
  40cca0:	9301      	str	r3, [sp, #4]
  40cca2:	2301      	movs	r3, #1
  40cca4:	9300      	str	r3, [sp, #0]
  40cca6:	2300      	movs	r3, #0
  40cca8:	4632      	mov	r2, r6
  40ccaa:	9916      	ldr	r1, [sp, #88]	; 0x58
  40ccac:	981f      	ldr	r0, [sp, #124]	; 0x7c
  40ccae:	4c61      	ldr	r4, [pc, #388]	; (40ce34 <lv_draw_map+0x2d4>)
  40ccb0:	47a0      	blx	r4
  40ccb2:	e368      	b.n	40d386 <lv_draw_map+0x826>
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
  40ccb4:	2302      	movs	r3, #2
  40ccb6:	9307      	str	r3, [sp, #28]
  40ccb8:	e795      	b.n	40cbe6 <lv_draw_map+0x86>
        bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
  40ccba:	2301      	movs	r3, #1
  40ccbc:	9306      	str	r3, [sp, #24]
#else
        bool transform = false;
#endif
        /*Simple ARGB image. Handle it as special case because it's very common*/
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
  40ccbe:	f083 0301 	eor.w	r3, r3, #1
  40ccc2:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40ccc4:	2a00      	cmp	r2, #0
  40ccc6:	bf14      	ite	ne
  40ccc8:	2300      	movne	r3, #0
  40ccca:	f003 0301 	andeq.w	r3, r3, #1
  40ccce:	b133      	cbz	r3, 40ccde <lv_draw_map+0x17e>
  40ccd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40ccd2:	b923      	cbnz	r3, 40ccde <lv_draw_map+0x17e>
  40ccd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40ccd6:	7a9b      	ldrb	r3, [r3, #10]
  40ccd8:	b90b      	cbnz	r3, 40ccde <lv_draw_map+0x17e>
  40ccda:	9b08      	ldr	r3, [sp, #32]
  40ccdc:	bb33      	cbnz	r3, 40cd2c <lv_draw_map+0x1cc>
            _lv_mem_buf_release(map2);
        }
        /*Most complicated case: transform or other mask or chroma keyed*/
        else {
            /*Build the image and a mask line-by-line*/
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
  40ccde:	4640      	mov	r0, r8
  40cce0:	4b55      	ldr	r3, [pc, #340]	; (40ce38 <lv_draw_map+0x2d8>)
  40cce2:	4798      	blx	r3
  40cce4:	4604      	mov	r4, r0
  40cce6:	9017      	str	r0, [sp, #92]	; 0x5c
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > hor_res ? hor_res : lv_area_get_size(&draw_area);
  40cce8:	a83a      	add	r0, sp, #232	; 0xe8
  40ccea:	4b54      	ldr	r3, [pc, #336]	; (40ce3c <lv_draw_map+0x2dc>)
  40ccec:	4798      	blx	r3
  40ccee:	4284      	cmp	r4, r0
  40ccf0:	f080 80ac 	bcs.w	40ce4c <lv_draw_map+0x2ec>
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
  40ccf4:	9f17      	ldr	r7, [sp, #92]	; 0x5c
  40ccf6:	0078      	lsls	r0, r7, #1
  40ccf8:	4c51      	ldr	r4, [pc, #324]	; (40ce40 <lv_draw_map+0x2e0>)
  40ccfa:	47a0      	blx	r4
  40ccfc:	900b      	str	r0, [sp, #44]	; 0x2c
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
  40ccfe:	4638      	mov	r0, r7
  40cd00:	47a0      	blx	r4
  40cd02:	4682      	mov	sl, r0

#if LV_USE_IMG_TRANSFORM
            lv_img_transform_dsc_t trans_dsc;
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
  40cd04:	214c      	movs	r1, #76	; 0x4c
  40cd06:	a827      	add	r0, sp, #156	; 0x9c
  40cd08:	4b4e      	ldr	r3, [pc, #312]	; (40ce44 <lv_draw_map+0x2e4>)
  40cd0a:	4798      	blx	r3
            if(transform) {
  40cd0c:	9b06      	ldr	r3, [sp, #24]
  40cd0e:	2b00      	cmp	r3, #0
  40cd10:	f000 80ca 	beq.w	40cea8 <lv_draw_map+0x348>
                lv_img_cf_t cf = LV_IMG_CF_TRUE_COLOR;
                if(alpha_byte) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
  40cd14:	9b08      	ldr	r3, [sp, #32]
  40cd16:	2b00      	cmp	r3, #0
  40cd18:	f040 809d 	bne.w	40ce56 <lv_draw_map+0x2f6>
                else if(chroma_key) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
  40cd1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40cd1e:	2b00      	cmp	r3, #0
  40cd20:	f040 80f3 	bne.w	40cf0a <lv_draw_map+0x3aa>
                lv_img_cf_t cf = LV_IMG_CF_TRUE_COLOR;
  40cd24:	2204      	movs	r2, #4
  40cd26:	e097      	b.n	40ce58 <lv_draw_map+0x2f8>
        bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
  40cd28:	2300      	movs	r3, #0
  40cd2a:	e7c7      	b.n	40ccbc <lv_draw_map+0x15c>
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
  40cd2c:	4640      	mov	r0, r8
  40cd2e:	4b42      	ldr	r3, [pc, #264]	; (40ce38 <lv_draw_map+0x2d8>)
  40cd30:	4798      	blx	r3
  40cd32:	4604      	mov	r4, r0
  40cd34:	4680      	mov	r8, r0
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > (uint32_t) hor_res ? hor_res : lv_area_get_size(&draw_area);
  40cd36:	a83a      	add	r0, sp, #232	; 0xe8
  40cd38:	4b40      	ldr	r3, [pc, #256]	; (40ce3c <lv_draw_map+0x2dc>)
  40cd3a:	4798      	blx	r3
  40cd3c:	4284      	cmp	r4, r0
  40cd3e:	d20e      	bcs.n	40cd5e <lv_draw_map+0x1fe>
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
  40cd40:	ea4f 0048 	mov.w	r0, r8, lsl #1
  40cd44:	4c3e      	ldr	r4, [pc, #248]	; (40ce40 <lv_draw_map+0x2e0>)
  40cd46:	47a0      	blx	r4
  40cd48:	4605      	mov	r5, r0
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
  40cd4a:	4640      	mov	r0, r8
  40cd4c:	47a0      	blx	r4
  40cd4e:	4604      	mov	r4, r0
            for(y = 0; y < draw_area_h; y++) {
  40cd50:	2600      	movs	r6, #0
        uint32_t px_i = 0;
  40cd52:	4632      	mov	r2, r6
  40cd54:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
  40cd58:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
            for(y = 0; y < draw_area_h; y++) {
  40cd5c:	e02b      	b.n	40cdb6 <lv_draw_map+0x256>
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > (uint32_t) hor_res ? hor_res : lv_area_get_size(&draw_area);
  40cd5e:	a83a      	add	r0, sp, #232	; 0xe8
  40cd60:	4b36      	ldr	r3, [pc, #216]	; (40ce3c <lv_draw_map+0x2dc>)
  40cd62:	4798      	blx	r3
  40cd64:	4680      	mov	r8, r0
  40cd66:	e7eb      	b.n	40cd40 <lv_draw_map+0x1e0>
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
  40cd68:	3101      	adds	r1, #1
  40cd6a:	443b      	add	r3, r7
  40cd6c:	3201      	adds	r2, #1
  40cd6e:	4549      	cmp	r1, r9
  40cd70:	da0b      	bge.n	40cd8a <lv_draw_map+0x22a>
                    lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
  40cd72:	7898      	ldrb	r0, [r3, #2]
                    mask_buf[px_i] = px_opa;
  40cd74:	54a0      	strb	r0, [r4, r2]
                    if(px_opa) {
  40cd76:	2800      	cmp	r0, #0
  40cd78:	d0f6      	beq.n	40cd68 <lv_draw_map+0x208>
                        map2[px_i].full =  map_px[0] + (map_px[1] << 8);
  40cd7a:	7818      	ldrb	r0, [r3, #0]
  40cd7c:	f893 e001 	ldrb.w	lr, [r3, #1]
  40cd80:	eb00 200e 	add.w	r0, r0, lr, lsl #8
  40cd84:	f825 0012 	strh.w	r0, [r5, r2, lsl #1]
  40cd88:	e7ee      	b.n	40cd68 <lv_draw_map+0x208>
  40cd8a:	9707      	str	r7, [sp, #28]
                map_buf_tmp += map_w * px_size_byte;
  40cd8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40cd8e:	991a      	ldr	r1, [sp, #104]	; 0x68
  40cd90:	fb01 aa03 	mla	sl, r1, r3, sl
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40cd94:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
  40cd98:	f8bd 10e8 	ldrh.w	r1, [sp, #232]	; 0xe8
  40cd9c:	1a5b      	subs	r3, r3, r1
  40cd9e:	b29b      	uxth	r3, r3
  40cda0:	3301      	adds	r3, #1
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
  40cda2:	fa02 f383 	sxtah	r3, r2, r3
  40cda6:	4598      	cmp	r8, r3
  40cda8:	d90b      	bls.n	40cdc2 <lv_draw_map+0x262>
                    blend_area.y2 ++;
  40cdaa:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
  40cdae:	3301      	adds	r3, #1
  40cdb0:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            for(y = 0; y < draw_area_h; y++) {
  40cdb4:	3601      	adds	r6, #1
  40cdb6:	455e      	cmp	r6, fp
  40cdb8:	da1a      	bge.n	40cdf0 <lv_draw_map+0x290>
  40cdba:	4653      	mov	r3, sl
  40cdbc:	2100      	movs	r1, #0
  40cdbe:	9f07      	ldr	r7, [sp, #28]
  40cdc0:	e7d5      	b.n	40cd6e <lv_draw_map+0x20e>
                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
  40cdc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40cdc4:	7b93      	ldrb	r3, [r2, #14]
  40cdc6:	9302      	str	r3, [sp, #8]
  40cdc8:	7813      	ldrb	r3, [r2, #0]
  40cdca:	9301      	str	r3, [sp, #4]
  40cdcc:	2302      	movs	r3, #2
  40cdce:	9300      	str	r3, [sp, #0]
  40cdd0:	4623      	mov	r3, r4
  40cdd2:	462a      	mov	r2, r5
  40cdd4:	a925      	add	r1, sp, #148	; 0x94
  40cdd6:	981f      	ldr	r0, [sp, #124]	; 0x7c
  40cdd8:	4f16      	ldr	r7, [pc, #88]	; (40ce34 <lv_draw_map+0x2d4>)
  40cdda:	47b8      	blx	r7
                    blend_area.y1 = blend_area.y2 + 1;
  40cddc:	f8bd 309a 	ldrh.w	r3, [sp, #154]	; 0x9a
  40cde0:	3301      	adds	r3, #1
  40cde2:	b21b      	sxth	r3, r3
  40cde4:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
                    blend_area.y2 = blend_area.y1;
  40cde8:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                    px_i = 0;
  40cdec:	2200      	movs	r2, #0
  40cdee:	e7e1      	b.n	40cdb4 <lv_draw_map+0x254>
            if(blend_area.y1 != blend_area.y2) {
  40cdf0:	f9bd 2096 	ldrsh.w	r2, [sp, #150]	; 0x96
  40cdf4:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
  40cdf8:	429a      	cmp	r2, r3
  40cdfa:	d00f      	beq.n	40ce1c <lv_draw_map+0x2bc>
                blend_area.y2--;
  40cdfc:	3b01      	subs	r3, #1
  40cdfe:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
  40ce02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40ce04:	7b93      	ldrb	r3, [r2, #14]
  40ce06:	9302      	str	r3, [sp, #8]
  40ce08:	7813      	ldrb	r3, [r2, #0]
  40ce0a:	9301      	str	r3, [sp, #4]
  40ce0c:	2302      	movs	r3, #2
  40ce0e:	9300      	str	r3, [sp, #0]
  40ce10:	4623      	mov	r3, r4
  40ce12:	462a      	mov	r2, r5
  40ce14:	a925      	add	r1, sp, #148	; 0x94
  40ce16:	981f      	ldr	r0, [sp, #124]	; 0x7c
  40ce18:	4e06      	ldr	r6, [pc, #24]	; (40ce34 <lv_draw_map+0x2d4>)
  40ce1a:	47b0      	blx	r6
            _lv_mem_buf_release(mask_buf);
  40ce1c:	4620      	mov	r0, r4
  40ce1e:	4c0a      	ldr	r4, [pc, #40]	; (40ce48 <lv_draw_map+0x2e8>)
  40ce20:	47a0      	blx	r4
            _lv_mem_buf_release(map2);
  40ce22:	4628      	mov	r0, r5
  40ce24:	47a0      	blx	r4
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
  40ce26:	e2ae      	b.n	40d386 <lv_draw_map+0x826>
  40ce28:	00409851 	.word	0x00409851
  40ce2c:	00414ea5 	.word	0x00414ea5
  40ce30:	0040fd5d 	.word	0x0040fd5d
  40ce34:	0040ca41 	.word	0x0040ca41
  40ce38:	00414da1 	.word	0x00414da1
  40ce3c:	00415647 	.word	0x00415647
  40ce40:	00416a81 	.word	0x00416a81
  40ce44:	00416c0d 	.word	0x00416c0d
  40ce48:	00416831 	.word	0x00416831
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > hor_res ? hor_res : lv_area_get_size(&draw_area);
  40ce4c:	a83a      	add	r0, sp, #232	; 0xe8
  40ce4e:	4bb6      	ldr	r3, [pc, #728]	; (40d128 <lv_draw_map+0x5c8>)
  40ce50:	4798      	blx	r3
  40ce52:	9017      	str	r0, [sp, #92]	; 0x5c
  40ce54:	e74e      	b.n	40ccf4 <lv_draw_map+0x194>
                if(alpha_byte) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
  40ce56:	2205      	movs	r2, #5

                trans_dsc.cfg.angle = draw_dsc->angle;
  40ce58:	980a      	ldr	r0, [sp, #40]	; 0x28
  40ce5a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  40ce5e:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
                trans_dsc.cfg.zoom = draw_dsc->zoom;
  40ce62:	8903      	ldrh	r3, [r0, #8]
  40ce64:	f8ad 30aa 	strh.w	r3, [sp, #170]	; 0xaa
                trans_dsc.cfg.src = map_p;
  40ce68:	9627      	str	r6, [sp, #156]	; 0x9c
                trans_dsc.cfg.src_w = map_w;
  40ce6a:	f8ad 50a0 	strh.w	r5, [sp, #160]	; 0xa0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40ce6e:	9916      	ldr	r1, [sp, #88]	; 0x58
  40ce70:	88cb      	ldrh	r3, [r1, #6]
  40ce72:	8849      	ldrh	r1, [r1, #2]
  40ce74:	1a5b      	subs	r3, r3, r1
  40ce76:	b29b      	uxth	r3, r3
  40ce78:	3301      	adds	r3, #1
                trans_dsc.cfg.src_h = lv_area_get_height(map_area);;
  40ce7a:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
                trans_dsc.cfg.cf = cf;
  40ce7e:	f88d 20ae 	strb.w	r2, [sp, #174]	; 0xae
                trans_dsc.cfg.pivot_x = draw_dsc->pivot.x;
  40ce82:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
  40ce86:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
                trans_dsc.cfg.pivot_y = draw_dsc->pivot.y;
  40ce8a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
  40ce8e:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
                trans_dsc.cfg.color = draw_dsc->recolor;
  40ce92:	8983      	ldrh	r3, [r0, #12]
  40ce94:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
                trans_dsc.cfg.antialias = draw_dsc->antialias;
  40ce98:	7bc3      	ldrb	r3, [r0, #15]
  40ce9a:	f3c3 0300 	ubfx	r3, r3, #0, #1
  40ce9e:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf

                _lv_img_buf_transform_init(&trans_dsc);
  40cea2:	a827      	add	r0, sp, #156	; 0x9c
  40cea4:	4ba1      	ldr	r3, [pc, #644]	; (40d12c <lv_draw_map+0x5cc>)
  40cea6:	4798      	blx	r3
            }
#endif
            uint16_t recolor_premult[3] = {0};
  40cea8:	2300      	movs	r3, #0
  40ceaa:	9323      	str	r3, [sp, #140]	; 0x8c
  40ceac:	f8ad 3090 	strh.w	r3, [sp, #144]	; 0x90
            lv_opa_t recolor_opa_inv = 255 - draw_dsc->recolor_opa;
  40ceb0:	990a      	ldr	r1, [sp, #40]	; 0x28
  40ceb2:	7a8a      	ldrb	r2, [r1, #10]
  40ceb4:	43d3      	mvns	r3, r2
  40ceb6:	b2db      	uxtb	r3, r3
  40ceb8:	9310      	str	r3, [sp, #64]	; 0x40
            if(draw_dsc->recolor_opa != 0) {
  40ceba:	b1ba      	cbz	r2, 40ceec <lv_draw_map+0x38c>
  40cebc:	898b      	ldrh	r3, [r1, #12]
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
  40cebe:	f3c3 01c4 	ubfx	r1, r3, #3, #5
  40cec2:	b292      	uxth	r2, r2
  40cec4:	fb01 f102 	mul.w	r1, r1, r2
  40cec8:	f8ad 108c 	strh.w	r1, [sp, #140]	; 0x8c
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
  40cecc:	f003 0007 	and.w	r0, r3, #7
  40ced0:	f3c3 3142 	ubfx	r1, r3, #13, #3
  40ced4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
  40ced8:	fb12 f101 	smulbb	r1, r2, r1
  40cedc:	f8ad 108e 	strh.w	r1, [sp, #142]	; 0x8e
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
  40cee0:	f3c3 2304 	ubfx	r3, r3, #8, #5
  40cee4:	fb02 f203 	mul.w	r2, r2, r3
  40cee8:	f8ad 2090 	strh.w	r2, [sp, #144]	; 0x90
                lv_color_premult(draw_dsc->recolor, draw_dsc->recolor_opa, recolor_premult);
            }

            lv_draw_mask_res_t mask_res;
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40ceec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40ceee:	9a08      	ldr	r2, [sp, #32]
  40cef0:	4313      	orrs	r3, r2
  40cef2:	9321      	str	r3, [sp, #132]	; 0x84
  40cef4:	d10b      	bne.n	40cf0e <lv_draw_map+0x3ae>
  40cef6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40cef8:	8853      	ldrh	r3, [r2, #2]
  40cefa:	b9f3      	cbnz	r3, 40cf3a <lv_draw_map+0x3da>
                        draw_dsc->zoom != LV_IMG_ZOOM_NONE) ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
  40cefc:	8913      	ldrh	r3, [r2, #8]
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40cefe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40cf02:	d01d      	beq.n	40cf40 <lv_draw_map+0x3e0>
  40cf04:	2302      	movs	r3, #2
  40cf06:	931b      	str	r3, [sp, #108]	; 0x6c
  40cf08:	e003      	b.n	40cf12 <lv_draw_map+0x3b2>
                else if(chroma_key) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
  40cf0a:	2206      	movs	r2, #6
  40cf0c:	e7a4      	b.n	40ce58 <lv_draw_map+0x2f8>
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40cf0e:	2302      	movs	r3, #2
  40cf10:	931b      	str	r3, [sp, #108]	; 0x6c

            /*Prepare the `mask_buf`if there are other masks*/
            if(other_mask_cnt) {
  40cf12:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40cf14:	b9bb      	cbnz	r3, 40cf46 <lv_draw_map+0x3e6>
            }

            int32_t x;
            int32_t y;
#if LV_USE_IMG_TRANSFORM
            int32_t rot_y = disp_area->y1 + draw_area.y1 - map_area->y1;
  40cf16:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40cf18:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
  40cf1c:	f9bd 20ea 	ldrsh.w	r2, [sp, #234]	; 0xea
  40cf20:	4413      	add	r3, r2
  40cf22:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40cf24:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
  40cf28:	1a9b      	subs	r3, r3, r2
  40cf2a:	9312      	str	r3, [sp, #72]	; 0x48
#endif
            for(y = 0; y < draw_area_h; y++) {
  40cf2c:	2300      	movs	r3, #0
  40cf2e:	930c      	str	r3, [sp, #48]	; 0x30
        uint32_t px_i = 0;
  40cf30:	9313      	str	r3, [sp, #76]	; 0x4c
  40cf32:	4657      	mov	r7, sl
  40cf34:	f8cd 9014 	str.w	r9, [sp, #20]
            for(y = 0; y < draw_area_h; y++) {
  40cf38:	e192      	b.n	40d260 <lv_draw_map+0x700>
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40cf3a:	2302      	movs	r3, #2
  40cf3c:	931b      	str	r3, [sp, #108]	; 0x6c
  40cf3e:	e7e8      	b.n	40cf12 <lv_draw_map+0x3b2>
  40cf40:	2301      	movs	r3, #1
  40cf42:	931b      	str	r3, [sp, #108]	; 0x6c
  40cf44:	e7e5      	b.n	40cf12 <lv_draw_map+0x3b2>
                _lv_memset_ff(mask_buf, mask_buf_size);
  40cf46:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40cf48:	4650      	mov	r0, sl
  40cf4a:	4b79      	ldr	r3, [pc, #484]	; (40d130 <lv_draw_map+0x5d0>)
  40cf4c:	4798      	blx	r3
  40cf4e:	e7e2      	b.n	40cf16 <lv_draw_map+0x3b6>
#if LV_USE_IMG_TRANSFORM
                    if(transform) {

                        /*Transform*/
                        bool ret;
                        ret = _lv_img_buf_transform(&trans_dsc, rot_x + x, rot_y + y);
  40cf50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40cf52:	4443      	add	r3, r8
  40cf54:	b21b      	sxth	r3, r3
  40cf56:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40cf58:	990c      	ldr	r1, [sp, #48]	; 0x30
  40cf5a:	440a      	add	r2, r1
  40cf5c:	b212      	sxth	r2, r2
 * @return true: there is valid pixel on these x/y coordinates; false: the rotated pixel was out of the image
 * @note the result is written back to `dsc->res_color` and `dsc->res_opa`
 */
static inline bool _lv_img_buf_transform(lv_img_transform_dsc_t * dsc, lv_coord_t x, lv_coord_t y)
{
    const uint8_t * src_u8 = (const uint8_t *)dsc->cfg.src;
  40cf5e:	9927      	ldr	r1, [sp, #156]	; 0x9c

    /*Get the target point relative coordinates to the pivot*/
    int32_t xt = x - dsc->cfg.pivot_x;
  40cf60:	f9bd 40a4 	ldrsh.w	r4, [sp, #164]	; 0xa4
  40cf64:	1b1b      	subs	r3, r3, r4
    int32_t yt = y - dsc->cfg.pivot_y;
  40cf66:	f9bd 40a6 	ldrsh.w	r4, [sp, #166]	; 0xa6
  40cf6a:	1b12      	subs	r2, r2, r4

    int32_t xs;
    int32_t ys;
    if(dsc->cfg.zoom == LV_IMG_ZOOM_NONE) {
  40cf6c:	f8bd 00aa 	ldrh.w	r0, [sp, #170]	; 0xaa
  40cf70:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  40cf74:	d035      	beq.n	40cfe2 <lv_draw_map+0x482>
        /*Get the source pixel from the upscaled image*/
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
    }
    else if(dsc->cfg.angle == 0) {
  40cf76:	f9bd 00a8 	ldrsh.w	r0, [sp, #168]	; 0xa8
  40cf7a:	2800      	cmp	r0, #0
  40cf7c:	d143      	bne.n	40d006 <lv_draw_map+0x4a6>
        xt = (int32_t)((int32_t)xt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
  40cf7e:	9835      	ldr	r0, [sp, #212]	; 0xd4
  40cf80:	fb03 f300 	mul.w	r3, r3, r0
        yt = (int32_t)((int32_t)yt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
  40cf84:	fb02 f200 	mul.w	r2, r2, r0
        xs = xt + dsc->tmp.pivot_x_256;
  40cf88:	9830      	ldr	r0, [sp, #192]	; 0xc0
  40cf8a:	eb00 1663 	add.w	r6, r0, r3, asr #5
        ys = yt + dsc->tmp.pivot_y_256;
  40cf8e:	9c31      	ldr	r4, [sp, #196]	; 0xc4
  40cf90:	eb04 1362 	add.w	r3, r4, r2, asr #5
  40cf94:	9309      	str	r3, [sp, #36]	; 0x24
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_y_256;
    }

    /*Get the integer part of the source pixel*/
    int32_t xs_int = xs >> 8;
  40cf96:	1235      	asrs	r5, r6, #8
    int32_t ys_int = ys >> 8;
  40cf98:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40cf9a:	121b      	asrs	r3, r3, #8
  40cf9c:	461c      	mov	r4, r3
  40cf9e:	930f      	str	r3, [sp, #60]	; 0x3c

    if(xs_int >= dsc->cfg.src_w) return false;
  40cfa0:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	; 0xa0
  40cfa4:	429d      	cmp	r5, r3
  40cfa6:	f280 80b3 	bge.w	40d110 <lv_draw_map+0x5b0>
    else if(xs_int < 0) return false;
  40cfaa:	2d00      	cmp	r5, #0
  40cfac:	f2c0 80b6 	blt.w	40d11c <lv_draw_map+0x5bc>

    if(ys_int >= dsc->cfg.src_h) return false;
  40cfb0:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
  40cfb4:	4294      	cmp	r4, r2
  40cfb6:	f280 80b3 	bge.w	40d120 <lv_draw_map+0x5c0>
    else if(ys_int < 0) return false;
  40cfba:	2c00      	cmp	r4, #0
  40cfbc:	f2c0 80b2 	blt.w	40d124 <lv_draw_map+0x5c4>

    uint8_t px_size;
    uint32_t pxi;
    if(dsc->tmp.native_color) {
  40cfc0:	f89d 20d0 	ldrb.w	r2, [sp, #208]	; 0xd0
  40cfc4:	f012 0f04 	tst.w	r2, #4
  40cfc8:	d075      	beq.n	40d0b6 <lv_draw_map+0x556>
        if(dsc->tmp.has_alpha == 0) {
  40cfca:	f012 0f02 	tst.w	r2, #2
  40cfce:	d157      	bne.n	40d080 <lv_draw_map+0x520>
            px_size = LV_COLOR_SIZE >> 3;

            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
  40cfd0:	fb03 5304 	mla	r3, r3, r4, r5
  40cfd4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
            _lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size);
  40cfd8:	4461      	add	r1, ip
    uint8_t * d8 = (uint8_t *)dst;
  40cfda:	aa2c      	add	r2, sp, #176	; 0xb0
  40cfdc:	2302      	movs	r3, #2
  40cfde:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40cfe0:	e02f      	b.n	40d042 <lv_draw_map+0x4e2>
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
  40cfe2:	9d33      	ldr	r5, [sp, #204]	; 0xcc
  40cfe4:	fb05 f603 	mul.w	r6, r5, r3
  40cfe8:	9c32      	ldr	r4, [sp, #200]	; 0xc8
  40cfea:	fb04 6612 	mls	r6, r4, r2, r6
  40cfee:	9830      	ldr	r0, [sp, #192]	; 0xc0
  40cff0:	eb00 06a6 	add.w	r6, r0, r6, asr #2
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
  40cff4:	fb05 f202 	mul.w	r2, r5, r2
  40cff8:	fb04 2403 	mla	r4, r4, r3, r2
  40cffc:	9b31      	ldr	r3, [sp, #196]	; 0xc4
  40cffe:	eb03 03a4 	add.w	r3, r3, r4, asr #2
  40d002:	9309      	str	r3, [sp, #36]	; 0x24
  40d004:	e7c7      	b.n	40cf96 <lv_draw_map+0x436>
        xt = (int32_t)((int32_t)xt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
  40d006:	9c35      	ldr	r4, [sp, #212]	; 0xd4
  40d008:	fb03 f304 	mul.w	r3, r3, r4
  40d00c:	115b      	asrs	r3, r3, #5
        yt = (int32_t)((int32_t)yt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
  40d00e:	fb02 f204 	mul.w	r2, r2, r4
  40d012:	1152      	asrs	r2, r2, #5
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
  40d014:	9c33      	ldr	r4, [sp, #204]	; 0xcc
  40d016:	fb04 f603 	mul.w	r6, r4, r3
  40d01a:	9d32      	ldr	r5, [sp, #200]	; 0xc8
  40d01c:	fb05 6612 	mls	r6, r5, r2, r6
  40d020:	9830      	ldr	r0, [sp, #192]	; 0xc0
  40d022:	eb00 26a6 	add.w	r6, r0, r6, asr #10
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_y_256;
  40d026:	fb04 f402 	mul.w	r4, r4, r2
  40d02a:	fb05 4303 	mla	r3, r5, r3, r4
  40d02e:	9c31      	ldr	r4, [sp, #196]	; 0xc4
  40d030:	eb04 23a3 	add.w	r3, r4, r3, asr #10
  40d034:	9309      	str	r3, [sp, #36]	; 0x24
  40d036:	e7ae      	b.n	40cf96 <lv_draw_map+0x436>
        *d8 = *s8;
  40d038:	f811 0b01 	ldrb.w	r0, [r1], #1
  40d03c:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40d040:	3b01      	subs	r3, #1
    while(len) {
  40d042:	2b00      	cmp	r3, #0
  40d044:	d1f8      	bne.n	40d038 <lv_draw_map+0x4d8>
  40d046:	9409      	str	r4, [sp, #36]	; 0x24
            px_size = LV_COLOR_SIZE >> 3;
  40d048:	2202      	movs	r2, #2
        px_size = 0;    /*unused*/
        dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color);
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
    }

    if(dsc->tmp.chroma_keyed) {
  40d04a:	f89d 30d0 	ldrb.w	r3, [sp, #208]	; 0xd0
  40d04e:	f013 0f01 	tst.w	r3, #1
  40d052:	d00f      	beq.n	40d074 <lv_draw_map+0x514>
        lv_color_t ct = LV_COLOR_TRANSP;
  40d054:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  40d056:	f043 0307 	orr.w	r3, r3, #7
  40d05a:	f36f 03c7 	bfc	r3, #3, #5
  40d05e:	f36f 230c 	bfc	r3, #8, #5
  40d062:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
  40d066:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
        if(dsc->res.color.full == ct.full) return false;
  40d06a:	f8bd 10b0 	ldrh.w	r1, [sp, #176]	; 0xb0
  40d06e:	b29b      	uxth	r3, r3
  40d070:	4299      	cmp	r1, r3
  40d072:	d037      	beq.n	40d0e4 <lv_draw_map+0x584>
    }

    if(dsc->cfg.antialias == false) return true;
  40d074:	f89d 30af 	ldrb.w	r3, [sp, #175]	; 0xaf
  40d078:	2b00      	cmp	r3, #0
  40d07a:	d135      	bne.n	40d0e8 <lv_draw_map+0x588>
  40d07c:	9806      	ldr	r0, [sp, #24]
  40d07e:	e048      	b.n	40d112 <lv_draw_map+0x5b2>
            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
  40d080:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40d082:	fb03 5302 	mla	r3, r3, r2, r5
  40d086:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40d08a:	931e      	str	r3, [sp, #120]	; 0x78
  40d08c:	469c      	mov	ip, r3
            _lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size - 1);
  40d08e:	18cb      	adds	r3, r1, r3
    uint8_t * d8 = (uint8_t *)dst;
  40d090:	a82c      	add	r0, sp, #176	; 0xb0
  40d092:	2202      	movs	r2, #2
  40d094:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40d096:	e004      	b.n	40d0a2 <lv_draw_map+0x542>
        *d8 = *s8;
  40d098:	f813 eb01 	ldrb.w	lr, [r3], #1
  40d09c:	f800 eb01 	strb.w	lr, [r0], #1
        len--;
  40d0a0:	3a01      	subs	r2, #1
    while(len) {
  40d0a2:	2a00      	cmp	r2, #0
  40d0a4:	d1f8      	bne.n	40d098 <lv_draw_map+0x538>
  40d0a6:	9409      	str	r4, [sp, #36]	; 0x24
            dsc->res.opa = src_u8[pxi + px_size - 1];
  40d0a8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40d0aa:	4419      	add	r1, r3
  40d0ac:	788b      	ldrb	r3, [r1, #2]
  40d0ae:	f88d 30b2 	strb.w	r3, [sp, #178]	; 0xb2
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE;
  40d0b2:	2203      	movs	r2, #3
  40d0b4:	e7c9      	b.n	40d04a <lv_draw_map+0x4ea>
        dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color);
  40d0b6:	b229      	sxth	r1, r5
  40d0b8:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
  40d0bc:	f8bd 30ac 	ldrh.w	r3, [sp, #172]	; 0xac
  40d0c0:	9220      	str	r2, [sp, #128]	; 0x80
  40d0c2:	911e      	str	r1, [sp, #120]	; 0x78
  40d0c4:	a82d      	add	r0, sp, #180	; 0xb4
  40d0c6:	4c1b      	ldr	r4, [pc, #108]	; (40d134 <lv_draw_map+0x5d4>)
  40d0c8:	47a0      	blx	r4
  40d0ca:	f8ad 00b0 	strh.w	r0, [sp, #176]	; 0xb0
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
  40d0ce:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40d0d0:	991e      	ldr	r1, [sp, #120]	; 0x78
  40d0d2:	a82d      	add	r0, sp, #180	; 0xb4
  40d0d4:	4b18      	ldr	r3, [pc, #96]	; (40d138 <lv_draw_map+0x5d8>)
  40d0d6:	4798      	blx	r3
  40d0d8:	f88d 00b2 	strb.w	r0, [sp, #178]	; 0xb2
        pxi = 0; /*unused*/
  40d0dc:	f04f 0c00 	mov.w	ip, #0
        px_size = 0;    /*unused*/
  40d0e0:	4662      	mov	r2, ip
  40d0e2:	e7b2      	b.n	40d04a <lv_draw_map+0x4ea>
        if(dsc->res.color.full == ct.full) return false;
  40d0e4:	2000      	movs	r0, #0
  40d0e6:	e014      	b.n	40d112 <lv_draw_map+0x5b2>

    dsc->tmp.xs = xs;
  40d0e8:	f8ad 60d8 	strh.w	r6, [sp, #216]	; 0xd8
    dsc->tmp.ys = ys;
  40d0ec:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  40d0f0:	f8ad 30da 	strh.w	r3, [sp, #218]	; 0xda
    dsc->tmp.xs_int = xs_int;
  40d0f4:	f8ad 50dc 	strh.w	r5, [sp, #220]	; 0xdc
    dsc->tmp.ys_int = ys_int;
  40d0f8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  40d0fc:	f8ad 30de 	strh.w	r3, [sp, #222]	; 0xde
    dsc->tmp.pxi = pxi;
  40d100:	f8cd c0e0 	str.w	ip, [sp, #224]	; 0xe0
    dsc->tmp.px_size = px_size;
  40d104:	f88d 20e4 	strb.w	r2, [sp, #228]	; 0xe4

    bool ret;
    ret = _lv_img_buf_transform_anti_alias(dsc);
  40d108:	a827      	add	r0, sp, #156	; 0x9c
  40d10a:	4b0c      	ldr	r3, [pc, #48]	; (40d13c <lv_draw_map+0x5dc>)
  40d10c:	4798      	blx	r3
  40d10e:	e000      	b.n	40d112 <lv_draw_map+0x5b2>
    if(xs_int >= dsc->cfg.src_w) return false;
  40d110:	2000      	movs	r0, #0
                        if(ret == false) {
  40d112:	b9b8      	cbnz	r0, 40d144 <lv_draw_map+0x5e4>
                            mask_buf[px_i] = LV_OPA_TRANSP;
  40d114:	2300      	movs	r3, #0
  40d116:	f807 3009 	strb.w	r3, [r7, r9]
                            continue;
  40d11a:	e068      	b.n	40d1ee <lv_draw_map+0x68e>
    else if(xs_int < 0) return false;
  40d11c:	2000      	movs	r0, #0
  40d11e:	e7f8      	b.n	40d112 <lv_draw_map+0x5b2>
    if(ys_int >= dsc->cfg.src_h) return false;
  40d120:	2000      	movs	r0, #0
  40d122:	e7f6      	b.n	40d112 <lv_draw_map+0x5b2>
    else if(ys_int < 0) return false;
  40d124:	2000      	movs	r0, #0
  40d126:	e7f4      	b.n	40d112 <lv_draw_map+0x5b2>
  40d128:	00415647 	.word	0x00415647
  40d12c:	004127f1 	.word	0x004127f1
  40d130:	00416c65 	.word	0x00416c65
  40d134:	004125d1 	.word	0x004125d1
  40d138:	004126f5 	.word	0x004126f5
  40d13c:	00412b05 	.word	0x00412b05
  40d140:	0000e007 	.word	0x0000e007
                        }
                        else {
                            mask_buf[px_i] = trans_dsc.res.opa;
  40d144:	f89d 30b2 	ldrb.w	r3, [sp, #178]	; 0xb2
  40d148:	f807 3009 	strb.w	r3, [r7, r9]
                            c.full = trans_dsc.res.color.full;
  40d14c:	f8bd 30b0 	ldrh.w	r3, [sp, #176]	; 0xb0
  40d150:	e010      	b.n	40d174 <lv_draw_map+0x614>
#endif
                                continue;
                            }
                        }
                        else {
                            mask_buf[px_i] = 0xFF;
  40d152:	23ff      	movs	r3, #255	; 0xff
  40d154:	f807 3009 	strb.w	r3, [r7, r9]
#if LV_COLOR_DEPTH == 1
                        c.full = map_px[0];
#elif LV_COLOR_DEPTH == 8
                        c.full =  map_px[0];
#elif LV_COLOR_DEPTH == 16
                        c.full =  map_px[0] + (map_px[1] << 8);
  40d158:	f89a 2000 	ldrb.w	r2, [sl]
  40d15c:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40d160:	eb02 2203 	add.w	r2, r2, r3, lsl #8
  40d164:	b292      	uxth	r2, r2
  40d166:	4613      	mov	r3, r2
#elif LV_COLOR_DEPTH == 32
                        c.full =  *((uint32_t *)map_px);
                        c.ch.alpha = 0xFF;
#endif
                        if(chroma_key) {
  40d168:	990d      	ldr	r1, [sp, #52]	; 0x34
  40d16a:	b119      	cbz	r1, 40d174 <lv_draw_map+0x614>
                            if(c.full == chroma_keyed_color.full) {
  40d16c:	f83f 1030 	ldrh.w	r1, [pc, #-48]	; 40d140 <lv_draw_map+0x5e0>
  40d170:	428a      	cmp	r2, r1
  40d172:	d053      	beq.n	40d21c <lv_draw_map+0x6bc>
                                continue;
                            }
                        }
                    }

                    if(draw_dsc->recolor_opa != 0) {
  40d174:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40d176:	7a92      	ldrb	r2, [r2, #10]
  40d178:	b3b2      	cbz	r2, 40d1e8 <lv_draw_map+0x688>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40d17a:	f8bd 108c 	ldrh.w	r1, [sp, #140]	; 0x8c
  40d17e:	f3c3 02c4 	ubfx	r2, r3, #3, #5
  40d182:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40d184:	fb04 1202 	mla	r2, r4, r2, r1
  40d188:	3280      	adds	r2, #128	; 0x80
  40d18a:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  40d18e:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  40d192:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  40d196:	f362 0bc7 	bfi	fp, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40d19a:	f8bd 108e 	ldrh.w	r1, [sp, #142]	; 0x8e
  40d19e:	f003 0007 	and.w	r0, r3, #7
  40d1a2:	f3c3 3242 	ubfx	r2, r3, #13, #3
  40d1a6:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
  40d1aa:	fb02 1204 	mla	r2, r2, r4, r1
  40d1ae:	3280      	adds	r2, #128	; 0x80
  40d1b0:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  40d1b4:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  40d1b8:	f3c2 6182 	ubfx	r1, r2, #26, #3
  40d1bc:	f361 0b02 	bfi	fp, r1, #0, #3
  40d1c0:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  40d1c4:	f362 3b4f 	bfi	fp, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40d1c8:	f8bd 2090 	ldrh.w	r2, [sp, #144]	; 0x90
  40d1cc:	f3c3 2304 	ubfx	r3, r3, #8, #5
  40d1d0:	fb03 2304 	mla	r3, r3, r4, r2
  40d1d4:	3380      	adds	r3, #128	; 0x80
  40d1d6:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40d1da:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40d1de:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40d1e2:	f363 2b0c 	bfi	fp, r3, #8, #5
  40d1e6:	465b      	mov	r3, fp
                        c = lv_color_mix_premult(recolor_premult, c, recolor_opa_inv);
                    }

                    map2[px_i].full = c.full;
  40d1e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40d1ea:	f822 3019 	strh.w	r3, [r2, r9, lsl #1]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
  40d1ee:	f108 0801 	add.w	r8, r8, #1
  40d1f2:	9b07      	ldr	r3, [sp, #28]
  40d1f4:	449a      	add	sl, r3
  40d1f6:	f109 0901 	add.w	r9, r9, #1
  40d1fa:	9b05      	ldr	r3, [sp, #20]
  40d1fc:	4598      	cmp	r8, r3
  40d1fe:	da11      	bge.n	40d224 <lv_draw_map+0x6c4>
                    if(transform) {
  40d200:	9b06      	ldr	r3, [sp, #24]
  40d202:	2b00      	cmp	r3, #0
  40d204:	f47f aea4 	bne.w	40cf50 <lv_draw_map+0x3f0>
                        if(alpha_byte) {
  40d208:	9b08      	ldr	r3, [sp, #32]
  40d20a:	2b00      	cmp	r3, #0
  40d20c:	d0a1      	beq.n	40d152 <lv_draw_map+0x5f2>
                            lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
  40d20e:	f89a 3002 	ldrb.w	r3, [sl, #2]
                            mask_buf[px_i] = px_opa;
  40d212:	f807 3009 	strb.w	r3, [r7, r9]
                            if(px_opa == 0) {
  40d216:	2b00      	cmp	r3, #0
  40d218:	d0e9      	beq.n	40d1ee <lv_draw_map+0x68e>
  40d21a:	e79d      	b.n	40d158 <lv_draw_map+0x5f8>
                                mask_buf[px_i] = LV_OPA_TRANSP;
  40d21c:	2300      	movs	r3, #0
  40d21e:	f807 3009 	strb.w	r3, [r7, r9]
                                continue;
  40d222:	e7e4      	b.n	40d1ee <lv_draw_map+0x68e>
                }

                /*Apply the masks if any*/
                if(other_mask_cnt) {
  40d224:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40d226:	bb8b      	cbnz	r3, 40d28c <lv_draw_map+0x72c>
                    else if(mask_res_sub == LV_DRAW_MASK_RES_CHANGED) {
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
                    }
                }

                map_buf_tmp += map_w * px_size_byte;
  40d228:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40d22a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40d22c:	9911      	ldr	r1, [sp, #68]	; 0x44
  40d22e:	fb02 1303 	mla	r3, r2, r3, r1
  40d232:	9311      	str	r3, [sp, #68]	; 0x44
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40d234:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
  40d238:	f8bd 20e8 	ldrh.w	r2, [sp, #232]	; 0xe8
  40d23c:	1a9b      	subs	r3, r3, r2
  40d23e:	b29b      	uxth	r3, r3
  40d240:	3301      	adds	r3, #1
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
  40d242:	fa09 f383 	sxtah	r3, r9, r3
  40d246:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  40d248:	429a      	cmp	r2, r3
  40d24a:	d94c      	bls.n	40d2e6 <lv_draw_map+0x786>
                    blend_area.y2 ++;
  40d24c:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
  40d250:	3301      	adds	r3, #1
  40d252:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
  40d256:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
            for(y = 0; y < draw_area_h; y++) {
  40d25a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40d25c:	3301      	adds	r3, #1
  40d25e:	930c      	str	r3, [sp, #48]	; 0x30
  40d260:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40d262:	9a18      	ldr	r2, [sp, #96]	; 0x60
  40d264:	4293      	cmp	r3, r2
  40d266:	da72      	bge.n	40d34e <lv_draw_map+0x7ee>
                int32_t rot_x = disp_area->x1 + draw_area.x1 - map_area->x1;
  40d268:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40d26a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
  40d26e:	f9bd 20e8 	ldrsh.w	r2, [sp, #232]	; 0xe8
  40d272:	4413      	add	r3, r2
  40d274:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40d276:	f9b2 2000 	ldrsh.w	r2, [r2]
  40d27a:	1a9b      	subs	r3, r3, r2
  40d27c:	930e      	str	r3, [sp, #56]	; 0x38
                map_px = map_buf_tmp;
  40d27e:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
  40d282:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
  40d286:	f04f 0800 	mov.w	r8, #0
  40d28a:	e7b6      	b.n	40d1fa <lv_draw_map+0x69a>
                    mask_res_sub = lv_draw_mask_apply(mask_buf + px_i_start, draw_area.x1 + vdb->area.x1, y + draw_area.y1 + vdb->area.y1,
  40d28c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40d28e:	443b      	add	r3, r7
  40d290:	461d      	mov	r5, r3
  40d292:	f8bd 00e8 	ldrh.w	r0, [sp, #232]	; 0xe8
  40d296:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40d298:	8a21      	ldrh	r1, [r4, #16]
  40d29a:	4401      	add	r1, r0
  40d29c:	f8bd 20ea 	ldrh.w	r2, [sp, #234]	; 0xea
  40d2a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40d2a2:	441a      	add	r2, r3
  40d2a4:	8a63      	ldrh	r3, [r4, #18]
  40d2a6:	fa13 f282 	uxtah	r2, r3, r2
  40d2aa:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
  40d2ae:	1a1b      	subs	r3, r3, r0
  40d2b0:	b29b      	uxth	r3, r3
  40d2b2:	3301      	adds	r3, #1
  40d2b4:	b21b      	sxth	r3, r3
  40d2b6:	b212      	sxth	r2, r2
  40d2b8:	b209      	sxth	r1, r1
  40d2ba:	4628      	mov	r0, r5
  40d2bc:	4c33      	ldr	r4, [pc, #204]	; (40d38c <lv_draw_map+0x82c>)
  40d2be:	47a0      	blx	r4
                    if(mask_res_sub == LV_DRAW_MASK_RES_TRANSP) {
  40d2c0:	b118      	cbz	r0, 40d2ca <lv_draw_map+0x76a>
                    else if(mask_res_sub == LV_DRAW_MASK_RES_CHANGED) {
  40d2c2:	2802      	cmp	r0, #2
  40d2c4:	d1b0      	bne.n	40d228 <lv_draw_map+0x6c8>
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
  40d2c6:	901b      	str	r0, [sp, #108]	; 0x6c
  40d2c8:	e7ae      	b.n	40d228 <lv_draw_map+0x6c8>
  40d2ca:	f8bd 10ec 	ldrh.w	r1, [sp, #236]	; 0xec
  40d2ce:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	; 0xe8
  40d2d2:	1ac9      	subs	r1, r1, r3
  40d2d4:	b289      	uxth	r1, r1
  40d2d6:	3101      	adds	r1, #1
                        _lv_memset_00(mask_buf + px_i_start, lv_area_get_width(&draw_area));
  40d2d8:	b209      	sxth	r1, r1
  40d2da:	4628      	mov	r0, r5
  40d2dc:	4b2c      	ldr	r3, [pc, #176]	; (40d390 <lv_draw_map+0x830>)
  40d2de:	4798      	blx	r3
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
  40d2e0:	2302      	movs	r3, #2
  40d2e2:	931b      	str	r3, [sp, #108]	; 0x6c
  40d2e4:	e7a0      	b.n	40d228 <lv_draw_map+0x6c8>
                }
                else {

                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
  40d2e6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40d2e8:	7bab      	ldrb	r3, [r5, #14]
  40d2ea:	9302      	str	r3, [sp, #8]
  40d2ec:	782b      	ldrb	r3, [r5, #0]
  40d2ee:	9301      	str	r3, [sp, #4]
  40d2f0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40d2f2:	9300      	str	r3, [sp, #0]
  40d2f4:	463b      	mov	r3, r7
  40d2f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40d2f8:	a925      	add	r1, sp, #148	; 0x94
  40d2fa:	981f      	ldr	r0, [sp, #124]	; 0x7c
  40d2fc:	4c25      	ldr	r4, [pc, #148]	; (40d394 <lv_draw_map+0x834>)
  40d2fe:	47a0      	blx	r4

                    blend_area.y1 = blend_area.y2 + 1;
  40d300:	f8bd 309a 	ldrh.w	r3, [sp, #154]	; 0x9a
  40d304:	3301      	adds	r3, #1
  40d306:	b21b      	sxth	r3, r3
  40d308:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
                    blend_area.y2 = blend_area.y1;
  40d30c:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a

                    px_i = 0;
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40d310:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40d312:	b943      	cbnz	r3, 40d326 <lv_draw_map+0x7c6>
  40d314:	886b      	ldrh	r3, [r5, #2]
  40d316:	b96b      	cbnz	r3, 40d334 <lv_draw_map+0x7d4>
                                draw_dsc->zoom != LV_IMG_ZOOM_NONE) ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
  40d318:	892b      	ldrh	r3, [r5, #8]
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40d31a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40d31e:	d00c      	beq.n	40d33a <lv_draw_map+0x7da>
  40d320:	2302      	movs	r3, #2
  40d322:	931b      	str	r3, [sp, #108]	; 0x6c
  40d324:	e001      	b.n	40d32a <lv_draw_map+0x7ca>
  40d326:	2302      	movs	r3, #2
  40d328:	931b      	str	r3, [sp, #108]	; 0x6c

                    /*Prepare the `mask_buf`if there are other masks*/
                    if(other_mask_cnt) {
  40d32a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40d32c:	b943      	cbnz	r3, 40d340 <lv_draw_map+0x7e0>
                    px_i = 0;
  40d32e:	2300      	movs	r3, #0
  40d330:	9313      	str	r3, [sp, #76]	; 0x4c
  40d332:	e792      	b.n	40d25a <lv_draw_map+0x6fa>
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40d334:	2302      	movs	r3, #2
  40d336:	931b      	str	r3, [sp, #108]	; 0x6c
  40d338:	e7f7      	b.n	40d32a <lv_draw_map+0x7ca>
  40d33a:	2301      	movs	r3, #1
  40d33c:	931b      	str	r3, [sp, #108]	; 0x6c
  40d33e:	e7f4      	b.n	40d32a <lv_draw_map+0x7ca>
                        _lv_memset_ff(mask_buf, mask_buf_size);
  40d340:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40d342:	4638      	mov	r0, r7
  40d344:	4b14      	ldr	r3, [pc, #80]	; (40d398 <lv_draw_map+0x838>)
  40d346:	4798      	blx	r3
                    px_i = 0;
  40d348:	2300      	movs	r3, #0
  40d34a:	9313      	str	r3, [sp, #76]	; 0x4c
  40d34c:	e785      	b.n	40d25a <lv_draw_map+0x6fa>
  40d34e:	46ba      	mov	sl, r7
                    }
                }
            }

            /*Flush the last part*/
            if(blend_area.y1 != blend_area.y2) {
  40d350:	f9bd 2096 	ldrsh.w	r2, [sp, #150]	; 0x96
  40d354:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
  40d358:	429a      	cmp	r2, r3
  40d35a:	d00f      	beq.n	40d37c <lv_draw_map+0x81c>
                blend_area.y2--;
  40d35c:	3b01      	subs	r3, #1
  40d35e:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
  40d362:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40d364:	7b93      	ldrb	r3, [r2, #14]
  40d366:	9302      	str	r3, [sp, #8]
  40d368:	7813      	ldrb	r3, [r2, #0]
  40d36a:	9301      	str	r3, [sp, #4]
  40d36c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40d36e:	9300      	str	r3, [sp, #0]
  40d370:	463b      	mov	r3, r7
  40d372:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40d374:	a925      	add	r1, sp, #148	; 0x94
  40d376:	981f      	ldr	r0, [sp, #124]	; 0x7c
  40d378:	4c06      	ldr	r4, [pc, #24]	; (40d394 <lv_draw_map+0x834>)
  40d37a:	47a0      	blx	r4
            }

            _lv_mem_buf_release(mask_buf);
  40d37c:	4650      	mov	r0, sl
  40d37e:	4c07      	ldr	r4, [pc, #28]	; (40d39c <lv_draw_map+0x83c>)
  40d380:	47a0      	blx	r4
            _lv_mem_buf_release(map2);
  40d382:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40d384:	47a0      	blx	r4
        }
    }
}
  40d386:	b03d      	add	sp, #244	; 0xf4
  40d388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d38c:	0040fc95 	.word	0x0040fc95
  40d390:	00416c0d 	.word	0x00416c0d
  40d394:	0040ca41 	.word	0x0040ca41
  40d398:	00416c65 	.word	0x00416c65
  40d39c:	00416831 	.word	0x00416831

0040d3a0 <show_error>:

static void show_error(const lv_area_t * coords, const lv_area_t * clip_area, const char * msg)
{
  40d3a0:	b570      	push	{r4, r5, r6, lr}
  40d3a2:	b0a0      	sub	sp, #128	; 0x80
  40d3a4:	4604      	mov	r4, r0
  40d3a6:	460d      	mov	r5, r1
  40d3a8:	4616      	mov	r6, r2
    lv_draw_rect_dsc_t rect_dsc;
    lv_draw_rect_dsc_init(&rect_dsc);
  40d3aa:	a80b      	add	r0, sp, #44	; 0x2c
  40d3ac:	4b0b      	ldr	r3, [pc, #44]	; (40d3dc <show_error+0x3c>)
  40d3ae:	4798      	blx	r3
    rect_dsc.bg_color = LV_COLOR_WHITE;
  40d3b0:	4b0b      	ldr	r3, [pc, #44]	; (40d3e0 <show_error+0x40>)
  40d3b2:	881b      	ldrh	r3, [r3, #0]
  40d3b4:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    lv_draw_rect(coords, clip_area, &rect_dsc);
  40d3b8:	aa0b      	add	r2, sp, #44	; 0x2c
  40d3ba:	4629      	mov	r1, r5
  40d3bc:	4620      	mov	r0, r4
  40d3be:	4b09      	ldr	r3, [pc, #36]	; (40d3e4 <show_error+0x44>)
  40d3c0:	4798      	blx	r3

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
  40d3c2:	a802      	add	r0, sp, #8
  40d3c4:	4b08      	ldr	r3, [pc, #32]	; (40d3e8 <show_error+0x48>)
  40d3c6:	4798      	blx	r3
    lv_draw_label(coords, clip_area, &label_dsc, msg, NULL);
  40d3c8:	2300      	movs	r3, #0
  40d3ca:	9300      	str	r3, [sp, #0]
  40d3cc:	4633      	mov	r3, r6
  40d3ce:	aa02      	add	r2, sp, #8
  40d3d0:	4629      	mov	r1, r5
  40d3d2:	4620      	mov	r0, r4
  40d3d4:	4c05      	ldr	r4, [pc, #20]	; (40d3ec <show_error+0x4c>)
  40d3d6:	47a0      	blx	r4
}
  40d3d8:	b020      	add	sp, #128	; 0x80
  40d3da:	bd70      	pop	{r4, r5, r6, pc}
  40d3dc:	0041250d 	.word	0x0041250d
  40d3e0:	0042c740 	.word	0x0042c740
  40d3e4:	00412559 	.word	0x00412559
  40d3e8:	0040df85 	.word	0x0040df85
  40d3ec:	0040dfcd 	.word	0x0040dfcd

0040d3f0 <lv_draw_img_dsc_init>:
{
  40d3f0:	b510      	push	{r4, lr}
  40d3f2:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
  40d3f4:	2110      	movs	r1, #16
  40d3f6:	4b07      	ldr	r3, [pc, #28]	; (40d414 <lv_draw_img_dsc_init+0x24>)
  40d3f8:	4798      	blx	r3
    dsc->recolor = LV_COLOR_BLACK;
  40d3fa:	2300      	movs	r3, #0
  40d3fc:	81a3      	strh	r3, [r4, #12]
    dsc->opa = LV_OPA_COVER;
  40d3fe:	23ff      	movs	r3, #255	; 0xff
  40d400:	7023      	strb	r3, [r4, #0]
    dsc->zoom = LV_IMG_ZOOM_NONE;
  40d402:	f44f 7380 	mov.w	r3, #256	; 0x100
  40d406:	8123      	strh	r3, [r4, #8]
    dsc->antialias = LV_ANTIALIAS;
  40d408:	7be3      	ldrb	r3, [r4, #15]
  40d40a:	f043 0301 	orr.w	r3, r3, #1
  40d40e:	73e3      	strb	r3, [r4, #15]
  40d410:	bd10      	pop	{r4, pc}
  40d412:	bf00      	nop
  40d414:	00416c0d 	.word	0x00416c0d

0040d418 <lv_img_cf_get_px_size>:
    switch(cf) {
  40d418:	3804      	subs	r0, #4
  40d41a:	280a      	cmp	r0, #10
  40d41c:	d807      	bhi.n	40d42e <lv_img_cf_get_px_size+0x16>
  40d41e:	e8df f000 	tbb	[pc, r0]
  40d422:	0812      	.short	0x0812
  40d424:	0e0c0a12 	.word	0x0e0c0a12
  40d428:	0e0c0a10 	.word	0x0e0c0a10
  40d42c:	10          	.byte	0x10
  40d42d:	00          	.byte	0x00
            px_size = 0;
  40d42e:	2000      	movs	r0, #0
  40d430:	4770      	bx	lr
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE << 3;
  40d432:	2018      	movs	r0, #24
            break;
  40d434:	4770      	bx	lr
            px_size = 1;
  40d436:	2001      	movs	r0, #1
            break;
  40d438:	4770      	bx	lr
            px_size = 2;
  40d43a:	2002      	movs	r0, #2
            break;
  40d43c:	4770      	bx	lr
            px_size = 4;
  40d43e:	2004      	movs	r0, #4
            break;
  40d440:	4770      	bx	lr
            px_size = 8;
  40d442:	2008      	movs	r0, #8
            break;
  40d444:	4770      	bx	lr
            px_size = LV_COLOR_SIZE;
  40d446:	2010      	movs	r0, #16
}
  40d448:	4770      	bx	lr

0040d44a <lv_img_cf_is_chroma_keyed>:
    switch(cf) {
  40d44a:	2803      	cmp	r0, #3
  40d44c:	d005      	beq.n	40d45a <lv_img_cf_is_chroma_keyed+0x10>
  40d44e:	d302      	bcc.n	40d456 <lv_img_cf_is_chroma_keyed+0xc>
  40d450:	3806      	subs	r0, #6
  40d452:	2804      	cmp	r0, #4
  40d454:	d901      	bls.n	40d45a <lv_img_cf_is_chroma_keyed+0x10>
            is_chroma_keyed = false;
  40d456:	2000      	movs	r0, #0
}
  40d458:	4770      	bx	lr
            is_chroma_keyed = true;
  40d45a:	2001      	movs	r0, #1
  40d45c:	4770      	bx	lr

0040d45e <lv_img_cf_has_alpha>:
    switch(cf) {
  40d45e:	3802      	subs	r0, #2
  40d460:	280c      	cmp	r0, #12
  40d462:	d80a      	bhi.n	40d47a <lv_img_cf_has_alpha+0x1c>
  40d464:	e8df f000 	tbb	[pc, r0]
  40d468:	07090907 	.word	0x07090907
  40d46c:	07070709 	.word	0x07070709
  40d470:	07070707 	.word	0x07070707
  40d474:	07          	.byte	0x07
  40d475:	00          	.byte	0x00
            has_alpha = true;
  40d476:	2001      	movs	r0, #1
  40d478:	4770      	bx	lr
            has_alpha = false;
  40d47a:	2000      	movs	r0, #0
}
  40d47c:	4770      	bx	lr
	...

0040d480 <lv_img_draw_core>:
{
  40d480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d484:	b08f      	sub	sp, #60	; 0x3c
    if(draw_dsc->opa <= LV_OPA_MIN) return LV_RES_OK;
  40d486:	781c      	ldrb	r4, [r3, #0]
  40d488:	2c02      	cmp	r4, #2
  40d48a:	d803      	bhi.n	40d494 <lv_img_draw_core+0x14>
  40d48c:	2001      	movs	r0, #1
}
  40d48e:	b00f      	add	sp, #60	; 0x3c
  40d490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d494:	461c      	mov	r4, r3
  40d496:	460d      	mov	r5, r1
  40d498:	4682      	mov	sl, r0
    lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor);
  40d49a:	8999      	ldrh	r1, [r3, #12]
  40d49c:	4610      	mov	r0, r2
  40d49e:	4b73      	ldr	r3, [pc, #460]	; (40d66c <lv_img_draw_core+0x1ec>)
  40d4a0:	4798      	blx	r3
    if(cdsc == NULL) return LV_RES_INV;
  40d4a2:	4606      	mov	r6, r0
  40d4a4:	2800      	cmp	r0, #0
  40d4a6:	f000 80de 	beq.w	40d666 <lv_img_draw_core+0x1e6>
    bool chroma_keyed = lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf);
  40d4aa:	f890 800c 	ldrb.w	r8, [r0, #12]
  40d4ae:	f008 081f 	and.w	r8, r8, #31
  40d4b2:	4640      	mov	r0, r8
  40d4b4:	4b6e      	ldr	r3, [pc, #440]	; (40d670 <lv_img_draw_core+0x1f0>)
  40d4b6:	4798      	blx	r3
  40d4b8:	4607      	mov	r7, r0
    bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
  40d4ba:	4640      	mov	r0, r8
  40d4bc:	4b6d      	ldr	r3, [pc, #436]	; (40d674 <lv_img_draw_core+0x1f4>)
  40d4be:	4798      	blx	r3
  40d4c0:	4680      	mov	r8, r0
    if(cdsc->dec_dsc.error_msg != NULL) {
  40d4c2:	69b2      	ldr	r2, [r6, #24]
  40d4c4:	b12a      	cbz	r2, 40d4d2 <lv_img_draw_core+0x52>
        show_error(coords, clip_area, cdsc->dec_dsc.error_msg);
  40d4c6:	4629      	mov	r1, r5
  40d4c8:	4650      	mov	r0, sl
  40d4ca:	4b6b      	ldr	r3, [pc, #428]	; (40d678 <lv_img_draw_core+0x1f8>)
  40d4cc:	4798      	blx	r3
    return LV_RES_OK;
  40d4ce:	2001      	movs	r0, #1
  40d4d0:	e7dd      	b.n	40d48e <lv_img_draw_core+0xe>
    else if(cdsc->dec_dsc.img_data) {
  40d4d2:	6933      	ldr	r3, [r6, #16]
  40d4d4:	2b00      	cmp	r3, #0
  40d4d6:	d053      	beq.n	40d580 <lv_img_draw_core+0x100>
  40d4d8:	4651      	mov	r1, sl
  40d4da:	aa0a      	add	r2, sp, #40	; 0x28
  40d4dc:	2308      	movs	r3, #8
  40d4de:	e004      	b.n	40d4ea <lv_img_draw_core+0x6a>
        *d8 = *s8;
  40d4e0:	f811 0b01 	ldrb.w	r0, [r1], #1
  40d4e4:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40d4e8:	3b01      	subs	r3, #1
    while(len) {
  40d4ea:	2b00      	cmp	r3, #0
  40d4ec:	d1f8      	bne.n	40d4e0 <lv_img_draw_core+0x60>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
  40d4ee:	8863      	ldrh	r3, [r4, #2]
  40d4f0:	b91b      	cbnz	r3, 40d4fa <lv_img_draw_core+0x7a>
  40d4f2:	8922      	ldrh	r2, [r4, #8]
  40d4f4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
  40d4f8:	d030      	beq.n	40d55c <lv_img_draw_core+0xdc>
  40d4fa:	f8ba 1004 	ldrh.w	r1, [sl, #4]
  40d4fe:	f8ba 2000 	ldrh.w	r2, [sl]
  40d502:	1a89      	subs	r1, r1, r2
  40d504:	b289      	uxth	r1, r1
  40d506:	3101      	adds	r1, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40d508:	f8ba 2006 	ldrh.w	r2, [sl, #6]
  40d50c:	f8ba 0002 	ldrh.w	r0, [sl, #2]
  40d510:	1a12      	subs	r2, r2, r0
  40d512:	b292      	uxth	r2, r2
  40d514:	3201      	adds	r2, #1
            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
  40d516:	1d20      	adds	r0, r4, #4
  40d518:	9001      	str	r0, [sp, #4]
  40d51a:	8920      	ldrh	r0, [r4, #8]
  40d51c:	9000      	str	r0, [sp, #0]
  40d51e:	b21b      	sxth	r3, r3
  40d520:	b212      	sxth	r2, r2
  40d522:	b209      	sxth	r1, r1
  40d524:	a80a      	add	r0, sp, #40	; 0x28
  40d526:	f8df 9170 	ldr.w	r9, [pc, #368]	; 40d698 <lv_img_draw_core+0x218>
  40d52a:	47c8      	blx	r9
            map_area_rot.x1 += coords->x1;
  40d52c:	f8ba 2000 	ldrh.w	r2, [sl]
  40d530:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
  40d534:	4413      	add	r3, r2
  40d536:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
            map_area_rot.y1 += coords->y1;
  40d53a:	f8ba 3002 	ldrh.w	r3, [sl, #2]
  40d53e:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
  40d542:	4419      	add	r1, r3
  40d544:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
            map_area_rot.x2 += coords->x1;
  40d548:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
  40d54c:	440a      	add	r2, r1
  40d54e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
            map_area_rot.y2 += coords->y1;
  40d552:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
  40d556:	4413      	add	r3, r2
  40d558:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        union_ok = _lv_area_intersect(&mask_com, clip_area, &map_area_rot);
  40d55c:	aa0a      	add	r2, sp, #40	; 0x28
  40d55e:	4629      	mov	r1, r5
  40d560:	a80c      	add	r0, sp, #48	; 0x30
  40d562:	4b46      	ldr	r3, [pc, #280]	; (40d67c <lv_img_draw_core+0x1fc>)
  40d564:	4798      	blx	r3
        if(union_ok == false) {
  40d566:	b908      	cbnz	r0, 40d56c <lv_img_draw_core+0xec>
            return LV_RES_OK;
  40d568:	2001      	movs	r0, #1
  40d56a:	e790      	b.n	40d48e <lv_img_draw_core+0xe>
        lv_draw_map(coords, &mask_com, cdsc->dec_dsc.img_data, draw_dsc, chroma_keyed, alpha_byte);
  40d56c:	6932      	ldr	r2, [r6, #16]
  40d56e:	f8cd 8004 	str.w	r8, [sp, #4]
  40d572:	9700      	str	r7, [sp, #0]
  40d574:	4623      	mov	r3, r4
  40d576:	a90c      	add	r1, sp, #48	; 0x30
  40d578:	4650      	mov	r0, sl
  40d57a:	4c41      	ldr	r4, [pc, #260]	; (40d680 <lv_img_draw_core+0x200>)
  40d57c:	47a0      	blx	r4
  40d57e:	e7a6      	b.n	40d4ce <lv_img_draw_core+0x4e>
        union_ok = _lv_area_intersect(&mask_com, clip_area, coords);
  40d580:	4652      	mov	r2, sl
  40d582:	4629      	mov	r1, r5
  40d584:	a808      	add	r0, sp, #32
  40d586:	4b3d      	ldr	r3, [pc, #244]	; (40d67c <lv_img_draw_core+0x1fc>)
  40d588:	4798      	blx	r3
        if(union_ok == false) {
  40d58a:	b908      	cbnz	r0, 40d590 <lv_img_draw_core+0x110>
            return LV_RES_OK;
  40d58c:	2001      	movs	r0, #1
  40d58e:	e77e      	b.n	40d48e <lv_img_draw_core+0xe>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40d590:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  40d594:	f10d 0938 	add.w	r9, sp, #56	; 0x38
  40d598:	f839 2d18 	ldrh.w	r2, [r9, #-24]!
  40d59c:	1a9b      	subs	r3, r3, r2
  40d59e:	b29b      	uxth	r3, r3
  40d5a0:	3301      	adds	r3, #1
  40d5a2:	b21b      	sxth	r3, r3
  40d5a4:	9303      	str	r3, [sp, #12]
        uint8_t  * buf = _lv_mem_buf_get(lv_area_get_width(&mask_com) *
  40d5a6:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  40d5aa:	4b36      	ldr	r3, [pc, #216]	; (40d684 <lv_img_draw_core+0x204>)
  40d5ac:	4798      	blx	r3
  40d5ae:	9007      	str	r0, [sp, #28]
    uint8_t * d8 = (uint8_t *)dst;
  40d5b0:	aa0a      	add	r2, sp, #40	; 0x28
  40d5b2:	2308      	movs	r3, #8
  40d5b4:	e004      	b.n	40d5c0 <lv_img_draw_core+0x140>
        *d8 = *s8;
  40d5b6:	f819 1b01 	ldrb.w	r1, [r9], #1
  40d5ba:	f802 1b01 	strb.w	r1, [r2], #1
        len--;
  40d5be:	3b01      	subs	r3, #1
    while(len) {
  40d5c0:	2b00      	cmp	r3, #0
  40d5c2:	d1f8      	bne.n	40d5b6 <lv_img_draw_core+0x136>
        lv_area_set_height(&line, 1);
  40d5c4:	2101      	movs	r1, #1
  40d5c6:	a80a      	add	r0, sp, #40	; 0x28
  40d5c8:	4b2f      	ldr	r3, [pc, #188]	; (40d688 <lv_img_draw_core+0x208>)
  40d5ca:	4798      	blx	r3
        int32_t x = mask_com.x1 - coords->x1;
  40d5cc:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
  40d5d0:	f9ba 2000 	ldrsh.w	r2, [sl]
        int32_t y = mask_com.y1 - coords->y1;
  40d5d4:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
  40d5d8:	f9ba a002 	ldrsh.w	sl, [sl, #2]
  40d5dc:	eba9 0a0a 	sub.w	sl, r9, sl
  40d5e0:	9604      	str	r6, [sp, #16]
  40d5e2:	9e07      	ldr	r6, [sp, #28]
  40d5e4:	469b      	mov	fp, r3
  40d5e6:	9502      	str	r5, [sp, #8]
  40d5e8:	4615      	mov	r5, r2
  40d5ea:	9406      	str	r4, [sp, #24]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
  40d5ec:	e009      	b.n	40d602 <lv_img_draw_core+0x182>
                lv_img_decoder_close(&cdsc->dec_dsc);
  40d5ee:	9805      	ldr	r0, [sp, #20]
  40d5f0:	4b26      	ldr	r3, [pc, #152]	; (40d68c <lv_img_draw_core+0x20c>)
  40d5f2:	4798      	blx	r3
                _lv_mem_buf_release(buf);
  40d5f4:	9807      	ldr	r0, [sp, #28]
  40d5f6:	4b26      	ldr	r3, [pc, #152]	; (40d690 <lv_img_draw_core+0x210>)
  40d5f8:	4798      	blx	r3
                return LV_RES_INV;
  40d5fa:	2000      	movs	r0, #0
  40d5fc:	e747      	b.n	40d48e <lv_img_draw_core+0xe>
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
  40d5fe:	f109 0901 	add.w	r9, r9, #1
  40d602:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
  40d606:	4599      	cmp	r9, r3
  40d608:	dc29      	bgt.n	40d65e <lv_img_draw_core+0x1de>
            union_ok = _lv_area_intersect(&mask_line, clip_area, &line);
  40d60a:	aa0a      	add	r2, sp, #40	; 0x28
  40d60c:	9902      	ldr	r1, [sp, #8]
  40d60e:	a80c      	add	r0, sp, #48	; 0x30
  40d610:	4b1a      	ldr	r3, [pc, #104]	; (40d67c <lv_img_draw_core+0x1fc>)
  40d612:	4798      	blx	r3
            if(union_ok == false) continue;
  40d614:	2800      	cmp	r0, #0
  40d616:	d0f2      	beq.n	40d5fe <lv_img_draw_core+0x17e>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
  40d618:	9804      	ldr	r0, [sp, #16]
  40d61a:	9005      	str	r0, [sp, #20]
  40d61c:	ebab 0105 	sub.w	r1, fp, r5
  40d620:	9600      	str	r6, [sp, #0]
  40d622:	9b03      	ldr	r3, [sp, #12]
  40d624:	fa0f f28a 	sxth.w	r2, sl
  40d628:	b209      	sxth	r1, r1
  40d62a:	4c1a      	ldr	r4, [pc, #104]	; (40d694 <lv_img_draw_core+0x214>)
  40d62c:	47a0      	blx	r4
            if(read_res != LV_RES_OK) {
  40d62e:	2801      	cmp	r0, #1
  40d630:	d1dd      	bne.n	40d5ee <lv_img_draw_core+0x16e>
            lv_draw_map(&line, &mask_line, buf, draw_dsc, chroma_keyed, alpha_byte);
  40d632:	f8cd 8004 	str.w	r8, [sp, #4]
  40d636:	9700      	str	r7, [sp, #0]
  40d638:	9b06      	ldr	r3, [sp, #24]
  40d63a:	4632      	mov	r2, r6
  40d63c:	a90c      	add	r1, sp, #48	; 0x30
  40d63e:	a80a      	add	r0, sp, #40	; 0x28
  40d640:	4c0f      	ldr	r4, [pc, #60]	; (40d680 <lv_img_draw_core+0x200>)
  40d642:	47a0      	blx	r4
            line.y1++;
  40d644:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
  40d648:	3301      	adds	r3, #1
  40d64a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
            line.y2++;
  40d64e:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
  40d652:	3301      	adds	r3, #1
  40d654:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            y++;
  40d658:	f10a 0a01 	add.w	sl, sl, #1
  40d65c:	e7cf      	b.n	40d5fe <lv_img_draw_core+0x17e>
        _lv_mem_buf_release(buf);
  40d65e:	9807      	ldr	r0, [sp, #28]
  40d660:	4b0b      	ldr	r3, [pc, #44]	; (40d690 <lv_img_draw_core+0x210>)
  40d662:	4798      	blx	r3
  40d664:	e733      	b.n	40d4ce <lv_img_draw_core+0x4e>
    if(cdsc == NULL) return LV_RES_INV;
  40d666:	2000      	movs	r0, #0
  40d668:	e711      	b.n	40d48e <lv_img_draw_core+0xe>
  40d66a:	bf00      	nop
  40d66c:	00412f91 	.word	0x00412f91
  40d670:	0040d44b 	.word	0x0040d44b
  40d674:	0040d45f 	.word	0x0040d45f
  40d678:	0040d3a1 	.word	0x0040d3a1
  40d67c:	00415663 	.word	0x00415663
  40d680:	0040cb61 	.word	0x0040cb61
  40d684:	00416a81 	.word	0x00416a81
  40d688:	0041563b 	.word	0x0041563b
  40d68c:	00413add 	.word	0x00413add
  40d690:	00416831 	.word	0x00416831
  40d694:	00413ab9 	.word	0x00413ab9
  40d698:	00412919 	.word	0x00412919

0040d69c <lv_draw_img>:
{
  40d69c:	b570      	push	{r4, r5, r6, lr}
  40d69e:	4604      	mov	r4, r0
  40d6a0:	460d      	mov	r5, r1
    if(src == NULL) {
  40d6a2:	b122      	cbz	r2, 40d6ae <lv_draw_img+0x12>
  40d6a4:	4611      	mov	r1, r2
    if(dsc->opa <= LV_OPA_MIN) return;
  40d6a6:	781a      	ldrb	r2, [r3, #0]
  40d6a8:	2a02      	cmp	r2, #2
  40d6aa:	d804      	bhi.n	40d6b6 <lv_draw_img+0x1a>
  40d6ac:	bd70      	pop	{r4, r5, r6, pc}
        show_error(coords, mask, "No\ndata");
  40d6ae:	4a08      	ldr	r2, [pc, #32]	; (40d6d0 <lv_draw_img+0x34>)
  40d6b0:	4b08      	ldr	r3, [pc, #32]	; (40d6d4 <lv_draw_img+0x38>)
  40d6b2:	4798      	blx	r3
        return;
  40d6b4:	bd70      	pop	{r4, r5, r6, pc}
    res = lv_img_draw_core(coords, mask, src, dsc);
  40d6b6:	460a      	mov	r2, r1
  40d6b8:	4629      	mov	r1, r5
  40d6ba:	4e07      	ldr	r6, [pc, #28]	; (40d6d8 <lv_draw_img+0x3c>)
  40d6bc:	47b0      	blx	r6
    if(res == LV_RES_INV) {
  40d6be:	2800      	cmp	r0, #0
  40d6c0:	d1f4      	bne.n	40d6ac <lv_draw_img+0x10>
        show_error(coords, mask, "No\ndata");
  40d6c2:	4a03      	ldr	r2, [pc, #12]	; (40d6d0 <lv_draw_img+0x34>)
  40d6c4:	4629      	mov	r1, r5
  40d6c6:	4620      	mov	r0, r4
  40d6c8:	4b02      	ldr	r3, [pc, #8]	; (40d6d4 <lv_draw_img+0x38>)
  40d6ca:	4798      	blx	r3
        return;
  40d6cc:	e7ee      	b.n	40d6ac <lv_draw_img+0x10>
  40d6ce:	bf00      	nop
  40d6d0:	0042c744 	.word	0x0042c744
  40d6d4:	0040d3a1 	.word	0x0040d3a1
  40d6d8:	0040d481 	.word	0x0040d481

0040d6dc <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
  40d6dc:	b160      	cbz	r0, 40d6f8 <lv_img_src_get_type+0x1c>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
  40d6de:	7802      	ldrb	r2, [r0, #0]
  40d6e0:	f1a2 0320 	sub.w	r3, r2, #32
  40d6e4:	b2db      	uxtb	r3, r3
  40d6e6:	2b5f      	cmp	r3, #95	; 0x5f
  40d6e8:	d908      	bls.n	40d6fc <lv_img_src_get_type+0x20>
    else if(u8_p[0] >= 0x80) {
  40d6ea:	f012 0f80 	tst.w	r2, #128	; 0x80
  40d6ee:	d101      	bne.n	40d6f4 <lv_img_src_get_type+0x18>
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is design to the first byte < 0x20*/
  40d6f0:	2000      	movs	r0, #0
}
  40d6f2:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_SYMBOL; /*Symbols begins after 0x7F*/
  40d6f4:	2002      	movs	r0, #2
  40d6f6:	4770      	bx	lr
    if(src == NULL) return img_src_type;
  40d6f8:	2003      	movs	r0, #3
  40d6fa:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
  40d6fc:	2001      	movs	r0, #1
  40d6fe:	4770      	bx	lr

0040d700 <hex_char_to_num>:
 */
static uint8_t hex_char_to_num(char hex)
{
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
  40d700:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
  40d704:	b2db      	uxtb	r3, r3
  40d706:	2b09      	cmp	r3, #9
  40d708:	d917      	bls.n	40d73a <hex_char_to_num+0x3a>
        result = hex - '0';
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
  40d70a:	2860      	cmp	r0, #96	; 0x60
  40d70c:	d901      	bls.n	40d712 <hex_char_to_num+0x12>
  40d70e:	3820      	subs	r0, #32
  40d710:	b2c0      	uxtb	r0, r0

        switch(hex) {
  40d712:	3841      	subs	r0, #65	; 0x41
  40d714:	2805      	cmp	r0, #5
  40d716:	d80e      	bhi.n	40d736 <hex_char_to_num+0x36>
  40d718:	e8df f000 	tbb	[pc, r0]
  40d71c:	07051103 	.word	0x07051103
  40d720:	0b09      	.short	0x0b09
            case 'A':
                result = 10;
  40d722:	200a      	movs	r0, #10
  40d724:	4770      	bx	lr
                break;
            case 'B':
                result = 11;
                break;
            case 'C':
                result = 12;
  40d726:	200c      	movs	r0, #12
                break;
  40d728:	4770      	bx	lr
            case 'D':
                result = 13;
  40d72a:	200d      	movs	r0, #13
                break;
  40d72c:	4770      	bx	lr
            case 'E':
                result = 14;
  40d72e:	200e      	movs	r0, #14
                break;
  40d730:	4770      	bx	lr
            case 'F':
                result = 15;
  40d732:	200f      	movs	r0, #15
                break;
  40d734:	4770      	bx	lr
            default:
                result = 0;
  40d736:	2000      	movs	r0, #0
                break;
  40d738:	4770      	bx	lr
        result = hex - '0';
  40d73a:	4618      	mov	r0, r3
  40d73c:	4770      	bx	lr
                result = 11;
  40d73e:	200b      	movs	r0, #11
        }
    }

    return result;
}
  40d740:	4770      	bx	lr
	...

0040d744 <draw_letter_subpx>:
{
  40d744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d748:	b09d      	sub	sp, #116	; 0x74
  40d74a:	f8bd 909c 	ldrh.w	r9, [sp, #156]	; 0x9c
  40d74e:	f89d 40a0 	ldrb.w	r4, [sp, #160]	; 0xa0
  40d752:	9409      	str	r4, [sp, #36]	; 0x24
  40d754:	f89d 40a4 	ldrb.w	r4, [sp, #164]	; 0xa4
  40d758:	9416      	str	r4, [sp, #88]	; 0x58
    uint32_t bpp = g->bpp;
  40d75a:	7a95      	ldrb	r5, [r2, #10]
    if(bpp == 3) bpp = 4;
  40d75c:	2d03      	cmp	r5, #3
  40d75e:	d00d      	beq.n	40d77c <draw_letter_subpx+0x38>
    switch(bpp) {
  40d760:	1e6c      	subs	r4, r5, #1
  40d762:	2c07      	cmp	r4, #7
  40d764:	f200 820e 	bhi.w	40db84 <draw_letter_subpx+0x440>
  40d768:	e8df f014 	tbh	[pc, r4, lsl #1]
  40d76c:	0019000a 	.word	0x0019000a
  40d770:	000f020c 	.word	0x000f020c
  40d774:	020c020c 	.word	0x020c020c
  40d778:	0014020c 	.word	0x0014020c
    if(bpp == 3) bpp = 4;
  40d77c:	2504      	movs	r5, #4
  40d77e:	e7ef      	b.n	40d760 <draw_letter_subpx+0x1c>
            bitmask_init  = 0x80;
  40d780:	2480      	movs	r4, #128	; 0x80
  40d782:	940a      	str	r4, [sp, #40]	; 0x28
            bpp_opa_table = _lv_bpp1_opa_table;
  40d784:	4caf      	ldr	r4, [pc, #700]	; (40da44 <draw_letter_subpx+0x300>)
  40d786:	940b      	str	r4, [sp, #44]	; 0x2c
  40d788:	e00d      	b.n	40d7a6 <draw_letter_subpx+0x62>
            bitmask_init  = 0xF0;
  40d78a:	24f0      	movs	r4, #240	; 0xf0
  40d78c:	940a      	str	r4, [sp, #40]	; 0x28
            bpp_opa_table = _lv_bpp4_opa_table;
  40d78e:	4cae      	ldr	r4, [pc, #696]	; (40da48 <draw_letter_subpx+0x304>)
  40d790:	940b      	str	r4, [sp, #44]	; 0x2c
            break;
  40d792:	e008      	b.n	40d7a6 <draw_letter_subpx+0x62>
            bitmask_init  = 0xFF;
  40d794:	24ff      	movs	r4, #255	; 0xff
  40d796:	940a      	str	r4, [sp, #40]	; 0x28
            bpp_opa_table = _lv_bpp8_opa_table;
  40d798:	4cac      	ldr	r4, [pc, #688]	; (40da4c <draw_letter_subpx+0x308>)
  40d79a:	940b      	str	r4, [sp, #44]	; 0x2c
            break;       /*No opa table, pixel value will be used directly*/
  40d79c:	e003      	b.n	40d7a6 <draw_letter_subpx+0x62>
            bitmask_init  = 0xC0;
  40d79e:	24c0      	movs	r4, #192	; 0xc0
  40d7a0:	940a      	str	r4, [sp, #40]	; 0x28
            bpp_opa_table = _lv_bpp2_opa_table;
  40d7a2:	4cab      	ldr	r4, [pc, #684]	; (40da50 <draw_letter_subpx+0x30c>)
  40d7a4:	940b      	str	r4, [sp, #44]	; 0x2c
    int32_t box_w = g->box_w;
  40d7a6:	8854      	ldrh	r4, [r2, #2]
  40d7a8:	9411      	str	r4, [sp, #68]	; 0x44
    int32_t box_h = g->box_h;
  40d7aa:	f8b2 e004 	ldrh.w	lr, [r2, #4]
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
  40d7ae:	fb05 f604 	mul.w	r6, r5, r4
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : (clip_area->x1 - pos_x) * 3;
  40d7b2:	f9b3 2000 	ldrsh.w	r2, [r3]
  40d7b6:	4282      	cmp	r2, r0
  40d7b8:	f340 8097 	ble.w	40d8ea <draw_letter_subpx+0x1a6>
  40d7bc:	1a12      	subs	r2, r2, r0
  40d7be:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  40d7c2:	920f      	str	r2, [sp, #60]	; 0x3c
    int32_t col_end   = pos_x + box_w / 3 <= clip_area->x2 ? box_w : (clip_area->x2 - pos_x + 1) * 3;
  40d7c4:	4aa3      	ldr	r2, [pc, #652]	; (40da54 <draw_letter_subpx+0x310>)
  40d7c6:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40d7c8:	fb82 4204 	smull	r4, r2, r2, r4
  40d7cc:	4402      	add	r2, r0
  40d7ce:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
  40d7d2:	42a2      	cmp	r2, r4
  40d7d4:	f340 808c 	ble.w	40d8f0 <draw_letter_subpx+0x1ac>
  40d7d8:	1a22      	subs	r2, r4, r0
  40d7da:	3201      	adds	r2, #1
  40d7dc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  40d7e0:	9208      	str	r2, [sp, #32]
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
  40d7e2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
  40d7e6:	428a      	cmp	r2, r1
  40d7e8:	f340 8085 	ble.w	40d8f6 <draw_letter_subpx+0x1b2>
  40d7ec:	1a52      	subs	r2, r2, r1
  40d7ee:	920d      	str	r2, [sp, #52]	; 0x34
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
  40d7f0:	eb0e 0201 	add.w	r2, lr, r1
  40d7f4:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
  40d7f8:	42a2      	cmp	r2, r4
  40d7fa:	dd7f      	ble.n	40d8fc <draw_letter_subpx+0x1b8>
  40d7fc:	1a64      	subs	r4, r4, r1
  40d7fe:	1c62      	adds	r2, r4, #1
  40d800:	9213      	str	r2, [sp, #76]	; 0x4c
    int32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
  40d802:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40d804:	fb05 f402 	mul.w	r4, r5, r2
  40d808:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40d80a:	fb06 4402 	mla	r4, r6, r2, r4
    map_p += bit_ofs >> 3;
  40d80e:	9e26      	ldr	r6, [sp, #152]	; 0x98
  40d810:	eb06 06e4 	add.w	r6, r6, r4, asr #3
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
  40d814:	f004 0407 	and.w	r4, r4, #7
    int32_t mask_buf_size = box_w * box_h > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : g->box_w * g->box_h;
  40d818:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40d81a:	fb0e f202 	mul.w	r2, lr, r2
  40d81e:	9212      	str	r2, [sp, #72]	; 0x48
  40d820:	f5b2 7fa0 	cmp.w	r2, #320	; 0x140
  40d824:	dd02      	ble.n	40d82c <draw_letter_subpx+0xe8>
  40d826:	f44f 72a0 	mov.w	r2, #320	; 0x140
  40d82a:	9212      	str	r2, [sp, #72]	; 0x48
  40d82c:	9317      	str	r3, [sp, #92]	; 0x5c
  40d82e:	468a      	mov	sl, r1
  40d830:	4683      	mov	fp, r0
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
  40d832:	9f12      	ldr	r7, [sp, #72]	; 0x48
  40d834:	4638      	mov	r0, r7
  40d836:	f8df 822c 	ldr.w	r8, [pc, #556]	; 40da64 <draw_letter_subpx+0x320>
  40d83a:	47c0      	blx	r8
  40d83c:	900c      	str	r0, [sp, #48]	; 0x30
    lv_color_t * color_buf = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
  40d83e:	0078      	lsls	r0, r7, #1
  40d840:	47c0      	blx	r8
  40d842:	900e      	str	r0, [sp, #56]	; 0x38
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40d844:	4b84      	ldr	r3, [pc, #528]	; (40da58 <draw_letter_subpx+0x314>)
  40d846:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40d848:	4b84      	ldr	r3, [pc, #528]	; (40da5c <draw_letter_subpx+0x318>)
  40d84a:	4798      	blx	r3
  40d84c:	8a83      	ldrh	r3, [r0, #20]
  40d84e:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
  40d852:	b291      	uxth	r1, r2
  40d854:	1a5b      	subs	r3, r3, r1
  40d856:	b29b      	uxth	r3, r3
  40d858:	3301      	adds	r3, #1
  40d85a:	b21b      	sxth	r3, r3
  40d85c:	4619      	mov	r1, r3
  40d85e:	9314      	str	r3, [sp, #80]	; 0x50
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
  40d860:	f8d0 8008 	ldr.w	r8, [r0, #8]
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
  40d864:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
  40d868:	ebaa 0303 	sub.w	r3, sl, r3
  40d86c:	4608      	mov	r0, r1
  40d86e:	fb03 b301 	mla	r3, r3, r1, fp
  40d872:	1a9b      	subs	r3, r3, r2
    vdb_buf_tmp += (row_start * vdb_width) + col_start / 3;
  40d874:	4a77      	ldr	r2, [pc, #476]	; (40da54 <draw_letter_subpx+0x310>)
  40d876:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  40d878:	fb82 e107 	smull	lr, r1, r2, r7
  40d87c:	eba1 71e7 	sub.w	r1, r1, r7, asr #31
  40d880:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  40d882:	fb00 1007 	mla	r0, r0, r7, r1
  40d886:	0040      	lsls	r0, r0, #1
  40d888:	eb00 0343 	add.w	r3, r0, r3, lsl #1
  40d88c:	4498      	add	r8, r3
    map_area.x1 = col_start / 3 + pos_x;
  40d88e:	fa1f f08b 	uxth.w	r0, fp
  40d892:	4401      	add	r1, r0
  40d894:	f8ad 1068 	strh.w	r1, [sp, #104]	; 0x68
    map_area.x2 = col_end / 3  + pos_x - 1;
  40d898:	9908      	ldr	r1, [sp, #32]
  40d89a:	fb82 2301 	smull	r2, r3, r2, r1
  40d89e:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
  40d8a2:	4403      	add	r3, r0
  40d8a4:	b29b      	uxth	r3, r3
  40d8a6:	3b01      	subs	r3, #1
  40d8a8:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    map_area.y1 = row_start + pos_y;
  40d8ac:	eb07 030a 	add.w	r3, r7, sl
  40d8b0:	b21b      	sxth	r3, r3
  40d8b2:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    map_area.y2 = map_area.y1;
  40d8b6:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
  40d8ba:	4b69      	ldr	r3, [pc, #420]	; (40da60 <draw_letter_subpx+0x31c>)
  40d8bc:	4798      	blx	r3
  40d8be:	9015      	str	r0, [sp, #84]	; 0x54
    uint8_t txt_rgb[3] = {color.ch.red, (color.ch.green_h << 3) + color.ch.green_l, color.ch.blue};
  40d8c0:	f3c9 03c4 	ubfx	r3, r9, #3, #5
  40d8c4:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
  40d8c8:	f009 0207 	and.w	r2, r9, #7
  40d8cc:	f3c9 3342 	ubfx	r3, r9, #13, #3
  40d8d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40d8d4:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
  40d8d8:	f3c9 2904 	ubfx	r9, r9, #8, #5
  40d8dc:	f88d 9062 	strb.w	r9, [sp, #98]	; 0x62
    int32_t mask_p = 0;
  40d8e0:	2300      	movs	r3, #0
  40d8e2:	9310      	str	r3, [sp, #64]	; 0x40
  40d8e4:	f8bd 7014 	ldrh.w	r7, [sp, #20]
    for(row = row_start ; row < row_end; row++) {
  40d8e8:	e0eb      	b.n	40dac2 <draw_letter_subpx+0x37e>
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : (clip_area->x1 - pos_x) * 3;
  40d8ea:	2200      	movs	r2, #0
  40d8ec:	920f      	str	r2, [sp, #60]	; 0x3c
  40d8ee:	e769      	b.n	40d7c4 <draw_letter_subpx+0x80>
    int32_t col_end   = pos_x + box_w / 3 <= clip_area->x2 ? box_w : (clip_area->x2 - pos_x + 1) * 3;
  40d8f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40d8f2:	9208      	str	r2, [sp, #32]
  40d8f4:	e775      	b.n	40d7e2 <draw_letter_subpx+0x9e>
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
  40d8f6:	2200      	movs	r2, #0
  40d8f8:	920d      	str	r2, [sp, #52]	; 0x34
  40d8fa:	e779      	b.n	40d7f0 <draw_letter_subpx+0xac>
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
  40d8fc:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
  40d900:	e77f      	b.n	40d802 <draw_letter_subpx+0xbe>
                    px_opa = bpp == 8 ? letter_px : bpp_opa_table[letter_px];
  40d902:	2d08      	cmp	r5, #8
  40d904:	d00b      	beq.n	40d91e <draw_letter_subpx+0x1da>
  40d906:	b2db      	uxtb	r3, r3
  40d908:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40d90a:	5cd2      	ldrb	r2, [r2, r3]
  40d90c:	e007      	b.n	40d91e <draw_letter_subpx+0x1da>
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
  40d90e:	b2da      	uxtb	r2, r3
  40d910:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d912:	fb03 f202 	mul.w	r2, r3, r2
  40d916:	f3c2 2207 	ubfx	r2, r2, #8, #8
  40d91a:	e000      	b.n	40d91e <draw_letter_subpx+0x1da>
                px_opa = 0;
  40d91c:	2200      	movs	r2, #0
            font_rgb[subpx_cnt] = px_opa;
  40d91e:	ab1c      	add	r3, sp, #112	; 0x70
  40d920:	440b      	add	r3, r1
  40d922:	f803 2c0c 	strb.w	r2, [r3, #-12]
            subpx_cnt ++;
  40d926:	3101      	adds	r1, #1
            if(subpx_cnt == 3) {
  40d928:	2903      	cmp	r1, #3
  40d92a:	d028      	beq.n	40d97e <draw_letter_subpx+0x23a>
            if(col_bit < (int32_t)(8 - bpp)) {
  40d92c:	f1c5 0308 	rsb	r3, r5, #8
  40d930:	429c      	cmp	r4, r3
  40d932:	f280 8081 	bge.w	40da38 <draw_letter_subpx+0x2f4>
                col_bit += bpp;
  40d936:	9b05      	ldr	r3, [sp, #20]
  40d938:	442b      	add	r3, r5
  40d93a:	461c      	mov	r4, r3
                bitmask = bitmask >> bpp;
  40d93c:	fa2e fe05 	lsr.w	lr, lr, r5
        for(col = col_start; col < col_end; col++) {
  40d940:	3001      	adds	r0, #1
  40d942:	9b08      	ldr	r3, [sp, #32]
  40d944:	4298      	cmp	r0, r3
  40d946:	f280 808f 	bge.w	40da68 <draw_letter_subpx+0x324>
            letter_px = (*map_p & bitmask) >> (8 - col_bit - bpp);
  40d94a:	7833      	ldrb	r3, [r6, #0]
  40d94c:	ea0e 0203 	and.w	r2, lr, r3
  40d950:	9405      	str	r4, [sp, #20]
  40d952:	426b      	negs	r3, r5
  40d954:	1b1b      	subs	r3, r3, r4
  40d956:	3308      	adds	r3, #8
  40d958:	fa22 f303 	lsr.w	r3, r2, r3
            if(letter_px != 0) {
  40d95c:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
  40d960:	d0dc      	beq.n	40d91c <draw_letter_subpx+0x1d8>
                if(opa == LV_OPA_COVER) {
  40d962:	9f09      	ldr	r7, [sp, #36]	; 0x24
  40d964:	2fff      	cmp	r7, #255	; 0xff
  40d966:	d0cc      	beq.n	40d902 <draw_letter_subpx+0x1be>
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
  40d968:	2d08      	cmp	r5, #8
  40d96a:	d0d0      	beq.n	40d90e <draw_letter_subpx+0x1ca>
                             : (uint32_t)((uint32_t)bpp_opa_table[letter_px] * opa) >> 8;
  40d96c:	b2db      	uxtb	r3, r3
  40d96e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40d970:	5cd2      	ldrb	r2, [r2, r3]
  40d972:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d974:	fb02 f203 	mul.w	r2, r2, r3
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
  40d978:	f3c2 2207 	ubfx	r2, r2, #8, #8
  40d97c:	e7cf      	b.n	40d91e <draw_letter_subpx+0x1da>
                uint8_t bg_rgb[3] = {vdb_buf_tmp->ch.red,
  40d97e:	f898 9000 	ldrb.w	r9, [r8]
  40d982:	ea4f 0bd9 	mov.w	fp, r9, lsr #3
                                     (vdb_buf_tmp->ch.green_h << 3) + vdb_buf_tmp->ch.green_l,
  40d986:	f009 0107 	and.w	r1, r9, #7
  40d98a:	f898 2001 	ldrb.w	r2, [r8, #1]
  40d98e:	ea4f 1952 	mov.w	r9, r2, lsr #5
  40d992:	eb09 09c1 	add.w	r9, r9, r1, lsl #3
                                     vdb_buf_tmp->ch.blue
  40d996:	f002 021f 	and.w	r2, r2, #31
                res_color.ch.red = (uint32_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8;
  40d99a:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
  40d99e:	f89d 1064 	ldrb.w	r1, [sp, #100]	; 0x64
  40d9a2:	f1c1 0aff 	rsb	sl, r1, #255	; 0xff
  40d9a6:	fb0a fa0b 	mul.w	sl, sl, fp
  40d9aa:	fb01 aa03 	mla	sl, r1, r3, sl
  40d9ae:	f3ca 2a04 	ubfx	sl, sl, #8, #5
  40d9b2:	9b06      	ldr	r3, [sp, #24]
  40d9b4:	f36a 03c7 	bfi	r3, sl, #3, #5
  40d9b8:	461f      	mov	r7, r3
                res_color.ch.blue = (uint32_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
  40d9ba:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
  40d9be:	f89d a066 	ldrb.w	sl, [sp, #102]	; 0x66
  40d9c2:	f1ca 0bff 	rsb	fp, sl, #255	; 0xff
  40d9c6:	fb0b f202 	mul.w	r2, fp, r2
  40d9ca:	fb0a 2203 	mla	r2, sl, r3, r2
  40d9ce:	f3c2 2204 	ubfx	r2, r2, #8, #5
  40d9d2:	463b      	mov	r3, r7
  40d9d4:	f362 230c 	bfi	r3, r2, #8, #5
  40d9d8:	461f      	mov	r7, r3
                uint8_t green = (uint32_t)((uint32_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8;
  40d9da:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
  40d9de:	f89d b065 	ldrb.w	fp, [sp, #101]	; 0x65
  40d9e2:	f1cb 02ff 	rsb	r2, fp, #255	; 0xff
  40d9e6:	fb02 f909 	mul.w	r9, r2, r9
  40d9ea:	fb0b 9303 	mla	r3, fp, r3, r9
  40d9ee:	f3c3 2307 	ubfx	r3, r3, #8, #8
                res_color.ch.green_h = green >> 3;
  40d9f2:	f3c3 02c2 	ubfx	r2, r3, #3, #3
  40d9f6:	f362 0702 	bfi	r7, r2, #0, #3
  40d9fa:	463a      	mov	r2, r7
                res_color.ch.green_l = green & 0x7;
  40d9fc:	f363 324f 	bfi	r2, r3, #13, #3
  40da00:	9206      	str	r2, [sp, #24]
                if(font_rgb[0] == 0 && font_rgb[1] == 0 && font_rgb[2] == 0) mask_buf[mask_p] = LV_OPA_TRANSP;
  40da02:	b951      	cbnz	r1, 40da1a <draw_letter_subpx+0x2d6>
  40da04:	f1bb 0f00 	cmp.w	fp, #0
  40da08:	d107      	bne.n	40da1a <draw_letter_subpx+0x2d6>
  40da0a:	f1ba 0f00 	cmp.w	sl, #0
  40da0e:	d104      	bne.n	40da1a <draw_letter_subpx+0x2d6>
  40da10:	2300      	movs	r3, #0
  40da12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40da14:	f802 300c 	strb.w	r3, [r2, ip]
  40da18:	e003      	b.n	40da22 <draw_letter_subpx+0x2de>
                else mask_buf[mask_p] = LV_OPA_COVER;
  40da1a:	23ff      	movs	r3, #255	; 0xff
  40da1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40da1e:	f802 300c 	strb.w	r3, [r2, ip]
                color_buf[mask_p] = res_color;
  40da22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40da24:	f8bd 2018 	ldrh.w	r2, [sp, #24]
  40da28:	f823 201c 	strh.w	r2, [r3, ip, lsl #1]
                mask_p++;
  40da2c:	f10c 0c01 	add.w	ip, ip, #1
                vdb_buf_tmp++;
  40da30:	f108 0802 	add.w	r8, r8, #2
                subpx_cnt = 0;
  40da34:	2100      	movs	r1, #0
  40da36:	e779      	b.n	40d92c <draw_letter_subpx+0x1e8>
                map_p++;
  40da38:	3601      	adds	r6, #1
                bitmask = bitmask_init;
  40da3a:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
                col_bit = 0;
  40da3e:	2400      	movs	r4, #0
  40da40:	e77e      	b.n	40d940 <draw_letter_subpx+0x1fc>
  40da42:	bf00      	nop
  40da44:	0042c74c 	.word	0x0042c74c
  40da48:	0042c754 	.word	0x0042c754
  40da4c:	0042c764 	.word	0x0042c764
  40da50:	0042c750 	.word	0x0042c750
  40da54:	55555556 	.word	0x55555556
  40da58:	00409851 	.word	0x00409851
  40da5c:	00414ea5 	.word	0x00414ea5
  40da60:	0040fd5d 	.word	0x0040fd5d
  40da64:	00416a81 	.word	0x00416a81
  40da68:	46e3      	mov	fp, ip
  40da6a:	f8bd 7018 	ldrh.w	r7, [sp, #24]
        if(other_mask_cnt) {
  40da6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40da70:	2b00      	cmp	r3, #0
  40da72:	d134      	bne.n	40dade <draw_letter_subpx+0x39a>
        if((int32_t) mask_p + (col_end - col_start) < mask_buf_size) {
  40da74:	9b08      	ldr	r3, [sp, #32]
  40da76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40da78:	eba3 0902 	sub.w	r9, r3, r2
  40da7c:	465b      	mov	r3, fp
  40da7e:	444b      	add	r3, r9
  40da80:	9912      	ldr	r1, [sp, #72]	; 0x48
  40da82:	4299      	cmp	r1, r3
  40da84:	dd4c      	ble.n	40db20 <draw_letter_subpx+0x3dc>
            map_area.y2 ++;
  40da86:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
  40da8a:	3301      	adds	r3, #1
  40da8c:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
  40da90:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
        col_bit += ((box_w - col_end) + col_start) * bpp;
  40da94:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40da96:	9a08      	ldr	r2, [sp, #32]
  40da98:	1a9b      	subs	r3, r3, r2
  40da9a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40da9c:	4413      	add	r3, r2
  40da9e:	fb03 4405 	mla	r4, r3, r5, r4
        map_p += (col_bit >> 3);
  40daa2:	eb06 06e4 	add.w	r6, r6, r4, asr #3
        col_bit = col_bit & 0x7;
  40daa6:	f004 0407 	and.w	r4, r4, #7
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
  40daaa:	4b38      	ldr	r3, [pc, #224]	; (40db8c <draw_letter_subpx+0x448>)
  40daac:	fb83 2309 	smull	r2, r3, r3, r9
  40dab0:	ebc3 79e9 	rsb	r9, r3, r9, asr #31
  40dab4:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40dab6:	4499      	add	r9, r3
  40dab8:	eb08 0849 	add.w	r8, r8, r9, lsl #1
    for(row = row_start ; row < row_end; row++) {
  40dabc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40dabe:	3301      	adds	r3, #1
  40dac0:	930d      	str	r3, [sp, #52]	; 0x34
  40dac2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40dac4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40dac6:	4293      	cmp	r3, r2
  40dac8:	da42      	bge.n	40db50 <draw_letter_subpx+0x40c>
        bitmask = bitmask_init >> col_bit;
  40daca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40dacc:	fa23 fe04 	lsr.w	lr, r3, r4
        for(col = col_start; col < col_end; col++) {
  40dad0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40dad2:	980f      	ldr	r0, [sp, #60]	; 0x3c
        uint32_t subpx_cnt = 0;
  40dad4:	2100      	movs	r1, #0
  40dad6:	469c      	mov	ip, r3
  40dad8:	f8ad 7018 	strh.w	r7, [sp, #24]
        for(col = col_start; col < col_end; col++) {
  40dadc:	e731      	b.n	40d942 <draw_letter_subpx+0x1fe>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, map_area.x1, map_area.y2,
  40dade:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40dae0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40dae2:	4413      	add	r3, r2
  40dae4:	469a      	mov	sl, r3
  40dae6:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
  40daea:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
  40daee:	b28a      	uxth	r2, r1
  40daf0:	1a9b      	subs	r3, r3, r2
  40daf2:	b29b      	uxth	r3, r3
  40daf4:	3301      	adds	r3, #1
  40daf6:	b21b      	sxth	r3, r3
  40daf8:	f9bd 206e 	ldrsh.w	r2, [sp, #110]	; 0x6e
  40dafc:	4650      	mov	r0, sl
  40dafe:	f8df 909c 	ldr.w	r9, [pc, #156]	; 40db9c <draw_letter_subpx+0x458>
  40db02:	47c8      	blx	r9
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
  40db04:	2800      	cmp	r0, #0
  40db06:	d1b5      	bne.n	40da74 <draw_letter_subpx+0x330>
  40db08:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
  40db0c:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
  40db10:	1ac9      	subs	r1, r1, r3
  40db12:	b289      	uxth	r1, r1
  40db14:	3101      	adds	r1, #1
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&map_area));
  40db16:	b209      	sxth	r1, r1
  40db18:	4650      	mov	r0, sl
  40db1a:	4b1d      	ldr	r3, [pc, #116]	; (40db90 <draw_letter_subpx+0x44c>)
  40db1c:	4798      	blx	r3
  40db1e:	e7a9      	b.n	40da74 <draw_letter_subpx+0x330>
            _lv_blend_map(clip_area, &map_area, color_buf, mask_buf, LV_DRAW_MASK_RES_CHANGED, opa, blend_mode);
  40db20:	9b16      	ldr	r3, [sp, #88]	; 0x58
  40db22:	9302      	str	r3, [sp, #8]
  40db24:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40db26:	9301      	str	r3, [sp, #4]
  40db28:	2302      	movs	r3, #2
  40db2a:	9300      	str	r3, [sp, #0]
  40db2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40db2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40db30:	a91a      	add	r1, sp, #104	; 0x68
  40db32:	9817      	ldr	r0, [sp, #92]	; 0x5c
  40db34:	f8df a05c 	ldr.w	sl, [pc, #92]	; 40db94 <draw_letter_subpx+0x450>
  40db38:	47d0      	blx	sl
            map_area.y1 = map_area.y2 + 1;
  40db3a:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
  40db3e:	3301      	adds	r3, #1
  40db40:	b21b      	sxth	r3, r3
  40db42:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            map_area.y2 = map_area.y1;
  40db46:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            mask_p = 0;
  40db4a:	2300      	movs	r3, #0
  40db4c:	9310      	str	r3, [sp, #64]	; 0x40
  40db4e:	e7a1      	b.n	40da94 <draw_letter_subpx+0x350>
    if(map_area.y1 != map_area.y2) {
  40db50:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
  40db54:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
  40db58:	429a      	cmp	r2, r3
  40db5a:	d00e      	beq.n	40db7a <draw_letter_subpx+0x436>
        map_area.y2--;
  40db5c:	3b01      	subs	r3, #1
  40db5e:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
        _lv_blend_map(clip_area, &map_area, color_buf, mask_buf, LV_DRAW_MASK_RES_CHANGED, opa, blend_mode);
  40db62:	9b16      	ldr	r3, [sp, #88]	; 0x58
  40db64:	9302      	str	r3, [sp, #8]
  40db66:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40db68:	9301      	str	r3, [sp, #4]
  40db6a:	2302      	movs	r3, #2
  40db6c:	9300      	str	r3, [sp, #0]
  40db6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40db70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40db72:	a91a      	add	r1, sp, #104	; 0x68
  40db74:	9817      	ldr	r0, [sp, #92]	; 0x5c
  40db76:	4c07      	ldr	r4, [pc, #28]	; (40db94 <draw_letter_subpx+0x450>)
  40db78:	47a0      	blx	r4
    _lv_mem_buf_release(mask_buf);
  40db7a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40db7c:	4c06      	ldr	r4, [pc, #24]	; (40db98 <draw_letter_subpx+0x454>)
  40db7e:	47a0      	blx	r4
    _lv_mem_buf_release(color_buf);
  40db80:	980e      	ldr	r0, [sp, #56]	; 0x38
  40db82:	47a0      	blx	r4
}
  40db84:	b01d      	add	sp, #116	; 0x74
  40db86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40db8a:	bf00      	nop
  40db8c:	55555556 	.word	0x55555556
  40db90:	00416c0d 	.word	0x00416c0d
  40db94:	0040ca41 	.word	0x0040ca41
  40db98:	00416831 	.word	0x00416831
  40db9c:	0040fc95 	.word	0x0040fc95

0040dba0 <draw_letter_normal>:
{
  40dba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40dba4:	b093      	sub	sp, #76	; 0x4c
  40dba6:	468e      	mov	lr, r1
  40dba8:	f89d 6078 	ldrb.w	r6, [sp, #120]	; 0x78
  40dbac:	f89d 107c 	ldrb.w	r1, [sp, #124]	; 0x7c
  40dbb0:	910d      	str	r1, [sp, #52]	; 0x34
    uint32_t bpp = g->bpp;
  40dbb2:	f892 a00a 	ldrb.w	sl, [r2, #10]
    if(bpp == 3) bpp = 4;
  40dbb6:	f1ba 0f03 	cmp.w	sl, #3
  40dbba:	d00e      	beq.n	40dbda <draw_letter_normal+0x3a>
    switch(bpp) {
  40dbbc:	f10a 34ff 	add.w	r4, sl, #4294967295
  40dbc0:	2c07      	cmp	r4, #7
  40dbc2:	f200 8147 	bhi.w	40de54 <draw_letter_normal+0x2b4>
  40dbc6:	e8df f014 	tbh	[pc, r4, lsl #1]
  40dbca:	000b      	.short	0x000b
  40dbcc:	0145001e 	.word	0x0145001e
  40dbd0:	01450011 	.word	0x01450011
  40dbd4:	01450145 	.word	0x01450145
  40dbd8:	0017      	.short	0x0017
    if(bpp == 3) bpp = 4;
  40dbda:	f04f 0a04 	mov.w	sl, #4
  40dbde:	e7ed      	b.n	40dbbc <draw_letter_normal+0x1c>
            shades = 2;
  40dbe0:	2702      	movs	r7, #2
            bitmask_init  = 0x80;
  40dbe2:	2180      	movs	r1, #128	; 0x80
  40dbe4:	9105      	str	r1, [sp, #20]
            bpp_opa_table_p = _lv_bpp1_opa_table;
  40dbe6:	f8df b2a0 	ldr.w	fp, [pc, #672]	; 40de88 <draw_letter_normal+0x2e8>
  40dbea:	e011      	b.n	40dc10 <draw_letter_normal+0x70>
            shades = 16;
  40dbec:	2710      	movs	r7, #16
            bitmask_init  = 0xF0;
  40dbee:	21f0      	movs	r1, #240	; 0xf0
  40dbf0:	9105      	str	r1, [sp, #20]
            bpp_opa_table_p = _lv_bpp4_opa_table;
  40dbf2:	f8df b298 	ldr.w	fp, [pc, #664]	; 40de8c <draw_letter_normal+0x2ec>
            break;
  40dbf6:	e00b      	b.n	40dc10 <draw_letter_normal+0x70>
            shades = 256;
  40dbf8:	f44f 7780 	mov.w	r7, #256	; 0x100
            bitmask_init  = 0xFF;
  40dbfc:	21ff      	movs	r1, #255	; 0xff
  40dbfe:	9105      	str	r1, [sp, #20]
            bpp_opa_table_p = _lv_bpp8_opa_table;
  40dc00:	f8df b28c 	ldr.w	fp, [pc, #652]	; 40de90 <draw_letter_normal+0x2f0>
            break;       /*No opa table, pixel value will be used directly*/
  40dc04:	e004      	b.n	40dc10 <draw_letter_normal+0x70>
            shades = 4;
  40dc06:	2704      	movs	r7, #4
            bitmask_init  = 0xC0;
  40dc08:	21c0      	movs	r1, #192	; 0xc0
  40dc0a:	9105      	str	r1, [sp, #20]
            bpp_opa_table_p = _lv_bpp2_opa_table;
  40dc0c:	f8df b284 	ldr.w	fp, [pc, #644]	; 40de94 <draw_letter_normal+0x2f4>
    if(opa < LV_OPA_MAX) {
  40dc10:	2efc      	cmp	r6, #252	; 0xfc
  40dc12:	d821      	bhi.n	40dc58 <draw_letter_normal+0xb8>
        if(prev_opa != opa || prev_bpp != bpp) {
  40dc14:	4c91      	ldr	r4, [pc, #580]	; (40de5c <draw_letter_normal+0x2bc>)
  40dc16:	7824      	ldrb	r4, [r4, #0]
  40dc18:	42a6      	cmp	r6, r4
  40dc1a:	d001      	beq.n	40dc20 <draw_letter_normal+0x80>
  40dc1c:	2500      	movs	r5, #0
  40dc1e:	e009      	b.n	40dc34 <draw_letter_normal+0x94>
  40dc20:	4c8f      	ldr	r4, [pc, #572]	; (40de60 <draw_letter_normal+0x2c0>)
  40dc22:	6824      	ldr	r4, [r4, #0]
  40dc24:	45a2      	cmp	sl, r4
  40dc26:	d010      	beq.n	40dc4a <draw_letter_normal+0xaa>
  40dc28:	2500      	movs	r5, #0
  40dc2a:	e003      	b.n	40dc34 <draw_letter_normal+0x94>
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
  40dc2c:	4631      	mov	r1, r6
  40dc2e:	4c8d      	ldr	r4, [pc, #564]	; (40de64 <draw_letter_normal+0x2c4>)
  40dc30:	5561      	strb	r1, [r4, r5]
            for(i = 0; i < shades; i++) {
  40dc32:	3501      	adds	r5, #1
  40dc34:	42af      	cmp	r7, r5
  40dc36:	d908      	bls.n	40dc4a <draw_letter_normal+0xaa>
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
  40dc38:	f81b 1005 	ldrb.w	r1, [fp, r5]
  40dc3c:	29ff      	cmp	r1, #255	; 0xff
  40dc3e:	d0f5      	beq.n	40dc2c <draw_letter_normal+0x8c>
  40dc40:	fb01 f106 	mul.w	r1, r1, r6
  40dc44:	f3c1 2107 	ubfx	r1, r1, #8, #8
  40dc48:	e7f1      	b.n	40dc2e <draw_letter_normal+0x8e>
        prev_opa = opa;
  40dc4a:	4c84      	ldr	r4, [pc, #528]	; (40de5c <draw_letter_normal+0x2bc>)
  40dc4c:	7026      	strb	r6, [r4, #0]
        prev_bpp = bpp;
  40dc4e:	4c84      	ldr	r4, [pc, #528]	; (40de60 <draw_letter_normal+0x2c0>)
  40dc50:	f8c4 a000 	str.w	sl, [r4]
        bpp_opa_table_p = opa_table;
  40dc54:	f8df b20c 	ldr.w	fp, [pc, #524]	; 40de64 <draw_letter_normal+0x2c4>
    int32_t box_w = g->box_w;
  40dc58:	8855      	ldrh	r5, [r2, #2]
    int32_t box_h = g->box_h;
  40dc5a:	8897      	ldrh	r7, [r2, #4]
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
  40dc5c:	fb0a f405 	mul.w	r4, sl, r5
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
  40dc60:	f9b3 2000 	ldrsh.w	r2, [r3]
  40dc64:	4282      	cmp	r2, r0
  40dc66:	dd5a      	ble.n	40dd1e <draw_letter_normal+0x17e>
  40dc68:	1a12      	subs	r2, r2, r0
  40dc6a:	9207      	str	r2, [sp, #28]
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
  40dc6c:	182a      	adds	r2, r5, r0
  40dc6e:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
  40dc72:	42b2      	cmp	r2, r6
  40dc74:	dd56      	ble.n	40dd24 <draw_letter_normal+0x184>
  40dc76:	1a36      	subs	r6, r6, r0
  40dc78:	f106 0801 	add.w	r8, r6, #1
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
  40dc7c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
  40dc80:	4572      	cmp	r2, lr
  40dc82:	dd51      	ble.n	40dd28 <draw_letter_normal+0x188>
  40dc84:	eba2 020e 	sub.w	r2, r2, lr
  40dc88:	9206      	str	r2, [sp, #24]
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
  40dc8a:	eb07 020e 	add.w	r2, r7, lr
  40dc8e:	f9b3 6006 	ldrsh.w	r6, [r3, #6]
  40dc92:	42b2      	cmp	r2, r6
  40dc94:	dd4b      	ble.n	40dd2e <draw_letter_normal+0x18e>
  40dc96:	eba6 060e 	sub.w	r6, r6, lr
  40dc9a:	1c72      	adds	r2, r6, #1
  40dc9c:	9209      	str	r2, [sp, #36]	; 0x24
  40dc9e:	930e      	str	r3, [sp, #56]	; 0x38
  40dca0:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
  40dca4:	9008      	str	r0, [sp, #32]
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
  40dca6:	9b07      	ldr	r3, [sp, #28]
  40dca8:	fb0a f303 	mul.w	r3, sl, r3
  40dcac:	9a06      	ldr	r2, [sp, #24]
  40dcae:	fb04 3402 	mla	r4, r4, r2, r3
    map_p += bit_ofs >> 3;
  40dcb2:	9e1c      	ldr	r6, [sp, #112]	; 0x70
  40dcb4:	eb06 06d4 	add.w	r6, r6, r4, lsr #3
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
  40dcb8:	f004 0407 	and.w	r4, r4, #7
    lv_coord_t hor_res = lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
  40dcbc:	4b6a      	ldr	r3, [pc, #424]	; (40de68 <draw_letter_normal+0x2c8>)
  40dcbe:	4798      	blx	r3
  40dcc0:	4b6a      	ldr	r3, [pc, #424]	; (40de6c <draw_letter_normal+0x2cc>)
  40dcc2:	4798      	blx	r3
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
  40dcc4:	fb07 f705 	mul.w	r7, r7, r5
  40dcc8:	42b8      	cmp	r0, r7
  40dcca:	bfa8      	it	ge
  40dccc:	4638      	movge	r0, r7
  40dcce:	900a      	str	r0, [sp, #40]	; 0x28
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
  40dcd0:	4b67      	ldr	r3, [pc, #412]	; (40de70 <draw_letter_normal+0x2d0>)
  40dcd2:	4798      	blx	r3
  40dcd4:	4681      	mov	r9, r0
    fill_area.x1 = col_start + pos_x;
  40dcd6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
  40dcda:	9b07      	ldr	r3, [sp, #28]
  40dcdc:	18d3      	adds	r3, r2, r3
  40dcde:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
    fill_area.x2 = col_end  + pos_x - 1;
  40dce2:	eb02 0308 	add.w	r3, r2, r8
  40dce6:	b29b      	uxth	r3, r3
  40dce8:	3b01      	subs	r3, #1
  40dcea:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    fill_area.y1 = row_start + pos_y;
  40dcee:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40dcf0:	9a06      	ldr	r2, [sp, #24]
  40dcf2:	4411      	add	r1, r2
  40dcf4:	b20b      	sxth	r3, r1
  40dcf6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    fill_area.y2 = fill_area.y1;
  40dcfa:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
  40dcfe:	4b5d      	ldr	r3, [pc, #372]	; (40de74 <draw_letter_normal+0x2d4>)
  40dd00:	4798      	blx	r3
  40dd02:	900b      	str	r0, [sp, #44]	; 0x2c
    uint32_t col_bit_max = 8 - bpp;
  40dd04:	f1ca 0708 	rsb	r7, sl, #8
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
  40dd08:	9b07      	ldr	r3, [sp, #28]
  40dd0a:	442b      	add	r3, r5
  40dd0c:	eba3 0308 	sub.w	r3, r3, r8
  40dd10:	fb03 f30a 	mul.w	r3, r3, sl
  40dd14:	930c      	str	r3, [sp, #48]	; 0x30
    int32_t mask_p = 0;
  40dd16:	f04f 0e00 	mov.w	lr, #0
  40dd1a:	9708      	str	r7, [sp, #32]
    for(row = row_start ; row < row_end; row++) {
  40dd1c:	e03f      	b.n	40dd9e <draw_letter_normal+0x1fe>
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
  40dd1e:	2200      	movs	r2, #0
  40dd20:	9207      	str	r2, [sp, #28]
  40dd22:	e7a3      	b.n	40dc6c <draw_letter_normal+0xcc>
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
  40dd24:	46a8      	mov	r8, r5
  40dd26:	e7a9      	b.n	40dc7c <draw_letter_normal+0xdc>
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
  40dd28:	2200      	movs	r2, #0
  40dd2a:	9206      	str	r2, [sp, #24]
  40dd2c:	e7ad      	b.n	40dc8a <draw_letter_normal+0xea>
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
  40dd2e:	9709      	str	r7, [sp, #36]	; 0x24
  40dd30:	e7b5      	b.n	40dc9e <draw_letter_normal+0xfe>
                mask_buf[mask_p] = 0;
  40dd32:	2300      	movs	r3, #0
  40dd34:	f809 3005 	strb.w	r3, [r9, r5]
  40dd38:	e012      	b.n	40dd60 <draw_letter_normal+0x1c0>
                map_p++;
  40dd3a:	3601      	adds	r6, #1
                bitmask = bitmask_init;
  40dd3c:	9805      	ldr	r0, [sp, #20]
                col_bit = 0;
  40dd3e:	2400      	movs	r4, #0
            mask_p++;
  40dd40:	3501      	adds	r5, #1
        for(col = col_start; col < col_end; col++) {
  40dd42:	3101      	adds	r1, #1
  40dd44:	4541      	cmp	r1, r8
  40dd46:	da11      	bge.n	40dd6c <draw_letter_normal+0x1cc>
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
  40dd48:	7833      	ldrb	r3, [r6, #0]
  40dd4a:	4003      	ands	r3, r0
  40dd4c:	1b3a      	subs	r2, r7, r4
  40dd4e:	40d3      	lsrs	r3, r2
            if(letter_px) {
  40dd50:	f013 0fff 	tst.w	r3, #255	; 0xff
  40dd54:	d0ed      	beq.n	40dd32 <draw_letter_normal+0x192>
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
  40dd56:	b2db      	uxtb	r3, r3
  40dd58:	f81b 3003 	ldrb.w	r3, [fp, r3]
  40dd5c:	f809 3005 	strb.w	r3, [r9, r5]
            if(col_bit < col_bit_max) {
  40dd60:	42bc      	cmp	r4, r7
  40dd62:	d2ea      	bcs.n	40dd3a <draw_letter_normal+0x19a>
                col_bit += bpp;
  40dd64:	4454      	add	r4, sl
                bitmask = bitmask >> bpp;
  40dd66:	fa20 f00a 	lsr.w	r0, r0, sl
  40dd6a:	e7e9      	b.n	40dd40 <draw_letter_normal+0x1a0>
  40dd6c:	9708      	str	r7, [sp, #32]
        if(other_mask_cnt) {
  40dd6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40dd70:	bb03      	cbnz	r3, 40ddb4 <draw_letter_normal+0x214>
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
  40dd72:	9b07      	ldr	r3, [sp, #28]
  40dd74:	eba8 0303 	sub.w	r3, r8, r3
  40dd78:	442b      	add	r3, r5
  40dd7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40dd7c:	429a      	cmp	r2, r3
  40dd7e:	d938      	bls.n	40ddf2 <draw_letter_normal+0x252>
            fill_area.y2 ++;
  40dd80:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  40dd84:	3301      	adds	r3, #1
  40dd86:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
  40dd8a:	46ae      	mov	lr, r5
        col_bit += col_bit_row_ofs;
  40dd8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40dd8e:	441c      	add	r4, r3
        map_p += (col_bit >> 3);
  40dd90:	eb06 06d4 	add.w	r6, r6, r4, lsr #3
        col_bit = col_bit & 0x7;
  40dd94:	f004 0407 	and.w	r4, r4, #7
    for(row = row_start ; row < row_end; row++) {
  40dd98:	9b06      	ldr	r3, [sp, #24]
  40dd9a:	3301      	adds	r3, #1
  40dd9c:	9306      	str	r3, [sp, #24]
  40dd9e:	9b06      	ldr	r3, [sp, #24]
  40dda0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40dda2:	4293      	cmp	r3, r2
  40dda4:	da3d      	bge.n	40de22 <draw_letter_normal+0x282>
        bitmask = bitmask_init >> col_bit;
  40dda6:	9b05      	ldr	r3, [sp, #20]
  40dda8:	fa23 f004 	lsr.w	r0, r3, r4
        for(col = col_start; col < col_end; col++) {
  40ddac:	4675      	mov	r5, lr
  40ddae:	9907      	ldr	r1, [sp, #28]
  40ddb0:	9f08      	ldr	r7, [sp, #32]
  40ddb2:	e7c7      	b.n	40dd44 <draw_letter_normal+0x1a4>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, fill_area.x1, fill_area.y2,
  40ddb4:	eb09 030e 	add.w	r3, r9, lr
  40ddb8:	4618      	mov	r0, r3
  40ddba:	930f      	str	r3, [sp, #60]	; 0x3c
  40ddbc:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
  40ddc0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
  40ddc4:	b28a      	uxth	r2, r1
  40ddc6:	1a9b      	subs	r3, r3, r2
  40ddc8:	b29b      	uxth	r3, r3
  40ddca:	3301      	adds	r3, #1
  40ddcc:	b21b      	sxth	r3, r3
  40ddce:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  40ddd2:	4f29      	ldr	r7, [pc, #164]	; (40de78 <draw_letter_normal+0x2d8>)
  40ddd4:	47b8      	blx	r7
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
  40ddd6:	2800      	cmp	r0, #0
  40ddd8:	d1cb      	bne.n	40dd72 <draw_letter_normal+0x1d2>
  40ddda:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
  40ddde:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
  40dde2:	1ac9      	subs	r1, r1, r3
  40dde4:	b289      	uxth	r1, r1
  40dde6:	3101      	adds	r1, #1
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&fill_area));
  40dde8:	b209      	sxth	r1, r1
  40ddea:	980f      	ldr	r0, [sp, #60]	; 0x3c
  40ddec:	4b23      	ldr	r3, [pc, #140]	; (40de7c <draw_letter_normal+0x2dc>)
  40ddee:	4798      	blx	r3
  40ddf0:	e7bf      	b.n	40dd72 <draw_letter_normal+0x1d2>
            _lv_blend_fill(clip_area, &fill_area,
  40ddf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40ddf4:	9302      	str	r3, [sp, #8]
  40ddf6:	23ff      	movs	r3, #255	; 0xff
  40ddf8:	9301      	str	r3, [sp, #4]
  40ddfa:	2302      	movs	r3, #2
  40ddfc:	9300      	str	r3, [sp, #0]
  40ddfe:	464b      	mov	r3, r9
  40de00:	f8bd 2074 	ldrh.w	r2, [sp, #116]	; 0x74
  40de04:	a910      	add	r1, sp, #64	; 0x40
  40de06:	980e      	ldr	r0, [sp, #56]	; 0x38
  40de08:	4d1d      	ldr	r5, [pc, #116]	; (40de80 <draw_letter_normal+0x2e0>)
  40de0a:	47a8      	blx	r5
            fill_area.y1 = fill_area.y2 + 1;
  40de0c:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
  40de10:	3301      	adds	r3, #1
  40de12:	b21b      	sxth	r3, r3
  40de14:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area.y2 = fill_area.y1;
  40de18:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            mask_p = 0;
  40de1c:	f04f 0e00 	mov.w	lr, #0
  40de20:	e7b4      	b.n	40dd8c <draw_letter_normal+0x1ec>
    if(fill_area.y1 != fill_area.y2) {
  40de22:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
  40de26:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  40de2a:	429a      	cmp	r2, r3
  40de2c:	d00f      	beq.n	40de4e <draw_letter_normal+0x2ae>
        fill_area.y2--;
  40de2e:	3b01      	subs	r3, #1
  40de30:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        _lv_blend_fill(clip_area, &fill_area,
  40de34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40de36:	9302      	str	r3, [sp, #8]
  40de38:	23ff      	movs	r3, #255	; 0xff
  40de3a:	9301      	str	r3, [sp, #4]
  40de3c:	2302      	movs	r3, #2
  40de3e:	9300      	str	r3, [sp, #0]
  40de40:	464b      	mov	r3, r9
  40de42:	f8bd 2074 	ldrh.w	r2, [sp, #116]	; 0x74
  40de46:	a910      	add	r1, sp, #64	; 0x40
  40de48:	980e      	ldr	r0, [sp, #56]	; 0x38
  40de4a:	4c0d      	ldr	r4, [pc, #52]	; (40de80 <draw_letter_normal+0x2e0>)
  40de4c:	47a0      	blx	r4
    _lv_mem_buf_release(mask_buf);
  40de4e:	4648      	mov	r0, r9
  40de50:	4b0c      	ldr	r3, [pc, #48]	; (40de84 <draw_letter_normal+0x2e4>)
  40de52:	4798      	blx	r3
}
  40de54:	b013      	add	sp, #76	; 0x4c
  40de56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40de5a:	bf00      	nop
  40de5c:	2040c7b8 	.word	0x2040c7b8
  40de60:	2040c7b4 	.word	0x2040c7b4
  40de64:	2040c6b4 	.word	0x2040c6b4
  40de68:	00409851 	.word	0x00409851
  40de6c:	00414da1 	.word	0x00414da1
  40de70:	00416a81 	.word	0x00416a81
  40de74:	0040fd5d 	.word	0x0040fd5d
  40de78:	0040fc95 	.word	0x0040fc95
  40de7c:	00416c0d 	.word	0x00416c0d
  40de80:	0040c921 	.word	0x0040c921
  40de84:	00416831 	.word	0x00416831
  40de88:	0042c74c 	.word	0x0042c74c
  40de8c:	0042c754 	.word	0x0042c754
  40de90:	0042c764 	.word	0x0042c764
  40de94:	0042c750 	.word	0x0042c750

0040de98 <lv_draw_letter>:
{
  40de98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40de9c:	b089      	sub	sp, #36	; 0x24
  40de9e:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
  40dea2:	f89d 8050 	ldrb.w	r8, [sp, #80]	; 0x50
    if(opa < LV_OPA_MIN) return;
  40dea6:	2d01      	cmp	r5, #1
  40dea8:	d937      	bls.n	40df1a <lv_draw_letter+0x82>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
  40deaa:	2dfd      	cmp	r5, #253	; 0xfd
  40deac:	d900      	bls.n	40deb0 <lv_draw_letter+0x18>
  40deae:	25ff      	movs	r5, #255	; 0xff
    if(font_p == NULL) {
  40deb0:	b39a      	cbz	r2, 40df1a <lv_draw_letter+0x82>
  40deb2:	469b      	mov	fp, r3
  40deb4:	4614      	mov	r4, r2
  40deb6:	4689      	mov	r9, r1
  40deb8:	4607      	mov	r7, r0
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
  40deba:	2300      	movs	r3, #0
  40debc:	465a      	mov	r2, fp
  40debe:	a905      	add	r1, sp, #20
  40dec0:	4620      	mov	r0, r4
  40dec2:	4e2c      	ldr	r6, [pc, #176]	; (40df74 <lv_draw_letter+0xdc>)
  40dec4:	47b0      	blx	r6
    if(g_ret == false)  {
  40dec6:	b340      	cbz	r0, 40df1a <lv_draw_letter+0x82>
    if((g.box_h == 0) || (g.box_w == 0)) return;
  40dec8:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  40decc:	b32b      	cbz	r3, 40df1a <lv_draw_letter+0x82>
  40dece:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  40ded2:	b312      	cbz	r2, 40df1a <lv_draw_letter+0x82>
    int32_t pos_x = pos_p->x + g.ofs_x;
  40ded4:	f9b7 a000 	ldrsh.w	sl, [r7]
  40ded8:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
  40dedc:	448a      	add	sl, r1
    int32_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
  40dede:	f9b7 7002 	ldrsh.w	r7, [r7, #2]
  40dee2:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
  40dee6:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
  40deea:	1a09      	subs	r1, r1, r0
  40deec:	440f      	add	r7, r1
  40deee:	1aff      	subs	r7, r7, r3
  40def0:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
  40def4:	1a7f      	subs	r7, r7, r1
    if(pos_x + g.box_w < clip_area->x1 ||
  40def6:	4452      	add	r2, sl
  40def8:	f9b9 1000 	ldrsh.w	r1, [r9]
  40defc:	428a      	cmp	r2, r1
  40defe:	db0c      	blt.n	40df1a <lv_draw_letter+0x82>
       pos_x > clip_area->x2 ||
  40df00:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
    if(pos_x + g.box_w < clip_area->x1 ||
  40df04:	4592      	cmp	sl, r2
  40df06:	dc08      	bgt.n	40df1a <lv_draw_letter+0x82>
       pos_y + g.box_h < clip_area->y1 ||
  40df08:	443b      	add	r3, r7
  40df0a:	f9b9 2002 	ldrsh.w	r2, [r9, #2]
       pos_x > clip_area->x2 ||
  40df0e:	4293      	cmp	r3, r2
  40df10:	db03      	blt.n	40df1a <lv_draw_letter+0x82>
       pos_y > clip_area->y2)  {
  40df12:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
       pos_y + g.box_h < clip_area->y1 ||
  40df16:	429f      	cmp	r7, r3
  40df18:	dd02      	ble.n	40df20 <lv_draw_letter+0x88>
}
  40df1a:	b009      	add	sp, #36	; 0x24
  40df1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
  40df20:	4659      	mov	r1, fp
  40df22:	4620      	mov	r0, r4
  40df24:	4b14      	ldr	r3, [pc, #80]	; (40df78 <lv_draw_letter+0xe0>)
  40df26:	4798      	blx	r3
    if(map_p == NULL) {
  40df28:	2800      	cmp	r0, #0
  40df2a:	d0f6      	beq.n	40df1a <lv_draw_letter+0x82>
    if(font_p->subpx) {
  40df2c:	7b22      	ldrb	r2, [r4, #12]
  40df2e:	f012 0f03 	tst.w	r2, #3
  40df32:	d00f      	beq.n	40df54 <lv_draw_letter+0xbc>
        draw_letter_subpx(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
  40df34:	f8cd 800c 	str.w	r8, [sp, #12]
  40df38:	9502      	str	r5, [sp, #8]
  40df3a:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
  40df3e:	f8ad 2004 	strh.w	r2, [sp, #4]
  40df42:	9000      	str	r0, [sp, #0]
  40df44:	464b      	mov	r3, r9
  40df46:	aa05      	add	r2, sp, #20
  40df48:	b239      	sxth	r1, r7
  40df4a:	fa0f f08a 	sxth.w	r0, sl
  40df4e:	4c0b      	ldr	r4, [pc, #44]	; (40df7c <lv_draw_letter+0xe4>)
  40df50:	47a0      	blx	r4
  40df52:	e7e2      	b.n	40df1a <lv_draw_letter+0x82>
        draw_letter_normal(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
  40df54:	f8cd 800c 	str.w	r8, [sp, #12]
  40df58:	9502      	str	r5, [sp, #8]
  40df5a:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
  40df5e:	f8ad 2004 	strh.w	r2, [sp, #4]
  40df62:	9000      	str	r0, [sp, #0]
  40df64:	464b      	mov	r3, r9
  40df66:	aa05      	add	r2, sp, #20
  40df68:	b239      	sxth	r1, r7
  40df6a:	fa0f f08a 	sxth.w	r0, sl
  40df6e:	4c04      	ldr	r4, [pc, #16]	; (40df80 <lv_draw_letter+0xe8>)
  40df70:	47a0      	blx	r4
  40df72:	e7d2      	b.n	40df1a <lv_draw_letter+0x82>
  40df74:	00413be5 	.word	0x00413be5
  40df78:	00413bdd 	.word	0x00413bdd
  40df7c:	0040d745 	.word	0x0040d745
  40df80:	0040dba1 	.word	0x0040dba1

0040df84 <lv_draw_label_dsc_init>:
{
  40df84:	b510      	push	{r4, lr}
  40df86:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
  40df88:	2124      	movs	r1, #36	; 0x24
  40df8a:	4b0e      	ldr	r3, [pc, #56]	; (40dfc4 <lv_draw_label_dsc_init+0x40>)
  40df8c:	4798      	blx	r3
    dsc->opa = LV_OPA_COVER;
  40df8e:	23ff      	movs	r3, #255	; 0xff
  40df90:	7323      	strb	r3, [r4, #12]
    dsc->color = LV_COLOR_BLACK;
  40df92:	2300      	movs	r3, #0
  40df94:	8023      	strh	r3, [r4, #0]
    dsc->font = LV_THEME_DEFAULT_FONT_NORMAL;
  40df96:	4a0c      	ldr	r2, [pc, #48]	; (40dfc8 <lv_draw_label_dsc_init+0x44>)
  40df98:	60a2      	str	r2, [r4, #8]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
  40df9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
  40df9e:	6162      	str	r2, [r4, #20]
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
  40dfa0:	61a2      	str	r2, [r4, #24]
    dsc->sel_color = LV_COLOR_BLACK;
  40dfa2:	8063      	strh	r3, [r4, #2]
    dsc->sel_bg_color = LV_COLOR_BLUE;
  40dfa4:	7922      	ldrb	r2, [r4, #4]
  40dfa6:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
  40dfaa:	f363 02c7 	bfi	r2, r3, #3, #5
  40dfae:	7122      	strb	r2, [r4, #4]
  40dfb0:	7962      	ldrb	r2, [r4, #5]
  40dfb2:	f042 021f 	orr.w	r2, r2, #31
  40dfb6:	f363 1247 	bfi	r2, r3, #5, #3
  40dfba:	7162      	strb	r2, [r4, #5]
    dsc->bidi_dir = LV_BIDI_DIR_LTR;
  40dfbc:	f884 3020 	strb.w	r3, [r4, #32]
  40dfc0:	bd10      	pop	{r4, pc}
  40dfc2:	bf00      	nop
  40dfc4:	00416c0d 	.word	0x00416c0d
  40dfc8:	2040008c 	.word	0x2040008c

0040dfcc <lv_draw_label>:
{
  40dfcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40dfd0:	b0b7      	sub	sp, #220	; 0xdc
  40dfd2:	9c40      	ldr	r4, [sp, #256]	; 0x100
    if(dsc->opa <= LV_OPA_MIN) return;
  40dfd4:	7b15      	ldrb	r5, [r2, #12]
  40dfd6:	2d02      	cmp	r5, #2
  40dfd8:	d903      	bls.n	40dfe2 <lv_draw_label+0x16>
    const lv_font_t * font = dsc->font;
  40dfda:	6895      	ldr	r5, [r2, #8]
  40dfdc:	9506      	str	r5, [sp, #24]
    if(txt[0] == '\0')  return;
  40dfde:	781d      	ldrb	r5, [r3, #0]
  40dfe0:	b915      	cbnz	r5, 40dfe8 <lv_draw_label+0x1c>
}
  40dfe2:	b037      	add	sp, #220	; 0xdc
  40dfe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40dfe8:	930c      	str	r3, [sp, #48]	; 0x30
  40dfea:	4616      	mov	r6, r2
  40dfec:	460a      	mov	r2, r1
  40dfee:	9109      	str	r1, [sp, #36]	; 0x24
  40dff0:	4605      	mov	r5, r0
  40dff2:	9010      	str	r0, [sp, #64]	; 0x40
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, mask);
  40dff4:	4601      	mov	r1, r0
  40dff6:	a834      	add	r0, sp, #208	; 0xd0
  40dff8:	4ba8      	ldr	r3, [pc, #672]	; (40e29c <lv_draw_label+0x2d0>)
  40dffa:	4798      	blx	r3
    if(!clip_ok) return;
  40dffc:	2800      	cmp	r0, #0
  40dffe:	d0f0      	beq.n	40dfe2 <lv_draw_label+0x16>
    if((dsc->flag & LV_TXT_FLAG_EXPAND) == 0) {
  40e000:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
  40e004:	f012 0f02 	tst.w	r2, #2
  40e008:	d12b      	bne.n	40e062 <lv_draw_label+0x96>
  40e00a:	88ab      	ldrh	r3, [r5, #4]
  40e00c:	882a      	ldrh	r2, [r5, #0]
  40e00e:	1a9b      	subs	r3, r3, r2
  40e010:	b29b      	uxth	r3, r3
  40e012:	3301      	adds	r3, #1
  40e014:	b21b      	sxth	r3, r3
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
  40e016:	9a06      	ldr	r2, [sp, #24]
  40e018:	f9b2 8008 	ldrsh.w	r8, [r2, #8]
    int32_t line_height = line_height_font + dsc->line_space;
  40e01c:	f9b6 200e 	ldrsh.w	r2, [r6, #14]
  40e020:	4442      	add	r2, r8
  40e022:	920d      	str	r2, [sp, #52]	; 0x34
    pos.x = coords->x1;
  40e024:	9810      	ldr	r0, [sp, #64]	; 0x40
  40e026:	f9b0 2000 	ldrsh.w	r2, [r0]
  40e02a:	f8ad 20cc 	strh.w	r2, [sp, #204]	; 0xcc
    pos.y = coords->y1;
  40e02e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
    x_ofs = dsc->ofs_x;
  40e032:	f9b6 101c 	ldrsh.w	r1, [r6, #28]
  40e036:	9112      	str	r1, [sp, #72]	; 0x48
    y_ofs = dsc->ofs_y;
  40e038:	f9b6 101e 	ldrsh.w	r1, [r6, #30]
    pos.y += y_ofs;
  40e03c:	440a      	add	r2, r1
  40e03e:	f8ad 20ce 	strh.w	r2, [sp, #206]	; 0xce
    if(hint && y_ofs == 0 && coords->y1 < 0) {
  40e042:	1c22      	adds	r2, r4, #0
  40e044:	bf18      	it	ne
  40e046:	2201      	movne	r2, #1
  40e048:	2900      	cmp	r1, #0
  40e04a:	bf14      	ite	ne
  40e04c:	2100      	movne	r1, #0
  40e04e:	f002 0101 	andeq.w	r1, r2, #1
  40e052:	b341      	cbz	r1, 40e0a6 <lv_draw_label+0xda>
  40e054:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
  40e058:	2900      	cmp	r1, #0
  40e05a:	db13      	blt.n	40e084 <lv_draw_label+0xb8>
    int32_t last_line_start = -1;
  40e05c:	f04f 37ff 	mov.w	r7, #4294967295
  40e060:	e023      	b.n	40e0aa <lv_draw_label+0xde>
        _lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
  40e062:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  40e066:	9202      	str	r2, [sp, #8]
  40e068:	f647 4218 	movw	r2, #31768	; 0x7c18
  40e06c:	9201      	str	r2, [sp, #4]
  40e06e:	f9b6 200e 	ldrsh.w	r2, [r6, #14]
  40e072:	9200      	str	r2, [sp, #0]
  40e074:	68b2      	ldr	r2, [r6, #8]
  40e076:	990c      	ldr	r1, [sp, #48]	; 0x30
  40e078:	a818      	add	r0, sp, #96	; 0x60
  40e07a:	4d89      	ldr	r5, [pc, #548]	; (40e2a0 <lv_draw_label+0x2d4>)
  40e07c:	47a8      	blx	r5
        w = p.x;
  40e07e:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
  40e082:	e7c8      	b.n	40e016 <lv_draw_label+0x4a>
        if(LV_MATH_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
  40e084:	68a0      	ldr	r0, [r4, #8]
  40e086:	1a40      	subs	r0, r0, r1
  40e088:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
  40e08c:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
  40e090:	980d      	ldr	r0, [sp, #52]	; 0x34
  40e092:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
  40e096:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
  40e09a:	dd02      	ble.n	40e0a2 <lv_draw_label+0xd6>
            hint->line_start = -1;
  40e09c:	f04f 31ff 	mov.w	r1, #4294967295
  40e0a0:	6021      	str	r1, [r4, #0]
        last_line_start = hint->line_start;
  40e0a2:	6827      	ldr	r7, [r4, #0]
  40e0a4:	e001      	b.n	40e0aa <lv_draw_label+0xde>
    int32_t last_line_start = -1;
  40e0a6:	f04f 37ff 	mov.w	r7, #4294967295
    if(hint && last_line_start >= 0) {
  40e0aa:	2f00      	cmp	r7, #0
  40e0ac:	bfb4      	ite	lt
  40e0ae:	2200      	movlt	r2, #0
  40e0b0:	f002 0201 	andge.w	r2, r2, #1
  40e0b4:	b1d2      	cbz	r2, 40e0ec <lv_draw_label+0x120>
        pos.y += hint->y;
  40e0b6:	6862      	ldr	r2, [r4, #4]
  40e0b8:	f8bd 10ce 	ldrh.w	r1, [sp, #206]	; 0xce
  40e0bc:	440a      	add	r2, r1
  40e0be:	f8ad 20ce 	strh.w	r2, [sp, #206]	; 0xce
    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  40e0c2:	b21b      	sxth	r3, r3
  40e0c4:	4619      	mov	r1, r3
  40e0c6:	930e      	str	r3, [sp, #56]	; 0x38
  40e0c8:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
  40e0cc:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
  40e0d0:	9300      	str	r3, [sp, #0]
  40e0d2:	460b      	mov	r3, r1
  40e0d4:	9906      	ldr	r1, [sp, #24]
  40e0d6:	980c      	ldr	r0, [sp, #48]	; 0x30
  40e0d8:	4438      	add	r0, r7
  40e0da:	4d72      	ldr	r5, [pc, #456]	; (40e2a4 <lv_draw_label+0x2d8>)
  40e0dc:	47a8      	blx	r5
  40e0de:	eb07 0b00 	add.w	fp, r7, r0
  40e0e2:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
  40e0e6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    while(pos.y + line_height_font < mask->y1) {
  40e0ea:	e007      	b.n	40e0fc <lv_draw_label+0x130>
    uint32_t line_start     = 0;
  40e0ec:	2700      	movs	r7, #0
  40e0ee:	e7e8      	b.n	40e0c2 <lv_draw_label+0xf6>
        if(txt[line_start] == '\0') return;
  40e0f0:	782b      	ldrb	r3, [r5, #0]
        line_start = line_end;
  40e0f2:	465f      	mov	r7, fp
        if(txt[line_start] == '\0') return;
  40e0f4:	2b00      	cmp	r3, #0
  40e0f6:	f43f af74 	beq.w	40dfe2 <lv_draw_label+0x16>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  40e0fa:	4683      	mov	fp, r0
    while(pos.y + line_height_font < mask->y1) {
  40e0fc:	f9bd 30ce 	ldrsh.w	r3, [sp, #206]	; 0xce
  40e100:	4443      	add	r3, r8
  40e102:	f9b9 2002 	ldrsh.w	r2, [r9, #2]
  40e106:	4293      	cmp	r3, r2
  40e108:	da28      	bge.n	40e15c <lv_draw_label+0x190>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  40e10a:	eb0a 050b 	add.w	r5, sl, fp
  40e10e:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
  40e112:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
  40e116:	9300      	str	r3, [sp, #0]
  40e118:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40e11a:	9906      	ldr	r1, [sp, #24]
  40e11c:	4628      	mov	r0, r5
  40e11e:	4f61      	ldr	r7, [pc, #388]	; (40e2a4 <lv_draw_label+0x2d8>)
  40e120:	47b8      	blx	r7
  40e122:	4458      	add	r0, fp
        pos.y += line_height;
  40e124:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
  40e128:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40e12a:	4413      	add	r3, r2
  40e12c:	b21b      	sxth	r3, r3
  40e12e:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
  40e132:	2c00      	cmp	r4, #0
  40e134:	d0dc      	beq.n	40e0f0 <lv_draw_label+0x124>
  40e136:	f513 6f80 	cmn.w	r3, #1024	; 0x400
  40e13a:	dbd9      	blt.n	40e0f0 <lv_draw_label+0x124>
  40e13c:	6823      	ldr	r3, [r4, #0]
  40e13e:	2b00      	cmp	r3, #0
  40e140:	dad6      	bge.n	40e0f0 <lv_draw_label+0x124>
            hint->line_start = line_start;
  40e142:	f8c4 b000 	str.w	fp, [r4]
            hint->y          = pos.y - coords->y1;
  40e146:	f9bd 30ce 	ldrsh.w	r3, [sp, #206]	; 0xce
  40e14a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40e14c:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
  40e150:	1a9b      	subs	r3, r3, r2
  40e152:	6063      	str	r3, [r4, #4]
            hint->coord_y    = coords->y1;
  40e154:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  40e158:	60a3      	str	r3, [r4, #8]
  40e15a:	e7c9      	b.n	40e0f0 <lv_draw_label+0x124>
    if(dsc->flag & LV_TXT_FLAG_CENTER) {
  40e15c:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
  40e160:	f012 0f04 	tst.w	r2, #4
  40e164:	d124      	bne.n	40e1b0 <lv_draw_label+0x1e4>
    else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
  40e166:	f012 0f08 	tst.w	r2, #8
  40e16a:	d13d      	bne.n	40e1e8 <lv_draw_label+0x21c>
    lv_opa_t opa = dsc->opa;
  40e16c:	7b33      	ldrb	r3, [r6, #12]
  40e16e:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32_t sel_start = dsc->sel_start;
  40e170:	6973      	ldr	r3, [r6, #20]
  40e172:	4619      	mov	r1, r3
  40e174:	461c      	mov	r4, r3
    uint32_t sel_end = dsc->sel_end;
  40e176:	f8d6 8018 	ldr.w	r8, [r6, #24]
    if(sel_start > sel_end) {
  40e17a:	4543      	cmp	r3, r8
  40e17c:	d802      	bhi.n	40e184 <lv_draw_label+0x1b8>
  40e17e:	4643      	mov	r3, r8
    uint32_t sel_start = dsc->sel_start;
  40e180:	4688      	mov	r8, r1
    uint32_t sel_end = dsc->sel_end;
  40e182:	461c      	mov	r4, r3
    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
  40e184:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
  40e188:	f013 0f03 	tst.w	r3, #3
  40e18c:	d144      	bne.n	40e218 <lv_draw_label+0x24c>
    lv_draw_rect_dsc_init(&draw_dsc_sel);
  40e18e:	a81a      	add	r0, sp, #104	; 0x68
  40e190:	4b45      	ldr	r3, [pc, #276]	; (40e2a8 <lv_draw_label+0x2dc>)
  40e192:	4798      	blx	r3
    draw_dsc_sel.bg_color = dsc->sel_bg_color;
  40e194:	88b3      	ldrh	r3, [r6, #4]
  40e196:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    int32_t pos_x_start = pos.x;
  40e19a:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
  40e19e:	9313      	str	r3, [sp, #76]	; 0x4c
    uint32_t par_start = 0;
  40e1a0:	2300      	movs	r3, #0
  40e1a2:	9311      	str	r3, [sp, #68]	; 0x44
  40e1a4:	f8cd b01c 	str.w	fp, [sp, #28]
  40e1a8:	46bb      	mov	fp, r7
  40e1aa:	46c2      	mov	sl, r8
  40e1ac:	46a0      	mov	r8, r4
    while(txt[line_start] != '\0') {
  40e1ae:	e170      	b.n	40e492 <lv_draw_label+0x4c6>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
  40e1b0:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  40e1b4:	9200      	str	r2, [sp, #0]
  40e1b6:	9a06      	ldr	r2, [sp, #24]
  40e1b8:	ebab 0107 	sub.w	r1, fp, r7
  40e1bc:	980c      	ldr	r0, [sp, #48]	; 0x30
  40e1be:	4438      	add	r0, r7
  40e1c0:	4c3a      	ldr	r4, [pc, #232]	; (40e2ac <lv_draw_label+0x2e0>)
  40e1c2:	47a0      	blx	r4
  40e1c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40e1c6:	8893      	ldrh	r3, [r2, #4]
  40e1c8:	8812      	ldrh	r2, [r2, #0]
  40e1ca:	1a9b      	subs	r3, r3, r2
  40e1cc:	b29b      	uxth	r3, r3
  40e1ce:	3301      	adds	r3, #1
  40e1d0:	b21b      	sxth	r3, r3
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
  40e1d2:	1a1b      	subs	r3, r3, r0
  40e1d4:	d406      	bmi.n	40e1e4 <lv_draw_label+0x218>
  40e1d6:	f8bd 20cc 	ldrh.w	r2, [sp, #204]	; 0xcc
  40e1da:	eb02 0363 	add.w	r3, r2, r3, asr #1
  40e1de:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
  40e1e2:	e7c3      	b.n	40e16c <lv_draw_label+0x1a0>
  40e1e4:	3301      	adds	r3, #1
  40e1e6:	e7f6      	b.n	40e1d6 <lv_draw_label+0x20a>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
  40e1e8:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  40e1ec:	9200      	str	r2, [sp, #0]
  40e1ee:	9a06      	ldr	r2, [sp, #24]
  40e1f0:	ebab 0107 	sub.w	r1, fp, r7
  40e1f4:	980c      	ldr	r0, [sp, #48]	; 0x30
  40e1f6:	4438      	add	r0, r7
  40e1f8:	4c2c      	ldr	r4, [pc, #176]	; (40e2ac <lv_draw_label+0x2e0>)
  40e1fa:	47a0      	blx	r4
  40e1fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40e1fe:	8893      	ldrh	r3, [r2, #4]
  40e200:	8812      	ldrh	r2, [r2, #0]
  40e202:	1a9b      	subs	r3, r3, r2
  40e204:	b29b      	uxth	r3, r3
  40e206:	3301      	adds	r3, #1
  40e208:	b21b      	sxth	r3, r3
        pos.x += lv_area_get_width(coords) - line_width;
  40e20a:	1a1b      	subs	r3, r3, r0
  40e20c:	f8bd 20cc 	ldrh.w	r2, [sp, #204]	; 0xcc
  40e210:	4413      	add	r3, r2
  40e212:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
  40e216:	e7a9      	b.n	40e16c <lv_draw_label+0x1a0>
        lv_draw_line_dsc_init(&line_dsc);
  40e218:	a830      	add	r0, sp, #192	; 0xc0
  40e21a:	4b25      	ldr	r3, [pc, #148]	; (40e2b0 <lv_draw_label+0x2e4>)
  40e21c:	4798      	blx	r3
        line_dsc.color = dsc->color;
  40e21e:	8833      	ldrh	r3, [r6, #0]
  40e220:	f8ad 30c0 	strh.w	r3, [sp, #192]	; 0xc0
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
  40e224:	9b06      	ldr	r3, [sp, #24]
  40e226:	f993 300e 	ldrsb.w	r3, [r3, #14]
  40e22a:	b173      	cbz	r3, 40e24a <lv_draw_label+0x27e>
  40e22c:	b21b      	sxth	r3, r3
  40e22e:	f8ad 30c2 	strh.w	r3, [sp, #194]	; 0xc2
        line_dsc.opa = dsc->opa;
  40e232:	7b33      	ldrb	r3, [r6, #12]
  40e234:	f88d 30c8 	strb.w	r3, [sp, #200]	; 0xc8
        line_dsc.blend_mode = dsc->blend_mode;
  40e238:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
  40e23c:	f89d 30c9 	ldrb.w	r3, [sp, #201]	; 0xc9
  40e240:	f362 0301 	bfi	r3, r2, #0, #2
  40e244:	f88d 30c9 	strb.w	r3, [sp, #201]	; 0xc9
  40e248:	e7a1      	b.n	40e18e <lv_draw_label+0x1c2>
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
  40e24a:	2301      	movs	r3, #1
  40e24c:	e7ef      	b.n	40e22e <lv_draw_label+0x262>
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
  40e24e:	4b19      	ldr	r3, [pc, #100]	; (40e2b4 <lv_draw_label+0x2e8>)
  40e250:	681b      	ldr	r3, [r3, #0]
  40e252:	4459      	add	r1, fp
  40e254:	980c      	ldr	r0, [sp, #48]	; 0x30
  40e256:	4798      	blx	r3
  40e258:	9008      	str	r0, [sp, #32]
  40e25a:	e093      	b.n	40e384 <lv_draw_label+0x3b8>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
  40e25c:	b91f      	cbnz	r7, 40e266 <lv_draw_label+0x29a>
                        par_start = i;
  40e25e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  40e260:	9311      	str	r3, [sp, #68]	; 0x44
                        cmd_state = CMD_STATE_PAR;
  40e262:	2701      	movs	r7, #1
                        continue;
  40e264:	e07c      	b.n	40e360 <lv_draw_label+0x394>
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char */
  40e266:	2f01      	cmp	r7, #1
  40e268:	d004      	beq.n	40e274 <lv_draw_label+0x2a8>
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end */
  40e26a:	2f02      	cmp	r7, #2
  40e26c:	f040 80a0 	bne.w	40e3b0 <lv_draw_label+0x3e4>
                        cmd_state = CMD_STATE_WAIT;
  40e270:	2700      	movs	r7, #0
  40e272:	e075      	b.n	40e360 <lv_draw_label+0x394>
                        cmd_state = CMD_STATE_WAIT;
  40e274:	2700      	movs	r7, #0
  40e276:	e09b      	b.n	40e3b0 <lv_draw_label+0x3e4>
                    if(letter == ' ') {
  40e278:	9b05      	ldr	r3, [sp, #20]
  40e27a:	2b20      	cmp	r3, #32
  40e27c:	d170      	bne.n	40e360 <lv_draw_label+0x394>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
  40e27e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  40e280:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40e282:	1a9b      	subs	r3, r3, r2
  40e284:	2b07      	cmp	r3, #7
  40e286:	d004      	beq.n	40e292 <lv_draw_label+0x2c6>
                            recolor.full = dsc->color.full;
  40e288:	8833      	ldrh	r3, [r6, #0]
  40e28a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
  40e28e:	2702      	movs	r7, #2
                    continue;
  40e290:	e066      	b.n	40e360 <lv_draw_label+0x394>
                            _lv_memcpy_small(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
  40e292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40e294:	1899      	adds	r1, r3, r2
    uint8_t * d8 = (uint8_t *)dst;
  40e296:	aa18      	add	r2, sp, #96	; 0x60
  40e298:	2306      	movs	r3, #6
  40e29a:	e012      	b.n	40e2c2 <lv_draw_label+0x2f6>
  40e29c:	00415663 	.word	0x00415663
  40e2a0:	00417fa5 	.word	0x00417fa5
  40e2a4:	00417e19 	.word	0x00417e19
  40e2a8:	0041250d 	.word	0x0041250d
  40e2ac:	00417ef9 	.word	0x00417ef9
  40e2b0:	0040edd5 	.word	0x0040edd5
  40e2b4:	204000b4 	.word	0x204000b4
        *d8 = *s8;
  40e2b8:	f811 0b01 	ldrb.w	r0, [r1], #1
  40e2bc:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40e2c0:	3b01      	subs	r3, #1
    while(len) {
  40e2c2:	2b00      	cmp	r3, #0
  40e2c4:	d1f8      	bne.n	40e2b8 <lv_draw_label+0x2ec>
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
  40e2c6:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
  40e2ca:	4db8      	ldr	r5, [pc, #736]	; (40e5ac <lv_draw_label+0x5e0>)
  40e2cc:	47a8      	blx	r5
  40e2ce:	ea4f 1800 	mov.w	r8, r0, lsl #4
  40e2d2:	f89d 0061 	ldrb.w	r0, [sp, #97]	; 0x61
  40e2d6:	47a8      	blx	r5
  40e2d8:	4480      	add	r8, r0
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
  40e2da:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
  40e2de:	47a8      	blx	r5
  40e2e0:	0104      	lsls	r4, r0, #4
  40e2e2:	f89d 0063 	ldrb.w	r0, [sp, #99]	; 0x63
  40e2e6:	47a8      	blx	r5
  40e2e8:	4404      	add	r4, r0
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
  40e2ea:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
  40e2ee:	47a8      	blx	r5
  40e2f0:	0107      	lsls	r7, r0, #4
  40e2f2:	f89d 0065 	ldrb.w	r0, [sp, #101]	; 0x65
  40e2f6:	47a8      	blx	r5
  40e2f8:	183b      	adds	r3, r7, r0
                            recolor = lv_color_make(r, g, b);
  40e2fa:	b2e4      	uxtb	r4, r4
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
  40e2fc:	0962      	lsrs	r2, r4, #5
  40e2fe:	f3c8 08c4 	ubfx	r8, r8, #3, #5
  40e302:	f3c3 03c4 	ubfx	r3, r3, #3, #5
  40e306:	f3c4 0482 	ubfx	r4, r4, #2, #3
  40e30a:	9914      	ldr	r1, [sp, #80]	; 0x50
  40e30c:	f362 0102 	bfi	r1, r2, #0, #3
  40e310:	460a      	mov	r2, r1
  40e312:	f368 02c7 	bfi	r2, r8, #3, #5
  40e316:	f363 220c 	bfi	r2, r3, #8, #5
  40e31a:	4613      	mov	r3, r2
  40e31c:	f364 334f 	bfi	r3, r4, #13, #3
  40e320:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
  40e324:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
  40e328:	2702      	movs	r7, #2
  40e32a:	e019      	b.n	40e360 <lv_draw_label+0x394>
            if(cmd_state == CMD_STATE_IN) color = recolor;
  40e32c:	f8bd 803e 	ldrh.w	r8, [sp, #62]	; 0x3e
  40e330:	e045      	b.n	40e3be <lv_draw_label+0x3f2>
            lv_draw_letter(&pos, mask, font, letter, color, opa, dsc->blend_mode);
  40e332:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
  40e336:	9302      	str	r3, [sp, #8]
  40e338:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40e33a:	9301      	str	r3, [sp, #4]
  40e33c:	f8ad 8000 	strh.w	r8, [sp]
  40e340:	9b05      	ldr	r3, [sp, #20]
  40e342:	9a06      	ldr	r2, [sp, #24]
  40e344:	9909      	ldr	r1, [sp, #36]	; 0x24
  40e346:	a833      	add	r0, sp, #204	; 0xcc
  40e348:	4c99      	ldr	r4, [pc, #612]	; (40e5b0 <lv_draw_label+0x5e4>)
  40e34a:	47a0      	blx	r4
            if(letter_w > 0) {
  40e34c:	2d00      	cmp	r5, #0
  40e34e:	dd07      	ble.n	40e360 <lv_draw_label+0x394>
                pos.x += letter_w + dsc->letter_space;
  40e350:	8a33      	ldrh	r3, [r6, #16]
  40e352:	441d      	add	r5, r3
  40e354:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
  40e358:	fa13 f585 	uxtah	r5, r3, r5
  40e35c:	f8ad 50cc 	strh.w	r5, [sp, #204]	; 0xcc
        while(i < line_end - line_start) {
  40e360:	9b07      	ldr	r3, [sp, #28]
  40e362:	eba3 030b 	sub.w	r3, r3, fp
  40e366:	992f      	ldr	r1, [sp, #188]	; 0xbc
  40e368:	428b      	cmp	r3, r1
  40e36a:	d95b      	bls.n	40e424 <lv_draw_label+0x458>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
  40e36c:	f64f 74ff 	movw	r4, #65535	; 0xffff
  40e370:	45a2      	cmp	sl, r4
  40e372:	bf18      	it	ne
  40e374:	45a1      	cmpne	r9, r4
  40e376:	bf14      	ite	ne
  40e378:	2401      	movne	r4, #1
  40e37a:	2400      	moveq	r4, #0
  40e37c:	f47f af67 	bne.w	40e24e <lv_draw_label+0x282>
            uint32_t logical_char_pos = 0;
  40e380:	2300      	movs	r3, #0
  40e382:	9308      	str	r3, [sp, #32]
            uint32_t letter      = _lv_txt_encoded_next(bidi_txt, &i);
  40e384:	4d8b      	ldr	r5, [pc, #556]	; (40e5b4 <lv_draw_label+0x5e8>)
  40e386:	682b      	ldr	r3, [r5, #0]
  40e388:	a92f      	add	r1, sp, #188	; 0xbc
  40e38a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  40e38e:	4640      	mov	r0, r8
  40e390:	4798      	blx	r3
  40e392:	9005      	str	r0, [sp, #20]
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
  40e394:	682b      	ldr	r3, [r5, #0]
  40e396:	2100      	movs	r1, #0
  40e398:	982f      	ldr	r0, [sp, #188]	; 0xbc
  40e39a:	4440      	add	r0, r8
  40e39c:	4798      	blx	r3
            if((dsc->flag & LV_TXT_FLAG_RECOLOR) != 0) {
  40e39e:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
  40e3a2:	f013 0f01 	tst.w	r3, #1
  40e3a6:	d006      	beq.n	40e3b6 <lv_draw_label+0x3ea>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
  40e3a8:	9b05      	ldr	r3, [sp, #20]
  40e3aa:	2b23      	cmp	r3, #35	; 0x23
  40e3ac:	f43f af56 	beq.w	40e25c <lv_draw_label+0x290>
                if(cmd_state == CMD_STATE_PAR) {
  40e3b0:	2f01      	cmp	r7, #1
  40e3b2:	f43f af61 	beq.w	40e278 <lv_draw_label+0x2ac>
            lv_color_t color = dsc->color;
  40e3b6:	f8b6 8000 	ldrh.w	r8, [r6]
            if(cmd_state == CMD_STATE_IN) color = recolor;
  40e3ba:	2f02      	cmp	r7, #2
  40e3bc:	d0b6      	beq.n	40e32c <lv_draw_label+0x360>
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
  40e3be:	4602      	mov	r2, r0
  40e3c0:	9905      	ldr	r1, [sp, #20]
  40e3c2:	9806      	ldr	r0, [sp, #24]
  40e3c4:	4b7c      	ldr	r3, [pc, #496]	; (40e5b8 <lv_draw_label+0x5ec>)
  40e3c6:	4798      	blx	r3
  40e3c8:	4605      	mov	r5, r0
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
  40e3ca:	2c00      	cmp	r4, #0
  40e3cc:	d0b1      	beq.n	40e332 <lv_draw_label+0x366>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
  40e3ce:	9a08      	ldr	r2, [sp, #32]
  40e3d0:	4613      	mov	r3, r2
  40e3d2:	4592      	cmp	sl, r2
  40e3d4:	bf8c      	ite	hi
  40e3d6:	2300      	movhi	r3, #0
  40e3d8:	2301      	movls	r3, #1
  40e3da:	4591      	cmp	r9, r2
  40e3dc:	bf98      	it	ls
  40e3de:	2300      	movls	r3, #0
  40e3e0:	2b00      	cmp	r3, #0
  40e3e2:	d0a6      	beq.n	40e332 <lv_draw_label+0x366>
                    sel_coords.x1 = pos.x;
  40e3e4:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
  40e3e8:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                    sel_coords.y1 = pos.y;
  40e3ec:	f9bd 20ce 	ldrsh.w	r2, [sp, #206]	; 0xce
  40e3f0:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
  40e3f4:	fa10 f383 	uxtah	r3, r0, r3
  40e3f8:	8a31      	ldrh	r1, [r6, #16]
  40e3fa:	fa11 f383 	uxtah	r3, r1, r3
  40e3fe:	b29b      	uxth	r3, r3
  40e400:	3b01      	subs	r3, #1
  40e402:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
                    sel_coords.y2 = pos.y + line_height - 1;
  40e406:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40e408:	fa13 f282 	uxtah	r2, r3, r2
  40e40c:	b292      	uxth	r2, r2
  40e40e:	3a01      	subs	r2, #1
  40e410:	f8ad 2066 	strh.w	r2, [sp, #102]	; 0x66
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
  40e414:	aa1a      	add	r2, sp, #104	; 0x68
  40e416:	9909      	ldr	r1, [sp, #36]	; 0x24
  40e418:	a818      	add	r0, sp, #96	; 0x60
  40e41a:	4b68      	ldr	r3, [pc, #416]	; (40e5bc <lv_draw_label+0x5f0>)
  40e41c:	4798      	blx	r3
                    color = dsc->sel_color;
  40e41e:	f8b6 8002 	ldrh.w	r8, [r6, #2]
  40e422:	e786      	b.n	40e332 <lv_draw_label+0x366>
  40e424:	46c8      	mov	r8, r9
        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
  40e426:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
  40e42a:	f013 0f02 	tst.w	r3, #2
  40e42e:	d143      	bne.n	40e4b8 <lv_draw_label+0x4ec>
        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
  40e430:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
  40e434:	f013 0f01 	tst.w	r3, #1
  40e438:	d166      	bne.n	40e508 <lv_draw_label+0x53c>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  40e43a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40e43c:	9f07      	ldr	r7, [sp, #28]
  40e43e:	19d5      	adds	r5, r2, r7
  40e440:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
  40e444:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
  40e448:	9300      	str	r3, [sp, #0]
  40e44a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40e44c:	9906      	ldr	r1, [sp, #24]
  40e44e:	4628      	mov	r0, r5
  40e450:	4c5b      	ldr	r4, [pc, #364]	; (40e5c0 <lv_draw_label+0x5f4>)
  40e452:	47a0      	blx	r4
  40e454:	183c      	adds	r4, r7, r0
        pos.x = coords->x1;
  40e456:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40e458:	f9b3 3000 	ldrsh.w	r3, [r3]
  40e45c:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
        if(dsc->flag & LV_TXT_FLAG_CENTER) {
  40e460:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
  40e464:	f012 0f04 	tst.w	r2, #4
  40e468:	d170      	bne.n	40e54c <lv_draw_label+0x580>
        else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
  40e46a:	f012 0f08 	tst.w	r2, #8
  40e46e:	f040 8087 	bne.w	40e580 <lv_draw_label+0x5b4>
        pos.y += line_height;
  40e472:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
  40e476:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40e478:	4413      	add	r3, r2
  40e47a:	b21b      	sxth	r3, r3
  40e47c:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
        if(pos.y > mask->y2) return;
  40e480:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40e482:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
        line_start = line_end;
  40e486:	f8dd b01c 	ldr.w	fp, [sp, #28]
        if(pos.y > mask->y2) return;
  40e48a:	4293      	cmp	r3, r2
  40e48c:	f73f ada9 	bgt.w	40dfe2 <lv_draw_label+0x16>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  40e490:	9407      	str	r4, [sp, #28]
    while(txt[line_start] != '\0') {
  40e492:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40e494:	4613      	mov	r3, r2
  40e496:	445b      	add	r3, fp
  40e498:	930a      	str	r3, [sp, #40]	; 0x28
  40e49a:	f812 300b 	ldrb.w	r3, [r2, fp]
  40e49e:	2b00      	cmp	r3, #0
  40e4a0:	f43f ad9f 	beq.w	40dfe2 <lv_draw_label+0x16>
        pos.x += x_ofs;
  40e4a4:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
  40e4a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40e4aa:	4413      	add	r3, r2
  40e4ac:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
        i         = 0;
  40e4b0:	2700      	movs	r7, #0
  40e4b2:	972f      	str	r7, [sp, #188]	; 0xbc
  40e4b4:	46c1      	mov	r9, r8
        while(i < line_end - line_start) {
  40e4b6:	e753      	b.n	40e360 <lv_draw_label+0x394>
            p1.x = pos_x_start;
  40e4b8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
  40e4bc:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
  40e4c0:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
  40e4c4:	68b2      	ldr	r2, [r6, #8]
  40e4c6:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
  40e4ca:	2a00      	cmp	r2, #0
  40e4cc:	db18      	blt.n	40e500 <lv_draw_label+0x534>
  40e4ce:	eb03 0362 	add.w	r3, r3, r2, asr #1
  40e4d2:	b29b      	uxth	r3, r3
  40e4d4:	f9bd 20c2 	ldrsh.w	r2, [sp, #194]	; 0xc2
  40e4d8:	2a00      	cmp	r2, #0
  40e4da:	db13      	blt.n	40e504 <lv_draw_label+0x538>
  40e4dc:	eb03 0362 	add.w	r3, r3, r2, asr #1
  40e4e0:	b21b      	sxth	r3, r3
  40e4e2:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
            p2.x = pos.x;
  40e4e6:	f9bd 20cc 	ldrsh.w	r2, [sp, #204]	; 0xcc
  40e4ea:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
            p2.y = p1.y;
  40e4ee:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
            lv_draw_line(&p1, &p2, mask, &line_dsc);
  40e4f2:	ab30      	add	r3, sp, #192	; 0xc0
  40e4f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40e4f6:	a918      	add	r1, sp, #96	; 0x60
  40e4f8:	a817      	add	r0, sp, #92	; 0x5c
  40e4fa:	4c32      	ldr	r4, [pc, #200]	; (40e5c4 <lv_draw_label+0x5f8>)
  40e4fc:	47a0      	blx	r4
  40e4fe:	e797      	b.n	40e430 <lv_draw_label+0x464>
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
  40e500:	3201      	adds	r2, #1
  40e502:	e7e4      	b.n	40e4ce <lv_draw_label+0x502>
  40e504:	3201      	adds	r2, #1
  40e506:	e7e9      	b.n	40e4dc <lv_draw_label+0x510>
            p1.x = pos_x_start;
  40e508:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
  40e50c:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
  40e510:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
  40e514:	68b2      	ldr	r2, [r6, #8]
  40e516:	8911      	ldrh	r1, [r2, #8]
  40e518:	440b      	add	r3, r1
  40e51a:	b29b      	uxth	r3, r3
  40e51c:	8952      	ldrh	r2, [r2, #10]
  40e51e:	1a9b      	subs	r3, r3, r2
  40e520:	b29b      	uxth	r3, r3
  40e522:	9a06      	ldr	r2, [sp, #24]
  40e524:	f992 200d 	ldrsb.w	r2, [r2, #13]
  40e528:	b292      	uxth	r2, r2
  40e52a:	1a9b      	subs	r3, r3, r2
  40e52c:	b21b      	sxth	r3, r3
  40e52e:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
            p2.x = pos.x;
  40e532:	f9bd 20cc 	ldrsh.w	r2, [sp, #204]	; 0xcc
  40e536:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
            p2.y = p1.y;
  40e53a:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
            lv_draw_line(&p1, &p2, mask, &line_dsc);
  40e53e:	ab30      	add	r3, sp, #192	; 0xc0
  40e540:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40e542:	a918      	add	r1, sp, #96	; 0x60
  40e544:	a817      	add	r0, sp, #92	; 0x5c
  40e546:	4c1f      	ldr	r4, [pc, #124]	; (40e5c4 <lv_draw_label+0x5f8>)
  40e548:	47a0      	blx	r4
  40e54a:	e776      	b.n	40e43a <lv_draw_label+0x46e>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
  40e54c:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  40e550:	9200      	str	r2, [sp, #0]
  40e552:	9a06      	ldr	r2, [sp, #24]
  40e554:	4601      	mov	r1, r0
  40e556:	4628      	mov	r0, r5
  40e558:	4d1b      	ldr	r5, [pc, #108]	; (40e5c8 <lv_draw_label+0x5fc>)
  40e55a:	47a8      	blx	r5
  40e55c:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40e55e:	8893      	ldrh	r3, [r2, #4]
  40e560:	8812      	ldrh	r2, [r2, #0]
  40e562:	1a9b      	subs	r3, r3, r2
  40e564:	b29b      	uxth	r3, r3
  40e566:	3301      	adds	r3, #1
  40e568:	b21b      	sxth	r3, r3
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
  40e56a:	1a18      	subs	r0, r3, r0
  40e56c:	d406      	bmi.n	40e57c <lv_draw_label+0x5b0>
  40e56e:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
  40e572:	eb03 0360 	add.w	r3, r3, r0, asr #1
  40e576:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
  40e57a:	e77a      	b.n	40e472 <lv_draw_label+0x4a6>
  40e57c:	3001      	adds	r0, #1
  40e57e:	e7f6      	b.n	40e56e <lv_draw_label+0x5a2>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
  40e580:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  40e584:	9200      	str	r2, [sp, #0]
  40e586:	9a06      	ldr	r2, [sp, #24]
  40e588:	4601      	mov	r1, r0
  40e58a:	4628      	mov	r0, r5
  40e58c:	4d0e      	ldr	r5, [pc, #56]	; (40e5c8 <lv_draw_label+0x5fc>)
  40e58e:	47a8      	blx	r5
  40e590:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40e592:	8893      	ldrh	r3, [r2, #4]
  40e594:	8812      	ldrh	r2, [r2, #0]
  40e596:	1a9b      	subs	r3, r3, r2
  40e598:	b29b      	uxth	r3, r3
  40e59a:	3301      	adds	r3, #1
  40e59c:	b21b      	sxth	r3, r3
            pos.x += lv_area_get_width(coords) - line_width;
  40e59e:	1a1b      	subs	r3, r3, r0
  40e5a0:	f8bd 00cc 	ldrh.w	r0, [sp, #204]	; 0xcc
  40e5a4:	4403      	add	r3, r0
  40e5a6:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
  40e5aa:	e762      	b.n	40e472 <lv_draw_label+0x4a6>
  40e5ac:	0040d701 	.word	0x0040d701
  40e5b0:	0040de99 	.word	0x0040de99
  40e5b4:	204000b8 	.word	0x204000b8
  40e5b8:	00413bed 	.word	0x00413bed
  40e5bc:	00412559 	.word	0x00412559
  40e5c0:	00417e19 	.word	0x00417e19
  40e5c4:	0040edf1 	.word	0x0040edf1
  40e5c8:	00417ef9 	.word	0x00417ef9

0040e5cc <draw_line_hor>:
 **********************/

LV_ATTRIBUTE_FAST_MEM static void draw_line_hor(const lv_point_t * point1, const lv_point_t * point2,
                                                const lv_area_t * clip,
                                                const lv_draw_line_dsc_t * dsc)
{
  40e5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e5d0:	b08b      	sub	sp, #44	; 0x2c
  40e5d2:	4681      	mov	r9, r0
  40e5d4:	468a      	mov	sl, r1
  40e5d6:	9204      	str	r2, [sp, #16]
  40e5d8:	461c      	mov	r4, r3
    lv_opa_t opa = dsc->opa;
  40e5da:	f893 b008 	ldrb.w	fp, [r3, #8]

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40e5de:	4b76      	ldr	r3, [pc, #472]	; (40e7b8 <draw_line_hor+0x1ec>)
  40e5e0:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40e5e2:	4b76      	ldr	r3, [pc, #472]	; (40e7bc <draw_line_hor+0x1f0>)
  40e5e4:	4798      	blx	r3
  40e5e6:	4606      	mov	r6, r0

    const lv_area_t * disp_area = &vdb->area;

    int32_t w = dsc->width - 1;
  40e5e8:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
  40e5ec:	3d01      	subs	r5, #1
    int32_t w_half0 = w >> 1;
  40e5ee:	ea4f 0865 	mov.w	r8, r5, asr #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
  40e5f2:	f005 0501 	and.w	r5, r5, #1
  40e5f6:	4445      	add	r5, r8

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
  40e5f8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
  40e5fc:	b123      	cbz	r3, 40e608 <draw_line_hor+0x3c>
  40e5fe:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40e602:	b943      	cbnz	r3, 40e616 <draw_line_hor+0x4a>
  40e604:	2700      	movs	r7, #0
  40e606:	e000      	b.n	40e60a <draw_line_hor+0x3e>
  40e608:	2700      	movs	r7, #0

    bool simple_mode = true;
    if(lv_draw_mask_get_cnt()) simple_mode = false;
  40e60a:	4b6d      	ldr	r3, [pc, #436]	; (40e7c0 <draw_line_hor+0x1f4>)
  40e60c:	4798      	blx	r3
  40e60e:	b920      	cbnz	r0, 40e61a <draw_line_hor+0x4e>
    else if(dashed) simple_mode = false;
  40e610:	bb7f      	cbnz	r7, 40e672 <draw_line_hor+0xa6>
    bool simple_mode = true;
  40e612:	2201      	movs	r2, #1
  40e614:	e002      	b.n	40e61c <draw_line_hor+0x50>
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
  40e616:	2701      	movs	r7, #1
  40e618:	e7f7      	b.n	40e60a <draw_line_hor+0x3e>
    if(lv_draw_mask_get_cnt()) simple_mode = false;
  40e61a:	2200      	movs	r2, #0

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(point1->x, point2->x);
  40e61c:	f9ba 3000 	ldrsh.w	r3, [sl]
  40e620:	f9b9 1000 	ldrsh.w	r1, [r9]
  40e624:	4618      	mov	r0, r3
  40e626:	428b      	cmp	r3, r1
  40e628:	bfa8      	it	ge
  40e62a:	4608      	movge	r0, r1
  40e62c:	f8ad 0020 	strh.w	r0, [sp, #32]
    draw_area.x2 = LV_MATH_MAX(point1->x, point2->x)  - 1;
  40e630:	428b      	cmp	r3, r1
  40e632:	bfb8      	it	lt
  40e634:	460b      	movlt	r3, r1
  40e636:	b29b      	uxth	r3, r3
  40e638:	3b01      	subs	r3, #1
  40e63a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    draw_area.y1 = point1->y - w_half1;
  40e63e:	f8b9 3002 	ldrh.w	r3, [r9, #2]
  40e642:	1b5d      	subs	r5, r3, r5
  40e644:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
    draw_area.y2 = point1->y + w_half0;
  40e648:	4498      	add	r8, r3
  40e64a:	f8ad 8026 	strh.w	r8, [sp, #38]	; 0x26

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
  40e64e:	b192      	cbz	r2, 40e676 <draw_line_hor+0xaa>
        _lv_blend_fill(clip, &draw_area,
                       dsc->color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa,
                       dsc->blend_mode);
  40e650:	7a63      	ldrb	r3, [r4, #9]
  40e652:	f003 0303 	and.w	r3, r3, #3
        _lv_blend_fill(clip, &draw_area,
  40e656:	8822      	ldrh	r2, [r4, #0]
  40e658:	9302      	str	r3, [sp, #8]
  40e65a:	f8cd b004 	str.w	fp, [sp, #4]
  40e65e:	2301      	movs	r3, #1
  40e660:	9300      	str	r3, [sp, #0]
  40e662:	2300      	movs	r3, #0
  40e664:	a908      	add	r1, sp, #32
  40e666:	9804      	ldr	r0, [sp, #16]
  40e668:	4c56      	ldr	r4, [pc, #344]	; (40e7c4 <draw_line_hor+0x1f8>)
  40e66a:	47a0      	blx	r4
            fill_area.y1++;
            fill_area.y2++;
        }
        _lv_mem_buf_release(mask_buf);
    }
}
  40e66c:	b00b      	add	sp, #44	; 0x2c
  40e66e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(dashed) simple_mode = false;
  40e672:	2200      	movs	r2, #0
  40e674:	e7d2      	b.n	40e61c <draw_line_hor+0x50>
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
  40e676:	aa08      	add	r2, sp, #32
  40e678:	9904      	ldr	r1, [sp, #16]
  40e67a:	4610      	mov	r0, r2
  40e67c:	4b52      	ldr	r3, [pc, #328]	; (40e7c8 <draw_line_hor+0x1fc>)
  40e67e:	4798      	blx	r3
        if(!is_common) return;
  40e680:	2800      	cmp	r0, #0
  40e682:	d0f3      	beq.n	40e66c <draw_line_hor+0xa0>
        draw_area.x1 -= disp_area->x1;
  40e684:	f9bd e020 	ldrsh.w	lr, [sp, #32]
  40e688:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
  40e68c:	b28b      	uxth	r3, r1
  40e68e:	ebae 0503 	sub.w	r5, lr, r3
  40e692:	b2ad      	uxth	r5, r5
  40e694:	fa0f fc85 	sxth.w	ip, r5
  40e698:	f8ad c020 	strh.w	ip, [sp, #32]
        draw_area.y1 -= disp_area->y1;
  40e69c:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
  40e6a0:	f8b6 8012 	ldrh.w	r8, [r6, #18]
  40e6a4:	eba2 0008 	sub.w	r0, r2, r8
  40e6a8:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
        draw_area.x2 -= disp_area->x1;
  40e6ac:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
  40e6b0:	1ac3      	subs	r3, r0, r3
  40e6b2:	b29b      	uxth	r3, r3
  40e6b4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        draw_area.y2 -= disp_area->y1;
  40e6b8:	f8bd 9026 	ldrh.w	r9, [sp, #38]	; 0x26
  40e6bc:	eba9 0808 	sub.w	r8, r9, r8
  40e6c0:	f8ad 8026 	strh.w	r8, [sp, #38]	; 0x26
  40e6c4:	1b5d      	subs	r5, r3, r5
  40e6c6:	b2ad      	uxth	r5, r5
  40e6c8:	3501      	adds	r5, #1
  40e6ca:	b22d      	sxth	r5, r5
        fill_area.x1 = draw_area.x1 + disp_area->x1;
  40e6cc:	f8ad e018 	strh.w	lr, [sp, #24]
        fill_area.x2 = draw_area.x2 + disp_area->x1;
  40e6d0:	f8ad 001c 	strh.w	r0, [sp, #28]
        fill_area.y1 = draw_area.y1 + disp_area->y1;
  40e6d4:	f8ad 201a 	strh.w	r2, [sp, #26]
        fill_area.y2 = fill_area.y1;
  40e6d8:	f8ad 201e 	strh.w	r2, [sp, #30]
        if(dashed) {
  40e6dc:	b1a7      	cbz	r7, 40e708 <draw_line_hor+0x13c>
            dash_start = (vdb->area.x1 + draw_area.x1) % (dsc->dash_gap + dsc->dash_width);
  40e6de:	4461      	add	r1, ip
  40e6e0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
  40e6e4:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
  40e6e8:	4413      	add	r3, r2
  40e6ea:	fb91 fcf3 	sdiv	ip, r1, r3
  40e6ee:	fb03 111c 	mls	r1, r3, ip, r1
  40e6f2:	b20b      	sxth	r3, r1
  40e6f4:	9305      	str	r3, [sp, #20]
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
  40e6f6:	46ab      	mov	fp, r5
  40e6f8:	4628      	mov	r0, r5
  40e6fa:	4b34      	ldr	r3, [pc, #208]	; (40e7cc <draw_line_hor+0x200>)
  40e6fc:	4798      	blx	r3
  40e6fe:	4681      	mov	r9, r0
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  40e700:	f9bd 8022 	ldrsh.w	r8, [sp, #34]	; 0x22
  40e704:	46ba      	mov	sl, r7
  40e706:	e037      	b.n	40e778 <draw_line_hor+0x1ac>
        lv_style_int_t dash_start = 0;
  40e708:	2300      	movs	r3, #0
  40e70a:	9305      	str	r3, [sp, #20]
  40e70c:	e7f3      	b.n	40e6f6 <draw_line_hor+0x12a>
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
  40e70e:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
  40e712:	440b      	add	r3, r1
  40e714:	429a      	cmp	r2, r3
  40e716:	da13      	bge.n	40e740 <draw_line_hor+0x174>
                            mask_buf[i] = 0x00;
  40e718:	2300      	movs	r3, #0
  40e71a:	f809 3000 	strb.w	r3, [r9, r0]
  40e71e:	4613      	mov	r3, r2
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
  40e720:	3001      	adds	r0, #1
  40e722:	b200      	sxth	r0, r0
  40e724:	3301      	adds	r3, #1
  40e726:	b21a      	sxth	r2, r3
  40e728:	42a8      	cmp	r0, r5
  40e72a:	da0b      	bge.n	40e744 <draw_line_hor+0x178>
                        if(dash_cnt <= dsc->dash_width) {
  40e72c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40e730:	429a      	cmp	r2, r3
  40e732:	dcec      	bgt.n	40e70e <draw_line_hor+0x142>
                            int16_t diff = dsc->dash_width - dash_cnt;
  40e734:	b299      	uxth	r1, r3
  40e736:	1a8a      	subs	r2, r1, r2
                            i += diff;
  40e738:	fa10 f082 	uxtah	r0, r0, r2
  40e73c:	b200      	sxth	r0, r0
  40e73e:	e7ef      	b.n	40e720 <draw_line_hor+0x154>
                            dash_cnt = 0;
  40e740:	2300      	movs	r3, #0
  40e742:	e7ed      	b.n	40e720 <draw_line_hor+0x154>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
  40e744:	2002      	movs	r0, #2
                           dsc->blend_mode);
  40e746:	7a63      	ldrb	r3, [r4, #9]
  40e748:	f003 0303 	and.w	r3, r3, #3
            _lv_blend_fill(clip, &fill_area,
  40e74c:	9302      	str	r3, [sp, #8]
  40e74e:	7a23      	ldrb	r3, [r4, #8]
  40e750:	9301      	str	r3, [sp, #4]
  40e752:	9000      	str	r0, [sp, #0]
  40e754:	464b      	mov	r3, r9
  40e756:	8822      	ldrh	r2, [r4, #0]
  40e758:	a906      	add	r1, sp, #24
  40e75a:	9804      	ldr	r0, [sp, #16]
  40e75c:	4f19      	ldr	r7, [pc, #100]	; (40e7c4 <draw_line_hor+0x1f8>)
  40e75e:	47b8      	blx	r7
            fill_area.y1++;
  40e760:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
  40e764:	3301      	adds	r3, #1
  40e766:	f8ad 301a 	strh.w	r3, [sp, #26]
            fill_area.y2++;
  40e76a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
  40e76e:	3301      	adds	r3, #1
  40e770:	f8ad 301e 	strh.w	r3, [sp, #30]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  40e774:	f108 0801 	add.w	r8, r8, #1
  40e778:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
  40e77c:	4598      	cmp	r8, r3
  40e77e:	dc17      	bgt.n	40e7b0 <draw_line_hor+0x1e4>
            _lv_memset_ff(mask_buf, draw_area_w);
  40e780:	4659      	mov	r1, fp
  40e782:	4648      	mov	r0, r9
  40e784:	4b12      	ldr	r3, [pc, #72]	; (40e7d0 <draw_line_hor+0x204>)
  40e786:	4798      	blx	r3
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  40e788:	8a31      	ldrh	r1, [r6, #16]
  40e78a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
  40e78e:	4419      	add	r1, r3
  40e790:	8a72      	ldrh	r2, [r6, #18]
  40e792:	4442      	add	r2, r8
  40e794:	462b      	mov	r3, r5
  40e796:	b212      	sxth	r2, r2
  40e798:	b209      	sxth	r1, r1
  40e79a:	4648      	mov	r0, r9
  40e79c:	4f0d      	ldr	r7, [pc, #52]	; (40e7d4 <draw_line_hor+0x208>)
  40e79e:	47b8      	blx	r7
            if(dashed) {
  40e7a0:	f1ba 0f00 	cmp.w	sl, #0
  40e7a4:	d0cf      	beq.n	40e746 <draw_line_hor+0x17a>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
  40e7a6:	2800      	cmp	r0, #0
  40e7a8:	d0cd      	beq.n	40e746 <draw_line_hor+0x17a>
  40e7aa:	9a05      	ldr	r2, [sp, #20]
  40e7ac:	2000      	movs	r0, #0
  40e7ae:	e7bb      	b.n	40e728 <draw_line_hor+0x15c>
        _lv_mem_buf_release(mask_buf);
  40e7b0:	4648      	mov	r0, r9
  40e7b2:	4b09      	ldr	r3, [pc, #36]	; (40e7d8 <draw_line_hor+0x20c>)
  40e7b4:	4798      	blx	r3
  40e7b6:	e759      	b.n	40e66c <draw_line_hor+0xa0>
  40e7b8:	00409851 	.word	0x00409851
  40e7bc:	00414ea5 	.word	0x00414ea5
  40e7c0:	0040fd5d 	.word	0x0040fd5d
  40e7c4:	0040c921 	.word	0x0040c921
  40e7c8:	00415663 	.word	0x00415663
  40e7cc:	00416a81 	.word	0x00416a81
  40e7d0:	00416c65 	.word	0x00416c65
  40e7d4:	0040fc95 	.word	0x0040fc95
  40e7d8:	00416831 	.word	0x00416831

0040e7dc <draw_line_ver>:

LV_ATTRIBUTE_FAST_MEM static void draw_line_ver(const lv_point_t * point1, const lv_point_t * point2,
                                                const lv_area_t * clip,
                                                const lv_draw_line_dsc_t * dsc)
{
  40e7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e7e0:	b08b      	sub	sp, #44	; 0x2c
  40e7e2:	4680      	mov	r8, r0
  40e7e4:	468a      	mov	sl, r1
  40e7e6:	9204      	str	r2, [sp, #16]
  40e7e8:	461d      	mov	r5, r3
    lv_opa_t opa = dsc->opa;
  40e7ea:	f893 b008 	ldrb.w	fp, [r3, #8]

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40e7ee:	4b71      	ldr	r3, [pc, #452]	; (40e9b4 <draw_line_ver+0x1d8>)
  40e7f0:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40e7f2:	4b71      	ldr	r3, [pc, #452]	; (40e9b8 <draw_line_ver+0x1dc>)
  40e7f4:	4798      	blx	r3
  40e7f6:	4607      	mov	r7, r0

    const lv_area_t * disp_area = &vdb->area;

    int32_t w = dsc->width - 1;
  40e7f8:	f9b5 4002 	ldrsh.w	r4, [r5, #2]
  40e7fc:	3c01      	subs	r4, #1
    int32_t w_half0 = w >> 1;
  40e7fe:	ea4f 0964 	mov.w	r9, r4, asr #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
  40e802:	f004 0401 	and.w	r4, r4, #1
  40e806:	444c      	add	r4, r9

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
  40e808:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40e80c:	b123      	cbz	r3, 40e818 <draw_line_ver+0x3c>
  40e80e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  40e812:	b943      	cbnz	r3, 40e826 <draw_line_ver+0x4a>
  40e814:	2600      	movs	r6, #0
  40e816:	e000      	b.n	40e81a <draw_line_ver+0x3e>
  40e818:	2600      	movs	r6, #0

    bool simple_mode = true;
    if(lv_draw_mask_get_cnt()) simple_mode = false;
  40e81a:	4b68      	ldr	r3, [pc, #416]	; (40e9bc <draw_line_ver+0x1e0>)
  40e81c:	4798      	blx	r3
  40e81e:	b920      	cbnz	r0, 40e82a <draw_line_ver+0x4e>
    else if(dashed) simple_mode = false;
  40e820:	bb7e      	cbnz	r6, 40e882 <draw_line_ver+0xa6>
    bool simple_mode = true;
  40e822:	2201      	movs	r2, #1
  40e824:	e002      	b.n	40e82c <draw_line_ver+0x50>
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
  40e826:	2601      	movs	r6, #1
  40e828:	e7f7      	b.n	40e81a <draw_line_ver+0x3e>
    if(lv_draw_mask_get_cnt()) simple_mode = false;
  40e82a:	2200      	movs	r2, #0

    lv_area_t draw_area;
    draw_area.x1 = point1->x - w_half1;
  40e82c:	f8b8 3000 	ldrh.w	r3, [r8]
  40e830:	1b1c      	subs	r4, r3, r4
  40e832:	f8ad 4020 	strh.w	r4, [sp, #32]
    draw_area.x2 = point1->x + w_half0;
  40e836:	4499      	add	r9, r3
  40e838:	f8ad 9024 	strh.w	r9, [sp, #36]	; 0x24
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
  40e83c:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
  40e840:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
  40e844:	4618      	mov	r0, r3
  40e846:	428b      	cmp	r3, r1
  40e848:	bfa8      	it	ge
  40e84a:	4608      	movge	r0, r1
  40e84c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
    draw_area.y2 = LV_MATH_MAX(point1->y, point2->y) - 1;
  40e850:	428b      	cmp	r3, r1
  40e852:	bfb8      	it	lt
  40e854:	460b      	movlt	r3, r1
  40e856:	b29b      	uxth	r3, r3
  40e858:	3b01      	subs	r3, #1
  40e85a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
  40e85e:	b192      	cbz	r2, 40e886 <draw_line_ver+0xaa>
        _lv_blend_fill(clip, &draw_area,
                       dsc->color,  NULL, LV_DRAW_MASK_RES_FULL_COVER, opa,
                       dsc->blend_mode);
  40e860:	7a6b      	ldrb	r3, [r5, #9]
  40e862:	f003 0303 	and.w	r3, r3, #3
        _lv_blend_fill(clip, &draw_area,
  40e866:	882a      	ldrh	r2, [r5, #0]
  40e868:	9302      	str	r3, [sp, #8]
  40e86a:	f8cd b004 	str.w	fp, [sp, #4]
  40e86e:	2301      	movs	r3, #1
  40e870:	9300      	str	r3, [sp, #0]
  40e872:	2300      	movs	r3, #0
  40e874:	a908      	add	r1, sp, #32
  40e876:	9804      	ldr	r0, [sp, #16]
  40e878:	4c51      	ldr	r4, [pc, #324]	; (40e9c0 <draw_line_ver+0x1e4>)
  40e87a:	47a0      	blx	r4
            fill_area.y1++;
            fill_area.y2++;
        }
        _lv_mem_buf_release(mask_buf);
    }
}
  40e87c:	b00b      	add	sp, #44	; 0x2c
  40e87e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(dashed) simple_mode = false;
  40e882:	2200      	movs	r2, #0
  40e884:	e7d2      	b.n	40e82c <draw_line_ver+0x50>
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
  40e886:	aa08      	add	r2, sp, #32
  40e888:	9904      	ldr	r1, [sp, #16]
  40e88a:	4610      	mov	r0, r2
  40e88c:	4b4d      	ldr	r3, [pc, #308]	; (40e9c4 <draw_line_ver+0x1e8>)
  40e88e:	4798      	blx	r3
        if(!is_common) return;
  40e890:	2800      	cmp	r0, #0
  40e892:	d0f3      	beq.n	40e87c <draw_line_ver+0xa0>
        draw_area.x1 -= vdb->area.x1;
  40e894:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
  40e898:	8a3b      	ldrh	r3, [r7, #16]
  40e89a:	eba0 0b03 	sub.w	fp, r0, r3
  40e89e:	fa1f fb8b 	uxth.w	fp, fp
  40e8a2:	f8ad b020 	strh.w	fp, [sp, #32]
        draw_area.y1 -= vdb->area.y1;
  40e8a6:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
  40e8aa:	f8b7 e012 	ldrh.w	lr, [r7, #18]
  40e8ae:	eba2 010e 	sub.w	r1, r2, lr
  40e8b2:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
        draw_area.x2 -= vdb->area.x1;
  40e8b6:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
  40e8ba:	1acb      	subs	r3, r1, r3
  40e8bc:	b29b      	uxth	r3, r3
  40e8be:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        draw_area.y2 -= vdb->area.y1;
  40e8c2:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
  40e8c6:	eba4 040e 	sub.w	r4, r4, lr
  40e8ca:	f8ad 4026 	strh.w	r4, [sp, #38]	; 0x26
  40e8ce:	eba3 0b0b 	sub.w	fp, r3, fp
  40e8d2:	fa1f fb8b 	uxth.w	fp, fp
  40e8d6:	f10b 0b01 	add.w	fp, fp, #1
  40e8da:	fa0f fb8b 	sxth.w	fp, fp
        fill_area.x1 = draw_area.x1 + disp_area->x1;
  40e8de:	f8ad 0018 	strh.w	r0, [sp, #24]
        fill_area.x2 = draw_area.x2 + disp_area->x1;
  40e8e2:	f8ad 101c 	strh.w	r1, [sp, #28]
        fill_area.y1 = draw_area.y1 + disp_area->y1;
  40e8e6:	f8ad 201a 	strh.w	r2, [sp, #26]
        fill_area.y2 = fill_area.y1;
  40e8ea:	f8ad 201e 	strh.w	r2, [sp, #30]
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
  40e8ee:	f8cd b014 	str.w	fp, [sp, #20]
  40e8f2:	4658      	mov	r0, fp
  40e8f4:	4b34      	ldr	r3, [pc, #208]	; (40e9c8 <draw_line_ver+0x1ec>)
  40e8f6:	4798      	blx	r3
  40e8f8:	4680      	mov	r8, r0
        if(dashed) {
  40e8fa:	b19e      	cbz	r6, 40e924 <draw_line_ver+0x148>
            dash_start = (vdb->area.y1 + draw_area.y1) % (dsc->dash_gap + dsc->dash_width);
  40e8fc:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
  40e900:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
  40e904:	441a      	add	r2, r3
  40e906:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40e90a:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
  40e90e:	444b      	add	r3, r9
  40e910:	fb92 f9f3 	sdiv	r9, r2, r3
  40e914:	fb03 2919 	mls	r9, r3, r9, r2
  40e918:	fa0f f989 	sxth.w	r9, r9
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  40e91c:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
  40e920:	46b2      	mov	sl, r6
  40e922:	e01c      	b.n	40e95e <draw_line_ver+0x182>
        lv_style_int_t dash_start = 0;
  40e924:	f04f 0900 	mov.w	r9, #0
  40e928:	e7f8      	b.n	40e91c <draw_line_ver+0x140>
                dash_cnt ++;
  40e92a:	f109 0901 	add.w	r9, r9, #1
  40e92e:	fa0f f989 	sxth.w	r9, r9
            _lv_blend_fill(clip, &fill_area,
  40e932:	2300      	movs	r3, #0
  40e934:	9302      	str	r3, [sp, #8]
  40e936:	7a2b      	ldrb	r3, [r5, #8]
  40e938:	9301      	str	r3, [sp, #4]
  40e93a:	9000      	str	r0, [sp, #0]
  40e93c:	4643      	mov	r3, r8
  40e93e:	882a      	ldrh	r2, [r5, #0]
  40e940:	a906      	add	r1, sp, #24
  40e942:	9804      	ldr	r0, [sp, #16]
  40e944:	4e1e      	ldr	r6, [pc, #120]	; (40e9c0 <draw_line_ver+0x1e4>)
  40e946:	47b0      	blx	r6
            fill_area.y1++;
  40e948:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
  40e94c:	3301      	adds	r3, #1
  40e94e:	f8ad 301a 	strh.w	r3, [sp, #26]
            fill_area.y2++;
  40e952:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
  40e956:	3301      	adds	r3, #1
  40e958:	f8ad 301e 	strh.w	r3, [sp, #30]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  40e95c:	3401      	adds	r4, #1
  40e95e:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
  40e962:	429c      	cmp	r4, r3
  40e964:	dc21      	bgt.n	40e9aa <draw_line_ver+0x1ce>
            _lv_memset_ff(mask_buf, draw_area_w);
  40e966:	9905      	ldr	r1, [sp, #20]
  40e968:	4640      	mov	r0, r8
  40e96a:	4b18      	ldr	r3, [pc, #96]	; (40e9cc <draw_line_ver+0x1f0>)
  40e96c:	4798      	blx	r3
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  40e96e:	8a39      	ldrh	r1, [r7, #16]
  40e970:	f8bd 3020 	ldrh.w	r3, [sp, #32]
  40e974:	4419      	add	r1, r3
  40e976:	8a7a      	ldrh	r2, [r7, #18]
  40e978:	4422      	add	r2, r4
  40e97a:	465b      	mov	r3, fp
  40e97c:	b212      	sxth	r2, r2
  40e97e:	b209      	sxth	r1, r1
  40e980:	4640      	mov	r0, r8
  40e982:	4e13      	ldr	r6, [pc, #76]	; (40e9d0 <draw_line_ver+0x1f4>)
  40e984:	47b0      	blx	r6
            if(dashed) {
  40e986:	f1ba 0f00 	cmp.w	sl, #0
  40e98a:	d0d2      	beq.n	40e932 <draw_line_ver+0x156>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
  40e98c:	2800      	cmp	r0, #0
  40e98e:	d0cc      	beq.n	40e92a <draw_line_ver+0x14e>
                    if(dash_cnt > dsc->dash_width) {
  40e990:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
  40e994:	4591      	cmp	r9, r2
  40e996:	dd00      	ble.n	40e99a <draw_line_ver+0x1be>
                        mask_res = LV_DRAW_MASK_RES_TRANSP;
  40e998:	2000      	movs	r0, #0
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
  40e99a:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40e99e:	4413      	add	r3, r2
  40e9a0:	4599      	cmp	r9, r3
  40e9a2:	dbc2      	blt.n	40e92a <draw_line_ver+0x14e>
                        dash_cnt = 0;
  40e9a4:	f04f 0900 	mov.w	r9, #0
  40e9a8:	e7bf      	b.n	40e92a <draw_line_ver+0x14e>
        _lv_mem_buf_release(mask_buf);
  40e9aa:	4640      	mov	r0, r8
  40e9ac:	4b09      	ldr	r3, [pc, #36]	; (40e9d4 <draw_line_ver+0x1f8>)
  40e9ae:	4798      	blx	r3
  40e9b0:	e764      	b.n	40e87c <draw_line_ver+0xa0>
  40e9b2:	bf00      	nop
  40e9b4:	00409851 	.word	0x00409851
  40e9b8:	00414ea5 	.word	0x00414ea5
  40e9bc:	0040fd5d 	.word	0x0040fd5d
  40e9c0:	0040c921 	.word	0x0040c921
  40e9c4:	00415663 	.word	0x00415663
  40e9c8:	00416a81 	.word	0x00416a81
  40e9cc:	00416c65 	.word	0x00416c65
  40e9d0:	0040fc95 	.word	0x0040fc95
  40e9d4:	00416831 	.word	0x00416831

0040e9d8 <draw_line_skew>:

LV_ATTRIBUTE_FAST_MEM static void draw_line_skew(const lv_point_t * point1, const lv_point_t * point2,
                                                 const lv_area_t * clip,
                                                 const lv_draw_line_dsc_t * dsc)
{
  40e9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e9dc:	b0bf      	sub	sp, #252	; 0xfc
  40e9de:	9206      	str	r2, [sp, #24]
  40e9e0:	9305      	str	r3, [sp, #20]
    /*Keep the great y in p1*/
    lv_point_t p1;
    lv_point_t p2;
    if(point1->y < point2->y) {
  40e9e2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  40e9e6:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
  40e9ea:	4293      	cmp	r3, r2
  40e9ec:	f280 80e7 	bge.w	40ebbe <draw_line_skew+0x1e6>
        p1.y = point1->y;
  40e9f0:	f8ad 30f6 	strh.w	r3, [sp, #246]	; 0xf6
        p2.y = point2->y;
  40e9f4:	f8ad 20f2 	strh.w	r2, [sp, #242]	; 0xf2
        p1.x = point1->x;
  40e9f8:	f9b0 3000 	ldrsh.w	r3, [r0]
  40e9fc:	f8ad 30f4 	strh.w	r3, [sp, #244]	; 0xf4
        p2.x = point2->x;
  40ea00:	f9b1 3000 	ldrsh.w	r3, [r1]
  40ea04:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
        p2.y = point1->y;
        p1.x = point2->x;
        p2.x = point1->x;
    }

    int32_t xdiff = p2.x - p1.x;
  40ea08:	f9bd 80f0 	ldrsh.w	r8, [sp, #240]	; 0xf0
  40ea0c:	f9bd 70f4 	ldrsh.w	r7, [sp, #244]	; 0xf4
  40ea10:	eba8 0907 	sub.w	r9, r8, r7
    int32_t ydiff = p2.y - p1.y;
  40ea14:	f9bd 50f2 	ldrsh.w	r5, [sp, #242]	; 0xf2
  40ea18:	f9bd 60f6 	ldrsh.w	r6, [sp, #246]	; 0xf6
  40ea1c:	1bab      	subs	r3, r5, r6
  40ea1e:	9307      	str	r3, [sp, #28]
    bool flat = LV_MATH_ABS(xdiff) > LV_MATH_ABS(ydiff) ? true : false;
  40ea20:	ea89 7be9 	eor.w	fp, r9, r9, asr #31
  40ea24:	ebab 7be9 	sub.w	fp, fp, r9, asr #31
  40ea28:	2b00      	cmp	r3, #0
  40ea2a:	bfb8      	it	lt
  40ea2c:	425b      	neglt	r3, r3
  40ea2e:	469a      	mov	sl, r3
        143, 145, 147, 149, 151, 153, 155, 158,
        160, 162, 165, 167, 170, 173, 175, 178,
        181,
    };

    int32_t w = dsc->width;
  40ea30:	9b05      	ldr	r3, [sp, #20]
  40ea32:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
    int32_t wcorr_i = 0;
    if(flat) wcorr_i = (LV_MATH_ABS(ydiff) << 5) / LV_MATH_ABS(xdiff);
  40ea36:	45d3      	cmp	fp, sl
  40ea38:	f340 80ce 	ble.w	40ebd8 <draw_line_skew+0x200>
  40ea3c:	ea4f 134a 	mov.w	r3, sl, lsl #5
  40ea40:	fb93 f3fb 	sdiv	r3, r3, fp
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);

    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
  40ea44:	49a1      	ldr	r1, [pc, #644]	; (40eccc <draw_line_skew+0x2f4>)
  40ea46:	5ccc      	ldrb	r4, [r1, r3]
  40ea48:	fb04 f402 	mul.w	r4, r4, r2
  40ea4c:	343f      	adds	r4, #63	; 0x3f
  40ea4e:	11e3      	asrs	r3, r4, #7
    int32_t w_half0 = w >> 1;
  40ea50:	1224      	asrs	r4, r4, #8
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
  40ea52:	f003 0201 	and.w	r2, r3, #1
  40ea56:	18a2      	adds	r2, r4, r2
  40ea58:	9204      	str	r2, [sp, #16]

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(p1.x, p2.x) - w;
  40ea5a:	4642      	mov	r2, r8
  40ea5c:	45b8      	cmp	r8, r7
  40ea5e:	bfa8      	it	ge
  40ea60:	463a      	movge	r2, r7
  40ea62:	b292      	uxth	r2, r2
  40ea64:	b29b      	uxth	r3, r3
  40ea66:	1ad2      	subs	r2, r2, r3
  40ea68:	f8ad 20e8 	strh.w	r2, [sp, #232]	; 0xe8
    draw_area.x2 = LV_MATH_MAX(p1.x, p2.x) + w;
  40ea6c:	4642      	mov	r2, r8
  40ea6e:	45b8      	cmp	r8, r7
  40ea70:	bfb8      	it	lt
  40ea72:	463a      	movlt	r2, r7
  40ea74:	fa13 f282 	uxtah	r2, r3, r2
  40ea78:	f8ad 20ec 	strh.w	r2, [sp, #236]	; 0xec
    draw_area.y1 = LV_MATH_MIN(p1.y, p2.y) - w;
  40ea7c:	462a      	mov	r2, r5
  40ea7e:	42b5      	cmp	r5, r6
  40ea80:	bfa8      	it	ge
  40ea82:	4632      	movge	r2, r6
  40ea84:	b292      	uxth	r2, r2
  40ea86:	1ad2      	subs	r2, r2, r3
  40ea88:	f8ad 20ea 	strh.w	r2, [sp, #234]	; 0xea
    draw_area.y2 = LV_MATH_MAX(p1.y, p2.y) + w;
  40ea8c:	462a      	mov	r2, r5
  40ea8e:	42b5      	cmp	r5, r6
  40ea90:	bfb8      	it	lt
  40ea92:	4632      	movlt	r2, r6
  40ea94:	fa13 f382 	uxtah	r3, r3, r2
  40ea98:	f8ad 30ee 	strh.w	r3, [sp, #238]	; 0xee

    /* Get the union of `coords` and `clip`*/
    /* `clip` is already truncated to the `vdb` size
     * in 'lv_refr_area' function */
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
  40ea9c:	9a06      	ldr	r2, [sp, #24]
  40ea9e:	a93a      	add	r1, sp, #232	; 0xe8
  40eaa0:	4608      	mov	r0, r1
  40eaa2:	4b8b      	ldr	r3, [pc, #556]	; (40ecd0 <draw_line_skew+0x2f8>)
  40eaa4:	4798      	blx	r3
    if(is_common == false) return;
  40eaa6:	2800      	cmp	r0, #0
  40eaa8:	f000 8187 	beq.w	40edba <draw_line_skew+0x3e2>
    lv_draw_mask_line_param_t mask_left_param;
    lv_draw_mask_line_param_t mask_right_param;
    lv_draw_mask_line_param_t mask_top_param;
    lv_draw_mask_line_param_t mask_bottom_param;

    if(flat) {
  40eaac:	45d3      	cmp	fp, sl
  40eaae:	f340 80b6 	ble.w	40ec1e <draw_line_skew+0x246>
        if(xdiff > 0) {
  40eab2:	f1b9 0f00 	cmp.w	r9, #0
  40eab6:	f340 8094 	ble.w	40ebe2 <draw_line_skew+0x20a>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
  40eaba:	b2b6      	uxth	r6, r6
  40eabc:	b2a4      	uxth	r4, r4
  40eabe:	1b32      	subs	r2, r6, r4
  40eac0:	b2ad      	uxth	r5, r5
  40eac2:	1b2c      	subs	r4, r5, r4
  40eac4:	2300      	movs	r3, #0
  40eac6:	9301      	str	r3, [sp, #4]
  40eac8:	b224      	sxth	r4, r4
  40eaca:	9400      	str	r4, [sp, #0]
  40eacc:	4643      	mov	r3, r8
  40eace:	b212      	sxth	r2, r2
  40ead0:	4639      	mov	r1, r7
  40ead2:	a82f      	add	r0, sp, #188	; 0xbc
  40ead4:	4c7f      	ldr	r4, [pc, #508]	; (40ecd4 <draw_line_skew+0x2fc>)
  40ead6:	47a0      	blx	r4
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
  40ead8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  40eadc:	441e      	add	r6, r3
  40eade:	441d      	add	r5, r3
  40eae0:	2301      	movs	r3, #1
  40eae2:	9301      	str	r3, [sp, #4]
  40eae4:	b22d      	sxth	r5, r5
  40eae6:	9500      	str	r5, [sp, #0]
  40eae8:	4643      	mov	r3, r8
  40eaea:	b232      	sxth	r2, r6
  40eaec:	4639      	mov	r1, r7
  40eaee:	a824      	add	r0, sp, #144	; 0x90
  40eaf0:	47a0      	blx	r4
                                      LV_DRAW_MASK_LINE_SIDE_RIGHT);
    }

    /*Use the normal vector for the endings*/

    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
  40eaf2:	2100      	movs	r1, #0
  40eaf4:	a82f      	add	r0, sp, #188	; 0xbc
  40eaf6:	4c78      	ldr	r4, [pc, #480]	; (40ecd8 <draw_line_skew+0x300>)
  40eaf8:	47a0      	blx	r4
  40eafa:	9008      	str	r0, [sp, #32]
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
  40eafc:	2100      	movs	r1, #0
  40eafe:	a824      	add	r0, sp, #144	; 0x90
  40eb00:	47a0      	blx	r4
  40eb02:	9009      	str	r0, [sp, #36]	; 0x24
    int16_t mask_top_id = LV_MASK_ID_INV;
    int16_t mask_bottom_id = LV_MASK_ID_INV;

    if(!dsc->raw_end) {
  40eb04:	9b05      	ldr	r3, [sp, #20]
  40eb06:	7a5b      	ldrb	r3, [r3, #9]
  40eb08:	f013 0f10 	tst.w	r3, #16
  40eb0c:	f000 80a6 	beq.w	40ec5c <draw_line_skew+0x284>
    int16_t mask_bottom_id = LV_MASK_ID_INV;
  40eb10:	f04f 33ff 	mov.w	r3, #4294967295
  40eb14:	930b      	str	r3, [sp, #44]	; 0x2c
    int16_t mask_top_id = LV_MASK_ID_INV;
  40eb16:	930a      	str	r3, [sp, #40]	; 0x28
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
    }

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40eb18:	4b70      	ldr	r3, [pc, #448]	; (40ecdc <draw_line_skew+0x304>)
  40eb1a:	4798      	blx	r3
  40eb1c:	4605      	mov	r5, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40eb1e:	4b70      	ldr	r3, [pc, #448]	; (40ece0 <draw_line_skew+0x308>)
  40eb20:	4798      	blx	r3
  40eb22:	4682      	mov	sl, r0

    const lv_area_t * disp_area = &vdb->area;

    /*Store the coordinates of the `draw_a` relative to the VDB */
    draw_area.x1 -= disp_area->x1;
  40eb24:	8a00      	ldrh	r0, [r0, #16]
  40eb26:	f8bd 40e8 	ldrh.w	r4, [sp, #232]	; 0xe8
  40eb2a:	1a24      	subs	r4, r4, r0
  40eb2c:	b2a4      	uxth	r4, r4
  40eb2e:	f8ad 40e8 	strh.w	r4, [sp, #232]	; 0xe8
    draw_area.y1 -= disp_area->y1;
  40eb32:	f8ba 1012 	ldrh.w	r1, [sl, #18]
  40eb36:	f8bd 20ea 	ldrh.w	r2, [sp, #234]	; 0xea
  40eb3a:	1a52      	subs	r2, r2, r1
  40eb3c:	f8ad 20ea 	strh.w	r2, [sp, #234]	; 0xea
    draw_area.x2 -= disp_area->x1;
  40eb40:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
  40eb44:	1a1b      	subs	r3, r3, r0
  40eb46:	b29b      	uxth	r3, r3
  40eb48:	f8ad 30ec 	strh.w	r3, [sp, #236]	; 0xec
    draw_area.y2 -= disp_area->y1;
  40eb4c:	f8bd 20ee 	ldrh.w	r2, [sp, #238]	; 0xee
  40eb50:	1a52      	subs	r2, r2, r1
  40eb52:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
  40eb56:	1b1c      	subs	r4, r3, r4
  40eb58:	b2a4      	uxth	r4, r4
  40eb5a:	3401      	adds	r4, #1
  40eb5c:	b224      	sxth	r4, r4
     * So deal with it only with steep lines. */
    int32_t draw_area_w = lv_area_get_width(&draw_area);

    /*Draw the background line by line*/
    int32_t h;
    uint32_t hor_res = (uint32_t)lv_disp_get_hor_res(disp);
  40eb5e:	4628      	mov	r0, r5
  40eb60:	4b60      	ldr	r3, [pc, #384]	; (40ece4 <draw_line_skew+0x30c>)
  40eb62:	4798      	blx	r3
  40eb64:	4683      	mov	fp, r0
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), hor_res);
  40eb66:	a83a      	add	r0, sp, #232	; 0xe8
  40eb68:	4b5f      	ldr	r3, [pc, #380]	; (40ece8 <draw_line_skew+0x310>)
  40eb6a:	4798      	blx	r3
  40eb6c:	4583      	cmp	fp, r0
  40eb6e:	f200 80a3 	bhi.w	40ecb8 <draw_line_skew+0x2e0>
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
  40eb72:	4658      	mov	r0, fp
  40eb74:	4b5d      	ldr	r3, [pc, #372]	; (40ecec <draw_line_skew+0x314>)
  40eb76:	4798      	blx	r3
  40eb78:	4681      	mov	r9, r0

    lv_area_t fill_area;
    fill_area.x1 = draw_area.x1 + disp_area->x1;
  40eb7a:	f8bd 20e8 	ldrh.w	r2, [sp, #232]	; 0xe8
  40eb7e:	f8ba 3010 	ldrh.w	r3, [sl, #16]
  40eb82:	441a      	add	r2, r3
  40eb84:	b212      	sxth	r2, r2
  40eb86:	9204      	str	r2, [sp, #16]
  40eb88:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    fill_area.x2 = draw_area.x2 + disp_area->x1;
  40eb8c:	f8bd 20ec 	ldrh.w	r2, [sp, #236]	; 0xec
  40eb90:	4413      	add	r3, r2
  40eb92:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    fill_area.y1 = draw_area.y1 + disp_area->y1;
  40eb96:	f8bd 30ea 	ldrh.w	r3, [sp, #234]	; 0xea
  40eb9a:	f8ba 2012 	ldrh.w	r2, [sl, #18]
  40eb9e:	4413      	add	r3, r2
  40eba0:	b21b      	sxth	r3, r3
  40eba2:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    fill_area.y2 = fill_area.y1;
  40eba6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36

    int32_t x = vdb->area.x1 + draw_area.x1;

    uint32_t mask_p = 0;

    _lv_memset_ff(mask_buf, mask_buf_size);
  40ebaa:	4659      	mov	r1, fp
  40ebac:	4b50      	ldr	r3, [pc, #320]	; (40ecf0 <draw_line_skew+0x318>)
  40ebae:	4798      	blx	r3
    /*Fill the first row with 'color'*/
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
  40ebb0:	f9bd 50ea 	ldrsh.w	r5, [sp, #234]	; 0xea
  40ebb4:	f9ba 3012 	ldrsh.w	r3, [sl, #18]
  40ebb8:	441d      	add	r5, r3
    uint32_t mask_p = 0;
  40ebba:	2600      	movs	r6, #0
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
  40ebbc:	e0bd      	b.n	40ed3a <draw_line_skew+0x362>
        p1.y = point2->y;
  40ebbe:	f8ad 20f6 	strh.w	r2, [sp, #246]	; 0xf6
        p2.y = point1->y;
  40ebc2:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
        p1.x = point2->x;
  40ebc6:	f9b1 3000 	ldrsh.w	r3, [r1]
  40ebca:	f8ad 30f4 	strh.w	r3, [sp, #244]	; 0xf4
        p2.x = point1->x;
  40ebce:	f9b0 3000 	ldrsh.w	r3, [r0]
  40ebd2:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
  40ebd6:	e717      	b.n	40ea08 <draw_line_skew+0x30>
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);
  40ebd8:	ea4f 134b 	mov.w	r3, fp, lsl #5
  40ebdc:	fb93 f3fa 	sdiv	r3, r3, sl
  40ebe0:	e730      	b.n	40ea44 <draw_line_skew+0x6c>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
  40ebe2:	b2b6      	uxth	r6, r6
  40ebe4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  40ebe8:	18f2      	adds	r2, r6, r3
  40ebea:	b2ad      	uxth	r5, r5
  40ebec:	442b      	add	r3, r5
  40ebee:	2100      	movs	r1, #0
  40ebf0:	9101      	str	r1, [sp, #4]
  40ebf2:	b21b      	sxth	r3, r3
  40ebf4:	9300      	str	r3, [sp, #0]
  40ebf6:	4643      	mov	r3, r8
  40ebf8:	b212      	sxth	r2, r2
  40ebfa:	4639      	mov	r1, r7
  40ebfc:	a82f      	add	r0, sp, #188	; 0xbc
  40ebfe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 40ecd4 <draw_line_skew+0x2fc>
  40ec02:	47d0      	blx	sl
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
  40ec04:	b2a4      	uxth	r4, r4
  40ec06:	1b36      	subs	r6, r6, r4
  40ec08:	1b2d      	subs	r5, r5, r4
  40ec0a:	2301      	movs	r3, #1
  40ec0c:	9301      	str	r3, [sp, #4]
  40ec0e:	b22d      	sxth	r5, r5
  40ec10:	9500      	str	r5, [sp, #0]
  40ec12:	4643      	mov	r3, r8
  40ec14:	b232      	sxth	r2, r6
  40ec16:	4639      	mov	r1, r7
  40ec18:	a824      	add	r0, sp, #144	; 0x90
  40ec1a:	47d0      	blx	sl
  40ec1c:	e769      	b.n	40eaf2 <draw_line_skew+0x11a>
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
  40ec1e:	b2bf      	uxth	r7, r7
  40ec20:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  40ec24:	18f9      	adds	r1, r7, r3
  40ec26:	fa1f f888 	uxth.w	r8, r8
  40ec2a:	4443      	add	r3, r8
  40ec2c:	2200      	movs	r2, #0
  40ec2e:	9201      	str	r2, [sp, #4]
  40ec30:	9500      	str	r5, [sp, #0]
  40ec32:	b21b      	sxth	r3, r3
  40ec34:	4632      	mov	r2, r6
  40ec36:	b209      	sxth	r1, r1
  40ec38:	a82f      	add	r0, sp, #188	; 0xbc
  40ec3a:	f8df a098 	ldr.w	sl, [pc, #152]	; 40ecd4 <draw_line_skew+0x2fc>
  40ec3e:	47d0      	blx	sl
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
  40ec40:	b2a4      	uxth	r4, r4
  40ec42:	1b3f      	subs	r7, r7, r4
  40ec44:	eba8 0804 	sub.w	r8, r8, r4
  40ec48:	2301      	movs	r3, #1
  40ec4a:	9301      	str	r3, [sp, #4]
  40ec4c:	9500      	str	r5, [sp, #0]
  40ec4e:	fa0f f388 	sxth.w	r3, r8
  40ec52:	4632      	mov	r2, r6
  40ec54:	b239      	sxth	r1, r7
  40ec56:	a824      	add	r0, sp, #144	; 0x90
  40ec58:	47d0      	blx	sl
  40ec5a:	e74a      	b.n	40eaf2 <draw_line_skew+0x11a>
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
  40ec5c:	f9bd 10f4 	ldrsh.w	r1, [sp, #244]	; 0xf4
  40ec60:	f9bd 20f6 	ldrsh.w	r2, [sp, #246]	; 0xf6
  40ec64:	b28b      	uxth	r3, r1
  40ec66:	f8bd 501c 	ldrh.w	r5, [sp, #28]
  40ec6a:	1b5b      	subs	r3, r3, r5
  40ec6c:	fa1f f989 	uxth.w	r9, r9
  40ec70:	fa19 f082 	uxtah	r0, r9, r2
  40ec74:	2403      	movs	r4, #3
  40ec76:	9401      	str	r4, [sp, #4]
  40ec78:	b200      	sxth	r0, r0
  40ec7a:	9000      	str	r0, [sp, #0]
  40ec7c:	b21b      	sxth	r3, r3
  40ec7e:	a819      	add	r0, sp, #100	; 0x64
  40ec80:	4c14      	ldr	r4, [pc, #80]	; (40ecd4 <draw_line_skew+0x2fc>)
  40ec82:	47a0      	blx	r4
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
  40ec84:	f9bd 10f0 	ldrsh.w	r1, [sp, #240]	; 0xf0
  40ec88:	f9bd 20f2 	ldrsh.w	r2, [sp, #242]	; 0xf2
  40ec8c:	b28b      	uxth	r3, r1
  40ec8e:	1b5b      	subs	r3, r3, r5
  40ec90:	fa19 f982 	uxtah	r9, r9, r2
  40ec94:	2002      	movs	r0, #2
  40ec96:	9001      	str	r0, [sp, #4]
  40ec98:	fa0f f089 	sxth.w	r0, r9
  40ec9c:	9000      	str	r0, [sp, #0]
  40ec9e:	b21b      	sxth	r3, r3
  40eca0:	a80e      	add	r0, sp, #56	; 0x38
  40eca2:	47a0      	blx	r4
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
  40eca4:	2100      	movs	r1, #0
  40eca6:	a819      	add	r0, sp, #100	; 0x64
  40eca8:	4c0b      	ldr	r4, [pc, #44]	; (40ecd8 <draw_line_skew+0x300>)
  40ecaa:	47a0      	blx	r4
  40ecac:	900a      	str	r0, [sp, #40]	; 0x28
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
  40ecae:	2100      	movs	r1, #0
  40ecb0:	a80e      	add	r0, sp, #56	; 0x38
  40ecb2:	47a0      	blx	r4
  40ecb4:	900b      	str	r0, [sp, #44]	; 0x2c
  40ecb6:	e72f      	b.n	40eb18 <draw_line_skew+0x140>
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), hor_res);
  40ecb8:	a83a      	add	r0, sp, #232	; 0xe8
  40ecba:	4b0b      	ldr	r3, [pc, #44]	; (40ece8 <draw_line_skew+0x310>)
  40ecbc:	4798      	blx	r3
  40ecbe:	4683      	mov	fp, r0
  40ecc0:	e757      	b.n	40eb72 <draw_line_skew+0x19a>

        lv_draw_mask_res_t mask_res = lv_draw_mask_apply(&mask_buf[mask_p], x, h, draw_area_w);
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
            _lv_memset_00(&mask_buf[mask_p], draw_area_w);
  40ecc2:	4621      	mov	r1, r4
  40ecc4:	4638      	mov	r0, r7
  40ecc6:	4b0b      	ldr	r3, [pc, #44]	; (40ecf4 <draw_line_skew+0x31c>)
  40ecc8:	4798      	blx	r3
  40ecca:	e048      	b.n	40ed5e <draw_line_skew+0x386>
  40eccc:	0042c864 	.word	0x0042c864
  40ecd0:	00415663 	.word	0x00415663
  40ecd4:	0040fd81 	.word	0x0040fd81
  40ecd8:	0040fc61 	.word	0x0040fc61
  40ecdc:	00409851 	.word	0x00409851
  40ece0:	00414ea5 	.word	0x00414ea5
  40ece4:	00414da1 	.word	0x00414da1
  40ece8:	00415647 	.word	0x00415647
  40ecec:	00416a81 	.word	0x00416a81
  40ecf0:	00416c65 	.word	0x00416c65
  40ecf4:	00416c0d 	.word	0x00416c0d
            fill_area.y2 ++;
        }
        else {
            _lv_blend_fill(&fill_area, clip,
                           dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                           dsc->blend_mode);
  40ecf8:	9905      	ldr	r1, [sp, #20]
  40ecfa:	7a4b      	ldrb	r3, [r1, #9]
  40ecfc:	f003 0303 	and.w	r3, r3, #3
            _lv_blend_fill(&fill_area, clip,
  40ed00:	880a      	ldrh	r2, [r1, #0]
  40ed02:	f8ad 201c 	strh.w	r2, [sp, #28]
  40ed06:	9302      	str	r3, [sp, #8]
  40ed08:	7a0b      	ldrb	r3, [r1, #8]
  40ed0a:	9301      	str	r3, [sp, #4]
  40ed0c:	2302      	movs	r3, #2
  40ed0e:	9300      	str	r3, [sp, #0]
  40ed10:	464b      	mov	r3, r9
  40ed12:	f8bd 201c 	ldrh.w	r2, [sp, #28]
  40ed16:	9906      	ldr	r1, [sp, #24]
  40ed18:	a80c      	add	r0, sp, #48	; 0x30
  40ed1a:	4e29      	ldr	r6, [pc, #164]	; (40edc0 <draw_line_skew+0x3e8>)
  40ed1c:	47b0      	blx	r6

            fill_area.y1 = fill_area.y2 + 1;
  40ed1e:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
  40ed22:	3301      	adds	r3, #1
  40ed24:	b21b      	sxth	r3, r3
  40ed26:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            fill_area.y2 = fill_area.y1;
  40ed2a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            mask_p = 0;
            _lv_memset_ff(mask_buf, mask_buf_size);
  40ed2e:	4659      	mov	r1, fp
  40ed30:	4648      	mov	r0, r9
  40ed32:	4b24      	ldr	r3, [pc, #144]	; (40edc4 <draw_line_skew+0x3ec>)
  40ed34:	4798      	blx	r3
            mask_p = 0;
  40ed36:	2600      	movs	r6, #0
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
  40ed38:	3501      	adds	r5, #1
  40ed3a:	f9bd 30ee 	ldrsh.w	r3, [sp, #238]	; 0xee
  40ed3e:	f9ba 2012 	ldrsh.w	r2, [sl, #18]
  40ed42:	4413      	add	r3, r2
  40ed44:	429d      	cmp	r5, r3
  40ed46:	dc14      	bgt.n	40ed72 <draw_line_skew+0x39a>
        lv_draw_mask_res_t mask_res = lv_draw_mask_apply(&mask_buf[mask_p], x, h, draw_area_w);
  40ed48:	eb09 0706 	add.w	r7, r9, r6
  40ed4c:	4623      	mov	r3, r4
  40ed4e:	b22a      	sxth	r2, r5
  40ed50:	9904      	ldr	r1, [sp, #16]
  40ed52:	4638      	mov	r0, r7
  40ed54:	f8df 8078 	ldr.w	r8, [pc, #120]	; 40edd0 <draw_line_skew+0x3f8>
  40ed58:	47c0      	blx	r8
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
  40ed5a:	2800      	cmp	r0, #0
  40ed5c:	d0b1      	beq.n	40ecc2 <draw_line_skew+0x2ea>
        mask_p += draw_area_w;
  40ed5e:	4426      	add	r6, r4
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
  40ed60:	19a3      	adds	r3, r4, r6
  40ed62:	459b      	cmp	fp, r3
  40ed64:	d9c8      	bls.n	40ecf8 <draw_line_skew+0x320>
            fill_area.y2 ++;
  40ed66:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
  40ed6a:	3301      	adds	r3, #1
  40ed6c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  40ed70:	e7e2      	b.n	40ed38 <draw_line_skew+0x360>
        }
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
  40ed72:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
  40ed76:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
  40ed7a:	429a      	cmp	r2, r3
  40ed7c:	d011      	beq.n	40eda2 <draw_line_skew+0x3ca>
        fill_area.y2--;
  40ed7e:	3b01      	subs	r3, #1
  40ed80:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        _lv_blend_fill(&fill_area, clip,
                       dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                       dsc->blend_mode);
  40ed84:	9905      	ldr	r1, [sp, #20]
  40ed86:	7a4b      	ldrb	r3, [r1, #9]
  40ed88:	f003 0303 	and.w	r3, r3, #3
        _lv_blend_fill(&fill_area, clip,
  40ed8c:	880a      	ldrh	r2, [r1, #0]
  40ed8e:	9302      	str	r3, [sp, #8]
  40ed90:	7a0b      	ldrb	r3, [r1, #8]
  40ed92:	9301      	str	r3, [sp, #4]
  40ed94:	2302      	movs	r3, #2
  40ed96:	9300      	str	r3, [sp, #0]
  40ed98:	464b      	mov	r3, r9
  40ed9a:	9906      	ldr	r1, [sp, #24]
  40ed9c:	a80c      	add	r0, sp, #48	; 0x30
  40ed9e:	4c08      	ldr	r4, [pc, #32]	; (40edc0 <draw_line_skew+0x3e8>)
  40eda0:	47a0      	blx	r4

    }

    _lv_mem_buf_release(mask_buf);
  40eda2:	4648      	mov	r0, r9
  40eda4:	4b08      	ldr	r3, [pc, #32]	; (40edc8 <draw_line_skew+0x3f0>)
  40eda6:	4798      	blx	r3

    lv_draw_mask_remove_id(mask_left_id);
  40eda8:	9808      	ldr	r0, [sp, #32]
  40edaa:	4c08      	ldr	r4, [pc, #32]	; (40edcc <draw_line_skew+0x3f4>)
  40edac:	47a0      	blx	r4
    lv_draw_mask_remove_id(mask_right_id);
  40edae:	9809      	ldr	r0, [sp, #36]	; 0x24
  40edb0:	47a0      	blx	r4
    lv_draw_mask_remove_id(mask_top_id);
  40edb2:	980a      	ldr	r0, [sp, #40]	; 0x28
  40edb4:	47a0      	blx	r4
    lv_draw_mask_remove_id(mask_bottom_id);
  40edb6:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40edb8:	47a0      	blx	r4
}
  40edba:	b03f      	add	sp, #252	; 0xfc
  40edbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40edc0:	0040c921 	.word	0x0040c921
  40edc4:	00416c65 	.word	0x00416c65
  40edc8:	00416831 	.word	0x00416831
  40edcc:	0040fce5 	.word	0x0040fce5
  40edd0:	0040fc95 	.word	0x0040fc95

0040edd4 <lv_draw_line_dsc_init>:
{
  40edd4:	b510      	push	{r4, lr}
  40edd6:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
  40edd8:	210a      	movs	r1, #10
  40edda:	4b04      	ldr	r3, [pc, #16]	; (40edec <lv_draw_line_dsc_init+0x18>)
  40eddc:	4798      	blx	r3
    dsc->width = 1;
  40edde:	2301      	movs	r3, #1
  40ede0:	8063      	strh	r3, [r4, #2]
    dsc->opa = LV_OPA_COVER;
  40ede2:	23ff      	movs	r3, #255	; 0xff
  40ede4:	7223      	strb	r3, [r4, #8]
    dsc->color = LV_COLOR_BLACK;
  40ede6:	2300      	movs	r3, #0
  40ede8:	8023      	strh	r3, [r4, #0]
  40edea:	bd10      	pop	{r4, pc}
  40edec:	00416c0d 	.word	0x00416c0d

0040edf0 <lv_draw_line>:
{
  40edf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40edf4:	b09b      	sub	sp, #108	; 0x6c
    if(dsc->width == 0) return;
  40edf6:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
  40edfa:	2c00      	cmp	r4, #0
  40edfc:	d05e      	beq.n	40eebc <lv_draw_line+0xcc>
    if(dsc->opa <= LV_OPA_MIN) return;
  40edfe:	7a1d      	ldrb	r5, [r3, #8]
  40ee00:	2d02      	cmp	r5, #2
  40ee02:	d95b      	bls.n	40eebc <lv_draw_line+0xcc>
    if(point1->x == point2->x && point1->y == point2->y) return;
  40ee04:	f9b0 5000 	ldrsh.w	r5, [r0]
  40ee08:	f9b1 6000 	ldrsh.w	r6, [r1]
  40ee0c:	42b5      	cmp	r5, r6
  40ee0e:	d058      	beq.n	40eec2 <lv_draw_line+0xd2>
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
  40ee10:	42b5      	cmp	r5, r6
  40ee12:	bfa8      	it	ge
  40ee14:	4635      	movge	r5, r6
  40ee16:	b2ad      	uxth	r5, r5
  40ee18:	4626      	mov	r6, r4
  40ee1a:	2c00      	cmp	r4, #0
  40ee1c:	db58      	blt.n	40eed0 <lv_draw_line+0xe0>
  40ee1e:	f3c6 064f 	ubfx	r6, r6, #1, #16
  40ee22:	1bad      	subs	r5, r5, r6
  40ee24:	f8ad 5060 	strh.w	r5, [sp, #96]	; 0x60
    clip_line.x2 = LV_MATH_MAX(point1->x, point2->x) + dsc->width / 2;
  40ee28:	f9b1 4000 	ldrsh.w	r4, [r1]
  40ee2c:	f9b0 5000 	ldrsh.w	r5, [r0]
  40ee30:	42ac      	cmp	r4, r5
  40ee32:	bfb8      	it	lt
  40ee34:	462c      	movlt	r4, r5
  40ee36:	fa16 f484 	uxtah	r4, r6, r4
  40ee3a:	f8ad 4064 	strh.w	r4, [sp, #100]	; 0x64
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
  40ee3e:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
  40ee42:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
  40ee46:	42ac      	cmp	r4, r5
  40ee48:	bfa8      	it	ge
  40ee4a:	462c      	movge	r4, r5
  40ee4c:	b2a4      	uxth	r4, r4
  40ee4e:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
  40ee52:	2d00      	cmp	r5, #0
  40ee54:	db3e      	blt.n	40eed4 <lv_draw_line+0xe4>
  40ee56:	eba4 0465 	sub.w	r4, r4, r5, asr #1
  40ee5a:	f8ad 4062 	strh.w	r4, [sp, #98]	; 0x62
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
  40ee5e:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
  40ee62:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
  40ee66:	42ac      	cmp	r4, r5
  40ee68:	bfb8      	it	lt
  40ee6a:	462c      	movlt	r4, r5
  40ee6c:	b2a4      	uxth	r4, r4
  40ee6e:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
  40ee72:	2d00      	cmp	r5, #0
  40ee74:	db30      	blt.n	40eed8 <lv_draw_line+0xe8>
  40ee76:	461e      	mov	r6, r3
  40ee78:	4690      	mov	r8, r2
  40ee7a:	460f      	mov	r7, r1
  40ee7c:	4681      	mov	r9, r0
  40ee7e:	eb04 0365 	add.w	r3, r4, r5, asr #1
  40ee82:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
  40ee86:	a918      	add	r1, sp, #96	; 0x60
  40ee88:	4608      	mov	r0, r1
  40ee8a:	4b45      	ldr	r3, [pc, #276]	; (40efa0 <lv_draw_line+0x1b0>)
  40ee8c:	4798      	blx	r3
    if(!is_common) return;
  40ee8e:	b1a8      	cbz	r0, 40eebc <lv_draw_line+0xcc>
    if(point1->y == point2->y) draw_line_hor(point1, point2, &clip_line, dsc);
  40ee90:	f9b9 2002 	ldrsh.w	r2, [r9, #2]
  40ee94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
  40ee98:	429a      	cmp	r2, r3
  40ee9a:	d01f      	beq.n	40eedc <lv_draw_line+0xec>
    else if(point1->x == point2->x) draw_line_ver(point1, point2, &clip_line, dsc);
  40ee9c:	f9b9 2000 	ldrsh.w	r2, [r9]
  40eea0:	f9b7 3000 	ldrsh.w	r3, [r7]
  40eea4:	429a      	cmp	r2, r3
  40eea6:	d020      	beq.n	40eeea <lv_draw_line+0xfa>
    else draw_line_skew(point1, point2, &clip_line, dsc);
  40eea8:	4633      	mov	r3, r6
  40eeaa:	aa18      	add	r2, sp, #96	; 0x60
  40eeac:	4639      	mov	r1, r7
  40eeae:	4648      	mov	r0, r9
  40eeb0:	4c3c      	ldr	r4, [pc, #240]	; (40efa4 <lv_draw_line+0x1b4>)
  40eeb2:	47a0      	blx	r4
    if(dsc->round_end || dsc->round_start) {
  40eeb4:	7a73      	ldrb	r3, [r6, #9]
  40eeb6:	f013 0f0c 	tst.w	r3, #12
  40eeba:	d11d      	bne.n	40eef8 <lv_draw_line+0x108>
}
  40eebc:	b01b      	add	sp, #108	; 0x6c
  40eebe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(point1->x == point2->x && point1->y == point2->y) return;
  40eec2:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
  40eec6:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
  40eeca:	45be      	cmp	lr, r7
  40eecc:	d1a0      	bne.n	40ee10 <lv_draw_line+0x20>
  40eece:	e7f5      	b.n	40eebc <lv_draw_line+0xcc>
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
  40eed0:	1c66      	adds	r6, r4, #1
  40eed2:	e7a4      	b.n	40ee1e <lv_draw_line+0x2e>
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
  40eed4:	3501      	adds	r5, #1
  40eed6:	e7be      	b.n	40ee56 <lv_draw_line+0x66>
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
  40eed8:	3501      	adds	r5, #1
  40eeda:	e7cc      	b.n	40ee76 <lv_draw_line+0x86>
    if(point1->y == point2->y) draw_line_hor(point1, point2, &clip_line, dsc);
  40eedc:	4633      	mov	r3, r6
  40eede:	aa18      	add	r2, sp, #96	; 0x60
  40eee0:	4639      	mov	r1, r7
  40eee2:	4648      	mov	r0, r9
  40eee4:	4c30      	ldr	r4, [pc, #192]	; (40efa8 <lv_draw_line+0x1b8>)
  40eee6:	47a0      	blx	r4
  40eee8:	e7e4      	b.n	40eeb4 <lv_draw_line+0xc4>
    else if(point1->x == point2->x) draw_line_ver(point1, point2, &clip_line, dsc);
  40eeea:	4633      	mov	r3, r6
  40eeec:	aa18      	add	r2, sp, #96	; 0x60
  40eeee:	4639      	mov	r1, r7
  40eef0:	4648      	mov	r0, r9
  40eef2:	4c2e      	ldr	r4, [pc, #184]	; (40efac <lv_draw_line+0x1bc>)
  40eef4:	47a0      	blx	r4
  40eef6:	e7dd      	b.n	40eeb4 <lv_draw_line+0xc4>
        lv_draw_rect_dsc_init(&cir_dsc);
  40eef8:	a803      	add	r0, sp, #12
  40eefa:	4b2d      	ldr	r3, [pc, #180]	; (40efb0 <lv_draw_line+0x1c0>)
  40eefc:	4798      	blx	r3
        cir_dsc.bg_color = dsc->color;
  40eefe:	8833      	ldrh	r3, [r6, #0]
  40ef00:	f8ad 300e 	strh.w	r3, [sp, #14]
        cir_dsc.radius = LV_RADIUS_CIRCLE;
  40ef04:	f647 73ff 	movw	r3, #32767	; 0x7fff
  40ef08:	f8ad 300c 	strh.w	r3, [sp, #12]
        cir_dsc.bg_opa = dsc->opa;
  40ef0c:	7a33      	ldrb	r3, [r6, #8]
  40ef0e:	f88d 3018 	strb.w	r3, [sp, #24]
        int32_t r = (dsc->width >> 1);
  40ef12:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
  40ef16:	105c      	asrs	r4, r3, #1
        int32_t r_corr = (dsc->width & 1) ? 0 : 1;
  40ef18:	b29b      	uxth	r3, r3
  40ef1a:	f083 0301 	eor.w	r3, r3, #1
  40ef1e:	f003 0501 	and.w	r5, r3, #1
        if(dsc->round_start) {
  40ef22:	7a73      	ldrb	r3, [r6, #9]
  40ef24:	f013 0f04 	tst.w	r3, #4
  40ef28:	d11d      	bne.n	40ef66 <lv_draw_line+0x176>
        if(dsc->round_end) {
  40ef2a:	7a73      	ldrb	r3, [r6, #9]
  40ef2c:	f013 0f08 	tst.w	r3, #8
  40ef30:	d0c4      	beq.n	40eebc <lv_draw_line+0xcc>
            cir_area.x1 = point2->x - r;
  40ef32:	883b      	ldrh	r3, [r7, #0]
  40ef34:	b2a4      	uxth	r4, r4
  40ef36:	1b1a      	subs	r2, r3, r4
  40ef38:	f8ad 2004 	strh.w	r2, [sp, #4]
            cir_area.y1 = point2->y - r;
  40ef3c:	8879      	ldrh	r1, [r7, #2]
  40ef3e:	1b0a      	subs	r2, r1, r4
  40ef40:	f8ad 2006 	strh.w	r2, [sp, #6]
            cir_area.x2 = point2->x + r - r_corr;
  40ef44:	18e2      	adds	r2, r4, r3
  40ef46:	b292      	uxth	r2, r2
  40ef48:	b2ad      	uxth	r5, r5
  40ef4a:	1b52      	subs	r2, r2, r5
  40ef4c:	f8ad 2008 	strh.w	r2, [sp, #8]
            cir_area.y2 = point2->y + r - r_corr ;
  40ef50:	440c      	add	r4, r1
  40ef52:	b2a3      	uxth	r3, r4
  40ef54:	1b5b      	subs	r3, r3, r5
  40ef56:	f8ad 300a 	strh.w	r3, [sp, #10]
            lv_draw_rect(&cir_area, clip, &cir_dsc);
  40ef5a:	aa03      	add	r2, sp, #12
  40ef5c:	4641      	mov	r1, r8
  40ef5e:	a801      	add	r0, sp, #4
  40ef60:	4b14      	ldr	r3, [pc, #80]	; (40efb4 <lv_draw_line+0x1c4>)
  40ef62:	4798      	blx	r3
  40ef64:	e7aa      	b.n	40eebc <lv_draw_line+0xcc>
            cir_area.x1 = point1->x - r;
  40ef66:	f8b9 2000 	ldrh.w	r2, [r9]
  40ef6a:	b2a3      	uxth	r3, r4
  40ef6c:	1ad1      	subs	r1, r2, r3
  40ef6e:	f8ad 1004 	strh.w	r1, [sp, #4]
            cir_area.y1 = point1->y - r;
  40ef72:	f8b9 0002 	ldrh.w	r0, [r9, #2]
  40ef76:	1ac1      	subs	r1, r0, r3
  40ef78:	f8ad 1006 	strh.w	r1, [sp, #6]
            cir_area.x2 = point1->x + r - r_corr;
  40ef7c:	441a      	add	r2, r3
  40ef7e:	b292      	uxth	r2, r2
  40ef80:	b2a9      	uxth	r1, r5
  40ef82:	1a52      	subs	r2, r2, r1
  40ef84:	f8ad 2008 	strh.w	r2, [sp, #8]
            cir_area.y2 = point1->y + r - r_corr ;
  40ef88:	4403      	add	r3, r0
  40ef8a:	b29b      	uxth	r3, r3
  40ef8c:	1a5b      	subs	r3, r3, r1
  40ef8e:	f8ad 300a 	strh.w	r3, [sp, #10]
            lv_draw_rect(&cir_area, clip, &cir_dsc);
  40ef92:	aa03      	add	r2, sp, #12
  40ef94:	4641      	mov	r1, r8
  40ef96:	a801      	add	r0, sp, #4
  40ef98:	4b06      	ldr	r3, [pc, #24]	; (40efb4 <lv_draw_line+0x1c4>)
  40ef9a:	4798      	blx	r3
  40ef9c:	e7c5      	b.n	40ef2a <lv_draw_line+0x13a>
  40ef9e:	bf00      	nop
  40efa0:	00415663 	.word	0x00415663
  40efa4:	0040e9d9 	.word	0x0040e9d9
  40efa8:	0040e5cd 	.word	0x0040e5cd
  40efac:	0040e7dd 	.word	0x0040e7dd
  40efb0:	0041250d 	.word	0x0041250d
  40efb4:	00412559 	.word	0x00412559

0040efb8 <lv_draw_mask_fade>:
}

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t lv_draw_mask_fade(lv_opa_t * mask_buf, lv_coord_t abs_x,
                                                                  lv_coord_t abs_y, lv_coord_t len,
                                                                  lv_draw_mask_fade_param_t * p)
{
  40efb8:	b4f0      	push	{r4, r5, r6, r7}
  40efba:	9c04      	ldr	r4, [sp, #16]
    if(abs_y < p->cfg.coords.y1) return LV_DRAW_MASK_RES_FULL_COVER;
  40efbc:	f9b4 500a 	ldrsh.w	r5, [r4, #10]
  40efc0:	4295      	cmp	r5, r2
  40efc2:	dc7c      	bgt.n	40f0be <lv_draw_mask_fade+0x106>
    if(abs_y > p->cfg.coords.y2) return LV_DRAW_MASK_RES_FULL_COVER;
  40efc4:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
  40efc8:	42aa      	cmp	r2, r5
  40efca:	dc7b      	bgt.n	40f0c4 <lv_draw_mask_fade+0x10c>
    if(abs_x + len < p->cfg.coords.x1) return LV_DRAW_MASK_RES_FULL_COVER;
  40efcc:	185f      	adds	r7, r3, r1
  40efce:	f9b4 6008 	ldrsh.w	r6, [r4, #8]
  40efd2:	42b7      	cmp	r7, r6
  40efd4:	db78      	blt.n	40f0c8 <lv_draw_mask_fade+0x110>
    if(abs_x > p->cfg.coords.x2) return LV_DRAW_MASK_RES_FULL_COVER;
  40efd6:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  40efda:	42a9      	cmp	r1, r5
  40efdc:	dc76      	bgt.n	40f0cc <lv_draw_mask_fade+0x114>

    if(abs_x + len > p->cfg.coords.x2) len -= abs_x + len - p->cfg.coords.x2 - 1;
  40efde:	42af      	cmp	r7, r5
  40efe0:	dd08      	ble.n	40eff4 <lv_draw_mask_fade+0x3c>
  40efe2:	b2ad      	uxth	r5, r5
  40efe4:	b29f      	uxth	r7, r3
  40efe6:	187b      	adds	r3, r7, r1
  40efe8:	b29b      	uxth	r3, r3
  40efea:	1aeb      	subs	r3, r5, r3
  40efec:	fa17 f383 	uxtah	r3, r7, r3
  40eff0:	3301      	adds	r3, #1
  40eff2:	b21b      	sxth	r3, r3

    if(abs_x < p->cfg.coords.x1) {
  40eff4:	42b1      	cmp	r1, r6
  40eff6:	da03      	bge.n	40f000 <lv_draw_mask_fade+0x48>
        int32_t x_ofs = 0;
        x_ofs = p->cfg.coords.x1 - abs_x;
  40eff8:	1a71      	subs	r1, r6, r1
        len -= x_ofs;
  40effa:	1a5b      	subs	r3, r3, r1
  40effc:	b21b      	sxth	r3, r3
        mask_buf += x_ofs;
  40effe:	4408      	add	r0, r1
    }

    int32_t i;

    if(abs_y <= p->cfg.y_top) {
  40f000:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  40f004:	428a      	cmp	r2, r1
  40f006:	dd27      	ble.n	40f058 <lv_draw_mask_fade+0xa0>
        for(i = 0; i < len; i++) {
            mask_buf[i] = mask_mix(mask_buf[i], p->cfg.opa_top);
        }
        return LV_DRAW_MASK_RES_CHANGED;
    }
    else if(abs_y >= p->cfg.y_bottom) {
  40f008:	f9b4 5012 	ldrsh.w	r5, [r4, #18]
  40f00c:	42aa      	cmp	r2, r5
  40f00e:	da3c      	bge.n	40f08a <lv_draw_mask_fade+0xd2>
        }
        return LV_DRAW_MASK_RES_CHANGED;
    }
    else {
        /*Calculate the opa proportionally*/
        int16_t opa_diff = p->cfg.opa_bottom - p->cfg.opa_top;
  40f010:	7d66      	ldrb	r6, [r4, #21]
  40f012:	7d27      	ldrb	r7, [r4, #20]
  40f014:	1bf4      	subs	r4, r6, r7
        int32_t y_diff = p->cfg.y_bottom - p->cfg.y_top + 1;
  40f016:	1a6d      	subs	r5, r5, r1
  40f018:	3501      	adds	r5, #1
        lv_opa_t opa_act = (int32_t)((int32_t)(abs_y - p->cfg.y_top) * opa_diff) / y_diff;
  40f01a:	1a52      	subs	r2, r2, r1
  40f01c:	fb02 f204 	mul.w	r2, r2, r4
  40f020:	fb92 f2f5 	sdiv	r2, r2, r5
        opa_act += p->cfg.opa_top;
  40f024:	fa57 f282 	uxtab	r2, r7, r2
  40f028:	b2d2      	uxtb	r2, r2

        for(i = 0; i < len; i++) {
  40f02a:	2100      	movs	r1, #0
  40f02c:	e034      	b.n	40f098 <lv_draw_mask_fade+0xe0>
}

LV_ATTRIBUTE_FAST_MEM static inline lv_opa_t mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)
{
    if(mask_new >= LV_OPA_MAX) return mask_act;
    if(mask_new <= LV_OPA_MIN) return 0;
  40f02e:	2100      	movs	r1, #0
            mask_buf[i] = mask_mix(mask_buf[i], p->cfg.opa_top);
  40f030:	7031      	strb	r1, [r6, #0]
        for(i = 0; i < len; i++) {
  40f032:	3201      	adds	r2, #1
  40f034:	429a      	cmp	r2, r3
  40f036:	da11      	bge.n	40f05c <lv_draw_mask_fade+0xa4>
            mask_buf[i] = mask_mix(mask_buf[i], p->cfg.opa_top);
  40f038:	1886      	adds	r6, r0, r2
  40f03a:	5c81      	ldrb	r1, [r0, r2]
  40f03c:	7d25      	ldrb	r5, [r4, #20]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f03e:	2dfc      	cmp	r5, #252	; 0xfc
  40f040:	d8f6      	bhi.n	40f030 <lv_draw_mask_fade+0x78>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f042:	2d02      	cmp	r5, #2
  40f044:	d9f3      	bls.n	40f02e <lv_draw_mask_fade+0x76>

    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f046:	fb01 f105 	mul.w	r1, r1, r5
  40f04a:	eb01 2501 	add.w	r5, r1, r1, lsl #8
  40f04e:	eb01 11c5 	add.w	r1, r1, r5, lsl #7
  40f052:	f3c1 51c7 	ubfx	r1, r1, #23, #8
  40f056:	e7eb      	b.n	40f030 <lv_draw_mask_fade+0x78>
  40f058:	2200      	movs	r2, #0
  40f05a:	e7eb      	b.n	40f034 <lv_draw_mask_fade+0x7c>
        return LV_DRAW_MASK_RES_CHANGED;
  40f05c:	2002      	movs	r0, #2
  40f05e:	e02f      	b.n	40f0c0 <lv_draw_mask_fade+0x108>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f060:	2500      	movs	r5, #0
            mask_buf[i] = mask_mix(mask_buf[i], p->cfg.opa_bottom);
  40f062:	7035      	strb	r5, [r6, #0]
        for(i = 0; i < len; i++) {
  40f064:	3201      	adds	r2, #1
  40f066:	429a      	cmp	r2, r3
  40f068:	da11      	bge.n	40f08e <lv_draw_mask_fade+0xd6>
            mask_buf[i] = mask_mix(mask_buf[i], p->cfg.opa_bottom);
  40f06a:	1886      	adds	r6, r0, r2
  40f06c:	5c85      	ldrb	r5, [r0, r2]
  40f06e:	7d61      	ldrb	r1, [r4, #21]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f070:	29fc      	cmp	r1, #252	; 0xfc
  40f072:	d8f6      	bhi.n	40f062 <lv_draw_mask_fade+0xaa>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f074:	2902      	cmp	r1, #2
  40f076:	d9f3      	bls.n	40f060 <lv_draw_mask_fade+0xa8>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f078:	fb01 f105 	mul.w	r1, r1, r5
  40f07c:	eb01 2501 	add.w	r5, r1, r1, lsl #8
  40f080:	eb01 11c5 	add.w	r1, r1, r5, lsl #7
  40f084:	f3c1 55c7 	ubfx	r5, r1, #23, #8
  40f088:	e7eb      	b.n	40f062 <lv_draw_mask_fade+0xaa>
  40f08a:	2200      	movs	r2, #0
  40f08c:	e7eb      	b.n	40f066 <lv_draw_mask_fade+0xae>
        return LV_DRAW_MASK_RES_CHANGED;
  40f08e:	2002      	movs	r0, #2
  40f090:	e016      	b.n	40f0c0 <lv_draw_mask_fade+0x108>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f092:	2400      	movs	r4, #0
            mask_buf[i] = mask_mix(mask_buf[i], opa_act);
  40f094:	702c      	strb	r4, [r5, #0]
        for(i = 0; i < len; i++) {
  40f096:	3101      	adds	r1, #1
  40f098:	4299      	cmp	r1, r3
  40f09a:	da0e      	bge.n	40f0ba <lv_draw_mask_fade+0x102>
            mask_buf[i] = mask_mix(mask_buf[i], opa_act);
  40f09c:	1845      	adds	r5, r0, r1
  40f09e:	5c44      	ldrb	r4, [r0, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f0a0:	2afc      	cmp	r2, #252	; 0xfc
  40f0a2:	d8f7      	bhi.n	40f094 <lv_draw_mask_fade+0xdc>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f0a4:	2a02      	cmp	r2, #2
  40f0a6:	d9f4      	bls.n	40f092 <lv_draw_mask_fade+0xda>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f0a8:	fb02 f404 	mul.w	r4, r2, r4
  40f0ac:	eb04 2604 	add.w	r6, r4, r4, lsl #8
  40f0b0:	eb04 14c6 	add.w	r4, r4, r6, lsl #7
  40f0b4:	f3c4 54c7 	ubfx	r4, r4, #23, #8
  40f0b8:	e7ec      	b.n	40f094 <lv_draw_mask_fade+0xdc>
        return LV_DRAW_MASK_RES_CHANGED;
  40f0ba:	2002      	movs	r0, #2
  40f0bc:	e000      	b.n	40f0c0 <lv_draw_mask_fade+0x108>
    if(abs_y < p->cfg.coords.y1) return LV_DRAW_MASK_RES_FULL_COVER;
  40f0be:	2001      	movs	r0, #1
}
  40f0c0:	bcf0      	pop	{r4, r5, r6, r7}
  40f0c2:	4770      	bx	lr
    if(abs_y > p->cfg.coords.y2) return LV_DRAW_MASK_RES_FULL_COVER;
  40f0c4:	2001      	movs	r0, #1
  40f0c6:	e7fb      	b.n	40f0c0 <lv_draw_mask_fade+0x108>
    if(abs_x + len < p->cfg.coords.x1) return LV_DRAW_MASK_RES_FULL_COVER;
  40f0c8:	2001      	movs	r0, #1
  40f0ca:	e7f9      	b.n	40f0c0 <lv_draw_mask_fade+0x108>
    if(abs_x > p->cfg.coords.x2) return LV_DRAW_MASK_RES_FULL_COVER;
  40f0cc:	2001      	movs	r0, #1
  40f0ce:	e7f7      	b.n	40f0c0 <lv_draw_mask_fade+0x108>

0040f0d0 <line_mask_flat>:
{
  40f0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40f0d2:	9e06      	ldr	r6, [sp, #24]
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
  40f0d4:	69f4      	ldr	r4, [r6, #28]
  40f0d6:	fb01 f504 	mul.w	r5, r1, r4
  40f0da:	12ad      	asrs	r5, r5, #10
    if(p->yx_steep > 0) {
  40f0dc:	2c00      	cmp	r4, #0
  40f0de:	dd09      	ble.n	40f0f4 <line_mask_flat+0x24>
        if(y_at_x > abs_y) {
  40f0e0:	4295      	cmp	r5, r2
  40f0e2:	dd11      	ble.n	40f108 <line_mask_flat+0x38>
            if(p->inv) {
  40f0e4:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  40f0e8:	f013 0f02 	tst.w	r3, #2
  40f0ec:	f000 80e2 	beq.w	40f2b4 <line_mask_flat+0x1e4>
                return LV_DRAW_MASK_RES_FULL_COVER;
  40f0f0:	2001      	movs	r0, #1
  40f0f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(y_at_x < abs_y) {
  40f0f4:	4295      	cmp	r5, r2
  40f0f6:	da07      	bge.n	40f108 <line_mask_flat+0x38>
            if(p->inv) {
  40f0f8:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  40f0fc:	f013 0f02 	tst.w	r3, #2
  40f100:	f000 80da 	beq.w	40f2b8 <line_mask_flat+0x1e8>
                return LV_DRAW_MASK_RES_FULL_COVER;
  40f104:	2001      	movs	r0, #1
  40f106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
  40f108:	461f      	mov	r7, r3
  40f10a:	18cd      	adds	r5, r1, r3
  40f10c:	fb05 f504 	mul.w	r5, r5, r4
  40f110:	12ad      	asrs	r5, r5, #10
    if(p->yx_steep > 0) {
  40f112:	2c00      	cmp	r4, #0
  40f114:	dd09      	ble.n	40f12a <line_mask_flat+0x5a>
        if(y_at_x < abs_y) {
  40f116:	4295      	cmp	r5, r2
  40f118:	da11      	bge.n	40f13e <line_mask_flat+0x6e>
            if(p->inv) {
  40f11a:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  40f11e:	f013 0f02 	tst.w	r3, #2
  40f122:	f000 80cb 	beq.w	40f2bc <line_mask_flat+0x1ec>
                return LV_DRAW_MASK_RES_TRANSP;
  40f126:	2000      	movs	r0, #0
  40f128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(y_at_x > abs_y) {
  40f12a:	4295      	cmp	r5, r2
  40f12c:	dd07      	ble.n	40f13e <line_mask_flat+0x6e>
            if(p->inv) {
  40f12e:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  40f132:	f013 0f02 	tst.w	r3, #2
  40f136:	f000 80c3 	beq.w	40f2c0 <line_mask_flat+0x1f0>
                return LV_DRAW_MASK_RES_TRANSP;
  40f13a:	2000      	movs	r0, #0
  40f13c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(p->yx_steep > 0) xe = ((abs_y << 8) * p->xy_steep) >> 10;
  40f13e:	2c00      	cmp	r4, #0
  40f140:	dd39      	ble.n	40f1b6 <line_mask_flat+0xe6>
  40f142:	0212      	lsls	r2, r2, #8
  40f144:	69b4      	ldr	r4, [r6, #24]
  40f146:	fb04 f202 	mul.w	r2, r4, r2
  40f14a:	1292      	asrs	r2, r2, #10
    int32_t xei = xe >> 8;
  40f14c:	ea4f 2e22 	mov.w	lr, r2, asr #8
    if(xef == 0) px_h = 255;
  40f150:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
  40f154:	d036      	beq.n	40f1c4 <line_mask_flat+0xf4>
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
  40f156:	f1c2 05ff 	rsb	r5, r2, #255	; 0xff
  40f15a:	6a74      	ldr	r4, [r6, #36]	; 0x24
  40f15c:	fb04 f505 	mul.w	r5, r4, r5
  40f160:	122d      	asrs	r5, r5, #8
  40f162:	f1c5 05ff 	rsb	r5, r5, #255	; 0xff
    int32_t k = xei - abs_x;
  40f166:	ebae 0101 	sub.w	r1, lr, r1
    if(xef) {
  40f16a:	2a00      	cmp	r2, #0
  40f16c:	d05d      	beq.n	40f22a <line_mask_flat+0x15a>
        if(k >= 0 && k < len) {
  40f16e:	2900      	cmp	r1, #0
  40f170:	db1f      	blt.n	40f1b2 <line_mask_flat+0xe2>
  40f172:	428b      	cmp	r3, r1
  40f174:	dd1d      	ble.n	40f1b2 <line_mask_flat+0xe2>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
  40f176:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
  40f17a:	f1c5 04ff 	rsb	r4, r5, #255	; 0xff
  40f17e:	fb04 f202 	mul.w	r2, r4, r2
  40f182:	f3c2 2247 	ubfx	r2, r2, #9, #8
  40f186:	43d4      	mvns	r4, r2
  40f188:	b2e4      	uxtb	r4, r4
            if(p->inv) m = 255 - m;
  40f18a:	f896 e028 	ldrb.w	lr, [r6, #40]	; 0x28
  40f18e:	f01e 0f02 	tst.w	lr, #2
  40f192:	d100      	bne.n	40f196 <line_mask_flat+0xc6>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
  40f194:	4622      	mov	r2, r4
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40f196:	5c44      	ldrb	r4, [r0, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f198:	2afc      	cmp	r2, #252	; 0xfc
  40f19a:	d809      	bhi.n	40f1b0 <line_mask_flat+0xe0>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f19c:	2a02      	cmp	r2, #2
  40f19e:	d913      	bls.n	40f1c8 <line_mask_flat+0xf8>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f1a0:	fb04 f202 	mul.w	r2, r4, r2
  40f1a4:	eb02 2402 	add.w	r4, r2, r2, lsl #8
  40f1a8:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
  40f1ac:	f3c2 54c7 	ubfx	r4, r2, #23, #8
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40f1b0:	5444      	strb	r4, [r0, r1]
        k++;
  40f1b2:	1c4a      	adds	r2, r1, #1
  40f1b4:	e013      	b.n	40f1de <line_mask_flat+0x10e>
    else xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
  40f1b6:	3201      	adds	r2, #1
  40f1b8:	0212      	lsls	r2, r2, #8
  40f1ba:	69b4      	ldr	r4, [r6, #24]
  40f1bc:	fb04 f202 	mul.w	r2, r4, r2
  40f1c0:	1292      	asrs	r2, r2, #10
  40f1c2:	e7c3      	b.n	40f14c <line_mask_flat+0x7c>
    if(xef == 0) px_h = 255;
  40f1c4:	25ff      	movs	r5, #255	; 0xff
  40f1c6:	e7ce      	b.n	40f166 <line_mask_flat+0x96>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f1c8:	2400      	movs	r4, #0
  40f1ca:	e7f1      	b.n	40f1b0 <line_mask_flat+0xe0>
  40f1cc:	f04f 0e00 	mov.w	lr, #0
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40f1d0:	f88c e000 	strb.w	lr, [ip]
        px_h -= p->spx;
  40f1d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
  40f1d6:	1b2d      	subs	r5, r5, r4
        k++;
  40f1d8:	3201      	adds	r2, #1
        if(k >= len) break;
  40f1da:	4297      	cmp	r7, r2
  40f1dc:	dd27      	ble.n	40f22e <line_mask_flat+0x15e>
    while(px_h > p->spx) {
  40f1de:	f8d6 e024 	ldr.w	lr, [r6, #36]	; 0x24
  40f1e2:	4575      	cmp	r5, lr
  40f1e4:	dd23      	ble.n	40f22e <line_mask_flat+0x15e>
        if(k >= 0 && k < len) {
  40f1e6:	2a00      	cmp	r2, #0
  40f1e8:	dbf4      	blt.n	40f1d4 <line_mask_flat+0x104>
  40f1ea:	42ba      	cmp	r2, r7
  40f1ec:	daf2      	bge.n	40f1d4 <line_mask_flat+0x104>
            m = px_h - (p->spx >> 1);
  40f1ee:	b2ec      	uxtb	r4, r5
  40f1f0:	f3ce 0e47 	ubfx	lr, lr, #1, #8
  40f1f4:	eba4 040e 	sub.w	r4, r4, lr
  40f1f8:	b2e4      	uxtb	r4, r4
            if(p->inv) m = 255 - m;
  40f1fa:	f896 e028 	ldrb.w	lr, [r6, #40]	; 0x28
  40f1fe:	f01e 0f02 	tst.w	lr, #2
  40f202:	d001      	beq.n	40f208 <line_mask_flat+0x138>
  40f204:	43e4      	mvns	r4, r4
  40f206:	b2e4      	uxtb	r4, r4
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40f208:	eb00 0c02 	add.w	ip, r0, r2
  40f20c:	f810 e002 	ldrb.w	lr, [r0, r2]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f210:	2cfc      	cmp	r4, #252	; 0xfc
  40f212:	d8dd      	bhi.n	40f1d0 <line_mask_flat+0x100>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f214:	2c02      	cmp	r4, #2
  40f216:	d9d9      	bls.n	40f1cc <line_mask_flat+0xfc>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f218:	fb04 f40e 	mul.w	r4, r4, lr
  40f21c:	eb04 2e04 	add.w	lr, r4, r4, lsl #8
  40f220:	eb04 14ce 	add.w	r4, r4, lr, lsl #7
  40f224:	f3c4 5ec7 	ubfx	lr, r4, #23, #8
  40f228:	e7d2      	b.n	40f1d0 <line_mask_flat+0x100>
    int32_t k = xei - abs_x;
  40f22a:	460a      	mov	r2, r1
  40f22c:	e7d7      	b.n	40f1de <line_mask_flat+0x10e>
    if(k < len && k >= 0) {
  40f22e:	429a      	cmp	r2, r3
  40f230:	da27      	bge.n	40f282 <line_mask_flat+0x1b2>
  40f232:	2a00      	cmp	r2, #0
  40f234:	db25      	blt.n	40f282 <line_mask_flat+0x1b2>
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
  40f236:	69b4      	ldr	r4, [r6, #24]
  40f238:	fb04 f405 	mul.w	r4, r4, r5
  40f23c:	12a4      	asrs	r4, r4, #10
        m = (x_inters * px_h) >> 9;
  40f23e:	fb04 f505 	mul.w	r5, r4, r5
  40f242:	f3c5 2547 	ubfx	r5, r5, #9, #8
        if(p->yx_steep < 0) m = 255 - m;
  40f246:	69f4      	ldr	r4, [r6, #28]
  40f248:	2c00      	cmp	r4, #0
  40f24a:	db15      	blt.n	40f278 <line_mask_flat+0x1a8>
        if(p->inv) m = 255 - m;
  40f24c:	f896 4028 	ldrb.w	r4, [r6, #40]	; 0x28
  40f250:	f014 0f02 	tst.w	r4, #2
  40f254:	d001      	beq.n	40f25a <line_mask_flat+0x18a>
  40f256:	43ed      	mvns	r5, r5
  40f258:	b2ed      	uxtb	r5, r5
        mask_buf[k] = mask_mix(mask_buf[k], m);
  40f25a:	1887      	adds	r7, r0, r2
  40f25c:	5c84      	ldrb	r4, [r0, r2]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f25e:	2dfc      	cmp	r5, #252	; 0xfc
  40f260:	d80e      	bhi.n	40f280 <line_mask_flat+0x1b0>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f262:	2d02      	cmp	r5, #2
  40f264:	d90b      	bls.n	40f27e <line_mask_flat+0x1ae>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f266:	fb05 f504 	mul.w	r5, r5, r4
  40f26a:	eb05 2405 	add.w	r4, r5, r5, lsl #8
  40f26e:	eb05 15c4 	add.w	r5, r5, r4, lsl #7
  40f272:	f3c5 54c7 	ubfx	r4, r5, #23, #8
  40f276:	e003      	b.n	40f280 <line_mask_flat+0x1b0>
        if(p->yx_steep < 0) m = 255 - m;
  40f278:	43ed      	mvns	r5, r5
  40f27a:	b2ed      	uxtb	r5, r5
  40f27c:	e7e6      	b.n	40f24c <line_mask_flat+0x17c>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f27e:	2400      	movs	r4, #0
        mask_buf[k] = mask_mix(mask_buf[k], m);
  40f280:	703c      	strb	r4, [r7, #0]
    if(p->inv) {
  40f282:	f896 4028 	ldrb.w	r4, [r6, #40]	; 0x28
  40f286:	f014 0f02 	tst.w	r4, #2
  40f28a:	d007      	beq.n	40f29c <line_mask_flat+0x1cc>
        if(k > len) {
  40f28c:	428b      	cmp	r3, r1
  40f28e:	db19      	blt.n	40f2c4 <line_mask_flat+0x1f4>
        if(k >= 0) {
  40f290:	2900      	cmp	r1, #0
  40f292:	db19      	blt.n	40f2c8 <line_mask_flat+0x1f8>
            _lv_memset_00(&mask_buf[0], k);
  40f294:	4b0e      	ldr	r3, [pc, #56]	; (40f2d0 <line_mask_flat+0x200>)
  40f296:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40f298:	2002      	movs	r0, #2
  40f29a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(k < 0) {
  40f29c:	3201      	adds	r2, #1
  40f29e:	d415      	bmi.n	40f2cc <line_mask_flat+0x1fc>
        if(k <= len) {
  40f2a0:	4293      	cmp	r3, r2
  40f2a2:	da01      	bge.n	40f2a8 <line_mask_flat+0x1d8>
    return LV_DRAW_MASK_RES_CHANGED;
  40f2a4:	2002      	movs	r0, #2
}
  40f2a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            _lv_memset_00(&mask_buf[k], len - k);
  40f2a8:	1a99      	subs	r1, r3, r2
  40f2aa:	4410      	add	r0, r2
  40f2ac:	4b08      	ldr	r3, [pc, #32]	; (40f2d0 <line_mask_flat+0x200>)
  40f2ae:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40f2b0:	2002      	movs	r0, #2
  40f2b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return LV_DRAW_MASK_RES_TRANSP;
  40f2b4:	2000      	movs	r0, #0
  40f2b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return LV_DRAW_MASK_RES_TRANSP;
  40f2b8:	2000      	movs	r0, #0
  40f2ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return LV_DRAW_MASK_RES_FULL_COVER;
  40f2bc:	2001      	movs	r0, #1
  40f2be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return LV_DRAW_MASK_RES_FULL_COVER;
  40f2c0:	2001      	movs	r0, #1
  40f2c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return LV_DRAW_MASK_RES_TRANSP;
  40f2c4:	2000      	movs	r0, #0
  40f2c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40f2c8:	2002      	movs	r0, #2
  40f2ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return LV_DRAW_MASK_RES_TRANSP;
  40f2cc:	2000      	movs	r0, #0
  40f2ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40f2d0:	00416c0d 	.word	0x00416c0d

0040f2d4 <line_mask_steep>:
{
  40f2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40f2d6:	9e06      	ldr	r6, [sp, #24]
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
  40f2d8:	69b5      	ldr	r5, [r6, #24]
  40f2da:	fb02 f405 	mul.w	r4, r2, r5
  40f2de:	12a4      	asrs	r4, r4, #10
    if(p->xy_steep > 0) x_at_y++;
  40f2e0:	2d00      	cmp	r5, #0
  40f2e2:	dd0a      	ble.n	40f2fa <line_mask_steep+0x26>
  40f2e4:	1c67      	adds	r7, r4, #1
    if(x_at_y < abs_x) {
  40f2e6:	428f      	cmp	r7, r1
  40f2e8:	da09      	bge.n	40f2fe <line_mask_steep+0x2a>
        if(p->inv) {
  40f2ea:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  40f2ee:	f013 0f02 	tst.w	r3, #2
  40f2f2:	f000 8156 	beq.w	40f5a2 <line_mask_steep+0x2ce>
            return LV_DRAW_MASK_RES_FULL_COVER;
  40f2f6:	2001      	movs	r0, #1
  40f2f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
  40f2fa:	4627      	mov	r7, r4
  40f2fc:	e7f3      	b.n	40f2e6 <line_mask_steep+0x12>
    if(x_at_y > abs_x + len) {
  40f2fe:	18cf      	adds	r7, r1, r3
  40f300:	42bc      	cmp	r4, r7
  40f302:	dd07      	ble.n	40f314 <line_mask_steep+0x40>
        if(p->inv) {
  40f304:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  40f308:	f013 0f02 	tst.w	r3, #2
  40f30c:	f000 814b 	beq.w	40f5a6 <line_mask_steep+0x2d2>
            return LV_DRAW_MASK_RES_TRANSP;
  40f310:	2000      	movs	r0, #0
  40f312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    int32_t xs = ((abs_y << 8) * p->xy_steep) >> 10;
  40f314:	0217      	lsls	r7, r2, #8
  40f316:	fb07 f705 	mul.w	r7, r7, r5
    int32_t xsi = xs >> 8;
  40f31a:	14bc      	asrs	r4, r7, #18
    int32_t xsf = xs & 0xFF;
  40f31c:	f3c7 2e87 	ubfx	lr, r7, #10, #8
    int32_t xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
  40f320:	3201      	adds	r2, #1
  40f322:	0212      	lsls	r2, r2, #8
  40f324:	fb02 f205 	mul.w	r2, r2, r5
    int32_t xei = xe >> 8;
  40f328:	ea4f 4ca2 	mov.w	ip, r2, asr #18
    int32_t xef = xe & 0xFF;
  40f32c:	f3c2 2287 	ubfx	r2, r2, #10, #8
    k = xsi - abs_x;
  40f330:	1a67      	subs	r7, r4, r1
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
  40f332:	4564      	cmp	r4, ip
  40f334:	d001      	beq.n	40f33a <line_mask_steep+0x66>
  40f336:	2d00      	cmp	r5, #0
  40f338:	db68      	blt.n	40f40c <line_mask_steep+0x138>
    if(xsi == xei) {
  40f33a:	4564      	cmp	r4, ip
  40f33c:	d06e      	beq.n	40f41c <line_mask_steep+0x148>
        if(p->xy_steep < 0) {
  40f33e:	2d00      	cmp	r5, #0
  40f340:	f2c0 80ad 	blt.w	40f49e <line_mask_steep+0x1ca>
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
  40f344:	f1ce 02ff 	rsb	r2, lr, #255	; 0xff
  40f348:	69f5      	ldr	r5, [r6, #28]
  40f34a:	fb05 f502 	mul.w	r5, r5, r2
  40f34e:	12ad      	asrs	r5, r5, #10
            if(k >= 0 && k < len) {
  40f350:	2f00      	cmp	r7, #0
  40f352:	db22      	blt.n	40f39a <line_mask_steep+0xc6>
  40f354:	429f      	cmp	r7, r3
  40f356:	da20      	bge.n	40f39a <line_mask_steep+0xc6>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
  40f358:	fb05 f202 	mul.w	r2, r5, r2
  40f35c:	f3c2 2247 	ubfx	r2, r2, #9, #8
  40f360:	ea6f 0e02 	mvn.w	lr, r2
  40f364:	fa5f fe8e 	uxtb.w	lr, lr
                if(p->inv) m = 255 - m;
  40f368:	f896 c028 	ldrb.w	ip, [r6, #40]	; 0x28
  40f36c:	f01c 0f02 	tst.w	ip, #2
  40f370:	d100      	bne.n	40f374 <line_mask_steep+0xa0>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
  40f372:	4672      	mov	r2, lr
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40f374:	eb00 0c07 	add.w	ip, r0, r7
  40f378:	f810 e007 	ldrb.w	lr, [r0, r7]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f37c:	2afc      	cmp	r2, #252	; 0xfc
  40f37e:	d80a      	bhi.n	40f396 <line_mask_steep+0xc2>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f380:	2a02      	cmp	r2, #2
  40f382:	f240 80fd 	bls.w	40f580 <line_mask_steep+0x2ac>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f386:	fb02 f20e 	mul.w	r2, r2, lr
  40f38a:	eb02 2e02 	add.w	lr, r2, r2, lsl #8
  40f38e:	eb02 12ce 	add.w	r2, r2, lr, lsl #7
  40f392:	f3c2 5ec7 	ubfx	lr, r2, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40f396:	f88c e000 	strb.w	lr, [ip]
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
  40f39a:	f1c5 05ff 	rsb	r5, r5, #255	; 0xff
  40f39e:	69b2      	ldr	r2, [r6, #24]
  40f3a0:	fb02 f205 	mul.w	r2, r2, r5
  40f3a4:	1292      	asrs	r2, r2, #10
            if(k >= 0 && k < len) {
  40f3a6:	f117 0e01 	adds.w	lr, r7, #1
  40f3aa:	d41d      	bmi.n	40f3e8 <line_mask_steep+0x114>
  40f3ac:	4573      	cmp	r3, lr
  40f3ae:	dd1b      	ble.n	40f3e8 <line_mask_steep+0x114>
                m = ((255 - y_inters) * x_inters) >> 9;
  40f3b0:	fb02 f205 	mul.w	r2, r2, r5
  40f3b4:	f3c2 2247 	ubfx	r2, r2, #9, #8
                if(p->inv) m = 255 - m;
  40f3b8:	f896 5028 	ldrb.w	r5, [r6, #40]	; 0x28
  40f3bc:	f015 0f02 	tst.w	r5, #2
  40f3c0:	d001      	beq.n	40f3c6 <line_mask_steep+0xf2>
  40f3c2:	43d2      	mvns	r2, r2
  40f3c4:	b2d2      	uxtb	r2, r2
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40f3c6:	f810 500e 	ldrb.w	r5, [r0, lr]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f3ca:	2afc      	cmp	r2, #252	; 0xfc
  40f3cc:	d80a      	bhi.n	40f3e4 <line_mask_steep+0x110>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f3ce:	2a02      	cmp	r2, #2
  40f3d0:	f240 80d9 	bls.w	40f586 <line_mask_steep+0x2b2>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f3d4:	fb02 f205 	mul.w	r2, r2, r5
  40f3d8:	eb02 2502 	add.w	r5, r2, r2, lsl #8
  40f3dc:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
  40f3e0:	f3c2 55c7 	ubfx	r5, r2, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40f3e4:	f800 500e 	strb.w	r5, [r0, lr]
            k++;
  40f3e8:	3702      	adds	r7, #2
            if(p->inv) {
  40f3ea:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
  40f3ee:	f012 0f02 	tst.w	r2, #2
  40f3f2:	f000 80ca 	beq.w	40f58a <line_mask_steep+0x2b6>
                k = xsi - abs_x;
  40f3f6:	1a61      	subs	r1, r4, r1
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
  40f3f8:	428b      	cmp	r3, r1
  40f3fa:	f2c0 80e4 	blt.w	40f5c6 <line_mask_steep+0x2f2>
                if(k >= 0) _lv_memset_00(&mask_buf[0],  k);
  40f3fe:	2900      	cmp	r1, #0
  40f400:	f2c0 80e3 	blt.w	40f5ca <line_mask_steep+0x2f6>
  40f404:	4b74      	ldr	r3, [pc, #464]	; (40f5d8 <line_mask_steep+0x304>)
  40f406:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40f408:	2002      	movs	r0, #2
  40f40a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
  40f40c:	f1be 0f00 	cmp.w	lr, #0
  40f410:	d193      	bne.n	40f33a <line_mask_steep+0x66>
        k--;
  40f412:	3f01      	subs	r7, #1
        xsi = xei;
  40f414:	4664      	mov	r4, ip
        xsf = 0xFF;
  40f416:	f04f 0eff 	mov.w	lr, #255	; 0xff
  40f41a:	e78e      	b.n	40f33a <line_mask_steep+0x66>
        if(k >= 0 && k < len) {
  40f41c:	2f00      	cmp	r7, #0
  40f41e:	db1c      	blt.n	40f45a <line_mask_steep+0x186>
  40f420:	429f      	cmp	r7, r3
  40f422:	da1a      	bge.n	40f45a <line_mask_steep+0x186>
            m = (xsf + xef) >> 1;
  40f424:	4472      	add	r2, lr
  40f426:	f3c2 0247 	ubfx	r2, r2, #1, #8
            if(p->inv) m = 255 - m;
  40f42a:	f896 5028 	ldrb.w	r5, [r6, #40]	; 0x28
  40f42e:	f015 0f02 	tst.w	r5, #2
  40f432:	d001      	beq.n	40f438 <line_mask_steep+0x164>
  40f434:	43d2      	mvns	r2, r2
  40f436:	b2d2      	uxtb	r2, r2
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40f438:	eb00 0e07 	add.w	lr, r0, r7
  40f43c:	5dc5      	ldrb	r5, [r0, r7]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f43e:	2afc      	cmp	r2, #252	; 0xfc
  40f440:	d809      	bhi.n	40f456 <line_mask_steep+0x182>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f442:	2a02      	cmp	r2, #2
  40f444:	d91a      	bls.n	40f47c <line_mask_steep+0x1a8>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f446:	fb05 f202 	mul.w	r2, r5, r2
  40f44a:	eb02 2502 	add.w	r5, r2, r2, lsl #8
  40f44e:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
  40f452:	f3c2 55c7 	ubfx	r5, r2, #23, #8
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40f456:	f88e 5000 	strb.w	r5, [lr]
        k++;
  40f45a:	3701      	adds	r7, #1
        if(p->inv) {
  40f45c:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
  40f460:	f012 0f02 	tst.w	r2, #2
  40f464:	d00c      	beq.n	40f480 <line_mask_steep+0x1ac>
            k = xsi - abs_x;
  40f466:	1a61      	subs	r1, r4, r1
            if(k >= len) {
  40f468:	428b      	cmp	r3, r1
  40f46a:	f340 809e 	ble.w	40f5aa <line_mask_steep+0x2d6>
            if(k >= 0) _lv_memset_00(&mask_buf[0], k);
  40f46e:	2900      	cmp	r1, #0
  40f470:	f2c0 809d 	blt.w	40f5ae <line_mask_steep+0x2da>
  40f474:	4b58      	ldr	r3, [pc, #352]	; (40f5d8 <line_mask_steep+0x304>)
  40f476:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40f478:	2002      	movs	r0, #2
  40f47a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(mask_new <= LV_OPA_MIN) return 0;
  40f47c:	2500      	movs	r5, #0
  40f47e:	e7ea      	b.n	40f456 <line_mask_steep+0x182>
            if(k > len) k = len;
  40f480:	42bb      	cmp	r3, r7
  40f482:	da00      	bge.n	40f486 <line_mask_steep+0x1b2>
  40f484:	461f      	mov	r7, r3
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
  40f486:	2f00      	cmp	r7, #0
  40f488:	f000 8093 	beq.w	40f5b2 <line_mask_steep+0x2de>
            else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
  40f48c:	2f00      	cmp	r7, #0
  40f48e:	f340 8092 	ble.w	40f5b6 <line_mask_steep+0x2e2>
  40f492:	1bd9      	subs	r1, r3, r7
  40f494:	4438      	add	r0, r7
  40f496:	4b50      	ldr	r3, [pc, #320]	; (40f5d8 <line_mask_steep+0x304>)
  40f498:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40f49a:	2002      	movs	r0, #2
  40f49c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            y_inters = (xsf * (-p->yx_steep)) >> 10;
  40f49e:	69f2      	ldr	r2, [r6, #28]
  40f4a0:	4252      	negs	r2, r2
  40f4a2:	fb02 f20e 	mul.w	r2, r2, lr
  40f4a6:	1292      	asrs	r2, r2, #10
            if(k >= 0 && k < len) {
  40f4a8:	2f00      	cmp	r7, #0
  40f4aa:	db23      	blt.n	40f4f4 <line_mask_steep+0x220>
  40f4ac:	429f      	cmp	r7, r3
  40f4ae:	da21      	bge.n	40f4f4 <line_mask_steep+0x220>
                m = (y_inters * xsf) >> 9;
  40f4b0:	fb02 fe0e 	mul.w	lr, r2, lr
  40f4b4:	f3ce 2e47 	ubfx	lr, lr, #9, #8
                if(p->inv) m = 255 - m;
  40f4b8:	f896 5028 	ldrb.w	r5, [r6, #40]	; 0x28
  40f4bc:	f015 0f02 	tst.w	r5, #2
  40f4c0:	d003      	beq.n	40f4ca <line_mask_steep+0x1f6>
  40f4c2:	ea6f 0e0e 	mvn.w	lr, lr
  40f4c6:	fa5f fe8e 	uxtb.w	lr, lr
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40f4ca:	eb00 0c07 	add.w	ip, r0, r7
  40f4ce:	5dc5      	ldrb	r5, [r0, r7]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f4d0:	f1be 0ffc 	cmp.w	lr, #252	; 0xfc
  40f4d4:	d80c      	bhi.n	40f4f0 <line_mask_steep+0x21c>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f4d6:	f1be 0f02 	cmp.w	lr, #2
  40f4da:	d908      	bls.n	40f4ee <line_mask_steep+0x21a>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f4dc:	fb0e fe05 	mul.w	lr, lr, r5
  40f4e0:	eb0e 250e 	add.w	r5, lr, lr, lsl #8
  40f4e4:	eb0e 1ec5 	add.w	lr, lr, r5, lsl #7
  40f4e8:	f3ce 55c7 	ubfx	r5, lr, #23, #8
  40f4ec:	e000      	b.n	40f4f0 <line_mask_steep+0x21c>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f4ee:	2500      	movs	r5, #0
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40f4f0:	f88c 5000 	strb.w	r5, [ip]
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
  40f4f4:	f1c2 05ff 	rsb	r5, r2, #255	; 0xff
  40f4f8:	69b2      	ldr	r2, [r6, #24]
  40f4fa:	4252      	negs	r2, r2
  40f4fc:	fb02 f205 	mul.w	r2, r2, r5
  40f500:	1292      	asrs	r2, r2, #10
            if(k >= 0 && k < len) {
  40f502:	f1b7 0e01 	subs.w	lr, r7, #1
  40f506:	d41f      	bmi.n	40f548 <line_mask_steep+0x274>
  40f508:	4573      	cmp	r3, lr
  40f50a:	dd1d      	ble.n	40f548 <line_mask_steep+0x274>
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
  40f50c:	fb02 f205 	mul.w	r2, r2, r5
  40f510:	f3c2 2247 	ubfx	r2, r2, #9, #8
  40f514:	43d5      	mvns	r5, r2
  40f516:	b2ed      	uxtb	r5, r5
                if(p->inv) m = 255 - m;
  40f518:	f896 c028 	ldrb.w	ip, [r6, #40]	; 0x28
  40f51c:	f01c 0f02 	tst.w	ip, #2
  40f520:	d100      	bne.n	40f524 <line_mask_steep+0x250>
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
  40f522:	462a      	mov	r2, r5
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40f524:	f810 500e 	ldrb.w	r5, [r0, lr]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f528:	2afc      	cmp	r2, #252	; 0xfc
  40f52a:	d80b      	bhi.n	40f544 <line_mask_steep+0x270>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f52c:	2a02      	cmp	r2, #2
  40f52e:	d908      	bls.n	40f542 <line_mask_steep+0x26e>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f530:	fb02 f205 	mul.w	r2, r2, r5
  40f534:	eb02 2502 	add.w	r5, r2, r2, lsl #8
  40f538:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
  40f53c:	f3c2 55c7 	ubfx	r5, r2, #23, #8
  40f540:	e000      	b.n	40f544 <line_mask_steep+0x270>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f542:	2500      	movs	r5, #0
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40f544:	f800 500e 	strb.w	r5, [r0, lr]
            k += 2;
  40f548:	3701      	adds	r7, #1
            if(p->inv) {
  40f54a:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
  40f54e:	f012 0f02 	tst.w	r2, #2
  40f552:	d00b      	beq.n	40f56c <line_mask_steep+0x298>
                k = xsi - abs_x - 1;
  40f554:	1a61      	subs	r1, r4, r1
  40f556:	3901      	subs	r1, #1
                if(k > len) k = len;
  40f558:	428b      	cmp	r3, r1
  40f55a:	da01      	bge.n	40f560 <line_mask_steep+0x28c>
    return LV_DRAW_MASK_RES_CHANGED;
  40f55c:	2002      	movs	r0, #2
  40f55e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                else if(k > 0) _lv_memset_00(&mask_buf[0],  k);
  40f560:	2900      	cmp	r1, #0
  40f562:	dd2a      	ble.n	40f5ba <line_mask_steep+0x2e6>
  40f564:	4b1c      	ldr	r3, [pc, #112]	; (40f5d8 <line_mask_steep+0x304>)
  40f566:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40f568:	2002      	movs	r0, #2
  40f56a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
  40f56c:	42bb      	cmp	r3, r7
  40f56e:	db26      	blt.n	40f5be <line_mask_steep+0x2ea>
                if(k >= 0) _lv_memset_00(&mask_buf[k],  len - k);
  40f570:	2f00      	cmp	r7, #0
  40f572:	db26      	blt.n	40f5c2 <line_mask_steep+0x2ee>
  40f574:	1bd9      	subs	r1, r3, r7
  40f576:	4438      	add	r0, r7
  40f578:	4b17      	ldr	r3, [pc, #92]	; (40f5d8 <line_mask_steep+0x304>)
  40f57a:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40f57c:	2002      	movs	r0, #2
  40f57e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(mask_new <= LV_OPA_MIN) return 0;
  40f580:	f04f 0e00 	mov.w	lr, #0
  40f584:	e707      	b.n	40f396 <line_mask_steep+0xc2>
  40f586:	2500      	movs	r5, #0
  40f588:	e72c      	b.n	40f3e4 <line_mask_steep+0x110>
                if(k > len) k = len;
  40f58a:	42bb      	cmp	r3, r7
  40f58c:	da00      	bge.n	40f590 <line_mask_steep+0x2bc>
  40f58e:	461f      	mov	r7, r3
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
  40f590:	b1ef      	cbz	r7, 40f5ce <line_mask_steep+0x2fa>
                else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
  40f592:	2f00      	cmp	r7, #0
  40f594:	dd1d      	ble.n	40f5d2 <line_mask_steep+0x2fe>
  40f596:	1bd9      	subs	r1, r3, r7
  40f598:	4438      	add	r0, r7
  40f59a:	4b0f      	ldr	r3, [pc, #60]	; (40f5d8 <line_mask_steep+0x304>)
  40f59c:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40f59e:	2002      	movs	r0, #2
  40f5a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return LV_DRAW_MASK_RES_TRANSP;
  40f5a2:	2000      	movs	r0, #0
  40f5a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return LV_DRAW_MASK_RES_FULL_COVER;
  40f5a6:	2001      	movs	r0, #1
  40f5a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return LV_DRAW_MASK_RES_TRANSP;
  40f5aa:	2000      	movs	r0, #0
  40f5ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40f5ae:	2002      	movs	r0, #2
  40f5b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
  40f5b2:	2000      	movs	r0, #0
  40f5b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40f5b6:	2002      	movs	r0, #2
  40f5b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40f5ba:	2002      	movs	r0, #2
  40f5bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
  40f5be:	2001      	movs	r0, #1
  40f5c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40f5c2:	2002      	movs	r0, #2
  40f5c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
  40f5c6:	2000      	movs	r0, #0
  40f5c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40f5ca:	2002      	movs	r0, #2
  40f5cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
  40f5ce:	2000      	movs	r0, #0
  40f5d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40f5d2:	2002      	movs	r0, #2
}
  40f5d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40f5d6:	bf00      	nop
  40f5d8:	00416c0d 	.word	0x00416c0d

0040f5dc <lv_draw_mask_line>:
{
  40f5dc:	b570      	push	{r4, r5, r6, lr}
  40f5de:	b082      	sub	sp, #8
  40f5e0:	9c06      	ldr	r4, [sp, #24]
    abs_y -= p->origo.y;
  40f5e2:	8aa5      	ldrh	r5, [r4, #20]
  40f5e4:	1b52      	subs	r2, r2, r5
  40f5e6:	b212      	sxth	r2, r2
    abs_x -= p->origo.x;
  40f5e8:	8a65      	ldrh	r5, [r4, #18]
  40f5ea:	1b49      	subs	r1, r1, r5
  40f5ec:	b209      	sxth	r1, r1
    if(p->steep == 0) {
  40f5ee:	6a26      	ldr	r6, [r4, #32]
  40f5f0:	2e00      	cmp	r6, #0
  40f5f2:	d146      	bne.n	40f682 <lv_draw_mask_line+0xa6>
        if(p->flat) {
  40f5f4:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
  40f5f8:	f015 0f01 	tst.w	r5, #1
  40f5fc:	d015      	beq.n	40f62a <lv_draw_mask_line+0x4e>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
  40f5fe:	7c23      	ldrb	r3, [r4, #16]
  40f600:	f003 0303 	and.w	r3, r3, #3
  40f604:	2b01      	cmp	r3, #1
  40f606:	d94a      	bls.n	40f69e <lv_draw_mask_line+0xc2>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40f608:	2b02      	cmp	r3, #2
  40f60a:	d003      	beq.n	40f614 <lv_draw_mask_line+0x38>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40f60c:	2b03      	cmp	r3, #3
  40f60e:	d006      	beq.n	40f61e <lv_draw_mask_line+0x42>
                return LV_DRAW_MASK_RES_TRANSP;
  40f610:	2000      	movs	r0, #0
  40f612:	e03e      	b.n	40f692 <lv_draw_mask_line+0xb6>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40f614:	f112 0f01 	cmn.w	r2, #1
  40f618:	d5f8      	bpl.n	40f60c <lv_draw_mask_line+0x30>
  40f61a:	2001      	movs	r0, #1
  40f61c:	e039      	b.n	40f692 <lv_draw_mask_line+0xb6>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40f61e:	2a00      	cmp	r2, #0
  40f620:	dd01      	ble.n	40f626 <lv_draw_mask_line+0x4a>
  40f622:	2001      	movs	r0, #1
  40f624:	e035      	b.n	40f692 <lv_draw_mask_line+0xb6>
                return LV_DRAW_MASK_RES_TRANSP;
  40f626:	2000      	movs	r0, #0
  40f628:	e033      	b.n	40f692 <lv_draw_mask_line+0xb6>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
  40f62a:	7c22      	ldrb	r2, [r4, #16]
  40f62c:	f002 0203 	and.w	r2, r2, #3
  40f630:	1e94      	subs	r4, r2, #2
  40f632:	b2e4      	uxtb	r4, r4
  40f634:	2c01      	cmp	r4, #1
  40f636:	d934      	bls.n	40f6a2 <lv_draw_mask_line+0xc6>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40f638:	2a01      	cmp	r2, #1
  40f63a:	d009      	beq.n	40f650 <lv_draw_mask_line+0x74>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) {
  40f63c:	b992      	cbnz	r2, 40f664 <lv_draw_mask_line+0x88>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40f63e:	18ca      	adds	r2, r1, r3
  40f640:	d431      	bmi.n	40f6a6 <lv_draw_mask_line+0xca>
                    int32_t k = - abs_x;
  40f642:	424d      	negs	r5, r1
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
  40f644:	2d00      	cmp	r5, #0
  40f646:	db30      	blt.n	40f6aa <lv_draw_mask_line+0xce>
                    if(k >= 0 && k < len) _lv_memset_00(&mask_buf[k], len - k);
  40f648:	42ab      	cmp	r3, r5
  40f64a:	dc05      	bgt.n	40f658 <lv_draw_mask_line+0x7c>
                    return LV_DRAW_MASK_RES_CHANGED;
  40f64c:	2002      	movs	r0, #2
  40f64e:	e020      	b.n	40f692 <lv_draw_mask_line+0xb6>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40f650:	2900      	cmp	r1, #0
  40f652:	ddf3      	ble.n	40f63c <lv_draw_mask_line+0x60>
  40f654:	2001      	movs	r0, #1
  40f656:	e01c      	b.n	40f692 <lv_draw_mask_line+0xb6>
                    if(k >= 0 && k < len) _lv_memset_00(&mask_buf[k], len - k);
  40f658:	4611      	mov	r1, r2
  40f65a:	4428      	add	r0, r5
  40f65c:	4b17      	ldr	r3, [pc, #92]	; (40f6bc <lv_draw_mask_line+0xe0>)
  40f65e:	4798      	blx	r3
                    return LV_DRAW_MASK_RES_CHANGED;
  40f660:	2002      	movs	r0, #2
  40f662:	e016      	b.n	40f692 <lv_draw_mask_line+0xb6>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
  40f664:	42d9      	cmn	r1, r3
  40f666:	d422      	bmi.n	40f6ae <lv_draw_mask_line+0xd2>
                    int32_t k = - abs_x;
  40f668:	4249      	negs	r1, r1
                    if(k < 0) k = 0;
  40f66a:	2900      	cmp	r1, #0
  40f66c:	db07      	blt.n	40f67e <lv_draw_mask_line+0xa2>
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
  40f66e:	4299      	cmp	r1, r3
  40f670:	da1f      	bge.n	40f6b2 <lv_draw_mask_line+0xd6>
                    else if(k >= 0 && k < len) _lv_memset_00(&mask_buf[0], k);
  40f672:	2900      	cmp	r1, #0
  40f674:	db1f      	blt.n	40f6b6 <lv_draw_mask_line+0xda>
  40f676:	4b11      	ldr	r3, [pc, #68]	; (40f6bc <lv_draw_mask_line+0xe0>)
  40f678:	4798      	blx	r3
                    return LV_DRAW_MASK_RES_CHANGED;
  40f67a:	2002      	movs	r0, #2
  40f67c:	e009      	b.n	40f692 <lv_draw_mask_line+0xb6>
                    if(k < 0) k = 0;
  40f67e:	4631      	mov	r1, r6
  40f680:	e7f5      	b.n	40f66e <lv_draw_mask_line+0x92>
    if(p->flat) {
  40f682:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
  40f686:	f015 0f01 	tst.w	r5, #1
  40f68a:	d104      	bne.n	40f696 <lv_draw_mask_line+0xba>
        res = line_mask_steep(mask_buf, abs_x, abs_y, len, p);
  40f68c:	9400      	str	r4, [sp, #0]
  40f68e:	4c0c      	ldr	r4, [pc, #48]	; (40f6c0 <lv_draw_mask_line+0xe4>)
  40f690:	47a0      	blx	r4
}
  40f692:	b002      	add	sp, #8
  40f694:	bd70      	pop	{r4, r5, r6, pc}
        res = line_mask_flat(mask_buf, abs_x, abs_y, len, p);
  40f696:	9400      	str	r4, [sp, #0]
  40f698:	4c0a      	ldr	r4, [pc, #40]	; (40f6c4 <lv_draw_mask_line+0xe8>)
  40f69a:	47a0      	blx	r4
  40f69c:	e7f9      	b.n	40f692 <lv_draw_mask_line+0xb6>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
  40f69e:	2001      	movs	r0, #1
  40f6a0:	e7f7      	b.n	40f692 <lv_draw_mask_line+0xb6>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) return LV_DRAW_MASK_RES_FULL_COVER;
  40f6a2:	2001      	movs	r0, #1
  40f6a4:	e7f5      	b.n	40f692 <lv_draw_mask_line+0xb6>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40f6a6:	2001      	movs	r0, #1
  40f6a8:	e7f3      	b.n	40f692 <lv_draw_mask_line+0xb6>
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
  40f6aa:	2000      	movs	r0, #0
  40f6ac:	e7f1      	b.n	40f692 <lv_draw_mask_line+0xb6>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
  40f6ae:	2000      	movs	r0, #0
  40f6b0:	e7ef      	b.n	40f692 <lv_draw_mask_line+0xb6>
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
  40f6b2:	2000      	movs	r0, #0
  40f6b4:	e7ed      	b.n	40f692 <lv_draw_mask_line+0xb6>
                    return LV_DRAW_MASK_RES_CHANGED;
  40f6b6:	2002      	movs	r0, #2
  40f6b8:	e7eb      	b.n	40f692 <lv_draw_mask_line+0xb6>
  40f6ba:	bf00      	nop
  40f6bc:	00416c0d 	.word	0x00416c0d
  40f6c0:	0040f2d5 	.word	0x0040f2d5
  40f6c4:	0040f0d1 	.word	0x0040f0d1

0040f6c8 <lv_draw_mask_radius>:
{
  40f6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40f6cc:	b08b      	sub	sp, #44	; 0x2c
  40f6ce:	9e14      	ldr	r6, [sp, #80]	; 0x50
    bool outer = p->cfg.outer;
  40f6d0:	7cb5      	ldrb	r5, [r6, #18]
  40f6d2:	f005 0501 	and.w	r5, r5, #1
    int32_t radius = p->cfg.radius;
  40f6d6:	f9b6 9010 	ldrsh.w	r9, [r6, #16]
    lv_area_copy(&rect, &p->cfg.rect);
  40f6da:	f106 0c08 	add.w	ip, r6, #8
    uint8_t * d8 = (uint8_t *)dst;
  40f6de:	f10d 0e20 	add.w	lr, sp, #32
  40f6e2:	2408      	movs	r4, #8
  40f6e4:	e004      	b.n	40f6f0 <lv_draw_mask_radius+0x28>
        *d8 = *s8;
  40f6e6:	f81c 7b01 	ldrb.w	r7, [ip], #1
  40f6ea:	f80e 7b01 	strb.w	r7, [lr], #1
        len--;
  40f6ee:	3c01      	subs	r4, #1
    while(len) {
  40f6f0:	2c00      	cmp	r4, #0
  40f6f2:	d1f8      	bne.n	40f6e6 <lv_draw_mask_radius+0x1e>
    if(outer == false) {
  40f6f4:	2d00      	cmp	r5, #0
  40f6f6:	d13f      	bne.n	40f778 <lv_draw_mask_radius+0xb0>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
  40f6f8:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
  40f6fc:	4294      	cmp	r4, r2
  40f6fe:	f300 829d 	bgt.w	40fc3c <lv_draw_mask_radius+0x574>
  40f702:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
  40f706:	42a2      	cmp	r2, r4
  40f708:	f300 829c 	bgt.w	40fc44 <lv_draw_mask_radius+0x57c>
  40f70c:	461f      	mov	r7, r3
  40f70e:	468b      	mov	fp, r1
  40f710:	4680      	mov	r8, r0
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
  40f712:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
  40f716:	eb09 0103 	add.w	r1, r9, r3
  40f71a:	458b      	cmp	fp, r1
  40f71c:	db07      	blt.n	40f72e <lv_draw_mask_radius+0x66>
  40f71e:	eb07 000b 	add.w	r0, r7, fp
  40f722:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
  40f726:	eba1 0109 	sub.w	r1, r1, r9
  40f72a:	4288      	cmp	r0, r1
  40f72c:	dd0b      	ble.n	40f746 <lv_draw_mask_radius+0x7e>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
  40f72e:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
  40f732:	eb09 0001 	add.w	r0, r9, r1
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
  40f736:	4282      	cmp	r2, r0
  40f738:	db50      	blt.n	40f7dc <lv_draw_mask_radius+0x114>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
  40f73a:	f9bd 0026 	ldrsh.w	r0, [sp, #38]	; 0x26
  40f73e:	eba0 0009 	sub.w	r0, r0, r9
  40f742:	4282      	cmp	r2, r0
  40f744:	dc4a      	bgt.n	40f7dc <lv_draw_mask_radius+0x114>
        if(outer == false) {
  40f746:	bb6d      	cbnz	r5, 40f7a4 <lv_draw_mask_radius+0xdc>
            int32_t last =  rect.x1 - abs_x;
  40f748:	eba3 050b 	sub.w	r5, r3, fp
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
  40f74c:	42bd      	cmp	r5, r7
  40f74e:	f300 827d 	bgt.w	40fc4c <lv_draw_mask_radius+0x584>
            if(last >= 0) {
  40f752:	2d00      	cmp	r5, #0
  40f754:	db03      	blt.n	40f75e <lv_draw_mask_radius+0x96>
                _lv_memset_00(&mask_buf[0], last);
  40f756:	4629      	mov	r1, r5
  40f758:	4640      	mov	r0, r8
  40f75a:	4ba7      	ldr	r3, [pc, #668]	; (40f9f8 <lv_draw_mask_radius+0x330>)
  40f75c:	4798      	blx	r3
            int32_t first = rect.x2 - abs_x + 1;
  40f75e:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
  40f762:	eba3 040b 	sub.w	r4, r3, fp
  40f766:	3401      	adds	r4, #1
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
  40f768:	2c00      	cmp	r4, #0
  40f76a:	f340 8271 	ble.w	40fc50 <lv_draw_mask_radius+0x588>
            else if(first < len) {
  40f76e:	42a7      	cmp	r7, r4
  40f770:	dc0d      	bgt.n	40f78e <lv_draw_mask_radius+0xc6>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
  40f772:	b195      	cbz	r5, 40f79a <lv_draw_mask_radius+0xd2>
            else return LV_DRAW_MASK_RES_CHANGED;
  40f774:	2002      	movs	r0, #2
  40f776:	e262      	b.n	40fc3e <lv_draw_mask_radius+0x576>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
  40f778:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
  40f77c:	42a2      	cmp	r2, r4
  40f77e:	f2c0 8263 	blt.w	40fc48 <lv_draw_mask_radius+0x580>
  40f782:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
  40f786:	42a2      	cmp	r2, r4
  40f788:	ddc0      	ble.n	40f70c <lv_draw_mask_radius+0x44>
            return LV_DRAW_MASK_RES_FULL_COVER;
  40f78a:	2001      	movs	r0, #1
  40f78c:	e257      	b.n	40fc3e <lv_draw_mask_radius+0x576>
                _lv_memset_00(&mask_buf[first], len - first);
  40f78e:	1b39      	subs	r1, r7, r4
  40f790:	eb08 0004 	add.w	r0, r8, r4
  40f794:	4b98      	ldr	r3, [pc, #608]	; (40f9f8 <lv_draw_mask_radius+0x330>)
  40f796:	4798      	blx	r3
  40f798:	e7eb      	b.n	40f772 <lv_draw_mask_radius+0xaa>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
  40f79a:	42a7      	cmp	r7, r4
  40f79c:	f000 825a 	beq.w	40fc54 <lv_draw_mask_radius+0x58c>
            else return LV_DRAW_MASK_RES_CHANGED;
  40f7a0:	2002      	movs	r0, #2
  40f7a2:	e24c      	b.n	40fc3e <lv_draw_mask_radius+0x576>
            if(first < 0) first = 0;
  40f7a4:	ebb3 030b 	subs.w	r3, r3, fp
  40f7a8:	d403      	bmi.n	40f7b2 <lv_draw_mask_radius+0xea>
            if(first <= len) {
  40f7aa:	42bb      	cmp	r3, r7
  40f7ac:	dd03      	ble.n	40f7b6 <lv_draw_mask_radius+0xee>
        return LV_DRAW_MASK_RES_CHANGED;
  40f7ae:	2002      	movs	r0, #2
  40f7b0:	e245      	b.n	40fc3e <lv_draw_mask_radius+0x576>
            if(first < 0) first = 0;
  40f7b2:	2300      	movs	r3, #0
  40f7b4:	e7f9      	b.n	40f7aa <lv_draw_mask_radius+0xe2>
                int32_t last =  rect.x2 - abs_x - first + 1;
  40f7b6:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
  40f7ba:	eba1 010b 	sub.w	r1, r1, fp
  40f7be:	1ac9      	subs	r1, r1, r3
  40f7c0:	3101      	adds	r1, #1
                if(first + last > len) last = len - first;
  40f7c2:	185a      	adds	r2, r3, r1
  40f7c4:	4297      	cmp	r7, r2
  40f7c6:	da00      	bge.n	40f7ca <lv_draw_mask_radius+0x102>
  40f7c8:	1af9      	subs	r1, r7, r3
                if(last >= 0) {
  40f7ca:	2900      	cmp	r1, #0
  40f7cc:	f2c0 8244 	blt.w	40fc58 <lv_draw_mask_radius+0x590>
                    _lv_memset_00(&mask_buf[first], last);
  40f7d0:	eb08 0003 	add.w	r0, r8, r3
  40f7d4:	4b88      	ldr	r3, [pc, #544]	; (40f9f8 <lv_draw_mask_radius+0x330>)
  40f7d6:	4798      	blx	r3
        return LV_DRAW_MASK_RES_CHANGED;
  40f7d8:	2002      	movs	r0, #2
  40f7da:	e230      	b.n	40fc3e <lv_draw_mask_radius+0x576>
    int32_t k = rect.x1 - abs_x; /*First relevant coordinate on the of the mask*/
  40f7dc:	eba3 0b0b 	sub.w	fp, r3, fp
  40f7e0:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
  40f7e4:	b29b      	uxth	r3, r3
  40f7e6:	1ac3      	subs	r3, r0, r3
  40f7e8:	b29b      	uxth	r3, r3
  40f7ea:	3301      	adds	r3, #1
  40f7ec:	b21b      	sxth	r3, r3
  40f7ee:	9302      	str	r3, [sp, #8]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40f7f0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
  40f7f4:	b28c      	uxth	r4, r1
  40f7f6:	1b1b      	subs	r3, r3, r4
  40f7f8:	b29b      	uxth	r3, r3
  40f7fa:	3301      	adds	r3, #1
  40f7fc:	b21b      	sxth	r3, r3
    abs_y -= rect.y1;
  40f7fe:	1b14      	subs	r4, r2, r4
  40f800:	b224      	sxth	r4, r4
    uint32_t r2 = p->cfg.radius * p->cfg.radius;
  40f802:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
  40f806:	fb0a fa0a 	mul.w	sl, sl, sl
    if(abs_y < radius || abs_y > h - radius - 1) {
  40f80a:	45a1      	cmp	r9, r4
  40f80c:	dc06      	bgt.n	40f81c <lv_draw_mask_radius+0x154>
  40f80e:	eba3 0209 	sub.w	r2, r3, r9
  40f812:	3a01      	subs	r2, #1
  40f814:	4294      	cmp	r4, r2
  40f816:	dc01      	bgt.n	40f81c <lv_draw_mask_radius+0x154>
    return LV_DRAW_MASK_RES_CHANGED;
  40f818:	2002      	movs	r0, #2
  40f81a:	e210      	b.n	40fc3e <lv_draw_mask_radius+0x576>
        if(radius <= 256) sqrt_mask = 0x800;
  40f81c:	f5b9 7f80 	cmp.w	r9, #256	; 0x100
  40f820:	f300 80b1 	bgt.w	40f986 <lv_draw_mask_radius+0x2be>
  40f824:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40f828:	9201      	str	r2, [sp, #4]
        if(abs_y < radius) {
  40f82a:	45a1      	cmp	r9, r4
  40f82c:	f340 80b6 	ble.w	40f99c <lv_draw_mask_radius+0x2d4>
            y = radius - abs_y;
  40f830:	eba9 0404 	sub.w	r4, r9, r4
            if(y == p->y_prev) {
  40f834:	6973      	ldr	r3, [r6, #20]
  40f836:	429c      	cmp	r4, r3
  40f838:	f000 80a9 	beq.w	40f98e <lv_draw_mask_radius+0x2c6>
                _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
  40f83c:	9a01      	ldr	r2, [sp, #4]
  40f83e:	a904      	add	r1, sp, #16
  40f840:	fb04 a014 	mls	r0, r4, r4, sl
  40f844:	4b6d      	ldr	r3, [pc, #436]	; (40f9fc <lv_draw_mask_radius+0x334>)
  40f846:	4798      	blx	r3
            _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
  40f848:	1e63      	subs	r3, r4, #1
  40f84a:	9a01      	ldr	r2, [sp, #4]
  40f84c:	a905      	add	r1, sp, #20
  40f84e:	9303      	str	r3, [sp, #12]
  40f850:	fb03 a013 	mls	r0, r3, r3, sl
  40f854:	4b69      	ldr	r3, [pc, #420]	; (40f9fc <lv_draw_mask_radius+0x334>)
  40f856:	4798      	blx	r3
            p->y_prev = y - 1;
  40f858:	9b03      	ldr	r3, [sp, #12]
  40f85a:	6173      	str	r3, [r6, #20]
            p->y_prev_x.f = x1.f;
  40f85c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  40f860:	8373      	strh	r3, [r6, #26]
            p->y_prev_x.i = x1.i;
  40f862:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  40f866:	8333      	strh	r3, [r6, #24]
        if(x0.i == x1.i - 1 && x1.f == 0) {
  40f868:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  40f86c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
  40f870:	1e51      	subs	r1, r2, #1
  40f872:	428b      	cmp	r3, r1
  40f874:	f000 80b4 	beq.w	40f9e0 <lv_draw_mask_radius+0x318>
        if(x0.i == x1.i) {
  40f878:	f8bd 2014 	ldrh.w	r2, [sp, #20]
  40f87c:	4293      	cmp	r3, r2
  40f87e:	f000 80bf 	beq.w	40fa00 <lv_draw_mask_radius+0x338>
            int32_t ofs = radius - (x0.i + 1);
  40f882:	3301      	adds	r3, #1
  40f884:	eba9 0903 	sub.w	r9, r9, r3
            int32_t kl = k + ofs;
  40f888:	eb0b 0609 	add.w	r6, fp, r9
            int32_t kr = k + (w - ofs - 1);
  40f88c:	9b02      	ldr	r3, [sp, #8]
  40f88e:	eba3 0909 	sub.w	r9, r3, r9
  40f892:	f109 39ff 	add.w	r9, r9, #4294967295
  40f896:	44d9      	add	r9, fp
            if(outer) {
  40f898:	b175      	cbz	r5, 40f8b8 <lv_draw_mask_radius+0x1f0>
                if(first < 0) first = 0;
  40f89a:	1c70      	adds	r0, r6, #1
  40f89c:	f100 8116 	bmi.w	40facc <lv_draw_mask_radius+0x404>
                int32_t len_tmp = kr - first;
  40f8a0:	eba9 0100 	sub.w	r1, r9, r0
                if(len_tmp + first > len) len_tmp = len - first;
  40f8a4:	45b9      	cmp	r9, r7
  40f8a6:	dd00      	ble.n	40f8aa <lv_draw_mask_radius+0x1e2>
  40f8a8:	1a39      	subs	r1, r7, r0
                if(first < len && len_tmp >= 0) {
  40f8aa:	42b8      	cmp	r0, r7
  40f8ac:	da04      	bge.n	40f8b8 <lv_draw_mask_radius+0x1f0>
  40f8ae:	2900      	cmp	r1, #0
  40f8b0:	db02      	blt.n	40f8b8 <lv_draw_mask_radius+0x1f0>
                    _lv_memset_00(&mask_buf[first], len_tmp);
  40f8b2:	4440      	add	r0, r8
  40f8b4:	4b50      	ldr	r3, [pc, #320]	; (40f9f8 <lv_draw_mask_radius+0x330>)
  40f8b6:	4798      	blx	r3
            uint32_t i = x0.i + 1;
  40f8b8:	f8bd 0010 	ldrh.w	r0, [sp, #16]
  40f8bc:	f100 0b01 	add.w	fp, r0, #1
            _lv_sqrt(r2 - (x0.i * x0.i), &y_prev, sqrt_mask);
  40f8c0:	9a01      	ldr	r2, [sp, #4]
  40f8c2:	a906      	add	r1, sp, #24
  40f8c4:	fb00 a010 	mls	r0, r0, r0, sl
  40f8c8:	4b4c      	ldr	r3, [pc, #304]	; (40f9fc <lv_draw_mask_radius+0x334>)
  40f8ca:	4798      	blx	r3
            if(y_prev.f == 0) {
  40f8cc:	f8bd 301a 	ldrh.w	r3, [sp, #26]
  40f8d0:	b93b      	cbnz	r3, 40f8e2 <lv_draw_mask_radius+0x21a>
                y_prev.i--;
  40f8d2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  40f8d6:	3b01      	subs	r3, #1
  40f8d8:	f8ad 3018 	strh.w	r3, [sp, #24]
                y_prev.f = 0xFF;
  40f8dc:	23ff      	movs	r3, #255	; 0xff
  40f8de:	f8ad 301a 	strh.w	r3, [sp, #26]
            if(y_prev.i >= y) {
  40f8e2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  40f8e6:	429c      	cmp	r4, r3
  40f8e8:	f300 8103 	bgt.w	40faf2 <lv_draw_mask_radius+0x42a>
                _lv_sqrt(r2 - (i * i), &y_next, sqrt_mask);
  40f8ec:	9a01      	ldr	r2, [sp, #4]
  40f8ee:	a907      	add	r1, sp, #28
  40f8f0:	fb0b a01b 	mls	r0, fp, fp, sl
  40f8f4:	4b41      	ldr	r3, [pc, #260]	; (40f9fc <lv_draw_mask_radius+0x334>)
  40f8f6:	4798      	blx	r3
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
  40f8f8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  40f8fc:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
  40f900:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40f904:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
  40f908:	fb03 f302 	mul.w	r3, r3, r2
  40f90c:	f3c3 2347 	ubfx	r3, r3, #9, #8
  40f910:	43da      	mvns	r2, r3
  40f912:	b2d2      	uxtb	r2, r2
                if(outer) m = 255 - m;
  40f914:	b905      	cbnz	r5, 40f918 <lv_draw_mask_radius+0x250>
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
  40f916:	4613      	mov	r3, r2
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40f918:	2e00      	cmp	r6, #0
  40f91a:	db13      	blt.n	40f944 <lv_draw_mask_radius+0x27c>
  40f91c:	42be      	cmp	r6, r7
  40f91e:	da11      	bge.n	40f944 <lv_draw_mask_radius+0x27c>
  40f920:	eb08 0106 	add.w	r1, r8, r6
  40f924:	f818 2006 	ldrb.w	r2, [r8, r6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f928:	2bfc      	cmp	r3, #252	; 0xfc
  40f92a:	d80a      	bhi.n	40f942 <lv_draw_mask_radius+0x27a>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f92c:	2b02      	cmp	r3, #2
  40f92e:	f240 80cf 	bls.w	40fad0 <lv_draw_mask_radius+0x408>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f932:	fb03 f202 	mul.w	r2, r3, r2
  40f936:	eb02 2002 	add.w	r0, r2, r2, lsl #8
  40f93a:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
  40f93e:	f3c2 52c7 	ubfx	r2, r2, #23, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40f942:	700a      	strb	r2, [r1, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40f944:	f1b9 0f00 	cmp.w	r9, #0
  40f948:	db13      	blt.n	40f972 <lv_draw_mask_radius+0x2aa>
  40f94a:	45b9      	cmp	r9, r7
  40f94c:	da11      	bge.n	40f972 <lv_draw_mask_radius+0x2aa>
  40f94e:	eb08 0109 	add.w	r1, r8, r9
  40f952:	f818 2009 	ldrb.w	r2, [r8, r9]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f956:	2bfc      	cmp	r3, #252	; 0xfc
  40f958:	d80a      	bhi.n	40f970 <lv_draw_mask_radius+0x2a8>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f95a:	2b02      	cmp	r3, #2
  40f95c:	f240 80ba 	bls.w	40fad4 <lv_draw_mask_radius+0x40c>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f960:	fb03 f302 	mul.w	r3, r3, r2
  40f964:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40f968:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40f96c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40f970:	700a      	strb	r2, [r1, #0]
                kl--;
  40f972:	3e01      	subs	r6, #1
                kr++;
  40f974:	f109 0901 	add.w	r9, r9, #1
                y_prev.f = y_next.f;
  40f978:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40f97c:	f8ad 301a 	strh.w	r3, [sp, #26]
                i++;
  40f980:	f10b 0b01 	add.w	fp, fp, #1
  40f984:	e0b5      	b.n	40faf2 <lv_draw_mask_radius+0x42a>
        else sqrt_mask = 0x8000;
  40f986:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40f98a:	9201      	str	r2, [sp, #4]
  40f98c:	e74d      	b.n	40f82a <lv_draw_mask_radius+0x162>
                x0.f = p->y_prev_x.f;
  40f98e:	8b73      	ldrh	r3, [r6, #26]
  40f990:	f8ad 3012 	strh.w	r3, [sp, #18]
                x0.i = p->y_prev_x.i;
  40f994:	8b33      	ldrh	r3, [r6, #24]
  40f996:	f8ad 3010 	strh.w	r3, [sp, #16]
  40f99a:	e755      	b.n	40f848 <lv_draw_mask_radius+0x180>
            y = radius - (h - abs_y) + 1;
  40f99c:	1b1b      	subs	r3, r3, r4
  40f99e:	eba9 0003 	sub.w	r0, r9, r3
  40f9a2:	1c44      	adds	r4, r0, #1
            if((y - 1) == p->y_prev) {
  40f9a4:	6973      	ldr	r3, [r6, #20]
  40f9a6:	4298      	cmp	r0, r3
  40f9a8:	d013      	beq.n	40f9d2 <lv_draw_mask_radius+0x30a>
                _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
  40f9aa:	9a01      	ldr	r2, [sp, #4]
  40f9ac:	a905      	add	r1, sp, #20
  40f9ae:	fb00 a010 	mls	r0, r0, r0, sl
  40f9b2:	4b12      	ldr	r3, [pc, #72]	; (40f9fc <lv_draw_mask_radius+0x334>)
  40f9b4:	4798      	blx	r3
            _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
  40f9b6:	9a01      	ldr	r2, [sp, #4]
  40f9b8:	a904      	add	r1, sp, #16
  40f9ba:	fb04 a014 	mls	r0, r4, r4, sl
  40f9be:	4b0f      	ldr	r3, [pc, #60]	; (40f9fc <lv_draw_mask_radius+0x334>)
  40f9c0:	4798      	blx	r3
            p->y_prev = y;
  40f9c2:	6174      	str	r4, [r6, #20]
            p->y_prev_x.f = x0.f;
  40f9c4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  40f9c8:	8373      	strh	r3, [r6, #26]
            p->y_prev_x.i = x0.i;
  40f9ca:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  40f9ce:	8333      	strh	r3, [r6, #24]
  40f9d0:	e74a      	b.n	40f868 <lv_draw_mask_radius+0x1a0>
                x1.f = p->y_prev_x.f;
  40f9d2:	8b73      	ldrh	r3, [r6, #26]
  40f9d4:	f8ad 3016 	strh.w	r3, [sp, #22]
                x1.i = p->y_prev_x.i;
  40f9d8:	8b33      	ldrh	r3, [r6, #24]
  40f9da:	f8ad 3014 	strh.w	r3, [sp, #20]
  40f9de:	e7ea      	b.n	40f9b6 <lv_draw_mask_radius+0x2ee>
        if(x0.i == x1.i - 1 && x1.f == 0) {
  40f9e0:	f8bd 1016 	ldrh.w	r1, [sp, #22]
  40f9e4:	2900      	cmp	r1, #0
  40f9e6:	f47f af47 	bne.w	40f878 <lv_draw_mask_radius+0x1b0>
            x1.i--;
  40f9ea:	3a01      	subs	r2, #1
  40f9ec:	f8ad 2014 	strh.w	r2, [sp, #20]
            x1.f = 0xFF;
  40f9f0:	22ff      	movs	r2, #255	; 0xff
  40f9f2:	f8ad 2016 	strh.w	r2, [sp, #22]
  40f9f6:	e73f      	b.n	40f878 <lv_draw_mask_radius+0x1b0>
  40f9f8:	00416c0d 	.word	0x00416c0d
  40f9fc:	004165e5 	.word	0x004165e5
            lv_opa_t m = (x0.f + x1.f) >> 1;
  40fa00:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  40fa04:	f8bd 1016 	ldrh.w	r1, [sp, #22]
  40fa08:	440a      	add	r2, r1
  40fa0a:	f3c2 0247 	ubfx	r2, r2, #1, #8
            if(outer) m = 255 - m;
  40fa0e:	b10d      	cbz	r5, 40fa14 <lv_draw_mask_radius+0x34c>
  40fa10:	43d2      	mvns	r2, r2
  40fa12:	b2d2      	uxtb	r2, r2
            int32_t ofs = radius - x0.i - 1;
  40fa14:	eba9 0303 	sub.w	r3, r9, r3
  40fa18:	3b01      	subs	r3, #1
            if(kl >= 0 && kl < len) {
  40fa1a:	eb1b 0103 	adds.w	r1, fp, r3
  40fa1e:	d411      	bmi.n	40fa44 <lv_draw_mask_radius+0x37c>
  40fa20:	42b9      	cmp	r1, r7
  40fa22:	da0f      	bge.n	40fa44 <lv_draw_mask_radius+0x37c>
                mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40fa24:	f818 0001 	ldrb.w	r0, [r8, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40fa28:	2afc      	cmp	r2, #252	; 0xfc
  40fa2a:	d809      	bhi.n	40fa40 <lv_draw_mask_radius+0x378>
    if(mask_new <= LV_OPA_MIN) return 0;
  40fa2c:	2a02      	cmp	r2, #2
  40fa2e:	d932      	bls.n	40fa96 <lv_draw_mask_radius+0x3ce>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40fa30:	fb02 f000 	mul.w	r0, r2, r0
  40fa34:	eb00 2400 	add.w	r4, r0, r0, lsl #8
  40fa38:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
  40fa3c:	f3c0 50c7 	ubfx	r0, r0, #23, #8
                mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40fa40:	f808 0001 	strb.w	r0, [r8, r1]
            int32_t kr = k + (w - ofs - 1);
  40fa44:	9802      	ldr	r0, [sp, #8]
  40fa46:	1ac3      	subs	r3, r0, r3
  40fa48:	3b01      	subs	r3, #1
            if(kr >= 0 && kr < len) {
  40fa4a:	eb1b 0303 	adds.w	r3, fp, r3
  40fa4e:	d411      	bmi.n	40fa74 <lv_draw_mask_radius+0x3ac>
  40fa50:	42bb      	cmp	r3, r7
  40fa52:	da0f      	bge.n	40fa74 <lv_draw_mask_radius+0x3ac>
                mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40fa54:	f818 0003 	ldrb.w	r0, [r8, r3]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40fa58:	2afc      	cmp	r2, #252	; 0xfc
  40fa5a:	d809      	bhi.n	40fa70 <lv_draw_mask_radius+0x3a8>
    if(mask_new <= LV_OPA_MIN) return 0;
  40fa5c:	2a02      	cmp	r2, #2
  40fa5e:	d91c      	bls.n	40fa9a <lv_draw_mask_radius+0x3d2>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40fa60:	fb02 f200 	mul.w	r2, r2, r0
  40fa64:	eb02 2002 	add.w	r0, r2, r2, lsl #8
  40fa68:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
  40fa6c:	f3c2 50c7 	ubfx	r0, r2, #23, #8
                mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40fa70:	f808 0003 	strb.w	r0, [r8, r3]
            if(outer == false) {
  40fa74:	b19d      	cbz	r5, 40fa9e <lv_draw_mask_radius+0x3d6>
                if(first < 0) first = 0;
  40fa76:	1c48      	adds	r0, r1, #1
  40fa78:	d426      	bmi.n	40fac8 <lv_draw_mask_radius+0x400>
                int32_t len_tmp = kr - first;
  40fa7a:	1a19      	subs	r1, r3, r0
                if(len_tmp + first > len) len_tmp = len - first;
  40fa7c:	42bb      	cmp	r3, r7
  40fa7e:	dd00      	ble.n	40fa82 <lv_draw_mask_radius+0x3ba>
  40fa80:	1a39      	subs	r1, r7, r0
                if(first < len && len_tmp >= 0) {
  40fa82:	42b8      	cmp	r0, r7
  40fa84:	f280 80be 	bge.w	40fc04 <lv_draw_mask_radius+0x53c>
  40fa88:	2900      	cmp	r1, #0
  40fa8a:	f2c0 80bb 	blt.w	40fc04 <lv_draw_mask_radius+0x53c>
                    _lv_memset_00(&mask_buf[first], len_tmp);
  40fa8e:	4440      	add	r0, r8
  40fa90:	4b72      	ldr	r3, [pc, #456]	; (40fc5c <lv_draw_mask_radius+0x594>)
  40fa92:	4798      	blx	r3
  40fa94:	e0b6      	b.n	40fc04 <lv_draw_mask_radius+0x53c>
    if(mask_new <= LV_OPA_MIN) return 0;
  40fa96:	2000      	movs	r0, #0
  40fa98:	e7d2      	b.n	40fa40 <lv_draw_mask_radius+0x378>
  40fa9a:	2000      	movs	r0, #0
  40fa9c:	e7e8      	b.n	40fa70 <lv_draw_mask_radius+0x3a8>
                kr++;
  40fa9e:	1c5c      	adds	r4, r3, #1
                if(kl > len)  {
  40faa0:	42b9      	cmp	r1, r7
  40faa2:	f300 80c9 	bgt.w	40fc38 <lv_draw_mask_radius+0x570>
                if(kl >= 0) {
  40faa6:	2900      	cmp	r1, #0
  40faa8:	db02      	blt.n	40fab0 <lv_draw_mask_radius+0x3e8>
                    _lv_memset_00(&mask_buf[0], kl);
  40faaa:	4640      	mov	r0, r8
  40faac:	4b6b      	ldr	r3, [pc, #428]	; (40fc5c <lv_draw_mask_radius+0x594>)
  40faae:	4798      	blx	r3
                if(kr < 0) {
  40fab0:	2c00      	cmp	r4, #0
  40fab2:	f2c0 80c1 	blt.w	40fc38 <lv_draw_mask_radius+0x570>
                if(kr <= len) {
  40fab6:	42bc      	cmp	r4, r7
  40fab8:	f300 80a4 	bgt.w	40fc04 <lv_draw_mask_radius+0x53c>
                    _lv_memset_00(&mask_buf[kr], len - kr);
  40fabc:	1b39      	subs	r1, r7, r4
  40fabe:	eb08 0004 	add.w	r0, r8, r4
  40fac2:	4b66      	ldr	r3, [pc, #408]	; (40fc5c <lv_draw_mask_radius+0x594>)
  40fac4:	4798      	blx	r3
  40fac6:	e09d      	b.n	40fc04 <lv_draw_mask_radius+0x53c>
                if(first < 0) first = 0;
  40fac8:	2000      	movs	r0, #0
  40faca:	e7d6      	b.n	40fa7a <lv_draw_mask_radius+0x3b2>
                if(first < 0) first = 0;
  40facc:	2000      	movs	r0, #0
  40face:	e6e7      	b.n	40f8a0 <lv_draw_mask_radius+0x1d8>
    if(mask_new <= LV_OPA_MIN) return 0;
  40fad0:	2200      	movs	r2, #0
  40fad2:	e736      	b.n	40f942 <lv_draw_mask_radius+0x27a>
  40fad4:	2200      	movs	r2, #0
  40fad6:	e74b      	b.n	40f970 <lv_draw_mask_radius+0x2a8>
  40fad8:	2200      	movs	r2, #0
  40fada:	e041      	b.n	40fb60 <lv_draw_mask_radius+0x498>
  40fadc:	2200      	movs	r2, #0
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40fade:	700a      	strb	r2, [r1, #0]
                kl--;
  40fae0:	3e01      	subs	r6, #1
                kr++;
  40fae2:	f109 0901 	add.w	r9, r9, #1
                y_prev.f = y_next.f;
  40fae6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40faea:	f8ad 301a 	strh.w	r3, [sp, #26]
            for(; i <= x1.i; i++) {
  40faee:	f10b 0b01 	add.w	fp, fp, #1
  40faf2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  40faf6:	459b      	cmp	fp, r3
  40faf8:	d849      	bhi.n	40fb8e <lv_draw_mask_radius+0x4c6>
                sqrt_approx(&y_next, &y_prev, r2 - (i * i));
  40fafa:	fb0b a11b 	mls	r1, fp, fp, sl
 */
LV_ATTRIBUTE_FAST_MEM static inline void sqrt_approx(lv_sqrt_res_t * q, lv_sqrt_res_t * ref, uint32_t x)
{
    x = x << 8; /*Upscale for extra precision*/

    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
  40fafe:	f8bd 0018 	ldrh.w	r0, [sp, #24]
  40fb02:	f8bd 201a 	ldrh.w	r2, [sp, #26]
  40fb06:	0913      	lsrs	r3, r2, #4
  40fb08:	eb03 1300 	add.w	r3, r3, r0, lsl #4
    uint32_t raw2 = raw * raw;
  40fb0c:	fb03 f003 	mul.w	r0, r3, r3

    int32_t d = x - raw2;
  40fb10:	ebc0 2101 	rsb	r1, r0, r1, lsl #8
    d = (int32_t)d / (int32_t)(2 * raw) + raw;
  40fb14:	0058      	lsls	r0, r3, #1
  40fb16:	fb91 f1f0 	sdiv	r1, r1, r0
  40fb1a:	440b      	add	r3, r1

    q->i = d >> 4;
  40fb1c:	1119      	asrs	r1, r3, #4
  40fb1e:	f8ad 101c 	strh.w	r1, [sp, #28]
    q->f = (d & 0xF) << 4;
  40fb22:	011b      	lsls	r3, r3, #4
  40fb24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  40fb28:	f8ad 301e 	strh.w	r3, [sp, #30]
                m = (y_prev.f + y_next.f) >> 1;
  40fb2c:	4413      	add	r3, r2
  40fb2e:	f3c3 0347 	ubfx	r3, r3, #1, #8
                if(outer) m = 255 - m;
  40fb32:	b10d      	cbz	r5, 40fb38 <lv_draw_mask_radius+0x470>
  40fb34:	43db      	mvns	r3, r3
  40fb36:	b2db      	uxtb	r3, r3
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40fb38:	2e00      	cmp	r6, #0
  40fb3a:	db12      	blt.n	40fb62 <lv_draw_mask_radius+0x49a>
  40fb3c:	42be      	cmp	r6, r7
  40fb3e:	da10      	bge.n	40fb62 <lv_draw_mask_radius+0x49a>
  40fb40:	eb08 0106 	add.w	r1, r8, r6
  40fb44:	f818 2006 	ldrb.w	r2, [r8, r6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40fb48:	2bfc      	cmp	r3, #252	; 0xfc
  40fb4a:	d809      	bhi.n	40fb60 <lv_draw_mask_radius+0x498>
    if(mask_new <= LV_OPA_MIN) return 0;
  40fb4c:	2b02      	cmp	r3, #2
  40fb4e:	d9c3      	bls.n	40fad8 <lv_draw_mask_radius+0x410>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40fb50:	fb03 f202 	mul.w	r2, r3, r2
  40fb54:	eb02 2002 	add.w	r0, r2, r2, lsl #8
  40fb58:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
  40fb5c:	f3c2 52c7 	ubfx	r2, r2, #23, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40fb60:	700a      	strb	r2, [r1, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40fb62:	f1b9 0f00 	cmp.w	r9, #0
  40fb66:	dbbb      	blt.n	40fae0 <lv_draw_mask_radius+0x418>
  40fb68:	45b9      	cmp	r9, r7
  40fb6a:	dab9      	bge.n	40fae0 <lv_draw_mask_radius+0x418>
  40fb6c:	eb08 0109 	add.w	r1, r8, r9
  40fb70:	f818 2009 	ldrb.w	r2, [r8, r9]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40fb74:	2bfc      	cmp	r3, #252	; 0xfc
  40fb76:	d8b2      	bhi.n	40fade <lv_draw_mask_radius+0x416>
    if(mask_new <= LV_OPA_MIN) return 0;
  40fb78:	2b02      	cmp	r3, #2
  40fb7a:	d9af      	bls.n	40fadc <lv_draw_mask_radius+0x414>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40fb7c:	fb03 f302 	mul.w	r3, r3, r2
  40fb80:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40fb84:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40fb88:	f3c3 52c7 	ubfx	r2, r3, #23, #8
  40fb8c:	e7a7      	b.n	40fade <lv_draw_mask_radius+0x416>
            if(y_prev.f) {
  40fb8e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
  40fb92:	b3b2      	cbz	r2, 40fc02 <lv_draw_mask_radius+0x53a>
                m = (y_prev.f * x1.f) >> 9;
  40fb94:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  40fb98:	fb03 f302 	mul.w	r3, r3, r2
  40fb9c:	f3c3 2347 	ubfx	r3, r3, #9, #8
                if(outer) m = 255 - m;
  40fba0:	b10d      	cbz	r5, 40fba6 <lv_draw_mask_radius+0x4de>
  40fba2:	43db      	mvns	r3, r3
  40fba4:	b2db      	uxtb	r3, r3
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40fba6:	2e00      	cmp	r6, #0
  40fba8:	db12      	blt.n	40fbd0 <lv_draw_mask_radius+0x508>
  40fbaa:	42be      	cmp	r6, r7
  40fbac:	da10      	bge.n	40fbd0 <lv_draw_mask_radius+0x508>
  40fbae:	eb08 0106 	add.w	r1, r8, r6
  40fbb2:	f818 2006 	ldrb.w	r2, [r8, r6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40fbb6:	2bfc      	cmp	r3, #252	; 0xfc
  40fbb8:	d809      	bhi.n	40fbce <lv_draw_mask_radius+0x506>
    if(mask_new <= LV_OPA_MIN) return 0;
  40fbba:	2b02      	cmp	r3, #2
  40fbbc:	d924      	bls.n	40fc08 <lv_draw_mask_radius+0x540>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40fbbe:	fb03 f202 	mul.w	r2, r3, r2
  40fbc2:	eb02 2002 	add.w	r0, r2, r2, lsl #8
  40fbc6:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
  40fbca:	f3c2 52c7 	ubfx	r2, r2, #23, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40fbce:	700a      	strb	r2, [r1, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40fbd0:	f1b9 0f00 	cmp.w	r9, #0
  40fbd4:	db12      	blt.n	40fbfc <lv_draw_mask_radius+0x534>
  40fbd6:	45b9      	cmp	r9, r7
  40fbd8:	da10      	bge.n	40fbfc <lv_draw_mask_radius+0x534>
  40fbda:	eb08 0109 	add.w	r1, r8, r9
  40fbde:	f818 2009 	ldrb.w	r2, [r8, r9]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40fbe2:	2bfc      	cmp	r3, #252	; 0xfc
  40fbe4:	d809      	bhi.n	40fbfa <lv_draw_mask_radius+0x532>
    if(mask_new <= LV_OPA_MIN) return 0;
  40fbe6:	2b02      	cmp	r3, #2
  40fbe8:	d910      	bls.n	40fc0c <lv_draw_mask_radius+0x544>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40fbea:	fb03 f302 	mul.w	r3, r3, r2
  40fbee:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40fbf2:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40fbf6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40fbfa:	700a      	strb	r2, [r1, #0]
                kl--;
  40fbfc:	3e01      	subs	r6, #1
                kr++;
  40fbfe:	f109 0901 	add.w	r9, r9, #1
            if(outer == 0) {
  40fc02:	b12d      	cbz	r5, 40fc10 <lv_draw_mask_radius+0x548>
    return LV_DRAW_MASK_RES_CHANGED;
  40fc04:	2002      	movs	r0, #2
  40fc06:	e01a      	b.n	40fc3e <lv_draw_mask_radius+0x576>
    if(mask_new <= LV_OPA_MIN) return 0;
  40fc08:	2200      	movs	r2, #0
  40fc0a:	e7e0      	b.n	40fbce <lv_draw_mask_radius+0x506>
  40fc0c:	2200      	movs	r2, #0
  40fc0e:	e7f4      	b.n	40fbfa <lv_draw_mask_radius+0x532>
                kl++;
  40fc10:	1c71      	adds	r1, r6, #1
                if(kl > len) {
  40fc12:	42b9      	cmp	r1, r7
  40fc14:	dc10      	bgt.n	40fc38 <lv_draw_mask_radius+0x570>
                if(kl >= 0) _lv_memset_00(&mask_buf[0], kl);
  40fc16:	2900      	cmp	r1, #0
  40fc18:	db02      	blt.n	40fc20 <lv_draw_mask_radius+0x558>
  40fc1a:	4640      	mov	r0, r8
  40fc1c:	4b0f      	ldr	r3, [pc, #60]	; (40fc5c <lv_draw_mask_radius+0x594>)
  40fc1e:	4798      	blx	r3
                if(kr < 0) {
  40fc20:	f1b9 0f00 	cmp.w	r9, #0
  40fc24:	db08      	blt.n	40fc38 <lv_draw_mask_radius+0x570>
                if(kr < len) _lv_memset_00(&mask_buf[kr], len - kr);
  40fc26:	45b9      	cmp	r9, r7
  40fc28:	daec      	bge.n	40fc04 <lv_draw_mask_radius+0x53c>
  40fc2a:	eba7 0109 	sub.w	r1, r7, r9
  40fc2e:	eb08 0009 	add.w	r0, r8, r9
  40fc32:	4b0a      	ldr	r3, [pc, #40]	; (40fc5c <lv_draw_mask_radius+0x594>)
  40fc34:	4798      	blx	r3
  40fc36:	e7e5      	b.n	40fc04 <lv_draw_mask_radius+0x53c>
                    return LV_DRAW_MASK_RES_TRANSP;
  40fc38:	2000      	movs	r0, #0
  40fc3a:	e000      	b.n	40fc3e <lv_draw_mask_radius+0x576>
            return LV_DRAW_MASK_RES_TRANSP;
  40fc3c:	2000      	movs	r0, #0
}
  40fc3e:	b00b      	add	sp, #44	; 0x2c
  40fc40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LV_DRAW_MASK_RES_TRANSP;
  40fc44:	2000      	movs	r0, #0
  40fc46:	e7fa      	b.n	40fc3e <lv_draw_mask_radius+0x576>
            return LV_DRAW_MASK_RES_FULL_COVER;
  40fc48:	2001      	movs	r0, #1
  40fc4a:	e7f8      	b.n	40fc3e <lv_draw_mask_radius+0x576>
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
  40fc4c:	2000      	movs	r0, #0
  40fc4e:	e7f6      	b.n	40fc3e <lv_draw_mask_radius+0x576>
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
  40fc50:	2000      	movs	r0, #0
  40fc52:	e7f4      	b.n	40fc3e <lv_draw_mask_radius+0x576>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
  40fc54:	2001      	movs	r0, #1
  40fc56:	e7f2      	b.n	40fc3e <lv_draw_mask_radius+0x576>
        return LV_DRAW_MASK_RES_CHANGED;
  40fc58:	2002      	movs	r0, #2
  40fc5a:	e7f0      	b.n	40fc3e <lv_draw_mask_radius+0x576>
  40fc5c:	00416c0d 	.word	0x00416c0d

0040fc60 <lv_draw_mask_add>:
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40fc60:	2300      	movs	r3, #0
  40fc62:	2b0f      	cmp	r3, #15
  40fc64:	d806      	bhi.n	40fc74 <lv_draw_mask_add+0x14>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
  40fc66:	4a0a      	ldr	r2, [pc, #40]	; (40fc90 <lv_draw_mask_add+0x30>)
  40fc68:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  40fc6c:	b112      	cbz	r2, 40fc74 <lv_draw_mask_add+0x14>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40fc6e:	3301      	adds	r3, #1
  40fc70:	b2db      	uxtb	r3, r3
  40fc72:	e7f6      	b.n	40fc62 <lv_draw_mask_add+0x2>
    if(i >= _LV_MASK_MAX_NUM) {
  40fc74:	2b0f      	cmp	r3, #15
  40fc76:	d807      	bhi.n	40fc88 <lv_draw_mask_add+0x28>
    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
  40fc78:	4a05      	ldr	r2, [pc, #20]	; (40fc90 <lv_draw_mask_add+0x30>)
  40fc7a:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;
  40fc7e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  40fc82:	6051      	str	r1, [r2, #4]
    return i;
  40fc84:	b218      	sxth	r0, r3
  40fc86:	4770      	bx	lr
        return LV_MASK_ID_INV;
  40fc88:	f04f 30ff 	mov.w	r0, #4294967295
}
  40fc8c:	4770      	bx	lr
  40fc8e:	bf00      	nop
  40fc90:	2043a364 	.word	0x2043a364

0040fc94 <lv_draw_mask_apply>:
{
  40fc94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40fc98:	b082      	sub	sp, #8
  40fc9a:	4680      	mov	r8, r0
  40fc9c:	460f      	mov	r7, r1
  40fc9e:	4616      	mov	r6, r2
  40fca0:	469a      	mov	sl, r3
    _lv_draw_mask_saved_t * m = LV_GC_ROOT(_lv_draw_mask_list);
  40fca2:	4c0f      	ldr	r4, [pc, #60]	; (40fce0 <lv_draw_mask_apply+0x4c>)
    bool changed = false;
  40fca4:	f04f 0900 	mov.w	r9, #0
    while(m->param) {
  40fca8:	e000      	b.n	40fcac <lv_draw_mask_apply+0x18>
        m++;
  40fcaa:	3408      	adds	r4, #8
    while(m->param) {
  40fcac:	6823      	ldr	r3, [r4, #0]
  40fcae:	b16b      	cbz	r3, 40fccc <lv_draw_mask_apply+0x38>
        res = dsc->cb(mask_buf, abs_x, abs_y, len, (void *)m->param);
  40fcb0:	681d      	ldr	r5, [r3, #0]
  40fcb2:	9300      	str	r3, [sp, #0]
  40fcb4:	4653      	mov	r3, sl
  40fcb6:	4632      	mov	r2, r6
  40fcb8:	4639      	mov	r1, r7
  40fcba:	4640      	mov	r0, r8
  40fcbc:	47a8      	blx	r5
        if(res == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
  40fcbe:	4603      	mov	r3, r0
  40fcc0:	b140      	cbz	r0, 40fcd4 <lv_draw_mask_apply+0x40>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
  40fcc2:	2802      	cmp	r0, #2
  40fcc4:	d1f1      	bne.n	40fcaa <lv_draw_mask_apply+0x16>
  40fcc6:	f04f 0901 	mov.w	r9, #1
  40fcca:	e7ee      	b.n	40fcaa <lv_draw_mask_apply+0x16>
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
  40fccc:	f1b9 0f00 	cmp.w	r9, #0
  40fcd0:	d004      	beq.n	40fcdc <lv_draw_mask_apply+0x48>
  40fcd2:	2302      	movs	r3, #2
}
  40fcd4:	4618      	mov	r0, r3
  40fcd6:	b002      	add	sp, #8
  40fcd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
  40fcdc:	2301      	movs	r3, #1
  40fcde:	e7f9      	b.n	40fcd4 <lv_draw_mask_apply+0x40>
  40fce0:	2043a364 	.word	0x2043a364

0040fce4 <lv_draw_mask_remove_id>:
    if(id != LV_MASK_ID_INV) {
  40fce4:	f1b0 3fff 	cmp.w	r0, #4294967295
  40fce8:	d00a      	beq.n	40fd00 <lv_draw_mask_remove_id+0x1c>
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
  40fcea:	4b06      	ldr	r3, [pc, #24]	; (40fd04 <lv_draw_mask_remove_id+0x20>)
  40fcec:	f853 1030 	ldr.w	r1, [r3, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).param = NULL;
  40fcf0:	2200      	movs	r2, #0
  40fcf2:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
  40fcf6:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  40fcfa:	605a      	str	r2, [r3, #4]
}
  40fcfc:	4608      	mov	r0, r1
  40fcfe:	4770      	bx	lr
    void * p = NULL;
  40fd00:	2100      	movs	r1, #0
    return p;
  40fd02:	e7fb      	b.n	40fcfc <lv_draw_mask_remove_id+0x18>
  40fd04:	2043a364 	.word	0x2043a364

0040fd08 <lv_draw_mask_remove_custom>:
{
  40fd08:	4601      	mov	r1, r0
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40fd0a:	2300      	movs	r3, #0
    void * p = NULL;
  40fd0c:	4618      	mov	r0, r3
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40fd0e:	e004      	b.n	40fd1a <lv_draw_mask_remove_custom+0x12>
}
  40fd10:	f85d 4b04 	ldr.w	r4, [sp], #4
  40fd14:	4770      	bx	lr
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40fd16:	3301      	adds	r3, #1
  40fd18:	b2db      	uxtb	r3, r3
  40fd1a:	2b0f      	cmp	r3, #15
  40fd1c:	d81a      	bhi.n	40fd54 <lv_draw_mask_remove_custom+0x4c>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
  40fd1e:	4a0e      	ldr	r2, [pc, #56]	; (40fd58 <lv_draw_mask_remove_custom+0x50>)
  40fd20:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  40fd24:	6852      	ldr	r2, [r2, #4]
  40fd26:	428a      	cmp	r2, r1
  40fd28:	d1f5      	bne.n	40fd16 <lv_draw_mask_remove_custom+0xe>
{
  40fd2a:	b410      	push	{r4}
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
  40fd2c:	4a0a      	ldr	r2, [pc, #40]	; (40fd58 <lv_draw_mask_remove_custom+0x50>)
  40fd2e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
  40fd32:	2400      	movs	r4, #0
  40fd34:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
            LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = NULL;
  40fd38:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  40fd3c:	6054      	str	r4, [r2, #4]
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40fd3e:	3301      	adds	r3, #1
  40fd40:	b2db      	uxtb	r3, r3
  40fd42:	2b0f      	cmp	r3, #15
  40fd44:	d8e4      	bhi.n	40fd10 <lv_draw_mask_remove_custom+0x8>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
  40fd46:	4a04      	ldr	r2, [pc, #16]	; (40fd58 <lv_draw_mask_remove_custom+0x50>)
  40fd48:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  40fd4c:	6852      	ldr	r2, [r2, #4]
  40fd4e:	428a      	cmp	r2, r1
  40fd50:	d1f5      	bne.n	40fd3e <lv_draw_mask_remove_custom+0x36>
  40fd52:	e7eb      	b.n	40fd2c <lv_draw_mask_remove_custom+0x24>
  40fd54:	4770      	bx	lr
  40fd56:	bf00      	nop
  40fd58:	2043a364 	.word	0x2043a364

0040fd5c <lv_draw_mask_get_cnt>:
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40fd5c:	2300      	movs	r3, #0
    uint8_t cnt = 0;
  40fd5e:	4618      	mov	r0, r3
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40fd60:	e001      	b.n	40fd66 <lv_draw_mask_get_cnt+0xa>
  40fd62:	3301      	adds	r3, #1
  40fd64:	b2db      	uxtb	r3, r3
  40fd66:	2b0f      	cmp	r3, #15
  40fd68:	d807      	bhi.n	40fd7a <lv_draw_mask_get_cnt+0x1e>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param) cnt++;
  40fd6a:	4a04      	ldr	r2, [pc, #16]	; (40fd7c <lv_draw_mask_get_cnt+0x20>)
  40fd6c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  40fd70:	2a00      	cmp	r2, #0
  40fd72:	d0f6      	beq.n	40fd62 <lv_draw_mask_get_cnt+0x6>
  40fd74:	3001      	adds	r0, #1
  40fd76:	b2c0      	uxtb	r0, r0
  40fd78:	e7f3      	b.n	40fd62 <lv_draw_mask_get_cnt+0x6>
}
  40fd7a:	4770      	bx	lr
  40fd7c:	2043a364 	.word	0x2043a364

0040fd80 <lv_draw_mask_line_points_init>:
{
  40fd80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40fd84:	4604      	mov	r4, r0
  40fd86:	4688      	mov	r8, r1
  40fd88:	4616      	mov	r6, r2
  40fd8a:	461f      	mov	r7, r3
  40fd8c:	f9bd 5018 	ldrsh.w	r5, [sp, #24]
    _lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
  40fd90:	212c      	movs	r1, #44	; 0x2c
  40fd92:	4b50      	ldr	r3, [pc, #320]	; (40fed4 <lv_draw_mask_line_points_init+0x154>)
  40fd94:	4798      	blx	r3
    if(p1y > p2y) {
  40fd96:	42ae      	cmp	r6, r5
  40fd98:	dc05      	bgt.n	40fda6 <lv_draw_mask_line_points_init+0x26>
  40fd9a:	462b      	mov	r3, r5
  40fd9c:	4635      	mov	r5, r6
  40fd9e:	461e      	mov	r6, r3
  40fda0:	463b      	mov	r3, r7
  40fda2:	4647      	mov	r7, r8
  40fda4:	4698      	mov	r8, r3
    param->cfg.p1.x = p1x;
  40fda6:	8127      	strh	r7, [r4, #8]
    param->cfg.p1.y = p1y;
  40fda8:	8165      	strh	r5, [r4, #10]
    param->cfg.p2.x = p2x;
  40fdaa:	f8a4 800c 	strh.w	r8, [r4, #12]
    param->cfg.p2.y = p2y;
  40fdae:	81e6      	strh	r6, [r4, #14]
    param->cfg.side = side;
  40fdb0:	7c23      	ldrb	r3, [r4, #16]
  40fdb2:	f89d 201c 	ldrb.w	r2, [sp, #28]
  40fdb6:	f362 0301 	bfi	r3, r2, #0, #2
  40fdba:	7423      	strb	r3, [r4, #16]
    param->origo.x = p1x;
  40fdbc:	8267      	strh	r7, [r4, #18]
    param->origo.y = p1y;
  40fdbe:	82a5      	strh	r5, [r4, #20]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
  40fdc0:	eba8 0707 	sub.w	r7, r8, r7
  40fdc4:	ea87 72e7 	eor.w	r2, r7, r7, asr #31
  40fdc8:	eba2 72e7 	sub.w	r2, r2, r7, asr #31
  40fdcc:	1b75      	subs	r5, r6, r5
  40fdce:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
  40fdd2:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
  40fdd6:	429a      	cmp	r2, r3
  40fdd8:	bfd4      	ite	le
  40fdda:	2200      	movle	r2, #0
  40fddc:	2201      	movgt	r2, #1
  40fdde:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40fde2:	f362 0300 	bfi	r3, r2, #0, #1
  40fde6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    param->yx_steep = 0;
  40fdea:	2200      	movs	r2, #0
  40fdec:	61e2      	str	r2, [r4, #28]
    param->xy_steep = 0;
  40fdee:	61a2      	str	r2, [r4, #24]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
  40fdf0:	4939      	ldr	r1, [pc, #228]	; (40fed8 <lv_draw_mask_line_points_init+0x158>)
  40fdf2:	6021      	str	r1, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;
  40fdf4:	7122      	strb	r2, [r4, #4]
    if(param->flat) {
  40fdf6:	f013 0f01 	tst.w	r3, #1
  40fdfa:	d024      	beq.n	40fe46 <lv_draw_mask_line_points_init+0xc6>
        if(dx) {
  40fdfc:	b13f      	cbz	r7, 40fe0e <lv_draw_mask_line_points_init+0x8e>
            m = (1 << 20) / dx;  /*m is multiplier to normalize y (upscaled by 1024)*/
  40fdfe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  40fe02:	fb93 f3f7 	sdiv	r3, r3, r7
            param->yx_steep = (m * dy) >> 10;
  40fe06:	fb03 f305 	mul.w	r3, r3, r5
  40fe0a:	129b      	asrs	r3, r3, #10
  40fe0c:	61e3      	str	r3, [r4, #28]
        if(dy) {
  40fe0e:	b13d      	cbz	r5, 40fe20 <lv_draw_mask_line_points_init+0xa0>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
  40fe10:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
  40fe14:	fb96 f5f5 	sdiv	r5, r6, r5
            param->xy_steep = (m * dx) >> 10;
  40fe18:	fb05 f707 	mul.w	r7, r5, r7
  40fe1c:	12bf      	asrs	r7, r7, #10
  40fe1e:	61a7      	str	r7, [r4, #24]
        param->steep = param->yx_steep;
  40fe20:	69e3      	ldr	r3, [r4, #28]
  40fe22:	6223      	str	r3, [r4, #32]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
  40fe24:	7c23      	ldrb	r3, [r4, #16]
  40fe26:	f013 0303 	ands.w	r3, r3, #3
  40fe2a:	d121      	bne.n	40fe70 <lv_draw_mask_line_points_init+0xf0>
  40fe2c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40fe30:	f36f 0341 	bfc	r3, #1, #1
  40fe34:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    param->spx = param->steep >> 2;
  40fe38:	6a22      	ldr	r2, [r4, #32]
  40fe3a:	1093      	asrs	r3, r2, #2
  40fe3c:	6263      	str	r3, [r4, #36]	; 0x24
    if(param->steep < 0) param->spx = -param->spx;
  40fe3e:	2a00      	cmp	r2, #0
  40fe40:	db45      	blt.n	40fece <lv_draw_mask_line_points_init+0x14e>
  40fe42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(dy) {
  40fe46:	b13d      	cbz	r5, 40fe58 <lv_draw_mask_line_points_init+0xd8>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
  40fe48:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  40fe4c:	fb93 f3f5 	sdiv	r3, r3, r5
            param->xy_steep = (m * dx) >> 10;
  40fe50:	fb03 f307 	mul.w	r3, r3, r7
  40fe54:	129b      	asrs	r3, r3, #10
  40fe56:	61a3      	str	r3, [r4, #24]
        if(dx) {
  40fe58:	b13f      	cbz	r7, 40fe6a <lv_draw_mask_line_points_init+0xea>
            m = (1 << 20) / dx;  /*m is multiplier to normalize x (upscaled by 1024)*/
  40fe5a:	f44f 1880 	mov.w	r8, #1048576	; 0x100000
  40fe5e:	fb98 f7f7 	sdiv	r7, r8, r7
            param->yx_steep = (m * dy) >> 10;
  40fe62:	fb07 f505 	mul.w	r5, r7, r5
  40fe66:	12ad      	asrs	r5, r5, #10
  40fe68:	61e5      	str	r5, [r4, #28]
        param->steep = param->xy_steep;
  40fe6a:	69a3      	ldr	r3, [r4, #24]
  40fe6c:	6223      	str	r3, [r4, #32]
  40fe6e:	e7d9      	b.n	40fe24 <lv_draw_mask_line_points_init+0xa4>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
  40fe70:	2b01      	cmp	r3, #1
  40fe72:	d00d      	beq.n	40fe90 <lv_draw_mask_line_points_init+0x110>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP) {
  40fe74:	2b02      	cmp	r3, #2
  40fe76:	d012      	beq.n	40fe9e <lv_draw_mask_line_points_init+0x11e>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) {
  40fe78:	2b03      	cmp	r3, #3
  40fe7a:	d1dd      	bne.n	40fe38 <lv_draw_mask_line_points_init+0xb8>
        if(param->steep > 0) param->inv = 0;
  40fe7c:	6a23      	ldr	r3, [r4, #32]
  40fe7e:	2b00      	cmp	r3, #0
  40fe80:	dd1e      	ble.n	40fec0 <lv_draw_mask_line_points_init+0x140>
  40fe82:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40fe86:	f36f 0341 	bfc	r3, #1, #1
  40fe8a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  40fe8e:	e7d3      	b.n	40fe38 <lv_draw_mask_line_points_init+0xb8>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
  40fe90:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40fe94:	f043 0302 	orr.w	r3, r3, #2
  40fe98:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  40fe9c:	e7cc      	b.n	40fe38 <lv_draw_mask_line_points_init+0xb8>
        if(param->steep > 0) param->inv = 1;
  40fe9e:	6a23      	ldr	r3, [r4, #32]
  40fea0:	2b00      	cmp	r3, #0
  40fea2:	dd06      	ble.n	40feb2 <lv_draw_mask_line_points_init+0x132>
  40fea4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40fea8:	f043 0302 	orr.w	r3, r3, #2
  40feac:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  40feb0:	e7c2      	b.n	40fe38 <lv_draw_mask_line_points_init+0xb8>
        else param->inv = 0;
  40feb2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40feb6:	f36f 0341 	bfc	r3, #1, #1
  40feba:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  40febe:	e7bb      	b.n	40fe38 <lv_draw_mask_line_points_init+0xb8>
        else param->inv = 1;
  40fec0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40fec4:	f043 0302 	orr.w	r3, r3, #2
  40fec8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  40fecc:	e7b4      	b.n	40fe38 <lv_draw_mask_line_points_init+0xb8>
    if(param->steep < 0) param->spx = -param->spx;
  40fece:	425b      	negs	r3, r3
  40fed0:	6263      	str	r3, [r4, #36]	; 0x24
}
  40fed2:	e7b6      	b.n	40fe42 <lv_draw_mask_line_points_init+0xc2>
  40fed4:	00416c0d 	.word	0x00416c0d
  40fed8:	0040f5dd 	.word	0x0040f5dd

0040fedc <lv_draw_mask_radius_init>:
{
  40fedc:	b470      	push	{r4, r5, r6}
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40fede:	888c      	ldrh	r4, [r1, #4]
  40fee0:	880e      	ldrh	r6, [r1, #0]
  40fee2:	1ba4      	subs	r4, r4, r6
  40fee4:	b2a4      	uxth	r4, r4
  40fee6:	3401      	adds	r4, #1
  40fee8:	b226      	sxth	r6, r4
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40feea:	88cd      	ldrh	r5, [r1, #6]
  40feec:	884c      	ldrh	r4, [r1, #2]
  40feee:	1b2d      	subs	r5, r5, r4
  40fef0:	b2ad      	uxth	r5, r5
  40fef2:	3501      	adds	r5, #1
  40fef4:	b22c      	sxth	r4, r5
    int32_t short_side = LV_MATH_MIN(w, h);
  40fef6:	42b4      	cmp	r4, r6
  40fef8:	bfa8      	it	ge
  40fefa:	4634      	movge	r4, r6
    if(radius > short_side >> 1) radius = short_side >> 1;
  40fefc:	1064      	asrs	r4, r4, #1
  40fefe:	42a2      	cmp	r2, r4
  40ff00:	dd00      	ble.n	40ff04 <lv_draw_mask_radius_init+0x28>
  40ff02:	b222      	sxth	r2, r4
    uint8_t * d8 = (uint8_t *)dst;
  40ff04:	f100 0508 	add.w	r5, r0, #8
    lv_area_copy(&param->cfg.rect, rect);
  40ff08:	2408      	movs	r4, #8
  40ff0a:	e004      	b.n	40ff16 <lv_draw_mask_radius_init+0x3a>
        *d8 = *s8;
  40ff0c:	f811 6b01 	ldrb.w	r6, [r1], #1
  40ff10:	f805 6b01 	strb.w	r6, [r5], #1
        len--;
  40ff14:	3c01      	subs	r4, #1
    while(len) {
  40ff16:	2c00      	cmp	r4, #0
  40ff18:	d1f8      	bne.n	40ff0c <lv_draw_mask_radius_init+0x30>
    param->cfg.radius = radius;
  40ff1a:	8202      	strh	r2, [r0, #16]
    param->cfg.outer = inv ? 1 : 0;
  40ff1c:	7c82      	ldrb	r2, [r0, #18]
  40ff1e:	f363 0200 	bfi	r2, r3, #0, #1
  40ff22:	7482      	strb	r2, [r0, #18]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
  40ff24:	4b05      	ldr	r3, [pc, #20]	; (40ff3c <lv_draw_mask_radius_init+0x60>)
  40ff26:	6003      	str	r3, [r0, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
  40ff28:	2302      	movs	r3, #2
  40ff2a:	7103      	strb	r3, [r0, #4]
    param->y_prev = INT32_MIN;
  40ff2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  40ff30:	6143      	str	r3, [r0, #20]
    param->y_prev_x.f = 0;
  40ff32:	2300      	movs	r3, #0
  40ff34:	8343      	strh	r3, [r0, #26]
    param->y_prev_x.i = 0;
  40ff36:	8303      	strh	r3, [r0, #24]
}
  40ff38:	bc70      	pop	{r4, r5, r6}
  40ff3a:	4770      	bx	lr
  40ff3c:	0040f6c9 	.word	0x0040f6c9

0040ff40 <lv_draw_mask_fade_init>:
{
  40ff40:	b470      	push	{r4, r5, r6}
    uint8_t * d8 = (uint8_t *)dst;
  40ff42:	f100 0508 	add.w	r5, r0, #8
    lv_area_copy(&param->cfg.coords, coords);
  40ff46:	2408      	movs	r4, #8
  40ff48:	e004      	b.n	40ff54 <lv_draw_mask_fade_init+0x14>
        *d8 = *s8;
  40ff4a:	f811 6b01 	ldrb.w	r6, [r1], #1
  40ff4e:	f805 6b01 	strb.w	r6, [r5], #1
        len--;
  40ff52:	3c01      	subs	r4, #1
    while(len) {
  40ff54:	2c00      	cmp	r4, #0
  40ff56:	d1f8      	bne.n	40ff4a <lv_draw_mask_fade_init+0xa>
    param->cfg.opa_top = opa_top;
  40ff58:	7502      	strb	r2, [r0, #20]
    param->cfg.opa_bottom = opa_bottom;
  40ff5a:	f89d 200c 	ldrb.w	r2, [sp, #12]
  40ff5e:	7542      	strb	r2, [r0, #21]
    param->cfg.y_top = y_top;
  40ff60:	8203      	strh	r3, [r0, #16]
    param->cfg.y_bottom = y_bottom;
  40ff62:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
  40ff66:	8243      	strh	r3, [r0, #18]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_fade;
  40ff68:	4b02      	ldr	r3, [pc, #8]	; (40ff74 <lv_draw_mask_fade_init+0x34>)
  40ff6a:	6003      	str	r3, [r0, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_FADE;
  40ff6c:	2303      	movs	r3, #3
  40ff6e:	7103      	strb	r3, [r0, #4]
}
  40ff70:	bc70      	pop	{r4, r5, r6}
  40ff72:	4770      	bx	lr
  40ff74:	0040efb9 	.word	0x0040efb9

0040ff78 <shadow_blur_corner>:
#endif

}

LV_ATTRIBUTE_FAST_MEM static void shadow_blur_corner(lv_coord_t size, lv_coord_t sw, uint16_t * sh_ups_buf)
{
  40ff78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ff7c:	b085      	sub	sp, #20
  40ff7e:	9002      	str	r0, [sp, #8]
  40ff80:	9101      	str	r1, [sp, #4]
  40ff82:	4615      	mov	r5, r2
    int32_t s_left = sw >> 1;
  40ff84:	104f      	asrs	r7, r1, #1
    int32_t s_right = (sw >> 1);
    if((sw & 1) == 0) s_left--;
  40ff86:	f011 0f01 	tst.w	r1, #1
  40ff8a:	d10e      	bne.n	40ffaa <shadow_blur_corner+0x32>
  40ff8c:	f107 38ff 	add.w	r8, r7, #4294967295

    /*Horizontal blur*/
    uint16_t * sh_ups_blur_buf = _lv_mem_buf_get(size * sizeof(uint16_t));
  40ff90:	9b02      	ldr	r3, [sp, #8]
  40ff92:	469a      	mov	sl, r3
  40ff94:	005e      	lsls	r6, r3, #1
  40ff96:	4630      	mov	r0, r6
  40ff98:	4b50      	ldr	r3, [pc, #320]	; (4100dc <shadow_blur_corner+0x164>)
  40ff9a:	4798      	blx	r3
  40ff9c:	4604      	mov	r4, r0

    int32_t x;
    int32_t y;

    uint16_t * sh_ups_tmp_buf = sh_ups_buf;
  40ff9e:	46a9      	mov	r9, r5

    for(y = 0; y < size; y++) {
  40ffa0:	f04f 0b00 	mov.w	fp, #0
  40ffa4:	9503      	str	r5, [sp, #12]
  40ffa6:	9d02      	ldr	r5, [sp, #8]
  40ffa8:	e024      	b.n	40fff4 <shadow_blur_corner+0x7c>
    int32_t s_left = sw >> 1;
  40ffaa:	46b8      	mov	r8, r7
  40ffac:	e7f0      	b.n	40ff90 <shadow_blur_corner+0x18>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
        for(x = size - 1; x >= 0; x--) {
            sh_ups_blur_buf[x] = v;

            /*Forget the right pixel*/
            uint32_t right_val = 0;
  40ffae:	2200      	movs	r2, #0
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
            v -= right_val;
  40ffb0:	1a9b      	subs	r3, r3, r2

            /*Add the left pixel*/
            uint32_t left_val;
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
  40ffb2:	eba0 0e08 	sub.w	lr, r0, r8
  40ffb6:	f1be 0f01 	cmp.w	lr, #1
  40ffba:	d410      	bmi.n	40ffde <shadow_blur_corner+0x66>
            else left_val = sh_ups_tmp_buf[x - s_left - 1];
  40ffbc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
  40ffc0:	4472      	add	r2, lr
  40ffc2:	f839 2012 	ldrh.w	r2, [r9, r2, lsl #1]
            v += left_val;
  40ffc6:	4413      	add	r3, r2
        for(x = size - 1; x >= 0; x--) {
  40ffc8:	3801      	subs	r0, #1
  40ffca:	2800      	cmp	r0, #0
  40ffcc:	db0a      	blt.n	40ffe4 <shadow_blur_corner+0x6c>
            sh_ups_blur_buf[x] = v;
  40ffce:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
  40ffd2:	19c2      	adds	r2, r0, r7
  40ffd4:	4291      	cmp	r1, r2
  40ffd6:	ddea      	ble.n	40ffae <shadow_blur_corner+0x36>
  40ffd8:	f839 2012 	ldrh.w	r2, [r9, r2, lsl #1]
  40ffdc:	e7e8      	b.n	40ffb0 <shadow_blur_corner+0x38>
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
  40ffde:	f8b9 2000 	ldrh.w	r2, [r9]
  40ffe2:	e7f0      	b.n	40ffc6 <shadow_blur_corner+0x4e>
        }
        _lv_memcpy(sh_ups_tmp_buf, sh_ups_blur_buf, size * sizeof(uint16_t));
  40ffe4:	4632      	mov	r2, r6
  40ffe6:	4621      	mov	r1, r4
  40ffe8:	4648      	mov	r0, r9
  40ffea:	4b3d      	ldr	r3, [pc, #244]	; (4100e0 <shadow_blur_corner+0x168>)
  40ffec:	4798      	blx	r3
        sh_ups_tmp_buf += size;
  40ffee:	44b1      	add	r9, r6
    for(y = 0; y < size; y++) {
  40fff0:	f10b 0b01 	add.w	fp, fp, #1
  40fff4:	4629      	mov	r1, r5
  40fff6:	45ab      	cmp	fp, r5
  40fff8:	da09      	bge.n	41000e <shadow_blur_corner+0x96>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
  40fffa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  40fffe:	4453      	add	r3, sl
  410000:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
  410004:	9a01      	ldr	r2, [sp, #4]
  410006:	fb02 f303 	mul.w	r3, r2, r3
        for(x = size - 1; x >= 0; x--) {
  41000a:	1e68      	subs	r0, r5, #1
  41000c:	e7dd      	b.n	40ffca <shadow_blur_corner+0x52>
  41000e:	9d03      	ldr	r5, [sp, #12]
    }

    /*Vertical blur*/
    uint32_t i;
    sh_ups_buf[0] = sh_ups_buf[0] / sw;
  410010:	882b      	ldrh	r3, [r5, #0]
  410012:	9a01      	ldr	r2, [sp, #4]
  410014:	4694      	mov	ip, r2
  410016:	fb93 f3f2 	sdiv	r3, r3, r2
  41001a:	802b      	strh	r3, [r5, #0]
    for(i = 1; i < (uint32_t)size * size; i++) {
  41001c:	2301      	movs	r3, #1
  41001e:	e002      	b.n	410026 <shadow_blur_corner+0xae>
        if(sh_ups_buf[i] == sh_ups_buf[i - 1]) sh_ups_buf[i] = sh_ups_buf[i - 1];
  410020:	f825 0013 	strh.w	r0, [r5, r3, lsl #1]
    for(i = 1; i < (uint32_t)size * size; i++) {
  410024:	3301      	adds	r3, #1
  410026:	fb0a f20a 	mul.w	r2, sl, sl
  41002a:	4293      	cmp	r3, r2
  41002c:	d20d      	bcs.n	41004a <shadow_blur_corner+0xd2>
        if(sh_ups_buf[i] == sh_ups_buf[i - 1]) sh_ups_buf[i] = sh_ups_buf[i - 1];
  41002e:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
  410032:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
  410036:	4418      	add	r0, r3
  410038:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
  41003c:	4282      	cmp	r2, r0
  41003e:	d0ef      	beq.n	410020 <shadow_blur_corner+0xa8>
        else sh_ups_buf[i] = sh_ups_buf[i] / sw;
  410040:	fb92 f2fc 	sdiv	r2, r2, ip
  410044:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
  410048:	e7ec      	b.n	410024 <shadow_blur_corner+0xac>
  41004a:	f04f 0a00 	mov.w	sl, #0
  41004e:	e034      	b.n	4100ba <shadow_blur_corner+0x142>

    for(x = 0; x < size; x++) {
        sh_ups_tmp_buf = &sh_ups_buf[x];
        int32_t v = sh_ups_tmp_buf[0] * sw;
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSCALE_SHIFT);
  410050:	f04f 0b00 	mov.w	fp, #0
  410054:	e011      	b.n	41007a <shadow_blur_corner+0x102>

            /*Forget the top pixel*/
            uint32_t top_val;
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
  410056:	f8b9 0000 	ldrh.w	r0, [r9]
  41005a:	e017      	b.n	41008c <shadow_blur_corner+0x114>
            v -= top_val;

            /*Add the bottom pixel*/
            uint32_t bottom_val;
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
  41005c:	1e48      	subs	r0, r1, #1
  41005e:	fb00 a001 	mla	r0, r0, r1, sl
  410062:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
            v += bottom_val;
  410066:	4402      	add	r2, r0
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
  410068:	3301      	adds	r3, #1
  41006a:	44b1      	add	r9, r6
  41006c:	428b      	cmp	r3, r1
  41006e:	da18      	bge.n	4100a2 <shadow_blur_corner+0x12a>
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSCALE_SHIFT);
  410070:	0058      	lsls	r0, r3, #1
  410072:	2a00      	cmp	r2, #0
  410074:	dbec      	blt.n	410050 <shadow_blur_corner+0xd8>
  410076:	f3c2 1b8f 	ubfx	fp, r2, #6, #16
  41007a:	f824 b000 	strh.w	fp, [r4, r0]
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
  41007e:	1bd8      	subs	r0, r3, r7
  410080:	2800      	cmp	r0, #0
  410082:	dde8      	ble.n	410056 <shadow_blur_corner+0xde>
            else top_val = sh_ups_buf[(y - s_right) * size + x];
  410084:	fb00 a001 	mla	r0, r0, r1, sl
  410088:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
            v -= top_val;
  41008c:	1a12      	subs	r2, r2, r0
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
  41008e:	eb08 0003 	add.w	r0, r8, r3
  410092:	3001      	adds	r0, #1
  410094:	4281      	cmp	r1, r0
  410096:	dde1      	ble.n	41005c <shadow_blur_corner+0xe4>
  410098:	fb00 a001 	mla	r0, r0, r1, sl
  41009c:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
  4100a0:	e7e1      	b.n	410066 <shadow_blur_corner+0xee>
  4100a2:	2300      	movs	r3, #0
  4100a4:	e005      	b.n	4100b2 <shadow_blur_corner+0x13a>
        }

        /*Write back the result into `sh_ups_buf`*/
        sh_ups_tmp_buf = &sh_ups_buf[x];
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
  4100a6:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
  4100aa:	f8ae 2000 	strh.w	r2, [lr]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
  4100ae:	3301      	adds	r3, #1
  4100b0:	44b6      	add	lr, r6
  4100b2:	428b      	cmp	r3, r1
  4100b4:	dbf7      	blt.n	4100a6 <shadow_blur_corner+0x12e>
    for(x = 0; x < size; x++) {
  4100b6:	f10a 0a01 	add.w	sl, sl, #1
  4100ba:	458a      	cmp	sl, r1
  4100bc:	da08      	bge.n	4100d0 <shadow_blur_corner+0x158>
        sh_ups_tmp_buf = &sh_ups_buf[x];
  4100be:	eb05 0e4a 	add.w	lr, r5, sl, lsl #1
        int32_t v = sh_ups_tmp_buf[0] * sw;
  4100c2:	f835 201a 	ldrh.w	r2, [r5, sl, lsl #1]
  4100c6:	fb02 f20c 	mul.w	r2, r2, ip
        sh_ups_tmp_buf = &sh_ups_buf[x];
  4100ca:	46f1      	mov	r9, lr
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
  4100cc:	2300      	movs	r3, #0
  4100ce:	e7cd      	b.n	41006c <shadow_blur_corner+0xf4>
        }
    }

    _lv_mem_buf_release(sh_ups_blur_buf);
  4100d0:	4620      	mov	r0, r4
  4100d2:	4b04      	ldr	r3, [pc, #16]	; (4100e4 <shadow_blur_corner+0x16c>)
  4100d4:	4798      	blx	r3
}
  4100d6:	b005      	add	sp, #20
  4100d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4100dc:	00416a81 	.word	0x00416a81
  4100e0:	004168e9 	.word	0x004168e9
  4100e4:	00416831 	.word	0x00416831

004100e8 <shadow_draw_corner_buf>:
{
  4100e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4100ec:	b08f      	sub	sp, #60	; 0x3c
  4100ee:	4688      	mov	r8, r1
  4100f0:	4692      	mov	sl, r2
  4100f2:	461a      	mov	r2, r3
    int32_t size = sw_ori  + r;
  4100f4:	eb0a 0503 	add.w	r5, sl, r3
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;
  4100f8:	4604      	mov	r4, r0
    uint8_t * d8 = (uint8_t *)dst;
  4100fa:	a90c      	add	r1, sp, #48	; 0x30
  4100fc:	2308      	movs	r3, #8
  4100fe:	e004      	b.n	41010a <shadow_draw_corner_buf+0x22>

    while(len) {
        *d8 = *s8;
  410100:	f814 6b01 	ldrb.w	r6, [r4], #1
  410104:	f801 6b01 	strb.w	r6, [r1], #1
        d8++;
        s8++;
        len--;
  410108:	3b01      	subs	r3, #1
    while(len) {
  41010a:	2b00      	cmp	r3, #0
  41010c:	d1f8      	bne.n	410100 <shadow_draw_corner_buf+0x18>
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
  41010e:	4651      	mov	r1, sl
  410110:	f1ba 0f00 	cmp.w	sl, #0
  410114:	db36      	blt.n	410184 <shadow_draw_corner_buf+0x9c>
  410116:	f3c1 014f 	ubfx	r1, r1, #1, #16
  41011a:	188b      	adds	r3, r1, r2
  41011c:	b29b      	uxth	r3, r3
  41011e:	f01a 0401 	ands.w	r4, sl, #1
  410122:	9403      	str	r4, [sp, #12]
  410124:	bf0c      	ite	eq
  410126:	2401      	moveq	r4, #1
  410128:	2400      	movne	r4, #0
  41012a:	1b1b      	subs	r3, r3, r4
  41012c:	3b01      	subs	r3, #1
  41012e:	b29b      	uxth	r3, r3
  410130:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    sh_area.y1 = sw / 2 + 1;
  410134:	3101      	adds	r1, #1
  410136:	b289      	uxth	r1, r1
  410138:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41013c:	8884      	ldrh	r4, [r0, #4]
  41013e:	8806      	ldrh	r6, [r0, #0]
  410140:	1ba4      	subs	r4, r4, r6
  410142:	b2a4      	uxth	r4, r4
  410144:	3401      	adds	r4, #1
  410146:	b2a4      	uxth	r4, r4
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
  410148:	1b1b      	subs	r3, r3, r4
  41014a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41014e:	88c3      	ldrh	r3, [r0, #6]
  410150:	8840      	ldrh	r0, [r0, #2]
  410152:	1a1b      	subs	r3, r3, r0
  410154:	b29b      	uxth	r3, r3
  410156:	3301      	adds	r3, #1
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
  410158:	fa11 f183 	uxtah	r1, r1, r3
  41015c:	f8ad 1036 	strh.w	r1, [sp, #54]	; 0x36
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
  410160:	2300      	movs	r3, #0
  410162:	a90c      	add	r1, sp, #48	; 0x30
  410164:	a805      	add	r0, sp, #20
  410166:	4c4d      	ldr	r4, [pc, #308]	; (41029c <shadow_draw_corner_buf+0x1b4>)
  410168:	47a0      	blx	r4
    if(sw_ori == 1) sw = 1;
  41016a:	f1ba 0f01 	cmp.w	sl, #1
  41016e:	d00c      	beq.n	41018a <shadow_draw_corner_buf+0xa2>
    else sw = sw_ori >> 1;
  410170:	ea4f 0a6a 	mov.w	sl, sl, asr #1
    lv_opa_t * mask_line = _lv_mem_buf_get(size);
  410174:	46a9      	mov	r9, r5
  410176:	4628      	mov	r0, r5
  410178:	4b49      	ldr	r3, [pc, #292]	; (4102a0 <shadow_draw_corner_buf+0x1b8>)
  41017a:	4798      	blx	r3
  41017c:	4604      	mov	r4, r0
    uint16_t * sh_ups_tmp_buf = (uint16_t *)sh_buf;
  41017e:	4646      	mov	r6, r8
    for(y = 0; y < size; y++) {
  410180:	2700      	movs	r7, #0
  410182:	e00d      	b.n	4101a0 <shadow_draw_corner_buf+0xb8>
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
  410184:	f10a 0101 	add.w	r1, sl, #1
  410188:	e7c5      	b.n	410116 <shadow_draw_corner_buf+0x2e>
    if(sw_ori == 1) sw = 1;
  41018a:	f04f 0a01 	mov.w	sl, #1
  41018e:	e7f1      	b.n	410174 <shadow_draw_corner_buf+0x8c>
            _lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
  410190:	ea4f 0149 	mov.w	r1, r9, lsl #1
  410194:	4630      	mov	r0, r6
  410196:	4b43      	ldr	r3, [pc, #268]	; (4102a4 <shadow_draw_corner_buf+0x1bc>)
  410198:	4798      	blx	r3
        sh_ups_tmp_buf += size;
  41019a:	eb06 0649 	add.w	r6, r6, r9, lsl #1
    for(y = 0; y < size; y++) {
  41019e:	3701      	adds	r7, #1
  4101a0:	42af      	cmp	r7, r5
  4101a2:	da2c      	bge.n	4101fe <shadow_draw_corner_buf+0x116>
        _lv_memset_ff(mask_line, size);
  4101a4:	4649      	mov	r1, r9
  4101a6:	4620      	mov	r0, r4
  4101a8:	4b3f      	ldr	r3, [pc, #252]	; (4102a8 <shadow_draw_corner_buf+0x1c0>)
  4101aa:	4798      	blx	r3
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
  4101ac:	ab0e      	add	r3, sp, #56	; 0x38
  4101ae:	f853 bd24 	ldr.w	fp, [r3, #-36]!
  4101b2:	9300      	str	r3, [sp, #0]
  4101b4:	b22b      	sxth	r3, r5
  4101b6:	b23a      	sxth	r2, r7
  4101b8:	2100      	movs	r1, #0
  4101ba:	4620      	mov	r0, r4
  4101bc:	47d8      	blx	fp
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
  4101be:	2800      	cmp	r0, #0
  4101c0:	d0e6      	beq.n	410190 <shadow_draw_corner_buf+0xa8>
            sh_ups_tmp_buf[0] = (mask_line[0] << SHADOW_UPSCALE_SHIFT) / sw;
  4101c2:	7823      	ldrb	r3, [r4, #0]
  4101c4:	019b      	lsls	r3, r3, #6
  4101c6:	4650      	mov	r0, sl
  4101c8:	fb93 f3fa 	sdiv	r3, r3, sl
  4101cc:	8033      	strh	r3, [r6, #0]
            for(i = 1; i < size; i++) {
  4101ce:	2301      	movs	r3, #1
  4101d0:	e007      	b.n	4101e2 <shadow_draw_corner_buf+0xfa>
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
  4101d2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
  4101d6:	441a      	add	r2, r3
  4101d8:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
  4101dc:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
            for(i = 1; i < size; i++) {
  4101e0:	3301      	adds	r3, #1
  4101e2:	42ab      	cmp	r3, r5
  4101e4:	dad9      	bge.n	41019a <shadow_draw_corner_buf+0xb2>
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
  4101e6:	5ce2      	ldrb	r2, [r4, r3]
  4101e8:	18e1      	adds	r1, r4, r3
  4101ea:	f811 1c01 	ldrb.w	r1, [r1, #-1]
  4101ee:	428a      	cmp	r2, r1
  4101f0:	d0ef      	beq.n	4101d2 <shadow_draw_corner_buf+0xea>
                else sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSCALE_SHIFT) / sw;
  4101f2:	0192      	lsls	r2, r2, #6
  4101f4:	fb92 f2f0 	sdiv	r2, r2, r0
  4101f8:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
  4101fc:	e7f0      	b.n	4101e0 <shadow_draw_corner_buf+0xf8>
    _lv_mem_buf_release(mask_line);
  4101fe:	4620      	mov	r0, r4
  410200:	4b2a      	ldr	r3, [pc, #168]	; (4102ac <shadow_draw_corner_buf+0x1c4>)
  410202:	4798      	blx	r3
    if(sw == 1) {
  410204:	f1ba 0f01 	cmp.w	sl, #1
  410208:	d021      	beq.n	41024e <shadow_draw_corner_buf+0x166>
    shadow_blur_corner(size, sw, sh_buf);
  41020a:	b22c      	sxth	r4, r5
  41020c:	4642      	mov	r2, r8
  41020e:	4651      	mov	r1, sl
  410210:	4620      	mov	r0, r4
  410212:	4b27      	ldr	r3, [pc, #156]	; (4102b0 <shadow_draw_corner_buf+0x1c8>)
  410214:	4798      	blx	r3
    sw += sw_ori & 1;
  410216:	9b03      	ldr	r3, [sp, #12]
  410218:	4453      	add	r3, sl
  41021a:	b219      	sxth	r1, r3
    if(sw > 1) {
  41021c:	2901      	cmp	r1, #1
  41021e:	dd32      	ble.n	410286 <shadow_draw_corner_buf+0x19e>
        sh_buf[0] = (sh_buf[0] << SHADOW_UPSCALE_SHIFT) / sw;
  410220:	f8b8 3000 	ldrh.w	r3, [r8]
  410224:	019b      	lsls	r3, r3, #6
  410226:	460e      	mov	r6, r1
  410228:	fb93 f3f1 	sdiv	r3, r3, r1
  41022c:	f8a8 3000 	strh.w	r3, [r8]
        for(i = 1; i < (uint32_t) size * size; i++) {
  410230:	2301      	movs	r3, #1
  410232:	e011      	b.n	410258 <shadow_draw_corner_buf+0x170>
            res_buf[i] = (sh_buf[i] >> SHADOW_UPSCALE_SHIFT);
  410234:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
  410238:	0992      	lsrs	r2, r2, #6
  41023a:	f808 2003 	strb.w	r2, [r8, r3]
        for(i = 0; i < size * size; i++) {
  41023e:	3301      	adds	r3, #1
  410240:	fb05 f205 	mul.w	r2, r5, r5
  410244:	4293      	cmp	r3, r2
  410246:	dbf5      	blt.n	410234 <shadow_draw_corner_buf+0x14c>
}
  410248:	b00f      	add	sp, #60	; 0x3c
  41024a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41024e:	2300      	movs	r3, #0
  410250:	e7f6      	b.n	410240 <shadow_draw_corner_buf+0x158>
            if(sh_buf[i] == sh_buf[i - 1]) sh_buf[i] = sh_buf[i - 1];
  410252:	f828 0013 	strh.w	r0, [r8, r3, lsl #1]
        for(i = 1; i < (uint32_t) size * size; i++) {
  410256:	3301      	adds	r3, #1
  410258:	fb09 f209 	mul.w	r2, r9, r9
  41025c:	4293      	cmp	r3, r2
  41025e:	d20e      	bcs.n	41027e <shadow_draw_corner_buf+0x196>
            if(sh_buf[i] == sh_buf[i - 1]) sh_buf[i] = sh_buf[i - 1];
  410260:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
  410264:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
  410268:	4418      	add	r0, r3
  41026a:	f838 0010 	ldrh.w	r0, [r8, r0, lsl #1]
  41026e:	4282      	cmp	r2, r0
  410270:	d0ef      	beq.n	410252 <shadow_draw_corner_buf+0x16a>
            else sh_buf[i] = (sh_buf[i] << SHADOW_UPSCALE_SHIFT) / sw;
  410272:	0192      	lsls	r2, r2, #6
  410274:	fb92 f2f6 	sdiv	r2, r2, r6
  410278:	f828 2013 	strh.w	r2, [r8, r3, lsl #1]
  41027c:	e7eb      	b.n	410256 <shadow_draw_corner_buf+0x16e>
        shadow_blur_corner(size, sw, sh_buf);
  41027e:	4642      	mov	r2, r8
  410280:	4620      	mov	r0, r4
  410282:	4b0b      	ldr	r3, [pc, #44]	; (4102b0 <shadow_draw_corner_buf+0x1c8>)
  410284:	4798      	blx	r3
        for(i = 1; i < (uint32_t) size * size; i++) {
  410286:	2300      	movs	r3, #0
    for(x = 0; x < size * size; x++) {
  410288:	fb05 f205 	mul.w	r2, r5, r5
  41028c:	4293      	cmp	r3, r2
  41028e:	dadb      	bge.n	410248 <shadow_draw_corner_buf+0x160>
        res_buf[x] = sh_buf[x];
  410290:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
  410294:	f808 2003 	strb.w	r2, [r8, r3]
    for(x = 0; x < size * size; x++) {
  410298:	3301      	adds	r3, #1
  41029a:	e7f5      	b.n	410288 <shadow_draw_corner_buf+0x1a0>
  41029c:	0040fedd 	.word	0x0040fedd
  4102a0:	00416a81 	.word	0x00416a81
  4102a4:	00416c0d 	.word	0x00416c0d
  4102a8:	00416c65 	.word	0x00416c65
  4102ac:	00416831 	.word	0x00416831
  4102b0:	0040ff79 	.word	0x0040ff79

004102b4 <draw_shadow>:
{
  4102b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4102b8:	b0a7      	sub	sp, #156	; 0x9c
    if(dsc->shadow_width == 0) return;
  4102ba:	f9b2 4022 	ldrsh.w	r4, [r2, #34]	; 0x22
  4102be:	2c00      	cmp	r4, #0
  4102c0:	f000 83f0 	beq.w	410aa4 <draw_shadow+0x7f0>
    if(dsc->shadow_opa <= LV_OPA_MIN) return;
  4102c4:	f892 702a 	ldrb.w	r7, [r2, #42]	; 0x2a
  4102c8:	2f02      	cmp	r7, #2
  4102ca:	f240 83eb 	bls.w	410aa4 <draw_shadow+0x7f0>
    if(dsc->shadow_width == 1 && dsc->shadow_ofs_x == 0 &&
  4102ce:	2c01      	cmp	r4, #1
  4102d0:	d07b      	beq.n	4103ca <draw_shadow+0x116>
    sh_rect_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
  4102d2:	8806      	ldrh	r6, [r0, #0]
  4102d4:	8c93      	ldrh	r3, [r2, #36]	; 0x24
  4102d6:	441e      	add	r6, r3
  4102d8:	b2b6      	uxth	r6, r6
  4102da:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
  4102de:	eba6 060e 	sub.w	r6, r6, lr
  4102e2:	b2b6      	uxth	r6, r6
  4102e4:	f8ad 6090 	strh.w	r6, [sp, #144]	; 0x90
    sh_rect_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
  4102e8:	8885      	ldrh	r5, [r0, #4]
  4102ea:	441d      	add	r5, r3
  4102ec:	fa1e f585 	uxtah	r5, lr, r5
  4102f0:	b2ad      	uxth	r5, r5
  4102f2:	f8ad 5094 	strh.w	r5, [sp, #148]	; 0x94
    sh_rect_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
  4102f6:	8843      	ldrh	r3, [r0, #2]
  4102f8:	f8b2 c026 	ldrh.w	ip, [r2, #38]	; 0x26
  4102fc:	4463      	add	r3, ip
  4102fe:	b29b      	uxth	r3, r3
  410300:	eba3 030e 	sub.w	r3, r3, lr
  410304:	b29b      	uxth	r3, r3
  410306:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
    sh_rect_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
  41030a:	f8b0 8006 	ldrh.w	r8, [r0, #6]
  41030e:	44c4      	add	ip, r8
  410310:	fa1e fe8c 	uxtah	lr, lr, ip
  410314:	fa1f fe8e 	uxth.w	lr, lr
  410318:	f8ad e096 	strh.w	lr, [sp, #150]	; 0x96
    sh_area.x1 = sh_rect_area.x1 - sw / 2 - 1;
  41031c:	46a0      	mov	r8, r4
  41031e:	2c00      	cmp	r4, #0
  410320:	db5c      	blt.n	4103dc <draw_shadow+0x128>
  410322:	ea4f 0868 	mov.w	r8, r8, asr #1
  410326:	f1c8 0800 	rsb	r8, r8, #0
  41032a:	fa1f f888 	uxth.w	r8, r8
  41032e:	eb06 0c08 	add.w	ip, r6, r8
  410332:	fa1f fc8c 	uxth.w	ip, ip
  410336:	f10c 3cff 	add.w	ip, ip, #4294967295
  41033a:	f8ad c088 	strh.w	ip, [sp, #136]	; 0x88
    sh_area.x2 = sh_rect_area.x2 + sw / 2 + 1;
  41033e:	46a4      	mov	ip, r4
  410340:	2c00      	cmp	r4, #0
  410342:	db4e      	blt.n	4103e2 <draw_shadow+0x12e>
  410344:	f3cc 0c4f 	ubfx	ip, ip, #1, #16
  410348:	4465      	add	r5, ip
  41034a:	b2ad      	uxth	r5, r5
  41034c:	3501      	adds	r5, #1
  41034e:	f8ad 508c 	strh.w	r5, [sp, #140]	; 0x8c
    sh_area.y1 = sh_rect_area.y1 - sw / 2 - 1;
  410352:	eb03 0608 	add.w	r6, r3, r8
  410356:	b2b6      	uxth	r6, r6
  410358:	3e01      	subs	r6, #1
  41035a:	f8ad 608a 	strh.w	r6, [sp, #138]	; 0x8a
    sh_area.y2 = sh_rect_area.y2 + sw / 2 + 1;
  41035e:	eb0e 030c 	add.w	r3, lr, ip
  410362:	b29b      	uxth	r3, r3
  410364:	3301      	adds	r3, #1
  410366:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
  41036a:	2ffd      	cmp	r7, #253	; 0xfd
  41036c:	d900      	bls.n	410370 <draw_shadow+0xbc>
  41036e:	27ff      	movs	r7, #255	; 0xff
  410370:	4615      	mov	r5, r2
  410372:	4688      	mov	r8, r1
  410374:	9104      	str	r1, [sp, #16]
  410376:	4681      	mov	r9, r0
  410378:	9009      	str	r0, [sp, #36]	; 0x24
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  41037a:	4b9a      	ldr	r3, [pc, #616]	; (4105e4 <draw_shadow+0x330>)
  41037c:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  41037e:	4b9a      	ldr	r3, [pc, #616]	; (4105e8 <draw_shadow+0x334>)
  410380:	4798      	blx	r3
  410382:	4606      	mov	r6, r0
    is_common = _lv_area_intersect(&draw_area, &sh_area, clip);
  410384:	4642      	mov	r2, r8
  410386:	a922      	add	r1, sp, #136	; 0x88
  410388:	a820      	add	r0, sp, #128	; 0x80
  41038a:	4b98      	ldr	r3, [pc, #608]	; (4105ec <draw_shadow+0x338>)
  41038c:	4798      	blx	r3
    if(is_common == false) return;
  41038e:	9006      	str	r0, [sp, #24]
  410390:	2800      	cmp	r0, #0
  410392:	f000 8387 	beq.w	410aa4 <draw_shadow+0x7f0>
    draw_area.x1 -= disp_area->x1;
  410396:	8a31      	ldrh	r1, [r6, #16]
  410398:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
  41039c:	1a5b      	subs	r3, r3, r1
  41039e:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
    draw_area.y1 -= disp_area->y1;
  4103a2:	8a72      	ldrh	r2, [r6, #18]
  4103a4:	f8bd 3082 	ldrh.w	r3, [sp, #130]	; 0x82
  4103a8:	1a9b      	subs	r3, r3, r2
  4103aa:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
    draw_area.x2 -= disp_area->x1;
  4103ae:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
  4103b2:	1a5b      	subs	r3, r3, r1
  4103b4:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
    draw_area.y2 -= disp_area->y1;
  4103b8:	f8bd 3086 	ldrh.w	r3, [sp, #134]	; 0x86
  4103bc:	1a9b      	subs	r3, r3, r2
  4103be:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
    const uint8_t * s8 = (const uint8_t *)src;
  4103c2:	4649      	mov	r1, r9
    uint8_t * d8 = (uint8_t *)dst;
  4103c4:	aa1e      	add	r2, sp, #120	; 0x78
  4103c6:	2308      	movs	r3, #8
  4103c8:	e013      	b.n	4103f2 <draw_shadow+0x13e>
    if(dsc->shadow_width == 1 && dsc->shadow_ofs_x == 0 &&
  4103ca:	6a53      	ldr	r3, [r2, #36]	; 0x24
  4103cc:	2b00      	cmp	r3, #0
  4103ce:	d180      	bne.n	4102d2 <draw_shadow+0x1e>
       dsc->shadow_ofs_y == 0 && dsc->shadow_spread <= 0) {
  4103d0:	f9b2 3028 	ldrsh.w	r3, [r2, #40]	; 0x28
  4103d4:	2b00      	cmp	r3, #0
  4103d6:	f73f af7c 	bgt.w	4102d2 <draw_shadow+0x1e>
  4103da:	e363      	b.n	410aa4 <draw_shadow+0x7f0>
    sh_area.x1 = sh_rect_area.x1 - sw / 2 - 1;
  4103dc:	f104 0801 	add.w	r8, r4, #1
  4103e0:	e79f      	b.n	410322 <draw_shadow+0x6e>
    sh_area.x2 = sh_rect_area.x2 + sw / 2 + 1;
  4103e2:	f104 0c01 	add.w	ip, r4, #1
  4103e6:	e7ad      	b.n	410344 <draw_shadow+0x90>
        *d8 = *s8;
  4103e8:	f811 0b01 	ldrb.w	r0, [r1], #1
  4103ec:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  4103f0:	3b01      	subs	r3, #1
    while(len) {
  4103f2:	2b00      	cmp	r3, #0
  4103f4:	d1f8      	bne.n	4103e8 <draw_shadow+0x134>
    bg_coords.x1 += 1;
  4103f6:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
  4103fa:	3201      	adds	r2, #1
  4103fc:	b296      	uxth	r6, r2
  4103fe:	f8ad 6078 	strh.w	r6, [sp, #120]	; 0x78
    bg_coords.y1 += 1;
  410402:	f8bd 007a 	ldrh.w	r0, [sp, #122]	; 0x7a
  410406:	3001      	adds	r0, #1
  410408:	b280      	uxth	r0, r0
  41040a:	f8ad 007a 	strh.w	r0, [sp, #122]	; 0x7a
    bg_coords.x2 -= 1;
  41040e:	f8bd 207c 	ldrh.w	r2, [sp, #124]	; 0x7c
  410412:	3a01      	subs	r2, #1
  410414:	b292      	uxth	r2, r2
  410416:	f8ad 207c 	strh.w	r2, [sp, #124]	; 0x7c
    bg_coords.y2 -= 1;
  41041a:	f8bd 307e 	ldrh.w	r3, [sp, #126]	; 0x7e
  41041e:	3b01      	subs	r3, #1
  410420:	b29b      	uxth	r3, r3
  410422:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
    int32_t r_bg = dsc->radius;
  410426:	f9b5 1000 	ldrsh.w	r1, [r5]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41042a:	1b92      	subs	r2, r2, r6
  41042c:	b292      	uxth	r2, r2
  41042e:	3201      	adds	r2, #1
  410430:	b212      	sxth	r2, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410432:	1a1e      	subs	r6, r3, r0
  410434:	b2b6      	uxth	r6, r6
  410436:	3601      	adds	r6, #1
  410438:	b236      	sxth	r6, r6
    int32_t short_side = LV_MATH_MIN(lv_area_get_width(&bg_coords), lv_area_get_height(&bg_coords));
  41043a:	42b2      	cmp	r2, r6
  41043c:	da00      	bge.n	410440 <draw_shadow+0x18c>
  41043e:	4616      	mov	r6, r2
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
  410440:	1076      	asrs	r6, r6, #1
  410442:	42b1      	cmp	r1, r6
  410444:	dc00      	bgt.n	410448 <draw_shadow+0x194>
    int32_t r_bg = dsc->radius;
  410446:	460e      	mov	r6, r1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410448:	f8bd 2094 	ldrh.w	r2, [sp, #148]	; 0x94
  41044c:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
  410450:	1ad2      	subs	r2, r2, r3
  410452:	b292      	uxth	r2, r2
  410454:	3201      	adds	r2, #1
  410456:	b212      	sxth	r2, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410458:	f8bd 3096 	ldrh.w	r3, [sp, #150]	; 0x96
  41045c:	f8bd 0092 	ldrh.w	r0, [sp, #146]	; 0x92
  410460:	1a1b      	subs	r3, r3, r0
  410462:	b29b      	uxth	r3, r3
  410464:	3301      	adds	r3, #1
  410466:	fa0f f883 	sxth.w	r8, r3
    short_side = LV_MATH_MIN(lv_area_get_width(&sh_rect_area), lv_area_get_height(&sh_rect_area));
  41046a:	4590      	cmp	r8, r2
  41046c:	dd00      	ble.n	410470 <draw_shadow+0x1bc>
  41046e:	4690      	mov	r8, r2
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
  410470:	ea4f 0868 	mov.w	r8, r8, asr #1
  410474:	4541      	cmp	r1, r8
  410476:	dc00      	bgt.n	41047a <draw_shadow+0x1c6>
    int32_t r_sh = dsc->radius;
  410478:	4688      	mov	r8, r1
    int32_t corner_size = sw  + r_sh;
  41047a:	4444      	add	r4, r8
    sh_buf = _lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
  41047c:	fb04 f004 	mul.w	r0, r4, r4
  410480:	0040      	lsls	r0, r0, #1
  410482:	4b5b      	ldr	r3, [pc, #364]	; (4105f0 <draw_shadow+0x33c>)
  410484:	4798      	blx	r3
  410486:	4601      	mov	r1, r0
  410488:	9007      	str	r0, [sp, #28]
    shadow_draw_corner_buf(&sh_rect_area, (uint16_t *)sh_buf, dsc->shadow_width, r_sh);
  41048a:	fa0f f388 	sxth.w	r3, r8
  41048e:	f9b5 2022 	ldrsh.w	r2, [r5, #34]	; 0x22
  410492:	a824      	add	r0, sp, #144	; 0x90
  410494:	f8df 8168 	ldr.w	r8, [pc, #360]	; 410600 <draw_shadow+0x34c>
  410498:	47c0      	blx	r8
    lv_coord_t h_half = sh_area.y1 + lv_area_get_height(&sh_area) / 2;
  41049a:	f8bd 208a 	ldrh.w	r2, [sp, #138]	; 0x8a
  41049e:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
  4104a2:	1a9b      	subs	r3, r3, r2
  4104a4:	b29b      	uxth	r3, r3
  4104a6:	3301      	adds	r3, #1
  4104a8:	b21b      	sxth	r3, r3
  4104aa:	2b00      	cmp	r3, #0
  4104ac:	db21      	blt.n	4104f2 <draw_shadow+0x23e>
  4104ae:	eb02 0363 	add.w	r3, r2, r3, asr #1
  4104b2:	b29b      	uxth	r3, r3
  4104b4:	930d      	str	r3, [sp, #52]	; 0x34
  4104b6:	fa0f fb83 	sxth.w	fp, r3
    lv_coord_t w_half = sh_area.x1 + lv_area_get_width(&sh_area) / 2;
  4104ba:	f8bd 2088 	ldrh.w	r2, [sp, #136]	; 0x88
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4104be:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  4104c2:	1a9b      	subs	r3, r3, r2
  4104c4:	b29b      	uxth	r3, r3
  4104c6:	3301      	adds	r3, #1
  4104c8:	b21b      	sxth	r3, r3
  4104ca:	2b00      	cmp	r3, #0
  4104cc:	db13      	blt.n	4104f6 <draw_shadow+0x242>
  4104ce:	eb02 0363 	add.w	r3, r2, r3, asr #1
  4104d2:	b29b      	uxth	r3, r3
  4104d4:	930e      	str	r3, [sp, #56]	; 0x38
  4104d6:	b21b      	sxth	r3, r3
  4104d8:	930c      	str	r3, [sp, #48]	; 0x30
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
  4104da:	4b46      	ldr	r3, [pc, #280]	; (4105f4 <draw_shadow+0x340>)
  4104dc:	4798      	blx	r3
  4104de:	b960      	cbnz	r0, 4104fa <draw_shadow+0x246>
    else if(dsc->shadow_ofs_x != 0 || dsc->shadow_ofs_y != 0) simple_mode = false;
  4104e0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  4104e2:	2b00      	cmp	r3, #0
  4104e4:	d17a      	bne.n	4105dc <draw_shadow+0x328>
    else if(dsc->shadow_spread != 0) simple_mode = false;
  4104e6:	f9b5 3028 	ldrsh.w	r3, [r5, #40]	; 0x28
  4104ea:	b143      	cbz	r3, 4104fe <draw_shadow+0x24a>
  4104ec:	2300      	movs	r3, #0
  4104ee:	9306      	str	r3, [sp, #24]
  4104f0:	e005      	b.n	4104fe <draw_shadow+0x24a>
    lv_coord_t h_half = sh_area.y1 + lv_area_get_height(&sh_area) / 2;
  4104f2:	3301      	adds	r3, #1
  4104f4:	e7db      	b.n	4104ae <draw_shadow+0x1fa>
    lv_coord_t w_half = sh_area.x1 + lv_area_get_width(&sh_area) / 2;
  4104f6:	3301      	adds	r3, #1
  4104f8:	e7e9      	b.n	4104ce <draw_shadow+0x21a>
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
  4104fa:	2300      	movs	r3, #0
  4104fc:	9306      	str	r3, [sp, #24]
  4104fe:	f8bd 008c 	ldrh.w	r0, [sp, #140]	; 0x8c
  410502:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  410506:	1ac0      	subs	r0, r0, r3
  410508:	b280      	uxth	r0, r0
  41050a:	3001      	adds	r0, #1
    lv_opa_t * mask_buf = _lv_mem_buf_get(lv_area_get_width(&sh_area));
  41050c:	b200      	sxth	r0, r0
  41050e:	4b38      	ldr	r3, [pc, #224]	; (4105f0 <draw_shadow+0x33c>)
  410510:	4798      	blx	r3
  410512:	9005      	str	r0, [sp, #20]
    lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, r_bg, true);
  410514:	b233      	sxth	r3, r6
  410516:	461a      	mov	r2, r3
  410518:	9308      	str	r3, [sp, #32]
  41051a:	2301      	movs	r3, #1
  41051c:	a91e      	add	r1, sp, #120	; 0x78
  41051e:	a817      	add	r0, sp, #92	; 0x5c
  410520:	4e35      	ldr	r6, [pc, #212]	; (4105f8 <draw_shadow+0x344>)
  410522:	47b0      	blx	r6
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
  410524:	2100      	movs	r1, #0
  410526:	a817      	add	r0, sp, #92	; 0x5c
  410528:	4b34      	ldr	r3, [pc, #208]	; (4105fc <draw_shadow+0x348>)
  41052a:	4798      	blx	r3
  41052c:	900b      	str	r0, [sp, #44]	; 0x2c
    a.x2 = sh_area.x2;
  41052e:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
  410532:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.x1 = a.x2 - corner_size + 1;
  410536:	b29b      	uxth	r3, r3
  410538:	b2a6      	uxth	r6, r4
  41053a:	1b9b      	subs	r3, r3, r6
  41053c:	b29b      	uxth	r3, r3
  41053e:	3301      	adds	r3, #1
  410540:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.y1 = sh_area.y1;
  410544:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
  410548:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = a.y1 + corner_size - 1;
  41054c:	fa16 f383 	uxtah	r3, r6, r3
  410550:	b29b      	uxth	r3, r3
  410552:	3b01      	subs	r3, #1
  410554:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    bool has_com = _lv_area_intersect(&ca, &a, clip);
  410558:	9a04      	ldr	r2, [sp, #16]
  41055a:	a915      	add	r1, sp, #84	; 0x54
  41055c:	a813      	add	r0, sp, #76	; 0x4c
  41055e:	4b23      	ldr	r3, [pc, #140]	; (4105ec <draw_shadow+0x338>)
  410560:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410562:	2800      	cmp	r0, #0
  410564:	d14e      	bne.n	410604 <draw_shadow+0x350>
    a.x2 = sh_area.x2;
  410566:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
  41056a:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.x1 = a.x2 - corner_size + 1;
  41056e:	b29b      	uxth	r3, r3
  410570:	1b9b      	subs	r3, r3, r6
  410572:	b29b      	uxth	r3, r3
  410574:	3301      	adds	r3, #1
  410576:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.y1 = sh_area.y2 - corner_size + 1;
  41057a:	f9bd 208e 	ldrsh.w	r2, [sp, #142]	; 0x8e
  41057e:	b293      	uxth	r3, r2
  410580:	1b9b      	subs	r3, r3, r6
  410582:	b29b      	uxth	r3, r3
  410584:	3301      	adds	r3, #1
  410586:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y2;
  41058a:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  41058e:	9a04      	ldr	r2, [sp, #16]
  410590:	a915      	add	r1, sp, #84	; 0x54
  410592:	a813      	add	r0, sp, #76	; 0x4c
  410594:	4b15      	ldr	r3, [pc, #84]	; (4105ec <draw_shadow+0x338>)
  410596:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410598:	2800      	cmp	r0, #0
  41059a:	f040 80b0 	bne.w	4106fe <draw_shadow+0x44a>
    a.x2 = sh_area.x2;
  41059e:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
  4105a2:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.x1 = a.x2 - corner_size + 1;
  4105a6:	b29b      	uxth	r3, r3
  4105a8:	1b9b      	subs	r3, r3, r6
  4105aa:	b29b      	uxth	r3, r3
  4105ac:	3301      	adds	r3, #1
  4105ae:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.y1 = sh_area.y1 + corner_size;
  4105b2:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
  4105b6:	4433      	add	r3, r6
  4105b8:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y2 - corner_size;
  4105bc:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
  4105c0:	1b9b      	subs	r3, r3, r6
  4105c2:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  4105c6:	9a04      	ldr	r2, [sp, #16]
  4105c8:	a915      	add	r1, sp, #84	; 0x54
  4105ca:	a813      	add	r0, sp, #76	; 0x4c
  4105cc:	4b07      	ldr	r3, [pc, #28]	; (4105ec <draw_shadow+0x338>)
  4105ce:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  4105d0:	2800      	cmp	r0, #0
  4105d2:	f040 8115 	bne.w	410800 <draw_shadow+0x54c>
  4105d6:	9907      	ldr	r1, [sp, #28]
  4105d8:	2000      	movs	r0, #0
  4105da:	e1ab      	b.n	410934 <draw_shadow+0x680>
    else if(dsc->shadow_ofs_x != 0 || dsc->shadow_ofs_y != 0) simple_mode = false;
  4105dc:	2300      	movs	r3, #0
  4105de:	9306      	str	r3, [sp, #24]
  4105e0:	e78d      	b.n	4104fe <draw_shadow+0x24a>
  4105e2:	bf00      	nop
  4105e4:	00409851 	.word	0x00409851
  4105e8:	00414ea5 	.word	0x00414ea5
  4105ec:	00415663 	.word	0x00415663
  4105f0:	00416a81 	.word	0x00416a81
  4105f4:	0040fd5d 	.word	0x0040fd5d
  4105f8:	0040fedd 	.word	0x0040fedd
  4105fc:	0040fc61 	.word	0x0040fc61
  410600:	004100e9 	.word	0x004100e9
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410604:	9a08      	ldr	r2, [sp, #32]
  410606:	a91e      	add	r1, sp, #120	; 0x78
  410608:	a815      	add	r0, sp, #84	; 0x54
  41060a:	4ba2      	ldr	r3, [pc, #648]	; (410894 <draw_shadow+0x5e0>)
  41060c:	4798      	blx	r3
  41060e:	2800      	cmp	r0, #0
  410610:	d1a9      	bne.n	410566 <draw_shadow+0x2b2>
        if(ca.y2 > h_half) ca.y2 = h_half;
  410612:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
  410616:	459b      	cmp	fp, r3
  410618:	da01      	bge.n	41061e <draw_shadow+0x36a>
  41061a:	f8ad b052 	strh.w	fp, [sp, #82]	; 0x52
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
  41061e:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
  410622:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  410624:	429a      	cmp	r2, r3
  410626:	db03      	blt.n	410630 <draw_shadow+0x37c>
  410628:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  41062a:	3301      	adds	r3, #1
  41062c:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410630:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
  410634:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
  410638:	b291      	uxth	r1, r2
  41063a:	1a5b      	subs	r3, r3, r1
  41063c:	b29b      	uxth	r3, r3
  41063e:	3301      	adds	r3, #1
  410640:	b21b      	sxth	r3, r3
  410642:	469e      	mov	lr, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410644:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  410648:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
  41064c:	b288      	uxth	r0, r1
  41064e:	1a1b      	subs	r3, r3, r0
  410650:	b29b      	uxth	r3, r3
  410652:	3301      	adds	r3, #1
  410654:	b21b      	sxth	r3, r3
  410656:	930a      	str	r3, [sp, #40]	; 0x28
        if(w > 0) {
  410658:	2b00      	cmp	r3, #0
  41065a:	dd84      	ble.n	410566 <draw_shadow+0x2b2>
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
  41065c:	f9bd 8054 	ldrsh.w	r8, [sp, #84]	; 0x54
  410660:	eba1 0108 	sub.w	r1, r1, r8
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
  410664:	f9bd 8056 	ldrsh.w	r8, [sp, #86]	; 0x56
  410668:	eba2 0808 	sub.w	r8, r2, r8
  41066c:	fb08 1804 	mla	r8, r8, r4, r1
  410670:	9b07      	ldr	r3, [sp, #28]
  410672:	4498      	add	r8, r3
    const uint8_t * s8 = (const uint8_t *)src;
  410674:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  410676:	aa11      	add	r2, sp, #68	; 0x44
  410678:	2308      	movs	r3, #8
    while(len) {
  41067a:	b12b      	cbz	r3, 410688 <draw_shadow+0x3d4>
        *d8 = *s8;
  41067c:	f811 0b01 	ldrb.w	r0, [r1], #1
  410680:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  410684:	3b01      	subs	r3, #1
  410686:	e7f8      	b.n	41067a <draw_shadow+0x3c6>
            fa.y2 = fa.y1;
  410688:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  41068c:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            for(y = 0; y < h; y++) {
  410690:	f04f 0900 	mov.w	r9, #0
  410694:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  410698:	46a3      	mov	fp, r4
  41069a:	46f2      	mov	sl, lr
  41069c:	e017      	b.n	4106ce <draw_shadow+0x41a>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  41069e:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  4106a2:	9302      	str	r3, [sp, #8]
  4106a4:	9701      	str	r7, [sp, #4]
  4106a6:	9000      	str	r0, [sp, #0]
  4106a8:	9b05      	ldr	r3, [sp, #20]
  4106aa:	8c2a      	ldrh	r2, [r5, #32]
  4106ac:	a911      	add	r1, sp, #68	; 0x44
  4106ae:	9804      	ldr	r0, [sp, #16]
  4106b0:	4c79      	ldr	r4, [pc, #484]	; (410898 <draw_shadow+0x5e4>)
  4106b2:	47a0      	blx	r4
                fa.y1++;
  4106b4:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  4106b8:	3301      	adds	r3, #1
  4106ba:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                fa.y2++;
  4106be:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  4106c2:	3301      	adds	r3, #1
  4106c4:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
                sh_buf_tmp += corner_size;
  4106c8:	44d8      	add	r8, fp
            for(y = 0; y < h; y++) {
  4106ca:	f109 0901 	add.w	r9, r9, #1
  4106ce:	45d1      	cmp	r9, sl
  4106d0:	da11      	bge.n	4106f6 <draw_shadow+0x442>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  4106d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4106d4:	4641      	mov	r1, r8
  4106d6:	9c05      	ldr	r4, [sp, #20]
  4106d8:	4620      	mov	r0, r4
  4106da:	4b70      	ldr	r3, [pc, #448]	; (41089c <draw_shadow+0x5e8>)
  4106dc:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  4106de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4106e0:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  4106e4:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  4106e8:	4620      	mov	r0, r4
  4106ea:	4c6d      	ldr	r4, [pc, #436]	; (4108a0 <draw_shadow+0x5ec>)
  4106ec:	47a0      	blx	r4
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  4106ee:	2801      	cmp	r0, #1
  4106f0:	d1d5      	bne.n	41069e <draw_shadow+0x3ea>
  4106f2:	2002      	movs	r0, #2
  4106f4:	e7d3      	b.n	41069e <draw_shadow+0x3ea>
  4106f6:	465c      	mov	r4, fp
  4106f8:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
  4106fc:	e733      	b.n	410566 <draw_shadow+0x2b2>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  4106fe:	9a08      	ldr	r2, [sp, #32]
  410700:	a91e      	add	r1, sp, #120	; 0x78
  410702:	a815      	add	r0, sp, #84	; 0x54
  410704:	4b63      	ldr	r3, [pc, #396]	; (410894 <draw_shadow+0x5e0>)
  410706:	4798      	blx	r3
  410708:	2800      	cmp	r0, #0
  41070a:	f47f af48 	bne.w	41059e <draw_shadow+0x2ea>
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
  41070e:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  410712:	459b      	cmp	fp, r3
  410714:	db03      	blt.n	41071e <draw_shadow+0x46a>
  410716:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  410718:	3301      	adds	r3, #1
  41071a:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
  41071e:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
  410722:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  410724:	429a      	cmp	r2, r3
  410726:	db03      	blt.n	410730 <draw_shadow+0x47c>
  410728:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  41072a:	3301      	adds	r3, #1
  41072c:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410730:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
  410734:	b293      	uxth	r3, r2
  410736:	f8bd 104e 	ldrh.w	r1, [sp, #78]	; 0x4e
  41073a:	1a5b      	subs	r3, r3, r1
  41073c:	b29b      	uxth	r3, r3
  41073e:	3301      	adds	r3, #1
  410740:	b21b      	sxth	r3, r3
  410742:	469e      	mov	lr, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410744:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  410748:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
  41074c:	b288      	uxth	r0, r1
  41074e:	1a1b      	subs	r3, r3, r0
  410750:	b29b      	uxth	r3, r3
  410752:	3301      	adds	r3, #1
  410754:	b21b      	sxth	r3, r3
  410756:	930a      	str	r3, [sp, #40]	; 0x28
        if(w > 0) {
  410758:	2b00      	cmp	r3, #0
  41075a:	f77f af20 	ble.w	41059e <draw_shadow+0x2ea>
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
  41075e:	f9bd 8054 	ldrsh.w	r8, [sp, #84]	; 0x54
  410762:	eba1 0108 	sub.w	r1, r1, r8
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
  410766:	f9bd 805a 	ldrsh.w	r8, [sp, #90]	; 0x5a
  41076a:	eba8 0802 	sub.w	r8, r8, r2
  41076e:	fb08 1804 	mla	r8, r8, r4, r1
  410772:	9b07      	ldr	r3, [sp, #28]
  410774:	4498      	add	r8, r3
    const uint8_t * s8 = (const uint8_t *)src;
  410776:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  410778:	aa11      	add	r2, sp, #68	; 0x44
  41077a:	2308      	movs	r3, #8
    while(len) {
  41077c:	b12b      	cbz	r3, 41078a <draw_shadow+0x4d6>
        *d8 = *s8;
  41077e:	f811 0b01 	ldrb.w	r0, [r1], #1
  410782:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  410786:	3b01      	subs	r3, #1
  410788:	e7f8      	b.n	41077c <draw_shadow+0x4c8>
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
  41078a:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  41078e:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            for(y = 0; y < h; y++) {
  410792:	f04f 0900 	mov.w	r9, #0
  410796:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
  41079a:	46a3      	mov	fp, r4
  41079c:	46f2      	mov	sl, lr
  41079e:	e017      	b.n	4107d0 <draw_shadow+0x51c>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  4107a0:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  4107a4:	9302      	str	r3, [sp, #8]
  4107a6:	9701      	str	r7, [sp, #4]
  4107a8:	9000      	str	r0, [sp, #0]
  4107aa:	9b05      	ldr	r3, [sp, #20]
  4107ac:	8c2a      	ldrh	r2, [r5, #32]
  4107ae:	a911      	add	r1, sp, #68	; 0x44
  4107b0:	9804      	ldr	r0, [sp, #16]
  4107b2:	4c39      	ldr	r4, [pc, #228]	; (410898 <draw_shadow+0x5e4>)
  4107b4:	47a0      	blx	r4
                fa.y1--;
  4107b6:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  4107ba:	3b01      	subs	r3, #1
  4107bc:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                fa.y2--;
  4107c0:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  4107c4:	3b01      	subs	r3, #1
  4107c6:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
                sh_buf_tmp += corner_size;
  4107ca:	44d8      	add	r8, fp
            for(y = 0; y < h; y++) {
  4107cc:	f109 0901 	add.w	r9, r9, #1
  4107d0:	45d1      	cmp	r9, sl
  4107d2:	da11      	bge.n	4107f8 <draw_shadow+0x544>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  4107d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4107d6:	4641      	mov	r1, r8
  4107d8:	9c05      	ldr	r4, [sp, #20]
  4107da:	4620      	mov	r0, r4
  4107dc:	4b2f      	ldr	r3, [pc, #188]	; (41089c <draw_shadow+0x5e8>)
  4107de:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  4107e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4107e2:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  4107e6:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  4107ea:	4620      	mov	r0, r4
  4107ec:	4c2c      	ldr	r4, [pc, #176]	; (4108a0 <draw_shadow+0x5ec>)
  4107ee:	47a0      	blx	r4
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  4107f0:	2801      	cmp	r0, #1
  4107f2:	d1d5      	bne.n	4107a0 <draw_shadow+0x4ec>
  4107f4:	2002      	movs	r0, #2
  4107f6:	e7d3      	b.n	4107a0 <draw_shadow+0x4ec>
  4107f8:	465c      	mov	r4, fp
  4107fa:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
  4107fe:	e6ce      	b.n	41059e <draw_shadow+0x2ea>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410800:	9a08      	ldr	r2, [sp, #32]
  410802:	a91e      	add	r1, sp, #120	; 0x78
  410804:	a815      	add	r0, sp, #84	; 0x54
  410806:	4b23      	ldr	r3, [pc, #140]	; (410894 <draw_shadow+0x5e0>)
  410808:	4798      	blx	r3
  41080a:	2800      	cmp	r0, #0
  41080c:	f47f aee3 	bne.w	4105d6 <draw_shadow+0x322>
        if(simple_mode) ca.x1 = LV_MATH_MAX(ca.x1, coords->x2);
  410810:	9b06      	ldr	r3, [sp, #24]
  410812:	b14b      	cbz	r3, 410828 <draw_shadow+0x574>
  410814:	9b09      	ldr	r3, [sp, #36]	; 0x24
  410816:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
  41081a:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
  41081e:	4293      	cmp	r3, r2
  410820:	bfb8      	it	lt
  410822:	4613      	movlt	r3, r2
  410824:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
  410828:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  41082c:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
  410830:	b291      	uxth	r1, r2
  410832:	1a5b      	subs	r3, r3, r1
  410834:	b29b      	uxth	r3, r3
  410836:	3301      	adds	r3, #1
  410838:	b21b      	sxth	r3, r3
  41083a:	930a      	str	r3, [sp, #40]	; 0x28
        if(w > 0) {
  41083c:	2b00      	cmp	r3, #0
  41083e:	f77f aeca 	ble.w	4105d6 <draw_shadow+0x322>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410842:	f8bd a052 	ldrh.w	sl, [sp, #82]	; 0x52
  410846:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
  41084a:	ebaa 0a03 	sub.w	sl, sl, r3
  41084e:	fa1f fa8a 	uxth.w	sl, sl
  410852:	f10a 0a01 	add.w	sl, sl, #1
  410856:	fa0f fa8a 	sxth.w	sl, sl
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
  41085a:	1e63      	subs	r3, r4, #1
            sh_buf_tmp += ca.x1 - a.x1;
  41085c:	f9bd 1054 	ldrsh.w	r1, [sp, #84]	; 0x54
  410860:	1a52      	subs	r2, r2, r1
  410862:	fb03 2304 	mla	r3, r3, r4, r2
  410866:	9a07      	ldr	r2, [sp, #28]
  410868:	18d3      	adds	r3, r2, r3
  41086a:	930e      	str	r3, [sp, #56]	; 0x38
    const uint8_t * s8 = (const uint8_t *)src;
  41086c:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  41086e:	aa11      	add	r2, sp, #68	; 0x44
  410870:	2308      	movs	r3, #8
    while(len) {
  410872:	b12b      	cbz	r3, 410880 <draw_shadow+0x5cc>
        *d8 = *s8;
  410874:	f811 0b01 	ldrb.w	r0, [r1], #1
  410878:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  41087c:	3b01      	subs	r3, #1
  41087e:	e7f8      	b.n	410872 <draw_shadow+0x5be>
            fa.y2 = fa.y1;
  410880:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  410884:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            for(y = 0; y < h; y++) {
  410888:	f04f 0800 	mov.w	r8, #0
  41088c:	970f      	str	r7, [sp, #60]	; 0x3c
  41088e:	46a1      	mov	r9, r4
  410890:	9c06      	ldr	r4, [sp, #24]
  410892:	e02a      	b.n	4108ea <draw_shadow+0x636>
  410894:	004158d9 	.word	0x004158d9
  410898:	0040c921 	.word	0x0040c921
  41089c:	004168e9 	.word	0x004168e9
  4108a0:	0040fc95 	.word	0x0040fc95
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  4108a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4108a6:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  4108aa:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  4108ae:	9805      	ldr	r0, [sp, #20]
  4108b0:	4fbc      	ldr	r7, [pc, #752]	; (410ba4 <draw_shadow+0x8f0>)
  4108b2:	47b8      	blx	r7
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  4108b4:	2801      	cmp	r0, #1
  4108b6:	d023      	beq.n	410900 <draw_shadow+0x64c>
                _lv_blend_fill(clip, &fa,
  4108b8:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  4108bc:	9302      	str	r3, [sp, #8]
  4108be:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
  4108c2:	9301      	str	r3, [sp, #4]
  4108c4:	9000      	str	r0, [sp, #0]
  4108c6:	9b05      	ldr	r3, [sp, #20]
  4108c8:	8c2a      	ldrh	r2, [r5, #32]
  4108ca:	a911      	add	r1, sp, #68	; 0x44
  4108cc:	9804      	ldr	r0, [sp, #16]
  4108ce:	4fb6      	ldr	r7, [pc, #728]	; (410ba8 <draw_shadow+0x8f4>)
  4108d0:	47b8      	blx	r7
                fa.y1++;
  4108d2:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  4108d6:	3301      	adds	r3, #1
  4108d8:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                fa.y2++;
  4108dc:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  4108e0:	3301      	adds	r3, #1
  4108e2:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            for(y = 0; y < h; y++) {
  4108e6:	f108 0801 	add.w	r8, r8, #1
  4108ea:	45d0      	cmp	r8, sl
  4108ec:	da0a      	bge.n	410904 <draw_shadow+0x650>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  4108ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4108f0:	990e      	ldr	r1, [sp, #56]	; 0x38
  4108f2:	9805      	ldr	r0, [sp, #20]
  4108f4:	4bad      	ldr	r3, [pc, #692]	; (410bac <draw_shadow+0x8f8>)
  4108f6:	4798      	blx	r3
                if(simple_mode) {
  4108f8:	2c00      	cmp	r4, #0
  4108fa:	d0d3      	beq.n	4108a4 <draw_shadow+0x5f0>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
  4108fc:	2002      	movs	r0, #2
  4108fe:	e7db      	b.n	4108b8 <draw_shadow+0x604>
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  410900:	2002      	movs	r0, #2
  410902:	e7d9      	b.n	4108b8 <draw_shadow+0x604>
  410904:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  410906:	464c      	mov	r4, r9
  410908:	e665      	b.n	4105d6 <draw_shadow+0x322>
        for(x = 0; x < corner_size / 2; x++) {
  41090a:	ebb3 0f62 	cmp.w	r3, r2, asr #1
  41090e:	da0f      	bge.n	410930 <draw_shadow+0x67c>
            lv_opa_t tmp = sh_buf_tmp[x];
  410910:	f811 e003 	ldrb.w	lr, [r1, r3]
            sh_buf_tmp[x] = sh_buf_tmp[corner_size - x - 1];
  410914:	1ae2      	subs	r2, r4, r3
  410916:	3a01      	subs	r2, #1
  410918:	f811 c002 	ldrb.w	ip, [r1, r2]
  41091c:	f801 c003 	strb.w	ip, [r1, r3]
            sh_buf_tmp[corner_size - x - 1] = tmp;
  410920:	f801 e002 	strb.w	lr, [r1, r2]
        for(x = 0; x < corner_size / 2; x++) {
  410924:	3301      	adds	r3, #1
  410926:	4622      	mov	r2, r4
  410928:	2c00      	cmp	r4, #0
  41092a:	daee      	bge.n	41090a <draw_shadow+0x656>
  41092c:	1c62      	adds	r2, r4, #1
  41092e:	e7ec      	b.n	41090a <draw_shadow+0x656>
        sh_buf_tmp += corner_size;
  410930:	4421      	add	r1, r4
    for(y = 0; y < corner_size; y++) {
  410932:	3001      	adds	r0, #1
  410934:	42a0      	cmp	r0, r4
  410936:	da01      	bge.n	41093c <draw_shadow+0x688>
  410938:	2300      	movs	r3, #0
  41093a:	e7f4      	b.n	410926 <draw_shadow+0x672>
    a.x1 = sh_area.x1;
  41093c:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
  410940:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.x2 = a.x1 + corner_size - 1;
  410944:	fa16 f383 	uxtah	r3, r6, r3
  410948:	b29b      	uxth	r3, r3
  41094a:	3b01      	subs	r3, #1
  41094c:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.y1 = sh_area.y1;
  410950:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
  410954:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = a.y1 + corner_size - 1;
  410958:	fa16 f383 	uxtah	r3, r6, r3
  41095c:	b29b      	uxth	r3, r3
  41095e:	3b01      	subs	r3, #1
  410960:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  410964:	9a04      	ldr	r2, [sp, #16]
  410966:	a915      	add	r1, sp, #84	; 0x54
  410968:	a813      	add	r0, sp, #76	; 0x4c
  41096a:	4b91      	ldr	r3, [pc, #580]	; (410bb0 <draw_shadow+0x8fc>)
  41096c:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  41096e:	2800      	cmp	r0, #0
  410970:	f040 809b 	bne.w	410aaa <draw_shadow+0x7f6>
    a.x1 = sh_area.x1;
  410974:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
  410978:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.x2 = a.x1 + corner_size - 1;
  41097c:	fa16 f383 	uxtah	r3, r6, r3
  410980:	b29b      	uxth	r3, r3
  410982:	3b01      	subs	r3, #1
  410984:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.y1 = sh_area.y2 - corner_size + 1;
  410988:	f9bd 208e 	ldrsh.w	r2, [sp, #142]	; 0x8e
  41098c:	b293      	uxth	r3, r2
  41098e:	1b9b      	subs	r3, r3, r6
  410990:	b29b      	uxth	r3, r3
  410992:	3301      	adds	r3, #1
  410994:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y2;
  410998:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  41099c:	9a04      	ldr	r2, [sp, #16]
  41099e:	a915      	add	r1, sp, #84	; 0x54
  4109a0:	a813      	add	r0, sp, #76	; 0x4c
  4109a2:	4b83      	ldr	r3, [pc, #524]	; (410bb0 <draw_shadow+0x8fc>)
  4109a4:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  4109a6:	2800      	cmp	r0, #0
  4109a8:	f040 810a 	bne.w	410bc0 <draw_shadow+0x90c>
    a.x1 = sh_area.x1;
  4109ac:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
  4109b0:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.x2 = a.x1 + corner_size - 1;
  4109b4:	fa16 f383 	uxtah	r3, r6, r3
  4109b8:	b29b      	uxth	r3, r3
  4109ba:	3b01      	subs	r3, #1
  4109bc:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.y1 = sh_area.y1 + corner_size;
  4109c0:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
  4109c4:	4433      	add	r3, r6
  4109c6:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y2 - corner_size;
  4109ca:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
  4109ce:	1b9b      	subs	r3, r3, r6
  4109d0:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  4109d4:	9a04      	ldr	r2, [sp, #16]
  4109d6:	a915      	add	r1, sp, #84	; 0x54
  4109d8:	a813      	add	r0, sp, #76	; 0x4c
  4109da:	4b75      	ldr	r3, [pc, #468]	; (410bb0 <draw_shadow+0x8fc>)
  4109dc:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  4109de:	2800      	cmp	r0, #0
  4109e0:	f040 816c 	bne.w	410cbc <draw_shadow+0xa08>
    a.x1 = sh_area.x1 + corner_size;
  4109e4:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  4109e8:	4433      	add	r3, r6
  4109ea:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.x2 = sh_area.x2 - corner_size;
  4109ee:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  4109f2:	1b9b      	subs	r3, r3, r6
  4109f4:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.y1 = sh_area.y1;
  4109f8:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
  4109fc:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y1 + corner_size - 1;
  410a00:	fa16 f383 	uxtah	r3, r6, r3
  410a04:	b29b      	uxth	r3, r3
  410a06:	3b01      	subs	r3, #1
  410a08:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  410a0c:	9a04      	ldr	r2, [sp, #16]
  410a0e:	a915      	add	r1, sp, #84	; 0x54
  410a10:	a813      	add	r0, sp, #76	; 0x4c
  410a12:	4b67      	ldr	r3, [pc, #412]	; (410bb0 <draw_shadow+0x8fc>)
  410a14:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410a16:	2800      	cmp	r0, #0
  410a18:	f040 81d1 	bne.w	410dbe <draw_shadow+0xb0a>
    a.x1 = sh_area.x1 + corner_size;
  410a1c:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  410a20:	4433      	add	r3, r6
  410a22:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.x2 = sh_area.x2 - corner_size;
  410a26:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  410a2a:	1b9b      	subs	r3, r3, r6
  410a2c:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.y1 = sh_area.y2 - corner_size + 1;
  410a30:	f9bd 208e 	ldrsh.w	r2, [sp, #142]	; 0x8e
  410a34:	b293      	uxth	r3, r2
  410a36:	1b9b      	subs	r3, r3, r6
  410a38:	b29b      	uxth	r3, r3
  410a3a:	3301      	adds	r3, #1
  410a3c:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y2;
  410a40:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  410a44:	9a04      	ldr	r2, [sp, #16]
  410a46:	a915      	add	r1, sp, #84	; 0x54
  410a48:	a813      	add	r0, sp, #76	; 0x4c
  410a4a:	4b59      	ldr	r3, [pc, #356]	; (410bb0 <draw_shadow+0x8fc>)
  410a4c:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410a4e:	2800      	cmp	r0, #0
  410a50:	f040 8245 	bne.w	410ede <draw_shadow+0xc2a>
    a.x1 = sh_area.x1 + corner_size;
  410a54:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  410a58:	4433      	add	r3, r6
  410a5a:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.x2 = sh_area.x2 - corner_size;
  410a5e:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  410a62:	1b9b      	subs	r3, r3, r6
  410a64:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.y1 = sh_area.y1 + corner_size;
  410a68:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
  410a6c:	4433      	add	r3, r6
  410a6e:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y2 - corner_size;
  410a72:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
  410a76:	1b9e      	subs	r6, r3, r6
  410a78:	f8ad 605a 	strh.w	r6, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  410a7c:	9a04      	ldr	r2, [sp, #16]
  410a7e:	a915      	add	r1, sp, #84	; 0x54
  410a80:	a813      	add	r0, sp, #76	; 0x4c
  410a82:	4b4b      	ldr	r3, [pc, #300]	; (410bb0 <draw_shadow+0x8fc>)
  410a84:	4798      	blx	r3
    if(has_com && simple_mode == false &&  _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410a86:	9b06      	ldr	r3, [sp, #24]
  410a88:	f083 0301 	eor.w	r3, r3, #1
  410a8c:	b2db      	uxtb	r3, r3
  410a8e:	4218      	tst	r0, r3
  410a90:	f040 82a9 	bne.w	410fe6 <draw_shadow+0xd32>
    lv_draw_mask_remove_id(mask_rout_id);
  410a94:	980b      	ldr	r0, [sp, #44]	; 0x2c
  410a96:	4b47      	ldr	r3, [pc, #284]	; (410bb4 <draw_shadow+0x900>)
  410a98:	4798      	blx	r3
    _lv_mem_buf_release(mask_buf);
  410a9a:	9805      	ldr	r0, [sp, #20]
  410a9c:	4c46      	ldr	r4, [pc, #280]	; (410bb8 <draw_shadow+0x904>)
  410a9e:	47a0      	blx	r4
    _lv_mem_buf_release(sh_buf);
  410aa0:	9807      	ldr	r0, [sp, #28]
  410aa2:	47a0      	blx	r4
}
  410aa4:	b027      	add	sp, #156	; 0x9c
  410aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410aaa:	9a08      	ldr	r2, [sp, #32]
  410aac:	a91e      	add	r1, sp, #120	; 0x78
  410aae:	a815      	add	r0, sp, #84	; 0x54
  410ab0:	4b42      	ldr	r3, [pc, #264]	; (410bbc <draw_shadow+0x908>)
  410ab2:	4798      	blx	r3
  410ab4:	2800      	cmp	r0, #0
  410ab6:	f47f af5d 	bne.w	410974 <draw_shadow+0x6c0>
        if(ca.y2 > h_half) ca.y2 = h_half;
  410aba:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
  410abe:	459b      	cmp	fp, r3
  410ac0:	da01      	bge.n	410ac6 <draw_shadow+0x812>
  410ac2:	f8ad b052 	strh.w	fp, [sp, #82]	; 0x52
        if(ca.x2 > w_half) ca.x2 = w_half;
  410ac6:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
  410aca:	990c      	ldr	r1, [sp, #48]	; 0x30
  410acc:	4299      	cmp	r1, r3
  410ace:	da01      	bge.n	410ad4 <draw_shadow+0x820>
  410ad0:	f8ad 1050 	strh.w	r1, [sp, #80]	; 0x50
  410ad4:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
  410ad8:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
  410adc:	b291      	uxth	r1, r2
  410ade:	1a5b      	subs	r3, r3, r1
  410ae0:	b29b      	uxth	r3, r3
  410ae2:	3301      	adds	r3, #1
  410ae4:	b21b      	sxth	r3, r3
  410ae6:	469e      	mov	lr, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410ae8:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  410aec:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
  410af0:	b288      	uxth	r0, r1
  410af2:	1a1b      	subs	r3, r3, r0
  410af4:	b29b      	uxth	r3, r3
  410af6:	3301      	adds	r3, #1
  410af8:	b21b      	sxth	r3, r3
  410afa:	930a      	str	r3, [sp, #40]	; 0x28
        if(w > 0) {
  410afc:	2b00      	cmp	r3, #0
  410afe:	f77f af39 	ble.w	410974 <draw_shadow+0x6c0>
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
  410b02:	f9bd 8054 	ldrsh.w	r8, [sp, #84]	; 0x54
  410b06:	eba1 0108 	sub.w	r1, r1, r8
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
  410b0a:	f9bd 8056 	ldrsh.w	r8, [sp, #86]	; 0x56
  410b0e:	eba2 0808 	sub.w	r8, r2, r8
  410b12:	fb08 1804 	mla	r8, r8, r4, r1
  410b16:	9b07      	ldr	r3, [sp, #28]
  410b18:	4498      	add	r8, r3
    const uint8_t * s8 = (const uint8_t *)src;
  410b1a:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  410b1c:	aa11      	add	r2, sp, #68	; 0x44
  410b1e:	2308      	movs	r3, #8
    while(len) {
  410b20:	b12b      	cbz	r3, 410b2e <draw_shadow+0x87a>
        *d8 = *s8;
  410b22:	f811 0b01 	ldrb.w	r0, [r1], #1
  410b26:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  410b2a:	3b01      	subs	r3, #1
  410b2c:	e7f8      	b.n	410b20 <draw_shadow+0x86c>
            fa.y2 = fa.y1;
  410b2e:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  410b32:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            for(y = 0; y < h; y++) {
  410b36:	f04f 0900 	mov.w	r9, #0
  410b3a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
  410b3e:	46a3      	mov	fp, r4
  410b40:	46f2      	mov	sl, lr
  410b42:	e017      	b.n	410b74 <draw_shadow+0x8c0>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  410b44:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  410b48:	9302      	str	r3, [sp, #8]
  410b4a:	9701      	str	r7, [sp, #4]
  410b4c:	9000      	str	r0, [sp, #0]
  410b4e:	9b05      	ldr	r3, [sp, #20]
  410b50:	8c2a      	ldrh	r2, [r5, #32]
  410b52:	a911      	add	r1, sp, #68	; 0x44
  410b54:	9804      	ldr	r0, [sp, #16]
  410b56:	4c14      	ldr	r4, [pc, #80]	; (410ba8 <draw_shadow+0x8f4>)
  410b58:	47a0      	blx	r4
                fa.y1++;
  410b5a:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  410b5e:	3301      	adds	r3, #1
  410b60:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                fa.y2++;
  410b64:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410b68:	3301      	adds	r3, #1
  410b6a:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
                sh_buf_tmp += corner_size;
  410b6e:	44d8      	add	r8, fp
            for(y = 0; y < h; y++) {
  410b70:	f109 0901 	add.w	r9, r9, #1
  410b74:	45d1      	cmp	r9, sl
  410b76:	da11      	bge.n	410b9c <draw_shadow+0x8e8>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  410b78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  410b7a:	4641      	mov	r1, r8
  410b7c:	9c05      	ldr	r4, [sp, #20]
  410b7e:	4620      	mov	r0, r4
  410b80:	4b0a      	ldr	r3, [pc, #40]	; (410bac <draw_shadow+0x8f8>)
  410b82:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  410b84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  410b86:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  410b8a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  410b8e:	4620      	mov	r0, r4
  410b90:	4c04      	ldr	r4, [pc, #16]	; (410ba4 <draw_shadow+0x8f0>)
  410b92:	47a0      	blx	r4
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  410b94:	2801      	cmp	r0, #1
  410b96:	d1d5      	bne.n	410b44 <draw_shadow+0x890>
  410b98:	2002      	movs	r0, #2
  410b9a:	e7d3      	b.n	410b44 <draw_shadow+0x890>
  410b9c:	465c      	mov	r4, fp
  410b9e:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
  410ba2:	e6e7      	b.n	410974 <draw_shadow+0x6c0>
  410ba4:	0040fc95 	.word	0x0040fc95
  410ba8:	0040c921 	.word	0x0040c921
  410bac:	004168e9 	.word	0x004168e9
  410bb0:	00415663 	.word	0x00415663
  410bb4:	0040fce5 	.word	0x0040fce5
  410bb8:	00416831 	.word	0x00416831
  410bbc:	004158d9 	.word	0x004158d9
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410bc0:	9a08      	ldr	r2, [sp, #32]
  410bc2:	a91e      	add	r1, sp, #120	; 0x78
  410bc4:	a815      	add	r0, sp, #84	; 0x54
  410bc6:	4bb9      	ldr	r3, [pc, #740]	; (410eac <draw_shadow+0xbf8>)
  410bc8:	4798      	blx	r3
  410bca:	2800      	cmp	r0, #0
  410bcc:	f47f aeee 	bne.w	4109ac <draw_shadow+0x6f8>
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
  410bd0:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  410bd4:	459b      	cmp	fp, r3
  410bd6:	db03      	blt.n	410be0 <draw_shadow+0x92c>
  410bd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  410bda:	3301      	adds	r3, #1
  410bdc:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        if(ca.x2 > w_half) ca.x2 = w_half;
  410be0:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
  410be4:	990c      	ldr	r1, [sp, #48]	; 0x30
  410be6:	4299      	cmp	r1, r3
  410be8:	da01      	bge.n	410bee <draw_shadow+0x93a>
  410bea:	f8ad 1050 	strh.w	r1, [sp, #80]	; 0x50
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410bee:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
  410bf2:	fa1f fb82 	uxth.w	fp, r2
  410bf6:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
  410bfa:	ebab 0b03 	sub.w	fp, fp, r3
  410bfe:	fa1f fb8b 	uxth.w	fp, fp
  410c02:	f10b 0b01 	add.w	fp, fp, #1
  410c06:	fa0f fb8b 	sxth.w	fp, fp
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410c0a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  410c0e:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
  410c12:	b288      	uxth	r0, r1
  410c14:	1a1b      	subs	r3, r3, r0
  410c16:	b29b      	uxth	r3, r3
  410c18:	3301      	adds	r3, #1
  410c1a:	b21b      	sxth	r3, r3
  410c1c:	930a      	str	r3, [sp, #40]	; 0x28
        if(w > 0) {
  410c1e:	2b00      	cmp	r3, #0
  410c20:	f77f aec4 	ble.w	4109ac <draw_shadow+0x6f8>
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
  410c24:	f9bd 8054 	ldrsh.w	r8, [sp, #84]	; 0x54
  410c28:	eba1 0108 	sub.w	r1, r1, r8
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
  410c2c:	f9bd 805a 	ldrsh.w	r8, [sp, #90]	; 0x5a
  410c30:	eba8 0802 	sub.w	r8, r8, r2
  410c34:	fb08 1804 	mla	r8, r8, r4, r1
  410c38:	9b07      	ldr	r3, [sp, #28]
  410c3a:	4498      	add	r8, r3
    const uint8_t * s8 = (const uint8_t *)src;
  410c3c:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  410c3e:	aa11      	add	r2, sp, #68	; 0x44
  410c40:	2308      	movs	r3, #8
    while(len) {
  410c42:	b12b      	cbz	r3, 410c50 <draw_shadow+0x99c>
        *d8 = *s8;
  410c44:	f811 0b01 	ldrb.w	r0, [r1], #1
  410c48:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  410c4c:	3b01      	subs	r3, #1
  410c4e:	e7f8      	b.n	410c42 <draw_shadow+0x98e>
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
  410c50:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410c54:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            for(y = 0; y < h; y++) {
  410c58:	f04f 0900 	mov.w	r9, #0
  410c5c:	46a2      	mov	sl, r4
  410c5e:	e017      	b.n	410c90 <draw_shadow+0x9dc>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  410c60:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  410c64:	9302      	str	r3, [sp, #8]
  410c66:	9701      	str	r7, [sp, #4]
  410c68:	9000      	str	r0, [sp, #0]
  410c6a:	9b05      	ldr	r3, [sp, #20]
  410c6c:	8c2a      	ldrh	r2, [r5, #32]
  410c6e:	a911      	add	r1, sp, #68	; 0x44
  410c70:	9804      	ldr	r0, [sp, #16]
  410c72:	4c8f      	ldr	r4, [pc, #572]	; (410eb0 <draw_shadow+0xbfc>)
  410c74:	47a0      	blx	r4
                fa.y1--;
  410c76:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  410c7a:	3b01      	subs	r3, #1
  410c7c:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                fa.y2--;
  410c80:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410c84:	3b01      	subs	r3, #1
  410c86:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
                sh_buf_tmp += corner_size;
  410c8a:	44d0      	add	r8, sl
            for(y = 0; y < h; y++) {
  410c8c:	f109 0901 	add.w	r9, r9, #1
  410c90:	45d9      	cmp	r9, fp
  410c92:	da11      	bge.n	410cb8 <draw_shadow+0xa04>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  410c94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  410c96:	4641      	mov	r1, r8
  410c98:	9c05      	ldr	r4, [sp, #20]
  410c9a:	4620      	mov	r0, r4
  410c9c:	4b85      	ldr	r3, [pc, #532]	; (410eb4 <draw_shadow+0xc00>)
  410c9e:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  410ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  410ca2:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  410ca6:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  410caa:	4620      	mov	r0, r4
  410cac:	4c82      	ldr	r4, [pc, #520]	; (410eb8 <draw_shadow+0xc04>)
  410cae:	47a0      	blx	r4
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  410cb0:	2801      	cmp	r0, #1
  410cb2:	d1d5      	bne.n	410c60 <draw_shadow+0x9ac>
  410cb4:	2002      	movs	r0, #2
  410cb6:	e7d3      	b.n	410c60 <draw_shadow+0x9ac>
  410cb8:	4654      	mov	r4, sl
  410cba:	e677      	b.n	4109ac <draw_shadow+0x6f8>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410cbc:	9a08      	ldr	r2, [sp, #32]
  410cbe:	a91e      	add	r1, sp, #120	; 0x78
  410cc0:	a815      	add	r0, sp, #84	; 0x54
  410cc2:	4b7a      	ldr	r3, [pc, #488]	; (410eac <draw_shadow+0xbf8>)
  410cc4:	4798      	blx	r3
  410cc6:	2800      	cmp	r0, #0
  410cc8:	f47f ae8c 	bne.w	4109e4 <draw_shadow+0x730>
        if(simple_mode) ca.x2 = LV_MATH_MIN(coords->x1, ca.x2);
  410ccc:	9b06      	ldr	r3, [sp, #24]
  410cce:	b14b      	cbz	r3, 410ce4 <draw_shadow+0xa30>
  410cd0:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
  410cd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  410cd6:	f9b2 2000 	ldrsh.w	r2, [r2]
  410cda:	4293      	cmp	r3, r2
  410cdc:	bfa8      	it	ge
  410cde:	4613      	movge	r3, r2
  410ce0:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
  410ce4:	f8bd b050 	ldrh.w	fp, [sp, #80]	; 0x50
  410ce8:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
  410cec:	b29a      	uxth	r2, r3
  410cee:	ebab 0b02 	sub.w	fp, fp, r2
  410cf2:	fa1f fb8b 	uxth.w	fp, fp
  410cf6:	f10b 0b01 	add.w	fp, fp, #1
  410cfa:	fa0f fb8b 	sxth.w	fp, fp
        if(w > 0) {
  410cfe:	f1bb 0f00 	cmp.w	fp, #0
  410d02:	f77f ae6f 	ble.w	4109e4 <draw_shadow+0x730>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410d06:	f8bd a052 	ldrh.w	sl, [sp, #82]	; 0x52
  410d0a:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
  410d0e:	ebaa 0a02 	sub.w	sl, sl, r2
  410d12:	fa1f fa8a 	uxth.w	sl, sl
  410d16:	f10a 0a01 	add.w	sl, sl, #1
  410d1a:	fa0f fa8a 	sxth.w	sl, sl
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
  410d1e:	1e62      	subs	r2, r4, #1
            sh_buf_tmp += ca.x1 - a.x1;
  410d20:	f9bd 1054 	ldrsh.w	r1, [sp, #84]	; 0x54
  410d24:	1a59      	subs	r1, r3, r1
  410d26:	fb02 1304 	mla	r3, r2, r4, r1
  410d2a:	9a07      	ldr	r2, [sp, #28]
  410d2c:	18d3      	adds	r3, r2, r3
  410d2e:	930a      	str	r3, [sp, #40]	; 0x28
    const uint8_t * s8 = (const uint8_t *)src;
  410d30:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  410d32:	aa11      	add	r2, sp, #68	; 0x44
  410d34:	2308      	movs	r3, #8
    while(len) {
  410d36:	b12b      	cbz	r3, 410d44 <draw_shadow+0xa90>
        *d8 = *s8;
  410d38:	f811 0b01 	ldrb.w	r0, [r1], #1
  410d3c:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  410d40:	3b01      	subs	r3, #1
  410d42:	e7f8      	b.n	410d36 <draw_shadow+0xa82>
            fa.y2 = fa.y1;
  410d44:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  410d48:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            for(y = 0; y < h; y++) {
  410d4c:	f04f 0800 	mov.w	r8, #0
  410d50:	970c      	str	r7, [sp, #48]	; 0x30
  410d52:	46a1      	mov	r9, r4
  410d54:	9c06      	ldr	r4, [sp, #24]
  410d56:	e022      	b.n	410d9e <draw_shadow+0xaea>
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  410d58:	465b      	mov	r3, fp
  410d5a:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  410d5e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  410d62:	9805      	ldr	r0, [sp, #20]
  410d64:	4f54      	ldr	r7, [pc, #336]	; (410eb8 <draw_shadow+0xc04>)
  410d66:	47b8      	blx	r7
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  410d68:	2801      	cmp	r0, #1
  410d6a:	d023      	beq.n	410db4 <draw_shadow+0xb00>
                _lv_blend_fill(clip, &fa,
  410d6c:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  410d70:	9302      	str	r3, [sp, #8]
  410d72:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
  410d76:	9301      	str	r3, [sp, #4]
  410d78:	9000      	str	r0, [sp, #0]
  410d7a:	9b05      	ldr	r3, [sp, #20]
  410d7c:	8c2a      	ldrh	r2, [r5, #32]
  410d7e:	a911      	add	r1, sp, #68	; 0x44
  410d80:	9804      	ldr	r0, [sp, #16]
  410d82:	4f4b      	ldr	r7, [pc, #300]	; (410eb0 <draw_shadow+0xbfc>)
  410d84:	47b8      	blx	r7
                fa.y1++;
  410d86:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  410d8a:	3301      	adds	r3, #1
  410d8c:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                fa.y2++;
  410d90:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410d94:	3301      	adds	r3, #1
  410d96:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            for(y = 0; y < h; y++) {
  410d9a:	f108 0801 	add.w	r8, r8, #1
  410d9e:	45d0      	cmp	r8, sl
  410da0:	da0a      	bge.n	410db8 <draw_shadow+0xb04>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  410da2:	465a      	mov	r2, fp
  410da4:	990a      	ldr	r1, [sp, #40]	; 0x28
  410da6:	9805      	ldr	r0, [sp, #20]
  410da8:	4b42      	ldr	r3, [pc, #264]	; (410eb4 <draw_shadow+0xc00>)
  410daa:	4798      	blx	r3
                if(simple_mode) {
  410dac:	2c00      	cmp	r4, #0
  410dae:	d0d3      	beq.n	410d58 <draw_shadow+0xaa4>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
  410db0:	2002      	movs	r0, #2
  410db2:	e7db      	b.n	410d6c <draw_shadow+0xab8>
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  410db4:	2002      	movs	r0, #2
  410db6:	e7d9      	b.n	410d6c <draw_shadow+0xab8>
  410db8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  410dba:	464c      	mov	r4, r9
  410dbc:	e612      	b.n	4109e4 <draw_shadow+0x730>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410dbe:	9a08      	ldr	r2, [sp, #32]
  410dc0:	a91e      	add	r1, sp, #120	; 0x78
  410dc2:	a815      	add	r0, sp, #84	; 0x54
  410dc4:	4b39      	ldr	r3, [pc, #228]	; (410eac <draw_shadow+0xbf8>)
  410dc6:	4798      	blx	r3
  410dc8:	2800      	cmp	r0, #0
  410dca:	f47f ae27 	bne.w	410a1c <draw_shadow+0x768>
        if(simple_mode) ca.y2 = LV_MATH_MIN(ca.y2, coords->y1);
  410dce:	9b06      	ldr	r3, [sp, #24]
  410dd0:	b14b      	cbz	r3, 410de6 <draw_shadow+0xb32>
  410dd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  410dd4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  410dd8:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
  410ddc:	4293      	cmp	r3, r2
  410dde:	bfa8      	it	ge
  410de0:	4613      	movge	r3, r2
  410de2:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410de6:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  410dea:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
  410dee:	1a9b      	subs	r3, r3, r2
  410df0:	b29b      	uxth	r3, r3
  410df2:	3301      	adds	r3, #1
  410df4:	b21b      	sxth	r3, r3
  410df6:	930a      	str	r3, [sp, #40]	; 0x28
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410df8:	f8bd b052 	ldrh.w	fp, [sp, #82]	; 0x52
  410dfc:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  410e00:	b29a      	uxth	r2, r3
  410e02:	ebab 0b02 	sub.w	fp, fp, r2
  410e06:	fa1f fb8b 	uxth.w	fp, fp
  410e0a:	f10b 0b01 	add.w	fp, fp, #1
  410e0e:	fa0f fb8b 	sxth.w	fp, fp
        sh_buf_tmp = sh_buf + corner_size - 1;
  410e12:	46a6      	mov	lr, r4
  410e14:	1e62      	subs	r2, r4, #1
        sh_buf_tmp += corner_size * (ca.y1 - a.y1);
  410e16:	f9bd 8056 	ldrsh.w	r8, [sp, #86]	; 0x56
  410e1a:	eba3 0808 	sub.w	r8, r3, r8
  410e1e:	fb08 2804 	mla	r8, r8, r4, r2
  410e22:	9b07      	ldr	r3, [sp, #28]
  410e24:	4498      	add	r8, r3
    const uint8_t * s8 = (const uint8_t *)src;
  410e26:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  410e28:	aa11      	add	r2, sp, #68	; 0x44
  410e2a:	2308      	movs	r3, #8
  410e2c:	e004      	b.n	410e38 <draw_shadow+0xb84>
        *d8 = *s8;
  410e2e:	f811 0b01 	ldrb.w	r0, [r1], #1
  410e32:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  410e36:	3b01      	subs	r3, #1
    while(len) {
  410e38:	2b00      	cmp	r3, #0
  410e3a:	d1f8      	bne.n	410e2e <draw_shadow+0xb7a>
        fa.y2 = fa.y1;
  410e3c:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  410e40:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        for(y = 0; y < h; y++) {
  410e44:	f04f 0900 	mov.w	r9, #0
  410e48:	940c      	str	r4, [sp, #48]	; 0x30
  410e4a:	960d      	str	r6, [sp, #52]	; 0x34
  410e4c:	9e06      	ldr	r6, [sp, #24]
  410e4e:	46f2      	mov	sl, lr
  410e50:	e01e      	b.n	410e90 <draw_shadow+0xbdc>
            _lv_memset(mask_buf, opa_tmp, w);
  410e52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  410e54:	9805      	ldr	r0, [sp, #20]
  410e56:	4b19      	ldr	r3, [pc, #100]	; (410ebc <draw_shadow+0xc08>)
  410e58:	4798      	blx	r3
            if(simple_mode) {
  410e5a:	b38e      	cbz	r6, 410ec0 <draw_shadow+0xc0c>
                mask_res = LV_DRAW_MASK_RES_CHANGED;
  410e5c:	2002      	movs	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  410e5e:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  410e62:	9302      	str	r3, [sp, #8]
  410e64:	23ff      	movs	r3, #255	; 0xff
  410e66:	9301      	str	r3, [sp, #4]
  410e68:	9000      	str	r0, [sp, #0]
  410e6a:	9b05      	ldr	r3, [sp, #20]
  410e6c:	8c2a      	ldrh	r2, [r5, #32]
  410e6e:	a911      	add	r1, sp, #68	; 0x44
  410e70:	9804      	ldr	r0, [sp, #16]
  410e72:	4c0f      	ldr	r4, [pc, #60]	; (410eb0 <draw_shadow+0xbfc>)
  410e74:	47a0      	blx	r4
            fa.y1++;
  410e76:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  410e7a:	3301      	adds	r3, #1
  410e7c:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            fa.y2++;
  410e80:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410e84:	3301      	adds	r3, #1
  410e86:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            sh_buf_tmp += corner_size;
  410e8a:	44d0      	add	r8, sl
        for(y = 0; y < h; y++) {
  410e8c:	f109 0901 	add.w	r9, r9, #1
  410e90:	45d9      	cmp	r9, fp
  410e92:	da21      	bge.n	410ed8 <draw_shadow+0xc24>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
  410e94:	f898 1000 	ldrb.w	r1, [r8]
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
  410e98:	2fff      	cmp	r7, #255	; 0xff
  410e9a:	bf08      	it	eq
  410e9c:	29ff      	cmpeq	r1, #255	; 0xff
  410e9e:	d0d8      	beq.n	410e52 <draw_shadow+0xb9e>
  410ea0:	fb01 f107 	mul.w	r1, r1, r7
  410ea4:	f3c1 2107 	ubfx	r1, r1, #8, #8
  410ea8:	e7d3      	b.n	410e52 <draw_shadow+0xb9e>
  410eaa:	bf00      	nop
  410eac:	004158d9 	.word	0x004158d9
  410eb0:	0040c921 	.word	0x0040c921
  410eb4:	004168e9 	.word	0x004168e9
  410eb8:	0040fc95 	.word	0x0040fc95
  410ebc:	00416bb1 	.word	0x00416bb1
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  410ec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  410ec2:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  410ec6:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  410eca:	9805      	ldr	r0, [sp, #20]
  410ecc:	4c73      	ldr	r4, [pc, #460]	; (41109c <draw_shadow+0xde8>)
  410ece:	47a0      	blx	r4
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  410ed0:	2801      	cmp	r0, #1
  410ed2:	d1c4      	bne.n	410e5e <draw_shadow+0xbaa>
  410ed4:	2002      	movs	r0, #2
  410ed6:	e7c2      	b.n	410e5e <draw_shadow+0xbaa>
  410ed8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  410eda:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  410edc:	e59e      	b.n	410a1c <draw_shadow+0x768>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410ede:	9a08      	ldr	r2, [sp, #32]
  410ee0:	a91e      	add	r1, sp, #120	; 0x78
  410ee2:	a815      	add	r0, sp, #84	; 0x54
  410ee4:	4b6e      	ldr	r3, [pc, #440]	; (4110a0 <draw_shadow+0xdec>)
  410ee6:	4798      	blx	r3
  410ee8:	2800      	cmp	r0, #0
  410eea:	f47f adb3 	bne.w	410a54 <draw_shadow+0x7a0>
        if(simple_mode) ca.y1 = LV_MATH_MAX(ca.y1, coords->y2);
  410eee:	9b06      	ldr	r3, [sp, #24]
  410ef0:	b14b      	cbz	r3, 410f06 <draw_shadow+0xc52>
  410ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  410ef4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
  410ef8:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
  410efc:	4293      	cmp	r3, r2
  410efe:	bfb8      	it	lt
  410f00:	4613      	movlt	r3, r2
  410f02:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410f06:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  410f0a:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
  410f0e:	1a9b      	subs	r3, r3, r2
  410f10:	b29b      	uxth	r3, r3
  410f12:	3301      	adds	r3, #1
  410f14:	b21b      	sxth	r3, r3
  410f16:	9309      	str	r3, [sp, #36]	; 0x24
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410f18:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
  410f1c:	fa1f f982 	uxth.w	r9, r2
  410f20:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
  410f24:	eba9 0903 	sub.w	r9, r9, r3
  410f28:	fa1f f989 	uxth.w	r9, r9
  410f2c:	f109 0901 	add.w	r9, r9, #1
  410f30:	fa0f f989 	sxth.w	r9, r9
        sh_buf_tmp = sh_buf + corner_size - 1;
  410f34:	46a2      	mov	sl, r4
  410f36:	1e61      	subs	r1, r4, #1
        sh_buf_tmp += corner_size * (a.y2 - ca.y2);
  410f38:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
  410f3c:	1a9b      	subs	r3, r3, r2
  410f3e:	fb03 1404 	mla	r4, r3, r4, r1
  410f42:	9b07      	ldr	r3, [sp, #28]
  410f44:	441c      	add	r4, r3
    const uint8_t * s8 = (const uint8_t *)src;
  410f46:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  410f48:	aa11      	add	r2, sp, #68	; 0x44
  410f4a:	2308      	movs	r3, #8
  410f4c:	e004      	b.n	410f58 <draw_shadow+0xca4>
        *d8 = *s8;
  410f4e:	f811 0b01 	ldrb.w	r0, [r1], #1
  410f52:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  410f56:	3b01      	subs	r3, #1
    while(len) {
  410f58:	2b00      	cmp	r3, #0
  410f5a:	d1f8      	bne.n	410f4e <draw_shadow+0xc9a>
        fa.y1 = fa.y2;
  410f5c:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410f60:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        for(y = 0; y < h; y++) {
  410f64:	f04f 0800 	mov.w	r8, #0
  410f68:	f8dd b018 	ldr.w	fp, [sp, #24]
  410f6c:	960a      	str	r6, [sp, #40]	; 0x28
  410f6e:	e020      	b.n	410fb2 <draw_shadow+0xcfe>
            _lv_memset(mask_buf, opa_tmp, w);
  410f70:	9a09      	ldr	r2, [sp, #36]	; 0x24
  410f72:	9805      	ldr	r0, [sp, #20]
  410f74:	4b4b      	ldr	r3, [pc, #300]	; (4110a4 <draw_shadow+0xdf0>)
  410f76:	4798      	blx	r3
            if(simple_mode) {
  410f78:	f1bb 0f00 	cmp.w	fp, #0
  410f7c:	d025      	beq.n	410fca <draw_shadow+0xd16>
                mask_res = LV_DRAW_MASK_RES_CHANGED;
  410f7e:	2002      	movs	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  410f80:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  410f84:	9302      	str	r3, [sp, #8]
  410f86:	23ff      	movs	r3, #255	; 0xff
  410f88:	9301      	str	r3, [sp, #4]
  410f8a:	9000      	str	r0, [sp, #0]
  410f8c:	9b05      	ldr	r3, [sp, #20]
  410f8e:	8c2a      	ldrh	r2, [r5, #32]
  410f90:	a911      	add	r1, sp, #68	; 0x44
  410f92:	9804      	ldr	r0, [sp, #16]
  410f94:	4e44      	ldr	r6, [pc, #272]	; (4110a8 <draw_shadow+0xdf4>)
  410f96:	47b0      	blx	r6
            fa.y1--;
  410f98:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  410f9c:	3b01      	subs	r3, #1
  410f9e:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            fa.y2--;
  410fa2:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410fa6:	3b01      	subs	r3, #1
  410fa8:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            sh_buf_tmp += corner_size;
  410fac:	4454      	add	r4, sl
        for(y = 0; y < h; y++) {
  410fae:	f108 0801 	add.w	r8, r8, #1
  410fb2:	45c8      	cmp	r8, r9
  410fb4:	da15      	bge.n	410fe2 <draw_shadow+0xd2e>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
  410fb6:	7821      	ldrb	r1, [r4, #0]
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
  410fb8:	2fff      	cmp	r7, #255	; 0xff
  410fba:	bf08      	it	eq
  410fbc:	29ff      	cmpeq	r1, #255	; 0xff
  410fbe:	d0d7      	beq.n	410f70 <draw_shadow+0xcbc>
  410fc0:	fb01 f107 	mul.w	r1, r1, r7
  410fc4:	f3c1 2107 	ubfx	r1, r1, #8, #8
  410fc8:	e7d2      	b.n	410f70 <draw_shadow+0xcbc>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  410fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  410fcc:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  410fd0:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  410fd4:	9805      	ldr	r0, [sp, #20]
  410fd6:	4e31      	ldr	r6, [pc, #196]	; (41109c <draw_shadow+0xde8>)
  410fd8:	47b0      	blx	r6
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  410fda:	2801      	cmp	r0, #1
  410fdc:	d1d0      	bne.n	410f80 <draw_shadow+0xccc>
  410fde:	2002      	movs	r0, #2
  410fe0:	e7ce      	b.n	410f80 <draw_shadow+0xccc>
  410fe2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  410fe4:	e536      	b.n	410a54 <draw_shadow+0x7a0>
    if(has_com && simple_mode == false &&  _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410fe6:	9a08      	ldr	r2, [sp, #32]
  410fe8:	a91e      	add	r1, sp, #120	; 0x78
  410fea:	a815      	add	r0, sp, #84	; 0x54
  410fec:	4b2c      	ldr	r3, [pc, #176]	; (4110a0 <draw_shadow+0xdec>)
  410fee:	4798      	blx	r3
  410ff0:	2800      	cmp	r0, #0
  410ff2:	f47f ad4f 	bne.w	410a94 <draw_shadow+0x7e0>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410ff6:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
  410ffa:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
  410ffe:	1af6      	subs	r6, r6, r3
  411000:	b2b6      	uxth	r6, r6
  411002:	3601      	adds	r6, #1
  411004:	b236      	sxth	r6, r6
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  411006:	f8bd 8052 	ldrh.w	r8, [sp, #82]	; 0x52
  41100a:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
  41100e:	eba8 0803 	sub.w	r8, r8, r3
  411012:	fa1f f888 	uxth.w	r8, r8
  411016:	f108 0801 	add.w	r8, r8, #1
  41101a:	fa0f f888 	sxth.w	r8, r8
    const uint8_t * s8 = (const uint8_t *)src;
  41101e:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  411020:	aa11      	add	r2, sp, #68	; 0x44
  411022:	2308      	movs	r3, #8
    while(len) {
  411024:	b12b      	cbz	r3, 411032 <draw_shadow+0xd7e>
        *d8 = *s8;
  411026:	f811 0b01 	ldrb.w	r0, [r1], #1
  41102a:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  41102e:	3b01      	subs	r3, #1
  411030:	e7f8      	b.n	411024 <draw_shadow+0xd70>
        fa.y2 = fa.y1;
  411032:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  411036:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        for(y = 0; y < h; y++) {
  41103a:	2400      	movs	r4, #0
  41103c:	f8dd 9014 	ldr.w	r9, [sp, #20]
  411040:	e016      	b.n	411070 <draw_shadow+0xdbc>
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  411042:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  411046:	9302      	str	r3, [sp, #8]
  411048:	23ff      	movs	r3, #255	; 0xff
  41104a:	9301      	str	r3, [sp, #4]
  41104c:	9000      	str	r0, [sp, #0]
  41104e:	464b      	mov	r3, r9
  411050:	8c2a      	ldrh	r2, [r5, #32]
  411052:	a911      	add	r1, sp, #68	; 0x44
  411054:	9804      	ldr	r0, [sp, #16]
  411056:	4f14      	ldr	r7, [pc, #80]	; (4110a8 <draw_shadow+0xdf4>)
  411058:	47b8      	blx	r7
            fa.y1++;
  41105a:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  41105e:	3301      	adds	r3, #1
  411060:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            fa.y2++;
  411064:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  411068:	3301      	adds	r3, #1
  41106a:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        for(y = 0; y < h; y++) {
  41106e:	3401      	adds	r4, #1
  411070:	4544      	cmp	r4, r8
  411072:	f6bf ad0f 	bge.w	410a94 <draw_shadow+0x7e0>
            _lv_memset(mask_buf, dsc->shadow_opa, w);
  411076:	4632      	mov	r2, r6
  411078:	f895 102a 	ldrb.w	r1, [r5, #42]	; 0x2a
  41107c:	4648      	mov	r0, r9
  41107e:	4b09      	ldr	r3, [pc, #36]	; (4110a4 <draw_shadow+0xdf0>)
  411080:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  411082:	4633      	mov	r3, r6
  411084:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  411088:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  41108c:	4648      	mov	r0, r9
  41108e:	4f03      	ldr	r7, [pc, #12]	; (41109c <draw_shadow+0xde8>)
  411090:	47b8      	blx	r7
            if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  411092:	2801      	cmp	r0, #1
  411094:	d1d5      	bne.n	411042 <draw_shadow+0xd8e>
  411096:	2002      	movs	r0, #2
  411098:	e7d3      	b.n	411042 <draw_shadow+0xd8e>
  41109a:	bf00      	nop
  41109c:	0040fc95 	.word	0x0040fc95
  4110a0:	004158d9 	.word	0x004158d9
  4110a4:	00416bb1 	.word	0x00416bb1
  4110a8:	0040c921 	.word	0x0040c921

004110ac <draw_full_border>:
}
#endif

static void draw_full_border(const lv_area_t * area_inner, const lv_area_t * area_outer, const lv_area_t * clip,
                             lv_coord_t radius, bool radius_is_in, lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
  4110ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4110b0:	b0a5      	sub	sp, #148	; 0x94
  4110b2:	4683      	mov	fp, r0
  4110b4:	460c      	mov	r4, r1
  4110b6:	9205      	str	r2, [sp, #20]
  4110b8:	461e      	mov	r6, r3
  4110ba:	f89d 50b8 	ldrb.w	r5, [sp, #184]	; 0xb8
  4110be:	f89d 70c0 	ldrb.w	r7, [sp, #192]	; 0xc0
  4110c2:	f89d 80c4 	ldrb.w	r8, [sp, #196]	; 0xc4
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
  4110c6:	4baa      	ldr	r3, [pc, #680]	; (411370 <draw_full_border+0x2c4>)
  4110c8:	4798      	blx	r3
    bool simple_mode = true;
    if(other_mask_cnt) simple_mode = false;
  4110ca:	2800      	cmp	r0, #0
  4110cc:	d13d      	bne.n	41114a <draw_full_border+0x9e>
    bool simple_mode = true;
  4110ce:	f04f 0a01 	mov.w	sl, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4110d2:	f8bb 1004 	ldrh.w	r1, [fp, #4]
  4110d6:	f8bb 2000 	ldrh.w	r2, [fp]
  4110da:	1a8a      	subs	r2, r1, r2
  4110dc:	b292      	uxth	r2, r2
  4110de:	3201      	adds	r2, #1
  4110e0:	b212      	sxth	r2, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4110e2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
  4110e6:	f8bb 3002 	ldrh.w	r3, [fp, #2]
  4110ea:	1ac0      	subs	r0, r0, r3
  4110ec:	b280      	uxth	r0, r0
  4110ee:	3001      	adds	r0, #1
  4110f0:	b200      	sxth	r0, r0

    int32_t inner_w = lv_area_get_width(area_inner);
    int32_t inner_h = lv_area_get_height(area_inner);
    lv_coord_t border_width = area_outer->x2 - area_inner->x2;
  4110f2:	88a3      	ldrh	r3, [r4, #4]
  4110f4:	1a59      	subs	r1, r3, r1
  4110f6:	b289      	uxth	r1, r1
  4110f8:	910c      	str	r1, [sp, #48]	; 0x30
  4110fa:	fa0f f981 	sxth.w	r9, r1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4110fe:	8821      	ldrh	r1, [r4, #0]
  411100:	1a5b      	subs	r3, r3, r1
  411102:	b29b      	uxth	r3, r3
  411104:	3301      	adds	r3, #1
  411106:	b21b      	sxth	r3, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  411108:	88e1      	ldrh	r1, [r4, #6]
  41110a:	f8b4 e002 	ldrh.w	lr, [r4, #2]
  41110e:	eba1 010e 	sub.w	r1, r1, lr
  411112:	b289      	uxth	r1, r1
  411114:	3101      	adds	r1, #1
  411116:	b209      	sxth	r1, r1
    int32_t coords_out_w = lv_area_get_width(area_outer);
    int32_t coords_out_h = lv_area_get_height(area_outer);

    int32_t rin;
    int32_t rout;
    if(radius_is_in) {
  411118:	b1d5      	cbz	r5, 411150 <draw_full_border+0xa4>
        rin = radius;
        int32_t short_side = LV_MATH_MIN(inner_w, inner_h);
  41111a:	4282      	cmp	r2, r0
  41111c:	bfa8      	it	ge
  41111e:	4602      	movge	r2, r0
        if(rin > short_side >> 1) rin = short_side >> 1;
  411120:	1055      	asrs	r5, r2, #1
  411122:	42ae      	cmp	r6, r5
  411124:	dc00      	bgt.n	411128 <draw_full_border+0x7c>
        rin = radius;
  411126:	4635      	mov	r5, r6

        /*Get the outer area*/
        rout = rin + border_width;
  411128:	eb05 0309 	add.w	r3, r5, r9
  41112c:	9306      	str	r3, [sp, #24]
        rin = rout - border_width;
        if(rin < 0) rin = 0;

    }

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  41112e:	4b91      	ldr	r3, [pc, #580]	; (411374 <draw_full_border+0x2c8>)
  411130:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  411132:	4b91      	ldr	r3, [pc, #580]	; (411378 <draw_full_border+0x2cc>)
  411134:	4798      	blx	r3
  411136:	4606      	mov	r6, r0

    /* Get clipped fill area which is the real draw area.
     * It is always the same or inside `fill_area` */
    lv_area_t draw_area;
    bool is_common;
    is_common = _lv_area_intersect(&draw_area, area_outer, clip);
  411138:	9a05      	ldr	r2, [sp, #20]
  41113a:	4621      	mov	r1, r4
  41113c:	a822      	add	r0, sp, #136	; 0x88
  41113e:	4b8f      	ldr	r3, [pc, #572]	; (41137c <draw_full_border+0x2d0>)
  411140:	4798      	blx	r3
    if(is_common == false) return;
  411142:	b998      	cbnz	r0, 41116c <draw_full_border+0xc0>
        }
    }
    lv_draw_mask_remove_id(mask_rin_id);
    lv_draw_mask_remove_id(mask_rout_id);
    _lv_mem_buf_release(mask_buf);
}
  411144:	b025      	add	sp, #148	; 0x94
  411146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(other_mask_cnt) simple_mode = false;
  41114a:	f04f 0a00 	mov.w	sl, #0
  41114e:	e7c0      	b.n	4110d2 <draw_full_border+0x26>
        int32_t short_side = LV_MATH_MIN(coords_out_w, coords_out_h);
  411150:	4299      	cmp	r1, r3
  411152:	bfa8      	it	ge
  411154:	4619      	movge	r1, r3
        if(rout > short_side >> 1) rout = short_side >> 1;
  411156:	104b      	asrs	r3, r1, #1
  411158:	9306      	str	r3, [sp, #24]
  41115a:	429e      	cmp	r6, r3
  41115c:	dc00      	bgt.n	411160 <draw_full_border+0xb4>
        rout = radius;
  41115e:	9606      	str	r6, [sp, #24]
        if(rin < 0) rin = 0;
  411160:	9b06      	ldr	r3, [sp, #24]
  411162:	ebb3 0509 	subs.w	r5, r3, r9
  411166:	d5e2      	bpl.n	41112e <draw_full_border+0x82>
  411168:	2500      	movs	r5, #0
  41116a:	e7e0      	b.n	41112e <draw_full_border+0x82>
    draw_area.x1 -= disp_area->x1;
  41116c:	f8b6 e010 	ldrh.w	lr, [r6, #16]
  411170:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  411174:	eba3 030e 	sub.w	r3, r3, lr
  411178:	b29a      	uxth	r2, r3
  41117a:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
    draw_area.y1 -= disp_area->y1;
  41117e:	8a70      	ldrh	r0, [r6, #18]
  411180:	f8bd 108a 	ldrh.w	r1, [sp, #138]	; 0x8a
  411184:	1a09      	subs	r1, r1, r0
  411186:	f8ad 108a 	strh.w	r1, [sp, #138]	; 0x8a
    draw_area.x2 -= disp_area->x1;
  41118a:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  41118e:	eba3 030e 	sub.w	r3, r3, lr
  411192:	b29b      	uxth	r3, r3
  411194:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
    draw_area.y2 -= disp_area->y1;
  411198:	f8bd 108e 	ldrh.w	r1, [sp, #142]	; 0x8e
  41119c:	1a09      	subs	r1, r1, r0
  41119e:	f8ad 108e 	strh.w	r1, [sp, #142]	; 0x8e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4111a2:	1a9b      	subs	r3, r3, r2
  4111a4:	b29b      	uxth	r3, r3
  4111a6:	3301      	adds	r3, #1
  4111a8:	b21b      	sxth	r3, r3
  4111aa:	9309      	str	r3, [sp, #36]	; 0x24
    lv_draw_mask_radius_init(&mask_rin_param, area_inner, rin, true);
  4111ac:	2301      	movs	r3, #1
  4111ae:	b22a      	sxth	r2, r5
  4111b0:	4659      	mov	r1, fp
  4111b2:	a81b      	add	r0, sp, #108	; 0x6c
  4111b4:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 411394 <draw_full_border+0x2e8>
  4111b8:	47d8      	blx	fp
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
  4111ba:	2100      	movs	r1, #0
  4111bc:	a81b      	add	r0, sp, #108	; 0x6c
  4111be:	4d70      	ldr	r5, [pc, #448]	; (411380 <draw_full_border+0x2d4>)
  4111c0:	47a8      	blx	r5
  4111c2:	900d      	str	r0, [sp, #52]	; 0x34
    lv_draw_mask_radius_init(&mask_rout_param, area_outer, rout, false);
  4111c4:	2300      	movs	r3, #0
  4111c6:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
  4111ca:	4621      	mov	r1, r4
  4111cc:	a814      	add	r0, sp, #80	; 0x50
  4111ce:	47d8      	blx	fp
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
  4111d0:	2100      	movs	r1, #0
  4111d2:	a814      	add	r0, sp, #80	; 0x50
  4111d4:	47a8      	blx	r5
  4111d6:	900e      	str	r0, [sp, #56]	; 0x38
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
  4111d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4111da:	9308      	str	r3, [sp, #32]
  4111dc:	4618      	mov	r0, r3
  4111de:	4b69      	ldr	r3, [pc, #420]	; (411384 <draw_full_border+0x2d8>)
  4111e0:	4798      	blx	r3
  4111e2:	9007      	str	r0, [sp, #28]
    int32_t corner_size = LV_MATH_MAX(rout, border_width - 1);
  4111e4:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  4111e8:	f109 39ff 	add.w	r9, r9, #4294967295
  4111ec:	464b      	mov	r3, r9
  4111ee:	9a06      	ldr	r2, [sp, #24]
  4111f0:	4591      	cmp	r9, r2
  4111f2:	bfb8      	it	lt
  4111f4:	4613      	movlt	r3, r2
  4111f6:	4619      	mov	r1, r3
  4111f8:	930f      	str	r3, [sp, #60]	; 0x3c
    if(simple_mode) {
  4111fa:	f1ba 0f00 	cmp.w	sl, #0
  4111fe:	f000 8197 	beq.w	411530 <draw_full_border+0x484>
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;
  411202:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
  411206:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
  41120a:	1ad2      	subs	r2, r2, r3
  41120c:	188a      	adds	r2, r1, r2
  41120e:	920b      	str	r2, [sp, #44]	; 0x2c
        fill_area.x1 = area_outer->x1;
  411210:	f9b4 2000 	ldrsh.w	r2, [r4]
  411214:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
        fill_area.x2 = area_outer->x2;
  411218:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
  41121c:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
        fill_area.y1 = disp_area->y1 + draw_area.y1;
  411220:	f9bd 908a 	ldrsh.w	r9, [sp, #138]	; 0x8a
  411224:	fa1f f289 	uxth.w	r2, r9
  411228:	fa12 f383 	uxtah	r3, r2, r3
  41122c:	b21b      	sxth	r3, r3
  41122e:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        fill_area.y2 = fill_area.y1;
  411232:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
  411236:	46ba      	mov	sl, r7
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
  411238:	e02c      	b.n	411294 <draw_full_border+0x1e8>
            fill_area2.x1 = area_outer->x2 - rout + 1;
  41123a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  41123e:	b29a      	uxth	r2, r3
  411240:	1b55      	subs	r5, r2, r5
  411242:	b2ad      	uxth	r5, r5
  411244:	3501      	adds	r5, #1
  411246:	f8ad 5040 	strh.w	r5, [sp, #64]	; 0x40
            fill_area2.x2 = area_outer->x2;
  41124a:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
  41124e:	9a06      	ldr	r2, [sp, #24]
  411250:	1a9b      	subs	r3, r3, r2
  411252:	3301      	adds	r3, #1
  411254:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
  411258:	f9bd 1088 	ldrsh.w	r1, [sp, #136]	; 0x88
  41125c:	440a      	add	r2, r1
            if(mask_ofs < 0) mask_ofs = 0;
  41125e:	1a9b      	subs	r3, r3, r2
  411260:	d46c      	bmi.n	41133c <draw_full_border+0x290>
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
  411262:	f8cd 8008 	str.w	r8, [sp, #8]
  411266:	f8cd a004 	str.w	sl, [sp, #4]
  41126a:	9700      	str	r7, [sp, #0]
  41126c:	9a07      	ldr	r2, [sp, #28]
  41126e:	4413      	add	r3, r2
  411270:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  411274:	a910      	add	r1, sp, #64	; 0x40
  411276:	9805      	ldr	r0, [sp, #20]
  411278:	4d43      	ldr	r5, [pc, #268]	; (411388 <draw_full_border+0x2dc>)
  41127a:	47a8      	blx	r5
            fill_area.y1++;
  41127c:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  411280:	3301      	adds	r3, #1
  411282:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            fill_area.y2++;
  411286:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  41128a:	3301      	adds	r3, #1
  41128c:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
  411290:	f109 0901 	add.w	r9, r9, #1
  411294:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  411296:	4599      	cmp	r9, r3
  411298:	dc52      	bgt.n	411340 <draw_full_border+0x294>
            _lv_memset_ff(mask_buf, draw_area_w);
  41129a:	9908      	ldr	r1, [sp, #32]
  41129c:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4112a0:	4658      	mov	r0, fp
  4112a2:	4b3a      	ldr	r3, [pc, #232]	; (41138c <draw_full_border+0x2e0>)
  4112a4:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  4112a6:	8a31      	ldrh	r1, [r6, #16]
  4112a8:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  4112ac:	4419      	add	r1, r3
  4112ae:	8a72      	ldrh	r2, [r6, #18]
  4112b0:	444a      	add	r2, r9
  4112b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4112b4:	b212      	sxth	r2, r2
  4112b6:	b209      	sxth	r1, r1
  4112b8:	4658      	mov	r0, fp
  4112ba:	4d35      	ldr	r5, [pc, #212]	; (411390 <draw_full_border+0x2e4>)
  4112bc:	47a8      	blx	r5
  4112be:	4607      	mov	r7, r0
            fill_area2.y1 = fill_area.y1;
  4112c0:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  4112c4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area2.y2 = fill_area.y2;
  4112c8:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  4112cc:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            fill_area2.x1 = area_outer->x1;
  4112d0:	f9b4 3000 	ldrsh.w	r3, [r4]
  4112d4:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            fill_area2.x2 = area_outer->x1 + rout - 1;
  4112d8:	8823      	ldrh	r3, [r4, #0]
  4112da:	f8bd 5018 	ldrh.w	r5, [sp, #24]
  4112de:	442b      	add	r3, r5
  4112e0:	b29b      	uxth	r3, r3
  4112e2:	3b01      	subs	r3, #1
  4112e4:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
  4112e8:	f8cd 8008 	str.w	r8, [sp, #8]
  4112ec:	f8cd a004 	str.w	sl, [sp, #4]
  4112f0:	9000      	str	r0, [sp, #0]
  4112f2:	465b      	mov	r3, fp
  4112f4:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  4112f8:	a910      	add	r1, sp, #64	; 0x40
  4112fa:	9805      	ldr	r0, [sp, #20]
  4112fc:	f8df b088 	ldr.w	fp, [pc, #136]	; 411388 <draw_full_border+0x2dc>
  411300:	47d8      	blx	fp
            if(fill_area2.y2 < area_outer->y1 + border_width) {
  411302:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  411306:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
  41130a:	990a      	ldr	r1, [sp, #40]	; 0x28
  41130c:	440b      	add	r3, r1
  41130e:	429a      	cmp	r2, r3
  411310:	da93      	bge.n	41123a <draw_full_border+0x18e>
                fill_area2.x1 = area_outer->x1 + rout;
  411312:	8823      	ldrh	r3, [r4, #0]
  411314:	442b      	add	r3, r5
  411316:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
                fill_area2.x2 = area_outer->x2 - rout;
  41131a:	88a3      	ldrh	r3, [r4, #4]
  41131c:	1b5b      	subs	r3, r3, r5
  41131e:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
  411322:	f8cd 8008 	str.w	r8, [sp, #8]
  411326:	f8cd a004 	str.w	sl, [sp, #4]
  41132a:	2301      	movs	r3, #1
  41132c:	9300      	str	r3, [sp, #0]
  41132e:	2300      	movs	r3, #0
  411330:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  411334:	a910      	add	r1, sp, #64	; 0x40
  411336:	9805      	ldr	r0, [sp, #20]
  411338:	47d8      	blx	fp
  41133a:	e77e      	b.n	41123a <draw_full_border+0x18e>
            if(mask_ofs < 0) mask_ofs = 0;
  41133c:	2300      	movs	r3, #0
  41133e:	e790      	b.n	411262 <draw_full_border+0x1b6>
  411340:	4657      	mov	r7, sl
        int32_t lower_corner_end = area_outer->y2 - disp_area->y1 - corner_size;
  411342:	f9b4 9006 	ldrsh.w	r9, [r4, #6]
  411346:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
  41134a:	eba9 0903 	sub.w	r9, r9, r3
  41134e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  411350:	eba9 0902 	sub.w	r9, r9, r2
        if(lower_corner_end <= upper_corner_end) lower_corner_end = upper_corner_end + 1;
  411354:	990b      	ldr	r1, [sp, #44]	; 0x2c
  411356:	4549      	cmp	r1, r9
  411358:	db01      	blt.n	41135e <draw_full_border+0x2b2>
  41135a:	f101 0901 	add.w	r9, r1, #1
        fill_area.y1 = disp_area->y1 + lower_corner_end;
  41135e:	fa19 f383 	uxtah	r3, r9, r3
  411362:	b21b      	sxth	r3, r3
  411364:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        fill_area.y2 = fill_area.y1;
  411368:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
  41136c:	46ba      	mov	sl, r7
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
  41136e:	e040      	b.n	4113f2 <draw_full_border+0x346>
  411370:	0040fd5d 	.word	0x0040fd5d
  411374:	00409851 	.word	0x00409851
  411378:	00414ea5 	.word	0x00414ea5
  41137c:	00415663 	.word	0x00415663
  411380:	0040fc61 	.word	0x0040fc61
  411384:	00416a81 	.word	0x00416a81
  411388:	0040c921 	.word	0x0040c921
  41138c:	00416c65 	.word	0x00416c65
  411390:	0040fc95 	.word	0x0040fc95
  411394:	0040fedd 	.word	0x0040fedd
            fill_area2.x1 = area_outer->x2 - rout + 1;
  411398:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  41139c:	b29a      	uxth	r2, r3
  41139e:	1b55      	subs	r5, r2, r5
  4113a0:	b2ad      	uxth	r5, r5
  4113a2:	3501      	adds	r5, #1
  4113a4:	f8ad 5040 	strh.w	r5, [sp, #64]	; 0x40
            fill_area2.x2 = area_outer->x2;
  4113a8:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
  4113ac:	9a06      	ldr	r2, [sp, #24]
  4113ae:	1a9b      	subs	r3, r3, r2
  4113b0:	3301      	adds	r3, #1
  4113b2:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
  4113b6:	f9bd 1088 	ldrsh.w	r1, [sp, #136]	; 0x88
  4113ba:	440a      	add	r2, r1
            if(mask_ofs < 0) mask_ofs = 0;
  4113bc:	1a9b      	subs	r3, r3, r2
  4113be:	d46d      	bmi.n	41149c <draw_full_border+0x3f0>
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
  4113c0:	f8cd 8008 	str.w	r8, [sp, #8]
  4113c4:	f8cd a004 	str.w	sl, [sp, #4]
  4113c8:	9700      	str	r7, [sp, #0]
  4113ca:	9a07      	ldr	r2, [sp, #28]
  4113cc:	4413      	add	r3, r2
  4113ce:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  4113d2:	a910      	add	r1, sp, #64	; 0x40
  4113d4:	9805      	ldr	r0, [sp, #20]
  4113d6:	4d79      	ldr	r5, [pc, #484]	; (4115bc <draw_full_border+0x510>)
  4113d8:	47a8      	blx	r5
            fill_area.y1++;
  4113da:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  4113de:	3301      	adds	r3, #1
  4113e0:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            fill_area.y2++;
  4113e4:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  4113e8:	3301      	adds	r3, #1
  4113ea:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
  4113ee:	f109 0901 	add.w	r9, r9, #1
  4113f2:	f9bd 308e 	ldrsh.w	r3, [sp, #142]	; 0x8e
  4113f6:	4599      	cmp	r9, r3
  4113f8:	dc52      	bgt.n	4114a0 <draw_full_border+0x3f4>
            _lv_memset_ff(mask_buf, draw_area_w);
  4113fa:	9908      	ldr	r1, [sp, #32]
  4113fc:	f8dd b01c 	ldr.w	fp, [sp, #28]
  411400:	4658      	mov	r0, fp
  411402:	4b6f      	ldr	r3, [pc, #444]	; (4115c0 <draw_full_border+0x514>)
  411404:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  411406:	8a31      	ldrh	r1, [r6, #16]
  411408:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  41140c:	4419      	add	r1, r3
  41140e:	8a72      	ldrh	r2, [r6, #18]
  411410:	444a      	add	r2, r9
  411412:	9b09      	ldr	r3, [sp, #36]	; 0x24
  411414:	b212      	sxth	r2, r2
  411416:	b209      	sxth	r1, r1
  411418:	4658      	mov	r0, fp
  41141a:	4d6a      	ldr	r5, [pc, #424]	; (4115c4 <draw_full_border+0x518>)
  41141c:	47a8      	blx	r5
  41141e:	4607      	mov	r7, r0
            fill_area2.x1 = area_outer->x1;
  411420:	f9b4 3000 	ldrsh.w	r3, [r4]
  411424:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            fill_area2.x2 = area_outer->x1 + rout - 1;
  411428:	8823      	ldrh	r3, [r4, #0]
  41142a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
  41142e:	442b      	add	r3, r5
  411430:	b29b      	uxth	r3, r3
  411432:	3b01      	subs	r3, #1
  411434:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            fill_area2.y1 = fill_area.y1;
  411438:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  41143c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area2.y2 = fill_area.y2;
  411440:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  411444:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
  411448:	f8cd 8008 	str.w	r8, [sp, #8]
  41144c:	f8cd a004 	str.w	sl, [sp, #4]
  411450:	9000      	str	r0, [sp, #0]
  411452:	465b      	mov	r3, fp
  411454:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  411458:	a910      	add	r1, sp, #64	; 0x40
  41145a:	9805      	ldr	r0, [sp, #20]
  41145c:	f8df b15c 	ldr.w	fp, [pc, #348]	; 4115bc <draw_full_border+0x510>
  411460:	47d8      	blx	fp
            if(fill_area2.y2 > area_outer->y2 - border_width) {
  411462:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  411466:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
  41146a:	990a      	ldr	r1, [sp, #40]	; 0x28
  41146c:	1a5b      	subs	r3, r3, r1
  41146e:	429a      	cmp	r2, r3
  411470:	dd92      	ble.n	411398 <draw_full_border+0x2ec>
                fill_area2.x1 = area_outer->x1 + rout;
  411472:	8823      	ldrh	r3, [r4, #0]
  411474:	442b      	add	r3, r5
  411476:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
                fill_area2.x2 = area_outer->x2 - rout;
  41147a:	88a3      	ldrh	r3, [r4, #4]
  41147c:	1b5b      	subs	r3, r3, r5
  41147e:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
  411482:	f8cd 8008 	str.w	r8, [sp, #8]
  411486:	f8cd a004 	str.w	sl, [sp, #4]
  41148a:	2301      	movs	r3, #1
  41148c:	9300      	str	r3, [sp, #0]
  41148e:	2300      	movs	r3, #0
  411490:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  411494:	a910      	add	r1, sp, #64	; 0x40
  411496:	9805      	ldr	r0, [sp, #20]
  411498:	47d8      	blx	fp
  41149a:	e77d      	b.n	411398 <draw_full_border+0x2ec>
            if(mask_ofs < 0) mask_ofs = 0;
  41149c:	2300      	movs	r3, #0
  41149e:	e78f      	b.n	4113c0 <draw_full_border+0x314>
        fill_area.y1 = area_outer->y1 + corner_size + 1;
  4114a0:	8863      	ldrh	r3, [r4, #2]
  4114a2:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
  4114a6:	444b      	add	r3, r9
  4114a8:	b29b      	uxth	r3, r3
  4114aa:	3301      	adds	r3, #1
  4114ac:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        fill_area.y2 = area_outer->y2 - corner_size - 1;
  4114b0:	88e3      	ldrh	r3, [r4, #6]
  4114b2:	eba3 0309 	sub.w	r3, r3, r9
  4114b6:	b29b      	uxth	r3, r3
  4114b8:	3b01      	subs	r3, #1
  4114ba:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        fill_area.x1 = area_outer->x1;
  4114be:	f9b4 3000 	ldrsh.w	r3, [r4]
  4114c2:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        fill_area.x2 = area_outer->x1 + border_width - 1;
  4114c6:	8823      	ldrh	r3, [r4, #0]
  4114c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4114ca:	4413      	add	r3, r2
  4114cc:	b29b      	uxth	r3, r3
  4114ce:	3b01      	subs	r3, #1
  4114d0:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
  4114d4:	f8cd 8008 	str.w	r8, [sp, #8]
  4114d8:	f8cd a004 	str.w	sl, [sp, #4]
  4114dc:	2601      	movs	r6, #1
  4114de:	9600      	str	r6, [sp, #0]
  4114e0:	2300      	movs	r3, #0
  4114e2:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  4114e6:	a912      	add	r1, sp, #72	; 0x48
  4114e8:	f8dd 9014 	ldr.w	r9, [sp, #20]
  4114ec:	4648      	mov	r0, r9
  4114ee:	4d33      	ldr	r5, [pc, #204]	; (4115bc <draw_full_border+0x510>)
  4114f0:	47a8      	blx	r5
        fill_area.x1 = area_outer->x2 - border_width + 1;
  4114f2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
  4114f6:	b293      	uxth	r3, r2
  4114f8:	990c      	ldr	r1, [sp, #48]	; 0x30
  4114fa:	1a5b      	subs	r3, r3, r1
  4114fc:	b29b      	uxth	r3, r3
  4114fe:	4433      	add	r3, r6
  411500:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        fill_area.x2 = area_outer->x2;
  411504:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
  411508:	f8cd 8008 	str.w	r8, [sp, #8]
  41150c:	f8cd a004 	str.w	sl, [sp, #4]
  411510:	9600      	str	r6, [sp, #0]
  411512:	2300      	movs	r3, #0
  411514:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  411518:	a912      	add	r1, sp, #72	; 0x48
  41151a:	4648      	mov	r0, r9
  41151c:	47a8      	blx	r5
    lv_draw_mask_remove_id(mask_rin_id);
  41151e:	980d      	ldr	r0, [sp, #52]	; 0x34
  411520:	4c29      	ldr	r4, [pc, #164]	; (4115c8 <draw_full_border+0x51c>)
  411522:	47a0      	blx	r4
    lv_draw_mask_remove_id(mask_rout_id);
  411524:	980e      	ldr	r0, [sp, #56]	; 0x38
  411526:	47a0      	blx	r4
    _lv_mem_buf_release(mask_buf);
  411528:	9807      	ldr	r0, [sp, #28]
  41152a:	4b28      	ldr	r3, [pc, #160]	; (4115cc <draw_full_border+0x520>)
  41152c:	4798      	blx	r3
  41152e:	e609      	b.n	411144 <draw_full_border+0x98>
        fill_area.x1 = area_outer->x1;
  411530:	f9b4 3000 	ldrsh.w	r3, [r4]
  411534:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        fill_area.x2 = area_outer->x2;
  411538:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  41153c:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        fill_area.y1 = disp_area->y1 + draw_area.y1;
  411540:	8a73      	ldrh	r3, [r6, #18]
  411542:	f9bd 408a 	ldrsh.w	r4, [sp, #138]	; 0x8a
  411546:	fa13 f384 	uxtah	r3, r3, r4
  41154a:	b21b      	sxth	r3, r3
  41154c:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        fill_area.y2 = fill_area.y1;
  411550:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
  411554:	f8dd b01c 	ldr.w	fp, [sp, #28]
  411558:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
  41155c:	f8dd a014 	ldr.w	sl, [sp, #20]
  411560:	463d      	mov	r5, r7
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  411562:	e025      	b.n	4115b0 <draw_full_border+0x504>
            _lv_memset_ff(mask_buf, draw_area_w);
  411564:	9908      	ldr	r1, [sp, #32]
  411566:	4658      	mov	r0, fp
  411568:	4b15      	ldr	r3, [pc, #84]	; (4115c0 <draw_full_border+0x514>)
  41156a:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  41156c:	8a31      	ldrh	r1, [r6, #16]
  41156e:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  411572:	4419      	add	r1, r3
  411574:	8a72      	ldrh	r2, [r6, #18]
  411576:	4422      	add	r2, r4
  411578:	464b      	mov	r3, r9
  41157a:	b212      	sxth	r2, r2
  41157c:	b209      	sxth	r1, r1
  41157e:	4658      	mov	r0, fp
  411580:	4f10      	ldr	r7, [pc, #64]	; (4115c4 <draw_full_border+0x518>)
  411582:	47b8      	blx	r7
            _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
  411584:	f8cd 8008 	str.w	r8, [sp, #8]
  411588:	9501      	str	r5, [sp, #4]
  41158a:	9000      	str	r0, [sp, #0]
  41158c:	465b      	mov	r3, fp
  41158e:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  411592:	a912      	add	r1, sp, #72	; 0x48
  411594:	4650      	mov	r0, sl
  411596:	4f09      	ldr	r7, [pc, #36]	; (4115bc <draw_full_border+0x510>)
  411598:	47b8      	blx	r7
            fill_area.y1++;
  41159a:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  41159e:	3301      	adds	r3, #1
  4115a0:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            fill_area.y2++;
  4115a4:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  4115a8:	3301      	adds	r3, #1
  4115aa:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  4115ae:	3401      	adds	r4, #1
  4115b0:	f9bd 308e 	ldrsh.w	r3, [sp, #142]	; 0x8e
  4115b4:	429c      	cmp	r4, r3
  4115b6:	ddd5      	ble.n	411564 <draw_full_border+0x4b8>
  4115b8:	e7b1      	b.n	41151e <draw_full_border+0x472>
  4115ba:	bf00      	nop
  4115bc:	0040c921 	.word	0x0040c921
  4115c0:	00416c65 	.word	0x00416c65
  4115c4:	0040fc95 	.word	0x0040fc95
  4115c8:	0040fce5 	.word	0x0040fce5
  4115cc:	00416831 	.word	0x00416831

004115d0 <draw_outline>:
    if(dsc->outline_opa <= LV_OPA_MIN) return;
  4115d0:	7f93      	ldrb	r3, [r2, #30]
  4115d2:	2b02      	cmp	r3, #2
  4115d4:	d957      	bls.n	411686 <draw_outline+0xb6>
    if(dsc->outline_width == 0) return;
  4115d6:	f9b2 301a 	ldrsh.w	r3, [r2, #26]
  4115da:	2b00      	cmp	r3, #0
  4115dc:	d053      	beq.n	411686 <draw_outline+0xb6>
{
  4115de:	b530      	push	{r4, r5, lr}
  4115e0:	b089      	sub	sp, #36	; 0x24
  4115e2:	ac06      	add	r4, sp, #24
  4115e4:	2308      	movs	r3, #8
  4115e6:	e004      	b.n	4115f2 <draw_outline+0x22>
        *d8 = *s8;
  4115e8:	f810 5b01 	ldrb.w	r5, [r0], #1
  4115ec:	f804 5b01 	strb.w	r5, [r4], #1
        len--;
  4115f0:	3b01      	subs	r3, #1
    while(len) {
  4115f2:	2b00      	cmp	r3, #0
  4115f4:	d1f8      	bne.n	4115e8 <draw_outline+0x18>
    area_inner.x1 -= dsc->outline_pad;
  4115f6:	8b93      	ldrh	r3, [r2, #28]
  4115f8:	f8bd 0018 	ldrh.w	r0, [sp, #24]
  4115fc:	1ac0      	subs	r0, r0, r3
  4115fe:	f8ad 0018 	strh.w	r0, [sp, #24]
    area_inner.y1 -= dsc->outline_pad;
  411602:	f8bd 001a 	ldrh.w	r0, [sp, #26]
  411606:	1ac0      	subs	r0, r0, r3
  411608:	f8ad 001a 	strh.w	r0, [sp, #26]
    area_inner.x2 += dsc->outline_pad;
  41160c:	f8bd 001c 	ldrh.w	r0, [sp, #28]
  411610:	4418      	add	r0, r3
  411612:	f8ad 001c 	strh.w	r0, [sp, #28]
    area_inner.y2 += dsc->outline_pad;
  411616:	f8bd 001e 	ldrh.w	r0, [sp, #30]
  41161a:	4403      	add	r3, r0
  41161c:	f8ad 301e 	strh.w	r3, [sp, #30]
    const uint8_t * s8 = (const uint8_t *)src;
  411620:	ac06      	add	r4, sp, #24
    uint8_t * d8 = (uint8_t *)dst;
  411622:	a804      	add	r0, sp, #16
  411624:	2308      	movs	r3, #8
  411626:	e004      	b.n	411632 <draw_outline+0x62>
        *d8 = *s8;
  411628:	f814 5b01 	ldrb.w	r5, [r4], #1
  41162c:	f800 5b01 	strb.w	r5, [r0], #1
        len--;
  411630:	3b01      	subs	r3, #1
    while(len) {
  411632:	2b00      	cmp	r3, #0
  411634:	d1f8      	bne.n	411628 <draw_outline+0x58>
  411636:	4610      	mov	r0, r2
  411638:	460a      	mov	r2, r1
    area_outer.x1 -= dsc->outline_width;
  41163a:	8b43      	ldrh	r3, [r0, #26]
  41163c:	f8bd 4010 	ldrh.w	r4, [sp, #16]
  411640:	1ae4      	subs	r4, r4, r3
  411642:	f8ad 4010 	strh.w	r4, [sp, #16]
    area_outer.x2 += dsc->outline_width;
  411646:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  41164a:	441c      	add	r4, r3
  41164c:	f8ad 4014 	strh.w	r4, [sp, #20]
    area_outer.y1 -= dsc->outline_width;
  411650:	f8bd 4012 	ldrh.w	r4, [sp, #18]
  411654:	1ae4      	subs	r4, r4, r3
  411656:	f8ad 4012 	strh.w	r4, [sp, #18]
    area_outer.y2 += dsc->outline_width;
  41165a:	f8bd 1016 	ldrh.w	r1, [sp, #22]
  41165e:	440b      	add	r3, r1
  411660:	f8ad 3016 	strh.w	r3, [sp, #22]
    draw_full_border(&area_inner, &area_outer, clip, dsc->radius, true, dsc->outline_color, dsc->outline_opa,
  411664:	f9b0 3000 	ldrsh.w	r3, [r0]
  411668:	7fc1      	ldrb	r1, [r0, #31]
  41166a:	9103      	str	r1, [sp, #12]
  41166c:	7f81      	ldrb	r1, [r0, #30]
  41166e:	9102      	str	r1, [sp, #8]
  411670:	8b01      	ldrh	r1, [r0, #24]
  411672:	f8ad 1004 	strh.w	r1, [sp, #4]
  411676:	2101      	movs	r1, #1
  411678:	9100      	str	r1, [sp, #0]
  41167a:	a904      	add	r1, sp, #16
  41167c:	a806      	add	r0, sp, #24
  41167e:	4c02      	ldr	r4, [pc, #8]	; (411688 <draw_outline+0xb8>)
  411680:	47a0      	blx	r4
}
  411682:	b009      	add	sp, #36	; 0x24
  411684:	bd30      	pop	{r4, r5, pc}
  411686:	4770      	bx	lr
  411688:	004110ad 	.word	0x004110ad

0041168c <draw_border>:
    if(dsc->border_opa <= LV_OPA_MIN) return;
  41168c:	7d13      	ldrb	r3, [r2, #20]
  41168e:	2b02      	cmp	r3, #2
  411690:	f240 8197 	bls.w	4119c2 <draw_border+0x336>
    if(dsc->border_width == 0) return;
  411694:	f9b2 3010 	ldrsh.w	r3, [r2, #16]
  411698:	2b00      	cmp	r3, #0
  41169a:	f000 8192 	beq.w	4119c2 <draw_border+0x336>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
  41169e:	f9b2 3012 	ldrsh.w	r3, [r2, #18]
  4116a2:	2b00      	cmp	r3, #0
  4116a4:	f000 818d 	beq.w	4119c2 <draw_border+0x336>
    if(dsc->border_post) return;
  4116a8:	7d93      	ldrb	r3, [r2, #22]
  4116aa:	f013 0f01 	tst.w	r3, #1
  4116ae:	f040 8188 	bne.w	4119c2 <draw_border+0x336>
{
  4116b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4116b6:	b0a3      	sub	sp, #140	; 0x8c
  4116b8:	8885      	ldrh	r5, [r0, #4]
  4116ba:	8803      	ldrh	r3, [r0, #0]
  4116bc:	1aed      	subs	r5, r5, r3
  4116be:	b2ad      	uxth	r5, r5
  4116c0:	3501      	adds	r5, #1
  4116c2:	b22d      	sxth	r5, r5
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4116c4:	88c3      	ldrh	r3, [r0, #6]
  4116c6:	8844      	ldrh	r4, [r0, #2]
  4116c8:	1b1b      	subs	r3, r3, r4
  4116ca:	b29b      	uxth	r3, r3
  4116cc:	3301      	adds	r3, #1
  4116ce:	b21b      	sxth	r3, r3
    int32_t rout = dsc->radius;
  4116d0:	f9b2 4000 	ldrsh.w	r4, [r2]
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
  4116d4:	429d      	cmp	r5, r3
  4116d6:	bfa8      	it	ge
  4116d8:	461d      	movge	r5, r3
    if(rout > short_side >> 1) rout = short_side >> 1;
  4116da:	106d      	asrs	r5, r5, #1
  4116dc:	42ac      	cmp	r4, r5
  4116de:	dc00      	bgt.n	4116e2 <draw_border+0x56>
    int32_t rout = dsc->radius;
  4116e0:	4625      	mov	r5, r4
    const uint8_t * s8 = (const uint8_t *)src;
  4116e2:	4606      	mov	r6, r0
    uint8_t * d8 = (uint8_t *)dst;
  4116e4:	ac20      	add	r4, sp, #128	; 0x80
  4116e6:	2308      	movs	r3, #8
  4116e8:	e004      	b.n	4116f4 <draw_border+0x68>
        *d8 = *s8;
  4116ea:	f816 7b01 	ldrb.w	r7, [r6], #1
  4116ee:	f804 7b01 	strb.w	r7, [r4], #1
        len--;
  4116f2:	3b01      	subs	r3, #1
    while(len) {
  4116f4:	2b00      	cmp	r3, #0
  4116f6:	d1f8      	bne.n	4116ea <draw_border+0x5e>
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
  4116f8:	f8bd 7080 	ldrh.w	r7, [sp, #128]	; 0x80
  4116fc:	f9b2 6012 	ldrsh.w	r6, [r2, #18]
  411700:	b2b4      	uxth	r4, r6
  411702:	f014 0f04 	tst.w	r4, #4
  411706:	d039      	beq.n	41177c <draw_border+0xf0>
  411708:	8a13      	ldrh	r3, [r2, #16]
  41170a:	443b      	add	r3, r7
  41170c:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
  411710:	f8bd 7084 	ldrh.w	r7, [sp, #132]	; 0x84
  411714:	f014 0f08 	tst.w	r4, #8
  411718:	d036      	beq.n	411788 <draw_border+0xfc>
  41171a:	8a13      	ldrh	r3, [r2, #16]
  41171c:	1afb      	subs	r3, r7, r3
  41171e:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
  411722:	f8bd 7082 	ldrh.w	r7, [sp, #130]	; 0x82
  411726:	f014 0f02 	tst.w	r4, #2
  41172a:	d033      	beq.n	411794 <draw_border+0x108>
  41172c:	8a13      	ldrh	r3, [r2, #16]
  41172e:	443b      	add	r3, r7
  411730:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
  411734:	f8bd 7086 	ldrh.w	r7, [sp, #134]	; 0x86
  411738:	f014 0f01 	tst.w	r4, #1
  41173c:	d030      	beq.n	4117a0 <draw_border+0x114>
  41173e:	8a13      	ldrh	r3, [r2, #16]
  411740:	4692      	mov	sl, r2
  411742:	9105      	str	r1, [sp, #20]
  411744:	4604      	mov	r4, r0
  411746:	1afb      	subs	r3, r7, r3
  411748:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
    if(dsc->border_side == LV_BORDER_SIDE_FULL) {
  41174c:	2e0f      	cmp	r6, #15
  41174e:	d02d      	beq.n	4117ac <draw_border+0x120>
        lv_opa_t opa = dsc->border_opa;
  411750:	f892 9014 	ldrb.w	r9, [r2, #20]
        if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
  411754:	f1b9 0ffd 	cmp.w	r9, #253	; 0xfd
  411758:	d901      	bls.n	41175e <draw_border+0xd2>
  41175a:	f04f 09ff 	mov.w	r9, #255	; 0xff
        lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  41175e:	4b99      	ldr	r3, [pc, #612]	; (4119c4 <draw_border+0x338>)
  411760:	4798      	blx	r3
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  411762:	4b99      	ldr	r3, [pc, #612]	; (4119c8 <draw_border+0x33c>)
  411764:	4798      	blx	r3
  411766:	4680      	mov	r8, r0
        is_common = _lv_area_intersect(&draw_area, coords, clip);
  411768:	9a05      	ldr	r2, [sp, #20]
  41176a:	4621      	mov	r1, r4
  41176c:	a80e      	add	r0, sp, #56	; 0x38
  41176e:	4b97      	ldr	r3, [pc, #604]	; (4119cc <draw_border+0x340>)
  411770:	4798      	blx	r3
        if(is_common == false) return;
  411772:	2800      	cmp	r0, #0
  411774:	d12d      	bne.n	4117d2 <draw_border+0x146>
}
  411776:	b023      	add	sp, #140	; 0x8c
  411778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
  41177c:	8a13      	ldrh	r3, [r2, #16]
  41177e:	442b      	add	r3, r5
  411780:	b29b      	uxth	r3, r3
  411782:	425b      	negs	r3, r3
  411784:	b29b      	uxth	r3, r3
  411786:	e7c0      	b.n	41170a <draw_border+0x7e>
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
  411788:	8a13      	ldrh	r3, [r2, #16]
  41178a:	442b      	add	r3, r5
  41178c:	b29b      	uxth	r3, r3
  41178e:	425b      	negs	r3, r3
  411790:	b29b      	uxth	r3, r3
  411792:	e7c3      	b.n	41171c <draw_border+0x90>
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
  411794:	8a13      	ldrh	r3, [r2, #16]
  411796:	442b      	add	r3, r5
  411798:	b29b      	uxth	r3, r3
  41179a:	425b      	negs	r3, r3
  41179c:	b29b      	uxth	r3, r3
  41179e:	e7c6      	b.n	41172e <draw_border+0xa2>
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
  4117a0:	8a13      	ldrh	r3, [r2, #16]
  4117a2:	442b      	add	r3, r5
  4117a4:	b29b      	uxth	r3, r3
  4117a6:	425b      	negs	r3, r3
  4117a8:	b29b      	uxth	r3, r3
  4117aa:	e7c9      	b.n	411740 <draw_border+0xb4>
        draw_full_border(&area_inner, coords, clip, dsc->radius, false, dsc->border_color, dsc->border_opa,
  4117ac:	f9b2 3000 	ldrsh.w	r3, [r2]
  4117b0:	7d52      	ldrb	r2, [r2, #21]
  4117b2:	9203      	str	r2, [sp, #12]
  4117b4:	f89a 2014 	ldrb.w	r2, [sl, #20]
  4117b8:	9202      	str	r2, [sp, #8]
  4117ba:	f8ba 200e 	ldrh.w	r2, [sl, #14]
  4117be:	f8ad 2004 	strh.w	r2, [sp, #4]
  4117c2:	2200      	movs	r2, #0
  4117c4:	9200      	str	r2, [sp, #0]
  4117c6:	460a      	mov	r2, r1
  4117c8:	4601      	mov	r1, r0
  4117ca:	a820      	add	r0, sp, #128	; 0x80
  4117cc:	4c80      	ldr	r4, [pc, #512]	; (4119d0 <draw_border+0x344>)
  4117ce:	47a0      	blx	r4
  4117d0:	e7d1      	b.n	411776 <draw_border+0xea>
        draw_area.x1 -= disp_area->x1;
  4117d2:	f8b8 1010 	ldrh.w	r1, [r8, #16]
  4117d6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
  4117da:	1a5b      	subs	r3, r3, r1
  4117dc:	b29a      	uxth	r2, r3
  4117de:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        draw_area.y1 -= disp_area->y1;
  4117e2:	f8b8 0012 	ldrh.w	r0, [r8, #18]
  4117e6:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
  4117ea:	1a1b      	subs	r3, r3, r0
  4117ec:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
        draw_area.x2 -= disp_area->x1;
  4117f0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  4117f4:	1a5b      	subs	r3, r3, r1
  4117f6:	b29b      	uxth	r3, r3
  4117f8:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
        draw_area.y2 -= disp_area->y1;
  4117fc:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
  411800:	1a09      	subs	r1, r1, r0
  411802:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  411806:	1a9b      	subs	r3, r3, r2
  411808:	b29b      	uxth	r3, r3
  41180a:	3301      	adds	r3, #1
  41180c:	b21b      	sxth	r3, r3
  41180e:	9308      	str	r3, [sp, #32]
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
  411810:	9306      	str	r3, [sp, #24]
  411812:	4618      	mov	r0, r3
  411814:	4b6f      	ldr	r3, [pc, #444]	; (4119d4 <draw_border+0x348>)
  411816:	4798      	blx	r3
  411818:	4607      	mov	r7, r0
        if(rout > 0) {
  41181a:	2d00      	cmp	r5, #0
  41181c:	dd53      	ble.n	4118c6 <draw_border+0x23a>
            lv_draw_mask_radius_init(&mask_rout_param, coords, rout, false);
  41181e:	2300      	movs	r3, #0
  411820:	462a      	mov	r2, r5
  411822:	4621      	mov	r1, r4
  411824:	a812      	add	r0, sp, #72	; 0x48
  411826:	4e6c      	ldr	r6, [pc, #432]	; (4119d8 <draw_border+0x34c>)
  411828:	47b0      	blx	r6
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
  41182a:	2100      	movs	r1, #0
  41182c:	a812      	add	r0, sp, #72	; 0x48
  41182e:	4b6b      	ldr	r3, [pc, #428]	; (4119dc <draw_border+0x350>)
  411830:	4798      	blx	r3
  411832:	900a      	str	r0, [sp, #40]	; 0x28
        lv_draw_mask_radius_init(&mask_rin_param, &area_inner, rout - dsc->border_width, true);
  411834:	f8ba 2010 	ldrh.w	r2, [sl, #16]
  411838:	1aaa      	subs	r2, r5, r2
  41183a:	2301      	movs	r3, #1
  41183c:	b212      	sxth	r2, r2
  41183e:	a920      	add	r1, sp, #128	; 0x80
  411840:	a819      	add	r0, sp, #100	; 0x64
  411842:	4e65      	ldr	r6, [pc, #404]	; (4119d8 <draw_border+0x34c>)
  411844:	47b0      	blx	r6
        int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
  411846:	2100      	movs	r1, #0
  411848:	a819      	add	r0, sp, #100	; 0x64
  41184a:	4b64      	ldr	r3, [pc, #400]	; (4119dc <draw_border+0x350>)
  41184c:	4798      	blx	r3
  41184e:	900b      	str	r0, [sp, #44]	; 0x2c
        int32_t corner_size = LV_MATH_MAX(rout, dsc->border_width - 1);
  411850:	f9ba 3010 	ldrsh.w	r3, [sl, #16]
  411854:	3b01      	subs	r3, #1
  411856:	429d      	cmp	r5, r3
  411858:	bfb8      	it	lt
  41185a:	461d      	movlt	r5, r3
        lv_color_t color = dsc->border_color;
  41185c:	f8ba 300e 	ldrh.w	r3, [sl, #14]
  411860:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        lv_blend_mode_t blend_mode = dsc->border_blend_mode;
  411864:	f89a 3015 	ldrb.w	r3, [sl, #21]
  411868:	9307      	str	r3, [sp, #28]
        fill_area.x1 = coords->x1;
  41186a:	f9b4 3000 	ldrsh.w	r3, [r4]
  41186e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        fill_area.x2 = coords->x2;
  411872:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  411876:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
        fill_area.y1 = disp_area->y1 + draw_area.y1;
  41187a:	f8b8 3012 	ldrh.w	r3, [r8, #18]
  41187e:	f9bd 603a 	ldrsh.w	r6, [sp, #58]	; 0x3a
  411882:	fa13 f386 	uxtah	r3, r3, r6
  411886:	b21b      	sxth	r3, r3
  411888:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        fill_area.y2 = fill_area.y1;
  41188c:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
  411890:	f9ba 3012 	ldrsh.w	r3, [sl, #18]
  411894:	2b04      	cmp	r3, #4
  411896:	d01a      	beq.n	4118ce <draw_border+0x242>
        else if(dsc->border_side == LV_BORDER_SIDE_RIGHT) {
  411898:	2b08      	cmp	r3, #8
  41189a:	d01f      	beq.n	4118dc <draw_border+0x250>
        uint32_t buf_ofs = 0;
  41189c:	f04f 0b00 	mov.w	fp, #0
        volatile bool top_only = false;
  4118a0:	2200      	movs	r2, #0
  4118a2:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
        volatile bool bottom_only = false;
  4118a6:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
  4118aa:	2b02      	cmp	r3, #2
  4118ac:	d023      	beq.n	4118f6 <draw_border+0x26a>
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
  4118ae:	2b01      	cmp	r3, #1
  4118b0:	d025      	beq.n	4118fe <draw_border+0x272>
        if(dsc->border_side == (LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM)) {
  4118b2:	2b03      	cmp	r3, #3
  4118b4:	d027      	beq.n	411906 <draw_border+0x27a>
        volatile bool normal = !top_only && !bottom_only ? true : false;
  4118b6:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
  4118ba:	bb53      	cbnz	r3, 411912 <draw_border+0x286>
  4118bc:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
  4118c0:	b363      	cbz	r3, 41191c <draw_border+0x290>
  4118c2:	2300      	movs	r3, #0
  4118c4:	e026      	b.n	411914 <draw_border+0x288>
        int16_t mask_rout_id = LV_MASK_ID_INV;
  4118c6:	f04f 33ff 	mov.w	r3, #4294967295
  4118ca:	930a      	str	r3, [sp, #40]	; 0x28
  4118cc:	e7b2      	b.n	411834 <draw_border+0x1a8>
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
  4118ce:	8822      	ldrh	r2, [r4, #0]
  4118d0:	442a      	add	r2, r5
  4118d2:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
        uint32_t buf_ofs = 0;
  4118d6:	f04f 0b00 	mov.w	fp, #0
  4118da:	e7e1      	b.n	4118a0 <draw_border+0x214>
            fill_area.x1 = coords->x2 - corner_size;
  4118dc:	f8b4 b004 	ldrh.w	fp, [r4, #4]
  4118e0:	ebab 0b05 	sub.w	fp, fp, r5
  4118e4:	fa0f fb8b 	sxth.w	fp, fp
  4118e8:	f8ad b040 	strh.w	fp, [sp, #64]	; 0x40
            buf_ofs = fill_area.x1 - coords->x1;
  4118ec:	f9b4 2000 	ldrsh.w	r2, [r4]
  4118f0:	ebab 0b02 	sub.w	fp, fp, r2
  4118f4:	e7d4      	b.n	4118a0 <draw_border+0x214>
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
  4118f6:	2201      	movs	r2, #1
  4118f8:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
  4118fc:	e7d7      	b.n	4118ae <draw_border+0x222>
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
  4118fe:	2201      	movs	r2, #1
  411900:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
  411904:	e7d5      	b.n	4118b2 <draw_border+0x226>
            top_only = true;
  411906:	2301      	movs	r3, #1
  411908:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
            bottom_only = true;
  41190c:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  411910:	e7d1      	b.n	4118b6 <draw_border+0x22a>
        volatile bool normal = !top_only && !bottom_only ? true : false;
  411912:	2300      	movs	r3, #0
  411914:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  411918:	46a2      	mov	sl, r4
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  41191a:	e02b      	b.n	411974 <draw_border+0x2e8>
        volatile bool normal = !top_only && !bottom_only ? true : false;
  41191c:	2301      	movs	r3, #1
  41191e:	e7f9      	b.n	411914 <draw_border+0x288>
                _lv_memset_ff(mask_buf, draw_area_w);
  411920:	9906      	ldr	r1, [sp, #24]
  411922:	4638      	mov	r0, r7
  411924:	4b2e      	ldr	r3, [pc, #184]	; (4119e0 <draw_border+0x354>)
  411926:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  411928:	f8b8 1010 	ldrh.w	r1, [r8, #16]
  41192c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
  411930:	4419      	add	r1, r3
  411932:	f8b8 2012 	ldrh.w	r2, [r8, #18]
  411936:	4432      	add	r2, r6
  411938:	9b08      	ldr	r3, [sp, #32]
  41193a:	b212      	sxth	r2, r2
  41193c:	b209      	sxth	r1, r1
  41193e:	4638      	mov	r0, r7
  411940:	4c28      	ldr	r4, [pc, #160]	; (4119e4 <draw_border+0x358>)
  411942:	47a0      	blx	r4
                _lv_blend_fill(clip, &fill_area, color, mask_buf + buf_ofs, mask_res, opa, blend_mode);
  411944:	9b07      	ldr	r3, [sp, #28]
  411946:	9302      	str	r3, [sp, #8]
  411948:	f8cd 9004 	str.w	r9, [sp, #4]
  41194c:	9000      	str	r0, [sp, #0]
  41194e:	eb07 030b 	add.w	r3, r7, fp
  411952:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
  411956:	a910      	add	r1, sp, #64	; 0x40
  411958:	9805      	ldr	r0, [sp, #20]
  41195a:	4c23      	ldr	r4, [pc, #140]	; (4119e8 <draw_border+0x35c>)
  41195c:	47a0      	blx	r4
            fill_area.y1++;
  41195e:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
  411962:	3301      	adds	r3, #1
  411964:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area.y2++;
  411968:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  41196c:	3301      	adds	r3, #1
  41196e:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  411972:	3601      	adds	r6, #1
  411974:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
  411978:	429e      	cmp	r6, r3
  41197a:	dc19      	bgt.n	4119b0 <draw_border+0x324>
            if(normal ||
  41197c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  411980:	2b00      	cmp	r3, #0
  411982:	d1cd      	bne.n	411920 <draw_border+0x294>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
  411984:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
            if(normal ||
  411988:	b133      	cbz	r3, 411998 <draw_border+0x30c>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
  41198a:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
  41198e:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
  411992:	442b      	add	r3, r5
  411994:	429a      	cmp	r2, r3
  411996:	ddc3      	ble.n	411920 <draw_border+0x294>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
  411998:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
  41199c:	2b00      	cmp	r3, #0
  41199e:	d0de      	beq.n	41195e <draw_border+0x2d2>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
  4119a0:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
  4119a4:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
  4119a8:	1b5b      	subs	r3, r3, r5
  4119aa:	429a      	cmp	r2, r3
  4119ac:	dbd7      	blt.n	41195e <draw_border+0x2d2>
  4119ae:	e7b7      	b.n	411920 <draw_border+0x294>
        lv_draw_mask_remove_id(mask_rin_id);
  4119b0:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4119b2:	4c0e      	ldr	r4, [pc, #56]	; (4119ec <draw_border+0x360>)
  4119b4:	47a0      	blx	r4
        lv_draw_mask_remove_id(mask_rout_id);
  4119b6:	980a      	ldr	r0, [sp, #40]	; 0x28
  4119b8:	47a0      	blx	r4
        _lv_mem_buf_release(mask_buf);
  4119ba:	4638      	mov	r0, r7
  4119bc:	4b0c      	ldr	r3, [pc, #48]	; (4119f0 <draw_border+0x364>)
  4119be:	4798      	blx	r3
  4119c0:	e6d9      	b.n	411776 <draw_border+0xea>
  4119c2:	4770      	bx	lr
  4119c4:	00409851 	.word	0x00409851
  4119c8:	00414ea5 	.word	0x00414ea5
  4119cc:	00415663 	.word	0x00415663
  4119d0:	004110ad 	.word	0x004110ad
  4119d4:	00416a81 	.word	0x00416a81
  4119d8:	0040fedd 	.word	0x0040fedd
  4119dc:	0040fc61 	.word	0x0040fc61
  4119e0:	00416c65 	.word	0x00416c65
  4119e4:	0040fc95 	.word	0x0040fc95
  4119e8:	0040c921 	.word	0x0040c921
  4119ec:	0040fce5 	.word	0x0040fce5
  4119f0:	00416831 	.word	0x00416831

004119f4 <draw_pattern>:
    if(dsc->pattern_image == NULL) return;
  4119f4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  4119f6:	2b00      	cmp	r3, #0
  4119f8:	f000 814e 	beq.w	411c98 <draw_pattern+0x2a4>
{
  4119fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411a00:	b09f      	sub	sp, #124	; 0x7c
    if(dsc->pattern_opa <= LV_OPA_MIN) return;
  411a02:	f892 4036 	ldrb.w	r4, [r2, #54]	; 0x36
  411a06:	2c02      	cmp	r4, #2
  411a08:	d802      	bhi.n	411a10 <draw_pattern+0x1c>
}
  411a0a:	b01f      	add	sp, #124	; 0x7c
  411a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411a10:	4614      	mov	r4, r2
  411a12:	460e      	mov	r6, r1
  411a14:	4605      	mov	r5, r0
    lv_img_src_t src_type = lv_img_src_get_type(dsc->pattern_image);
  411a16:	4618      	mov	r0, r3
  411a18:	4ba0      	ldr	r3, [pc, #640]	; (411c9c <draw_pattern+0x2a8>)
  411a1a:	4798      	blx	r3
  411a1c:	4680      	mov	r8, r0
    if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_VARIABLE) {
  411a1e:	2801      	cmp	r0, #1
  411a20:	d908      	bls.n	411a34 <draw_pattern+0x40>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
  411a22:	2802      	cmp	r0, #2
  411a24:	d022      	beq.n	411a6c <draw_pattern+0x78>
        lv_draw_img(coords, clip, NULL, NULL);
  411a26:	2300      	movs	r3, #0
  411a28:	461a      	mov	r2, r3
  411a2a:	4631      	mov	r1, r6
  411a2c:	4628      	mov	r0, r5
  411a2e:	4c9c      	ldr	r4, [pc, #624]	; (411ca0 <draw_pattern+0x2ac>)
  411a30:	47a0      	blx	r4
        return;
  411a32:	e7ea      	b.n	411a0a <draw_pattern+0x16>
        lv_res_t res = lv_img_decoder_get_info(dsc->pattern_image, &header);
  411a34:	a907      	add	r1, sp, #28
  411a36:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  411a38:	4b9a      	ldr	r3, [pc, #616]	; (411ca4 <draw_pattern+0x2b0>)
  411a3a:	4798      	blx	r3
        if(res != LV_RES_OK) {
  411a3c:	2801      	cmp	r0, #1
  411a3e:	d1e4      	bne.n	411a0a <draw_pattern+0x16>
        img_w = header.w;
  411a40:	9b07      	ldr	r3, [sp, #28]
  411a42:	f3c3 2b8a 	ubfx	fp, r3, #10, #11
        img_h = header.h;
  411a46:	f8bd a01e 	ldrh.w	sl, [sp, #30]
  411a4a:	f3ca 1a4a 	ubfx	sl, sl, #5, #11
        lv_draw_img_dsc_init(&img_dsc);
  411a4e:	a81a      	add	r0, sp, #104	; 0x68
  411a50:	4b95      	ldr	r3, [pc, #596]	; (411ca8 <draw_pattern+0x2b4>)
  411a52:	4798      	blx	r3
        img_dsc.opa = dsc->pattern_opa;
  411a54:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
  411a58:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
        img_dsc.recolor_opa = dsc->pattern_recolor_opa;
  411a5c:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
  411a60:	f88d 3072 	strb.w	r3, [sp, #114]	; 0x72
        img_dsc.recolor = dsc->pattern_recolor;
  411a64:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
  411a66:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
  411a6a:	e01d      	b.n	411aa8 <draw_pattern+0xb4>
        lv_draw_label_dsc_init(&label_dsc);
  411a6c:	a811      	add	r0, sp, #68	; 0x44
  411a6e:	4b8f      	ldr	r3, [pc, #572]	; (411cac <draw_pattern+0x2b8>)
  411a70:	4798      	blx	r3
        label_dsc.color = dsc->pattern_recolor;
  411a72:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
  411a74:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
        label_dsc.font = dsc->pattern_font;
  411a78:	6b22      	ldr	r2, [r4, #48]	; 0x30
  411a7a:	9213      	str	r2, [sp, #76]	; 0x4c
        label_dsc.opa = dsc->pattern_opa;
  411a7c:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
  411a80:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
        _lv_txt_get_size(&s, dsc->pattern_image, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
  411a84:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
  411a88:	2100      	movs	r1, #0
  411a8a:	9102      	str	r1, [sp, #8]
  411a8c:	f647 4118 	movw	r1, #31768	; 0x7c18
  411a90:	9101      	str	r1, [sp, #4]
  411a92:	f9bd 1052 	ldrsh.w	r1, [sp, #82]	; 0x52
  411a96:	9100      	str	r1, [sp, #0]
  411a98:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  411a9a:	a807      	add	r0, sp, #28
  411a9c:	4f84      	ldr	r7, [pc, #528]	; (411cb0 <draw_pattern+0x2bc>)
  411a9e:	47b8      	blx	r7
        img_w = s.x;
  411aa0:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
        img_h = s.y;
  411aa4:	f9bd a01e 	ldrsh.w	sl, [sp, #30]
    if(img_w == 0 || img_h == 0) return;
  411aa8:	f1ba 0f00 	cmp.w	sl, #0
  411aac:	bf18      	it	ne
  411aae:	f1bb 0f00 	cmpne.w	fp, #0
  411ab2:	d0aa      	beq.n	411a0a <draw_pattern+0x16>
    if(dsc->pattern_repeat) {
  411ab4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
  411ab8:	f013 0f01 	tst.w	r3, #1
  411abc:	d148      	bne.n	411b50 <draw_pattern+0x15c>
  411abe:	88a8      	ldrh	r0, [r5, #4]
  411ac0:	882b      	ldrh	r3, [r5, #0]
  411ac2:	1ac0      	subs	r0, r0, r3
  411ac4:	b280      	uxth	r0, r0
  411ac6:	3001      	adds	r0, #1
  411ac8:	b200      	sxth	r0, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  411aca:	88ea      	ldrh	r2, [r5, #6]
  411acc:	8869      	ldrh	r1, [r5, #2]
  411ace:	1a52      	subs	r2, r2, r1
  411ad0:	b292      	uxth	r2, r2
  411ad2:	3201      	adds	r2, #1
  411ad4:	b212      	sxth	r2, r2
        coords_tmp.x1 = coords->x1 + (obj_w - img_w) / 2;
  411ad6:	ebb0 000b 	subs.w	r0, r0, fp
  411ada:	f100 80ba 	bmi.w	411c52 <draw_pattern+0x25e>
  411ade:	eb03 0360 	add.w	r3, r3, r0, asr #1
  411ae2:	b29b      	uxth	r3, r3
  411ae4:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
        coords_tmp.y1 = coords->y1 + (obj_h - img_h) / 2;
  411ae8:	eba2 020a 	sub.w	r2, r2, sl
  411aec:	4610      	mov	r0, r2
  411aee:	2a00      	cmp	r2, #0
  411af0:	f2c0 80b1 	blt.w	411c56 <draw_pattern+0x262>
  411af4:	eb01 0160 	add.w	r1, r1, r0, asr #1
  411af8:	b289      	uxth	r1, r1
  411afa:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
        coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
  411afe:	445b      	add	r3, fp
  411b00:	b29b      	uxth	r3, r3
  411b02:	3b01      	subs	r3, #1
  411b04:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
  411b08:	eb01 030a 	add.w	r3, r1, sl
  411b0c:	b29b      	uxth	r3, r3
  411b0e:	3b01      	subs	r3, #1
  411b10:	b29b      	uxth	r3, r3
  411b12:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        if(src_type == LV_IMG_SRC_SYMBOL) {
  411b16:	f1b8 0f02 	cmp.w	r8, #2
  411b1a:	f000 809e 	beq.w	411c5a <draw_pattern+0x266>
        if(_lv_area_is_in(&coords_tmp, coords, dsc->radius) == false) {
  411b1e:	f9b4 2000 	ldrsh.w	r2, [r4]
  411b22:	4629      	mov	r1, r5
  411b24:	a80f      	add	r0, sp, #60	; 0x3c
  411b26:	4b63      	ldr	r3, [pc, #396]	; (411cb4 <draw_pattern+0x2c0>)
  411b28:	4798      	blx	r3
  411b2a:	2800      	cmp	r0, #0
  411b2c:	f000 809e 	beq.w	411c6c <draw_pattern+0x278>
        int16_t radius_mask_id = LV_MASK_ID_INV;
  411b30:	f04f 35ff 	mov.w	r5, #4294967295
        if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
  411b34:	f1b8 0f02 	cmp.w	r8, #2
  411b38:	f000 80a5 	beq.w	411c86 <draw_pattern+0x292>
        else lv_draw_img(&coords_tmp, clip, dsc->pattern_image, &img_dsc);
  411b3c:	ab1a      	add	r3, sp, #104	; 0x68
  411b3e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  411b40:	4631      	mov	r1, r6
  411b42:	a80f      	add	r0, sp, #60	; 0x3c
  411b44:	4c56      	ldr	r4, [pc, #344]	; (411ca0 <draw_pattern+0x2ac>)
  411b46:	47a0      	blx	r4
        lv_draw_mask_remove_id(radius_mask_id);
  411b48:	4628      	mov	r0, r5
  411b4a:	4b5b      	ldr	r3, [pc, #364]	; (411cb8 <draw_pattern+0x2c4>)
  411b4c:	4798      	blx	r3
  411b4e:	e75c      	b.n	411a0a <draw_pattern+0x16>
        lv_draw_mask_radius_init(&radius_mask_param, coords, dsc->radius, false);
  411b50:	2300      	movs	r3, #0
  411b52:	f9b4 2000 	ldrsh.w	r2, [r4]
  411b56:	4629      	mov	r1, r5
  411b58:	a808      	add	r0, sp, #32
  411b5a:	4f58      	ldr	r7, [pc, #352]	; (411cbc <draw_pattern+0x2c8>)
  411b5c:	47b8      	blx	r7
        int16_t radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
  411b5e:	2100      	movs	r1, #0
  411b60:	a808      	add	r0, sp, #32
  411b62:	4b57      	ldr	r3, [pc, #348]	; (411cc0 <draw_pattern+0x2cc>)
  411b64:	4798      	blx	r3
  411b66:	9005      	str	r0, [sp, #20]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  411b68:	88ab      	ldrh	r3, [r5, #4]
  411b6a:	882a      	ldrh	r2, [r5, #0]
  411b6c:	1a9b      	subs	r3, r3, r2
  411b6e:	b29b      	uxth	r3, r3
  411b70:	3301      	adds	r3, #1
  411b72:	b21b      	sxth	r3, r3
        int32_t ofs_x = (lv_area_get_width(coords) - (lv_area_get_width(coords) / img_w) * img_w) / 2;
  411b74:	fb93 f2fb 	sdiv	r2, r3, fp
  411b78:	fb02 331b 	mls	r3, r2, fp, r3
  411b7c:	2b00      	cmp	r3, #0
  411b7e:	db1e      	blt.n	411bbe <draw_pattern+0x1ca>
  411b80:	105b      	asrs	r3, r3, #1
  411b82:	4618      	mov	r0, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  411b84:	88ea      	ldrh	r2, [r5, #6]
  411b86:	886b      	ldrh	r3, [r5, #2]
  411b88:	1ad2      	subs	r2, r2, r3
  411b8a:	b292      	uxth	r2, r2
  411b8c:	3201      	adds	r2, #1
  411b8e:	b212      	sxth	r2, r2
        int32_t ofs_y = (lv_area_get_height(coords) - (lv_area_get_height(coords) / img_h) * img_h) / 2;
  411b90:	fb92 f1fa 	sdiv	r1, r2, sl
  411b94:	fb01 221a 	mls	r2, r1, sl, r2
  411b98:	2a00      	cmp	r2, #0
  411b9a:	db12      	blt.n	411bc2 <draw_pattern+0x1ce>
        coords_tmp.y1 = coords->y1 - ofs_y;
  411b9c:	eba3 0362 	sub.w	r3, r3, r2, asr #1
  411ba0:	b29b      	uxth	r3, r3
  411ba2:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
  411ba6:	fa1f fa8a 	uxth.w	sl, sl
  411baa:	4453      	add	r3, sl
  411bac:	b29b      	uxth	r3, r3
  411bae:	3b01      	subs	r3, #1
  411bb0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
  411bb4:	f8cd b010 	str.w	fp, [sp, #16]
  411bb8:	4683      	mov	fp, r0
  411bba:	46a1      	mov	r9, r4
        for(; coords_tmp.y1 <= coords->y2; coords_tmp.y1 += img_h, coords_tmp.y2 += img_h) {
  411bbc:	e031      	b.n	411c22 <draw_pattern+0x22e>
        int32_t ofs_x = (lv_area_get_width(coords) - (lv_area_get_width(coords) / img_w) * img_w) / 2;
  411bbe:	3301      	adds	r3, #1
  411bc0:	e7de      	b.n	411b80 <draw_pattern+0x18c>
        int32_t ofs_y = (lv_area_get_height(coords) - (lv_area_get_height(coords) / img_h) * img_h) / 2;
  411bc2:	3201      	adds	r2, #1
  411bc4:	e7ea      	b.n	411b9c <draw_pattern+0x1a8>
                if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
  411bc6:	2300      	movs	r3, #0
  411bc8:	9300      	str	r3, [sp, #0]
  411bca:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
  411bce:	aa11      	add	r2, sp, #68	; 0x44
  411bd0:	4631      	mov	r1, r6
  411bd2:	a80f      	add	r0, sp, #60	; 0x3c
  411bd4:	4c3b      	ldr	r4, [pc, #236]	; (411cc4 <draw_pattern+0x2d0>)
  411bd6:	47a0      	blx	r4
            for(; coords_tmp.x1 <= coords->x2; coords_tmp.x1 += img_w, coords_tmp.x2 += img_w) {
  411bd8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  411bdc:	443b      	add	r3, r7
  411bde:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
  411be2:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
  411be6:	443b      	add	r3, r7
  411be8:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
  411bec:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
  411bf0:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  411bf4:	429a      	cmp	r2, r3
  411bf6:	dc0a      	bgt.n	411c0e <draw_pattern+0x21a>
                if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
  411bf8:	f1b8 0f02 	cmp.w	r8, #2
  411bfc:	d0e3      	beq.n	411bc6 <draw_pattern+0x1d2>
                else lv_draw_img(&coords_tmp, clip, dsc->pattern_image, &img_dsc);
  411bfe:	ab1a      	add	r3, sp, #104	; 0x68
  411c00:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
  411c04:	4631      	mov	r1, r6
  411c06:	a80f      	add	r0, sp, #60	; 0x3c
  411c08:	4c25      	ldr	r4, [pc, #148]	; (411ca0 <draw_pattern+0x2ac>)
  411c0a:	47a0      	blx	r4
  411c0c:	e7e4      	b.n	411bd8 <draw_pattern+0x1e4>
        for(; coords_tmp.y1 <= coords->y2; coords_tmp.y1 += img_h, coords_tmp.y2 += img_h) {
  411c0e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
  411c12:	4453      	add	r3, sl
  411c14:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  411c18:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
  411c1c:	4453      	add	r3, sl
  411c1e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
  411c22:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
  411c26:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  411c2a:	429a      	cmp	r2, r3
  411c2c:	dc0d      	bgt.n	411c4a <draw_pattern+0x256>
            coords_tmp.x1 = coords->x1 - ofs_x;
  411c2e:	882b      	ldrh	r3, [r5, #0]
  411c30:	eba3 030b 	sub.w	r3, r3, fp
  411c34:	b29b      	uxth	r3, r3
  411c36:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
            coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
  411c3a:	f8bd 7010 	ldrh.w	r7, [sp, #16]
  411c3e:	443b      	add	r3, r7
  411c40:	b29b      	uxth	r3, r3
  411c42:	3b01      	subs	r3, #1
  411c44:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            for(; coords_tmp.x1 <= coords->x2; coords_tmp.x1 += img_w, coords_tmp.x2 += img_w) {
  411c48:	e7d0      	b.n	411bec <draw_pattern+0x1f8>
        lv_draw_mask_remove_id(radius_mask_id);
  411c4a:	9805      	ldr	r0, [sp, #20]
  411c4c:	4b1a      	ldr	r3, [pc, #104]	; (411cb8 <draw_pattern+0x2c4>)
  411c4e:	4798      	blx	r3
  411c50:	e6db      	b.n	411a0a <draw_pattern+0x16>
        coords_tmp.x1 = coords->x1 + (obj_w - img_w) / 2;
  411c52:	3001      	adds	r0, #1
  411c54:	e743      	b.n	411ade <draw_pattern+0xea>
        coords_tmp.y1 = coords->y1 + (obj_h - img_h) / 2;
  411c56:	1c50      	adds	r0, r2, #1
  411c58:	e74c      	b.n	411af4 <draw_pattern+0x100>
            coords_tmp.y1 += y_corr;
  411c5a:	f002 0201 	and.w	r2, r2, #1
  411c5e:	4411      	add	r1, r2
  411c60:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
            coords_tmp.y2 += y_corr;
  411c64:	4413      	add	r3, r2
  411c66:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
  411c6a:	e758      	b.n	411b1e <draw_pattern+0x12a>
            lv_draw_mask_radius_init(&radius_mask_param, coords, dsc->radius, false);
  411c6c:	2300      	movs	r3, #0
  411c6e:	f9b4 2000 	ldrsh.w	r2, [r4]
  411c72:	4629      	mov	r1, r5
  411c74:	a808      	add	r0, sp, #32
  411c76:	4d11      	ldr	r5, [pc, #68]	; (411cbc <draw_pattern+0x2c8>)
  411c78:	47a8      	blx	r5
            radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
  411c7a:	2100      	movs	r1, #0
  411c7c:	a808      	add	r0, sp, #32
  411c7e:	4b10      	ldr	r3, [pc, #64]	; (411cc0 <draw_pattern+0x2cc>)
  411c80:	4798      	blx	r3
  411c82:	4605      	mov	r5, r0
  411c84:	e756      	b.n	411b34 <draw_pattern+0x140>
        if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
  411c86:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  411c88:	2200      	movs	r2, #0
  411c8a:	9200      	str	r2, [sp, #0]
  411c8c:	aa11      	add	r2, sp, #68	; 0x44
  411c8e:	4631      	mov	r1, r6
  411c90:	a80f      	add	r0, sp, #60	; 0x3c
  411c92:	4c0c      	ldr	r4, [pc, #48]	; (411cc4 <draw_pattern+0x2d0>)
  411c94:	47a0      	blx	r4
  411c96:	e757      	b.n	411b48 <draw_pattern+0x154>
  411c98:	4770      	bx	lr
  411c9a:	bf00      	nop
  411c9c:	0040d6dd 	.word	0x0040d6dd
  411ca0:	0040d69d 	.word	0x0040d69d
  411ca4:	004139b9 	.word	0x004139b9
  411ca8:	0040d3f1 	.word	0x0040d3f1
  411cac:	0040df85 	.word	0x0040df85
  411cb0:	00417fa5 	.word	0x00417fa5
  411cb4:	004158d9 	.word	0x004158d9
  411cb8:	0040fce5 	.word	0x0040fce5
  411cbc:	0040fedd 	.word	0x0040fedd
  411cc0:	0040fc61 	.word	0x0040fc61
  411cc4:	0040dfcd 	.word	0x0040dfcd

00411cc8 <draw_value_str>:
{
  411cc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  411ccc:	b093      	sub	sp, #76	; 0x4c
    if(dsc->value_str == NULL) return;
  411cce:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
  411cd0:	b11d      	cbz	r5, 411cda <draw_value_str+0x12>
    if(dsc->value_opa <= LV_OPA_MIN) return;
  411cd2:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
  411cd6:	2b02      	cmp	r3, #2
  411cd8:	d802      	bhi.n	411ce0 <draw_value_str+0x18>
}
  411cda:	b013      	add	sp, #76	; 0x4c
  411cdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  411ce0:	4614      	mov	r4, r2
  411ce2:	460e      	mov	r6, r1
  411ce4:	4680      	mov	r8, r0
    _lv_txt_get_size(&s, str, dsc->value_font, dsc->value_letter_space, dsc->value_line_space, LV_COORD_MAX,
  411ce6:	f9b2 304c 	ldrsh.w	r3, [r2, #76]	; 0x4c
  411cea:	2700      	movs	r7, #0
  411cec:	9702      	str	r7, [sp, #8]
  411cee:	f647 4218 	movw	r2, #31768	; 0x7c18
  411cf2:	9201      	str	r2, [sp, #4]
  411cf4:	f9b4 204e 	ldrsh.w	r2, [r4, #78]	; 0x4e
  411cf8:	9200      	str	r2, [sp, #0]
  411cfa:	6c22      	ldr	r2, [r4, #64]	; 0x40
  411cfc:	4629      	mov	r1, r5
  411cfe:	a811      	add	r0, sp, #68	; 0x44
  411d00:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 411db4 <draw_value_str+0xec>
  411d04:	47c8      	blx	r9
    value_area.x1 = 0;
  411d06:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
    value_area.y1 = 0;
  411d0a:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
    value_area.x2 = s.x - 1;
  411d0e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
  411d12:	3b01      	subs	r3, #1
  411d14:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
    value_area.y2 = s.y - 1;
  411d18:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
  411d1c:	3b01      	subs	r3, #1
  411d1e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    _lv_area_align(coords, &value_area, dsc->value_align, &p_align);
  411d22:	ab0e      	add	r3, sp, #56	; 0x38
  411d24:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
  411d28:	a90f      	add	r1, sp, #60	; 0x3c
  411d2a:	4640      	mov	r0, r8
  411d2c:	f8df 8088 	ldr.w	r8, [pc, #136]	; 411db8 <draw_value_str+0xf0>
  411d30:	47c0      	blx	r8
    value_area.x1 += p_align.x + dsc->value_ofs_x;
  411d32:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
  411d36:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
  411d3a:	441a      	add	r2, r3
  411d3c:	b292      	uxth	r2, r2
  411d3e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  411d42:	4413      	add	r3, r2
  411d44:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    value_area.y1 += p_align.y + dsc->value_ofs_y;
  411d48:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
  411d4c:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
  411d50:	440b      	add	r3, r1
  411d52:	b29b      	uxth	r3, r3
  411d54:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
  411d58:	4419      	add	r1, r3
  411d5a:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
    value_area.x2 += p_align.x + dsc->value_ofs_x;
  411d5e:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
  411d62:	440a      	add	r2, r1
  411d64:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
    value_area.y2 += p_align.y + dsc->value_ofs_y;
  411d68:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
  411d6c:	4413      	add	r3, r2
  411d6e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    lv_draw_label_dsc_init(&label_dsc);
  411d72:	a805      	add	r0, sp, #20
  411d74:	4b0d      	ldr	r3, [pc, #52]	; (411dac <draw_value_str+0xe4>)
  411d76:	4798      	blx	r3
    label_dsc.font = dsc->value_font;
  411d78:	6c23      	ldr	r3, [r4, #64]	; 0x40
  411d7a:	9307      	str	r3, [sp, #28]
    label_dsc.letter_space = dsc->value_letter_space;
  411d7c:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
  411d80:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    label_dsc.line_space = dsc->value_line_space;
  411d84:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	; 0x4e
  411d88:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    label_dsc.color = dsc->value_color;
  411d8c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  411d90:	f8ad 3014 	strh.w	r3, [sp, #20]
    label_dsc.opa = dsc->value_opa;
  411d94:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  411d98:	f88d 3020 	strb.w	r3, [sp, #32]
    lv_draw_label(&value_area, clip, &label_dsc, str, NULL);
  411d9c:	9700      	str	r7, [sp, #0]
  411d9e:	462b      	mov	r3, r5
  411da0:	aa05      	add	r2, sp, #20
  411da2:	4631      	mov	r1, r6
  411da4:	a80f      	add	r0, sp, #60	; 0x3c
  411da6:	4c02      	ldr	r4, [pc, #8]	; (411db0 <draw_value_str+0xe8>)
  411da8:	47a0      	blx	r4
  411daa:	e796      	b.n	411cda <draw_value_str+0x12>
  411dac:	0040df85 	.word	0x0040df85
  411db0:	0040dfcd 	.word	0x0040dfcd
  411db4:	00417fa5 	.word	0x00417fa5
  411db8:	004159a1 	.word	0x004159a1

00411dbc <draw_bg>:
    if(dsc->bg_opa <= LV_OPA_MIN) return;
  411dbc:	7b13      	ldrb	r3, [r2, #12]
  411dbe:	2b02      	cmp	r3, #2
  411dc0:	f240 839c 	bls.w	4124fc <draw_bg+0x740>
{
  411dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411dc8:	b0a5      	sub	sp, #148	; 0x94
  411dca:	ad22      	add	r5, sp, #136	; 0x88
  411dcc:	2308      	movs	r3, #8
  411dce:	e004      	b.n	411dda <draw_bg+0x1e>
        *d8 = *s8;
  411dd0:	f810 6b01 	ldrb.w	r6, [r0], #1
  411dd4:	f805 6b01 	strb.w	r6, [r5], #1
        len--;
  411dd8:	3b01      	subs	r3, #1
    while(len) {
  411dda:	2b00      	cmp	r3, #0
  411ddc:	d1f8      	bne.n	411dd0 <draw_bg+0x14>
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
  411dde:	f9b2 3010 	ldrsh.w	r3, [r2, #16]
  411de2:	2b01      	cmp	r3, #1
  411de4:	dd22      	ble.n	411e2c <draw_bg+0x70>
  411de6:	7d13      	ldrb	r3, [r2, #20]
  411de8:	2bfc      	cmp	r3, #252	; 0xfc
  411dea:	d91f      	bls.n	411e2c <draw_bg+0x70>
  411dec:	f9b2 3000 	ldrsh.w	r3, [r2]
  411df0:	b1e3      	cbz	r3, 411e2c <draw_bg+0x70>
        coords_bg.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
  411df2:	8a53      	ldrh	r3, [r2, #18]
  411df4:	f3c3 0080 	ubfx	r0, r3, #2, #1
  411df8:	f8bd 5088 	ldrh.w	r5, [sp, #136]	; 0x88
  411dfc:	4428      	add	r0, r5
  411dfe:	f8ad 0088 	strh.w	r0, [sp, #136]	; 0x88
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
  411e02:	f3c3 0040 	ubfx	r0, r3, #1, #1
  411e06:	f8bd 508a 	ldrh.w	r5, [sp, #138]	; 0x8a
  411e0a:	4428      	add	r0, r5
  411e0c:	f8ad 008a 	strh.w	r0, [sp, #138]	; 0x8a
        coords_bg.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
  411e10:	f3c3 05c0 	ubfx	r5, r3, #3, #1
  411e14:	f8bd 008c 	ldrh.w	r0, [sp, #140]	; 0x8c
  411e18:	1b40      	subs	r0, r0, r5
  411e1a:	f8ad 008c 	strh.w	r0, [sp, #140]	; 0x8c
        coords_bg.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
  411e1e:	f003 0301 	and.w	r3, r3, #1
  411e22:	f8bd 008e 	ldrh.w	r0, [sp, #142]	; 0x8e
  411e26:	1ac3      	subs	r3, r0, r3
  411e28:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    lv_opa_t opa = dsc->bg_opa;
  411e2c:	7b13      	ldrb	r3, [r2, #12]
  411e2e:	9305      	str	r3, [sp, #20]
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
  411e30:	2bfd      	cmp	r3, #253	; 0xfd
  411e32:	d901      	bls.n	411e38 <draw_bg+0x7c>
  411e34:	23ff      	movs	r3, #255	; 0xff
  411e36:	9305      	str	r3, [sp, #20]
  411e38:	4692      	mov	sl, r2
  411e3a:	460d      	mov	r5, r1
  411e3c:	910a      	str	r1, [sp, #40]	; 0x28
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  411e3e:	4bad      	ldr	r3, [pc, #692]	; (4120f4 <draw_bg+0x338>)
  411e40:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  411e42:	4bad      	ldr	r3, [pc, #692]	; (4120f8 <draw_bg+0x33c>)
  411e44:	4798      	blx	r3
  411e46:	4607      	mov	r7, r0
    is_common = _lv_area_intersect(&draw_area, &coords_bg, clip);
  411e48:	462a      	mov	r2, r5
  411e4a:	a922      	add	r1, sp, #136	; 0x88
  411e4c:	a820      	add	r0, sp, #128	; 0x80
  411e4e:	4bab      	ldr	r3, [pc, #684]	; (4120fc <draw_bg+0x340>)
  411e50:	4798      	blx	r3
    if(is_common == false) return;
  411e52:	9006      	str	r0, [sp, #24]
  411e54:	b910      	cbnz	r0, 411e5c <draw_bg+0xa0>
}
  411e56:	b025      	add	sp, #148	; 0x94
  411e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    draw_area.x1 -= disp_area->x1;
  411e5c:	8a39      	ldrh	r1, [r7, #16]
  411e5e:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
  411e62:	1a5b      	subs	r3, r3, r1
  411e64:	b29a      	uxth	r2, r3
  411e66:	f8ad 2080 	strh.w	r2, [sp, #128]	; 0x80
    draw_area.y1 -= disp_area->y1;
  411e6a:	8a7d      	ldrh	r5, [r7, #18]
  411e6c:	f8bd 0082 	ldrh.w	r0, [sp, #130]	; 0x82
  411e70:	1b40      	subs	r0, r0, r5
  411e72:	f8ad 0082 	strh.w	r0, [sp, #130]	; 0x82
    draw_area.x2 -= disp_area->x1;
  411e76:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
  411e7a:	1a5b      	subs	r3, r3, r1
  411e7c:	b29b      	uxth	r3, r3
  411e7e:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
    draw_area.y2 -= disp_area->y1;
  411e82:	f8bd 1086 	ldrh.w	r1, [sp, #134]	; 0x86
  411e86:	1b49      	subs	r1, r1, r5
  411e88:	f8ad 1086 	strh.w	r1, [sp, #134]	; 0x86
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  411e8c:	1a9b      	subs	r3, r3, r2
  411e8e:	b29b      	uxth	r3, r3
  411e90:	3301      	adds	r3, #1
  411e92:	b21b      	sxth	r3, r3
  411e94:	930d      	str	r3, [sp, #52]	; 0x34
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
  411e96:	930c      	str	r3, [sp, #48]	; 0x30
  411e98:	4618      	mov	r0, r3
  411e9a:	4b99      	ldr	r3, [pc, #612]	; (412100 <draw_bg+0x344>)
  411e9c:	4798      	blx	r3
  411e9e:	9008      	str	r0, [sp, #32]
    lv_grad_dir_t grad_dir = dsc->bg_grad_dir;
  411ea0:	f89a 8006 	ldrb.w	r8, [sl, #6]
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
  411ea4:	f8ba 2002 	ldrh.w	r2, [sl, #2]
  411ea8:	f8ba 3004 	ldrh.w	r3, [sl, #4]
  411eac:	429a      	cmp	r2, r3
  411eae:	d00a      	beq.n	411ec6 <draw_bg+0x10a>
    uint16_t other_mask_cnt = lv_draw_mask_get_cnt();
  411eb0:	4b94      	ldr	r3, [pc, #592]	; (412104 <draw_bg+0x348>)
  411eb2:	4798      	blx	r3
  411eb4:	b283      	uxth	r3, r0
  411eb6:	930e      	str	r3, [sp, #56]	; 0x38
    if(other_mask_cnt) simple_mode = false;
  411eb8:	b943      	cbnz	r3, 411ecc <draw_bg+0x110>
    else if(grad_dir == LV_GRAD_DIR_HOR) simple_mode = false;
  411eba:	f1b8 0f02 	cmp.w	r8, #2
  411ebe:	d068      	beq.n	411f92 <draw_bg+0x1d6>
    bool simple_mode = true;
  411ec0:	9b06      	ldr	r3, [sp, #24]
  411ec2:	9309      	str	r3, [sp, #36]	; 0x24
  411ec4:	e004      	b.n	411ed0 <draw_bg+0x114>
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
  411ec6:	f04f 0800 	mov.w	r8, #0
  411eca:	e7f1      	b.n	411eb0 <draw_bg+0xf4>
    if(other_mask_cnt) simple_mode = false;
  411ecc:	2300      	movs	r3, #0
  411ece:	9309      	str	r3, [sp, #36]	; 0x24
  411ed0:	f8bd b08c 	ldrh.w	fp, [sp, #140]	; 0x8c
  411ed4:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  411ed8:	ebab 0b03 	sub.w	fp, fp, r3
  411edc:	fa1f fb8b 	uxth.w	fp, fp
  411ee0:	f10b 0b01 	add.w	fp, fp, #1
  411ee4:	fa0f fb8b 	sxth.w	fp, fp
    int32_t coords_w = lv_area_get_width(&coords_bg);
  411ee8:	f8cd b010 	str.w	fp, [sp, #16]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  411eec:	f8bd 508e 	ldrh.w	r5, [sp, #142]	; 0x8e
  411ef0:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
  411ef4:	1aed      	subs	r5, r5, r3
  411ef6:	b2ad      	uxth	r5, r5
  411ef8:	3501      	adds	r5, #1
  411efa:	b22d      	sxth	r5, r5
    int32_t rout = dsc->radius;
  411efc:	f9ba 3000 	ldrsh.w	r3, [sl]
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
  411f00:	455d      	cmp	r5, fp
  411f02:	bfa8      	it	ge
  411f04:	465d      	movge	r5, fp
    if(rout > short_side >> 1) rout = short_side >> 1;
  411f06:	106d      	asrs	r5, r5, #1
  411f08:	42ab      	cmp	r3, r5
  411f0a:	dc00      	bgt.n	411f0e <draw_bg+0x152>
    int32_t rout = dsc->radius;
  411f0c:	461d      	mov	r5, r3
    if(simple_mode && rout == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
  411f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  411f10:	2d00      	cmp	r5, #0
  411f12:	bf14      	ite	ne
  411f14:	2300      	movne	r3, #0
  411f16:	f003 0301 	andeq.w	r3, r3, #1
  411f1a:	b113      	cbz	r3, 411f22 <draw_bg+0x166>
  411f1c:	f1b8 0f00 	cmp.w	r8, #0
  411f20:	d03a      	beq.n	411f98 <draw_bg+0x1dc>
        if(rout > 0) {
  411f22:	2d00      	cmp	r5, #0
  411f24:	dd4a      	ble.n	411fbc <draw_bg+0x200>
            lv_draw_mask_radius_init(&mask_rout_param, &coords_bg, rout, false);
  411f26:	2300      	movs	r3, #0
  411f28:	462a      	mov	r2, r5
  411f2a:	a922      	add	r1, sp, #136	; 0x88
  411f2c:	a819      	add	r0, sp, #100	; 0x64
  411f2e:	4e76      	ldr	r6, [pc, #472]	; (412108 <draw_bg+0x34c>)
  411f30:	47b0      	blx	r6
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
  411f32:	2100      	movs	r1, #0
  411f34:	a819      	add	r0, sp, #100	; 0x64
  411f36:	4b75      	ldr	r3, [pc, #468]	; (41210c <draw_bg+0x350>)
  411f38:	4798      	blx	r3
  411f3a:	9010      	str	r0, [sp, #64]	; 0x40
        lv_color_t grad_color = dsc->bg_color;
  411f3c:	f8ba 3002 	ldrh.w	r3, [sl, #2]
  411f40:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        if(grad_dir == LV_GRAD_DIR_HOR) {
  411f44:	f1b8 0f02 	cmp.w	r8, #2
  411f48:	d03c      	beq.n	411fc4 <draw_bg+0x208>
        lv_color_t * grad_map = NULL;
  411f4a:	2300      	movs	r3, #0
  411f4c:	930f      	str	r3, [sp, #60]	; 0x3c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  411f4e:	f9bd 208c 	ldrsh.w	r2, [sp, #140]	; 0x8c
  411f52:	b293      	uxth	r3, r2
  411f54:	f9bd 1088 	ldrsh.w	r1, [sp, #136]	; 0x88
  411f58:	b288      	uxth	r0, r1
  411f5a:	1a1b      	subs	r3, r3, r0
  411f5c:	b29b      	uxth	r3, r3
  411f5e:	3301      	adds	r3, #1
  411f60:	b21b      	sxth	r3, r3
        if(lv_area_get_width(&coords_bg) - 2 * rout > SPLIT_LIMIT) split = true;
  411f62:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  411f66:	2b32      	cmp	r3, #50	; 0x32
  411f68:	dc01      	bgt.n	411f6e <draw_bg+0x1b2>
        bool split = false;
  411f6a:	2300      	movs	r3, #0
  411f6c:	9306      	str	r3, [sp, #24]
        fill_area.x1 = coords_bg.x1;
  411f6e:	f8ad 1054 	strh.w	r1, [sp, #84]	; 0x54
        fill_area.x2 = coords_bg.x2;
  411f72:	f8ad 2058 	strh.w	r2, [sp, #88]	; 0x58
        fill_area.y1 = disp_area->y1 + draw_area.y1;
  411f76:	8a7b      	ldrh	r3, [r7, #18]
  411f78:	f9bd 6082 	ldrsh.w	r6, [sp, #130]	; 0x82
  411f7c:	fa13 f386 	uxtah	r3, r3, r6
  411f80:	b21b      	sxth	r3, r3
  411f82:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
        fill_area.y2 = fill_area.y1;
  411f86:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
  411f8a:	46b9      	mov	r9, r7
  411f8c:	f8bd b01c 	ldrh.w	fp, [sp, #28]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  411f90:	e1ec      	b.n	41236c <draw_bg+0x5b0>
    else if(grad_dir == LV_GRAD_DIR_HOR) simple_mode = false;
  411f92:	2300      	movs	r3, #0
  411f94:	9309      	str	r3, [sp, #36]	; 0x24
  411f96:	e79b      	b.n	411ed0 <draw_bg+0x114>
        _lv_blend_fill(clip, &coords_bg,
  411f98:	f8ba 2002 	ldrh.w	r2, [sl, #2]
  411f9c:	f89a 300d 	ldrb.w	r3, [sl, #13]
  411fa0:	9302      	str	r3, [sp, #8]
  411fa2:	9b05      	ldr	r3, [sp, #20]
  411fa4:	9301      	str	r3, [sp, #4]
  411fa6:	2301      	movs	r3, #1
  411fa8:	9300      	str	r3, [sp, #0]
  411faa:	2300      	movs	r3, #0
  411fac:	a922      	add	r1, sp, #136	; 0x88
  411fae:	980a      	ldr	r0, [sp, #40]	; 0x28
  411fb0:	4c57      	ldr	r4, [pc, #348]	; (412110 <draw_bg+0x354>)
  411fb2:	47a0      	blx	r4
    int16_t mask_rout_id = LV_MASK_ID_INV;
  411fb4:	f04f 33ff 	mov.w	r3, #4294967295
  411fb8:	9310      	str	r3, [sp, #64]	; 0x40
        _lv_blend_fill(clip, &coords_bg,
  411fba:	e234      	b.n	412426 <draw_bg+0x66a>
    int16_t mask_rout_id = LV_MASK_ID_INV;
  411fbc:	f04f 33ff 	mov.w	r3, #4294967295
  411fc0:	9310      	str	r3, [sp, #64]	; 0x40
  411fc2:	e7bb      	b.n	411f3c <draw_bg+0x180>
            grad_map = _lv_mem_buf_get(coords_w * sizeof(lv_color_t));
  411fc4:	ea4f 004b 	mov.w	r0, fp, lsl #1
  411fc8:	4b4d      	ldr	r3, [pc, #308]	; (412100 <draw_bg+0x344>)
  411fca:	4798      	blx	r3
  411fcc:	900f      	str	r0, [sp, #60]	; 0x3c
            for(i = 0; i < coords_w; i++) {
  411fce:	f04f 0900 	mov.w	r9, #0
  411fd2:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  411fd6:	9512      	str	r5, [sp, #72]	; 0x48
  411fd8:	4684      	mov	ip, r0
  411fda:	9713      	str	r7, [sp, #76]	; 0x4c
  411fdc:	f8dd e010 	ldr.w	lr, [sp, #16]
  411fe0:	e004      	b.n	411fec <draw_bg+0x230>
    if(i <= min) return dsc->bg_color;
  411fe2:	f8ba 3002 	ldrh.w	r3, [sl, #2]
                grad_map[i] = grad_get(dsc, coords_w, i);
  411fe6:	8033      	strh	r3, [r6, #0]
            for(i = 0; i < coords_w; i++) {
  411fe8:	f109 0901 	add.w	r9, r9, #1
  411fec:	45f1      	cmp	r9, lr
  411fee:	da66      	bge.n	4120be <draw_bg+0x302>
                grad_map[i] = grad_get(dsc, coords_w, i);
  411ff0:	eb0c 0649 	add.w	r6, ip, r9, lsl #1
  411ff4:	fa0f f389 	sxth.w	r3, r9
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
  411ff8:	f9ba 0008 	ldrsh.w	r0, [sl, #8]
  411ffc:	fb0b f200 	mul.w	r2, fp, r0
  412000:	1212      	asrs	r2, r2, #8
    if(i <= min) return dsc->bg_color;
  412002:	429a      	cmp	r2, r3
  412004:	daed      	bge.n	411fe2 <draw_bg+0x226>
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
  412006:	f9ba 100a 	ldrsh.w	r1, [sl, #10]
  41200a:	fb01 f50b 	mul.w	r5, r1, fp
    if(i >= max) return dsc->bg_grad_color;
  41200e:	ebb3 2f25 	cmp.w	r3, r5, asr #8
  412012:	da51      	bge.n	4120b8 <draw_bg+0x2fc>
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
  412014:	1a09      	subs	r1, r1, r0
    d = (s * d) >> 8;
  412016:	fb01 f10b 	mul.w	r1, r1, fp
  41201a:	1209      	asrs	r1, r1, #8
    i -= min;
  41201c:	1a9b      	subs	r3, r3, r2
  41201e:	b21b      	sxth	r3, r3
    lv_opa_t mix = (i * 255) / d;
  412020:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
  412024:	fb93 f3f1 	sdiv	r3, r3, r1
  412028:	b2db      	uxtb	r3, r3
  41202a:	f8ba 0004 	ldrh.w	r0, [sl, #4]
  41202e:	f8ba 1002 	ldrh.w	r1, [sl, #2]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  412032:	f3c0 02c4 	ubfx	r2, r0, #3, #5
  412036:	f3c1 05c4 	ubfx	r5, r1, #3, #5
  41203a:	f1c3 07ff 	rsb	r7, r3, #255	; 0xff
  41203e:	fb07 f505 	mul.w	r5, r7, r5
  412042:	fb03 5202 	mla	r2, r3, r2, r5
  412046:	3280      	adds	r2, #128	; 0x80
  412048:	eb02 2502 	add.w	r5, r2, r2, lsl #8
  41204c:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
  412050:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  412054:	f362 04c7 	bfi	r4, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  412058:	f000 0507 	and.w	r5, r0, #7
  41205c:	f3c0 3242 	ubfx	r2, r0, #13, #3
  412060:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
  412064:	f001 0807 	and.w	r8, r1, #7
  412068:	f3c1 3542 	ubfx	r5, r1, #13, #3
  41206c:	eb05 05c8 	add.w	r5, r5, r8, lsl #3
  412070:	fb05 f507 	mul.w	r5, r5, r7
  412074:	fb02 5203 	mla	r2, r2, r3, r5
  412078:	3280      	adds	r2, #128	; 0x80
  41207a:	eb02 2502 	add.w	r5, r2, r2, lsl #8
  41207e:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
  412082:	f3c2 6582 	ubfx	r5, r2, #26, #3
  412086:	f365 0402 	bfi	r4, r5, #0, #3
  41208a:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  41208e:	f362 344f 	bfi	r4, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  412092:	f3c0 2004 	ubfx	r0, r0, #8, #5
  412096:	f3c1 2104 	ubfx	r1, r1, #8, #5
  41209a:	fb01 f707 	mul.w	r7, r1, r7
  41209e:	fb00 7303 	mla	r3, r0, r3, r7
  4120a2:	3380      	adds	r3, #128	; 0x80
  4120a4:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  4120a8:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  4120ac:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  4120b0:	f363 240c 	bfi	r4, r3, #8, #5
  4120b4:	4623      	mov	r3, r4
  4120b6:	e796      	b.n	411fe6 <draw_bg+0x22a>
    if(i >= max) return dsc->bg_grad_color;
  4120b8:	f8ba 3004 	ldrh.w	r3, [sl, #4]
  4120bc:	e793      	b.n	411fe6 <draw_bg+0x22a>
  4120be:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
  4120c2:	9d12      	ldr	r5, [sp, #72]	; 0x48
  4120c4:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  4120c6:	e742      	b.n	411f4e <draw_bg+0x192>
                    _lv_memset(mask_buf, opa, draw_area_w);
  4120c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4120ca:	9905      	ldr	r1, [sp, #20]
  4120cc:	9f08      	ldr	r7, [sp, #32]
  4120ce:	4638      	mov	r0, r7
  4120d0:	4b10      	ldr	r3, [pc, #64]	; (412114 <draw_bg+0x358>)
  4120d2:	4798      	blx	r3
                    mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  4120d4:	f8b9 1010 	ldrh.w	r1, [r9, #16]
  4120d8:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
  4120dc:	4419      	add	r1, r3
  4120de:	f8b9 2012 	ldrh.w	r2, [r9, #18]
  4120e2:	4432      	add	r2, r6
  4120e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4120e6:	b212      	sxth	r2, r2
  4120e8:	b209      	sxth	r1, r1
  4120ea:	4638      	mov	r0, r7
  4120ec:	4f0a      	ldr	r7, [pc, #40]	; (412118 <draw_bg+0x35c>)
  4120ee:	47b8      	blx	r7
  4120f0:	9004      	str	r0, [sp, #16]
  4120f2:	e028      	b.n	412146 <draw_bg+0x38a>
  4120f4:	00409851 	.word	0x00409851
  4120f8:	00414ea5 	.word	0x00414ea5
  4120fc:	00415663 	.word	0x00415663
  412100:	00416a81 	.word	0x00416a81
  412104:	0040fd5d 	.word	0x0040fd5d
  412108:	0040fedd 	.word	0x0040fedd
  41210c:	0040fc61 	.word	0x0040fc61
  412110:	0040c921 	.word	0x0040c921
  412114:	00416bb1 	.word	0x00416bb1
  412118:	0040fc95 	.word	0x0040fc95
                _lv_memset(mask_buf, opa, draw_area_w);
  41211c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  41211e:	9905      	ldr	r1, [sp, #20]
  412120:	9f08      	ldr	r7, [sp, #32]
  412122:	4638      	mov	r0, r7
  412124:	4bb5      	ldr	r3, [pc, #724]	; (4123fc <draw_bg+0x640>)
  412126:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  412128:	f8b9 1010 	ldrh.w	r1, [r9, #16]
  41212c:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
  412130:	4419      	add	r1, r3
  412132:	f8b9 2012 	ldrh.w	r2, [r9, #18]
  412136:	4432      	add	r2, r6
  412138:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  41213a:	b212      	sxth	r2, r2
  41213c:	b209      	sxth	r1, r1
  41213e:	4638      	mov	r0, r7
  412140:	4faf      	ldr	r7, [pc, #700]	; (412400 <draw_bg+0x644>)
  412142:	47b8      	blx	r7
  412144:	9004      	str	r0, [sp, #16]
            if(mask_res == LV_DRAW_MASK_RES_CHANGED) {
  412146:	9b04      	ldr	r3, [sp, #16]
  412148:	2b02      	cmp	r3, #2
  41214a:	d061      	beq.n	412210 <draw_bg+0x454>
            opa2 = opa;
  41214c:	9b05      	ldr	r3, [sp, #20]
  41214e:	9307      	str	r3, [sp, #28]
            if(grad_dir == LV_GRAD_DIR_VER) {
  412150:	f1b8 0f01 	cmp.w	r8, #1
  412154:	d05f      	beq.n	412216 <draw_bg+0x45a>
            if(simple_mode && split &&
  412156:	9b09      	ldr	r3, [sp, #36]	; 0x24
  412158:	9a06      	ldr	r2, [sp, #24]
  41215a:	4013      	ands	r3, r2
  41215c:	f013 0fff 	tst.w	r3, #255	; 0xff
  412160:	f000 80e8 	beq.w	412334 <draw_bg+0x578>
               (y < coords_bg.y1 + rout + 1 ||
  412164:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
  412168:	442b      	add	r3, r5
  41216a:	3301      	adds	r3, #1
            if(simple_mode && split &&
  41216c:	429c      	cmp	r4, r3
  41216e:	db06      	blt.n	41217e <draw_bg+0x3c2>
                y > coords_bg.y2 - rout - 1)) {
  412170:	f9bd 308e 	ldrsh.w	r3, [sp, #142]	; 0x8e
  412174:	1b5b      	subs	r3, r3, r5
  412176:	3b01      	subs	r3, #1
               (y < coords_bg.y1 + rout + 1 ||
  412178:	429c      	cmp	r4, r3
  41217a:	f340 80db 	ble.w	412334 <draw_bg+0x578>
                fill_area2.x1 = coords_bg.x1;
  41217e:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
  412182:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
                fill_area2.x2 = coords_bg.x1 + rout - 1;
  412186:	b2ac      	uxth	r4, r5
  412188:	fa14 f383 	uxtah	r3, r4, r3
  41218c:	b29b      	uxth	r3, r3
  41218e:	3b01      	subs	r3, #1
  412190:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                fill_area2.y1 = fill_area.y1;
  412194:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
  412198:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
                fill_area2.y2 = fill_area.y2;
  41219c:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
  4121a0:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
                _lv_blend_fill(clip, &fill_area2,
  4121a4:	f89a 300d 	ldrb.w	r3, [sl, #13]
  4121a8:	9302      	str	r3, [sp, #8]
  4121aa:	9b07      	ldr	r3, [sp, #28]
  4121ac:	9301      	str	r3, [sp, #4]
  4121ae:	9b04      	ldr	r3, [sp, #16]
  4121b0:	9300      	str	r3, [sp, #0]
  4121b2:	9b08      	ldr	r3, [sp, #32]
  4121b4:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
  4121b8:	a917      	add	r1, sp, #92	; 0x5c
  4121ba:	980a      	ldr	r0, [sp, #40]	; 0x28
  4121bc:	4f91      	ldr	r7, [pc, #580]	; (412404 <draw_bg+0x648>)
  4121be:	47b8      	blx	r7
                if(grad_dir == LV_GRAD_DIR_VER) {
  4121c0:	f1b8 0f01 	cmp.w	r8, #1
  4121c4:	f000 809c 	beq.w	412300 <draw_bg+0x544>
                fill_area2.x1 = coords_bg.x2 - rout + 1;
  4121c8:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
  4121cc:	b29a      	uxth	r2, r3
  4121ce:	1b14      	subs	r4, r2, r4
  4121d0:	b2a4      	uxth	r4, r4
  4121d2:	3401      	adds	r4, #1
  4121d4:	f8ad 405c 	strh.w	r4, [sp, #92]	; 0x5c
                fill_area2.x2 = coords_bg.x2;
  4121d8:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
  4121dc:	1b5b      	subs	r3, r3, r5
  4121de:	3301      	adds	r3, #1
  4121e0:	f9b9 2010 	ldrsh.w	r2, [r9, #16]
  4121e4:	f9bd 1080 	ldrsh.w	r1, [sp, #128]	; 0x80
  4121e8:	440a      	add	r2, r1
                if(mask_ofs < 0) mask_ofs = 0;
  4121ea:	1a9b      	subs	r3, r3, r2
  4121ec:	f100 80a0 	bmi.w	412330 <draw_bg+0x574>
                _lv_blend_fill(clip, &fill_area2,
  4121f0:	f89a 200d 	ldrb.w	r2, [sl, #13]
  4121f4:	9202      	str	r2, [sp, #8]
  4121f6:	9a07      	ldr	r2, [sp, #28]
  4121f8:	9201      	str	r2, [sp, #4]
  4121fa:	9a04      	ldr	r2, [sp, #16]
  4121fc:	9200      	str	r2, [sp, #0]
  4121fe:	9a08      	ldr	r2, [sp, #32]
  412200:	4413      	add	r3, r2
  412202:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
  412206:	a917      	add	r1, sp, #92	; 0x5c
  412208:	980a      	ldr	r0, [sp, #40]	; 0x28
  41220a:	4c7e      	ldr	r4, [pc, #504]	; (412404 <draw_bg+0x648>)
  41220c:	47a0      	blx	r4
                y > coords_bg.y2 - rout - 1)) {
  41220e:	e0a2      	b.n	412356 <draw_bg+0x59a>
                opa2 = LV_OPA_COVER;
  412210:	23ff      	movs	r3, #255	; 0xff
  412212:	9307      	str	r3, [sp, #28]
  412214:	e79c      	b.n	412150 <draw_bg+0x394>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  412216:	f8bd 208e 	ldrh.w	r2, [sp, #142]	; 0x8e
  41221a:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
  41221e:	1ad2      	subs	r2, r2, r3
  412220:	b292      	uxth	r2, r2
  412222:	3201      	adds	r2, #1
  412224:	b212      	sxth	r2, r2
                grad_color = grad_get(dsc, lv_area_get_height(&coords_bg), y - coords_bg.y1);
  412226:	1ae3      	subs	r3, r4, r3
  412228:	b29b      	uxth	r3, r3
  41222a:	fa0f fe83 	sxth.w	lr, r3
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
  41222e:	f9ba c008 	ldrsh.w	ip, [sl, #8]
  412232:	fb02 f10c 	mul.w	r1, r2, ip
  412236:	1209      	asrs	r1, r1, #8
    if(i <= min) return dsc->bg_color;
  412238:	4571      	cmp	r1, lr
  41223a:	da59      	bge.n	4122f0 <draw_bg+0x534>
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
  41223c:	f9ba 000a 	ldrsh.w	r0, [sl, #10]
  412240:	fb00 f702 	mul.w	r7, r0, r2
    if(i >= max) return dsc->bg_grad_color;
  412244:	ebbe 2f27 	cmp.w	lr, r7, asr #8
  412248:	da57      	bge.n	4122fa <draw_bg+0x53e>
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
  41224a:	eba0 000c 	sub.w	r0, r0, ip
    d = (s * d) >> 8;
  41224e:	fb00 f202 	mul.w	r2, r0, r2
  412252:	1212      	asrs	r2, r2, #8
    i -= min;
  412254:	1a5b      	subs	r3, r3, r1
  412256:	b21b      	sxth	r3, r3
    lv_opa_t mix = (i * 255) / d;
  412258:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
  41225c:	fb93 f3f2 	sdiv	r3, r3, r2
  412260:	b2db      	uxtb	r3, r3
  412262:	f8ba 0004 	ldrh.w	r0, [sl, #4]
  412266:	f8ba 1002 	ldrh.w	r1, [sl, #2]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  41226a:	f3c0 02c4 	ubfx	r2, r0, #3, #5
  41226e:	f3c1 0ec4 	ubfx	lr, r1, #3, #5
  412272:	f1c3 0cff 	rsb	ip, r3, #255	; 0xff
  412276:	fb0c fe0e 	mul.w	lr, ip, lr
  41227a:	fb03 e202 	mla	r2, r3, r2, lr
  41227e:	3280      	adds	r2, #128	; 0x80
  412280:	eb02 2e02 	add.w	lr, r2, r2, lsl #8
  412284:	eb02 12ce 	add.w	r2, r2, lr, lsl #7
  412288:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  41228c:	f362 0bc7 	bfi	fp, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  412290:	f000 0e07 	and.w	lr, r0, #7
  412294:	f3c0 3242 	ubfx	r2, r0, #13, #3
  412298:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
  41229c:	f001 0707 	and.w	r7, r1, #7
  4122a0:	f3c1 3e42 	ubfx	lr, r1, #13, #3
  4122a4:	eb0e 0ec7 	add.w	lr, lr, r7, lsl #3
  4122a8:	fb0e fe0c 	mul.w	lr, lr, ip
  4122ac:	fb02 e203 	mla	r2, r2, r3, lr
  4122b0:	3280      	adds	r2, #128	; 0x80
  4122b2:	eb02 2e02 	add.w	lr, r2, r2, lsl #8
  4122b6:	eb02 12ce 	add.w	r2, r2, lr, lsl #7
  4122ba:	f3c2 6e82 	ubfx	lr, r2, #26, #3
  4122be:	f36e 0b02 	bfi	fp, lr, #0, #3
  4122c2:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  4122c6:	f362 3b4f 	bfi	fp, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  4122ca:	f3c0 2004 	ubfx	r0, r0, #8, #5
  4122ce:	f3c1 2104 	ubfx	r1, r1, #8, #5
  4122d2:	fb01 fc0c 	mul.w	ip, r1, ip
  4122d6:	fb00 c303 	mla	r3, r0, r3, ip
  4122da:	3380      	adds	r3, #128	; 0x80
  4122dc:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  4122e0:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  4122e4:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  4122e8:	f363 2b0c 	bfi	fp, r3, #8, #5
  4122ec:	465b      	mov	r3, fp
  4122ee:	e001      	b.n	4122f4 <draw_bg+0x538>
    if(i <= min) return dsc->bg_color;
  4122f0:	f8ba 3002 	ldrh.w	r3, [sl, #2]
  4122f4:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
  4122f8:	e72d      	b.n	412156 <draw_bg+0x39a>
    if(i >= max) return dsc->bg_grad_color;
  4122fa:	f8ba 3004 	ldrh.w	r3, [sl, #4]
  4122fe:	e7f9      	b.n	4122f4 <draw_bg+0x538>
                    fill_area2.x1 = coords_bg.x1 + rout;
  412300:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  412304:	4423      	add	r3, r4
  412306:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
                    fill_area2.x2 = coords_bg.x2 - rout;
  41230a:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  41230e:	1b1b      	subs	r3, r3, r4
  412310:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                    _lv_blend_fill(clip, &fill_area2,
  412314:	f89a 300d 	ldrb.w	r3, [sl, #13]
  412318:	9302      	str	r3, [sp, #8]
  41231a:	9b05      	ldr	r3, [sp, #20]
  41231c:	9301      	str	r3, [sp, #4]
  41231e:	2301      	movs	r3, #1
  412320:	9300      	str	r3, [sp, #0]
  412322:	2300      	movs	r3, #0
  412324:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
  412328:	a917      	add	r1, sp, #92	; 0x5c
  41232a:	980a      	ldr	r0, [sp, #40]	; 0x28
  41232c:	47b8      	blx	r7
  41232e:	e74b      	b.n	4121c8 <draw_bg+0x40c>
                if(mask_ofs < 0) mask_ofs = 0;
  412330:	2300      	movs	r3, #0
  412332:	e75d      	b.n	4121f0 <draw_bg+0x434>
                if(grad_dir == LV_GRAD_DIR_HOR) {
  412334:	f1b8 0f02 	cmp.w	r8, #2
  412338:	d034      	beq.n	4123a4 <draw_bg+0x5e8>
                else if(grad_dir == LV_GRAD_DIR_VER) {
  41233a:	f1b8 0f01 	cmp.w	r8, #1
  41233e:	d03f      	beq.n	4123c0 <draw_bg+0x604>
                else if(other_mask_cnt != 0 || !split) {
  412340:	9b06      	ldr	r3, [sp, #24]
  412342:	f083 0301 	eor.w	r3, r3, #1
  412346:	b2db      	uxtb	r3, r3
  412348:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  41234a:	2a00      	cmp	r2, #0
  41234c:	bf18      	it	ne
  41234e:	f043 0301 	orrne.w	r3, r3, #1
  412352:	2b00      	cmp	r3, #0
  412354:	d143      	bne.n	4123de <draw_bg+0x622>
            fill_area.y1++;
  412356:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
  41235a:	3301      	adds	r3, #1
  41235c:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            fill_area.y2++;
  412360:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
  412364:	3301      	adds	r3, #1
  412366:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  41236a:	3601      	adds	r6, #1
  41236c:	f9bd 3086 	ldrsh.w	r3, [sp, #134]	; 0x86
  412370:	429e      	cmp	r6, r3
  412372:	dc4b      	bgt.n	41240c <draw_bg+0x650>
            int32_t y = h + vdb->area.y1;
  412374:	f9b9 4012 	ldrsh.w	r4, [r9, #18]
  412378:	4434      	add	r4, r6
            if(y > coords_bg.y1 + rout + 1 &&
  41237a:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
  41237e:	442b      	add	r3, r5
  412380:	3301      	adds	r3, #1
  412382:	429c      	cmp	r4, r3
  412384:	f77f aeca 	ble.w	41211c <draw_bg+0x360>
               y < coords_bg.y2 - rout - 1) {
  412388:	f9bd 308e 	ldrsh.w	r3, [sp, #142]	; 0x8e
  41238c:	1b5b      	subs	r3, r3, r5
  41238e:	3b01      	subs	r3, #1
            if(y > coords_bg.y1 + rout + 1 &&
  412390:	429c      	cmp	r4, r3
  412392:	f6bf aec3 	bge.w	41211c <draw_bg+0x360>
                if(simple_mode == false) {
  412396:	9b09      	ldr	r3, [sp, #36]	; 0x24
  412398:	2b00      	cmp	r3, #0
  41239a:	f43f ae95 	beq.w	4120c8 <draw_bg+0x30c>
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
  41239e:	2301      	movs	r3, #1
  4123a0:	9304      	str	r3, [sp, #16]
  4123a2:	e6d0      	b.n	412146 <draw_bg+0x38a>
                    _lv_blend_map(clip, &fill_area, grad_map, mask_buf, mask_res, opa2, dsc->bg_blend_mode);
  4123a4:	f89a 300d 	ldrb.w	r3, [sl, #13]
  4123a8:	9302      	str	r3, [sp, #8]
  4123aa:	9b07      	ldr	r3, [sp, #28]
  4123ac:	9301      	str	r3, [sp, #4]
  4123ae:	9b04      	ldr	r3, [sp, #16]
  4123b0:	9300      	str	r3, [sp, #0]
  4123b2:	9b08      	ldr	r3, [sp, #32]
  4123b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4123b6:	a915      	add	r1, sp, #84	; 0x54
  4123b8:	980a      	ldr	r0, [sp, #40]	; 0x28
  4123ba:	4c13      	ldr	r4, [pc, #76]	; (412408 <draw_bg+0x64c>)
  4123bc:	47a0      	blx	r4
  4123be:	e7ca      	b.n	412356 <draw_bg+0x59a>
                    _lv_blend_fill(clip, &fill_area,
  4123c0:	f89a 300d 	ldrb.w	r3, [sl, #13]
  4123c4:	9302      	str	r3, [sp, #8]
  4123c6:	9b07      	ldr	r3, [sp, #28]
  4123c8:	9301      	str	r3, [sp, #4]
  4123ca:	9b04      	ldr	r3, [sp, #16]
  4123cc:	9300      	str	r3, [sp, #0]
  4123ce:	9b08      	ldr	r3, [sp, #32]
  4123d0:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
  4123d4:	a915      	add	r1, sp, #84	; 0x54
  4123d6:	980a      	ldr	r0, [sp, #40]	; 0x28
  4123d8:	4c0a      	ldr	r4, [pc, #40]	; (412404 <draw_bg+0x648>)
  4123da:	47a0      	blx	r4
  4123dc:	e7bb      	b.n	412356 <draw_bg+0x59a>
                    _lv_blend_fill(clip, &fill_area,
  4123de:	f89a 300d 	ldrb.w	r3, [sl, #13]
  4123e2:	9302      	str	r3, [sp, #8]
  4123e4:	9b07      	ldr	r3, [sp, #28]
  4123e6:	9301      	str	r3, [sp, #4]
  4123e8:	9b04      	ldr	r3, [sp, #16]
  4123ea:	9300      	str	r3, [sp, #0]
  4123ec:	9b08      	ldr	r3, [sp, #32]
  4123ee:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
  4123f2:	a915      	add	r1, sp, #84	; 0x54
  4123f4:	980a      	ldr	r0, [sp, #40]	; 0x28
  4123f6:	4c03      	ldr	r4, [pc, #12]	; (412404 <draw_bg+0x648>)
  4123f8:	47a0      	blx	r4
  4123fa:	e7ac      	b.n	412356 <draw_bg+0x59a>
  4123fc:	00416bb1 	.word	0x00416bb1
  412400:	0040fc95 	.word	0x0040fc95
  412404:	0040c921 	.word	0x0040c921
  412408:	0040ca41 	.word	0x0040ca41
        if(grad_dir == LV_GRAD_DIR_NONE && other_mask_cnt == 0 && split) {
  41240c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  41240e:	f1b8 0f00 	cmp.w	r8, #0
  412412:	bf08      	it	eq
  412414:	2b00      	cmpeq	r3, #0
  412416:	d101      	bne.n	41241c <draw_bg+0x660>
  412418:	9b06      	ldr	r3, [sp, #24]
  41241a:	b95b      	cbnz	r3, 412434 <draw_bg+0x678>
        if(grad_map) _lv_mem_buf_release(grad_map);
  41241c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  41241e:	b113      	cbz	r3, 412426 <draw_bg+0x66a>
  412420:	4618      	mov	r0, r3
  412422:	4b37      	ldr	r3, [pc, #220]	; (412500 <draw_bg+0x744>)
  412424:	4798      	blx	r3
    lv_draw_mask_remove_id(mask_rout_id);
  412426:	9810      	ldr	r0, [sp, #64]	; 0x40
  412428:	4b36      	ldr	r3, [pc, #216]	; (412504 <draw_bg+0x748>)
  41242a:	4798      	blx	r3
    _lv_mem_buf_release(mask_buf);
  41242c:	9808      	ldr	r0, [sp, #32]
  41242e:	4b34      	ldr	r3, [pc, #208]	; (412500 <draw_bg+0x744>)
  412430:	4798      	blx	r3
  412432:	e510      	b.n	411e56 <draw_bg+0x9a>
            fill_area.x1 = coords_bg.x1 + rout;
  412434:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  412438:	b2ad      	uxth	r5, r5
  41243a:	442b      	add	r3, r5
  41243c:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
            fill_area.x2 = coords_bg.x2 - rout;
  412440:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  412444:	1b5b      	subs	r3, r3, r5
  412446:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            fill_area.y1 = coords_bg.y1;
  41244a:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
  41244e:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            fill_area.y2 = coords_bg.y1 + rout;
  412452:	fa15 f383 	uxtah	r3, r5, r3
  412456:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
            _lv_blend_fill(clip, &fill_area,
  41245a:	f89a 300d 	ldrb.w	r3, [sl, #13]
  41245e:	9302      	str	r3, [sp, #8]
  412460:	9b05      	ldr	r3, [sp, #20]
  412462:	9301      	str	r3, [sp, #4]
  412464:	2301      	movs	r3, #1
  412466:	9300      	str	r3, [sp, #0]
  412468:	2300      	movs	r3, #0
  41246a:	f8ba 2002 	ldrh.w	r2, [sl, #2]
  41246e:	a915      	add	r1, sp, #84	; 0x54
  412470:	980a      	ldr	r0, [sp, #40]	; 0x28
  412472:	4c25      	ldr	r4, [pc, #148]	; (412508 <draw_bg+0x74c>)
  412474:	47a0      	blx	r4
            fill_area.y1 = coords_bg.y2 - rout;
  412476:	f9bd 108e 	ldrsh.w	r1, [sp, #142]	; 0x8e
  41247a:	b28b      	uxth	r3, r1
  41247c:	1b5b      	subs	r3, r3, r5
  41247e:	b21b      	sxth	r3, r3
  412480:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
  412484:	f9bd 205a 	ldrsh.w	r2, [sp, #90]	; 0x5a
  412488:	4293      	cmp	r3, r2
  41248a:	dc03      	bgt.n	412494 <draw_bg+0x6d8>
  41248c:	b293      	uxth	r3, r2
  41248e:	3301      	adds	r3, #1
  412490:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            fill_area.y2 = coords_bg.y2;
  412494:	f8ad 105a 	strh.w	r1, [sp, #90]	; 0x5a
            _lv_blend_fill(clip, &fill_area,
  412498:	f89a 300d 	ldrb.w	r3, [sl, #13]
  41249c:	9302      	str	r3, [sp, #8]
  41249e:	9f05      	ldr	r7, [sp, #20]
  4124a0:	9701      	str	r7, [sp, #4]
  4124a2:	2601      	movs	r6, #1
  4124a4:	9600      	str	r6, [sp, #0]
  4124a6:	2300      	movs	r3, #0
  4124a8:	f8ba 2002 	ldrh.w	r2, [sl, #2]
  4124ac:	a915      	add	r1, sp, #84	; 0x54
  4124ae:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  4124b2:	4640      	mov	r0, r8
  4124b4:	4c14      	ldr	r4, [pc, #80]	; (412508 <draw_bg+0x74c>)
  4124b6:	47a0      	blx	r4
            fill_area.x1 = coords_bg.x1;
  4124b8:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
  4124bc:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
            fill_area.x2 = coords_bg.x2;
  4124c0:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
  4124c4:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            fill_area.y1 = coords_bg.y1 + rout + 1;
  4124c8:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
  4124cc:	442b      	add	r3, r5
  4124ce:	b29b      	uxth	r3, r3
  4124d0:	4433      	add	r3, r6
  4124d2:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            fill_area.y2 = coords_bg.y2 - rout - 1;
  4124d6:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
  4124da:	1b5b      	subs	r3, r3, r5
  4124dc:	b29b      	uxth	r3, r3
  4124de:	3b01      	subs	r3, #1
  4124e0:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
            _lv_blend_fill(clip, &fill_area,
  4124e4:	f8ba 2002 	ldrh.w	r2, [sl, #2]
  4124e8:	f89a 300d 	ldrb.w	r3, [sl, #13]
  4124ec:	9302      	str	r3, [sp, #8]
  4124ee:	9701      	str	r7, [sp, #4]
  4124f0:	9600      	str	r6, [sp, #0]
  4124f2:	2300      	movs	r3, #0
  4124f4:	a915      	add	r1, sp, #84	; 0x54
  4124f6:	4640      	mov	r0, r8
  4124f8:	47a0      	blx	r4
  4124fa:	e78f      	b.n	41241c <draw_bg+0x660>
  4124fc:	4770      	bx	lr
  4124fe:	bf00      	nop
  412500:	00416831 	.word	0x00416831
  412504:	0040fce5 	.word	0x0040fce5
  412508:	0040c921 	.word	0x0040c921

0041250c <lv_draw_rect_dsc_init>:
{
  41250c:	b510      	push	{r4, lr}
  41250e:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
  412510:	2154      	movs	r1, #84	; 0x54
  412512:	4b0e      	ldr	r3, [pc, #56]	; (41254c <lv_draw_rect_dsc_init+0x40>)
  412514:	4798      	blx	r3
    dsc->bg_color = LV_COLOR_WHITE;
  412516:	4b0e      	ldr	r3, [pc, #56]	; (412550 <lv_draw_rect_dsc_init+0x44>)
  412518:	881b      	ldrh	r3, [r3, #0]
  41251a:	8063      	strh	r3, [r4, #2]
    dsc->bg_grad_color = LV_COLOR_BLACK;
  41251c:	2300      	movs	r3, #0
  41251e:	80a3      	strh	r3, [r4, #4]
    dsc->border_color = LV_COLOR_BLACK;
  412520:	81e3      	strh	r3, [r4, #14]
    dsc->pattern_recolor = LV_COLOR_BLACK;
  412522:	86a3      	strh	r3, [r4, #52]	; 0x34
    dsc->value_color = LV_COLOR_BLACK;
  412524:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    dsc->shadow_color = LV_COLOR_BLACK;
  412528:	8423      	strh	r3, [r4, #32]
    dsc->bg_grad_color_stop = 0xFF;
  41252a:	23ff      	movs	r3, #255	; 0xff
  41252c:	8163      	strh	r3, [r4, #10]
    dsc->bg_opa = LV_OPA_COVER;
  41252e:	7323      	strb	r3, [r4, #12]
    dsc->outline_opa = LV_OPA_COVER;
  412530:	77a3      	strb	r3, [r4, #30]
    dsc->border_opa = LV_OPA_COVER;
  412532:	7523      	strb	r3, [r4, #20]
    dsc->pattern_opa = LV_OPA_COVER;
  412534:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    dsc->pattern_font = LV_THEME_DEFAULT_FONT_NORMAL;
  412538:	4a06      	ldr	r2, [pc, #24]	; (412554 <lv_draw_rect_dsc_init+0x48>)
  41253a:	6322      	str	r2, [r4, #48]	; 0x30
    dsc->value_opa = LV_OPA_COVER;
  41253c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    dsc->value_font = LV_THEME_DEFAULT_FONT_NORMAL;
  412540:	6422      	str	r2, [r4, #64]	; 0x40
    dsc->shadow_opa = LV_OPA_COVER;
  412542:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    dsc->border_side = LV_BORDER_SIDE_FULL;
  412546:	230f      	movs	r3, #15
  412548:	8263      	strh	r3, [r4, #18]
  41254a:	bd10      	pop	{r4, pc}
  41254c:	00416c0d 	.word	0x00416c0d
  412550:	0042c888 	.word	0x0042c888
  412554:	2040008c 	.word	0x2040008c

00412558 <lv_draw_rect>:
{
  412558:	b570      	push	{r4, r5, r6, lr}
  41255a:	88c3      	ldrh	r3, [r0, #6]
  41255c:	8844      	ldrh	r4, [r0, #2]
  41255e:	1b1b      	subs	r3, r3, r4
  412560:	b29b      	uxth	r3, r3
  412562:	3301      	adds	r3, #1
  412564:	b21b      	sxth	r3, r3
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
  412566:	2b00      	cmp	r3, #0
  412568:	dd25      	ble.n	4125b6 <lv_draw_rect+0x5e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41256a:	8883      	ldrh	r3, [r0, #4]
  41256c:	8804      	ldrh	r4, [r0, #0]
  41256e:	1b1b      	subs	r3, r3, r4
  412570:	b29b      	uxth	r3, r3
  412572:	3301      	adds	r3, #1
  412574:	b21b      	sxth	r3, r3
  412576:	2b00      	cmp	r3, #0
  412578:	dd1d      	ble.n	4125b6 <lv_draw_rect+0x5e>
  41257a:	4616      	mov	r6, r2
  41257c:	460d      	mov	r5, r1
  41257e:	4604      	mov	r4, r0
    draw_shadow(coords, clip, dsc);
  412580:	4b0d      	ldr	r3, [pc, #52]	; (4125b8 <lv_draw_rect+0x60>)
  412582:	4798      	blx	r3
    draw_bg(coords, clip, dsc);
  412584:	4632      	mov	r2, r6
  412586:	4629      	mov	r1, r5
  412588:	4620      	mov	r0, r4
  41258a:	4b0c      	ldr	r3, [pc, #48]	; (4125bc <lv_draw_rect+0x64>)
  41258c:	4798      	blx	r3
    draw_pattern(coords, clip, dsc);
  41258e:	4632      	mov	r2, r6
  412590:	4629      	mov	r1, r5
  412592:	4620      	mov	r0, r4
  412594:	4b0a      	ldr	r3, [pc, #40]	; (4125c0 <lv_draw_rect+0x68>)
  412596:	4798      	blx	r3
    draw_border(coords, clip, dsc);
  412598:	4632      	mov	r2, r6
  41259a:	4629      	mov	r1, r5
  41259c:	4620      	mov	r0, r4
  41259e:	4b09      	ldr	r3, [pc, #36]	; (4125c4 <lv_draw_rect+0x6c>)
  4125a0:	4798      	blx	r3
    draw_value_str(coords, clip, dsc);
  4125a2:	4632      	mov	r2, r6
  4125a4:	4629      	mov	r1, r5
  4125a6:	4620      	mov	r0, r4
  4125a8:	4b07      	ldr	r3, [pc, #28]	; (4125c8 <lv_draw_rect+0x70>)
  4125aa:	4798      	blx	r3
    draw_outline(coords, clip, dsc);
  4125ac:	4632      	mov	r2, r6
  4125ae:	4629      	mov	r1, r5
  4125b0:	4620      	mov	r0, r4
  4125b2:	4b06      	ldr	r3, [pc, #24]	; (4125cc <lv_draw_rect+0x74>)
  4125b4:	4798      	blx	r3
  4125b6:	bd70      	pop	{r4, r5, r6, pc}
  4125b8:	004102b5 	.word	0x004102b5
  4125bc:	00411dbd 	.word	0x00411dbd
  4125c0:	004119f5 	.word	0x004119f5
  4125c4:	0041168d 	.word	0x0041168d
  4125c8:	00411cc9 	.word	0x00411cc9
  4125cc:	004115d1 	.word	0x004115d1

004125d0 <lv_img_buf_get_px_color>:
 * Not used in other cases.
 * @param safe true: check out of bounds
 * @return color of the point
 */
lv_color_t lv_img_buf_get_px_color(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_color_t color)
{
  4125d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4125d2:	b083      	sub	sp, #12
    lv_color_t p_color = LV_COLOR_BLACK;
  4125d4:	2400      	movs	r4, #0
  4125d6:	f8ad 4004 	strh.w	r4, [sp, #4]
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
  4125da:	6885      	ldr	r5, [r0, #8]

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED ||
  4125dc:	7804      	ldrb	r4, [r0, #0]
  4125de:	f004 041f 	and.w	r4, r4, #31
  4125e2:	2c06      	cmp	r4, #6
  4125e4:	bf18      	it	ne
  4125e6:	2c04      	cmpne	r4, #4
  4125e8:	d010      	beq.n	41260c <lv_img_buf_get_px_color+0x3c>
  4125ea:	2c05      	cmp	r4, #5
  4125ec:	d00e      	beq.n	41260c <lv_img_buf_get_px_color+0x3c>
        _lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
#if LV_COLOR_SIZE == 32
        p_color.ch.alpha = 0xFF; /*Only the color should be get so use a default alpha value*/
#endif
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT) {
  4125ee:	2c07      	cmp	r4, #7
  4125f0:	d02b      	beq.n	41264a <lv_img_buf_get_px_color+0x7a>
         * dsc->header.w + 7 means rounding up to 8 because the lines are byte aligned
         * so the possible real width are 8, 16, 24 ...*/
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_2BIT) {
  4125f2:	2c08      	cmp	r4, #8
  4125f4:	d03f      	beq.n	412676 <lv_img_buf_get_px_color+0xa6>
         * dsc->header.w + 3 means rounding up to 4 because the lines are byte aligned
         * so the possible real width are 4, 8, 12 ...*/
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_4BIT) {
  4125f6:	2c09      	cmp	r4, #9
  4125f8:	d055      	beq.n	4126a6 <lv_img_buf_get_px_color+0xd6>
         * dsc->header.w + 1 means rounding up to 2 because the lines are byte aligned
         * so the possible real width are 2, 4, 6 ...*/
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
  4125fa:	2c0a      	cmp	r4, #10
  4125fc:	d06c      	beq.n	4126d8 <lv_img_buf_get_px_color+0x108>
        buf_u8 += 4 * 256;
        uint32_t px  = dsc->header.w * y + x;
        p_color.full = buf_u8[px];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
  4125fe:	3c0b      	subs	r4, #11
  412600:	b2e4      	uxtb	r4, r4
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
  412602:	2c03      	cmp	r4, #3
  412604:	d81d      	bhi.n	412642 <lv_img_buf_get_px_color+0x72>
        p_color = color;
  412606:	f8ad 3004 	strh.w	r3, [sp, #4]
  41260a:	e01a      	b.n	412642 <lv_img_buf_get_px_color+0x72>
  41260c:	4616      	mov	r6, r2
  41260e:	460f      	mov	r7, r1
  412610:	4604      	mov	r4, r0
        uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf) >> 3;
  412612:	7800      	ldrb	r0, [r0, #0]
  412614:	f000 001f 	and.w	r0, r0, #31
  412618:	4b35      	ldr	r3, [pc, #212]	; (4126f0 <lv_img_buf_get_px_color+0x120>)
  41261a:	4798      	blx	r3
  41261c:	f3c0 00c7 	ubfx	r0, r0, #3, #8
        uint32_t px     = dsc->header.w * y * px_size + x * px_size;
  412620:	6822      	ldr	r2, [r4, #0]
  412622:	f3c2 228a 	ubfx	r2, r2, #10, #11
  412626:	fb02 7206 	mla	r2, r2, r6, r7
        _lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
  41262a:	fb00 5002 	mla	r0, r0, r2, r5
    uint8_t * d8 = (uint8_t *)dst;
  41262e:	aa01      	add	r2, sp, #4
  412630:	2302      	movs	r3, #2
  412632:	e004      	b.n	41263e <lv_img_buf_get_px_color+0x6e>
        *d8 = *s8;
  412634:	f810 1b01 	ldrb.w	r1, [r0], #1
  412638:	f802 1b01 	strb.w	r1, [r2], #1
        len--;
  41263c:	3b01      	subs	r3, #1
    while(len) {
  41263e:	2b00      	cmp	r3, #0
  412640:	d1f8      	bne.n	412634 <lv_img_buf_get_px_color+0x64>
    }
    return p_color;
}
  412642:	f8bd 0004 	ldrh.w	r0, [sp, #4]
  412646:	b003      	add	sp, #12
  412648:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint8_t bit = x & 0x7;
  41264a:	f001 0407 	and.w	r4, r1, #7
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
  41264e:	6800      	ldr	r0, [r0, #0]
  412650:	f3c0 208a 	ubfx	r0, r0, #10, #11
  412654:	3007      	adds	r0, #7
  412656:	10c0      	asrs	r0, r0, #3
  412658:	fb00 f202 	mul.w	r2, r0, r2
  41265c:	eb02 02e1 	add.w	r2, r2, r1, asr #3
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
  412660:	18a8      	adds	r0, r5, r2
  412662:	7a03      	ldrb	r3, [r0, #8]
  412664:	f1c4 0207 	rsb	r2, r4, #7
  412668:	2101      	movs	r1, #1
  41266a:	4091      	lsls	r1, r2
  41266c:	400b      	ands	r3, r1
  41266e:	4113      	asrs	r3, r2
  412670:	f8ad 3004 	strh.w	r3, [sp, #4]
  412674:	e7e5      	b.n	412642 <lv_img_buf_get_px_color+0x72>
        uint8_t bit = (x & 0x3) * 2;
  412676:	f001 0303 	and.w	r3, r1, #3
  41267a:	005b      	lsls	r3, r3, #1
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
  41267c:	6800      	ldr	r0, [r0, #0]
  41267e:	f3c0 208a 	ubfx	r0, r0, #10, #11
  412682:	3003      	adds	r0, #3
  412684:	1080      	asrs	r0, r0, #2
  412686:	fb00 f202 	mul.w	r2, r0, r2
  41268a:	eb02 02a1 	add.w	r2, r2, r1, asr #2
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
  41268e:	18a8      	adds	r0, r5, r2
  412690:	7c02      	ldrb	r2, [r0, #16]
  412692:	f1c3 0306 	rsb	r3, r3, #6
  412696:	2103      	movs	r1, #3
  412698:	4099      	lsls	r1, r3
  41269a:	400a      	ands	r2, r1
  41269c:	fa42 f303 	asr.w	r3, r2, r3
  4126a0:	f8ad 3004 	strh.w	r3, [sp, #4]
  4126a4:	e7cd      	b.n	412642 <lv_img_buf_get_px_color+0x72>
        uint8_t bit = (x & 0x1) * 4;
  4126a6:	f001 0301 	and.w	r3, r1, #1
  4126aa:	009b      	lsls	r3, r3, #2
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
  4126ac:	6800      	ldr	r0, [r0, #0]
  4126ae:	f3c0 208a 	ubfx	r0, r0, #10, #11
  4126b2:	3001      	adds	r0, #1
  4126b4:	1040      	asrs	r0, r0, #1
  4126b6:	fb00 f202 	mul.w	r2, r0, r2
  4126ba:	eb02 0261 	add.w	r2, r2, r1, asr #1
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
  4126be:	18a8      	adds	r0, r5, r2
  4126c0:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
  4126c4:	f1c3 0304 	rsb	r3, r3, #4
  4126c8:	210f      	movs	r1, #15
  4126ca:	4099      	lsls	r1, r3
  4126cc:	400a      	ands	r2, r1
  4126ce:	fa42 f303 	asr.w	r3, r2, r3
  4126d2:	f8ad 3004 	strh.w	r3, [sp, #4]
  4126d6:	e7b4      	b.n	412642 <lv_img_buf_get_px_color+0x72>
        uint32_t px  = dsc->header.w * y + x;
  4126d8:	6800      	ldr	r0, [r0, #0]
  4126da:	f3c0 208a 	ubfx	r0, r0, #10, #11
  4126de:	fb00 1202 	mla	r2, r0, r2, r1
        p_color.full = buf_u8[px];
  4126e2:	18a8      	adds	r0, r5, r2
  4126e4:	f890 3400 	ldrb.w	r3, [r0, #1024]	; 0x400
  4126e8:	f8ad 3004 	strh.w	r3, [sp, #4]
  4126ec:	e7a9      	b.n	412642 <lv_img_buf_get_px_color+0x72>
  4126ee:	bf00      	nop
  4126f0:	0040d419 	.word	0x0040d419

004126f4 <lv_img_buf_get_px_alpha>:
 * @param y x coordinate of the point to set
 * @param safe true: check out of bounds
 * @return alpha value of the point
 */
lv_opa_t lv_img_buf_get_px_alpha(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y)
{
  4126f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4126f6:	b085      	sub	sp, #20
  4126f8:	4604      	mov	r4, r0
  4126fa:	460e      	mov	r6, r1
  4126fc:	4617      	mov	r7, r2
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
  4126fe:	6885      	ldr	r5, [r0, #8]

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
  412700:	7803      	ldrb	r3, [r0, #0]
  412702:	f003 031f 	and.w	r3, r3, #31
  412706:	2b05      	cmp	r3, #5
  412708:	d00a      	beq.n	412720 <lv_img_buf_get_px_alpha+0x2c>
        uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE;
        return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT) {
  41270a:	2b0b      	cmp	r3, #11
  41270c:	d012      	beq.n	412734 <lv_img_buf_get_px_alpha+0x40>
         * so the possible real width are 8 ,16, 24 ...*/
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
        return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_2BIT) {
  41270e:	2b0c      	cmp	r3, #12
  412710:	d029      	beq.n	412766 <lv_img_buf_get_px_alpha+0x72>
         * so the possible real width are 4 ,8, 12 ...*/
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
        return opa_table[px_opa];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_4BIT) {
  412712:	2b0d      	cmp	r3, #13
  412714:	d043      	beq.n	41279e <lv_img_buf_get_px_alpha+0xaa>
         * so the possible real width are 2 ,4, 6 ...*/
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
        return opa_table[px_opa];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
  412716:	2b0e      	cmp	r3, #14
  412718:	d05f      	beq.n	4127da <lv_img_buf_get_px_alpha+0xe6>
        uint32_t px = dsc->header.w * y + x;
        return buf_u8[px];
    }

    return LV_OPA_COVER;
  41271a:	20ff      	movs	r0, #255	; 0xff
}
  41271c:	b005      	add	sp, #20
  41271e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE;
  412720:	6801      	ldr	r1, [r0, #0]
  412722:	f3c1 218a 	ubfx	r1, r1, #10, #11
  412726:	fb01 6102 	mla	r1, r1, r2, r6
  41272a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
        return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
  41272e:	440d      	add	r5, r1
  412730:	78a8      	ldrb	r0, [r5, #2]
  412732:	e7f3      	b.n	41271c <lv_img_buf_get_px_alpha+0x28>
        uint8_t bit = x & 0x7;
  412734:	f001 0207 	and.w	r2, r1, #7
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
  412738:	6801      	ldr	r1, [r0, #0]
  41273a:	f3c1 218a 	ubfx	r1, r1, #10, #11
  41273e:	3107      	adds	r1, #7
  412740:	10c9      	asrs	r1, r1, #3
  412742:	fb01 f107 	mul.w	r1, r1, r7
  412746:	eb01 01e6 	add.w	r1, r1, r6, asr #3
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
  41274a:	5c6b      	ldrb	r3, [r5, r1]
  41274c:	f1c2 0207 	rsb	r2, r2, #7
  412750:	2101      	movs	r1, #1
  412752:	4091      	lsls	r1, r2
  412754:	400b      	ands	r3, r1
  412756:	4113      	asrs	r3, r2
        return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
  412758:	f013 0fff 	tst.w	r3, #255	; 0xff
  41275c:	d101      	bne.n	412762 <lv_img_buf_get_px_alpha+0x6e>
  41275e:	20ff      	movs	r0, #255	; 0xff
  412760:	e7dc      	b.n	41271c <lv_img_buf_get_px_alpha+0x28>
  412762:	2000      	movs	r0, #0
  412764:	e7da      	b.n	41271c <lv_img_buf_get_px_alpha+0x28>
        const uint8_t opa_table[4] = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
  412766:	4b20      	ldr	r3, [pc, #128]	; (4127e8 <lv_img_buf_get_px_alpha+0xf4>)
  412768:	681b      	ldr	r3, [r3, #0]
  41276a:	9300      	str	r3, [sp, #0]
        uint8_t bit = (x & 0x3) * 2;
  41276c:	f001 0203 	and.w	r2, r1, #3
  412770:	0052      	lsls	r2, r2, #1
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
  412772:	6801      	ldr	r1, [r0, #0]
  412774:	f3c1 218a 	ubfx	r1, r1, #10, #11
  412778:	3103      	adds	r1, #3
  41277a:	1089      	asrs	r1, r1, #2
  41277c:	fb01 f107 	mul.w	r1, r1, r7
  412780:	eb01 01a6 	add.w	r1, r1, r6, asr #2
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
  412784:	5c6b      	ldrb	r3, [r5, r1]
  412786:	f1c2 0206 	rsb	r2, r2, #6
  41278a:	2103      	movs	r1, #3
  41278c:	4091      	lsls	r1, r2
  41278e:	400b      	ands	r3, r1
  412790:	4113      	asrs	r3, r2
        return opa_table[px_opa];
  412792:	aa04      	add	r2, sp, #16
  412794:	fa52 f383 	uxtab	r3, r2, r3
  412798:	f813 0c10 	ldrb.w	r0, [r3, #-16]
  41279c:	e7be      	b.n	41271c <lv_img_buf_get_px_alpha+0x28>
        const uint8_t opa_table[16] = {0,  17, 34,  51, /*Opacity mapping with bpp = 4*/
  41279e:	4b13      	ldr	r3, [pc, #76]	; (4127ec <lv_img_buf_get_px_alpha+0xf8>)
  4127a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4127a2:	f10d 0e10 	add.w	lr, sp, #16
  4127a6:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
        uint8_t bit = (x & 0x1) * 4;
  4127aa:	f006 0201 	and.w	r2, r6, #1
  4127ae:	0092      	lsls	r2, r2, #2
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
  4127b0:	6821      	ldr	r1, [r4, #0]
  4127b2:	f3c1 218a 	ubfx	r1, r1, #10, #11
  4127b6:	3101      	adds	r1, #1
  4127b8:	1049      	asrs	r1, r1, #1
  4127ba:	fb01 f107 	mul.w	r1, r1, r7
  4127be:	eb01 0166 	add.w	r1, r1, r6, asr #1
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
  4127c2:	5c6b      	ldrb	r3, [r5, r1]
  4127c4:	f1c2 0204 	rsb	r2, r2, #4
  4127c8:	210f      	movs	r1, #15
  4127ca:	4091      	lsls	r1, r2
  4127cc:	400b      	ands	r3, r1
  4127ce:	4113      	asrs	r3, r2
        return opa_table[px_opa];
  4127d0:	fa5e f383 	uxtab	r3, lr, r3
  4127d4:	f813 0c10 	ldrb.w	r0, [r3, #-16]
  4127d8:	e7a0      	b.n	41271c <lv_img_buf_get_px_alpha+0x28>
        uint32_t px = dsc->header.w * y + x;
  4127da:	6801      	ldr	r1, [r0, #0]
  4127dc:	f3c1 218a 	ubfx	r1, r1, #10, #11
  4127e0:	fb01 6102 	mla	r1, r1, r2, r6
        return buf_u8[px];
  4127e4:	5c68      	ldrb	r0, [r5, r1]
  4127e6:	e799      	b.n	41271c <lv_img_buf_get_px_alpha+0x28>
  4127e8:	0042c88c 	.word	0x0042c88c
  4127ec:	0042c890 	.word	0x0042c890

004127f0 <_lv_img_buf_transform_init>:
/**
 * Initialize a descriptor to transform an image
 * @param dsc pointer to an `lv_img_transform_dsc_t` variable whose `cfg` field is initialized
 */
void _lv_img_buf_transform_init(lv_img_transform_dsc_t * dsc)
{
  4127f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4127f4:	4604      	mov	r4, r0
    dsc->tmp.pivot_x_256 = dsc->cfg.pivot_x * 256;
  4127f6:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
  4127fa:	021b      	lsls	r3, r3, #8
  4127fc:	6243      	str	r3, [r0, #36]	; 0x24
    dsc->tmp.pivot_y_256 = dsc->cfg.pivot_y * 256;
  4127fe:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
  412802:	021b      	lsls	r3, r3, #8
  412804:	6283      	str	r3, [r0, #40]	; 0x28

    int32_t angle_low = dsc->cfg.angle / 10;
  412806:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
  41280a:	4e3f      	ldr	r6, [pc, #252]	; (412908 <_lv_img_buf_transform_init+0x118>)
  41280c:	fb86 3200 	smull	r3, r2, r6, r0
  412810:	17c3      	asrs	r3, r0, #31
  412812:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
  412816:	b21b      	sxth	r3, r3
    int32_t angle_high = angle_low + 1;
  412818:	f103 0901 	add.w	r9, r3, #1
    int32_t angle_rem = dsc->cfg.angle  - (angle_low * 10);
  41281c:	f06f 0709 	mvn.w	r7, #9
  412820:	fb07 0703 	mla	r7, r7, r3, r0

    int32_t s1 = _lv_trigo_sin(-angle_low);
  412824:	b29d      	uxth	r5, r3
  412826:	4268      	negs	r0, r5
  412828:	b200      	sxth	r0, r0
  41282a:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 412914 <_lv_img_buf_transform_init+0x124>
  41282e:	47d0      	blx	sl
  412830:	4680      	mov	r8, r0
    int32_t s2 = _lv_trigo_sin(-angle_high);
  412832:	fa1f f989 	uxth.w	r9, r9
  412836:	f1c9 0000 	rsb	r0, r9, #0
  41283a:	b200      	sxth	r0, r0
  41283c:	47d0      	blx	sl
  41283e:	4683      	mov	fp, r0

    int32_t c1 = _lv_trigo_sin(-angle_low + 90);
  412840:	f1c5 005a 	rsb	r0, r5, #90	; 0x5a
  412844:	b200      	sxth	r0, r0
  412846:	47d0      	blx	sl
  412848:	4605      	mov	r5, r0
    int32_t c2 = _lv_trigo_sin(-angle_high + 90);
  41284a:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
  41284e:	b200      	sxth	r0, r0
  412850:	47d0      	blx	sl

    dsc->tmp.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
  412852:	f1c7 020a 	rsb	r2, r7, #10
  412856:	fb0b f307 	mul.w	r3, fp, r7
  41285a:	fb02 3308 	mla	r3, r2, r8, r3
  41285e:	fb86 e103 	smull	lr, r1, r6, r3
  412862:	17db      	asrs	r3, r3, #31
  412864:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
    dsc->tmp.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
  412868:	fb00 f007 	mul.w	r0, r0, r7
  41286c:	fb02 0005 	mla	r0, r2, r5, r0
  412870:	fb86 2600 	smull	r2, r6, r6, r0
  412874:	17c0      	asrs	r0, r0, #31
  412876:	ebc0 00a6 	rsb	r0, r0, r6, asr #2

    /*Use smaller value to avoid overflow*/
    dsc->tmp.sinma = dsc->tmp.sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
  41287a:	115b      	asrs	r3, r3, #5
  41287c:	62e3      	str	r3, [r4, #44]	; 0x2c
    dsc->tmp.cosma = dsc->tmp.cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
  41287e:	1140      	asrs	r0, r0, #5
  412880:	6320      	str	r0, [r4, #48]	; 0x30

    dsc->tmp.chroma_keyed = lv_img_cf_is_chroma_keyed(dsc->cfg.cf) ? 1 : 0;
  412882:	7ca0      	ldrb	r0, [r4, #18]
  412884:	4b21      	ldr	r3, [pc, #132]	; (41290c <_lv_img_buf_transform_init+0x11c>)
  412886:	4798      	blx	r3
  412888:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  41288c:	f360 0300 	bfi	r3, r0, #0, #1
  412890:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
  412894:	7ca0      	ldrb	r0, [r4, #18]
  412896:	4b1e      	ldr	r3, [pc, #120]	; (412910 <_lv_img_buf_transform_init+0x120>)
  412898:	4798      	blx	r3
  41289a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  41289e:	f360 0341 	bfi	r3, r0, #1, #1
  4128a2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR || dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
  4128a6:	7ca2      	ldrb	r2, [r4, #18]
  4128a8:	1f13      	subs	r3, r2, #4
  4128aa:	b2db      	uxtb	r3, r3
  4128ac:	2b02      	cmp	r3, #2
  4128ae:	d924      	bls.n	4128fa <_lv_img_buf_transform_init+0x10a>
       dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
        dsc->tmp.native_color = 1;
    }
    else {
        dsc->tmp.native_color = 0;
  4128b0:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  4128b4:	f36f 0382 	bfc	r3, #2, #1
  4128b8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    }

    dsc->tmp.img_dsc.data = dsc->cfg.src;
  4128bc:	6823      	ldr	r3, [r4, #0]
  4128be:	6223      	str	r3, [r4, #32]
    dsc->tmp.img_dsc.header.always_zero = 0;
  4128c0:	7e23      	ldrb	r3, [r4, #24]
    dsc->tmp.img_dsc.header.cf = dsc->cfg.cf;
  4128c2:	f003 031f 	and.w	r3, r3, #31
  4128c6:	f362 0304 	bfi	r3, r2, #0, #5
  4128ca:	7623      	strb	r3, [r4, #24]
    dsc->tmp.img_dsc.header.w = dsc->cfg.src_w;
  4128cc:	88a2      	ldrh	r2, [r4, #4]
  4128ce:	69a3      	ldr	r3, [r4, #24]
  4128d0:	f362 2394 	bfi	r3, r2, #10, #11
  4128d4:	61a3      	str	r3, [r4, #24]
    dsc->tmp.img_dsc.header.h = dsc->cfg.src_h;
  4128d6:	88e2      	ldrh	r2, [r4, #6]
  4128d8:	0c1b      	lsrs	r3, r3, #16
  4128da:	f362 134f 	bfi	r3, r2, #5, #11
  4128de:	8363      	strh	r3, [r4, #26]

    /* The inverse of the zoom will be sued during the transformation
     *  + dsc->cfg.zoom / 2 for rounding*/
    dsc->tmp.zoom_inv = (((256 * 256) << _LV_ZOOM_INV_UPSCALE) + dsc->cfg.zoom / 2) / dsc->cfg.zoom;
  4128e0:	89e2      	ldrh	r2, [r4, #14]
  4128e2:	0853      	lsrs	r3, r2, #1
  4128e4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4128e8:	fb93 f3f2 	sdiv	r3, r3, r2
  4128ec:	63a3      	str	r3, [r4, #56]	; 0x38

    dsc->res.opa = LV_OPA_COVER;
  4128ee:	23ff      	movs	r3, #255	; 0xff
  4128f0:	75a3      	strb	r3, [r4, #22]
    dsc->res.color = dsc->cfg.color;
  4128f2:	8a23      	ldrh	r3, [r4, #16]
  4128f4:	82a3      	strh	r3, [r4, #20]
  4128f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        dsc->tmp.native_color = 1;
  4128fa:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  4128fe:	f043 0304 	orr.w	r3, r3, #4
  412902:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  412906:	e7d9      	b.n	4128bc <_lv_img_buf_transform_init+0xcc>
  412908:	66666667 	.word	0x66666667
  41290c:	0040d44b 	.word	0x0040d44b
  412910:	0040d45f 	.word	0x0040d45f
  412914:	00416569 	.word	0x00416569

00412918 <_lv_img_buf_get_transformed_area>:
 * @param zoom zoom, (256 no zoom)
 * @param pivot x,y pivot coordinates of rotation
 */
void _lv_img_buf_get_transformed_area(lv_area_t * res, lv_coord_t w, lv_coord_t h, int16_t angle, uint16_t zoom,
                                      const lv_point_t * pivot)
{
  412918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41291c:	b083      	sub	sp, #12
  41291e:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
  412922:	9d0d      	ldr	r5, [sp, #52]	; 0x34
#if LV_USE_IMG_TRANSFORM
    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) {
  412924:	2b00      	cmp	r3, #0
  412926:	bf08      	it	eq
  412928:	f5be 7f80 	cmpeq.w	lr, #256	; 0x100
  41292c:	d109      	bne.n	412942 <_lv_img_buf_get_transformed_area+0x2a>
        res->x1 = 0;
  41292e:	2300      	movs	r3, #0
  412930:	8003      	strh	r3, [r0, #0]
        res->y1 = 0;
  412932:	8043      	strh	r3, [r0, #2]
        res->x2 = w - 1;
  412934:	3901      	subs	r1, #1
  412936:	8081      	strh	r1, [r0, #4]
        res->y2 = h - 1;
  412938:	3a01      	subs	r2, #1
  41293a:	80c2      	strh	r2, [r0, #6]
    res->x1 = 0;
    res->y1 = 0;
    res->x2 = w - 1;
    res->y2 = h - 1;
#endif
}
  41293c:	b003      	add	sp, #12
  41293e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412942:	461f      	mov	r7, r3
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
  412944:	f9b5 6000 	ldrsh.w	r6, [r5]
  412948:	4276      	negs	r6, r6
  41294a:	fb0e f606 	mul.w	r6, lr, r6
  41294e:	1236      	asrs	r6, r6, #8
  412950:	3e01      	subs	r6, #1
  412952:	b2b6      	uxth	r6, r6
  412954:	8006      	strh	r6, [r0, #0]
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
  412956:	f9b5 4002 	ldrsh.w	r4, [r5, #2]
  41295a:	4264      	negs	r4, r4
  41295c:	fb04 f40e 	mul.w	r4, r4, lr
  412960:	1224      	asrs	r4, r4, #8
  412962:	3c01      	subs	r4, #1
  412964:	b2a4      	uxth	r4, r4
  412966:	8044      	strh	r4, [r0, #2]
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
  412968:	f9b5 3000 	ldrsh.w	r3, [r5]
  41296c:	1ac9      	subs	r1, r1, r3
  41296e:	fb01 f10e 	mul.w	r1, r1, lr
  412972:	1209      	asrs	r1, r1, #8
  412974:	3102      	adds	r1, #2
  412976:	b289      	uxth	r1, r1
  412978:	8081      	strh	r1, [r0, #4]
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
  41297a:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  41297e:	1ad3      	subs	r3, r2, r3
  412980:	fb03 f30e 	mul.w	r3, r3, lr
  412984:	121b      	asrs	r3, r3, #8
  412986:	3302      	adds	r3, #2
  412988:	b29b      	uxth	r3, r3
  41298a:	80c3      	strh	r3, [r0, #6]
    if(angle == 0) {
  41298c:	b967      	cbnz	r7, 4129a8 <_lv_img_buf_get_transformed_area+0x90>
        res->x1 += pivot->x;
  41298e:	882a      	ldrh	r2, [r5, #0]
  412990:	4416      	add	r6, r2
  412992:	8006      	strh	r6, [r0, #0]
        res->y1 += pivot->y;
  412994:	886a      	ldrh	r2, [r5, #2]
  412996:	4414      	add	r4, r2
  412998:	8044      	strh	r4, [r0, #2]
        res->x2 += pivot->x;
  41299a:	882a      	ldrh	r2, [r5, #0]
  41299c:	4411      	add	r1, r2
  41299e:	8081      	strh	r1, [r0, #4]
        res->y2 += pivot->y;
  4129a0:	886a      	ldrh	r2, [r5, #2]
  4129a2:	4413      	add	r3, r2
  4129a4:	80c3      	strh	r3, [r0, #6]
        return;
  4129a6:	e7c9      	b.n	41293c <_lv_img_buf_get_transformed_area+0x24>
  4129a8:	4604      	mov	r4, r0
    int32_t angle_low = angle / 10;
  4129aa:	f8df 8150 	ldr.w	r8, [pc, #336]	; 412afc <_lv_img_buf_get_transformed_area+0x1e4>
  4129ae:	fb88 3007 	smull	r3, r0, r8, r7
  4129b2:	17fe      	asrs	r6, r7, #31
  4129b4:	ebc6 06a0 	rsb	r6, r6, r0, asr #2
  4129b8:	b236      	sxth	r6, r6
    int32_t angle_high = angle_low + 1;
  4129ba:	f106 0a01 	add.w	sl, r6, #1
    int32_t angle_rem = angle  - (angle_low * 10);
  4129be:	f06f 0009 	mvn.w	r0, #9
  4129c2:	fb00 7706 	mla	r7, r0, r6, r7
    int32_t s1 = _lv_trigo_sin(angle_low);
  4129c6:	4630      	mov	r0, r6
  4129c8:	f8df 9134 	ldr.w	r9, [pc, #308]	; 412b00 <_lv_img_buf_get_transformed_area+0x1e8>
  4129cc:	47c8      	blx	r9
  4129ce:	9001      	str	r0, [sp, #4]
    int32_t s2 = _lv_trigo_sin(angle_high);
  4129d0:	fa0f f08a 	sxth.w	r0, sl
  4129d4:	47c8      	blx	r9
  4129d6:	4683      	mov	fp, r0
    int32_t c1 = _lv_trigo_sin(angle_low + 90);
  4129d8:	f106 005a 	add.w	r0, r6, #90	; 0x5a
  4129dc:	b200      	sxth	r0, r0
  4129de:	47c8      	blx	r9
  4129e0:	4606      	mov	r6, r0
    int32_t c2 = _lv_trigo_sin(angle_high + 90);
  4129e2:	f10a 005a 	add.w	r0, sl, #90	; 0x5a
  4129e6:	b200      	sxth	r0, r0
  4129e8:	47c8      	blx	r9
    int32_t sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
  4129ea:	f1c7 030a 	rsb	r3, r7, #10
  4129ee:	fb0b fb07 	mul.w	fp, fp, r7
  4129f2:	9a01      	ldr	r2, [sp, #4]
  4129f4:	fb03 bb02 	mla	fp, r3, r2, fp
  4129f8:	fb88 210b 	smull	r2, r1, r8, fp
  4129fc:	ea4f 72eb 	mov.w	r2, fp, asr #31
  412a00:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    int32_t cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
  412a04:	fb00 f007 	mul.w	r0, r0, r7
  412a08:	fb03 0606 	mla	r6, r3, r6, r0
  412a0c:	fb88 3806 	smull	r3, r8, r8, r6
  412a10:	17f6      	asrs	r6, r6, #31
  412a12:	ebc6 08a8 	rsb	r8, r6, r8, asr #2
    sinma = sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
  412a16:	1152      	asrs	r2, r2, #5
    cosma = cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
  412a18:	ea4f 1868 	mov.w	r8, r8, asr #5
    xt = res->x1;
  412a1c:	f9b4 0000 	ldrsh.w	r0, [r4]
    yt = res->y1;
  412a20:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
  412a24:	fb00 f608 	mul.w	r6, r0, r8
  412a28:	fb03 f102 	mul.w	r1, r3, r2
  412a2c:	eba6 0c01 	sub.w	ip, r6, r1
  412a30:	882f      	ldrh	r7, [r5, #0]
  412a32:	eb07 2cac 	add.w	ip, r7, ip, asr #10
  412a36:	fa0f fc8c 	sxth.w	ip, ip
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
  412a3a:	fb00 f002 	mul.w	r0, r0, r2
  412a3e:	fb03 f308 	mul.w	r3, r3, r8
  412a42:	eb00 0e03 	add.w	lr, r0, r3
  412a46:	886d      	ldrh	r5, [r5, #2]
  412a48:	eb05 2eae 	add.w	lr, r5, lr, asr #10
  412a4c:	fa0f fe8e 	sxth.w	lr, lr
    xt = res->x2;
  412a50:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
  412a54:	fb09 fb08 	mul.w	fp, r9, r8
  412a58:	ebab 0101 	sub.w	r1, fp, r1
  412a5c:	eb07 21a1 	add.w	r1, r7, r1, asr #10
  412a60:	b209      	sxth	r1, r1
    rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
  412a62:	fb09 f902 	mul.w	r9, r9, r2
  412a66:	444b      	add	r3, r9
  412a68:	eb05 23a3 	add.w	r3, r5, r3, asr #10
  412a6c:	b21b      	sxth	r3, r3
    yt = res->y2;
  412a6e:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
  412a72:	fb0a f202 	mul.w	r2, sl, r2
  412a76:	1ab6      	subs	r6, r6, r2
  412a78:	eb07 26a6 	add.w	r6, r7, r6, asr #10
  412a7c:	b236      	sxth	r6, r6
    lb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
  412a7e:	fb0a f808 	mul.w	r8, sl, r8
  412a82:	4440      	add	r0, r8
  412a84:	eb05 20a0 	add.w	r0, r5, r0, asr #10
  412a88:	b200      	sxth	r0, r0
    rb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
  412a8a:	ebab 0202 	sub.w	r2, fp, r2
  412a8e:	eb07 27a2 	add.w	r7, r7, r2, asr #10
  412a92:	b23f      	sxth	r7, r7
    rb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
  412a94:	44c8      	add	r8, r9
  412a96:	eb05 25a8 	add.w	r5, r5, r8, asr #10
  412a9a:	b22d      	sxth	r5, r5
    res->x1 = LV_MATH_MIN4(lb.x, lt.x, rb.x, rt.x);
  412a9c:	460a      	mov	r2, r1
  412a9e:	42b9      	cmp	r1, r7
  412aa0:	bfa8      	it	ge
  412aa2:	463a      	movge	r2, r7
  412aa4:	46e0      	mov	r8, ip
  412aa6:	45b4      	cmp	ip, r6
  412aa8:	bfa8      	it	ge
  412aaa:	46b0      	movge	r8, r6
  412aac:	4542      	cmp	r2, r8
  412aae:	bfa8      	it	ge
  412ab0:	4642      	movge	r2, r8
  412ab2:	8022      	strh	r2, [r4, #0]
    res->x2 = LV_MATH_MAX4(lb.x, lt.x, rb.x, rt.x);
  412ab4:	42b9      	cmp	r1, r7
  412ab6:	bfb8      	it	lt
  412ab8:	4639      	movlt	r1, r7
  412aba:	45b4      	cmp	ip, r6
  412abc:	bfb8      	it	lt
  412abe:	46b4      	movlt	ip, r6
  412ac0:	458c      	cmp	ip, r1
  412ac2:	bfb8      	it	lt
  412ac4:	468c      	movlt	ip, r1
  412ac6:	f8a4 c004 	strh.w	ip, [r4, #4]
    res->y1 = LV_MATH_MIN4(lb.y, lt.y, rb.y, rt.y);
  412aca:	461a      	mov	r2, r3
  412acc:	42ab      	cmp	r3, r5
  412ace:	bfa8      	it	ge
  412ad0:	462a      	movge	r2, r5
  412ad2:	4671      	mov	r1, lr
  412ad4:	4586      	cmp	lr, r0
  412ad6:	bfa8      	it	ge
  412ad8:	4601      	movge	r1, r0
  412ada:	428a      	cmp	r2, r1
  412adc:	bfa8      	it	ge
  412ade:	460a      	movge	r2, r1
  412ae0:	8062      	strh	r2, [r4, #2]
    res->y2 = LV_MATH_MAX4(lb.y, lt.y, rb.y, rt.y);
  412ae2:	429d      	cmp	r5, r3
  412ae4:	bfb8      	it	lt
  412ae6:	461d      	movlt	r5, r3
  412ae8:	4586      	cmp	lr, r0
  412aea:	bfb8      	it	lt
  412aec:	4686      	movlt	lr, r0
  412aee:	45ae      	cmp	lr, r5
  412af0:	bfb8      	it	lt
  412af2:	46ae      	movlt	lr, r5
  412af4:	f8a4 e006 	strh.w	lr, [r4, #6]
  412af8:	e720      	b.n	41293c <_lv_img_buf_get_transformed_area+0x24>
  412afa:	bf00      	nop
  412afc:	66666667 	.word	0x66666667
  412b00:	00416569 	.word	0x00416569

00412b04 <_lv_img_buf_transform_anti_alias>:
/**
 * Continue transformation by taking the neighbors into account
 * @param dsc pointer to the transformation descriptor
 */
bool _lv_img_buf_transform_anti_alias(lv_img_transform_dsc_t * dsc)
{
  412b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  412b08:	b089      	sub	sp, #36	; 0x24
  412b0a:	4604      	mov	r4, r0
    const uint8_t * src_u8 = dsc->cfg.src;
  412b0c:	6801      	ldr	r1, [r0, #0]

    /*Get the fractional part of the source pixel*/
    int xs_fract = dsc->tmp.xs & 0xff;
  412b0e:	f9b0 603c 	ldrsh.w	r6, [r0, #60]	; 0x3c
  412b12:	b2f2      	uxtb	r2, r6
    int ys_fract = dsc->tmp.ys & 0xff;
  412b14:	f9b0 503e 	ldrsh.w	r5, [r0, #62]	; 0x3e
  412b18:	b2eb      	uxtb	r3, r5
    int32_t xn;      /*x neighbor*/
    lv_opa_t xr; /*x mix ratio*/

    if(xs_fract < 0x70) {
  412b1a:	2a6f      	cmp	r2, #111	; 0x6f
  412b1c:	dc28      	bgt.n	412b70 <_lv_img_buf_transform_anti_alias+0x6c>
        xn = - 1;
        if(dsc->tmp.xs_int + xn < 0) xn = 0;
  412b1e:	f9b0 2040 	ldrsh.w	r2, [r0, #64]	; 0x40
  412b22:	2a01      	cmp	r2, #1
  412b24:	d422      	bmi.n	412b6c <_lv_img_buf_transform_anti_alias+0x68>
        xn = - 1;
  412b26:	f04f 37ff 	mov.w	r7, #4294967295
        xr = xs_fract + 0x80;
  412b2a:	b2f6      	uxtb	r6, r6
  412b2c:	f086 0680 	eor.w	r6, r6, #128	; 0x80
    }

    int32_t yn;      /*x neighbor*/
    lv_opa_t yr; /*x mix ratio*/

    if(ys_fract < 0x70) {
  412b30:	2b6f      	cmp	r3, #111	; 0x6f
  412b32:	dc34      	bgt.n	412b9e <_lv_img_buf_transform_anti_alias+0x9a>
        yn = - 1;
        if(dsc->tmp.ys_int + yn < 0) yn = 0;
  412b34:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
  412b38:	2b01      	cmp	r3, #1
  412b3a:	d42d      	bmi.n	412b98 <_lv_img_buf_transform_anti_alias+0x94>
        yn = - 1;
  412b3c:	f04f 38ff 	mov.w	r8, #4294967295

        yr = ys_fract + 0x80;
  412b40:	b2ed      	uxtb	r5, r5
  412b42:	f085 0580 	eor.w	r5, r5, #128	; 0x80
    else {
        yn = 0;
        yr = 0xFF;
    }

    lv_color_t c00 = dsc->res.color;
  412b46:	f8b4 9014 	ldrh.w	r9, [r4, #20]
    lv_color_t c01;
    lv_color_t c10;
    lv_color_t c11;

    lv_opa_t a00 = dsc->res.opa;
  412b4a:	f894 a016 	ldrb.w	sl, [r4, #22]
    lv_opa_t a10 = 0;
    lv_opa_t a01 = 0;
    lv_opa_t a11 = 0;

    if(dsc->tmp.native_color) {
  412b4e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  412b52:	f013 0f04 	tst.w	r3, #4
  412b56:	f000 808b 	beq.w	412c70 <_lv_img_buf_transform_anti_alias+0x16c>
        _lv_memcpy_small(&c01, &src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn], sizeof(lv_color_t));
  412b5a:	6c62      	ldr	r2, [r4, #68]	; 0x44
  412b5c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
  412b60:	fb03 2307 	mla	r3, r3, r7, r2
  412b64:	440b      	add	r3, r1
    uint8_t * d8 = (uint8_t *)dst;
  412b66:	a807      	add	r0, sp, #28
  412b68:	2202      	movs	r2, #2
  412b6a:	e034      	b.n	412bd6 <_lv_img_buf_transform_anti_alias+0xd2>
        if(dsc->tmp.xs_int + xn < 0) xn = 0;
  412b6c:	2700      	movs	r7, #0
  412b6e:	e7dc      	b.n	412b2a <_lv_img_buf_transform_anti_alias+0x26>
    else if(xs_fract > 0x90) {
  412b70:	2a90      	cmp	r2, #144	; 0x90
  412b72:	dd0e      	ble.n	412b92 <_lv_img_buf_transform_anti_alias+0x8e>
        if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
  412b74:	f9b0 2040 	ldrsh.w	r2, [r0, #64]	; 0x40
  412b78:	3201      	adds	r2, #1
  412b7a:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
  412b7e:	4282      	cmp	r2, r0
  412b80:	da05      	bge.n	412b8e <_lv_img_buf_transform_anti_alias+0x8a>
        xn =  1;
  412b82:	2701      	movs	r7, #1
        xr = (0xFF - xs_fract) + 0x80;
  412b84:	b2f6      	uxtb	r6, r6
  412b86:	f1c6 067f 	rsb	r6, r6, #127	; 0x7f
  412b8a:	b2f6      	uxtb	r6, r6
  412b8c:	e7d0      	b.n	412b30 <_lv_img_buf_transform_anti_alias+0x2c>
        if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
  412b8e:	2700      	movs	r7, #0
  412b90:	e7f8      	b.n	412b84 <_lv_img_buf_transform_anti_alias+0x80>
        xr = 0xFF;
  412b92:	26ff      	movs	r6, #255	; 0xff
        xn = 0;
  412b94:	2700      	movs	r7, #0
  412b96:	e7cb      	b.n	412b30 <_lv_img_buf_transform_anti_alias+0x2c>
        if(dsc->tmp.ys_int + yn < 0) yn = 0;
  412b98:	f04f 0800 	mov.w	r8, #0
  412b9c:	e7d0      	b.n	412b40 <_lv_img_buf_transform_anti_alias+0x3c>
    else if(ys_fract > 0x90) {
  412b9e:	2b90      	cmp	r3, #144	; 0x90
  412ba0:	dd10      	ble.n	412bc4 <_lv_img_buf_transform_anti_alias+0xc0>
        if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;
  412ba2:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
  412ba6:	3301      	adds	r3, #1
  412ba8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
  412bac:	4293      	cmp	r3, r2
  412bae:	da06      	bge.n	412bbe <_lv_img_buf_transform_anti_alias+0xba>
        yn =  1;
  412bb0:	f04f 0801 	mov.w	r8, #1
        yr = (0xFF - ys_fract) + 0x80;
  412bb4:	b2ed      	uxtb	r5, r5
  412bb6:	f1c5 057f 	rsb	r5, r5, #127	; 0x7f
  412bba:	b2ed      	uxtb	r5, r5
  412bbc:	e7c3      	b.n	412b46 <_lv_img_buf_transform_anti_alias+0x42>
        if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;
  412bbe:	f04f 0800 	mov.w	r8, #0
  412bc2:	e7f7      	b.n	412bb4 <_lv_img_buf_transform_anti_alias+0xb0>
        yr = 0xFF;
  412bc4:	25ff      	movs	r5, #255	; 0xff
        yn = 0;
  412bc6:	f04f 0800 	mov.w	r8, #0
  412bca:	e7bc      	b.n	412b46 <_lv_img_buf_transform_anti_alias+0x42>
        *d8 = *s8;
  412bcc:	f813 eb01 	ldrb.w	lr, [r3], #1
  412bd0:	f800 eb01 	strb.w	lr, [r0], #1
        len--;
  412bd4:	3a01      	subs	r2, #1
    while(len) {
  412bd6:	2a00      	cmp	r2, #0
  412bd8:	d1f8      	bne.n	412bcc <_lv_img_buf_transform_anti_alias+0xc8>
        _lv_memcpy_small(&c10, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn], sizeof(lv_color_t));
  412bda:	6c62      	ldr	r2, [r4, #68]	; 0x44
  412bdc:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
  412be0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
  412be4:	fb03 f300 	mul.w	r3, r3, r0
  412be8:	fb03 2308 	mla	r3, r3, r8, r2
  412bec:	440b      	add	r3, r1
    uint8_t * d8 = (uint8_t *)dst;
  412bee:	a806      	add	r0, sp, #24
  412bf0:	2202      	movs	r2, #2
  412bf2:	e004      	b.n	412bfe <_lv_img_buf_transform_anti_alias+0xfa>
        *d8 = *s8;
  412bf4:	f813 eb01 	ldrb.w	lr, [r3], #1
  412bf8:	f800 eb01 	strb.w	lr, [r0], #1
        len--;
  412bfc:	3a01      	subs	r2, #1
    while(len) {
  412bfe:	2a00      	cmp	r2, #0
  412c00:	d1f8      	bne.n	412bf4 <_lv_img_buf_transform_anti_alias+0xf0>
        _lv_memcpy_small(&c11, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn],
  412c02:	6c60      	ldr	r0, [r4, #68]	; 0x44
  412c04:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
  412c08:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  412c0c:	fb03 f302 	mul.w	r3, r3, r2
  412c10:	fb03 f308 	mul.w	r3, r3, r8
  412c14:	fb02 3307 	mla	r3, r2, r7, r3
  412c18:	4403      	add	r3, r0
  412c1a:	440b      	add	r3, r1
    uint8_t * d8 = (uint8_t *)dst;
  412c1c:	a805      	add	r0, sp, #20
  412c1e:	2202      	movs	r2, #2
  412c20:	e004      	b.n	412c2c <_lv_img_buf_transform_anti_alias+0x128>
        *d8 = *s8;
  412c22:	f813 eb01 	ldrb.w	lr, [r3], #1
  412c26:	f800 eb01 	strb.w	lr, [r0], #1
        len--;
  412c2a:	3a01      	subs	r2, #1
    while(len) {
  412c2c:	2a00      	cmp	r2, #0
  412c2e:	d1f8      	bne.n	412c22 <_lv_img_buf_transform_anti_alias+0x11e>
                         sizeof(lv_color_t));
        if(dsc->tmp.has_alpha) {
  412c30:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  412c34:	f013 0f02 	tst.w	r3, #2
  412c38:	d06a      	beq.n	412d10 <_lv_img_buf_transform_anti_alias+0x20c>
            a10 = src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
  412c3a:	6c60      	ldr	r0, [r4, #68]	; 0x44
  412c3c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
  412c40:	fb03 f207 	mul.w	r2, r3, r7
  412c44:	1887      	adds	r7, r0, r2
  412c46:	441f      	add	r7, r3
  412c48:	3f01      	subs	r7, #1
  412c4a:	f811 b007 	ldrb.w	fp, [r1, r7]
            a01 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size - 1];
  412c4e:	f9b4 7004 	ldrsh.w	r7, [r4, #4]
  412c52:	fb07 f703 	mul.w	r7, r7, r3
  412c56:	fb07 f808 	mul.w	r8, r7, r8
  412c5a:	eb00 0708 	add.w	r7, r0, r8
  412c5e:	441f      	add	r7, r3
  412c60:	3f01      	subs	r7, #1
  412c62:	5dcf      	ldrb	r7, [r1, r7]
            a11 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
  412c64:	4442      	add	r2, r8
  412c66:	4402      	add	r2, r0
  412c68:	4413      	add	r3, r2
  412c6a:	3b01      	subs	r3, #1
  412c6c:	5cc8      	ldrb	r0, [r1, r3]
  412c6e:	e052      	b.n	412d16 <_lv_img_buf_transform_anti_alias+0x212>
        }
    }
    else {
        c01 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int, dsc->cfg.color);
  412c70:	f104 0318 	add.w	r3, r4, #24
  412c74:	4618      	mov	r0, r3
  412c76:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
  412c7a:	b2bf      	uxth	r7, r7
  412c7c:	4439      	add	r1, r7
  412c7e:	8a23      	ldrh	r3, [r4, #16]
  412c80:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
  412c84:	b209      	sxth	r1, r1
  412c86:	9001      	str	r0, [sp, #4]
  412c88:	f8df b300 	ldr.w	fp, [pc, #768]	; 412f8c <_lv_img_buf_transform_anti_alias+0x488>
  412c8c:	47d8      	blx	fp
  412c8e:	f8ad 001c 	strh.w	r0, [sp, #28]
        c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc->cfg.color);
  412c92:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
  412c96:	fa1f f888 	uxth.w	r8, r8
  412c9a:	4442      	add	r2, r8
  412c9c:	8a23      	ldrh	r3, [r4, #16]
  412c9e:	b212      	sxth	r2, r2
  412ca0:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
  412ca4:	9801      	ldr	r0, [sp, #4]
  412ca6:	47d8      	blx	fp
  412ca8:	f8ad 0018 	strh.w	r0, [sp, #24]
        c11 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn, dsc->cfg.color);
  412cac:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
  412cb0:	4439      	add	r1, r7
  412cb2:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
  412cb6:	4442      	add	r2, r8
  412cb8:	8a23      	ldrh	r3, [r4, #16]
  412cba:	b212      	sxth	r2, r2
  412cbc:	b209      	sxth	r1, r1
  412cbe:	9801      	ldr	r0, [sp, #4]
  412cc0:	47d8      	blx	fp
  412cc2:	f8ad 0014 	strh.w	r0, [sp, #20]

        if(dsc->tmp.has_alpha) {
  412cc6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  412cca:	f013 0f02 	tst.w	r3, #2
  412cce:	d058      	beq.n	412d82 <_lv_img_buf_transform_anti_alias+0x27e>
            a10 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int);
  412cd0:	f9b4 2040 	ldrsh.w	r2, [r4, #64]	; 0x40
  412cd4:	9202      	str	r2, [sp, #8]
  412cd6:	fa17 f782 	uxtah	r7, r7, r2
  412cda:	b23f      	sxth	r7, r7
  412cdc:	463b      	mov	r3, r7
  412cde:	f9b4 7042 	ldrsh.w	r7, [r4, #66]	; 0x42
  412ce2:	463a      	mov	r2, r7
  412ce4:	9303      	str	r3, [sp, #12]
  412ce6:	4619      	mov	r1, r3
  412ce8:	9801      	ldr	r0, [sp, #4]
  412cea:	4ba7      	ldr	r3, [pc, #668]	; (412f88 <_lv_img_buf_transform_anti_alias+0x484>)
  412cec:	4798      	blx	r3
  412cee:	4683      	mov	fp, r0
            a01 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn);
  412cf0:	fa18 f887 	uxtah	r8, r8, r7
  412cf4:	fa0f f888 	sxth.w	r8, r8
  412cf8:	4642      	mov	r2, r8
  412cfa:	9902      	ldr	r1, [sp, #8]
  412cfc:	9801      	ldr	r0, [sp, #4]
  412cfe:	4fa2      	ldr	r7, [pc, #648]	; (412f88 <_lv_img_buf_transform_anti_alias+0x484>)
  412d00:	47b8      	blx	r7
  412d02:	4607      	mov	r7, r0
            a11 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn);
  412d04:	4642      	mov	r2, r8
  412d06:	9903      	ldr	r1, [sp, #12]
  412d08:	9801      	ldr	r0, [sp, #4]
  412d0a:	4b9f      	ldr	r3, [pc, #636]	; (412f88 <_lv_img_buf_transform_anti_alias+0x484>)
  412d0c:	4798      	blx	r3
  412d0e:	e002      	b.n	412d16 <_lv_img_buf_transform_anti_alias+0x212>
    lv_opa_t a11 = 0;
  412d10:	2000      	movs	r0, #0
    lv_opa_t a01 = 0;
  412d12:	4607      	mov	r7, r0
    lv_opa_t a10 = 0;
  412d14:	4683      	mov	fp, r0
        }
    }

    lv_opa_t xr0 = xr;
    lv_opa_t xr1 = xr;
    if(dsc->tmp.has_alpha) {
  412d16:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  412d1a:	f013 0f02 	tst.w	r3, #2
  412d1e:	d036      	beq.n	412d8e <_lv_img_buf_transform_anti_alias+0x28a>
        lv_opa_t a0 = (a00 * xr + (a10 * (255 - xr))) >> 8;
  412d20:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
  412d24:	fb03 f10b 	mul.w	r1, r3, fp
  412d28:	fb06 110a 	mla	r1, r6, sl, r1
  412d2c:	f3c1 2107 	ubfx	r1, r1, #8, #8
        lv_opa_t a1 = (a01 * xr + (a11 * (255 - xr))) >> 8;
  412d30:	fb03 f300 	mul.w	r3, r3, r0
  412d34:	fb06 3307 	mla	r3, r6, r7, r3
  412d38:	f3c3 2307 	ubfx	r3, r3, #8, #8
        dsc->res.opa = (a0 * yr + (a1 * (255 - yr))) >> 8;
  412d3c:	f1c5 02ff 	rsb	r2, r5, #255	; 0xff
  412d40:	fb02 f203 	mul.w	r2, r2, r3
  412d44:	fb05 2201 	mla	r2, r5, r1, r2
  412d48:	1212      	asrs	r2, r2, #8
  412d4a:	75a2      	strb	r2, [r4, #22]

        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
  412d4c:	2902      	cmp	r1, #2
  412d4e:	bf98      	it	ls
  412d50:	2b02      	cmpls	r3, #2
  412d52:	f240 8117 	bls.w	412f84 <_lv_img_buf_transform_anti_alias+0x480>
        if(a0 <= LV_OPA_MIN) yr = LV_OPA_TRANSP;
  412d56:	2902      	cmp	r1, #2
  412d58:	d800      	bhi.n	412d5c <_lv_img_buf_transform_anti_alias+0x258>
  412d5a:	2500      	movs	r5, #0
        if(a1 <= LV_OPA_MIN) yr = LV_OPA_COVER;
  412d5c:	2b02      	cmp	r3, #2
  412d5e:	d800      	bhi.n	412d62 <_lv_img_buf_transform_anti_alias+0x25e>
  412d60:	25ff      	movs	r5, #255	; 0xff
        if(a00 <= LV_OPA_MIN) xr0 = LV_OPA_TRANSP;
  412d62:	f1ba 0f02 	cmp.w	sl, #2
  412d66:	d910      	bls.n	412d8a <_lv_img_buf_transform_anti_alias+0x286>
    lv_opa_t xr0 = xr;
  412d68:	4632      	mov	r2, r6
        if(a10 <= LV_OPA_MIN) xr0 = LV_OPA_COVER;
  412d6a:	f1bb 0f02 	cmp.w	fp, #2
  412d6e:	d800      	bhi.n	412d72 <_lv_img_buf_transform_anti_alias+0x26e>
  412d70:	22ff      	movs	r2, #255	; 0xff
        if(a01 <= LV_OPA_MIN) xr1 = LV_OPA_TRANSP;
  412d72:	2f02      	cmp	r7, #2
  412d74:	d800      	bhi.n	412d78 <_lv_img_buf_transform_anti_alias+0x274>
  412d76:	2600      	movs	r6, #0
        if(a11 <= LV_OPA_MIN) xr1 = LV_OPA_COVER;
  412d78:	2802      	cmp	r0, #2
  412d7a:	d962      	bls.n	412e42 <_lv_img_buf_transform_anti_alias+0x33e>
  412d7c:	4633      	mov	r3, r6
  412d7e:	4616      	mov	r6, r2
  412d80:	e008      	b.n	412d94 <_lv_img_buf_transform_anti_alias+0x290>
    lv_opa_t a11 = 0;
  412d82:	2000      	movs	r0, #0
    lv_opa_t a01 = 0;
  412d84:	4607      	mov	r7, r0
    lv_opa_t a10 = 0;
  412d86:	4683      	mov	fp, r0
  412d88:	e7c5      	b.n	412d16 <_lv_img_buf_transform_anti_alias+0x212>
        if(a00 <= LV_OPA_MIN) xr0 = LV_OPA_TRANSP;
  412d8a:	2200      	movs	r2, #0
  412d8c:	e7ed      	b.n	412d6a <_lv_img_buf_transform_anti_alias+0x266>
    }
    else {
        xr0 = xr;
        xr1 = xr;
        dsc->res.opa = LV_OPA_COVER;
  412d8e:	23ff      	movs	r3, #255	; 0xff
  412d90:	75a3      	strb	r3, [r4, #22]
        xr1 = xr;
  412d92:	4633      	mov	r3, r6
    }

    lv_color_t c0;
    if(xr0 == LV_OPA_TRANSP) c0 = c01;
  412d94:	2e00      	cmp	r6, #0
  412d96:	d157      	bne.n	412e48 <_lv_img_buf_transform_anti_alias+0x344>
  412d98:	f8bd 901c 	ldrh.w	r9, [sp, #28]
    else if(xr0 == LV_OPA_COVER) c0 = c00;
    else c0 = lv_color_mix(c00, c01, xr0);

    lv_color_t c1;
    if(xr1 == LV_OPA_TRANSP) c1 = c11;
  412d9c:	2b00      	cmp	r3, #0
  412d9e:	f040 809c 	bne.w	412eda <_lv_img_buf_transform_anti_alias+0x3d6>
  412da2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    else if(xr1 == LV_OPA_COVER) c1 = c10;
    else c1 = lv_color_mix(c10, c11, xr1);

    if(yr == LV_OPA_TRANSP) dsc->res.color = c1;
  412da6:	2d00      	cmp	r5, #0
  412da8:	f000 80e5 	beq.w	412f76 <_lv_img_buf_transform_anti_alias+0x472>
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
  412dac:	2dff      	cmp	r5, #255	; 0xff
  412dae:	f000 80e5 	beq.w	412f7c <_lv_img_buf_transform_anti_alias+0x478>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  412db2:	f3c9 02c4 	ubfx	r2, r9, #3, #5
  412db6:	f3c3 01c4 	ubfx	r1, r3, #3, #5
  412dba:	f1c5 00ff 	rsb	r0, r5, #255	; 0xff
  412dbe:	fb00 f101 	mul.w	r1, r0, r1
  412dc2:	fb05 1202 	mla	r2, r5, r2, r1
  412dc6:	3280      	adds	r2, #128	; 0x80
  412dc8:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  412dcc:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  412dd0:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  412dd4:	f04f 0100 	mov.w	r1, #0
  412dd8:	f362 01c7 	bfi	r1, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  412ddc:	f009 0607 	and.w	r6, r9, #7
  412de0:	f3c9 3242 	ubfx	r2, r9, #13, #3
  412de4:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
  412de8:	f003 0707 	and.w	r7, r3, #7
  412dec:	f3c3 3642 	ubfx	r6, r3, #13, #3
  412df0:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
  412df4:	fb06 f600 	mul.w	r6, r6, r0
  412df8:	fb02 6205 	mla	r2, r2, r5, r6
  412dfc:	3280      	adds	r2, #128	; 0x80
  412dfe:	eb02 2602 	add.w	r6, r2, r2, lsl #8
  412e02:	eb02 12c6 	add.w	r2, r2, r6, lsl #7
  412e06:	f3c2 6682 	ubfx	r6, r2, #26, #3
  412e0a:	f366 0102 	bfi	r1, r6, #0, #3
  412e0e:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  412e12:	f362 314f 	bfi	r1, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  412e16:	f3c9 2904 	ubfx	r9, r9, #8, #5
  412e1a:	f3c3 2304 	ubfx	r3, r3, #8, #5
  412e1e:	fb03 f000 	mul.w	r0, r3, r0
  412e22:	fb09 0505 	mla	r5, r9, r5, r0
  412e26:	3580      	adds	r5, #128	; 0x80
  412e28:	eb05 2305 	add.w	r3, r5, r5, lsl #8
  412e2c:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
  412e30:	f3c5 55c4 	ubfx	r5, r5, #23, #5
  412e34:	f365 210c 	bfi	r1, r5, #8, #5
    else dsc->res.color = lv_color_mix(c0, c1, yr);
  412e38:	82a1      	strh	r1, [r4, #20]

    return true;
  412e3a:	2001      	movs	r0, #1
}
  412e3c:	b009      	add	sp, #36	; 0x24
  412e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412e42:	4616      	mov	r6, r2
        if(a11 <= LV_OPA_MIN) xr1 = LV_OPA_COVER;
  412e44:	23ff      	movs	r3, #255	; 0xff
  412e46:	e7a5      	b.n	412d94 <_lv_img_buf_transform_anti_alias+0x290>
    else if(xr0 == LV_OPA_COVER) c0 = c00;
  412e48:	2eff      	cmp	r6, #255	; 0xff
  412e4a:	d0a7      	beq.n	412d9c <_lv_img_buf_transform_anti_alias+0x298>
  412e4c:	f8bd 001c 	ldrh.w	r0, [sp, #28]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  412e50:	f3c9 02c4 	ubfx	r2, r9, #3, #5
  412e54:	f3c0 01c4 	ubfx	r1, r0, #3, #5
  412e58:	f1c6 07ff 	rsb	r7, r6, #255	; 0xff
  412e5c:	fb07 f101 	mul.w	r1, r7, r1
  412e60:	fb06 1202 	mla	r2, r6, r2, r1
  412e64:	3280      	adds	r2, #128	; 0x80
  412e66:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  412e6a:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  412e6e:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  412e72:	f04f 0100 	mov.w	r1, #0
  412e76:	f362 01c7 	bfi	r1, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  412e7a:	f009 0e07 	and.w	lr, r9, #7
  412e7e:	f3c9 3242 	ubfx	r2, r9, #13, #3
  412e82:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
  412e86:	f000 0c07 	and.w	ip, r0, #7
  412e8a:	f3c0 3e42 	ubfx	lr, r0, #13, #3
  412e8e:	eb0e 0ecc 	add.w	lr, lr, ip, lsl #3
  412e92:	fb0e fe07 	mul.w	lr, lr, r7
  412e96:	fb02 e206 	mla	r2, r2, r6, lr
  412e9a:	3280      	adds	r2, #128	; 0x80
  412e9c:	eb02 2e02 	add.w	lr, r2, r2, lsl #8
  412ea0:	eb02 12ce 	add.w	r2, r2, lr, lsl #7
  412ea4:	f3c2 6e82 	ubfx	lr, r2, #26, #3
  412ea8:	f36e 0102 	bfi	r1, lr, #0, #3
  412eac:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  412eb0:	f362 314f 	bfi	r1, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  412eb4:	f3c9 2904 	ubfx	r9, r9, #8, #5
  412eb8:	f3c0 2004 	ubfx	r0, r0, #8, #5
  412ebc:	fb00 f707 	mul.w	r7, r0, r7
  412ec0:	fb09 7606 	mla	r6, r9, r6, r7
  412ec4:	3680      	adds	r6, #128	; 0x80
  412ec6:	eb06 2206 	add.w	r2, r6, r6, lsl #8
  412eca:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
  412ece:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  412ed2:	f366 210c 	bfi	r1, r6, #8, #5
  412ed6:	4689      	mov	r9, r1
  412ed8:	e760      	b.n	412d9c <_lv_img_buf_transform_anti_alias+0x298>
    else if(xr1 == LV_OPA_COVER) c1 = c10;
  412eda:	2bff      	cmp	r3, #255	; 0xff
  412edc:	d048      	beq.n	412f70 <_lv_img_buf_transform_anti_alias+0x46c>
  412ede:	f8bd 6018 	ldrh.w	r6, [sp, #24]
  412ee2:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  412ee6:	f3c6 02c4 	ubfx	r2, r6, #3, #5
  412eea:	f3c0 01c4 	ubfx	r1, r0, #3, #5
  412eee:	f1c3 07ff 	rsb	r7, r3, #255	; 0xff
  412ef2:	fb07 f101 	mul.w	r1, r7, r1
  412ef6:	fb03 1202 	mla	r2, r3, r2, r1
  412efa:	3280      	adds	r2, #128	; 0x80
  412efc:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  412f00:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  412f04:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  412f08:	f04f 0100 	mov.w	r1, #0
  412f0c:	f362 01c7 	bfi	r1, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  412f10:	f006 0e07 	and.w	lr, r6, #7
  412f14:	f3c6 3242 	ubfx	r2, r6, #13, #3
  412f18:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
  412f1c:	f000 0c07 	and.w	ip, r0, #7
  412f20:	f3c0 3e42 	ubfx	lr, r0, #13, #3
  412f24:	eb0e 0ecc 	add.w	lr, lr, ip, lsl #3
  412f28:	fb0e fe07 	mul.w	lr, lr, r7
  412f2c:	fb02 e203 	mla	r2, r2, r3, lr
  412f30:	3280      	adds	r2, #128	; 0x80
  412f32:	eb02 2e02 	add.w	lr, r2, r2, lsl #8
  412f36:	eb02 12ce 	add.w	r2, r2, lr, lsl #7
  412f3a:	f3c2 6e82 	ubfx	lr, r2, #26, #3
  412f3e:	f36e 0102 	bfi	r1, lr, #0, #3
  412f42:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  412f46:	f362 314f 	bfi	r1, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  412f4a:	f3c6 2604 	ubfx	r6, r6, #8, #5
  412f4e:	f3c0 2004 	ubfx	r0, r0, #8, #5
  412f52:	fb00 f707 	mul.w	r7, r0, r7
  412f56:	fb06 7303 	mla	r3, r6, r3, r7
  412f5a:	3380      	adds	r3, #128	; 0x80
  412f5c:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  412f60:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  412f64:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  412f68:	f363 210c 	bfi	r1, r3, #8, #5
  412f6c:	460b      	mov	r3, r1
  412f6e:	e71a      	b.n	412da6 <_lv_img_buf_transform_anti_alias+0x2a2>
  412f70:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  412f74:	e717      	b.n	412da6 <_lv_img_buf_transform_anti_alias+0x2a2>
    if(yr == LV_OPA_TRANSP) dsc->res.color = c1;
  412f76:	82a3      	strh	r3, [r4, #20]
    return true;
  412f78:	2001      	movs	r0, #1
  412f7a:	e75f      	b.n	412e3c <_lv_img_buf_transform_anti_alias+0x338>
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
  412f7c:	f8a4 9014 	strh.w	r9, [r4, #20]
    return true;
  412f80:	2001      	movs	r0, #1
  412f82:	e75b      	b.n	412e3c <_lv_img_buf_transform_anti_alias+0x338>
        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
  412f84:	2000      	movs	r0, #0
  412f86:	e759      	b.n	412e3c <_lv_img_buf_transform_anti_alias+0x338>
  412f88:	004126f5 	.word	0x004126f5
  412f8c:	004125d1 	.word	0x004125d1

00412f90 <_lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param color color The color of the image with `LV_IMG_CF_ALPHA_...`
 * @return pointer to the cache entry or NULL if can open the image
 */
lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color)
{
  412f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /*Is the image cached?*/
    lv_img_cache_entry_t * cached_src = NULL;

#if LV_IMG_CACHE_DEF_SIZE
    if(entry_cnt == 0) {
  412f94:	4b4c      	ldr	r3, [pc, #304]	; (4130c8 <_lv_img_cache_open+0x138>)
  412f96:	881f      	ldrh	r7, [r3, #0]
  412f98:	2f00      	cmp	r7, #0
  412f9a:	f000 8091 	beq.w	4130c0 <_lv_img_cache_open+0x130>
        LV_LOG_WARN("lv_img_cache_open: the cache size is 0");
        return NULL;
    }

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
  412f9e:	4b4b      	ldr	r3, [pc, #300]	; (4130cc <_lv_img_cache_open+0x13c>)
  412fa0:	681e      	ldr	r6, [r3, #0]

    /*Decrement all lifes. Make the entries older*/
    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
  412fa2:	2300      	movs	r3, #0
  412fa4:	e001      	b.n	412faa <_lv_img_cache_open+0x1a>
  412fa6:	3301      	adds	r3, #1
  412fa8:	b29b      	uxth	r3, r3
  412faa:	42bb      	cmp	r3, r7
  412fac:	d20a      	bcs.n	412fc4 <_lv_img_cache_open+0x34>
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
  412fae:	eb03 05c3 	add.w	r5, r3, r3, lsl #3
  412fb2:	00ac      	lsls	r4, r5, #2
  412fb4:	4434      	add	r4, r6
  412fb6:	6a25      	ldr	r5, [r4, #32]
  412fb8:	4a45      	ldr	r2, [pc, #276]	; (4130d0 <_lv_img_cache_open+0x140>)
  412fba:	4295      	cmp	r5, r2
  412fbc:	dbf3      	blt.n	412fa6 <_lv_img_cache_open+0x16>
            cache[i].life -= LV_IMG_CACHE_AGING;
  412fbe:	3d01      	subs	r5, #1
  412fc0:	6225      	str	r5, [r4, #32]
  412fc2:	e7f0      	b.n	412fa6 <_lv_img_cache_open+0x16>
  412fc4:	4688      	mov	r8, r1
  412fc6:	4607      	mov	r7, r0
  412fc8:	2400      	movs	r4, #0
  412fca:	e00c      	b.n	412fe6 <_lv_img_cache_open+0x56>

    for(i = 0; i < entry_cnt; i++) {
        bool match = false;
        lv_img_src_t src_type = lv_img_src_get_type(cache[i].dec_dsc.src);
        if(src_type == LV_IMG_SRC_VARIABLE) {
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
  412fcc:	892a      	ldrh	r2, [r5, #8]
  412fce:	fa1f f388 	uxth.w	r3, r8
  412fd2:	429a      	cmp	r2, r3
  412fd4:	d020      	beq.n	413018 <_lv_img_cache_open+0x88>
        bool match = false;
  412fd6:	2300      	movs	r3, #0
  412fd8:	e002      	b.n	412fe0 <_lv_img_cache_open+0x50>
        }
        else if(src_type == LV_IMG_SRC_FILE) {
  412fda:	2801      	cmp	r0, #1
  412fdc:	d015      	beq.n	41300a <_lv_img_cache_open+0x7a>
        bool match = false;
  412fde:	2300      	movs	r3, #0
            if(strcmp(cache[i].dec_dsc.src, src) == 0) match = true;
        }

        if(match) {
  412fe0:	b9f3      	cbnz	r3, 413020 <_lv_img_cache_open+0x90>
    for(i = 0; i < entry_cnt; i++) {
  412fe2:	3401      	adds	r4, #1
  412fe4:	b2a4      	uxth	r4, r4
  412fe6:	4b38      	ldr	r3, [pc, #224]	; (4130c8 <_lv_img_cache_open+0x138>)
  412fe8:	881b      	ldrh	r3, [r3, #0]
  412fea:	429c      	cmp	r4, r3
  412fec:	d223      	bcs.n	413036 <_lv_img_cache_open+0xa6>
        lv_img_src_t src_type = lv_img_src_get_type(cache[i].dec_dsc.src);
  412fee:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  412ff2:	009d      	lsls	r5, r3, #2
  412ff4:	4435      	add	r5, r6
  412ff6:	6868      	ldr	r0, [r5, #4]
  412ff8:	4b36      	ldr	r3, [pc, #216]	; (4130d4 <_lv_img_cache_open+0x144>)
  412ffa:	4798      	blx	r3
        if(src_type == LV_IMG_SRC_VARIABLE) {
  412ffc:	2800      	cmp	r0, #0
  412ffe:	d1ec      	bne.n	412fda <_lv_img_cache_open+0x4a>
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
  413000:	686b      	ldr	r3, [r5, #4]
  413002:	42bb      	cmp	r3, r7
  413004:	d0e2      	beq.n	412fcc <_lv_img_cache_open+0x3c>
        bool match = false;
  413006:	2300      	movs	r3, #0
  413008:	e7ea      	b.n	412fe0 <_lv_img_cache_open+0x50>
            if(strcmp(cache[i].dec_dsc.src, src) == 0) match = true;
  41300a:	4639      	mov	r1, r7
  41300c:	6868      	ldr	r0, [r5, #4]
  41300e:	4b32      	ldr	r3, [pc, #200]	; (4130d8 <_lv_img_cache_open+0x148>)
  413010:	4798      	blx	r3
  413012:	b118      	cbz	r0, 41301c <_lv_img_cache_open+0x8c>
        bool match = false;
  413014:	2300      	movs	r3, #0
  413016:	e7e3      	b.n	412fe0 <_lv_img_cache_open+0x50>
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
  413018:	2301      	movs	r3, #1
  41301a:	e7e1      	b.n	412fe0 <_lv_img_cache_open+0x50>
            if(strcmp(cache[i].dec_dsc.src, src) == 0) match = true;
  41301c:	2301      	movs	r3, #1
  41301e:	e7df      	b.n	412fe0 <_lv_img_cache_open+0x50>
            /* If opened increment its life.
             * Image difficult to open should live longer to keep avoid frequent their recaching.
             * Therefore increase `life` with `time_to_open`*/
            cached_src = &cache[i];
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
  413020:	696b      	ldr	r3, [r5, #20]
  413022:	6a2a      	ldr	r2, [r5, #32]
  413024:	4413      	add	r3, r2
  413026:	622b      	str	r3, [r5, #32]
            if(cached_src->life > LV_IMG_CACHE_LIFE_LIMIT) cached_src->life = LV_IMG_CACHE_LIFE_LIMIT;
  413028:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  41302c:	dd04      	ble.n	413038 <_lv_img_cache_open+0xa8>
  41302e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  413032:	622b      	str	r3, [r5, #32]
  413034:	e000      	b.n	413038 <_lv_img_cache_open+0xa8>
    lv_img_cache_entry_t * cached_src = NULL;
  413036:	2500      	movs	r5, #0
            break;
        }
    }

    /*The image is not cached then cache it now*/
    if(cached_src) return cached_src;
  413038:	b115      	cbz	r5, 413040 <_lv_img_cache_open+0xb0>
    }

    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;

    return cached_src;
}
  41303a:	4628      	mov	r0, r5
  41303c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  413040:	4634      	mov	r4, r6
  413042:	2301      	movs	r3, #1
  413044:	e001      	b.n	41304a <_lv_img_cache_open+0xba>
    for(i = 1; i < entry_cnt; i++) {
  413046:	3301      	adds	r3, #1
  413048:	b29b      	uxth	r3, r3
  41304a:	4a1f      	ldr	r2, [pc, #124]	; (4130c8 <_lv_img_cache_open+0x138>)
  41304c:	8812      	ldrh	r2, [r2, #0]
  41304e:	4293      	cmp	r3, r2
  413050:	d209      	bcs.n	413066 <_lv_img_cache_open+0xd6>
        if(cache[i].life < cached_src->life) {
  413052:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  413056:	008a      	lsls	r2, r1, #2
  413058:	4432      	add	r2, r6
  41305a:	6a10      	ldr	r0, [r2, #32]
  41305c:	6a21      	ldr	r1, [r4, #32]
  41305e:	4288      	cmp	r0, r1
  413060:	daf1      	bge.n	413046 <_lv_img_cache_open+0xb6>
            cached_src = &cache[i];
  413062:	4614      	mov	r4, r2
  413064:	e7ef      	b.n	413046 <_lv_img_cache_open+0xb6>
    if(cached_src->dec_dsc.src) {
  413066:	6863      	ldr	r3, [r4, #4]
  413068:	b113      	cbz	r3, 413070 <_lv_img_cache_open+0xe0>
        lv_img_decoder_close(&cached_src->dec_dsc);
  41306a:	4620      	mov	r0, r4
  41306c:	4b1b      	ldr	r3, [pc, #108]	; (4130dc <_lv_img_cache_open+0x14c>)
  41306e:	4798      	blx	r3
    t_start                          = lv_tick_get();
  413070:	4b1b      	ldr	r3, [pc, #108]	; (4130e0 <_lv_img_cache_open+0x150>)
  413072:	4798      	blx	r3
  413074:	4606      	mov	r6, r0
    cached_src->dec_dsc.time_to_open = 0;
  413076:	2300      	movs	r3, #0
  413078:	6163      	str	r3, [r4, #20]
    lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, color);
  41307a:	4642      	mov	r2, r8
  41307c:	4639      	mov	r1, r7
  41307e:	4620      	mov	r0, r4
  413080:	4b18      	ldr	r3, [pc, #96]	; (4130e4 <_lv_img_cache_open+0x154>)
  413082:	4798      	blx	r3
    if(open_res == LV_RES_INV) {
  413084:	b148      	cbz	r0, 41309a <_lv_img_cache_open+0x10a>
    cached_src->life = 0;
  413086:	2300      	movs	r3, #0
  413088:	6223      	str	r3, [r4, #32]
    if(cached_src->dec_dsc.time_to_open == 0) {
  41308a:	6963      	ldr	r3, [r4, #20]
  41308c:	b19b      	cbz	r3, 4130b6 <_lv_img_cache_open+0x126>
    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
  41308e:	6963      	ldr	r3, [r4, #20]
  413090:	b9c3      	cbnz	r3, 4130c4 <_lv_img_cache_open+0x134>
  413092:	2301      	movs	r3, #1
  413094:	6163      	str	r3, [r4, #20]
    return cached_src;
  413096:	4625      	mov	r5, r4
  413098:	e7cf      	b.n	41303a <_lv_img_cache_open+0xaa>
        lv_img_decoder_close(&cached_src->dec_dsc);
  41309a:	4620      	mov	r0, r4
  41309c:	4b0f      	ldr	r3, [pc, #60]	; (4130dc <_lv_img_cache_open+0x14c>)
  41309e:	4798      	blx	r3
        _lv_memset_00(&cached_src->dec_dsc, sizeof(lv_img_decoder_dsc_t));
  4130a0:	2120      	movs	r1, #32
  4130a2:	4620      	mov	r0, r4
  4130a4:	4e10      	ldr	r6, [pc, #64]	; (4130e8 <_lv_img_cache_open+0x158>)
  4130a6:	47b0      	blx	r6
        _lv_memset_00(cached_src, sizeof(lv_img_cache_entry_t));
  4130a8:	2124      	movs	r1, #36	; 0x24
  4130aa:	4620      	mov	r0, r4
  4130ac:	47b0      	blx	r6
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its use  */
  4130ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  4130b2:	6223      	str	r3, [r4, #32]
        return NULL;
  4130b4:	e7c1      	b.n	41303a <_lv_img_cache_open+0xaa>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
  4130b6:	4630      	mov	r0, r6
  4130b8:	4b0c      	ldr	r3, [pc, #48]	; (4130ec <_lv_img_cache_open+0x15c>)
  4130ba:	4798      	blx	r3
  4130bc:	6160      	str	r0, [r4, #20]
  4130be:	e7e6      	b.n	41308e <_lv_img_cache_open+0xfe>
        return NULL;
  4130c0:	2500      	movs	r5, #0
  4130c2:	e7ba      	b.n	41303a <_lv_img_cache_open+0xaa>
    return cached_src;
  4130c4:	4625      	mov	r5, r4
  4130c6:	e7b8      	b.n	41303a <_lv_img_cache_open+0xaa>
  4130c8:	2040c7ba 	.word	0x2040c7ba
  4130cc:	2043a350 	.word	0x2043a350
  4130d0:	80000002 	.word	0x80000002
  4130d4:	0040d6dd 	.word	0x0040d6dd
  4130d8:	00428229 	.word	0x00428229
  4130dc:	00413add 	.word	0x00413add
  4130e0:	004151ad 	.word	0x004151ad
  4130e4:	00413a1d 	.word	0x00413a1d
  4130e8:	00416c0d 	.word	0x00416c0d
  4130ec:	004151c9 	.word	0x004151c9

004130f0 <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
  4130f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4130f4:	4606      	mov	r6, r0
#if LV_IMG_CACHE_DEF_SIZE
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
  4130f6:	4b11      	ldr	r3, [pc, #68]	; (41313c <lv_img_cache_invalidate_src+0x4c>)
  4130f8:	681f      	ldr	r7, [r3, #0]

    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
  4130fa:	2400      	movs	r4, #0
  4130fc:	e00d      	b.n	41311a <lv_img_cache_invalidate_src+0x2a>
        if(cache[i].dec_dsc.src == src || src == NULL) {
            if(cache[i].dec_dsc.src != NULL) {
  4130fe:	b113      	cbz	r3, 413106 <lv_img_cache_invalidate_src+0x16>
                lv_img_decoder_close(&cache[i].dec_dsc);
  413100:	4628      	mov	r0, r5
  413102:	4b0f      	ldr	r3, [pc, #60]	; (413140 <lv_img_cache_invalidate_src+0x50>)
  413104:	4798      	blx	r3
            }

            _lv_memset_00(&cache[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
  413106:	2120      	movs	r1, #32
  413108:	4628      	mov	r0, r5
  41310a:	f8df 803c 	ldr.w	r8, [pc, #60]	; 413148 <lv_img_cache_invalidate_src+0x58>
  41310e:	47c0      	blx	r8
            _lv_memset_00(&cache[i], sizeof(lv_img_cache_entry_t));
  413110:	2124      	movs	r1, #36	; 0x24
  413112:	4628      	mov	r0, r5
  413114:	47c0      	blx	r8
    for(i = 0; i < entry_cnt; i++) {
  413116:	3401      	adds	r4, #1
  413118:	b2a4      	uxth	r4, r4
  41311a:	4b0a      	ldr	r3, [pc, #40]	; (413144 <lv_img_cache_invalidate_src+0x54>)
  41311c:	881b      	ldrh	r3, [r3, #0]
  41311e:	429c      	cmp	r4, r3
  413120:	d209      	bcs.n	413136 <lv_img_cache_invalidate_src+0x46>
        if(cache[i].dec_dsc.src == src || src == NULL) {
  413122:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  413126:	0098      	lsls	r0, r3, #2
  413128:	183d      	adds	r5, r7, r0
  41312a:	686b      	ldr	r3, [r5, #4]
  41312c:	42b3      	cmp	r3, r6
  41312e:	d0e6      	beq.n	4130fe <lv_img_cache_invalidate_src+0xe>
  413130:	2e00      	cmp	r6, #0
  413132:	d1f0      	bne.n	413116 <lv_img_cache_invalidate_src+0x26>
  413134:	e7e3      	b.n	4130fe <lv_img_cache_invalidate_src+0xe>
        }
    }
#endif
}
  413136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41313a:	bf00      	nop
  41313c:	2043a350 	.word	0x2043a350
  413140:	00413add 	.word	0x00413add
  413144:	2040c7ba 	.word	0x2040c7ba
  413148:	00416c0d 	.word	0x00416c0d

0041314c <lv_img_cache_set_size>:
{
  41314c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41314e:	4604      	mov	r4, r0
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
  413150:	4b1c      	ldr	r3, [pc, #112]	; (4131c4 <lv_img_cache_set_size+0x78>)
  413152:	681b      	ldr	r3, [r3, #0]
  413154:	b133      	cbz	r3, 413164 <lv_img_cache_set_size+0x18>
        lv_img_cache_invalidate_src(NULL);
  413156:	2000      	movs	r0, #0
  413158:	4b1b      	ldr	r3, [pc, #108]	; (4131c8 <lv_img_cache_set_size+0x7c>)
  41315a:	4798      	blx	r3
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
  41315c:	4b19      	ldr	r3, [pc, #100]	; (4131c4 <lv_img_cache_set_size+0x78>)
  41315e:	6818      	ldr	r0, [r3, #0]
  413160:	4b1a      	ldr	r3, [pc, #104]	; (4131cc <lv_img_cache_set_size+0x80>)
  413162:	4798      	blx	r3
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
  413164:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  413168:	0098      	lsls	r0, r3, #2
  41316a:	4b19      	ldr	r3, [pc, #100]	; (4131d0 <lv_img_cache_set_size+0x84>)
  41316c:	4798      	blx	r3
  41316e:	4b15      	ldr	r3, [pc, #84]	; (4131c4 <lv_img_cache_set_size+0x78>)
  413170:	6018      	str	r0, [r3, #0]
    LV_ASSERT_MEM(LV_GC_ROOT(_lv_img_cache_array));
  413172:	4b18      	ldr	r3, [pc, #96]	; (4131d4 <lv_img_cache_set_size+0x88>)
  413174:	4798      	blx	r3
  413176:	b130      	cbz	r0, 413186 <lv_img_cache_set_size+0x3a>
    if(LV_GC_ROOT(_lv_img_cache_array) == NULL) {
  413178:	4b12      	ldr	r3, [pc, #72]	; (4131c4 <lv_img_cache_set_size+0x78>)
  41317a:	681b      	ldr	r3, [r3, #0]
  41317c:	b153      	cbz	r3, 413194 <lv_img_cache_set_size+0x48>
    entry_cnt = new_entry_cnt;
  41317e:	4b16      	ldr	r3, [pc, #88]	; (4131d8 <lv_img_cache_set_size+0x8c>)
  413180:	801c      	strh	r4, [r3, #0]
    for(i = 0; i < entry_cnt; i++) {
  413182:	2400      	movs	r4, #0
  413184:	e019      	b.n	4131ba <lv_img_cache_set_size+0x6e>
    LV_ASSERT_MEM(LV_GC_ROOT(_lv_img_cache_array));
  413186:	4b0f      	ldr	r3, [pc, #60]	; (4131c4 <lv_img_cache_set_size+0x78>)
  413188:	681a      	ldr	r2, [r3, #0]
  41318a:	2300      	movs	r3, #0
  41318c:	4813      	ldr	r0, [pc, #76]	; (4131dc <lv_img_cache_set_size+0x90>)
  41318e:	4914      	ldr	r1, [pc, #80]	; (4131e0 <lv_img_cache_set_size+0x94>)
  413190:	4788      	blx	r1
  413192:	e7fe      	b.n	413192 <lv_img_cache_set_size+0x46>
        entry_cnt = 0;
  413194:	2200      	movs	r2, #0
  413196:	4b10      	ldr	r3, [pc, #64]	; (4131d8 <lv_img_cache_set_size+0x8c>)
  413198:	801a      	strh	r2, [r3, #0]
        return;
  41319a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
  41319c:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  4131a0:	009d      	lsls	r5, r3, #2
  4131a2:	4f08      	ldr	r7, [pc, #32]	; (4131c4 <lv_img_cache_set_size+0x78>)
  4131a4:	6838      	ldr	r0, [r7, #0]
  4131a6:	2120      	movs	r1, #32
  4131a8:	4428      	add	r0, r5
  4131aa:	4e0e      	ldr	r6, [pc, #56]	; (4131e4 <lv_img_cache_set_size+0x98>)
  4131ac:	47b0      	blx	r6
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i], sizeof(lv_img_cache_entry_t));
  4131ae:	6838      	ldr	r0, [r7, #0]
  4131b0:	2124      	movs	r1, #36	; 0x24
  4131b2:	4428      	add	r0, r5
  4131b4:	47b0      	blx	r6
    for(i = 0; i < entry_cnt; i++) {
  4131b6:	3401      	adds	r4, #1
  4131b8:	b2a4      	uxth	r4, r4
  4131ba:	4b07      	ldr	r3, [pc, #28]	; (4131d8 <lv_img_cache_set_size+0x8c>)
  4131bc:	881b      	ldrh	r3, [r3, #0]
  4131be:	429c      	cmp	r4, r3
  4131c0:	d3ec      	bcc.n	41319c <lv_img_cache_set_size+0x50>
  4131c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4131c4:	2043a350 	.word	0x2043a350
  4131c8:	004130f1 	.word	0x004130f1
  4131cc:	0041679d 	.word	0x0041679d
  4131d0:	004166d9 	.word	0x004166d9
  4131d4:	00415f95 	.word	0x00415f95
  4131d8:	2040c7ba 	.word	0x2040c7ba
  4131dc:	0042c714 	.word	0x0042c714
  4131e0:	00415fa1 	.word	0x00415fa1
  4131e4:	00416c0d 	.word	0x00416c0d

004131e8 <lv_img_decoder_built_in_info>:
 * @param src the image source: pointer to an `lv_img_dsc_t` variable, a file path or a symbol
 * @param header store the image data here
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_info(lv_img_decoder_t * decoder, const void * src, lv_img_header_t * header)
{
  4131e8:	b530      	push	{r4, r5, lr}
  4131ea:	b085      	sub	sp, #20
  4131ec:	460c      	mov	r4, r1
  4131ee:	4615      	mov	r5, r2
    (void)decoder; /*Unused*/

    lv_img_src_t src_type = lv_img_src_get_type(src);
  4131f0:	4608      	mov	r0, r1
  4131f2:	4b2b      	ldr	r3, [pc, #172]	; (4132a0 <lv_img_decoder_built_in_info+0xb8>)
  4131f4:	4798      	blx	r3
    if(src_type == LV_IMG_SRC_VARIABLE) {
  4131f6:	b9d8      	cbnz	r0, 413230 <lv_img_decoder_built_in_info+0x48>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
  4131f8:	7823      	ldrb	r3, [r4, #0]
  4131fa:	f003 031f 	and.w	r3, r3, #31
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
  4131fe:	3b04      	subs	r3, #4
  413200:	b2db      	uxtb	r3, r3
  413202:	2b0a      	cmp	r3, #10
  413204:	d849      	bhi.n	41329a <lv_img_decoder_built_in_info+0xb2>

        header->w  = ((lv_img_dsc_t *)src)->header.w;
  413206:	6823      	ldr	r3, [r4, #0]
  413208:	f3c3 238a 	ubfx	r3, r3, #10, #11
  41320c:	682a      	ldr	r2, [r5, #0]
  41320e:	f363 2294 	bfi	r2, r3, #10, #11
  413212:	602a      	str	r2, [r5, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
  413214:	8863      	ldrh	r3, [r4, #2]
  413216:	f3c3 134a 	ubfx	r3, r3, #5, #11
  41321a:	886a      	ldrh	r2, [r5, #2]
  41321c:	f363 124f 	bfi	r2, r3, #5, #11
  413220:	806a      	strh	r2, [r5, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
  413222:	7822      	ldrb	r2, [r4, #0]
  413224:	782b      	ldrb	r3, [r5, #0]
  413226:	f362 0304 	bfi	r3, r2, #0, #5
  41322a:	702b      	strb	r3, [r5, #0]
    }
    else {
        LV_LOG_WARN("Image get info found unknown src type");
        return LV_RES_INV;
    }
    return LV_RES_OK;
  41322c:	2001      	movs	r0, #1
  41322e:	e004      	b.n	41323a <lv_img_decoder_built_in_info+0x52>
    else if(src_type == LV_IMG_SRC_FILE) {
  413230:	2801      	cmp	r0, #1
  413232:	d004      	beq.n	41323e <lv_img_decoder_built_in_info+0x56>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
  413234:	2802      	cmp	r0, #2
  413236:	d022      	beq.n	41327e <lv_img_decoder_built_in_info+0x96>
        return LV_RES_INV;
  413238:	2000      	movs	r0, #0
}
  41323a:	b005      	add	sp, #20
  41323c:	bd30      	pop	{r4, r5, pc}
        res = lv_fs_open(&file, src, LV_FS_MODE_RD);
  41323e:	2202      	movs	r2, #2
  413240:	4621      	mov	r1, r4
  413242:	a802      	add	r0, sp, #8
  413244:	4b17      	ldr	r3, [pc, #92]	; (4132a4 <lv_img_decoder_built_in_info+0xbc>)
  413246:	4798      	blx	r3
        if(res == LV_FS_RES_OK) {
  413248:	b148      	cbz	r0, 41325e <lv_img_decoder_built_in_info+0x76>
        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
  41324a:	782b      	ldrb	r3, [r5, #0]
  41324c:	f003 031f 	and.w	r3, r3, #31
  413250:	331c      	adds	r3, #28
  413252:	f003 031f 	and.w	r3, r3, #31
  413256:	2b0a      	cmp	r3, #10
  413258:	d80f      	bhi.n	41327a <lv_img_decoder_built_in_info+0x92>
    return LV_RES_OK;
  41325a:	2001      	movs	r0, #1
  41325c:	e7ed      	b.n	41323a <lv_img_decoder_built_in_info+0x52>
            res = lv_fs_read(&file, header, sizeof(lv_img_header_t), &rn);
  41325e:	ab01      	add	r3, sp, #4
  413260:	2204      	movs	r2, #4
  413262:	4629      	mov	r1, r5
  413264:	a802      	add	r0, sp, #8
  413266:	4c10      	ldr	r4, [pc, #64]	; (4132a8 <lv_img_decoder_built_in_info+0xc0>)
  413268:	47a0      	blx	r4
  41326a:	4604      	mov	r4, r0
            lv_fs_close(&file);
  41326c:	a802      	add	r0, sp, #8
  41326e:	4b0f      	ldr	r3, [pc, #60]	; (4132ac <lv_img_decoder_built_in_info+0xc4>)
  413270:	4798      	blx	r3
            if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
  413272:	b914      	cbnz	r4, 41327a <lv_img_decoder_built_in_info+0x92>
  413274:	9b01      	ldr	r3, [sp, #4]
  413276:	2b04      	cmp	r3, #4
  413278:	d0e7      	beq.n	41324a <lv_img_decoder_built_in_info+0x62>
                return LV_RES_INV;
  41327a:	2000      	movs	r0, #0
  41327c:	e7dd      	b.n	41323a <lv_img_decoder_built_in_info+0x52>
        header->w = 1;
  41327e:	682b      	ldr	r3, [r5, #0]
  413280:	2001      	movs	r0, #1
  413282:	f360 2394 	bfi	r3, r0, #10, #11
  413286:	602b      	str	r3, [r5, #0]
        header->h = 1;
  413288:	0c1a      	lsrs	r2, r3, #16
  41328a:	f360 124f 	bfi	r2, r0, #5, #11
  41328e:	806a      	strh	r2, [r5, #2]
        header->cf = LV_IMG_CF_ALPHA_1BIT;
  413290:	220b      	movs	r2, #11
  413292:	f362 0304 	bfi	r3, r2, #0, #5
  413296:	702b      	strb	r3, [r5, #0]
  413298:	e7cf      	b.n	41323a <lv_img_decoder_built_in_info+0x52>
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
  41329a:	2000      	movs	r0, #0
  41329c:	e7cd      	b.n	41323a <lv_img_decoder_built_in_info+0x52>
  41329e:	bf00      	nop
  4132a0:	0040d6dd 	.word	0x0040d6dd
  4132a4:	004160ed 	.word	0x004160ed
  4132a8:	00416069 	.word	0x00416069
  4132ac:	00416039 	.word	0x00416039

004132b0 <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
  4132b0:	b538      	push	{r3, r4, r5, lr}
    (void)decoder; /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  4132b2:	69cc      	ldr	r4, [r1, #28]
    if(user_data) {
  4132b4:	b1a4      	cbz	r4, 4132e0 <lv_img_decoder_built_in_close+0x30>
  4132b6:	460d      	mov	r5, r1
#if LV_USE_FILESYSTEM
        if(user_data->f) {
  4132b8:	6820      	ldr	r0, [r4, #0]
  4132ba:	b120      	cbz	r0, 4132c6 <lv_img_decoder_built_in_close+0x16>
            lv_fs_close(user_data->f);
  4132bc:	4b09      	ldr	r3, [pc, #36]	; (4132e4 <lv_img_decoder_built_in_close+0x34>)
  4132be:	4798      	blx	r3
            lv_mem_free(user_data->f);
  4132c0:	6820      	ldr	r0, [r4, #0]
  4132c2:	4b09      	ldr	r3, [pc, #36]	; (4132e8 <lv_img_decoder_built_in_close+0x38>)
  4132c4:	4798      	blx	r3
        }
#endif
        if(user_data->palette) lv_mem_free(user_data->palette);
  4132c6:	6860      	ldr	r0, [r4, #4]
  4132c8:	b108      	cbz	r0, 4132ce <lv_img_decoder_built_in_close+0x1e>
  4132ca:	4b07      	ldr	r3, [pc, #28]	; (4132e8 <lv_img_decoder_built_in_close+0x38>)
  4132cc:	4798      	blx	r3
        if(user_data->opa) lv_mem_free(user_data->opa);
  4132ce:	68a0      	ldr	r0, [r4, #8]
  4132d0:	b108      	cbz	r0, 4132d6 <lv_img_decoder_built_in_close+0x26>
  4132d2:	4b05      	ldr	r3, [pc, #20]	; (4132e8 <lv_img_decoder_built_in_close+0x38>)
  4132d4:	4798      	blx	r3

        lv_mem_free(user_data);
  4132d6:	4620      	mov	r0, r4
  4132d8:	4b03      	ldr	r3, [pc, #12]	; (4132e8 <lv_img_decoder_built_in_close+0x38>)
  4132da:	4798      	blx	r3

        dsc->user_data = NULL;
  4132dc:	2300      	movs	r3, #0
  4132de:	61eb      	str	r3, [r5, #28]
  4132e0:	bd38      	pop	{r3, r4, r5, pc}
  4132e2:	bf00      	nop
  4132e4:	00416039 	.word	0x00416039
  4132e8:	0041679d 	.word	0x0041679d

004132ec <lv_img_decoder_built_in_open>:
{
  4132ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4132f0:	b082      	sub	sp, #8
  4132f2:	4607      	mov	r7, r0
  4132f4:	460c      	mov	r4, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
  4132f6:	7a8b      	ldrb	r3, [r1, #10]
  4132f8:	2b01      	cmp	r3, #1
  4132fa:	d016      	beq.n	41332a <lv_img_decoder_built_in_open+0x3e>
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
  4132fc:	b923      	cbnz	r3, 413308 <lv_img_decoder_built_in_open+0x1c>
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
  4132fe:	684b      	ldr	r3, [r1, #4]
  413300:	689b      	ldr	r3, [r3, #8]
  413302:	2b00      	cmp	r3, #0
  413304:	f000 810b 	beq.w	41351e <lv_img_decoder_built_in_open+0x232>
    lv_img_cf_t cf = dsc->header.cf;
  413308:	7b20      	ldrb	r0, [r4, #12]
  41330a:	f000 001f 	and.w	r0, r0, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
  41330e:	1f03      	subs	r3, r0, #4
  413310:	b2db      	uxtb	r3, r3
  413312:	2b02      	cmp	r3, #2
  413314:	d851      	bhi.n	4133ba <lv_img_decoder_built_in_open+0xce>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
  413316:	7aa3      	ldrb	r3, [r4, #10]
  413318:	2b00      	cmp	r3, #0
  41331a:	d14a      	bne.n	4133b2 <lv_img_decoder_built_in_open+0xc6>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
  41331c:	6863      	ldr	r3, [r4, #4]
  41331e:	689b      	ldr	r3, [r3, #8]
  413320:	6123      	str	r3, [r4, #16]
            return LV_RES_OK;
  413322:	2001      	movs	r0, #1
}
  413324:	b002      	add	sp, #8
  413326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
  41332a:	6848      	ldr	r0, [r1, #4]
  41332c:	4b7d      	ldr	r3, [pc, #500]	; (413524 <lv_img_decoder_built_in_open+0x238>)
  41332e:	4798      	blx	r3
  413330:	497d      	ldr	r1, [pc, #500]	; (413528 <lv_img_decoder_built_in_open+0x23c>)
  413332:	4b7e      	ldr	r3, [pc, #504]	; (41352c <lv_img_decoder_built_in_open+0x240>)
  413334:	4798      	blx	r3
  413336:	b9a8      	cbnz	r0, 413364 <lv_img_decoder_built_in_open+0x78>
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
  413338:	2202      	movs	r2, #2
  41333a:	6861      	ldr	r1, [r4, #4]
  41333c:	4668      	mov	r0, sp
  41333e:	4b7c      	ldr	r3, [pc, #496]	; (413530 <lv_img_decoder_built_in_open+0x244>)
  413340:	4798      	blx	r3
        if(res != LV_FS_RES_OK) {
  413342:	b978      	cbnz	r0, 413364 <lv_img_decoder_built_in_open+0x78>
        if(dsc->user_data == NULL) {
  413344:	69e3      	ldr	r3, [r4, #28]
  413346:	b17b      	cbz	r3, 413368 <lv_img_decoder_built_in_open+0x7c>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  413348:	69e5      	ldr	r5, [r4, #28]
        user_data->f = lv_mem_alloc(sizeof(f));
  41334a:	2008      	movs	r0, #8
  41334c:	4b79      	ldr	r3, [pc, #484]	; (413534 <lv_img_decoder_built_in_open+0x248>)
  41334e:	4798      	blx	r3
  413350:	6028      	str	r0, [r5, #0]
        LV_ASSERT_MEM(user_data->f);
  413352:	4b79      	ldr	r3, [pc, #484]	; (413538 <lv_img_decoder_built_in_open+0x24c>)
  413354:	4798      	blx	r3
  413356:	b1d8      	cbz	r0, 413390 <lv_img_decoder_built_in_open+0xa4>
        if(user_data->f == NULL) {
  413358:	682b      	ldr	r3, [r5, #0]
  41335a:	bb3b      	cbnz	r3, 4133ac <lv_img_decoder_built_in_open+0xc0>
            lv_img_decoder_built_in_close(decoder, dsc);
  41335c:	4621      	mov	r1, r4
  41335e:	4638      	mov	r0, r7
  413360:	4b76      	ldr	r3, [pc, #472]	; (41353c <lv_img_decoder_built_in_open+0x250>)
  413362:	4798      	blx	r3
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
  413364:	2000      	movs	r0, #0
  413366:	e7dd      	b.n	413324 <lv_img_decoder_built_in_open+0x38>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
  413368:	200c      	movs	r0, #12
  41336a:	4b72      	ldr	r3, [pc, #456]	; (413534 <lv_img_decoder_built_in_open+0x248>)
  41336c:	4798      	blx	r3
  41336e:	61e0      	str	r0, [r4, #28]
            LV_ASSERT_MEM(dsc->user_data);
  413370:	4b71      	ldr	r3, [pc, #452]	; (413538 <lv_img_decoder_built_in_open+0x24c>)
  413372:	4798      	blx	r3
  413374:	b928      	cbnz	r0, 413382 <lv_img_decoder_built_in_open+0x96>
  413376:	69e2      	ldr	r2, [r4, #28]
  413378:	2300      	movs	r3, #0
  41337a:	4871      	ldr	r0, [pc, #452]	; (413540 <lv_img_decoder_built_in_open+0x254>)
  41337c:	4971      	ldr	r1, [pc, #452]	; (413544 <lv_img_decoder_built_in_open+0x258>)
  41337e:	4788      	blx	r1
  413380:	e7fe      	b.n	413380 <lv_img_decoder_built_in_open+0x94>
            if(dsc->user_data == NULL) {
  413382:	69e0      	ldr	r0, [r4, #28]
  413384:	2800      	cmp	r0, #0
  413386:	d0ed      	beq.n	413364 <lv_img_decoder_built_in_open+0x78>
            _lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
  413388:	210c      	movs	r1, #12
  41338a:	4b6f      	ldr	r3, [pc, #444]	; (413548 <lv_img_decoder_built_in_open+0x25c>)
  41338c:	4798      	blx	r3
  41338e:	e7db      	b.n	413348 <lv_img_decoder_built_in_open+0x5c>
        LV_ASSERT_MEM(user_data->f);
  413390:	682a      	ldr	r2, [r5, #0]
  413392:	2300      	movs	r3, #0
  413394:	486a      	ldr	r0, [pc, #424]	; (413540 <lv_img_decoder_built_in_open+0x254>)
  413396:	496b      	ldr	r1, [pc, #428]	; (413544 <lv_img_decoder_built_in_open+0x258>)
  413398:	4788      	blx	r1
  41339a:	e7fe      	b.n	41339a <lv_img_decoder_built_in_open+0xae>
        *d8 = *s8;
  41339c:	f811 0b01 	ldrb.w	r0, [r1], #1
  4133a0:	f803 0b01 	strb.w	r0, [r3], #1
        len--;
  4133a4:	3a01      	subs	r2, #1
    while(len) {
  4133a6:	2a00      	cmp	r2, #0
  4133a8:	d1f8      	bne.n	41339c <lv_img_decoder_built_in_open+0xb0>
  4133aa:	e7ad      	b.n	413308 <lv_img_decoder_built_in_open+0x1c>
  4133ac:	4669      	mov	r1, sp
  4133ae:	2208      	movs	r2, #8
  4133b0:	e7f9      	b.n	4133a6 <lv_img_decoder_built_in_open+0xba>
            dsc->img_data = NULL;
  4133b2:	2300      	movs	r3, #0
  4133b4:	6123      	str	r3, [r4, #16]
            return LV_RES_OK;
  4133b6:	2001      	movs	r0, #1
  4133b8:	e7b4      	b.n	413324 <lv_img_decoder_built_in_open+0x38>
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
  4133ba:	1fc3      	subs	r3, r0, #7
  4133bc:	b2db      	uxtb	r3, r3
  4133be:	2b03      	cmp	r3, #3
  4133c0:	d909      	bls.n	4133d6 <lv_img_decoder_built_in_open+0xea>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
  4133c2:	f1a0 030b 	sub.w	r3, r0, #11
  4133c6:	b2db      	uxtb	r3, r3
  4133c8:	2b03      	cmp	r3, #3
  4133ca:	f200 80a2 	bhi.w	413512 <lv_img_decoder_built_in_open+0x226>
        dsc->img_data = NULL;
  4133ce:	2300      	movs	r3, #0
  4133d0:	6123      	str	r3, [r4, #16]
        return LV_RES_OK; /*Nothing to process*/
  4133d2:	2001      	movs	r0, #1
  4133d4:	e7a6      	b.n	413324 <lv_img_decoder_built_in_open+0x38>
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
  4133d6:	4b5d      	ldr	r3, [pc, #372]	; (41354c <lv_img_decoder_built_in_open+0x260>)
  4133d8:	4798      	blx	r3
  4133da:	4682      	mov	sl, r0
        uint32_t palette_size = 1 << px_size;
  4133dc:	2601      	movs	r6, #1
  4133de:	4086      	lsls	r6, r0
        if(dsc->user_data == NULL) {
  4133e0:	69e3      	ldr	r3, [r4, #28]
  4133e2:	b17b      	cbz	r3, 413404 <lv_img_decoder_built_in_open+0x118>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  4133e4:	69e5      	ldr	r5, [r4, #28]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
  4133e6:	2002      	movs	r0, #2
  4133e8:	fa00 f00a 	lsl.w	r0, r0, sl
  4133ec:	4b51      	ldr	r3, [pc, #324]	; (413534 <lv_img_decoder_built_in_open+0x248>)
  4133ee:	4798      	blx	r3
  4133f0:	6068      	str	r0, [r5, #4]
        LV_ASSERT_MEM(user_data->palette);
  4133f2:	4b51      	ldr	r3, [pc, #324]	; (413538 <lv_img_decoder_built_in_open+0x24c>)
  4133f4:	4798      	blx	r3
  4133f6:	b9f0      	cbnz	r0, 413436 <lv_img_decoder_built_in_open+0x14a>
  4133f8:	686a      	ldr	r2, [r5, #4]
  4133fa:	2300      	movs	r3, #0
  4133fc:	4850      	ldr	r0, [pc, #320]	; (413540 <lv_img_decoder_built_in_open+0x254>)
  4133fe:	4951      	ldr	r1, [pc, #324]	; (413544 <lv_img_decoder_built_in_open+0x258>)
  413400:	4788      	blx	r1
  413402:	e7fe      	b.n	413402 <lv_img_decoder_built_in_open+0x116>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
  413404:	200c      	movs	r0, #12
  413406:	4b4b      	ldr	r3, [pc, #300]	; (413534 <lv_img_decoder_built_in_open+0x248>)
  413408:	4798      	blx	r3
  41340a:	61e0      	str	r0, [r4, #28]
            LV_ASSERT_MEM(dsc->user_data);
  41340c:	4b4a      	ldr	r3, [pc, #296]	; (413538 <lv_img_decoder_built_in_open+0x24c>)
  41340e:	4798      	blx	r3
  413410:	b928      	cbnz	r0, 41341e <lv_img_decoder_built_in_open+0x132>
  413412:	69e2      	ldr	r2, [r4, #28]
  413414:	2300      	movs	r3, #0
  413416:	484a      	ldr	r0, [pc, #296]	; (413540 <lv_img_decoder_built_in_open+0x254>)
  413418:	494a      	ldr	r1, [pc, #296]	; (413544 <lv_img_decoder_built_in_open+0x258>)
  41341a:	4788      	blx	r1
  41341c:	e7fe      	b.n	41341c <lv_img_decoder_built_in_open+0x130>
            if(dsc->user_data == NULL) {
  41341e:	69e0      	ldr	r0, [r4, #28]
  413420:	b928      	cbnz	r0, 41342e <lv_img_decoder_built_in_open+0x142>
                lv_img_decoder_built_in_close(decoder, dsc);
  413422:	4621      	mov	r1, r4
  413424:	4638      	mov	r0, r7
  413426:	4b45      	ldr	r3, [pc, #276]	; (41353c <lv_img_decoder_built_in_open+0x250>)
  413428:	4798      	blx	r3
                return LV_RES_INV;
  41342a:	2000      	movs	r0, #0
  41342c:	e77a      	b.n	413324 <lv_img_decoder_built_in_open+0x38>
            _lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
  41342e:	210c      	movs	r1, #12
  413430:	4b45      	ldr	r3, [pc, #276]	; (413548 <lv_img_decoder_built_in_open+0x25c>)
  413432:	4798      	blx	r3
  413434:	e7d6      	b.n	4133e4 <lv_img_decoder_built_in_open+0xf8>
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
  413436:	4630      	mov	r0, r6
  413438:	4b3e      	ldr	r3, [pc, #248]	; (413534 <lv_img_decoder_built_in_open+0x248>)
  41343a:	4798      	blx	r3
  41343c:	60a8      	str	r0, [r5, #8]
        LV_ASSERT_MEM(user_data->opa);
  41343e:	4b3e      	ldr	r3, [pc, #248]	; (413538 <lv_img_decoder_built_in_open+0x24c>)
  413440:	4798      	blx	r3
  413442:	b158      	cbz	r0, 41345c <lv_img_decoder_built_in_open+0x170>
        if(user_data->palette == NULL || user_data->opa == NULL) {
  413444:	686b      	ldr	r3, [r5, #4]
  413446:	b17b      	cbz	r3, 413468 <lv_img_decoder_built_in_open+0x17c>
  413448:	68ab      	ldr	r3, [r5, #8]
  41344a:	b16b      	cbz	r3, 413468 <lv_img_decoder_built_in_open+0x17c>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
  41344c:	7aa3      	ldrb	r3, [r4, #10]
  41344e:	2b01      	cmp	r3, #1
  413450:	d010      	beq.n	413474 <lv_img_decoder_built_in_open+0x188>
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
  413452:	6863      	ldr	r3, [r4, #4]
  413454:	f8d3 c008 	ldr.w	ip, [r3, #8]
            for(i = 0; i < palette_size; i++) {
  413458:	2300      	movs	r3, #0
  41345a:	e054      	b.n	413506 <lv_img_decoder_built_in_open+0x21a>
        LV_ASSERT_MEM(user_data->opa);
  41345c:	68aa      	ldr	r2, [r5, #8]
  41345e:	2300      	movs	r3, #0
  413460:	4837      	ldr	r0, [pc, #220]	; (413540 <lv_img_decoder_built_in_open+0x254>)
  413462:	4938      	ldr	r1, [pc, #224]	; (413544 <lv_img_decoder_built_in_open+0x258>)
  413464:	4788      	blx	r1
  413466:	e7fe      	b.n	413466 <lv_img_decoder_built_in_open+0x17a>
            lv_img_decoder_built_in_close(decoder, dsc);
  413468:	4621      	mov	r1, r4
  41346a:	4638      	mov	r0, r7
  41346c:	4b33      	ldr	r3, [pc, #204]	; (41353c <lv_img_decoder_built_in_open+0x250>)
  41346e:	4798      	blx	r3
            return LV_RES_INV;
  413470:	2000      	movs	r0, #0
  413472:	e757      	b.n	413324 <lv_img_decoder_built_in_open+0x38>
            lv_fs_seek(user_data->f, 4); /*Skip the header*/
  413474:	2104      	movs	r1, #4
  413476:	6828      	ldr	r0, [r5, #0]
  413478:	4b35      	ldr	r3, [pc, #212]	; (413550 <lv_img_decoder_built_in_open+0x264>)
  41347a:	4798      	blx	r3
            for(i = 0; i < palette_size; i++) {
  41347c:	2700      	movs	r7, #0
  41347e:	e022      	b.n	4134c6 <lv_img_decoder_built_in_open+0x1da>
                lv_fs_read(user_data->f, &cur_color, sizeof(lv_color32_t), NULL);
  413480:	2300      	movs	r3, #0
  413482:	2204      	movs	r2, #4
  413484:	4669      	mov	r1, sp
  413486:	6828      	ldr	r0, [r5, #0]
  413488:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 413554 <lv_img_decoder_built_in_open+0x268>
  41348c:	47c0      	blx	r8
                user_data->palette[i] = lv_color_make(cur_color.ch.red, cur_color.ch.green, cur_color.ch.blue);
  41348e:	6869      	ldr	r1, [r5, #4]
  413490:	f89d 0002 	ldrb.w	r0, [sp, #2]
  413494:	f89d 3001 	ldrb.w	r3, [sp, #1]
  413498:	f89d 2000 	ldrb.w	r2, [sp]
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
  41349c:	ea4f 1e53 	mov.w	lr, r3, lsr #5
  4134a0:	08c0      	lsrs	r0, r0, #3
  4134a2:	08d2      	lsrs	r2, r2, #3
  4134a4:	f3c3 0382 	ubfx	r3, r3, #2, #3
  4134a8:	f36e 0902 	bfi	r9, lr, #0, #3
  4134ac:	f360 09c7 	bfi	r9, r0, #3, #5
  4134b0:	f362 290c 	bfi	r9, r2, #8, #5
  4134b4:	f363 394f 	bfi	r9, r3, #13, #3
  4134b8:	f821 9017 	strh.w	r9, [r1, r7, lsl #1]
                user_data->opa[i]     = cur_color.ch.alpha;
  4134bc:	68ab      	ldr	r3, [r5, #8]
  4134be:	f89d 2003 	ldrb.w	r2, [sp, #3]
  4134c2:	55da      	strb	r2, [r3, r7]
            for(i = 0; i < palette_size; i++) {
  4134c4:	3701      	adds	r7, #1
  4134c6:	42b7      	cmp	r7, r6
  4134c8:	d3da      	bcc.n	413480 <lv_img_decoder_built_in_open+0x194>
  4134ca:	e01e      	b.n	41350a <lv_img_decoder_built_in_open+0x21e>
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
  4134cc:	6869      	ldr	r1, [r5, #4]
  4134ce:	eb0c 0083 	add.w	r0, ip, r3, lsl #2
  4134d2:	f890 e002 	ldrb.w	lr, [r0, #2]
  4134d6:	7842      	ldrb	r2, [r0, #1]
  4134d8:	f81c 7023 	ldrb.w	r7, [ip, r3, lsl #2]
  4134dc:	ea4f 1952 	mov.w	r9, r2, lsr #5
  4134e0:	ea4f 0ede 	mov.w	lr, lr, lsr #3
  4134e4:	08ff      	lsrs	r7, r7, #3
  4134e6:	f3c2 0282 	ubfx	r2, r2, #2, #3
  4134ea:	f369 0802 	bfi	r8, r9, #0, #3
  4134ee:	f36e 08c7 	bfi	r8, lr, #3, #5
  4134f2:	f367 280c 	bfi	r8, r7, #8, #5
  4134f6:	f362 384f 	bfi	r8, r2, #13, #3
  4134fa:	f821 8013 	strh.w	r8, [r1, r3, lsl #1]
                user_data->opa[i]     = palette_p[i].ch.alpha;
  4134fe:	68aa      	ldr	r2, [r5, #8]
  413500:	78c1      	ldrb	r1, [r0, #3]
  413502:	54d1      	strb	r1, [r2, r3]
            for(i = 0; i < palette_size; i++) {
  413504:	3301      	adds	r3, #1
  413506:	42b3      	cmp	r3, r6
  413508:	d3e0      	bcc.n	4134cc <lv_img_decoder_built_in_open+0x1e0>
        dsc->img_data = NULL;
  41350a:	2300      	movs	r3, #0
  41350c:	6123      	str	r3, [r4, #16]
        return LV_RES_OK;
  41350e:	2001      	movs	r0, #1
  413510:	e708      	b.n	413324 <lv_img_decoder_built_in_open+0x38>
        lv_img_decoder_built_in_close(decoder, dsc);
  413512:	4621      	mov	r1, r4
  413514:	4638      	mov	r0, r7
  413516:	4b09      	ldr	r3, [pc, #36]	; (41353c <lv_img_decoder_built_in_open+0x250>)
  413518:	4798      	blx	r3
        return LV_RES_INV;
  41351a:	2000      	movs	r0, #0
  41351c:	e702      	b.n	413324 <lv_img_decoder_built_in_open+0x38>
            return LV_RES_INV;
  41351e:	2000      	movs	r0, #0
  413520:	e700      	b.n	413324 <lv_img_decoder_built_in_open+0x38>
  413522:	bf00      	nop
  413524:	004161ad 	.word	0x004161ad
  413528:	0042c8b4 	.word	0x0042c8b4
  41352c:	00428229 	.word	0x00428229
  413530:	004160ed 	.word	0x004160ed
  413534:	004166d9 	.word	0x004166d9
  413538:	00415f95 	.word	0x00415f95
  41353c:	004132b1 	.word	0x004132b1
  413540:	0042c714 	.word	0x0042c714
  413544:	00415fa1 	.word	0x00415fa1
  413548:	00416c0d 	.word	0x00416c0d
  41354c:	0040d419 	.word	0x0040d419
  413550:	004160a5 	.word	0x004160a5
  413554:	00416069 	.word	0x00416069

00413558 <lv_img_decoder_built_in_line_true_color>:
 *   STATIC FUNCTIONS
 **********************/

static lv_res_t lv_img_decoder_built_in_line_true_color(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                        lv_coord_t len, uint8_t * buf)
{
  413558:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  41355c:	b083      	sub	sp, #12
  41355e:	4680      	mov	r8, r0
  413560:	4689      	mov	r9, r1
  413562:	4614      	mov	r4, r2
  413564:	461f      	mov	r7, r3
#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  413566:	69c6      	ldr	r6, [r0, #28]
    lv_fs_res_t res;
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
  413568:	7b00      	ldrb	r0, [r0, #12]
  41356a:	f000 001f 	and.w	r0, r0, #31
  41356e:	4b15      	ldr	r3, [pc, #84]	; (4135c4 <lv_img_decoder_built_in_line_true_color+0x6c>)
  413570:	4798      	blx	r3
  413572:	4605      	mov	r5, r0

    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
  413574:	f8d8 100c 	ldr.w	r1, [r8, #12]
  413578:	f3c1 218a 	ubfx	r1, r1, #10, #11
  41357c:	fb01 9104 	mla	r1, r1, r4, r9
  413580:	fb01 f100 	mul.w	r1, r1, r0
  413584:	10c9      	asrs	r1, r1, #3
    pos += 4; /*Skip the header*/
    res = lv_fs_seek(user_data->f, pos);
  413586:	3104      	adds	r1, #4
  413588:	6830      	ldr	r0, [r6, #0]
  41358a:	4b0f      	ldr	r3, [pc, #60]	; (4135c8 <lv_img_decoder_built_in_line_true_color+0x70>)
  41358c:	4798      	blx	r3
    if(res != LV_FS_RES_OK) {
  41358e:	b118      	cbz	r0, 413598 <lv_img_decoder_built_in_line_true_color+0x40>
        LV_LOG_WARN("Built-in image decoder seek failed");
        return LV_RES_INV;
  413590:	2000      	movs	r0, #0
    LV_UNUSED(len);
    LV_UNUSED(buf);
    LV_LOG_WARN("Image built-in decoder cannot read file because LV_USE_FILESYSTEM = 0");
    return LV_RES_INV;
#endif
}
  413592:	b003      	add	sp, #12
  413594:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint32_t btr = len * (px_size >> 3);
  413598:	f3c5 05c7 	ubfx	r5, r5, #3, #8
  41359c:	fb05 f507 	mul.w	r5, r5, r7
    uint32_t br  = 0;
  4135a0:	ab02      	add	r3, sp, #8
  4135a2:	2200      	movs	r2, #0
  4135a4:	f843 2d04 	str.w	r2, [r3, #-4]!
    res = lv_fs_read(user_data->f, buf, btr, &br);
  4135a8:	462a      	mov	r2, r5
  4135aa:	990a      	ldr	r1, [sp, #40]	; 0x28
  4135ac:	6830      	ldr	r0, [r6, #0]
  4135ae:	4c07      	ldr	r4, [pc, #28]	; (4135cc <lv_img_decoder_built_in_line_true_color+0x74>)
  4135b0:	47a0      	blx	r4
    if(res != LV_FS_RES_OK || btr != br) {
  4135b2:	b920      	cbnz	r0, 4135be <lv_img_decoder_built_in_line_true_color+0x66>
  4135b4:	9b01      	ldr	r3, [sp, #4]
  4135b6:	429d      	cmp	r5, r3
  4135b8:	d1eb      	bne.n	413592 <lv_img_decoder_built_in_line_true_color+0x3a>
    return LV_RES_OK;
  4135ba:	2001      	movs	r0, #1
  4135bc:	e7e9      	b.n	413592 <lv_img_decoder_built_in_line_true_color+0x3a>
        return LV_RES_INV;
  4135be:	2000      	movs	r0, #0
  4135c0:	e7e7      	b.n	413592 <lv_img_decoder_built_in_line_true_color+0x3a>
  4135c2:	bf00      	nop
  4135c4:	0040d419 	.word	0x0040d419
  4135c8:	004160a5 	.word	0x004160a5
  4135cc:	00416069 	.word	0x00416069

004135d0 <lv_img_decoder_built_in_line_alpha>:

static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{
  4135d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4135d4:	b08b      	sub	sp, #44	; 0x2c
  4135d6:	4680      	mov	r8, r0
  4135d8:	460c      	mov	r4, r1
  4135da:	4693      	mov	fp, r2
  4135dc:	461e      	mov	r6, r3
  4135de:	9d14      	ldr	r5, [sp, #80]	; 0x50

#if LV_IMG_CF_ALPHA
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
  4135e0:	2700      	movs	r7, #0
  4135e2:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
  4135e6:	23ff      	movs	r3, #255	; 0xff
  4135e8:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
  4135ec:	4b6a      	ldr	r3, [pc, #424]	; (413798 <lv_img_decoder_built_in_line_alpha+0x1c8>)
  4135ee:	f853 2b04 	ldr.w	r2, [r3], #4
  4135f2:	9208      	str	r2, [sp, #32]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
  4135f4:	f10d 0e10 	add.w	lr, sp, #16
  4135f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4135fa:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
                                          };

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->color;
  4135fe:	f8b8 0008 	ldrh.w	r0, [r8, #8]
    lv_coord_t i;
    for(i = 0; i < len; i++) {
  413602:	463b      	mov	r3, r7
  413604:	e008      	b.n	413618 <lv_img_decoder_built_in_line_alpha+0x48>
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
  413606:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  41360a:	b281      	uxth	r1, r0
  41360c:	54a9      	strb	r1, [r5, r2]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
  41360e:	3201      	adds	r2, #1
  413610:	0a09      	lsrs	r1, r1, #8
  413612:	54a9      	strb	r1, [r5, r2]
    for(i = 0; i < len; i++) {
  413614:	3301      	adds	r3, #1
  413616:	b21b      	sxth	r3, r3
  413618:	42b3      	cmp	r3, r6
  41361a:	dbf4      	blt.n	413606 <lv_img_decoder_built_in_line_alpha+0x36>
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
  41361c:	f898 000c 	ldrb.w	r0, [r8, #12]
  413620:	f000 001f 	and.w	r0, r0, #31
  413624:	4b5d      	ldr	r3, [pc, #372]	; (41379c <lv_img_decoder_built_in_line_alpha+0x1cc>)
  413626:	4798      	blx	r3
  413628:	4681      	mov	r9, r0
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
  41362a:	2701      	movs	r7, #1
  41362c:	4087      	lsls	r7, r0
  41362e:	b2bf      	uxth	r7, r7
  413630:	3f01      	subs	r7, #1
  413632:	b2bf      	uxth	r7, r7

    lv_coord_t w = 0;
    uint32_t ofs = 0;
    int8_t pos   = 0;
    switch(dsc->header.cf) {
  413634:	f898 300c 	ldrb.w	r3, [r8, #12]
  413638:	f003 031f 	and.w	r3, r3, #31
  41363c:	3b0b      	subs	r3, #11
  41363e:	2b03      	cmp	r3, #3
  413640:	d864      	bhi.n	41370c <lv_img_decoder_built_in_line_alpha+0x13c>
  413642:	e8df f003 	tbb	[pc, r3]
  413646:	2802      	.short	0x2802
  413648:	5740      	.short	0x5740
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
  41364a:	f8d8 300c 	ldr.w	r3, [r8, #12]
  41364e:	f3c3 238a 	ubfx	r3, r3, #10, #11
  413652:	10da      	asrs	r2, r3, #3
  413654:	b211      	sxth	r1, r2
  413656:	9101      	str	r1, [sp, #4]
            if(dsc->header.w & 0x7) w++;
  413658:	f013 0f07 	tst.w	r3, #7
  41365c:	d001      	beq.n	413662 <lv_img_decoder_built_in_line_alpha+0x92>
  41365e:	1c53      	adds	r3, r2, #1
  413660:	9301      	str	r3, [sp, #4]
            ofs += w * y + (x >> 3); /*First pixel*/
  413662:	10e3      	asrs	r3, r4, #3
  413664:	9a01      	ldr	r2, [sp, #4]
  413666:	fb0b 3b02 	mla	fp, fp, r2, r3
            pos       = 7 - (x & 0x7);
  41366a:	43e4      	mvns	r4, r4
  41366c:	f004 0407 	and.w	r4, r4, #7
            opa_table = alpha1_opa_table;
  413670:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
            pos = 0;
            break;
    }

#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  413674:	f8d8 301c 	ldr.w	r3, [r8, #28]
  413678:	9303      	str	r3, [sp, #12]
    uint8_t * fs_buf = _lv_mem_buf_get(w);
  41367a:	9801      	ldr	r0, [sp, #4]
  41367c:	4b48      	ldr	r3, [pc, #288]	; (4137a0 <lv_img_decoder_built_in_line_alpha+0x1d0>)
  41367e:	4798      	blx	r3
  413680:	9002      	str	r0, [sp, #8]
#endif

    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
  413682:	f898 300a 	ldrb.w	r3, [r8, #10]
  413686:	2b00      	cmp	r3, #0
  413688:	d149      	bne.n	41371e <lv_img_decoder_built_in_line_alpha+0x14e>
        const lv_img_dsc_t * img_dsc = dsc->src;
  41368a:	f8d8 3004 	ldr.w	r3, [r8, #4]

        data_tmp = img_dsc->data + ofs;
  41368e:	689b      	ldr	r3, [r3, #8]
  413690:	449b      	add	fp, r3
    }
    else {
#if LV_USE_FILESYSTEM
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
        lv_fs_read(user_data->f, fs_buf, w, NULL);
        data_tmp = fs_buf;
  413692:	2100      	movs	r1, #0
  413694:	e05d      	b.n	413752 <lv_img_decoder_built_in_line_alpha+0x182>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
  413696:	f8d8 300c 	ldr.w	r3, [r8, #12]
  41369a:	f3c3 238a 	ubfx	r3, r3, #10, #11
  41369e:	109a      	asrs	r2, r3, #2
  4136a0:	b211      	sxth	r1, r2
  4136a2:	9101      	str	r1, [sp, #4]
            if(dsc->header.w & 0x3) w++;
  4136a4:	f013 0f03 	tst.w	r3, #3
  4136a8:	d001      	beq.n	4136ae <lv_img_decoder_built_in_line_alpha+0xde>
  4136aa:	1c53      	adds	r3, r2, #1
  4136ac:	9301      	str	r3, [sp, #4]
            ofs += w * y + (x >> 2); /*First pixel*/
  4136ae:	10a3      	asrs	r3, r4, #2
  4136b0:	9a01      	ldr	r2, [sp, #4]
  4136b2:	fb0b 3b02 	mla	fp, fp, r2, r3
            pos       = 6 - ((x & 0x3) * 2);
  4136b6:	b2a4      	uxth	r4, r4
  4136b8:	43e4      	mvns	r4, r4
  4136ba:	f004 0403 	and.w	r4, r4, #3
  4136be:	0064      	lsls	r4, r4, #1
            opa_table = alpha2_opa_table;
  4136c0:	f10d 0a20 	add.w	sl, sp, #32
            break;
  4136c4:	e7d6      	b.n	413674 <lv_img_decoder_built_in_line_alpha+0xa4>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
  4136c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
  4136ca:	f3c3 238a 	ubfx	r3, r3, #10, #11
  4136ce:	105a      	asrs	r2, r3, #1
  4136d0:	b211      	sxth	r1, r2
  4136d2:	9101      	str	r1, [sp, #4]
            if(dsc->header.w & 0x1) w++;
  4136d4:	f013 0f01 	tst.w	r3, #1
  4136d8:	d001      	beq.n	4136de <lv_img_decoder_built_in_line_alpha+0x10e>
  4136da:	1c53      	adds	r3, r2, #1
  4136dc:	9301      	str	r3, [sp, #4]
            ofs += w * y + (x >> 1); /*First pixel*/
  4136de:	1063      	asrs	r3, r4, #1
  4136e0:	9a01      	ldr	r2, [sp, #4]
  4136e2:	fb0b 3b02 	mla	fp, fp, r2, r3
            pos       = 4 - ((x & 0x1) * 4);
  4136e6:	f014 0f01 	tst.w	r4, #1
  4136ea:	d114      	bne.n	413716 <lv_img_decoder_built_in_line_alpha+0x146>
  4136ec:	2404      	movs	r4, #4
            opa_table = alpha4_opa_table;
  4136ee:	f10d 0a10 	add.w	sl, sp, #16
  4136f2:	e7bf      	b.n	413674 <lv_img_decoder_built_in_line_alpha+0xa4>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
  4136f4:	f8d8 300c 	ldr.w	r3, [r8, #12]
  4136f8:	f3c3 238a 	ubfx	r3, r3, #10, #11
  4136fc:	b29a      	uxth	r2, r3
  4136fe:	b21b      	sxth	r3, r3
  413700:	9301      	str	r3, [sp, #4]
            ofs += w * y + x;  /*First pixel*/
  413702:	fb0b 4b02 	mla	fp, fp, r2, r4
            pos = 0;
  413706:	2400      	movs	r4, #0
    const lv_opa_t * opa_table = NULL;
  413708:	46a2      	mov	sl, r4
            break;
  41370a:	e7b3      	b.n	413674 <lv_img_decoder_built_in_line_alpha+0xa4>
    int8_t pos   = 0;
  41370c:	2400      	movs	r4, #0
    uint32_t ofs = 0;
  41370e:	46a3      	mov	fp, r4
    lv_coord_t w = 0;
  413710:	9401      	str	r4, [sp, #4]
    const lv_opa_t * opa_table = NULL;
  413712:	46a2      	mov	sl, r4
  413714:	e7ae      	b.n	413674 <lv_img_decoder_built_in_line_alpha+0xa4>
            pos       = 4 - ((x & 0x1) * 4);
  413716:	2400      	movs	r4, #0
            opa_table = alpha4_opa_table;
  413718:	f10d 0a10 	add.w	sl, sp, #16
  41371c:	e7aa      	b.n	413674 <lv_img_decoder_built_in_line_alpha+0xa4>
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
  41371e:	f10b 0104 	add.w	r1, fp, #4
  413722:	9b03      	ldr	r3, [sp, #12]
  413724:	6818      	ldr	r0, [r3, #0]
  413726:	4b1f      	ldr	r3, [pc, #124]	; (4137a4 <lv_img_decoder_built_in_line_alpha+0x1d4>)
  413728:	4798      	blx	r3
        lv_fs_read(user_data->f, fs_buf, w, NULL);
  41372a:	2300      	movs	r3, #0
  41372c:	9a01      	ldr	r2, [sp, #4]
  41372e:	9902      	ldr	r1, [sp, #8]
  413730:	9803      	ldr	r0, [sp, #12]
  413732:	6800      	ldr	r0, [r0, #0]
  413734:	f8df b074 	ldr.w	fp, [pc, #116]	; 4137ac <lv_img_decoder_built_in_line_alpha+0x1dc>
  413738:	47d8      	blx	fp
        data_tmp = fs_buf;
  41373a:	f8dd b008 	ldr.w	fp, [sp, #8]
  41373e:	e7a8      	b.n	413692 <lv_img_decoder_built_in_line_alpha+0xc2>
    }

    for(i = 0; i < len; i++) {
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;

        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
  413740:	f805 e000 	strb.w	lr, [r5, r0]
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];

        pos -= px_size;
  413744:	eba4 0409 	sub.w	r4, r4, r9
  413748:	b264      	sxtb	r4, r4
        if(pos < 0) {
  41374a:	2c00      	cmp	r4, #0
  41374c:	db17      	blt.n	41377e <lv_img_decoder_built_in_line_alpha+0x1ae>
    for(i = 0; i < len; i++) {
  41374e:	3101      	adds	r1, #1
  413750:	b209      	sxth	r1, r1
  413752:	42b1      	cmp	r1, r6
  413754:	da19      	bge.n	41378a <lv_img_decoder_built_in_line_alpha+0x1ba>
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
  413756:	f89b 3000 	ldrb.w	r3, [fp]
  41375a:	fa07 f204 	lsl.w	r2, r7, r4
  41375e:	4013      	ands	r3, r2
  413760:	4123      	asrs	r3, r4
  413762:	fa5f fe83 	uxtb.w	lr, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
  413766:	eb01 0041 	add.w	r0, r1, r1, lsl #1
  41376a:	3002      	adds	r0, #2
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
  41376c:	f898 200c 	ldrb.w	r2, [r8, #12]
  413770:	f002 021f 	and.w	r2, r2, #31
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
  413774:	2a0e      	cmp	r2, #14
  413776:	d0e3      	beq.n	413740 <lv_img_decoder_built_in_line_alpha+0x170>
  413778:	f81a e00e 	ldrb.w	lr, [sl, lr]
  41377c:	e7e0      	b.n	413740 <lv_img_decoder_built_in_line_alpha+0x170>
            pos = 8 - px_size;
  41377e:	f1c9 0408 	rsb	r4, r9, #8
  413782:	b264      	sxtb	r4, r4
            data_tmp++;
  413784:	f10b 0b01 	add.w	fp, fp, #1
  413788:	e7e1      	b.n	41374e <lv_img_decoder_built_in_line_alpha+0x17e>
        }
    }
#if LV_USE_FILESYSTEM
    _lv_mem_buf_release(fs_buf);
  41378a:	9802      	ldr	r0, [sp, #8]
  41378c:	4b06      	ldr	r3, [pc, #24]	; (4137a8 <lv_img_decoder_built_in_line_alpha+0x1d8>)
  41378e:	4798      	blx	r3

#else
    LV_LOG_WARN("Image built-in alpha line reader failed because LV_IMG_CF_ALPHA is 0 in lv_conf.h");
    return LV_RES_INV;
#endif
}
  413790:	2001      	movs	r0, #1
  413792:	b00b      	add	sp, #44	; 0x2c
  413794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  413798:	0042c8a0 	.word	0x0042c8a0
  41379c:	0040d419 	.word	0x0040d419
  4137a0:	00416a81 	.word	0x00416a81
  4137a4:	004160a5 	.word	0x004160a5
  4137a8:	00416831 	.word	0x00416831
  4137ac:	00416069 	.word	0x00416069

004137b0 <lv_img_decoder_built_in_line_indexed>:

static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{
  4137b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4137b4:	b083      	sub	sp, #12
  4137b6:	4682      	mov	sl, r0
  4137b8:	460c      	mov	r4, r1
  4137ba:	4616      	mov	r6, r2
  4137bc:	4699      	mov	r9, r3
  4137be:	9d0c      	ldr	r5, [sp, #48]	; 0x30

#if LV_IMG_CF_INDEXED
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
  4137c0:	7b00      	ldrb	r0, [r0, #12]
  4137c2:	f000 001f 	and.w	r0, r0, #31
  4137c6:	4b5d      	ldr	r3, [pc, #372]	; (41393c <lv_img_decoder_built_in_line_indexed+0x18c>)
  4137c8:	4798      	blx	r3
  4137ca:	4680      	mov	r8, r0
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
  4137cc:	2701      	movs	r7, #1
  4137ce:	4087      	lsls	r7, r0
  4137d0:	b2bf      	uxth	r7, r7
  4137d2:	3f01      	subs	r7, #1
  4137d4:	b2bf      	uxth	r7, r7

    lv_coord_t w = 0;
    int8_t pos   = 0;
    uint32_t ofs = 0;
    switch(dsc->header.cf) {
  4137d6:	f89a 300c 	ldrb.w	r3, [sl, #12]
  4137da:	f003 031f 	and.w	r3, r3, #31
  4137de:	3b07      	subs	r3, #7
  4137e0:	2b03      	cmp	r3, #3
  4137e2:	d868      	bhi.n	4138b6 <lv_img_decoder_built_in_line_indexed+0x106>
  4137e4:	e8df f003 	tbb	[pc, r3]
  4137e8:	58412902 	.word	0x58412902
        case LV_IMG_CF_INDEXED_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
  4137ec:	f8da 300c 	ldr.w	r3, [sl, #12]
  4137f0:	f3c3 238a 	ubfx	r3, r3, #10, #11
  4137f4:	10da      	asrs	r2, r3, #3
  4137f6:	fa0f fb82 	sxth.w	fp, r2
            if(dsc->header.w & 0x7) w++;
  4137fa:	f013 0f07 	tst.w	r3, #7
  4137fe:	d001      	beq.n	413804 <lv_img_decoder_built_in_line_indexed+0x54>
  413800:	f102 0b01 	add.w	fp, r2, #1
            ofs += w * y + (x >> 3); /*First pixel*/
  413804:	10e3      	asrs	r3, r4, #3
  413806:	fb06 360b 	mla	r6, r6, fp, r3
            ofs += 8;                /*Skip the palette*/
  41380a:	f106 0308 	add.w	r3, r6, #8
  41380e:	9301      	str	r3, [sp, #4]
            pos = 7 - (x & 0x7);
  413810:	43e4      	mvns	r4, r4
  413812:	f004 0407 	and.w	r4, r4, #7
            ofs += 1024;       /*Skip the palette*/
            pos = 0;
            break;
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  413816:	f8da 601c 	ldr.w	r6, [sl, #28]

#if LV_USE_FILESYSTEM
    uint8_t * fs_buf = _lv_mem_buf_get(w);
  41381a:	4658      	mov	r0, fp
  41381c:	4b48      	ldr	r3, [pc, #288]	; (413940 <lv_img_decoder_built_in_line_indexed+0x190>)
  41381e:	4798      	blx	r3
  413820:	9000      	str	r0, [sp, #0]
#endif
    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
  413822:	f89a 300a 	ldrb.w	r3, [sl, #10]
  413826:	2b00      	cmp	r3, #0
  413828:	d14c      	bne.n	4138c4 <lv_img_decoder_built_in_line_indexed+0x114>
        const lv_img_dsc_t * img_dsc = dsc->src;
  41382a:	f8da 3004 	ldr.w	r3, [sl, #4]
        data_tmp                     = img_dsc->data + ofs;
  41382e:	689b      	ldr	r3, [r3, #8]
  413830:	9a01      	ldr	r2, [sp, #4]
  413832:	441a      	add	r2, r3
  413834:	4696      	mov	lr, r2
    }
    else {
#if LV_USE_FILESYSTEM
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
        lv_fs_read(user_data->f, fs_buf, w, NULL);
        data_tmp = fs_buf;
  413836:	2100      	movs	r1, #0
  413838:	e056      	b.n	4138e8 <lv_img_decoder_built_in_line_indexed+0x138>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
  41383a:	f8da 300c 	ldr.w	r3, [sl, #12]
  41383e:	f3c3 238a 	ubfx	r3, r3, #10, #11
  413842:	109a      	asrs	r2, r3, #2
  413844:	fa0f fb82 	sxth.w	fp, r2
            if(dsc->header.w & 0x3) w++;
  413848:	f013 0f03 	tst.w	r3, #3
  41384c:	d001      	beq.n	413852 <lv_img_decoder_built_in_line_indexed+0xa2>
  41384e:	f102 0b01 	add.w	fp, r2, #1
            ofs += w * y + (x >> 2); /*First pixel*/
  413852:	10a3      	asrs	r3, r4, #2
  413854:	fb06 360b 	mla	r6, r6, fp, r3
            ofs += 16;               /*Skip the palette*/
  413858:	f106 0310 	add.w	r3, r6, #16
  41385c:	9301      	str	r3, [sp, #4]
            pos = 6 - ((x & 0x3) * 2);
  41385e:	b2a4      	uxth	r4, r4
  413860:	43e4      	mvns	r4, r4
  413862:	f004 0403 	and.w	r4, r4, #3
  413866:	0064      	lsls	r4, r4, #1
            break;
  413868:	e7d5      	b.n	413816 <lv_img_decoder_built_in_line_indexed+0x66>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
  41386a:	f8da 300c 	ldr.w	r3, [sl, #12]
  41386e:	f3c3 238a 	ubfx	r3, r3, #10, #11
  413872:	105a      	asrs	r2, r3, #1
  413874:	fa0f fb82 	sxth.w	fp, r2
            if(dsc->header.w & 0x1) w++;
  413878:	f013 0f01 	tst.w	r3, #1
  41387c:	d001      	beq.n	413882 <lv_img_decoder_built_in_line_indexed+0xd2>
  41387e:	f102 0b01 	add.w	fp, r2, #1
            ofs += w * y + (x >> 1); /*First pixel*/
  413882:	1063      	asrs	r3, r4, #1
  413884:	fb06 360b 	mla	r6, r6, fp, r3
            ofs += 64;               /*Skip the palette*/
  413888:	f106 0340 	add.w	r3, r6, #64	; 0x40
  41388c:	9301      	str	r3, [sp, #4]
            pos = 4 - ((x & 0x1) * 4);
  41388e:	f014 0f01 	tst.w	r4, #1
  413892:	d115      	bne.n	4138c0 <lv_img_decoder_built_in_line_indexed+0x110>
  413894:	2404      	movs	r4, #4
  413896:	e7be      	b.n	413816 <lv_img_decoder_built_in_line_indexed+0x66>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
  413898:	f8da 300c 	ldr.w	r3, [sl, #12]
  41389c:	f3c3 2b8a 	ubfx	fp, r3, #10, #11
  4138a0:	fa1f f38b 	uxth.w	r3, fp
  4138a4:	fa0f fb8b 	sxth.w	fp, fp
            ofs += w * y + x;  /*First pixel*/
  4138a8:	fb06 4403 	mla	r4, r6, r3, r4
            ofs += 1024;       /*Skip the palette*/
  4138ac:	f504 6380 	add.w	r3, r4, #1024	; 0x400
  4138b0:	9301      	str	r3, [sp, #4]
            pos = 0;
  4138b2:	2400      	movs	r4, #0
            break;
  4138b4:	e7af      	b.n	413816 <lv_img_decoder_built_in_line_indexed+0x66>
    uint32_t ofs = 0;
  4138b6:	2300      	movs	r3, #0
  4138b8:	9301      	str	r3, [sp, #4]
    int8_t pos   = 0;
  4138ba:	461c      	mov	r4, r3
    lv_coord_t w = 0;
  4138bc:	469b      	mov	fp, r3
  4138be:	e7aa      	b.n	413816 <lv_img_decoder_built_in_line_indexed+0x66>
            pos = 4 - ((x & 0x1) * 4);
  4138c0:	2400      	movs	r4, #0
  4138c2:	e7a8      	b.n	413816 <lv_img_decoder_built_in_line_indexed+0x66>
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
  4138c4:	9901      	ldr	r1, [sp, #4]
  4138c6:	3104      	adds	r1, #4
  4138c8:	6830      	ldr	r0, [r6, #0]
  4138ca:	4b1e      	ldr	r3, [pc, #120]	; (413944 <lv_img_decoder_built_in_line_indexed+0x194>)
  4138cc:	4798      	blx	r3
        lv_fs_read(user_data->f, fs_buf, w, NULL);
  4138ce:	2300      	movs	r3, #0
  4138d0:	465a      	mov	r2, fp
  4138d2:	f8dd b000 	ldr.w	fp, [sp]
  4138d6:	4659      	mov	r1, fp
  4138d8:	6830      	ldr	r0, [r6, #0]
  4138da:	f8df a070 	ldr.w	sl, [pc, #112]	; 41394c <lv_img_decoder_built_in_line_indexed+0x19c>
  4138de:	47d0      	blx	sl
        data_tmp = fs_buf;
  4138e0:	46de      	mov	lr, fp
  4138e2:	e7a8      	b.n	413836 <lv_img_decoder_built_in_line_indexed+0x86>
        return LV_RES_INV;
#endif
    }

    lv_coord_t i;
    for(i = 0; i < len; i++) {
  4138e4:	3101      	adds	r1, #1
  4138e6:	b209      	sxth	r1, r1
  4138e8:	4549      	cmp	r1, r9
  4138ea:	da20      	bge.n	41392e <lv_img_decoder_built_in_line_indexed+0x17e>
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
  4138ec:	f89e 3000 	ldrb.w	r3, [lr]
  4138f0:	fa07 f204 	lsl.w	r2, r7, r4
  4138f4:	4013      	ands	r3, r2
  4138f6:	4123      	asrs	r3, r4

        lv_color_t color = user_data->palette[val_act];
  4138f8:	6870      	ldr	r0, [r6, #4]
  4138fa:	b2db      	uxtb	r3, r3
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full & 0xFF;
  4138fc:	eb01 0241 	add.w	r2, r1, r1, lsl #1
  413900:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
  413904:	54a8      	strb	r0, [r5, r2]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (color.full >> 8) & 0xFF;
  413906:	f102 0c01 	add.w	ip, r2, #1
  41390a:	0a00      	lsrs	r0, r0, #8
  41390c:	f805 000c 	strb.w	r0, [r5, ip]
#elif LV_COLOR_DEPTH == 32
        *((uint32_t *)&buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE]) = color.full;
#else
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
  413910:	3202      	adds	r2, #2
  413912:	68b0      	ldr	r0, [r6, #8]
  413914:	5cc3      	ldrb	r3, [r0, r3]
  413916:	54ab      	strb	r3, [r5, r2]

        pos -= px_size;
  413918:	eba4 0408 	sub.w	r4, r4, r8
  41391c:	b264      	sxtb	r4, r4
        if(pos < 0) {
  41391e:	2c00      	cmp	r4, #0
  413920:	dae0      	bge.n	4138e4 <lv_img_decoder_built_in_line_indexed+0x134>
            pos = 8 - px_size;
  413922:	f1c8 0408 	rsb	r4, r8, #8
  413926:	b264      	sxtb	r4, r4
            data_tmp++;
  413928:	f10e 0e01 	add.w	lr, lr, #1
  41392c:	e7da      	b.n	4138e4 <lv_img_decoder_built_in_line_indexed+0x134>
        }
    }
#if LV_USE_FILESYSTEM
    _lv_mem_buf_release(fs_buf);
  41392e:	9800      	ldr	r0, [sp, #0]
  413930:	4b05      	ldr	r3, [pc, #20]	; (413948 <lv_img_decoder_built_in_line_indexed+0x198>)
  413932:	4798      	blx	r3
    return LV_RES_OK;
#else
    LV_LOG_WARN("Image built-in indexed line reader failed because LV_IMG_CF_INDEXED is 0 in lv_conf.h");
    return LV_RES_INV;
#endif
}
  413934:	2001      	movs	r0, #1
  413936:	b003      	add	sp, #12
  413938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41393c:	0040d419 	.word	0x0040d419
  413940:	00416a81 	.word	0x00416a81
  413944:	004160a5 	.word	0x004160a5
  413948:	00416831 	.word	0x00416831
  41394c:	00416069 	.word	0x00416069

00413950 <lv_img_decoder_built_in_read_line>:
{
  413950:	b530      	push	{r4, r5, lr}
  413952:	b083      	sub	sp, #12
  413954:	4608      	mov	r0, r1
  413956:	4611      	mov	r1, r2
  413958:	461a      	mov	r2, r3
  41395a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
  41395e:	7b04      	ldrb	r4, [r0, #12]
  413960:	f004 041f 	and.w	r4, r4, #31
  413964:	1f25      	subs	r5, r4, #4
  413966:	b2ed      	uxtb	r5, r5
  413968:	2d02      	cmp	r5, #2
  41396a:	d80a      	bhi.n	413982 <lv_img_decoder_built_in_read_line+0x32>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
  41396c:	7a84      	ldrb	r4, [r0, #10]
  41396e:	2c01      	cmp	r4, #1
  413970:	d002      	beq.n	413978 <lv_img_decoder_built_in_read_line+0x28>
    lv_res_t res = LV_RES_INV;
  413972:	2000      	movs	r0, #0
}
  413974:	b003      	add	sp, #12
  413976:	bd30      	pop	{r4, r5, pc}
            res = lv_img_decoder_built_in_line_true_color(dsc, x, y, len, buf);
  413978:	9c07      	ldr	r4, [sp, #28]
  41397a:	9400      	str	r4, [sp, #0]
  41397c:	4c0b      	ldr	r4, [pc, #44]	; (4139ac <lv_img_decoder_built_in_read_line+0x5c>)
  41397e:	47a0      	blx	r4
  413980:	e7f8      	b.n	413974 <lv_img_decoder_built_in_read_line+0x24>
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
  413982:	f1a4 050b 	sub.w	r5, r4, #11
  413986:	b2ed      	uxtb	r5, r5
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
  413988:	2d03      	cmp	r5, #3
  41398a:	d905      	bls.n	413998 <lv_img_decoder_built_in_read_line+0x48>
            dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
  41398c:	3c07      	subs	r4, #7
  41398e:	b2e4      	uxtb	r4, r4
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
  413990:	2c03      	cmp	r4, #3
  413992:	d906      	bls.n	4139a2 <lv_img_decoder_built_in_read_line+0x52>
        return LV_RES_INV;
  413994:	2000      	movs	r0, #0
  413996:	e7ed      	b.n	413974 <lv_img_decoder_built_in_read_line+0x24>
        res = lv_img_decoder_built_in_line_alpha(dsc, x, y, len, buf);
  413998:	9c07      	ldr	r4, [sp, #28]
  41399a:	9400      	str	r4, [sp, #0]
  41399c:	4c04      	ldr	r4, [pc, #16]	; (4139b0 <lv_img_decoder_built_in_read_line+0x60>)
  41399e:	47a0      	blx	r4
  4139a0:	e7e8      	b.n	413974 <lv_img_decoder_built_in_read_line+0x24>
        res = lv_img_decoder_built_in_line_indexed(dsc, x, y, len, buf);
  4139a2:	9c07      	ldr	r4, [sp, #28]
  4139a4:	9400      	str	r4, [sp, #0]
  4139a6:	4c03      	ldr	r4, [pc, #12]	; (4139b4 <lv_img_decoder_built_in_read_line+0x64>)
  4139a8:	47a0      	blx	r4
  4139aa:	e7e3      	b.n	413974 <lv_img_decoder_built_in_read_line+0x24>
  4139ac:	00413559 	.word	0x00413559
  4139b0:	004135d1 	.word	0x004135d1
  4139b4:	004137b1 	.word	0x004137b1

004139b8 <lv_img_decoder_get_info>:
{
  4139b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4139ba:	4607      	mov	r7, r0
  4139bc:	460e      	mov	r6, r1
    header->always_zero = 0;
  4139be:	780b      	ldrb	r3, [r1, #0]
  4139c0:	f36f 1347 	bfc	r3, #5, #3
  4139c4:	700b      	strb	r3, [r1, #0]
    header->h = 0;
  4139c6:	884b      	ldrh	r3, [r1, #2]
  4139c8:	f36f 134f 	bfc	r3, #5, #11
  4139cc:	804b      	strh	r3, [r1, #2]
    header->w = 0;
  4139ce:	680b      	ldr	r3, [r1, #0]
  4139d0:	f36f 2394 	bfc	r3, #10, #11
  4139d4:	600b      	str	r3, [r1, #0]
    header->cf = LV_IMG_CF_UNKNOWN;
  4139d6:	f36f 0304 	bfc	r3, #0, #5
  4139da:	700b      	strb	r3, [r1, #0]
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  4139dc:	480c      	ldr	r0, [pc, #48]	; (413a10 <lv_img_decoder_get_info+0x58>)
  4139de:	4b0d      	ldr	r3, [pc, #52]	; (413a14 <lv_img_decoder_get_info+0x5c>)
  4139e0:	4798      	blx	r3
  4139e2:	4604      	mov	r4, r0
    lv_res_t res = LV_RES_INV;
  4139e4:	2500      	movs	r5, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  4139e6:	e005      	b.n	4139f4 <lv_img_decoder_get_info+0x3c>
        res = LV_RES_INV;
  4139e8:	2500      	movs	r5, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  4139ea:	4621      	mov	r1, r4
  4139ec:	4808      	ldr	r0, [pc, #32]	; (413a10 <lv_img_decoder_get_info+0x58>)
  4139ee:	4b0a      	ldr	r3, [pc, #40]	; (413a18 <lv_img_decoder_get_info+0x60>)
  4139f0:	4798      	blx	r3
  4139f2:	4604      	mov	r4, r0
  4139f4:	b14c      	cbz	r4, 413a0a <lv_img_decoder_get_info+0x52>
        if(d->info_cb) {
  4139f6:	6823      	ldr	r3, [r4, #0]
  4139f8:	2b00      	cmp	r3, #0
  4139fa:	d0f5      	beq.n	4139e8 <lv_img_decoder_get_info+0x30>
            res = d->info_cb(d, src, header);
  4139fc:	4632      	mov	r2, r6
  4139fe:	4639      	mov	r1, r7
  413a00:	4620      	mov	r0, r4
  413a02:	4798      	blx	r3
  413a04:	4605      	mov	r5, r0
            if(res == LV_RES_OK) break;
  413a06:	2801      	cmp	r0, #1
  413a08:	d1ef      	bne.n	4139ea <lv_img_decoder_get_info+0x32>
}
  413a0a:	4628      	mov	r0, r5
  413a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  413a0e:	bf00      	nop
  413a10:	2043a29c 	.word	0x2043a29c
  413a14:	004162a5 	.word	0x004162a5
  413a18:	004162b9 	.word	0x004162b9

00413a1c <lv_img_decoder_open>:
{
  413a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  413a1e:	4606      	mov	r6, r0
  413a20:	460f      	mov	r7, r1
    dsc->color     = color;
  413a22:	8102      	strh	r2, [r0, #8]
    dsc->src_type  = lv_img_src_get_type(src);
  413a24:	4608      	mov	r0, r1
  413a26:	4b1d      	ldr	r3, [pc, #116]	; (413a9c <lv_img_decoder_open+0x80>)
  413a28:	4798      	blx	r3
  413a2a:	72b0      	strb	r0, [r6, #10]
    dsc->user_data = NULL;
  413a2c:	2300      	movs	r3, #0
  413a2e:	61f3      	str	r3, [r6, #28]
    if(dsc->src_type == LV_IMG_SRC_FILE) {
  413a30:	2801      	cmp	r0, #1
  413a32:	d006      	beq.n	413a42 <lv_img_decoder_open+0x26>
        dsc->src       = src;
  413a34:	6077      	str	r7, [r6, #4]
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  413a36:	481a      	ldr	r0, [pc, #104]	; (413aa0 <lv_img_decoder_open+0x84>)
  413a38:	4b1a      	ldr	r3, [pc, #104]	; (413aa4 <lv_img_decoder_open+0x88>)
  413a3a:	4798      	blx	r3
  413a3c:	4604      	mov	r4, r0
    lv_res_t res = LV_RES_INV;
  413a3e:	2500      	movs	r5, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  413a40:	e00f      	b.n	413a62 <lv_img_decoder_open+0x46>
        size_t fnlen = strlen(src);
  413a42:	4638      	mov	r0, r7
  413a44:	4b18      	ldr	r3, [pc, #96]	; (413aa8 <lv_img_decoder_open+0x8c>)
  413a46:	4798      	blx	r3
        dsc->src = lv_mem_alloc(fnlen + 1);
  413a48:	3001      	adds	r0, #1
  413a4a:	4b18      	ldr	r3, [pc, #96]	; (413aac <lv_img_decoder_open+0x90>)
  413a4c:	4798      	blx	r3
  413a4e:	6070      	str	r0, [r6, #4]
        strcpy((char *)dsc->src, src);
  413a50:	4639      	mov	r1, r7
  413a52:	4b17      	ldr	r3, [pc, #92]	; (413ab0 <lv_img_decoder_open+0x94>)
  413a54:	4798      	blx	r3
  413a56:	e7ee      	b.n	413a36 <lv_img_decoder_open+0x1a>
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  413a58:	4621      	mov	r1, r4
  413a5a:	4811      	ldr	r0, [pc, #68]	; (413aa0 <lv_img_decoder_open+0x84>)
  413a5c:	4b15      	ldr	r3, [pc, #84]	; (413ab4 <lv_img_decoder_open+0x98>)
  413a5e:	4798      	blx	r3
  413a60:	4604      	mov	r4, r0
  413a62:	b1c4      	cbz	r4, 413a96 <lv_img_decoder_open+0x7a>
        if(d->info_cb == NULL || d->open_cb == NULL) continue;
  413a64:	6823      	ldr	r3, [r4, #0]
  413a66:	2b00      	cmp	r3, #0
  413a68:	d0f6      	beq.n	413a58 <lv_img_decoder_open+0x3c>
  413a6a:	6862      	ldr	r2, [r4, #4]
  413a6c:	2a00      	cmp	r2, #0
  413a6e:	d0f3      	beq.n	413a58 <lv_img_decoder_open+0x3c>
        res = d->info_cb(d, src, &dsc->header);
  413a70:	f106 020c 	add.w	r2, r6, #12
  413a74:	4639      	mov	r1, r7
  413a76:	4620      	mov	r0, r4
  413a78:	4798      	blx	r3
  413a7a:	4605      	mov	r5, r0
        if(res != LV_RES_OK) continue;
  413a7c:	2801      	cmp	r0, #1
  413a7e:	d1eb      	bne.n	413a58 <lv_img_decoder_open+0x3c>
        dsc->error_msg = NULL;
  413a80:	2300      	movs	r3, #0
  413a82:	61b3      	str	r3, [r6, #24]
        dsc->img_data  = NULL;
  413a84:	6133      	str	r3, [r6, #16]
        dsc->decoder   = d;
  413a86:	6034      	str	r4, [r6, #0]
        res = d->open_cb(d, dsc);
  413a88:	6863      	ldr	r3, [r4, #4]
  413a8a:	4631      	mov	r1, r6
  413a8c:	4620      	mov	r0, r4
  413a8e:	4798      	blx	r3
  413a90:	4605      	mov	r5, r0
        if(res == LV_RES_OK) break;
  413a92:	2801      	cmp	r0, #1
  413a94:	d1e0      	bne.n	413a58 <lv_img_decoder_open+0x3c>
}
  413a96:	4628      	mov	r0, r5
  413a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  413a9a:	bf00      	nop
  413a9c:	0040d6dd 	.word	0x0040d6dd
  413aa0:	2043a29c 	.word	0x2043a29c
  413aa4:	004162a5 	.word	0x004162a5
  413aa8:	004285c1 	.word	0x004285c1
  413aac:	004166d9 	.word	0x004166d9
  413ab0:	004284fd 	.word	0x004284fd
  413ab4:	004162b9 	.word	0x004162b9

00413ab8 <lv_img_decoder_read_line>:
{
  413ab8:	b570      	push	{r4, r5, r6, lr}
  413aba:	b082      	sub	sp, #8
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
  413abc:	6806      	ldr	r6, [r0, #0]
  413abe:	68b4      	ldr	r4, [r6, #8]
  413ac0:	b154      	cbz	r4, 413ad8 <lv_img_decoder_read_line+0x20>
  413ac2:	461d      	mov	r5, r3
  413ac4:	4613      	mov	r3, r2
  413ac6:	460a      	mov	r2, r1
  413ac8:	4601      	mov	r1, r0
  413aca:	9806      	ldr	r0, [sp, #24]
  413acc:	9001      	str	r0, [sp, #4]
  413ace:	9500      	str	r5, [sp, #0]
  413ad0:	4630      	mov	r0, r6
  413ad2:	47a0      	blx	r4
}
  413ad4:	b002      	add	sp, #8
  413ad6:	bd70      	pop	{r4, r5, r6, pc}
    lv_res_t res = LV_RES_INV;
  413ad8:	2000      	movs	r0, #0
  413ada:	e7fb      	b.n	413ad4 <lv_img_decoder_read_line+0x1c>

00413adc <lv_img_decoder_close>:
    if(dsc->decoder) {
  413adc:	6803      	ldr	r3, [r0, #0]
  413ade:	b183      	cbz	r3, 413b02 <lv_img_decoder_close+0x26>
{
  413ae0:	b510      	push	{r4, lr}
  413ae2:	4604      	mov	r4, r0
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
  413ae4:	68da      	ldr	r2, [r3, #12]
  413ae6:	b112      	cbz	r2, 413aee <lv_img_decoder_close+0x12>
  413ae8:	4601      	mov	r1, r0
  413aea:	4618      	mov	r0, r3
  413aec:	4790      	blx	r2
        if(dsc->src_type == LV_IMG_SRC_FILE) {
  413aee:	7aa3      	ldrb	r3, [r4, #10]
  413af0:	2b01      	cmp	r3, #1
  413af2:	d000      	beq.n	413af6 <lv_img_decoder_close+0x1a>
  413af4:	bd10      	pop	{r4, pc}
            lv_mem_free(dsc->src);
  413af6:	6860      	ldr	r0, [r4, #4]
  413af8:	4b02      	ldr	r3, [pc, #8]	; (413b04 <lv_img_decoder_close+0x28>)
  413afa:	4798      	blx	r3
            dsc->src = NULL;
  413afc:	2300      	movs	r3, #0
  413afe:	6063      	str	r3, [r4, #4]
}
  413b00:	e7f8      	b.n	413af4 <lv_img_decoder_close+0x18>
  413b02:	4770      	bx	lr
  413b04:	0041679d 	.word	0x0041679d

00413b08 <lv_img_decoder_create>:
{
  413b08:	b510      	push	{r4, lr}
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
  413b0a:	480a      	ldr	r0, [pc, #40]	; (413b34 <lv_img_decoder_create+0x2c>)
  413b0c:	4b0a      	ldr	r3, [pc, #40]	; (413b38 <lv_img_decoder_create+0x30>)
  413b0e:	4798      	blx	r3
  413b10:	4604      	mov	r4, r0
    LV_ASSERT_MEM(decoder);
  413b12:	4b0a      	ldr	r3, [pc, #40]	; (413b3c <lv_img_decoder_create+0x34>)
  413b14:	4798      	blx	r3
  413b16:	b130      	cbz	r0, 413b26 <lv_img_decoder_create+0x1e>
    if(decoder == NULL) return NULL;
  413b18:	b11c      	cbz	r4, 413b22 <lv_img_decoder_create+0x1a>
    _lv_memset_00(decoder, sizeof(lv_img_decoder_t));
  413b1a:	2110      	movs	r1, #16
  413b1c:	4620      	mov	r0, r4
  413b1e:	4b08      	ldr	r3, [pc, #32]	; (413b40 <lv_img_decoder_create+0x38>)
  413b20:	4798      	blx	r3
}
  413b22:	4620      	mov	r0, r4
  413b24:	bd10      	pop	{r4, pc}
    LV_ASSERT_MEM(decoder);
  413b26:	4622      	mov	r2, r4
  413b28:	2300      	movs	r3, #0
  413b2a:	4806      	ldr	r0, [pc, #24]	; (413b44 <lv_img_decoder_create+0x3c>)
  413b2c:	4906      	ldr	r1, [pc, #24]	; (413b48 <lv_img_decoder_create+0x40>)
  413b2e:	4788      	blx	r1
  413b30:	e7fe      	b.n	413b30 <lv_img_decoder_create+0x28>
  413b32:	bf00      	nop
  413b34:	2043a29c 	.word	0x2043a29c
  413b38:	0041620d 	.word	0x0041620d
  413b3c:	00415f95 	.word	0x00415f95
  413b40:	00416c0d 	.word	0x00416c0d
  413b44:	0042c714 	.word	0x0042c714
  413b48:	00415fa1 	.word	0x00415fa1

00413b4c <lv_img_decoder_set_info_cb>:
    decoder->info_cb = info_cb;
  413b4c:	6001      	str	r1, [r0, #0]
  413b4e:	4770      	bx	lr

00413b50 <lv_img_decoder_set_open_cb>:
    decoder->open_cb = open_cb;
  413b50:	6041      	str	r1, [r0, #4]
  413b52:	4770      	bx	lr

00413b54 <lv_img_decoder_set_read_line_cb>:
    decoder->read_line_cb = read_line_cb;
  413b54:	6081      	str	r1, [r0, #8]
  413b56:	4770      	bx	lr

00413b58 <lv_img_decoder_set_close_cb>:
    decoder->close_cb = close_cb;
  413b58:	60c1      	str	r1, [r0, #12]
  413b5a:	4770      	bx	lr

00413b5c <_lv_img_decoder_init>:
{
  413b5c:	b510      	push	{r4, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
  413b5e:	2110      	movs	r1, #16
  413b60:	4810      	ldr	r0, [pc, #64]	; (413ba4 <_lv_img_decoder_init+0x48>)
  413b62:	4b11      	ldr	r3, [pc, #68]	; (413ba8 <_lv_img_decoder_init+0x4c>)
  413b64:	4798      	blx	r3
    decoder = lv_img_decoder_create();
  413b66:	4b11      	ldr	r3, [pc, #68]	; (413bac <_lv_img_decoder_init+0x50>)
  413b68:	4798      	blx	r3
    if(decoder == NULL) {
  413b6a:	4604      	mov	r4, r0
  413b6c:	b178      	cbz	r0, 413b8e <_lv_img_decoder_init+0x32>
    lv_img_decoder_set_info_cb(decoder, lv_img_decoder_built_in_info);
  413b6e:	4910      	ldr	r1, [pc, #64]	; (413bb0 <_lv_img_decoder_init+0x54>)
  413b70:	4b10      	ldr	r3, [pc, #64]	; (413bb4 <_lv_img_decoder_init+0x58>)
  413b72:	4798      	blx	r3
    lv_img_decoder_set_open_cb(decoder, lv_img_decoder_built_in_open);
  413b74:	4910      	ldr	r1, [pc, #64]	; (413bb8 <_lv_img_decoder_init+0x5c>)
  413b76:	4620      	mov	r0, r4
  413b78:	4b10      	ldr	r3, [pc, #64]	; (413bbc <_lv_img_decoder_init+0x60>)
  413b7a:	4798      	blx	r3
    lv_img_decoder_set_read_line_cb(decoder, lv_img_decoder_built_in_read_line);
  413b7c:	4910      	ldr	r1, [pc, #64]	; (413bc0 <_lv_img_decoder_init+0x64>)
  413b7e:	4620      	mov	r0, r4
  413b80:	4b10      	ldr	r3, [pc, #64]	; (413bc4 <_lv_img_decoder_init+0x68>)
  413b82:	4798      	blx	r3
    lv_img_decoder_set_close_cb(decoder, lv_img_decoder_built_in_close);
  413b84:	4910      	ldr	r1, [pc, #64]	; (413bc8 <_lv_img_decoder_init+0x6c>)
  413b86:	4620      	mov	r0, r4
  413b88:	4b10      	ldr	r3, [pc, #64]	; (413bcc <_lv_img_decoder_init+0x70>)
  413b8a:	4798      	blx	r3
  413b8c:	bd10      	pop	{r4, pc}
        LV_ASSERT_MEM(decoder);
  413b8e:	4b10      	ldr	r3, [pc, #64]	; (413bd0 <_lv_img_decoder_init+0x74>)
  413b90:	4798      	blx	r3
  413b92:	2800      	cmp	r0, #0
  413b94:	d1fa      	bne.n	413b8c <_lv_img_decoder_init+0x30>
  413b96:	4622      	mov	r2, r4
  413b98:	2300      	movs	r3, #0
  413b9a:	480e      	ldr	r0, [pc, #56]	; (413bd4 <_lv_img_decoder_init+0x78>)
  413b9c:	490e      	ldr	r1, [pc, #56]	; (413bd8 <_lv_img_decoder_init+0x7c>)
  413b9e:	4788      	blx	r1
  413ba0:	e7fe      	b.n	413ba0 <_lv_img_decoder_init+0x44>
  413ba2:	bf00      	nop
  413ba4:	2043a29c 	.word	0x2043a29c
  413ba8:	004161fb 	.word	0x004161fb
  413bac:	00413b09 	.word	0x00413b09
  413bb0:	004131e9 	.word	0x004131e9
  413bb4:	00413b4d 	.word	0x00413b4d
  413bb8:	004132ed 	.word	0x004132ed
  413bbc:	00413b51 	.word	0x00413b51
  413bc0:	00413951 	.word	0x00413951
  413bc4:	00413b55 	.word	0x00413b55
  413bc8:	004132b1 	.word	0x004132b1
  413bcc:	00413b59 	.word	0x00413b59
  413bd0:	00415f95 	.word	0x00415f95
  413bd4:	0042c714 	.word	0x0042c714
  413bd8:	00415fa1 	.word	0x00415fa1

00413bdc <lv_font_get_glyph_bitmap>:
  413bdc:	b508      	push	{r3, lr}
  413bde:	6843      	ldr	r3, [r0, #4]
  413be0:	4798      	blx	r3
  413be2:	bd08      	pop	{r3, pc}

00413be4 <lv_font_get_glyph_dsc>:
  413be4:	b510      	push	{r4, lr}
  413be6:	6804      	ldr	r4, [r0, #0]
  413be8:	47a0      	blx	r4
  413bea:	bd10      	pop	{r4, pc}

00413bec <lv_font_get_glyph_width>:
  413bec:	b510      	push	{r4, lr}
  413bee:	b084      	sub	sp, #16
  413bf0:	4613      	mov	r3, r2
  413bf2:	460a      	mov	r2, r1
  413bf4:	a901      	add	r1, sp, #4
  413bf6:	4c04      	ldr	r4, [pc, #16]	; (413c08 <lv_font_get_glyph_width+0x1c>)
  413bf8:	47a0      	blx	r4
  413bfa:	b118      	cbz	r0, 413c04 <lv_font_get_glyph_width+0x18>
  413bfc:	f8bd 0004 	ldrh.w	r0, [sp, #4]
  413c00:	b004      	add	sp, #16
  413c02:	bd10      	pop	{r4, pc}
  413c04:	2000      	movs	r0, #0
  413c06:	e7fb      	b.n	413c00 <lv_font_get_glyph_width+0x14>
  413c08:	00413be5 	.word	0x00413be5

00413c0c <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
  413c0c:	7803      	ldrb	r3, [r0, #0]
  413c0e:	780a      	ldrb	r2, [r1, #0]
  413c10:	4293      	cmp	r3, r2
  413c12:	d001      	beq.n	413c18 <kern_pair_8_compare+0xc>
  413c14:	1a98      	subs	r0, r3, r2
  413c16:	4770      	bx	lr
    else return (int32_t) ref8_p[1] - element8_p[1];
  413c18:	7840      	ldrb	r0, [r0, #1]
  413c1a:	784b      	ldrb	r3, [r1, #1]
  413c1c:	1ac0      	subs	r0, r0, r3

}
  413c1e:	4770      	bx	lr

00413c20 <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
  413c20:	8803      	ldrh	r3, [r0, #0]
  413c22:	880a      	ldrh	r2, [r1, #0]
  413c24:	4293      	cmp	r3, r2
  413c26:	d001      	beq.n	413c2c <kern_pair_16_compare+0xc>
  413c28:	1a98      	subs	r0, r3, r2
  413c2a:	4770      	bx	lr
    else return (int32_t) ref16_p[1] - element16_p[1];
  413c2c:	8840      	ldrh	r0, [r0, #2]
  413c2e:	884b      	ldrh	r3, [r1, #2]
  413c30:	1ac0      	subs	r0, r0, r3
}
  413c32:	4770      	bx	lr

00413c34 <unicode_list_compare>:
 *  @retval > 0   Reference is greater than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
  413c34:	8800      	ldrh	r0, [r0, #0]
  413c36:	880b      	ldrh	r3, [r1, #0]
}
  413c38:	1ac0      	subs	r0, r0, r3
  413c3a:	4770      	bx	lr

00413c3c <get_glyph_dsc_id>:
    if(letter == '\0') return 0;
  413c3c:	460b      	mov	r3, r1
  413c3e:	2900      	cmp	r1, #0
  413c40:	d061      	beq.n	413d06 <get_glyph_dsc_id+0xca>
{
  413c42:	b5f0      	push	{r4, r5, r6, r7, lr}
  413c44:	b085      	sub	sp, #20
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
  413c46:	6904      	ldr	r4, [r0, #16]
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
  413c48:	6962      	ldr	r2, [r4, #20]
  413c4a:	4291      	cmp	r1, r2
  413c4c:	d013      	beq.n	413c76 <get_glyph_dsc_id+0x3a>
  413c4e:	2200      	movs	r2, #0
    for(i = 0; i < fdsc->cmap_num; i++) {
  413c50:	8a61      	ldrh	r1, [r4, #18]
  413c52:	f3c1 0108 	ubfx	r1, r1, #0, #9
  413c56:	428a      	cmp	r2, r1
  413c58:	da51      	bge.n	413cfe <get_glyph_dsc_id+0xc2>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
  413c5a:	68a0      	ldr	r0, [r4, #8]
  413c5c:	eb02 0582 	add.w	r5, r2, r2, lsl #2
  413c60:	00a9      	lsls	r1, r5, #2
  413c62:	460e      	mov	r6, r1
  413c64:	1847      	adds	r7, r0, r1
  413c66:	5841      	ldr	r1, [r0, r1]
  413c68:	1a59      	subs	r1, r3, r1
        if(rcp > fdsc->cmaps[i].range_length) continue;
  413c6a:	88b8      	ldrh	r0, [r7, #4]
  413c6c:	4281      	cmp	r1, r0
  413c6e:	d904      	bls.n	413c7a <get_glyph_dsc_id+0x3e>
    for(i = 0; i < fdsc->cmap_num; i++) {
  413c70:	3201      	adds	r2, #1
  413c72:	b292      	uxth	r2, r2
  413c74:	e7ec      	b.n	413c50 <get_glyph_dsc_id+0x14>
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
  413c76:	69a0      	ldr	r0, [r4, #24]
  413c78:	e00a      	b.n	413c90 <get_glyph_dsc_id+0x54>
  413c7a:	461d      	mov	r5, r3
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
  413c7c:	7cbb      	ldrb	r3, [r7, #18]
  413c7e:	2b02      	cmp	r3, #2
  413c80:	d008      	beq.n	413c94 <get_glyph_dsc_id+0x58>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
  413c82:	b953      	cbnz	r3, 413c9a <get_glyph_dsc_id+0x5e>
            const uint8_t * gid_ofs_8 = fdsc->cmaps[i].glyph_id_ofs_list;
  413c84:	68fb      	ldr	r3, [r7, #12]
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
  413c86:	88f8      	ldrh	r0, [r7, #6]
  413c88:	5c5b      	ldrb	r3, [r3, r1]
  413c8a:	4418      	add	r0, r3
        fdsc->last_letter = letter;
  413c8c:	6165      	str	r5, [r4, #20]
        fdsc->last_glyph_id = glyph_id;
  413c8e:	61a0      	str	r0, [r4, #24]
}
  413c90:	b005      	add	sp, #20
  413c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
  413c94:	88f8      	ldrh	r0, [r7, #6]
  413c96:	4408      	add	r0, r1
  413c98:	e7f8      	b.n	413c8c <get_glyph_dsc_id+0x50>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
  413c9a:	2b03      	cmp	r3, #3
  413c9c:	d003      	beq.n	413ca6 <get_glyph_dsc_id+0x6a>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
  413c9e:	2b01      	cmp	r3, #1
  413ca0:	d017      	beq.n	413cd2 <get_glyph_dsc_id+0x96>
        uint32_t glyph_id = 0;
  413ca2:	2000      	movs	r0, #0
  413ca4:	e7f2      	b.n	413c8c <get_glyph_dsc_id+0x50>
            uint16_t key = rcp;
  413ca6:	a804      	add	r0, sp, #16
  413ca8:	f820 1d02 	strh.w	r1, [r0, #-2]!
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
  413cac:	68b9      	ldr	r1, [r7, #8]
  413cae:	8a3a      	ldrh	r2, [r7, #16]
  413cb0:	4b16      	ldr	r3, [pc, #88]	; (413d0c <get_glyph_dsc_id+0xd0>)
  413cb2:	9300      	str	r3, [sp, #0]
  413cb4:	2302      	movs	r3, #2
  413cb6:	4f16      	ldr	r7, [pc, #88]	; (413d10 <get_glyph_dsc_id+0xd4>)
  413cb8:	47b8      	blx	r7
            if(p) {
  413cba:	4603      	mov	r3, r0
  413cbc:	b138      	cbz	r0, 413cce <get_glyph_dsc_id+0x92>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
  413cbe:	68a2      	ldr	r2, [r4, #8]
  413cc0:	4416      	add	r6, r2
  413cc2:	68b0      	ldr	r0, [r6, #8]
  413cc4:	1a18      	subs	r0, r3, r0
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
  413cc6:	88f3      	ldrh	r3, [r6, #6]
  413cc8:	eb03 0060 	add.w	r0, r3, r0, asr #1
  413ccc:	e7de      	b.n	413c8c <get_glyph_dsc_id+0x50>
        uint32_t glyph_id = 0;
  413cce:	2000      	movs	r0, #0
  413cd0:	e7dc      	b.n	413c8c <get_glyph_dsc_id+0x50>
            uint16_t key = rcp;
  413cd2:	a804      	add	r0, sp, #16
  413cd4:	f820 1d02 	strh.w	r1, [r0, #-2]!
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
  413cd8:	68b9      	ldr	r1, [r7, #8]
  413cda:	8a3a      	ldrh	r2, [r7, #16]
  413cdc:	4b0b      	ldr	r3, [pc, #44]	; (413d0c <get_glyph_dsc_id+0xd0>)
  413cde:	9300      	str	r3, [sp, #0]
  413ce0:	2302      	movs	r3, #2
  413ce2:	4f0b      	ldr	r7, [pc, #44]	; (413d10 <get_glyph_dsc_id+0xd4>)
  413ce4:	47b8      	blx	r7
            if(p) {
  413ce6:	b140      	cbz	r0, 413cfa <get_glyph_dsc_id+0xbe>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
  413ce8:	68a3      	ldr	r3, [r4, #8]
  413cea:	441e      	add	r6, r3
  413cec:	68b3      	ldr	r3, [r6, #8]
  413cee:	1ac2      	subs	r2, r0, r3
                const uint16_t * gid_ofs_16 = fdsc->cmaps[i].glyph_id_ofs_list;
  413cf0:	68f1      	ldr	r1, [r6, #12]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
  413cf2:	88f3      	ldrh	r3, [r6, #6]
  413cf4:	5a88      	ldrh	r0, [r1, r2]
  413cf6:	4418      	add	r0, r3
  413cf8:	e7c8      	b.n	413c8c <get_glyph_dsc_id+0x50>
        uint32_t glyph_id = 0;
  413cfa:	2000      	movs	r0, #0
  413cfc:	e7c6      	b.n	413c8c <get_glyph_dsc_id+0x50>
    fdsc->last_letter = letter;
  413cfe:	6163      	str	r3, [r4, #20]
    fdsc->last_glyph_id = 0;
  413d00:	2000      	movs	r0, #0
  413d02:	61a0      	str	r0, [r4, #24]
    return 0;
  413d04:	e7c4      	b.n	413c90 <get_glyph_dsc_id+0x54>
    if(letter == '\0') return 0;
  413d06:	4608      	mov	r0, r1
  413d08:	4770      	bx	lr
  413d0a:	bf00      	nop
  413d0c:	00413c35 	.word	0x00413c35
  413d10:	004180dd 	.word	0x004180dd

00413d14 <get_kern_value>:
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
  413d14:	6903      	ldr	r3, [r0, #16]
    if(fdsc->kern_classes == 0) {
  413d16:	7cd8      	ldrb	r0, [r3, #19]
  413d18:	f010 0f20 	tst.w	r0, #32
  413d1c:	d13a      	bne.n	413d94 <get_kern_value+0x80>
{
  413d1e:	b570      	push	{r4, r5, r6, lr}
  413d20:	b084      	sub	sp, #16
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
  413d22:	68dc      	ldr	r4, [r3, #12]
        if(kdsc->glyph_ids_size == 0) {
  413d24:	7ae3      	ldrb	r3, [r4, #11]
  413d26:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
  413d2a:	d004      	beq.n	413d36 <get_kern_value+0x22>
        else if(kdsc->glyph_ids_size == 1) {
  413d2c:	2b40      	cmp	r3, #64	; 0x40
  413d2e:	d01a      	beq.n	413d66 <get_kern_value+0x52>
    int8_t value = 0;
  413d30:	2000      	movs	r0, #0
}
  413d32:	b004      	add	sp, #16
  413d34:	bd70      	pop	{r4, r5, r6, pc}
            const uint16_t * g_ids = kdsc->glyph_ids;
  413d36:	6825      	ldr	r5, [r4, #0]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
  413d38:	0212      	lsls	r2, r2, #8
  413d3a:	b292      	uxth	r2, r2
  413d3c:	440a      	add	r2, r1
  413d3e:	a804      	add	r0, sp, #16
  413d40:	f820 2d04 	strh.w	r2, [r0, #-4]!
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
  413d44:	68a2      	ldr	r2, [r4, #8]
  413d46:	4b1d      	ldr	r3, [pc, #116]	; (413dbc <get_kern_value+0xa8>)
  413d48:	9300      	str	r3, [sp, #0]
  413d4a:	2302      	movs	r3, #2
  413d4c:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
  413d50:	4629      	mov	r1, r5
  413d52:	4e1b      	ldr	r6, [pc, #108]	; (413dc0 <get_kern_value+0xac>)
  413d54:	47b0      	blx	r6
            if(kid_p) {
  413d56:	b120      	cbz	r0, 413d62 <get_kern_value+0x4e>
                lv_uintptr_t ofs = kid_p - g_ids;
  413d58:	1b43      	subs	r3, r0, r5
  413d5a:	105b      	asrs	r3, r3, #1
                value = kdsc->values[ofs];
  413d5c:	6862      	ldr	r2, [r4, #4]
  413d5e:	56d0      	ldrsb	r0, [r2, r3]
  413d60:	e7e7      	b.n	413d32 <get_kern_value+0x1e>
    int8_t value = 0;
  413d62:	2000      	movs	r0, #0
  413d64:	e7e5      	b.n	413d32 <get_kern_value+0x1e>
            const uint32_t * g_ids = kdsc->glyph_ids;
  413d66:	6825      	ldr	r5, [r4, #0]
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
  413d68:	eb01 4202 	add.w	r2, r1, r2, lsl #16
  413d6c:	a804      	add	r0, sp, #16
  413d6e:	f840 2d04 	str.w	r2, [r0, #-4]!
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
  413d72:	68a2      	ldr	r2, [r4, #8]
  413d74:	4b13      	ldr	r3, [pc, #76]	; (413dc4 <get_kern_value+0xb0>)
  413d76:	9300      	str	r3, [sp, #0]
  413d78:	2304      	movs	r3, #4
  413d7a:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
  413d7e:	4629      	mov	r1, r5
  413d80:	4e0f      	ldr	r6, [pc, #60]	; (413dc0 <get_kern_value+0xac>)
  413d82:	47b0      	blx	r6
            if(kid_p) {
  413d84:	b120      	cbz	r0, 413d90 <get_kern_value+0x7c>
                lv_uintptr_t ofs = kid_p - g_ids;
  413d86:	1b43      	subs	r3, r0, r5
  413d88:	109b      	asrs	r3, r3, #2
                value = kdsc->values[ofs];
  413d8a:	6862      	ldr	r2, [r4, #4]
  413d8c:	56d0      	ldrsb	r0, [r2, r3]
  413d8e:	e7d0      	b.n	413d32 <get_kern_value+0x1e>
    int8_t value = 0;
  413d90:	2000      	movs	r0, #0
  413d92:	e7ce      	b.n	413d32 <get_kern_value+0x1e>
        const lv_font_fmt_txt_kern_classes_t * kdsc = fdsc->kern_dsc;
  413d94:	68d8      	ldr	r0, [r3, #12]
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
  413d96:	6843      	ldr	r3, [r0, #4]
  413d98:	5c5b      	ldrb	r3, [r3, r1]
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
  413d9a:	6881      	ldr	r1, [r0, #8]
  413d9c:	5c8a      	ldrb	r2, [r1, r2]
        if(left_class > 0 && right_class > 0) {
  413d9e:	2b00      	cmp	r3, #0
  413da0:	bf18      	it	ne
  413da2:	2a00      	cmpne	r2, #0
  413da4:	d007      	beq.n	413db6 <get_kern_value+0xa2>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
  413da6:	6801      	ldr	r1, [r0, #0]
  413da8:	3b01      	subs	r3, #1
  413daa:	7b40      	ldrb	r0, [r0, #13]
  413dac:	3a01      	subs	r2, #1
  413dae:	fb00 2303 	mla	r3, r0, r3, r2
  413db2:	56c8      	ldrsb	r0, [r1, r3]
  413db4:	4770      	bx	lr
    int8_t value = 0;
  413db6:	2000      	movs	r0, #0
  413db8:	4770      	bx	lr
  413dba:	bf00      	nop
  413dbc:	00413c0d 	.word	0x00413c0d
  413dc0:	004180dd 	.word	0x004180dd
  413dc4:	00413c21 	.word	0x00413c21

00413dc8 <decompress>:
{
  413dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  413dcc:	b087      	sub	sp, #28
  413dce:	460e      	mov	r6, r1
  413dd0:	4614      	mov	r4, r2
  413dd2:	9301      	str	r3, [sp, #4]
  413dd4:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
  413dd8:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  413ddc:	9304      	str	r3, [sp, #16]
    if(bpp == 3) wr_size = 4;
  413dde:	2f03      	cmp	r7, #3
  413de0:	d018      	beq.n	413e14 <decompress+0x4c>
    uint8_t wr_size = bpp;
  413de2:	9702      	str	r7, [sp, #8]
    rle_in = in;
  413de4:	4ba8      	ldr	r3, [pc, #672]	; (414088 <decompress+0x2c0>)
  413de6:	6018      	str	r0, [r3, #0]
    rle_bpp = bpp;
  413de8:	4ba8      	ldr	r3, [pc, #672]	; (41408c <decompress+0x2c4>)
  413dea:	701f      	strb	r7, [r3, #0]
    rle_state = RLE_STATE_SINGLE;
  413dec:	2300      	movs	r3, #0
  413dee:	4aa8      	ldr	r2, [pc, #672]	; (414090 <decompress+0x2c8>)
  413df0:	7013      	strb	r3, [r2, #0]
    rle_rdp = 0;
  413df2:	4aa8      	ldr	r2, [pc, #672]	; (414094 <decompress+0x2cc>)
  413df4:	6013      	str	r3, [r2, #0]
    rle_prev_v = 0;
  413df6:	4aa8      	ldr	r2, [pc, #672]	; (414098 <decompress+0x2d0>)
  413df8:	7013      	strb	r3, [r2, #0]
    rle_cnt = 0;
  413dfa:	4aa8      	ldr	r2, [pc, #672]	; (41409c <decompress+0x2d4>)
  413dfc:	7013      	strb	r3, [r2, #0]
    uint8_t * line_buf1 = _lv_mem_buf_get(w);
  413dfe:	4620      	mov	r0, r4
  413e00:	4ba7      	ldr	r3, [pc, #668]	; (4140a0 <decompress+0x2d8>)
  413e02:	4798      	blx	r3
  413e04:	4605      	mov	r5, r0
    if(prefilter) {
  413e06:	9b04      	ldr	r3, [sp, #16]
  413e08:	b93b      	cbnz	r3, 413e1a <decompress+0x52>
    uint8_t * line_buf2 = NULL;
  413e0a:	2300      	movs	r3, #0
  413e0c:	9303      	str	r3, [sp, #12]
    for(i = 0; i < w; i++) {
  413e0e:	2000      	movs	r0, #0
  413e10:	46a6      	mov	lr, r4
  413e12:	e03a      	b.n	413e8a <decompress+0xc2>
    if(bpp == 3) wr_size = 4;
  413e14:	2304      	movs	r3, #4
  413e16:	9302      	str	r3, [sp, #8]
  413e18:	e7e4      	b.n	413de4 <decompress+0x1c>
        line_buf2 = _lv_mem_buf_get(w);
  413e1a:	4620      	mov	r0, r4
  413e1c:	4ba0      	ldr	r3, [pc, #640]	; (4140a0 <decompress+0x2d8>)
  413e1e:	4798      	blx	r3
  413e20:	9003      	str	r0, [sp, #12]
  413e22:	e7f4      	b.n	413e0e <decompress+0x46>
            bit_mask = 0x1;
  413e24:	f04f 0801 	mov.w	r8, #1
  413e28:	e011      	b.n	413e4e <decompress+0x86>
            bit_mask = 0x7;
  413e2a:	f04f 0807 	mov.w	r8, #7
  413e2e:	e00e      	b.n	413e4e <decompress+0x86>
            bit_mask = 0xF;
  413e30:	f04f 080f 	mov.w	r8, #15
  413e34:	e00b      	b.n	413e4e <decompress+0x86>
            bit_mask = 0xFF;
  413e36:	f04f 08ff 	mov.w	r8, #255	; 0xff
  413e3a:	e008      	b.n	413e4e <decompress+0x86>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  413e3c:	2301      	movs	r3, #1
  413e3e:	4093      	lsls	r3, r2
  413e40:	b2db      	uxtb	r3, r3
  413e42:	3b01      	subs	r3, #1
  413e44:	fa5f f883 	uxtb.w	r8, r3
  413e48:	e001      	b.n	413e4e <decompress+0x86>
            bit_mask = 0x3;
  413e4a:	f04f 0803 	mov.w	r8, #3
    uint32_t byte_pos = bit_pos >> 3;
  413e4e:	08e3      	lsrs	r3, r4, #3
    bit_pos = bit_pos & 0x7;
  413e50:	f004 0107 	and.w	r1, r4, #7
    if(bit_pos + len >= 8) {
  413e54:	eb01 0902 	add.w	r9, r1, r2
  413e58:	f1b9 0f07 	cmp.w	r9, #7
  413e5c:	d83c      	bhi.n	413ed8 <decompress+0x110>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413e5e:	f81a 3003 	ldrb.w	r3, [sl, r3]
  413e62:	4249      	negs	r1, r1
  413e64:	1a89      	subs	r1, r1, r2
  413e66:	3108      	adds	r1, #8
  413e68:	410b      	asrs	r3, r1
  413e6a:	ea03 0308 	and.w	r3, r3, r8
        if(rle_rdp != 0 && rle_prev_v == ret) {
  413e6e:	b11c      	cbz	r4, 413e78 <decompress+0xb0>
  413e70:	4989      	ldr	r1, [pc, #548]	; (414098 <decompress+0x2d0>)
  413e72:	7809      	ldrb	r1, [r1, #0]
  413e74:	4299      	cmp	r1, r3
  413e76:	d03d      	beq.n	413ef4 <decompress+0x12c>
        rle_prev_v = ret;
  413e78:	4987      	ldr	r1, [pc, #540]	; (414098 <decompress+0x2d0>)
  413e7a:	700b      	strb	r3, [r1, #0]
        rle_rdp += rle_bpp;
  413e7c:	4422      	add	r2, r4
  413e7e:	4985      	ldr	r1, [pc, #532]	; (414094 <decompress+0x2cc>)
  413e80:	600a      	str	r2, [r1, #0]
        out[i] = rle_next();
  413e82:	f88c 3000 	strb.w	r3, [ip]
    for(i = 0; i < w; i++) {
  413e86:	3001      	adds	r0, #1
  413e88:	b200      	sxth	r0, r0
  413e8a:	4586      	cmp	lr, r0
  413e8c:	f340 8188 	ble.w	4141a0 <decompress+0x3d8>
        out[i] = rle_next();
  413e90:	eb05 0c00 	add.w	ip, r5, r0
    if(rle_state == RLE_STATE_SINGLE) {
  413e94:	4b7e      	ldr	r3, [pc, #504]	; (414090 <decompress+0x2c8>)
  413e96:	781b      	ldrb	r3, [r3, #0]
  413e98:	2b00      	cmp	r3, #0
  413e9a:	d136      	bne.n	413f0a <decompress+0x142>
        ret = get_bits(rle_in, rle_rdp, rle_bpp);
  413e9c:	4b7a      	ldr	r3, [pc, #488]	; (414088 <decompress+0x2c0>)
  413e9e:	f8d3 a000 	ldr.w	sl, [r3]
  413ea2:	4b7c      	ldr	r3, [pc, #496]	; (414094 <decompress+0x2cc>)
  413ea4:	681c      	ldr	r4, [r3, #0]
  413ea6:	4b79      	ldr	r3, [pc, #484]	; (41408c <decompress+0x2c4>)
  413ea8:	781a      	ldrb	r2, [r3, #0]
    switch(len) {
  413eaa:	1e51      	subs	r1, r2, #1
  413eac:	2907      	cmp	r1, #7
  413eae:	d8c5      	bhi.n	413e3c <decompress+0x74>
  413eb0:	a301      	add	r3, pc, #4	; (adr r3, 413eb8 <decompress+0xf0>)
  413eb2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
  413eb6:	bf00      	nop
  413eb8:	00413e25 	.word	0x00413e25
  413ebc:	00413e4b 	.word	0x00413e4b
  413ec0:	00413e2b 	.word	0x00413e2b
  413ec4:	00413e31 	.word	0x00413e31
  413ec8:	00413e3d 	.word	0x00413e3d
  413ecc:	00413e3d 	.word	0x00413e3d
  413ed0:	00413e3d 	.word	0x00413e3d
  413ed4:	00413e37 	.word	0x00413e37
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413ed8:	f81a 9003 	ldrb.w	r9, [sl, r3]
  413edc:	4453      	add	r3, sl
  413ede:	785b      	ldrb	r3, [r3, #1]
  413ee0:	eb03 2309 	add.w	r3, r3, r9, lsl #8
  413ee4:	b29b      	uxth	r3, r3
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413ee6:	4249      	negs	r1, r1
  413ee8:	1a89      	subs	r1, r1, r2
  413eea:	3110      	adds	r1, #16
  413eec:	410b      	asrs	r3, r1
  413eee:	ea03 0308 	and.w	r3, r3, r8
  413ef2:	e7bc      	b.n	413e6e <decompress+0xa6>
            rle_cnt = 0;
  413ef4:	f04f 0800 	mov.w	r8, #0
  413ef8:	4968      	ldr	r1, [pc, #416]	; (41409c <decompress+0x2d4>)
  413efa:	f881 8000 	strb.w	r8, [r1]
            rle_state = RLE_STATE_REPEATE;
  413efe:	f04f 0801 	mov.w	r8, #1
  413f02:	4963      	ldr	r1, [pc, #396]	; (414090 <decompress+0x2c8>)
  413f04:	f881 8000 	strb.w	r8, [r1]
  413f08:	e7b6      	b.n	413e78 <decompress+0xb0>
    else if(rle_state == RLE_STATE_REPEATE) {
  413f0a:	2b01      	cmp	r3, #1
  413f0c:	d004      	beq.n	413f18 <decompress+0x150>
    else if(rle_state == RLE_STATE_COUNTER) {
  413f0e:	2b02      	cmp	r3, #2
  413f10:	f000 80f3 	beq.w	4140fa <decompress+0x332>
    uint8_t ret = 0;
  413f14:	2300      	movs	r3, #0
  413f16:	e7b4      	b.n	413e82 <decompress+0xba>
        v = get_bits(rle_in, rle_rdp, 1);
  413f18:	4b5b      	ldr	r3, [pc, #364]	; (414088 <decompress+0x2c0>)
  413f1a:	f8d3 8000 	ldr.w	r8, [r3]
  413f1e:	4b5d      	ldr	r3, [pc, #372]	; (414094 <decompress+0x2cc>)
  413f20:	681a      	ldr	r2, [r3, #0]
    uint32_t byte_pos = bit_pos >> 3;
  413f22:	08d1      	lsrs	r1, r2, #3
    bit_pos = bit_pos & 0x7;
  413f24:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
  413f28:	1c5c      	adds	r4, r3, #1
  413f2a:	2c07      	cmp	r4, #7
  413f2c:	d81d      	bhi.n	413f6a <decompress+0x1a2>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413f2e:	f818 1001 	ldrb.w	r1, [r8, r1]
  413f32:	f1c3 0307 	rsb	r3, r3, #7
  413f36:	fa41 f303 	asr.w	r3, r1, r3
  413f3a:	f003 0101 	and.w	r1, r3, #1
        rle_cnt++;
  413f3e:	4b57      	ldr	r3, [pc, #348]	; (41409c <decompress+0x2d4>)
  413f40:	781c      	ldrb	r4, [r3, #0]
  413f42:	3401      	adds	r4, #1
  413f44:	b2e4      	uxtb	r4, r4
  413f46:	701c      	strb	r4, [r3, #0]
        rle_rdp += 1;
  413f48:	3201      	adds	r2, #1
  413f4a:	4b52      	ldr	r3, [pc, #328]	; (414094 <decompress+0x2cc>)
  413f4c:	601a      	str	r2, [r3, #0]
        if(v == 1) {
  413f4e:	2901      	cmp	r1, #1
  413f50:	d018      	beq.n	413f84 <decompress+0x1bc>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
  413f52:	4b4e      	ldr	r3, [pc, #312]	; (41408c <decompress+0x2c4>)
  413f54:	781c      	ldrb	r4, [r3, #0]
    switch(len) {
  413f56:	1e63      	subs	r3, r4, #1
  413f58:	2b07      	cmp	r3, #7
  413f5a:	f200 808e 	bhi.w	41407a <decompress+0x2b2>
  413f5e:	e8df f003 	tbb	[pc, r3]
  413f62:	a184      	.short	0xa184
  413f64:	8c8c8886 	.word	0x8c8c8886
  413f68:	8a8c      	.short	0x8a8c
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413f6a:	f818 4001 	ldrb.w	r4, [r8, r1]
  413f6e:	4441      	add	r1, r8
  413f70:	7849      	ldrb	r1, [r1, #1]
  413f72:	eb01 2104 	add.w	r1, r1, r4, lsl #8
  413f76:	b289      	uxth	r1, r1
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413f78:	f1c3 030f 	rsb	r3, r3, #15
  413f7c:	4119      	asrs	r1, r3
  413f7e:	f001 0101 	and.w	r1, r1, #1
  413f82:	e7dc      	b.n	413f3e <decompress+0x176>
            ret = rle_prev_v;
  413f84:	4b44      	ldr	r3, [pc, #272]	; (414098 <decompress+0x2d0>)
  413f86:	781b      	ldrb	r3, [r3, #0]
            if(rle_cnt == 11) {
  413f88:	2c0b      	cmp	r4, #11
  413f8a:	f47f af7a 	bne.w	413e82 <decompress+0xba>
    uint32_t byte_pos = bit_pos >> 3;
  413f8e:	08d4      	lsrs	r4, r2, #3
    bit_pos = bit_pos & 0x7;
  413f90:	f002 0907 	and.w	r9, r2, #7
    if(bit_pos + len >= 8) {
  413f94:	f109 0a06 	add.w	sl, r9, #6
  413f98:	f1ba 0f07 	cmp.w	sl, #7
  413f9c:	d815      	bhi.n	413fca <decompress+0x202>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413f9e:	f818 4004 	ldrb.w	r4, [r8, r4]
  413fa2:	f1c9 0902 	rsb	r9, r9, #2
  413fa6:	fa44 f409 	asr.w	r4, r4, r9
  413faa:	f004 043f 	and.w	r4, r4, #63	; 0x3f
                rle_cnt = get_bits(rle_in, rle_rdp, 6);
  413fae:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 41409c <decompress+0x2d4>
  413fb2:	f889 4000 	strb.w	r4, [r9]
                rle_rdp += 6;
  413fb6:	3206      	adds	r2, #6
  413fb8:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 414094 <decompress+0x2cc>
  413fbc:	f8c9 2000 	str.w	r2, [r9]
                if(rle_cnt != 0) {
  413fc0:	b18c      	cbz	r4, 413fe6 <decompress+0x21e>
                    rle_state = RLE_STATE_COUNTER;
  413fc2:	2102      	movs	r1, #2
  413fc4:	4a32      	ldr	r2, [pc, #200]	; (414090 <decompress+0x2c8>)
  413fc6:	7011      	strb	r1, [r2, #0]
  413fc8:	e75b      	b.n	413e82 <decompress+0xba>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413fca:	f818 a004 	ldrb.w	sl, [r8, r4]
  413fce:	4444      	add	r4, r8
  413fd0:	7864      	ldrb	r4, [r4, #1]
  413fd2:	eb04 240a 	add.w	r4, r4, sl, lsl #8
  413fd6:	b2a4      	uxth	r4, r4
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413fd8:	f1c9 090a 	rsb	r9, r9, #10
  413fdc:	fa44 f409 	asr.w	r4, r4, r9
  413fe0:	f004 043f 	and.w	r4, r4, #63	; 0x3f
  413fe4:	e7e3      	b.n	413fae <decompress+0x1e6>
                    ret = get_bits(rle_in, rle_rdp, rle_bpp);
  413fe6:	4b29      	ldr	r3, [pc, #164]	; (41408c <decompress+0x2c4>)
  413fe8:	781c      	ldrb	r4, [r3, #0]
    switch(len) {
  413fea:	1e63      	subs	r3, r4, #1
  413fec:	2b07      	cmp	r3, #7
  413fee:	d824      	bhi.n	41403a <decompress+0x272>
  413ff0:	e8df f003 	tbb	[pc, r3]
  413ff4:	1f042905 	.word	0x1f042905
  413ff8:	21232323 	.word	0x21232323
            bit_mask = 0x7;
  413ffc:	2107      	movs	r1, #7
    uint32_t byte_pos = bit_pos >> 3;
  413ffe:	ea4f 09d2 	mov.w	r9, r2, lsr #3
    bit_pos = bit_pos & 0x7;
  414002:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
  414006:	eb03 0a04 	add.w	sl, r3, r4
  41400a:	f1ba 0f07 	cmp.w	sl, #7
  41400e:	d81c      	bhi.n	41404a <decompress+0x282>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  414010:	f818 8009 	ldrb.w	r8, [r8, r9]
  414014:	425b      	negs	r3, r3
  414016:	1b1b      	subs	r3, r3, r4
  414018:	3308      	adds	r3, #8
  41401a:	fa48 f303 	asr.w	r3, r8, r3
  41401e:	400b      	ands	r3, r1
                    rle_prev_v = ret;
  414020:	491d      	ldr	r1, [pc, #116]	; (414098 <decompress+0x2d0>)
  414022:	700b      	strb	r3, [r1, #0]
                    rle_rdp += rle_bpp;
  414024:	4422      	add	r2, r4
  414026:	491b      	ldr	r1, [pc, #108]	; (414094 <decompress+0x2cc>)
  414028:	600a      	str	r2, [r1, #0]
                    rle_state = RLE_STATE_SINGLE;
  41402a:	2100      	movs	r1, #0
  41402c:	4a18      	ldr	r2, [pc, #96]	; (414090 <decompress+0x2c8>)
  41402e:	7011      	strb	r1, [r2, #0]
  414030:	e727      	b.n	413e82 <decompress+0xba>
            bit_mask = 0xF;
  414032:	210f      	movs	r1, #15
  414034:	e7e3      	b.n	413ffe <decompress+0x236>
            bit_mask = 0xFF;
  414036:	21ff      	movs	r1, #255	; 0xff
  414038:	e7e1      	b.n	413ffe <decompress+0x236>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  41403a:	2101      	movs	r1, #1
  41403c:	40a1      	lsls	r1, r4
  41403e:	b2c9      	uxtb	r1, r1
  414040:	3901      	subs	r1, #1
  414042:	b2c9      	uxtb	r1, r1
  414044:	e7db      	b.n	413ffe <decompress+0x236>
            bit_mask = 0x3;
  414046:	2103      	movs	r1, #3
  414048:	e7d9      	b.n	413ffe <decompress+0x236>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  41404a:	f818 a009 	ldrb.w	sl, [r8, r9]
  41404e:	44c8      	add	r8, r9
  414050:	f898 8001 	ldrb.w	r8, [r8, #1]
  414054:	eb08 280a 	add.w	r8, r8, sl, lsl #8
  414058:	fa1f f888 	uxth.w	r8, r8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  41405c:	425b      	negs	r3, r3
  41405e:	1b1b      	subs	r3, r3, r4
  414060:	3310      	adds	r3, #16
  414062:	fa48 f303 	asr.w	r3, r8, r3
  414066:	400b      	ands	r3, r1
  414068:	e7da      	b.n	414020 <decompress+0x258>
            bit_mask = 0x1;
  41406a:	2301      	movs	r3, #1
  41406c:	e01b      	b.n	4140a6 <decompress+0x2de>
            bit_mask = 0x7;
  41406e:	2307      	movs	r3, #7
  414070:	e019      	b.n	4140a6 <decompress+0x2de>
            bit_mask = 0xF;
  414072:	230f      	movs	r3, #15
  414074:	e017      	b.n	4140a6 <decompress+0x2de>
            bit_mask = 0xFF;
  414076:	23ff      	movs	r3, #255	; 0xff
  414078:	e015      	b.n	4140a6 <decompress+0x2de>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  41407a:	2301      	movs	r3, #1
  41407c:	40a3      	lsls	r3, r4
  41407e:	b2db      	uxtb	r3, r3
  414080:	3b01      	subs	r3, #1
  414082:	b2db      	uxtb	r3, r3
  414084:	e00f      	b.n	4140a6 <decompress+0x2de>
  414086:	bf00      	nop
  414088:	2040c7c0 	.word	0x2040c7c0
  41408c:	2040c7bc 	.word	0x2040c7bc
  414090:	2040c7cc 	.word	0x2040c7cc
  414094:	2040c7c8 	.word	0x2040c7c8
  414098:	2040c7c4 	.word	0x2040c7c4
  41409c:	2040c7bd 	.word	0x2040c7bd
  4140a0:	00416a81 	.word	0x00416a81
            bit_mask = 0x3;
  4140a4:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  4140a6:	ea4f 09d2 	mov.w	r9, r2, lsr #3
    bit_pos = bit_pos & 0x7;
  4140aa:	f002 0107 	and.w	r1, r2, #7
    if(bit_pos + len >= 8) {
  4140ae:	eb01 0a04 	add.w	sl, r1, r4
  4140b2:	f1ba 0f07 	cmp.w	sl, #7
  4140b6:	d810      	bhi.n	4140da <decompress+0x312>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  4140b8:	f818 8009 	ldrb.w	r8, [r8, r9]
  4140bc:	4249      	negs	r1, r1
  4140be:	1b09      	subs	r1, r1, r4
  4140c0:	3108      	adds	r1, #8
  4140c2:	fa48 f101 	asr.w	r1, r8, r1
  4140c6:	400b      	ands	r3, r1
            rle_prev_v = ret;
  4140c8:	49b4      	ldr	r1, [pc, #720]	; (41439c <decompress+0x5d4>)
  4140ca:	700b      	strb	r3, [r1, #0]
            rle_rdp += rle_bpp;
  4140cc:	4422      	add	r2, r4
  4140ce:	49b4      	ldr	r1, [pc, #720]	; (4143a0 <decompress+0x5d8>)
  4140d0:	600a      	str	r2, [r1, #0]
            rle_state = RLE_STATE_SINGLE;
  4140d2:	2100      	movs	r1, #0
  4140d4:	4ab3      	ldr	r2, [pc, #716]	; (4143a4 <decompress+0x5dc>)
  4140d6:	7011      	strb	r1, [r2, #0]
  4140d8:	e6d3      	b.n	413e82 <decompress+0xba>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  4140da:	f818 a009 	ldrb.w	sl, [r8, r9]
  4140de:	44c8      	add	r8, r9
  4140e0:	f898 8001 	ldrb.w	r8, [r8, #1]
  4140e4:	eb08 280a 	add.w	r8, r8, sl, lsl #8
  4140e8:	fa1f f888 	uxth.w	r8, r8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  4140ec:	4249      	negs	r1, r1
  4140ee:	1b09      	subs	r1, r1, r4
  4140f0:	3110      	adds	r1, #16
  4140f2:	fa48 f101 	asr.w	r1, r8, r1
  4140f6:	400b      	ands	r3, r1
  4140f8:	e7e6      	b.n	4140c8 <decompress+0x300>
        ret = rle_prev_v;
  4140fa:	4ba8      	ldr	r3, [pc, #672]	; (41439c <decompress+0x5d4>)
  4140fc:	781b      	ldrb	r3, [r3, #0]
        rle_cnt--;
  4140fe:	49aa      	ldr	r1, [pc, #680]	; (4143a8 <decompress+0x5e0>)
  414100:	780a      	ldrb	r2, [r1, #0]
  414102:	3a01      	subs	r2, #1
  414104:	b2d2      	uxtb	r2, r2
  414106:	700a      	strb	r2, [r1, #0]
        if(rle_cnt == 0) {
  414108:	2a00      	cmp	r2, #0
  41410a:	f47f aeba 	bne.w	413e82 <decompress+0xba>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
  41410e:	4ba7      	ldr	r3, [pc, #668]	; (4143ac <decompress+0x5e4>)
  414110:	f8d3 a000 	ldr.w	sl, [r3]
  414114:	4ba2      	ldr	r3, [pc, #648]	; (4143a0 <decompress+0x5d8>)
  414116:	681c      	ldr	r4, [r3, #0]
  414118:	4ba5      	ldr	r3, [pc, #660]	; (4143b0 <decompress+0x5e8>)
  41411a:	781a      	ldrb	r2, [r3, #0]
    switch(len) {
  41411c:	1e53      	subs	r3, r2, #1
  41411e:	2b07      	cmp	r3, #7
  414120:	d80d      	bhi.n	41413e <decompress+0x376>
  414122:	e8df f003 	tbb	[pc, r3]
  414126:	1204      	.short	0x1204
  414128:	0c0c0806 	.word	0x0c0c0806
  41412c:	0a0c      	.short	0x0a0c
            bit_mask = 0x1;
  41412e:	2301      	movs	r3, #1
  414130:	e00c      	b.n	41414c <decompress+0x384>
            bit_mask = 0x7;
  414132:	2307      	movs	r3, #7
  414134:	e00a      	b.n	41414c <decompress+0x384>
            bit_mask = 0xF;
  414136:	230f      	movs	r3, #15
  414138:	e008      	b.n	41414c <decompress+0x384>
            bit_mask = 0xFF;
  41413a:	23ff      	movs	r3, #255	; 0xff
  41413c:	e006      	b.n	41414c <decompress+0x384>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  41413e:	2301      	movs	r3, #1
  414140:	4093      	lsls	r3, r2
  414142:	b2db      	uxtb	r3, r3
  414144:	3b01      	subs	r3, #1
  414146:	b2db      	uxtb	r3, r3
  414148:	e000      	b.n	41414c <decompress+0x384>
            bit_mask = 0x3;
  41414a:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  41414c:	ea4f 08d4 	mov.w	r8, r4, lsr #3
    bit_pos = bit_pos & 0x7;
  414150:	f004 0107 	and.w	r1, r4, #7
    if(bit_pos + len >= 8) {
  414154:	eb01 0902 	add.w	r9, r1, r2
  414158:	f1b9 0f07 	cmp.w	r9, #7
  41415c:	d810      	bhi.n	414180 <decompress+0x3b8>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  41415e:	f81a 8008 	ldrb.w	r8, [sl, r8]
  414162:	4249      	negs	r1, r1
  414164:	1a89      	subs	r1, r1, r2
  414166:	3108      	adds	r1, #8
  414168:	fa48 f101 	asr.w	r1, r8, r1
  41416c:	400b      	ands	r3, r1
            rle_prev_v = ret;
  41416e:	498b      	ldr	r1, [pc, #556]	; (41439c <decompress+0x5d4>)
  414170:	700b      	strb	r3, [r1, #0]
            rle_rdp += rle_bpp;
  414172:	4422      	add	r2, r4
  414174:	498a      	ldr	r1, [pc, #552]	; (4143a0 <decompress+0x5d8>)
  414176:	600a      	str	r2, [r1, #0]
            rle_state = RLE_STATE_SINGLE;
  414178:	2100      	movs	r1, #0
  41417a:	4a8a      	ldr	r2, [pc, #552]	; (4143a4 <decompress+0x5dc>)
  41417c:	7011      	strb	r1, [r2, #0]
  41417e:	e680      	b.n	413e82 <decompress+0xba>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  414180:	f81a 9008 	ldrb.w	r9, [sl, r8]
  414184:	44d0      	add	r8, sl
  414186:	f898 8001 	ldrb.w	r8, [r8, #1]
  41418a:	eb08 2809 	add.w	r8, r8, r9, lsl #8
  41418e:	fa1f f888 	uxth.w	r8, r8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  414192:	4249      	negs	r1, r1
  414194:	1a89      	subs	r1, r1, r2
  414196:	3110      	adds	r1, #16
  414198:	fa48 f101 	asr.w	r1, r8, r1
  41419c:	400b      	ands	r3, r1
  41419e:	e7e6      	b.n	41416e <decompress+0x3a6>
  4141a0:	4674      	mov	r4, lr
    for(i = 0; i < w; i++) {
  4141a2:	f04f 0c00 	mov.w	ip, #0
  4141a6:	4660      	mov	r0, ip
  4141a8:	f8dd e008 	ldr.w	lr, [sp, #8]
  4141ac:	e048      	b.n	414240 <decompress+0x478>
        switch(val) {
  4141ae:	2907      	cmp	r1, #7
  4141b0:	d805      	bhi.n	4141be <decompress+0x3f6>
  4141b2:	e8df f001 	tbb	[pc, r1]
  4141b6:	0723      	.short	0x0723
  4141b8:	17130f0b 	.word	0x17130f0b
  4141bc:	1f1b      	.short	0x1f1b
        len = 4;
  4141be:	f04f 0804 	mov.w	r8, #4
  4141c2:	e01e      	b.n	414202 <decompress+0x43a>
  4141c4:	f04f 0804 	mov.w	r8, #4
                val = 2;
  4141c8:	2102      	movs	r1, #2
  4141ca:	e01a      	b.n	414202 <decompress+0x43a>
        len = 4;
  4141cc:	f04f 0804 	mov.w	r8, #4
                val = 4;
  4141d0:	4641      	mov	r1, r8
  4141d2:	e016      	b.n	414202 <decompress+0x43a>
        len = 4;
  4141d4:	f04f 0804 	mov.w	r8, #4
                val = 6;
  4141d8:	2106      	movs	r1, #6
  4141da:	e012      	b.n	414202 <decompress+0x43a>
        len = 4;
  4141dc:	f04f 0804 	mov.w	r8, #4
                val = 9;
  4141e0:	2109      	movs	r1, #9
  4141e2:	e00e      	b.n	414202 <decompress+0x43a>
        len = 4;
  4141e4:	f04f 0804 	mov.w	r8, #4
                val = 11;
  4141e8:	210b      	movs	r1, #11
  4141ea:	e00a      	b.n	414202 <decompress+0x43a>
        len = 4;
  4141ec:	f04f 0804 	mov.w	r8, #4
                val = 13;
  4141f0:	210d      	movs	r1, #13
  4141f2:	e006      	b.n	414202 <decompress+0x43a>
        len = 4;
  4141f4:	f04f 0804 	mov.w	r8, #4
                val = 15;
  4141f8:	210f      	movs	r1, #15
  4141fa:	e002      	b.n	414202 <decompress+0x43a>
        len = 4;
  4141fc:	f04f 0804 	mov.w	r8, #4
                val = 0;
  414200:	2100      	movs	r1, #0
    bit_pos = bit_pos & 0x7;
  414202:	f000 0207 	and.w	r2, r0, #7
    bit_pos = 8 - bit_pos - len;
  414206:	4252      	negs	r2, r2
  414208:	eba2 0208 	sub.w	r2, r2, r8
  41420c:	3208      	adds	r2, #8
    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  41420e:	2301      	movs	r3, #1
  414210:	fa03 f308 	lsl.w	r3, r3, r8
  414214:	b2db      	uxtb	r3, r3
  414216:	3b01      	subs	r3, #1
  414218:	b2db      	uxtb	r3, r3
    out[byte_pos] &= ((~bit_mask) << bit_pos);
  41421a:	f3c0 08cf 	ubfx	r8, r0, #3, #16
  41421e:	43db      	mvns	r3, r3
  414220:	4093      	lsls	r3, r2
  414222:	f816 9008 	ldrb.w	r9, [r6, r8]
  414226:	ea09 0303 	and.w	r3, r9, r3
  41422a:	b25b      	sxtb	r3, r3
    out[byte_pos] |= (val << bit_pos);
  41422c:	fa01 f202 	lsl.w	r2, r1, r2
  414230:	431a      	orrs	r2, r3
  414232:	f806 2008 	strb.w	r2, [r6, r8]
        wrp += wr_size;
  414236:	4470      	add	r0, lr
    for(x = 0; x < w; x++) {
  414238:	f10c 0c01 	add.w	ip, ip, #1
  41423c:	fa0f fc8c 	sxth.w	ip, ip
  414240:	45a4      	cmp	ip, r4
  414242:	da05      	bge.n	414250 <decompress+0x488>
        bits_write(out, wrp, line_buf1[x], bpp);
  414244:	f815 100c 	ldrb.w	r1, [r5, ip]
    if(len == 3) {
  414248:	2f03      	cmp	r7, #3
  41424a:	d0b0      	beq.n	4141ae <decompress+0x3e6>
  41424c:	46b8      	mov	r8, r7
  41424e:	e7d8      	b.n	414202 <decompress+0x43a>
  414250:	2301      	movs	r3, #1
  414252:	9300      	str	r3, [sp, #0]
  414254:	f000 bc62 	b.w	414b1c <decompress+0xd54>
            bit_mask = 0x1;
  414258:	2301      	movs	r3, #1
  41425a:	e00c      	b.n	414276 <decompress+0x4ae>
            bit_mask = 0x7;
  41425c:	2307      	movs	r3, #7
  41425e:	e00a      	b.n	414276 <decompress+0x4ae>
            bit_mask = 0xF;
  414260:	230f      	movs	r3, #15
  414262:	e008      	b.n	414276 <decompress+0x4ae>
            bit_mask = 0xFF;
  414264:	23ff      	movs	r3, #255	; 0xff
  414266:	e006      	b.n	414276 <decompress+0x4ae>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  414268:	2301      	movs	r3, #1
  41426a:	408b      	lsls	r3, r1
  41426c:	b2db      	uxtb	r3, r3
  41426e:	3b01      	subs	r3, #1
  414270:	b2db      	uxtb	r3, r3
  414272:	e000      	b.n	414276 <decompress+0x4ae>
            bit_mask = 0x3;
  414274:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  414276:	ea4f 08d0 	mov.w	r8, r0, lsr #3
    bit_pos = bit_pos & 0x7;
  41427a:	f000 0207 	and.w	r2, r0, #7
    if(bit_pos + len >= 8) {
  41427e:	eb02 0b01 	add.w	fp, r2, r1
  414282:	f1bb 0f07 	cmp.w	fp, #7
  414286:	d83d      	bhi.n	414304 <decompress+0x53c>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  414288:	f81a 8008 	ldrb.w	r8, [sl, r8]
  41428c:	4252      	negs	r2, r2
  41428e:	1a52      	subs	r2, r2, r1
  414290:	3208      	adds	r2, #8
  414292:	fa48 f202 	asr.w	r2, r8, r2
  414296:	4013      	ands	r3, r2
        if(rle_rdp != 0 && rle_prev_v == ret) {
  414298:	b118      	cbz	r0, 4142a2 <decompress+0x4da>
  41429a:	4a40      	ldr	r2, [pc, #256]	; (41439c <decompress+0x5d4>)
  41429c:	7812      	ldrb	r2, [r2, #0]
  41429e:	429a      	cmp	r2, r3
  4142a0:	d041      	beq.n	414326 <decompress+0x55e>
        rle_prev_v = ret;
  4142a2:	4a3e      	ldr	r2, [pc, #248]	; (41439c <decompress+0x5d4>)
  4142a4:	7013      	strb	r3, [r2, #0]
        rle_rdp += rle_bpp;
  4142a6:	4401      	add	r1, r0
  4142a8:	4a3d      	ldr	r2, [pc, #244]	; (4143a0 <decompress+0x5d8>)
  4142aa:	6011      	str	r1, [r2, #0]
        out[i] = rle_next();
  4142ac:	f88c 3000 	strb.w	r3, [ip]
    for(i = 0; i < w; i++) {
  4142b0:	f10e 0e01 	add.w	lr, lr, #1
  4142b4:	fa0f fe8e 	sxth.w	lr, lr
  4142b8:	4574      	cmp	r4, lr
  4142ba:	f340 8191 	ble.w	4145e0 <decompress+0x818>
        out[i] = rle_next();
  4142be:	eb09 0c0e 	add.w	ip, r9, lr
    if(rle_state == RLE_STATE_SINGLE) {
  4142c2:	4b38      	ldr	r3, [pc, #224]	; (4143a4 <decompress+0x5dc>)
  4142c4:	781b      	ldrb	r3, [r3, #0]
  4142c6:	2b00      	cmp	r3, #0
  4142c8:	d138      	bne.n	41433c <decompress+0x574>
        ret = get_bits(rle_in, rle_rdp, rle_bpp);
  4142ca:	4b38      	ldr	r3, [pc, #224]	; (4143ac <decompress+0x5e4>)
  4142cc:	f8d3 a000 	ldr.w	sl, [r3]
  4142d0:	4b33      	ldr	r3, [pc, #204]	; (4143a0 <decompress+0x5d8>)
  4142d2:	6818      	ldr	r0, [r3, #0]
  4142d4:	4b36      	ldr	r3, [pc, #216]	; (4143b0 <decompress+0x5e8>)
  4142d6:	7819      	ldrb	r1, [r3, #0]
    switch(len) {
  4142d8:	1e4b      	subs	r3, r1, #1
  4142da:	2b07      	cmp	r3, #7
  4142dc:	d8c4      	bhi.n	414268 <decompress+0x4a0>
  4142de:	a201      	add	r2, pc, #4	; (adr r2, 4142e4 <decompress+0x51c>)
  4142e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4142e4:	00414259 	.word	0x00414259
  4142e8:	00414275 	.word	0x00414275
  4142ec:	0041425d 	.word	0x0041425d
  4142f0:	00414261 	.word	0x00414261
  4142f4:	00414269 	.word	0x00414269
  4142f8:	00414269 	.word	0x00414269
  4142fc:	00414269 	.word	0x00414269
  414300:	00414265 	.word	0x00414265
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  414304:	f81a b008 	ldrb.w	fp, [sl, r8]
  414308:	44d0      	add	r8, sl
  41430a:	f898 8001 	ldrb.w	r8, [r8, #1]
  41430e:	eb08 2b0b 	add.w	fp, r8, fp, lsl #8
  414312:	fa1f fb8b 	uxth.w	fp, fp
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  414316:	4252      	negs	r2, r2
  414318:	1a52      	subs	r2, r2, r1
  41431a:	3210      	adds	r2, #16
  41431c:	fa4b fb02 	asr.w	fp, fp, r2
  414320:	ea0b 0303 	and.w	r3, fp, r3
  414324:	e7b8      	b.n	414298 <decompress+0x4d0>
            rle_cnt = 0;
  414326:	f04f 0800 	mov.w	r8, #0
  41432a:	4a1f      	ldr	r2, [pc, #124]	; (4143a8 <decompress+0x5e0>)
  41432c:	f882 8000 	strb.w	r8, [r2]
            rle_state = RLE_STATE_REPEATE;
  414330:	f04f 0801 	mov.w	r8, #1
  414334:	4a1b      	ldr	r2, [pc, #108]	; (4143a4 <decompress+0x5dc>)
  414336:	f882 8000 	strb.w	r8, [r2]
  41433a:	e7b2      	b.n	4142a2 <decompress+0x4da>
    else if(rle_state == RLE_STATE_REPEATE) {
  41433c:	2b01      	cmp	r3, #1
  41433e:	d004      	beq.n	41434a <decompress+0x582>
    else if(rle_state == RLE_STATE_COUNTER) {
  414340:	2b02      	cmp	r3, #2
  414342:	f000 80f3 	beq.w	41452c <decompress+0x764>
    uint8_t ret = 0;
  414346:	2300      	movs	r3, #0
  414348:	e7b0      	b.n	4142ac <decompress+0x4e4>
        v = get_bits(rle_in, rle_rdp, 1);
  41434a:	4b18      	ldr	r3, [pc, #96]	; (4143ac <decompress+0x5e4>)
  41434c:	f8d3 8000 	ldr.w	r8, [r3]
  414350:	4b13      	ldr	r3, [pc, #76]	; (4143a0 <decompress+0x5d8>)
  414352:	681a      	ldr	r2, [r3, #0]
    uint32_t byte_pos = bit_pos >> 3;
  414354:	08d1      	lsrs	r1, r2, #3
    bit_pos = bit_pos & 0x7;
  414356:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
  41435a:	1c58      	adds	r0, r3, #1
  41435c:	2807      	cmp	r0, #7
  41435e:	d829      	bhi.n	4143b4 <decompress+0x5ec>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  414360:	f818 1001 	ldrb.w	r1, [r8, r1]
  414364:	f1c3 0307 	rsb	r3, r3, #7
  414368:	fa41 f303 	asr.w	r3, r1, r3
  41436c:	f003 0101 	and.w	r1, r3, #1
        rle_cnt++;
  414370:	4b0d      	ldr	r3, [pc, #52]	; (4143a8 <decompress+0x5e0>)
  414372:	7818      	ldrb	r0, [r3, #0]
  414374:	3001      	adds	r0, #1
  414376:	b2c0      	uxtb	r0, r0
  414378:	7018      	strb	r0, [r3, #0]
        rle_rdp += 1;
  41437a:	3201      	adds	r2, #1
  41437c:	4b08      	ldr	r3, [pc, #32]	; (4143a0 <decompress+0x5d8>)
  41437e:	601a      	str	r2, [r3, #0]
        if(v == 1) {
  414380:	2901      	cmp	r1, #1
  414382:	d024      	beq.n	4143ce <decompress+0x606>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
  414384:	4b0a      	ldr	r3, [pc, #40]	; (4143b0 <decompress+0x5e8>)
  414386:	7818      	ldrb	r0, [r3, #0]
    switch(len) {
  414388:	1e43      	subs	r3, r0, #1
  41438a:	2b07      	cmp	r3, #7
  41438c:	f200 809c 	bhi.w	4144c8 <decompress+0x700>
  414390:	e8df f003 	tbb	[pc, r3]
  414394:	9694a092 	.word	0x9694a092
  414398:	989a9a9a 	.word	0x989a9a9a
  41439c:	2040c7c4 	.word	0x2040c7c4
  4143a0:	2040c7c8 	.word	0x2040c7c8
  4143a4:	2040c7cc 	.word	0x2040c7cc
  4143a8:	2040c7bd 	.word	0x2040c7bd
  4143ac:	2040c7c0 	.word	0x2040c7c0
  4143b0:	2040c7bc 	.word	0x2040c7bc
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  4143b4:	f818 0001 	ldrb.w	r0, [r8, r1]
  4143b8:	4441      	add	r1, r8
  4143ba:	7849      	ldrb	r1, [r1, #1]
  4143bc:	eb01 2100 	add.w	r1, r1, r0, lsl #8
  4143c0:	b289      	uxth	r1, r1
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  4143c2:	f1c3 030f 	rsb	r3, r3, #15
  4143c6:	4119      	asrs	r1, r3
  4143c8:	f001 0101 	and.w	r1, r1, #1
  4143cc:	e7d0      	b.n	414370 <decompress+0x5a8>
            ret = rle_prev_v;
  4143ce:	4bb8      	ldr	r3, [pc, #736]	; (4146b0 <decompress+0x8e8>)
  4143d0:	781b      	ldrb	r3, [r3, #0]
            if(rle_cnt == 11) {
  4143d2:	280b      	cmp	r0, #11
  4143d4:	f47f af6a 	bne.w	4142ac <decompress+0x4e4>
    uint32_t byte_pos = bit_pos >> 3;
  4143d8:	08d0      	lsrs	r0, r2, #3
    bit_pos = bit_pos & 0x7;
  4143da:	f002 0a07 	and.w	sl, r2, #7
    if(bit_pos + len >= 8) {
  4143de:	f10a 0b06 	add.w	fp, sl, #6
  4143e2:	f1bb 0f07 	cmp.w	fp, #7
  4143e6:	d815      	bhi.n	414414 <decompress+0x64c>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  4143e8:	f818 0000 	ldrb.w	r0, [r8, r0]
  4143ec:	f1ca 0a02 	rsb	sl, sl, #2
  4143f0:	fa40 f00a 	asr.w	r0, r0, sl
  4143f4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                rle_cnt = get_bits(rle_in, rle_rdp, 6);
  4143f8:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 4146c0 <decompress+0x8f8>
  4143fc:	f88a 0000 	strb.w	r0, [sl]
                rle_rdp += 6;
  414400:	3206      	adds	r2, #6
  414402:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 4146bc <decompress+0x8f4>
  414406:	f8ca 2000 	str.w	r2, [sl]
                if(rle_cnt != 0) {
  41440a:	b188      	cbz	r0, 414430 <decompress+0x668>
                    rle_state = RLE_STATE_COUNTER;
  41440c:	2102      	movs	r1, #2
  41440e:	4aa9      	ldr	r2, [pc, #676]	; (4146b4 <decompress+0x8ec>)
  414410:	7011      	strb	r1, [r2, #0]
  414412:	e74b      	b.n	4142ac <decompress+0x4e4>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  414414:	f818 b000 	ldrb.w	fp, [r8, r0]
  414418:	4440      	add	r0, r8
  41441a:	7840      	ldrb	r0, [r0, #1]
  41441c:	eb00 200b 	add.w	r0, r0, fp, lsl #8
  414420:	b280      	uxth	r0, r0
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  414422:	f1ca 0a0a 	rsb	sl, sl, #10
  414426:	fa40 f00a 	asr.w	r0, r0, sl
  41442a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  41442e:	e7e3      	b.n	4143f8 <decompress+0x630>
                    ret = get_bits(rle_in, rle_rdp, rle_bpp);
  414430:	4ba1      	ldr	r3, [pc, #644]	; (4146b8 <decompress+0x8f0>)
  414432:	f893 b000 	ldrb.w	fp, [r3]
    switch(len) {
  414436:	f10b 33ff 	add.w	r3, fp, #4294967295
  41443a:	2b07      	cmp	r3, #7
  41443c:	d80b      	bhi.n	414456 <decompress+0x68e>
  41443e:	e8df f003 	tbb	[pc, r3]
  414442:	1112      	.short	0x1112
  414444:	0a0a0604 	.word	0x0a0a0604
  414448:	080a      	.short	0x080a
            bit_mask = 0x7;
  41444a:	2107      	movs	r1, #7
  41444c:	e00b      	b.n	414466 <decompress+0x69e>
            bit_mask = 0xF;
  41444e:	210f      	movs	r1, #15
  414450:	e009      	b.n	414466 <decompress+0x69e>
            bit_mask = 0xFF;
  414452:	21ff      	movs	r1, #255	; 0xff
  414454:	e007      	b.n	414466 <decompress+0x69e>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  414456:	2101      	movs	r1, #1
  414458:	fa01 f10b 	lsl.w	r1, r1, fp
  41445c:	b2c9      	uxtb	r1, r1
  41445e:	3901      	subs	r1, #1
  414460:	b2c9      	uxtb	r1, r1
  414462:	e000      	b.n	414466 <decompress+0x69e>
            bit_mask = 0x3;
  414464:	2103      	movs	r1, #3
    uint32_t byte_pos = bit_pos >> 3;
  414466:	08d0      	lsrs	r0, r2, #3
    bit_pos = bit_pos & 0x7;
  414468:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
  41446c:	eb03 0a0b 	add.w	sl, r3, fp
  414470:	f1ba 0f07 	cmp.w	sl, #7
  414474:	d811      	bhi.n	41449a <decompress+0x6d2>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  414476:	f818 0000 	ldrb.w	r0, [r8, r0]
  41447a:	425b      	negs	r3, r3
  41447c:	eba3 030b 	sub.w	r3, r3, fp
  414480:	3308      	adds	r3, #8
  414482:	fa40 f303 	asr.w	r3, r0, r3
  414486:	400b      	ands	r3, r1
                    rle_prev_v = ret;
  414488:	4989      	ldr	r1, [pc, #548]	; (4146b0 <decompress+0x8e8>)
  41448a:	700b      	strb	r3, [r1, #0]
                    rle_rdp += rle_bpp;
  41448c:	445a      	add	r2, fp
  41448e:	498b      	ldr	r1, [pc, #556]	; (4146bc <decompress+0x8f4>)
  414490:	600a      	str	r2, [r1, #0]
                    rle_state = RLE_STATE_SINGLE;
  414492:	2100      	movs	r1, #0
  414494:	4a87      	ldr	r2, [pc, #540]	; (4146b4 <decompress+0x8ec>)
  414496:	7011      	strb	r1, [r2, #0]
  414498:	e708      	b.n	4142ac <decompress+0x4e4>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  41449a:	f818 a000 	ldrb.w	sl, [r8, r0]
  41449e:	4440      	add	r0, r8
  4144a0:	7840      	ldrb	r0, [r0, #1]
  4144a2:	eb00 200a 	add.w	r0, r0, sl, lsl #8
  4144a6:	b280      	uxth	r0, r0
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  4144a8:	425b      	negs	r3, r3
  4144aa:	eba3 030b 	sub.w	r3, r3, fp
  4144ae:	3310      	adds	r3, #16
  4144b0:	fa40 f303 	asr.w	r3, r0, r3
  4144b4:	400b      	ands	r3, r1
  4144b6:	e7e7      	b.n	414488 <decompress+0x6c0>
            bit_mask = 0x1;
  4144b8:	2301      	movs	r3, #1
  4144ba:	e00c      	b.n	4144d6 <decompress+0x70e>
            bit_mask = 0x7;
  4144bc:	2307      	movs	r3, #7
  4144be:	e00a      	b.n	4144d6 <decompress+0x70e>
            bit_mask = 0xF;
  4144c0:	230f      	movs	r3, #15
  4144c2:	e008      	b.n	4144d6 <decompress+0x70e>
            bit_mask = 0xFF;
  4144c4:	23ff      	movs	r3, #255	; 0xff
  4144c6:	e006      	b.n	4144d6 <decompress+0x70e>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  4144c8:	2301      	movs	r3, #1
  4144ca:	4083      	lsls	r3, r0
  4144cc:	b2db      	uxtb	r3, r3
  4144ce:	3b01      	subs	r3, #1
  4144d0:	b2db      	uxtb	r3, r3
  4144d2:	e000      	b.n	4144d6 <decompress+0x70e>
            bit_mask = 0x3;
  4144d4:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  4144d6:	ea4f 0ad2 	mov.w	sl, r2, lsr #3
    bit_pos = bit_pos & 0x7;
  4144da:	f002 0107 	and.w	r1, r2, #7
    if(bit_pos + len >= 8) {
  4144de:	eb01 0b00 	add.w	fp, r1, r0
  4144e2:	f1bb 0f07 	cmp.w	fp, #7
  4144e6:	d810      	bhi.n	41450a <decompress+0x742>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  4144e8:	f818 800a 	ldrb.w	r8, [r8, sl]
  4144ec:	4249      	negs	r1, r1
  4144ee:	1a09      	subs	r1, r1, r0
  4144f0:	3108      	adds	r1, #8
  4144f2:	fa48 f101 	asr.w	r1, r8, r1
  4144f6:	400b      	ands	r3, r1
            rle_prev_v = ret;
  4144f8:	496d      	ldr	r1, [pc, #436]	; (4146b0 <decompress+0x8e8>)
  4144fa:	700b      	strb	r3, [r1, #0]
            rle_rdp += rle_bpp;
  4144fc:	4402      	add	r2, r0
  4144fe:	496f      	ldr	r1, [pc, #444]	; (4146bc <decompress+0x8f4>)
  414500:	600a      	str	r2, [r1, #0]
            rle_state = RLE_STATE_SINGLE;
  414502:	2100      	movs	r1, #0
  414504:	4a6b      	ldr	r2, [pc, #428]	; (4146b4 <decompress+0x8ec>)
  414506:	7011      	strb	r1, [r2, #0]
  414508:	e6d0      	b.n	4142ac <decompress+0x4e4>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  41450a:	f818 b00a 	ldrb.w	fp, [r8, sl]
  41450e:	44d0      	add	r8, sl
  414510:	f898 8001 	ldrb.w	r8, [r8, #1]
  414514:	eb08 2b0b 	add.w	fp, r8, fp, lsl #8
  414518:	fa1f fb8b 	uxth.w	fp, fp
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  41451c:	4249      	negs	r1, r1
  41451e:	1a09      	subs	r1, r1, r0
  414520:	3110      	adds	r1, #16
  414522:	fa4b fb01 	asr.w	fp, fp, r1
  414526:	ea0b 0303 	and.w	r3, fp, r3
  41452a:	e7e5      	b.n	4144f8 <decompress+0x730>
        ret = rle_prev_v;
  41452c:	4b60      	ldr	r3, [pc, #384]	; (4146b0 <decompress+0x8e8>)
  41452e:	781b      	ldrb	r3, [r3, #0]
        rle_cnt--;
  414530:	4963      	ldr	r1, [pc, #396]	; (4146c0 <decompress+0x8f8>)
  414532:	780a      	ldrb	r2, [r1, #0]
  414534:	3a01      	subs	r2, #1
  414536:	b2d2      	uxtb	r2, r2
  414538:	700a      	strb	r2, [r1, #0]
        if(rle_cnt == 0) {
  41453a:	2a00      	cmp	r2, #0
  41453c:	f47f aeb6 	bne.w	4142ac <decompress+0x4e4>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
  414540:	4b60      	ldr	r3, [pc, #384]	; (4146c4 <decompress+0x8fc>)
  414542:	f8d3 a000 	ldr.w	sl, [r3]
  414546:	4b5d      	ldr	r3, [pc, #372]	; (4146bc <decompress+0x8f4>)
  414548:	6818      	ldr	r0, [r3, #0]
  41454a:	4b5b      	ldr	r3, [pc, #364]	; (4146b8 <decompress+0x8f0>)
  41454c:	7819      	ldrb	r1, [r3, #0]
    switch(len) {
  41454e:	1e4b      	subs	r3, r1, #1
  414550:	2b07      	cmp	r3, #7
  414552:	d80d      	bhi.n	414570 <decompress+0x7a8>
  414554:	e8df f003 	tbb	[pc, r3]
  414558:	08061204 	.word	0x08061204
  41455c:	0a0c0c0c 	.word	0x0a0c0c0c
            bit_mask = 0x1;
  414560:	2301      	movs	r3, #1
  414562:	e00c      	b.n	41457e <decompress+0x7b6>
            bit_mask = 0x7;
  414564:	2307      	movs	r3, #7
  414566:	e00a      	b.n	41457e <decompress+0x7b6>
            bit_mask = 0xF;
  414568:	230f      	movs	r3, #15
  41456a:	e008      	b.n	41457e <decompress+0x7b6>
            bit_mask = 0xFF;
  41456c:	23ff      	movs	r3, #255	; 0xff
  41456e:	e006      	b.n	41457e <decompress+0x7b6>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  414570:	2301      	movs	r3, #1
  414572:	408b      	lsls	r3, r1
  414574:	b2db      	uxtb	r3, r3
  414576:	3b01      	subs	r3, #1
  414578:	b2db      	uxtb	r3, r3
  41457a:	e000      	b.n	41457e <decompress+0x7b6>
            bit_mask = 0x3;
  41457c:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  41457e:	ea4f 08d0 	mov.w	r8, r0, lsr #3
    bit_pos = bit_pos & 0x7;
  414582:	f000 0207 	and.w	r2, r0, #7
    if(bit_pos + len >= 8) {
  414586:	eb02 0b01 	add.w	fp, r2, r1
  41458a:	f1bb 0f07 	cmp.w	fp, #7
  41458e:	d810      	bhi.n	4145b2 <decompress+0x7ea>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  414590:	f81a 8008 	ldrb.w	r8, [sl, r8]
  414594:	4252      	negs	r2, r2
  414596:	1a52      	subs	r2, r2, r1
  414598:	3208      	adds	r2, #8
  41459a:	fa48 f202 	asr.w	r2, r8, r2
  41459e:	4013      	ands	r3, r2
            rle_prev_v = ret;
  4145a0:	4a43      	ldr	r2, [pc, #268]	; (4146b0 <decompress+0x8e8>)
  4145a2:	7013      	strb	r3, [r2, #0]
            rle_rdp += rle_bpp;
  4145a4:	4401      	add	r1, r0
  4145a6:	4a45      	ldr	r2, [pc, #276]	; (4146bc <decompress+0x8f4>)
  4145a8:	6011      	str	r1, [r2, #0]
            rle_state = RLE_STATE_SINGLE;
  4145aa:	2100      	movs	r1, #0
  4145ac:	4a41      	ldr	r2, [pc, #260]	; (4146b4 <decompress+0x8ec>)
  4145ae:	7011      	strb	r1, [r2, #0]
  4145b0:	e67c      	b.n	4142ac <decompress+0x4e4>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  4145b2:	f81a b008 	ldrb.w	fp, [sl, r8]
  4145b6:	44d0      	add	r8, sl
  4145b8:	f898 8001 	ldrb.w	r8, [r8, #1]
  4145bc:	eb08 2b0b 	add.w	fp, r8, fp, lsl #8
  4145c0:	fa1f fb8b 	uxth.w	fp, fp
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  4145c4:	4252      	negs	r2, r2
  4145c6:	1a52      	subs	r2, r2, r1
  4145c8:	3210      	adds	r2, #16
  4145ca:	fa4b fb02 	asr.w	fp, fp, r2
  4145ce:	ea0b 0303 	and.w	r3, fp, r3
  4145d2:	e7e5      	b.n	4145a0 <decompress+0x7d8>
  4145d4:	f04f 0e00 	mov.w	lr, #0
  4145d8:	9005      	str	r0, [sp, #20]
  4145da:	f8dd 900c 	ldr.w	r9, [sp, #12]
  4145de:	e66b      	b.n	4142b8 <decompress+0x4f0>
  4145e0:	9805      	ldr	r0, [sp, #20]
    for(i = 0; i < w; i++) {
  4145e2:	f04f 0c00 	mov.w	ip, #0
  4145e6:	f8dd e008 	ldr.w	lr, [sp, #8]
  4145ea:	f8dd 800c 	ldr.w	r8, [sp, #12]
  4145ee:	e048      	b.n	414682 <decompress+0x8ba>
        switch(val) {
  4145f0:	2907      	cmp	r1, #7
  4145f2:	d805      	bhi.n	414600 <decompress+0x838>
  4145f4:	e8df f001 	tbb	[pc, r1]
  4145f8:	0f0b0723 	.word	0x0f0b0723
  4145fc:	1f1b1713 	.word	0x1f1b1713
        len = 4;
  414600:	f04f 0904 	mov.w	r9, #4
  414604:	e01e      	b.n	414644 <decompress+0x87c>
  414606:	f04f 0904 	mov.w	r9, #4
                val = 2;
  41460a:	2102      	movs	r1, #2
  41460c:	e01a      	b.n	414644 <decompress+0x87c>
        len = 4;
  41460e:	f04f 0904 	mov.w	r9, #4
                val = 4;
  414612:	4649      	mov	r1, r9
  414614:	e016      	b.n	414644 <decompress+0x87c>
        len = 4;
  414616:	f04f 0904 	mov.w	r9, #4
                val = 6;
  41461a:	2106      	movs	r1, #6
  41461c:	e012      	b.n	414644 <decompress+0x87c>
        len = 4;
  41461e:	f04f 0904 	mov.w	r9, #4
                val = 9;
  414622:	2109      	movs	r1, #9
  414624:	e00e      	b.n	414644 <decompress+0x87c>
        len = 4;
  414626:	f04f 0904 	mov.w	r9, #4
                val = 11;
  41462a:	210b      	movs	r1, #11
  41462c:	e00a      	b.n	414644 <decompress+0x87c>
        len = 4;
  41462e:	f04f 0904 	mov.w	r9, #4
                val = 13;
  414632:	210d      	movs	r1, #13
  414634:	e006      	b.n	414644 <decompress+0x87c>
        len = 4;
  414636:	f04f 0904 	mov.w	r9, #4
                val = 15;
  41463a:	210f      	movs	r1, #15
  41463c:	e002      	b.n	414644 <decompress+0x87c>
        len = 4;
  41463e:	f04f 0904 	mov.w	r9, #4
                val = 0;
  414642:	2100      	movs	r1, #0
    bit_pos = bit_pos & 0x7;
  414644:	f000 0207 	and.w	r2, r0, #7
    bit_pos = 8 - bit_pos - len;
  414648:	4252      	negs	r2, r2
  41464a:	eba2 0209 	sub.w	r2, r2, r9
  41464e:	3208      	adds	r2, #8
    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  414650:	2301      	movs	r3, #1
  414652:	fa03 f309 	lsl.w	r3, r3, r9
  414656:	b2db      	uxtb	r3, r3
  414658:	3b01      	subs	r3, #1
  41465a:	b2db      	uxtb	r3, r3
    out[byte_pos] &= ((~bit_mask) << bit_pos);
  41465c:	f3c0 09cf 	ubfx	r9, r0, #3, #16
  414660:	43db      	mvns	r3, r3
  414662:	4093      	lsls	r3, r2
  414664:	f816 a009 	ldrb.w	sl, [r6, r9]
  414668:	ea0a 0303 	and.w	r3, sl, r3
  41466c:	b25b      	sxtb	r3, r3
    out[byte_pos] |= (val << bit_pos);
  41466e:	fa01 f202 	lsl.w	r2, r1, r2
  414672:	431a      	orrs	r2, r3
  414674:	f806 2009 	strb.w	r2, [r6, r9]
                wrp += wr_size;
  414678:	4470      	add	r0, lr
            for(x = 0; x < w; x++) {
  41467a:	f10c 0c01 	add.w	ip, ip, #1
  41467e:	fa0f fc8c 	sxth.w	ip, ip
  414682:	45a4      	cmp	ip, r4
  414684:	f280 8246 	bge.w	414b14 <decompress+0xd4c>
                line_buf1[x] = line_buf2[x] ^ line_buf1[x];
  414688:	f818 100c 	ldrb.w	r1, [r8, ip]
  41468c:	f815 300c 	ldrb.w	r3, [r5, ip]
  414690:	4059      	eors	r1, r3
  414692:	f805 100c 	strb.w	r1, [r5, ip]
    if(len == 3) {
  414696:	2f03      	cmp	r7, #3
  414698:	d0aa      	beq.n	4145f0 <decompress+0x828>
  41469a:	46b9      	mov	r9, r7
  41469c:	e7d2      	b.n	414644 <decompress+0x87c>
            bit_mask = 0x1;
  41469e:	f04f 0901 	mov.w	r9, #1
  4146a2:	e01d      	b.n	4146e0 <decompress+0x918>
            bit_mask = 0x7;
  4146a4:	f04f 0907 	mov.w	r9, #7
  4146a8:	e01a      	b.n	4146e0 <decompress+0x918>
            bit_mask = 0xF;
  4146aa:	f04f 090f 	mov.w	r9, #15
  4146ae:	e017      	b.n	4146e0 <decompress+0x918>
  4146b0:	2040c7c4 	.word	0x2040c7c4
  4146b4:	2040c7cc 	.word	0x2040c7cc
  4146b8:	2040c7bc 	.word	0x2040c7bc
  4146bc:	2040c7c8 	.word	0x2040c7c8
  4146c0:	2040c7bd 	.word	0x2040c7bd
  4146c4:	2040c7c0 	.word	0x2040c7c0
            bit_mask = 0xFF;
  4146c8:	f04f 09ff 	mov.w	r9, #255	; 0xff
  4146cc:	e008      	b.n	4146e0 <decompress+0x918>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  4146ce:	2301      	movs	r3, #1
  4146d0:	4093      	lsls	r3, r2
  4146d2:	b2db      	uxtb	r3, r3
  4146d4:	3b01      	subs	r3, #1
  4146d6:	fa5f f983 	uxtb.w	r9, r3
  4146da:	e001      	b.n	4146e0 <decompress+0x918>
            bit_mask = 0x3;
  4146dc:	f04f 0903 	mov.w	r9, #3
    uint32_t byte_pos = bit_pos >> 3;
  4146e0:	ea4f 0ad8 	mov.w	sl, r8, lsr #3
    bit_pos = bit_pos & 0x7;
  4146e4:	f008 0107 	and.w	r1, r8, #7
    if(bit_pos + len >= 8) {
  4146e8:	188b      	adds	r3, r1, r2
  4146ea:	2b07      	cmp	r3, #7
  4146ec:	d840      	bhi.n	414770 <decompress+0x9a8>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  4146ee:	f81b 300a 	ldrb.w	r3, [fp, sl]
  4146f2:	4249      	negs	r1, r1
  4146f4:	1a89      	subs	r1, r1, r2
  4146f6:	3108      	adds	r1, #8
  4146f8:	410b      	asrs	r3, r1
  4146fa:	ea03 0309 	and.w	r3, r3, r9
        if(rle_rdp != 0 && rle_prev_v == ret) {
  4146fe:	f1b8 0f00 	cmp.w	r8, #0
  414702:	d003      	beq.n	41470c <decompress+0x944>
  414704:	49b9      	ldr	r1, [pc, #740]	; (4149ec <decompress+0xc24>)
  414706:	7809      	ldrb	r1, [r1, #0]
  414708:	4299      	cmp	r1, r3
  41470a:	d040      	beq.n	41478e <decompress+0x9c6>
        rle_prev_v = ret;
  41470c:	49b7      	ldr	r1, [pc, #732]	; (4149ec <decompress+0xc24>)
  41470e:	700b      	strb	r3, [r1, #0]
        rle_rdp += rle_bpp;
  414710:	4442      	add	r2, r8
  414712:	49b7      	ldr	r1, [pc, #732]	; (4149f0 <decompress+0xc28>)
  414714:	600a      	str	r2, [r1, #0]
        out[i] = rle_next();
  414716:	f88c 3000 	strb.w	r3, [ip]
    for(i = 0; i < w; i++) {
  41471a:	f10e 0e01 	add.w	lr, lr, #1
  41471e:	fa0f fe8e 	sxth.w	lr, lr
  414722:	4574      	cmp	r4, lr
  414724:	f340 81a0 	ble.w	414a68 <decompress+0xca0>
        out[i] = rle_next();
  414728:	eb05 0c0e 	add.w	ip, r5, lr
    if(rle_state == RLE_STATE_SINGLE) {
  41472c:	4bb1      	ldr	r3, [pc, #708]	; (4149f4 <decompress+0xc2c>)
  41472e:	781b      	ldrb	r3, [r3, #0]
  414730:	2b00      	cmp	r3, #0
  414732:	d137      	bne.n	4147a4 <decompress+0x9dc>
        ret = get_bits(rle_in, rle_rdp, rle_bpp);
  414734:	4bb0      	ldr	r3, [pc, #704]	; (4149f8 <decompress+0xc30>)
  414736:	f8d3 b000 	ldr.w	fp, [r3]
  41473a:	4bad      	ldr	r3, [pc, #692]	; (4149f0 <decompress+0xc28>)
  41473c:	f8d3 8000 	ldr.w	r8, [r3]
  414740:	4bae      	ldr	r3, [pc, #696]	; (4149fc <decompress+0xc34>)
  414742:	781a      	ldrb	r2, [r3, #0]
    switch(len) {
  414744:	1e53      	subs	r3, r2, #1
  414746:	2b07      	cmp	r3, #7
  414748:	d8c1      	bhi.n	4146ce <decompress+0x906>
  41474a:	a101      	add	r1, pc, #4	; (adr r1, 414750 <decompress+0x988>)
  41474c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
  414750:	0041469f 	.word	0x0041469f
  414754:	004146dd 	.word	0x004146dd
  414758:	004146a5 	.word	0x004146a5
  41475c:	004146ab 	.word	0x004146ab
  414760:	004146cf 	.word	0x004146cf
  414764:	004146cf 	.word	0x004146cf
  414768:	004146cf 	.word	0x004146cf
  41476c:	004146c9 	.word	0x004146c9
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  414770:	f81b 300a 	ldrb.w	r3, [fp, sl]
  414774:	44da      	add	sl, fp
  414776:	f89a a001 	ldrb.w	sl, [sl, #1]
  41477a:	eb0a 2303 	add.w	r3, sl, r3, lsl #8
  41477e:	b29b      	uxth	r3, r3
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  414780:	4249      	negs	r1, r1
  414782:	1a89      	subs	r1, r1, r2
  414784:	3110      	adds	r1, #16
  414786:	410b      	asrs	r3, r1
  414788:	ea03 0309 	and.w	r3, r3, r9
  41478c:	e7b7      	b.n	4146fe <decompress+0x936>
            rle_cnt = 0;
  41478e:	f04f 0900 	mov.w	r9, #0
  414792:	499b      	ldr	r1, [pc, #620]	; (414a00 <decompress+0xc38>)
  414794:	f881 9000 	strb.w	r9, [r1]
            rle_state = RLE_STATE_REPEATE;
  414798:	f04f 0901 	mov.w	r9, #1
  41479c:	4995      	ldr	r1, [pc, #596]	; (4149f4 <decompress+0xc2c>)
  41479e:	f881 9000 	strb.w	r9, [r1]
  4147a2:	e7b3      	b.n	41470c <decompress+0x944>
    else if(rle_state == RLE_STATE_REPEATE) {
  4147a4:	2b01      	cmp	r3, #1
  4147a6:	d004      	beq.n	4147b2 <decompress+0x9ea>
    else if(rle_state == RLE_STATE_COUNTER) {
  4147a8:	2b02      	cmp	r3, #2
  4147aa:	f000 80fa 	beq.w	4149a2 <decompress+0xbda>
    uint8_t ret = 0;
  4147ae:	2300      	movs	r3, #0
  4147b0:	e7b1      	b.n	414716 <decompress+0x94e>
        v = get_bits(rle_in, rle_rdp, 1);
  4147b2:	4b91      	ldr	r3, [pc, #580]	; (4149f8 <decompress+0xc30>)
  4147b4:	f8d3 9000 	ldr.w	r9, [r3]
  4147b8:	4b8d      	ldr	r3, [pc, #564]	; (4149f0 <decompress+0xc28>)
  4147ba:	681a      	ldr	r2, [r3, #0]
    uint32_t byte_pos = bit_pos >> 3;
  4147bc:	08d1      	lsrs	r1, r2, #3
    bit_pos = bit_pos & 0x7;
  4147be:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
  4147c2:	f103 0801 	add.w	r8, r3, #1
  4147c6:	f1b8 0f07 	cmp.w	r8, #7
  4147ca:	d822      	bhi.n	414812 <decompress+0xa4a>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  4147cc:	f819 1001 	ldrb.w	r1, [r9, r1]
  4147d0:	f1c3 0307 	rsb	r3, r3, #7
  4147d4:	4119      	asrs	r1, r3
  4147d6:	f001 0101 	and.w	r1, r1, #1
        rle_cnt++;
  4147da:	4b89      	ldr	r3, [pc, #548]	; (414a00 <decompress+0xc38>)
  4147dc:	f893 8000 	ldrb.w	r8, [r3]
  4147e0:	f108 0801 	add.w	r8, r8, #1
  4147e4:	fa5f f888 	uxtb.w	r8, r8
  4147e8:	f883 8000 	strb.w	r8, [r3]
        rle_rdp += 1;
  4147ec:	3201      	adds	r2, #1
  4147ee:	4b80      	ldr	r3, [pc, #512]	; (4149f0 <decompress+0xc28>)
  4147f0:	601a      	str	r2, [r3, #0]
        if(v == 1) {
  4147f2:	2901      	cmp	r1, #1
  4147f4:	d01a      	beq.n	41482c <decompress+0xa64>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
  4147f6:	4b81      	ldr	r3, [pc, #516]	; (4149fc <decompress+0xc34>)
  4147f8:	f893 8000 	ldrb.w	r8, [r3]
    switch(len) {
  4147fc:	f108 33ff 	add.w	r3, r8, #4294967295
  414800:	2b07      	cmp	r3, #7
  414802:	f200 8099 	bhi.w	414938 <decompress+0xb70>
  414806:	e8df f003 	tbb	[pc, r3]
  41480a:	9e8f      	.short	0x9e8f
  41480c:	97979391 	.word	0x97979391
  414810:	9597      	.short	0x9597
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  414812:	f819 8001 	ldrb.w	r8, [r9, r1]
  414816:	4449      	add	r1, r9
  414818:	7849      	ldrb	r1, [r1, #1]
  41481a:	eb01 2108 	add.w	r1, r1, r8, lsl #8
  41481e:	b289      	uxth	r1, r1
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  414820:	f1c3 030f 	rsb	r3, r3, #15
  414824:	4119      	asrs	r1, r3
  414826:	f001 0101 	and.w	r1, r1, #1
  41482a:	e7d6      	b.n	4147da <decompress+0xa12>
            ret = rle_prev_v;
  41482c:	4b6f      	ldr	r3, [pc, #444]	; (4149ec <decompress+0xc24>)
  41482e:	781b      	ldrb	r3, [r3, #0]
            if(rle_cnt == 11) {
  414830:	f1b8 0f0b 	cmp.w	r8, #11
  414834:	f47f af6f 	bne.w	414716 <decompress+0x94e>
    uint32_t byte_pos = bit_pos >> 3;
  414838:	ea4f 0ad2 	mov.w	sl, r2, lsr #3
    bit_pos = bit_pos & 0x7;
  41483c:	f002 0b07 	and.w	fp, r2, #7
    if(bit_pos + len >= 8) {
  414840:	f10b 0806 	add.w	r8, fp, #6
  414844:	f1b8 0f07 	cmp.w	r8, #7
  414848:	d817      	bhi.n	41487a <decompress+0xab2>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  41484a:	f819 a00a 	ldrb.w	sl, [r9, sl]
  41484e:	f1cb 0802 	rsb	r8, fp, #2
  414852:	fa4a f808 	asr.w	r8, sl, r8
  414856:	f008 083f 	and.w	r8, r8, #63	; 0x3f
                rle_cnt = get_bits(rle_in, rle_rdp, 6);
  41485a:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 414a00 <decompress+0xc38>
  41485e:	f88a 8000 	strb.w	r8, [sl]
                rle_rdp += 6;
  414862:	3206      	adds	r2, #6
  414864:	f8df a188 	ldr.w	sl, [pc, #392]	; 4149f0 <decompress+0xc28>
  414868:	f8ca 2000 	str.w	r2, [sl]
                if(rle_cnt != 0) {
  41486c:	f1b8 0f00 	cmp.w	r8, #0
  414870:	d013      	beq.n	41489a <decompress+0xad2>
                    rle_state = RLE_STATE_COUNTER;
  414872:	2102      	movs	r1, #2
  414874:	4a5f      	ldr	r2, [pc, #380]	; (4149f4 <decompress+0xc2c>)
  414876:	7011      	strb	r1, [r2, #0]
  414878:	e74d      	b.n	414716 <decompress+0x94e>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  41487a:	f819 800a 	ldrb.w	r8, [r9, sl]
  41487e:	44ca      	add	sl, r9
  414880:	f89a a001 	ldrb.w	sl, [sl, #1]
  414884:	eb0a 2808 	add.w	r8, sl, r8, lsl #8
  414888:	fa1f f888 	uxth.w	r8, r8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  41488c:	f1cb 0b0a 	rsb	fp, fp, #10
  414890:	fa48 f80b 	asr.w	r8, r8, fp
  414894:	f008 083f 	and.w	r8, r8, #63	; 0x3f
  414898:	e7df      	b.n	41485a <decompress+0xa92>
                    ret = get_bits(rle_in, rle_rdp, rle_bpp);
  41489a:	4b58      	ldr	r3, [pc, #352]	; (4149fc <decompress+0xc34>)
  41489c:	f893 8000 	ldrb.w	r8, [r3]
    switch(len) {
  4148a0:	f108 33ff 	add.w	r3, r8, #4294967295
  4148a4:	2b07      	cmp	r3, #7
  4148a6:	d80b      	bhi.n	4148c0 <decompress+0xaf8>
  4148a8:	e8df f003 	tbb	[pc, r3]
  4148ac:	06041112 	.word	0x06041112
  4148b0:	080a0a0a 	.word	0x080a0a0a
            bit_mask = 0x7;
  4148b4:	2107      	movs	r1, #7
  4148b6:	e00b      	b.n	4148d0 <decompress+0xb08>
            bit_mask = 0xF;
  4148b8:	210f      	movs	r1, #15
  4148ba:	e009      	b.n	4148d0 <decompress+0xb08>
            bit_mask = 0xFF;
  4148bc:	21ff      	movs	r1, #255	; 0xff
  4148be:	e007      	b.n	4148d0 <decompress+0xb08>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  4148c0:	2101      	movs	r1, #1
  4148c2:	fa01 f108 	lsl.w	r1, r1, r8
  4148c6:	b2c9      	uxtb	r1, r1
  4148c8:	3901      	subs	r1, #1
  4148ca:	b2c9      	uxtb	r1, r1
  4148cc:	e000      	b.n	4148d0 <decompress+0xb08>
            bit_mask = 0x3;
  4148ce:	2103      	movs	r1, #3
    uint32_t byte_pos = bit_pos >> 3;
  4148d0:	ea4f 0ad2 	mov.w	sl, r2, lsr #3
    bit_pos = bit_pos & 0x7;
  4148d4:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
  4148d8:	eb03 0b08 	add.w	fp, r3, r8
  4148dc:	f1bb 0f07 	cmp.w	fp, #7
  4148e0:	d811      	bhi.n	414906 <decompress+0xb3e>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  4148e2:	f819 900a 	ldrb.w	r9, [r9, sl]
  4148e6:	425b      	negs	r3, r3
  4148e8:	eba3 0308 	sub.w	r3, r3, r8
  4148ec:	3308      	adds	r3, #8
  4148ee:	fa49 f303 	asr.w	r3, r9, r3
  4148f2:	400b      	ands	r3, r1
                    rle_prev_v = ret;
  4148f4:	493d      	ldr	r1, [pc, #244]	; (4149ec <decompress+0xc24>)
  4148f6:	700b      	strb	r3, [r1, #0]
                    rle_rdp += rle_bpp;
  4148f8:	4442      	add	r2, r8
  4148fa:	493d      	ldr	r1, [pc, #244]	; (4149f0 <decompress+0xc28>)
  4148fc:	600a      	str	r2, [r1, #0]
                    rle_state = RLE_STATE_SINGLE;
  4148fe:	2100      	movs	r1, #0
  414900:	4a3c      	ldr	r2, [pc, #240]	; (4149f4 <decompress+0xc2c>)
  414902:	7011      	strb	r1, [r2, #0]
  414904:	e707      	b.n	414716 <decompress+0x94e>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  414906:	f819 b00a 	ldrb.w	fp, [r9, sl]
  41490a:	44d1      	add	r9, sl
  41490c:	f899 9001 	ldrb.w	r9, [r9, #1]
  414910:	eb09 290b 	add.w	r9, r9, fp, lsl #8
  414914:	fa1f f989 	uxth.w	r9, r9
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  414918:	425b      	negs	r3, r3
  41491a:	eba3 0308 	sub.w	r3, r3, r8
  41491e:	3310      	adds	r3, #16
  414920:	fa49 f303 	asr.w	r3, r9, r3
  414924:	400b      	ands	r3, r1
  414926:	e7e5      	b.n	4148f4 <decompress+0xb2c>
            bit_mask = 0x1;
  414928:	2301      	movs	r3, #1
  41492a:	e00d      	b.n	414948 <decompress+0xb80>
            bit_mask = 0x7;
  41492c:	2307      	movs	r3, #7
  41492e:	e00b      	b.n	414948 <decompress+0xb80>
            bit_mask = 0xF;
  414930:	230f      	movs	r3, #15
  414932:	e009      	b.n	414948 <decompress+0xb80>
            bit_mask = 0xFF;
  414934:	23ff      	movs	r3, #255	; 0xff
  414936:	e007      	b.n	414948 <decompress+0xb80>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  414938:	2301      	movs	r3, #1
  41493a:	fa03 f308 	lsl.w	r3, r3, r8
  41493e:	b2db      	uxtb	r3, r3
  414940:	3b01      	subs	r3, #1
  414942:	b2db      	uxtb	r3, r3
  414944:	e000      	b.n	414948 <decompress+0xb80>
            bit_mask = 0x3;
  414946:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  414948:	ea4f 0ad2 	mov.w	sl, r2, lsr #3
    bit_pos = bit_pos & 0x7;
  41494c:	f002 0107 	and.w	r1, r2, #7
    if(bit_pos + len >= 8) {
  414950:	eb01 0b08 	add.w	fp, r1, r8
  414954:	f1bb 0f07 	cmp.w	fp, #7
  414958:	d811      	bhi.n	41497e <decompress+0xbb6>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  41495a:	f819 900a 	ldrb.w	r9, [r9, sl]
  41495e:	4249      	negs	r1, r1
  414960:	eba1 0108 	sub.w	r1, r1, r8
  414964:	3108      	adds	r1, #8
  414966:	fa49 f101 	asr.w	r1, r9, r1
  41496a:	400b      	ands	r3, r1
            rle_prev_v = ret;
  41496c:	491f      	ldr	r1, [pc, #124]	; (4149ec <decompress+0xc24>)
  41496e:	700b      	strb	r3, [r1, #0]
            rle_rdp += rle_bpp;
  414970:	4442      	add	r2, r8
  414972:	491f      	ldr	r1, [pc, #124]	; (4149f0 <decompress+0xc28>)
  414974:	600a      	str	r2, [r1, #0]
            rle_state = RLE_STATE_SINGLE;
  414976:	2100      	movs	r1, #0
  414978:	4a1e      	ldr	r2, [pc, #120]	; (4149f4 <decompress+0xc2c>)
  41497a:	7011      	strb	r1, [r2, #0]
  41497c:	e6cb      	b.n	414716 <decompress+0x94e>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  41497e:	f819 b00a 	ldrb.w	fp, [r9, sl]
  414982:	44d1      	add	r9, sl
  414984:	f899 9001 	ldrb.w	r9, [r9, #1]
  414988:	eb09 290b 	add.w	r9, r9, fp, lsl #8
  41498c:	fa1f f989 	uxth.w	r9, r9
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  414990:	4249      	negs	r1, r1
  414992:	eba1 0108 	sub.w	r1, r1, r8
  414996:	3110      	adds	r1, #16
  414998:	fa49 f901 	asr.w	r9, r9, r1
  41499c:	ea09 0303 	and.w	r3, r9, r3
  4149a0:	e7e4      	b.n	41496c <decompress+0xba4>
        ret = rle_prev_v;
  4149a2:	4b12      	ldr	r3, [pc, #72]	; (4149ec <decompress+0xc24>)
  4149a4:	781b      	ldrb	r3, [r3, #0]
        rle_cnt--;
  4149a6:	4916      	ldr	r1, [pc, #88]	; (414a00 <decompress+0xc38>)
  4149a8:	780a      	ldrb	r2, [r1, #0]
  4149aa:	3a01      	subs	r2, #1
  4149ac:	b2d2      	uxtb	r2, r2
  4149ae:	700a      	strb	r2, [r1, #0]
        if(rle_cnt == 0) {
  4149b0:	2a00      	cmp	r2, #0
  4149b2:	f47f aeb0 	bne.w	414716 <decompress+0x94e>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
  4149b6:	4b10      	ldr	r3, [pc, #64]	; (4149f8 <decompress+0xc30>)
  4149b8:	f8d3 a000 	ldr.w	sl, [r3]
  4149bc:	4b0c      	ldr	r3, [pc, #48]	; (4149f0 <decompress+0xc28>)
  4149be:	f8d3 9000 	ldr.w	r9, [r3]
  4149c2:	4b0e      	ldr	r3, [pc, #56]	; (4149fc <decompress+0xc34>)
  4149c4:	f893 8000 	ldrb.w	r8, [r3]
    switch(len) {
  4149c8:	f108 33ff 	add.w	r3, r8, #4294967295
  4149cc:	2b07      	cmp	r3, #7
  4149ce:	d819      	bhi.n	414a04 <decompress+0xc3c>
  4149d0:	e8df f003 	tbb	[pc, r3]
  4149d4:	08061f04 	.word	0x08061f04
  4149d8:	0a181818 	.word	0x0a181818
            bit_mask = 0x1;
  4149dc:	2301      	movs	r3, #1
  4149de:	e019      	b.n	414a14 <decompress+0xc4c>
            bit_mask = 0x7;
  4149e0:	2307      	movs	r3, #7
  4149e2:	e017      	b.n	414a14 <decompress+0xc4c>
            bit_mask = 0xF;
  4149e4:	230f      	movs	r3, #15
  4149e6:	e015      	b.n	414a14 <decompress+0xc4c>
            bit_mask = 0xFF;
  4149e8:	23ff      	movs	r3, #255	; 0xff
  4149ea:	e013      	b.n	414a14 <decompress+0xc4c>
  4149ec:	2040c7c4 	.word	0x2040c7c4
  4149f0:	2040c7c8 	.word	0x2040c7c8
  4149f4:	2040c7cc 	.word	0x2040c7cc
  4149f8:	2040c7c0 	.word	0x2040c7c0
  4149fc:	2040c7bc 	.word	0x2040c7bc
  414a00:	2040c7bd 	.word	0x2040c7bd
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  414a04:	2301      	movs	r3, #1
  414a06:	fa03 f308 	lsl.w	r3, r3, r8
  414a0a:	b2db      	uxtb	r3, r3
  414a0c:	3b01      	subs	r3, #1
  414a0e:	b2db      	uxtb	r3, r3
  414a10:	e000      	b.n	414a14 <decompress+0xc4c>
            bit_mask = 0x3;
  414a12:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  414a14:	ea4f 01d9 	mov.w	r1, r9, lsr #3
    bit_pos = bit_pos & 0x7;
  414a18:	f009 0207 	and.w	r2, r9, #7
    if(bit_pos + len >= 8) {
  414a1c:	eb02 0b08 	add.w	fp, r2, r8
  414a20:	f1bb 0f07 	cmp.w	fp, #7
  414a24:	d812      	bhi.n	414a4c <decompress+0xc84>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  414a26:	f81a a001 	ldrb.w	sl, [sl, r1]
  414a2a:	4251      	negs	r1, r2
  414a2c:	eba1 0108 	sub.w	r1, r1, r8
  414a30:	3108      	adds	r1, #8
  414a32:	fa4a f101 	asr.w	r1, sl, r1
  414a36:	400b      	ands	r3, r1
            rle_prev_v = ret;
  414a38:	4a42      	ldr	r2, [pc, #264]	; (414b44 <decompress+0xd7c>)
  414a3a:	7013      	strb	r3, [r2, #0]
            rle_rdp += rle_bpp;
  414a3c:	eb08 0209 	add.w	r2, r8, r9
  414a40:	4941      	ldr	r1, [pc, #260]	; (414b48 <decompress+0xd80>)
  414a42:	600a      	str	r2, [r1, #0]
            rle_state = RLE_STATE_SINGLE;
  414a44:	2100      	movs	r1, #0
  414a46:	4a41      	ldr	r2, [pc, #260]	; (414b4c <decompress+0xd84>)
  414a48:	7011      	strb	r1, [r2, #0]
  414a4a:	e664      	b.n	414716 <decompress+0x94e>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  414a4c:	f81a b001 	ldrb.w	fp, [sl, r1]
  414a50:	4451      	add	r1, sl
  414a52:	7849      	ldrb	r1, [r1, #1]
  414a54:	eb01 210b 	add.w	r1, r1, fp, lsl #8
  414a58:	b289      	uxth	r1, r1
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  414a5a:	4252      	negs	r2, r2
  414a5c:	eba2 0208 	sub.w	r2, r2, r8
  414a60:	3210      	adds	r2, #16
  414a62:	4111      	asrs	r1, r2
  414a64:	400b      	ands	r3, r1
  414a66:	e7e7      	b.n	414a38 <decompress+0xc70>
    for(i = 0; i < w; i++) {
  414a68:	f04f 0c00 	mov.w	ip, #0
  414a6c:	f8dd e008 	ldr.w	lr, [sp, #8]
  414a70:	e048      	b.n	414b04 <decompress+0xd3c>
        switch(val) {
  414a72:	2907      	cmp	r1, #7
  414a74:	d805      	bhi.n	414a82 <decompress+0xcba>
  414a76:	e8df f001 	tbb	[pc, r1]
  414a7a:	0723      	.short	0x0723
  414a7c:	17130f0b 	.word	0x17130f0b
  414a80:	1f1b      	.short	0x1f1b
        len = 4;
  414a82:	f04f 0804 	mov.w	r8, #4
  414a86:	e01e      	b.n	414ac6 <decompress+0xcfe>
  414a88:	f04f 0804 	mov.w	r8, #4
                val = 2;
  414a8c:	2102      	movs	r1, #2
  414a8e:	e01a      	b.n	414ac6 <decompress+0xcfe>
        len = 4;
  414a90:	f04f 0804 	mov.w	r8, #4
                val = 4;
  414a94:	4641      	mov	r1, r8
  414a96:	e016      	b.n	414ac6 <decompress+0xcfe>
        len = 4;
  414a98:	f04f 0804 	mov.w	r8, #4
                val = 6;
  414a9c:	2106      	movs	r1, #6
  414a9e:	e012      	b.n	414ac6 <decompress+0xcfe>
        len = 4;
  414aa0:	f04f 0804 	mov.w	r8, #4
                val = 9;
  414aa4:	2109      	movs	r1, #9
  414aa6:	e00e      	b.n	414ac6 <decompress+0xcfe>
        len = 4;
  414aa8:	f04f 0804 	mov.w	r8, #4
                val = 11;
  414aac:	210b      	movs	r1, #11
  414aae:	e00a      	b.n	414ac6 <decompress+0xcfe>
        len = 4;
  414ab0:	f04f 0804 	mov.w	r8, #4
                val = 13;
  414ab4:	210d      	movs	r1, #13
  414ab6:	e006      	b.n	414ac6 <decompress+0xcfe>
        len = 4;
  414ab8:	f04f 0804 	mov.w	r8, #4
                val = 15;
  414abc:	210f      	movs	r1, #15
  414abe:	e002      	b.n	414ac6 <decompress+0xcfe>
        len = 4;
  414ac0:	f04f 0804 	mov.w	r8, #4
                val = 0;
  414ac4:	2100      	movs	r1, #0
    bit_pos = bit_pos & 0x7;
  414ac6:	f000 0207 	and.w	r2, r0, #7
    bit_pos = 8 - bit_pos - len;
  414aca:	4252      	negs	r2, r2
  414acc:	eba2 0208 	sub.w	r2, r2, r8
  414ad0:	3208      	adds	r2, #8
    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  414ad2:	2301      	movs	r3, #1
  414ad4:	fa03 f308 	lsl.w	r3, r3, r8
  414ad8:	b2db      	uxtb	r3, r3
  414ada:	3b01      	subs	r3, #1
  414adc:	b2db      	uxtb	r3, r3
    out[byte_pos] &= ((~bit_mask) << bit_pos);
  414ade:	f3c0 08cf 	ubfx	r8, r0, #3, #16
  414ae2:	43db      	mvns	r3, r3
  414ae4:	4093      	lsls	r3, r2
  414ae6:	f816 9008 	ldrb.w	r9, [r6, r8]
  414aea:	ea09 0303 	and.w	r3, r9, r3
  414aee:	b25b      	sxtb	r3, r3
    out[byte_pos] |= (val << bit_pos);
  414af0:	fa01 f202 	lsl.w	r2, r1, r2
  414af4:	431a      	orrs	r2, r3
  414af6:	f806 2008 	strb.w	r2, [r6, r8]
                wrp += wr_size;
  414afa:	4470      	add	r0, lr
            for(x = 0; x < w; x++) {
  414afc:	f10c 0c01 	add.w	ip, ip, #1
  414b00:	fa0f fc8c 	sxth.w	ip, ip
  414b04:	45a4      	cmp	ip, r4
  414b06:	da05      	bge.n	414b14 <decompress+0xd4c>
                bits_write(out, wrp, line_buf1[x], bpp);
  414b08:	f815 100c 	ldrb.w	r1, [r5, ip]
    if(len == 3) {
  414b0c:	2f03      	cmp	r7, #3
  414b0e:	d0b0      	beq.n	414a72 <decompress+0xcaa>
  414b10:	46b8      	mov	r8, r7
  414b12:	e7d8      	b.n	414ac6 <decompress+0xcfe>
    for(y = 1; y < h; y++) {
  414b14:	9b00      	ldr	r3, [sp, #0]
  414b16:	3301      	adds	r3, #1
  414b18:	b21b      	sxth	r3, r3
  414b1a:	9300      	str	r3, [sp, #0]
  414b1c:	9b00      	ldr	r3, [sp, #0]
  414b1e:	9a01      	ldr	r2, [sp, #4]
  414b20:	4293      	cmp	r3, r2
  414b22:	da06      	bge.n	414b32 <decompress+0xd6a>
        if(prefilter) {
  414b24:	9b04      	ldr	r3, [sp, #16]
  414b26:	2b00      	cmp	r3, #0
  414b28:	f47f ad54 	bne.w	4145d4 <decompress+0x80c>
  414b2c:	f04f 0e00 	mov.w	lr, #0
  414b30:	e5f7      	b.n	414722 <decompress+0x95a>
    _lv_mem_buf_release(line_buf1);
  414b32:	4628      	mov	r0, r5
  414b34:	4c06      	ldr	r4, [pc, #24]	; (414b50 <decompress+0xd88>)
  414b36:	47a0      	blx	r4
    _lv_mem_buf_release(line_buf2);
  414b38:	9803      	ldr	r0, [sp, #12]
  414b3a:	47a0      	blx	r4
}
  414b3c:	b007      	add	sp, #28
  414b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  414b42:	bf00      	nop
  414b44:	2040c7c4 	.word	0x2040c7c4
  414b48:	2040c7c8 	.word	0x2040c7c8
  414b4c:	2040c7cc 	.word	0x2040c7cc
  414b50:	00416831 	.word	0x00416831

00414b54 <lv_font_get_bitmap_fmt_txt>:
{
  414b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  414b58:	b082      	sub	sp, #8
    if(unicode_letter == '\t') unicode_letter = ' ';
  414b5a:	2909      	cmp	r1, #9
  414b5c:	d01e      	beq.n	414b9c <lv_font_get_bitmap_fmt_txt+0x48>
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
  414b5e:	6905      	ldr	r5, [r0, #16]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
  414b60:	4b37      	ldr	r3, [pc, #220]	; (414c40 <lv_font_get_bitmap_fmt_txt+0xec>)
  414b62:	4798      	blx	r3
    if(!gid) return NULL;
  414b64:	4607      	mov	r7, r0
  414b66:	2800      	cmp	r0, #0
  414b68:	d063      	beq.n	414c32 <lv_font_get_bitmap_fmt_txt+0xde>
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
  414b6a:	686e      	ldr	r6, [r5, #4]
  414b6c:	eb06 08c0 	add.w	r8, r6, r0, lsl #3
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
  414b70:	7ceb      	ldrb	r3, [r5, #19]
  414b72:	f013 0fc0 	tst.w	r3, #192	; 0xc0
  414b76:	d013      	beq.n	414ba0 <lv_font_get_bitmap_fmt_txt+0x4c>
        uint32_t gsize = gdsc->box_w * gdsc->box_h;
  414b78:	f898 3004 	ldrb.w	r3, [r8, #4]
  414b7c:	f898 4005 	ldrb.w	r4, [r8, #5]
  414b80:	fb04 f403 	mul.w	r4, r4, r3
        if(gsize == 0) return NULL;
  414b84:	2c00      	cmp	r4, #0
  414b86:	d056      	beq.n	414c36 <lv_font_get_bitmap_fmt_txt+0xe2>
        switch(fdsc->bpp) {
  414b88:	7ceb      	ldrb	r3, [r5, #19]
  414b8a:	f3c3 0343 	ubfx	r3, r3, #1, #4
  414b8e:	3b01      	subs	r3, #1
  414b90:	2b03      	cmp	r3, #3
  414b92:	d80e      	bhi.n	414bb2 <lv_font_get_bitmap_fmt_txt+0x5e>
  414b94:	e8df f003 	tbb	[pc, r3]
  414b98:	44413e0b 	.word	0x44413e0b
    if(unicode_letter == '\t') unicode_letter = ' ';
  414b9c:	2120      	movs	r1, #32
  414b9e:	e7de      	b.n	414b5e <lv_font_get_bitmap_fmt_txt+0xa>
        return &fdsc->glyph_bitmap[gdsc->bitmap_index];
  414ba0:	6828      	ldr	r0, [r5, #0]
  414ba2:	f856 3037 	ldr.w	r3, [r6, r7, lsl #3]
  414ba6:	f3c3 0313 	ubfx	r3, r3, #0, #20
  414baa:	4418      	add	r0, r3
  414bac:	e02f      	b.n	414c0e <lv_font_get_bitmap_fmt_txt+0xba>
                buf_size = (gsize + 7) >> 3;
  414bae:	3407      	adds	r4, #7
  414bb0:	08e4      	lsrs	r4, r4, #3
        if(_lv_mem_get_size(LV_GC_ROOT(_lv_font_decompr_buf)) < buf_size) {
  414bb2:	4b24      	ldr	r3, [pc, #144]	; (414c44 <lv_font_get_bitmap_fmt_txt+0xf0>)
  414bb4:	6818      	ldr	r0, [r3, #0]
  414bb6:	4b24      	ldr	r3, [pc, #144]	; (414c48 <lv_font_get_bitmap_fmt_txt+0xf4>)
  414bb8:	4798      	blx	r3
  414bba:	4284      	cmp	r4, r0
  414bbc:	d90c      	bls.n	414bd8 <lv_font_get_bitmap_fmt_txt+0x84>
            uint8_t * tmp = lv_mem_realloc(LV_GC_ROOT(_lv_font_decompr_buf), buf_size);
  414bbe:	4621      	mov	r1, r4
  414bc0:	4b20      	ldr	r3, [pc, #128]	; (414c44 <lv_font_get_bitmap_fmt_txt+0xf0>)
  414bc2:	6818      	ldr	r0, [r3, #0]
  414bc4:	4b21      	ldr	r3, [pc, #132]	; (414c4c <lv_font_get_bitmap_fmt_txt+0xf8>)
  414bc6:	4798      	blx	r3
  414bc8:	4604      	mov	r4, r0
            LV_ASSERT_MEM(tmp);
  414bca:	4b21      	ldr	r3, [pc, #132]	; (414c50 <lv_font_get_bitmap_fmt_txt+0xfc>)
  414bcc:	4798      	blx	r3
  414bce:	b350      	cbz	r0, 414c26 <lv_font_get_bitmap_fmt_txt+0xd2>
            if(tmp == NULL) return NULL;
  414bd0:	2c00      	cmp	r4, #0
  414bd2:	d032      	beq.n	414c3a <lv_font_get_bitmap_fmt_txt+0xe6>
            LV_GC_ROOT(_lv_font_decompr_buf) = tmp;
  414bd4:	4b1b      	ldr	r3, [pc, #108]	; (414c44 <lv_font_get_bitmap_fmt_txt+0xf0>)
  414bd6:	601c      	str	r4, [r3, #0]
        bool prefilter = fdsc->bitmap_format == LV_FONT_FMT_TXT_COMPRESSED ? true : false;
  414bd8:	7ceb      	ldrb	r3, [r5, #19]
  414bda:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
  414bde:	2c40      	cmp	r4, #64	; 0x40
  414be0:	bf14      	ite	ne
  414be2:	2400      	movne	r4, #0
  414be4:	2401      	moveq	r4, #1
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
  414be6:	f8d5 e000 	ldr.w	lr, [r5]
  414bea:	f856 0037 	ldr.w	r0, [r6, r7, lsl #3]
  414bee:	f3c0 0013 	ubfx	r0, r0, #0, #20
                   (uint8_t)fdsc->bpp, prefilter);
  414bf2:	f3c3 0143 	ubfx	r1, r3, #1, #4
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
  414bf6:	f898 3005 	ldrb.w	r3, [r8, #5]
  414bfa:	f898 2004 	ldrb.w	r2, [r8, #4]
  414bfe:	4d11      	ldr	r5, [pc, #68]	; (414c44 <lv_font_get_bitmap_fmt_txt+0xf0>)
  414c00:	9401      	str	r4, [sp, #4]
  414c02:	9100      	str	r1, [sp, #0]
  414c04:	6829      	ldr	r1, [r5, #0]
  414c06:	4470      	add	r0, lr
  414c08:	4c12      	ldr	r4, [pc, #72]	; (414c54 <lv_font_get_bitmap_fmt_txt+0x100>)
  414c0a:	47a0      	blx	r4
        return LV_GC_ROOT(_lv_font_decompr_buf);
  414c0c:	6828      	ldr	r0, [r5, #0]
}
  414c0e:	b002      	add	sp, #8
  414c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                buf_size = (gsize + 3) >> 2;
  414c14:	3403      	adds	r4, #3
  414c16:	08a4      	lsrs	r4, r4, #2
                break;
  414c18:	e7cb      	b.n	414bb2 <lv_font_get_bitmap_fmt_txt+0x5e>
                buf_size = (gsize + 1) >> 1;
  414c1a:	3401      	adds	r4, #1
  414c1c:	0864      	lsrs	r4, r4, #1
                break;
  414c1e:	e7c8      	b.n	414bb2 <lv_font_get_bitmap_fmt_txt+0x5e>
                buf_size = (gsize + 1) >> 1;
  414c20:	3401      	adds	r4, #1
  414c22:	0864      	lsrs	r4, r4, #1
                break;
  414c24:	e7c5      	b.n	414bb2 <lv_font_get_bitmap_fmt_txt+0x5e>
            LV_ASSERT_MEM(tmp);
  414c26:	4622      	mov	r2, r4
  414c28:	2300      	movs	r3, #0
  414c2a:	480b      	ldr	r0, [pc, #44]	; (414c58 <lv_font_get_bitmap_fmt_txt+0x104>)
  414c2c:	490b      	ldr	r1, [pc, #44]	; (414c5c <lv_font_get_bitmap_fmt_txt+0x108>)
  414c2e:	4788      	blx	r1
  414c30:	e7fe      	b.n	414c30 <lv_font_get_bitmap_fmt_txt+0xdc>
    if(!gid) return NULL;
  414c32:	2000      	movs	r0, #0
  414c34:	e7eb      	b.n	414c0e <lv_font_get_bitmap_fmt_txt+0xba>
        if(gsize == 0) return NULL;
  414c36:	2000      	movs	r0, #0
  414c38:	e7e9      	b.n	414c0e <lv_font_get_bitmap_fmt_txt+0xba>
            if(tmp == NULL) return NULL;
  414c3a:	2000      	movs	r0, #0
  414c3c:	e7e7      	b.n	414c0e <lv_font_get_bitmap_fmt_txt+0xba>
  414c3e:	bf00      	nop
  414c40:	00413c3d 	.word	0x00413c3d
  414c44:	2043a280 	.word	0x2043a280
  414c48:	00416811 	.word	0x00416811
  414c4c:	00416a09 	.word	0x00416a09
  414c50:	00415f95 	.word	0x00415f95
  414c54:	00413dc9 	.word	0x00413dc9
  414c58:	0042c714 	.word	0x0042c714
  414c5c:	00415fa1 	.word	0x00415fa1

00414c60 <lv_font_get_glyph_dsc_fmt_txt>:
{
  414c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  414c64:	4607      	mov	r7, r0
  414c66:	460c      	mov	r4, r1
  414c68:	4699      	mov	r9, r3
    if(unicode_letter == '\t') {
  414c6a:	2a09      	cmp	r2, #9
  414c6c:	d034      	beq.n	414cd8 <lv_font_get_glyph_dsc_fmt_txt+0x78>
    bool is_tab = false;
  414c6e:	2500      	movs	r5, #0
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
  414c70:	693e      	ldr	r6, [r7, #16]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
  414c72:	4611      	mov	r1, r2
  414c74:	4638      	mov	r0, r7
  414c76:	4b20      	ldr	r3, [pc, #128]	; (414cf8 <lv_font_get_glyph_dsc_fmt_txt+0x98>)
  414c78:	4798      	blx	r3
    if(!gid) return false;
  414c7a:	4680      	mov	r8, r0
  414c7c:	2800      	cmp	r0, #0
  414c7e:	d035      	beq.n	414cec <lv_font_get_glyph_dsc_fmt_txt+0x8c>
    if(fdsc->kern_dsc) {
  414c80:	68f3      	ldr	r3, [r6, #12]
  414c82:	2b00      	cmp	r3, #0
  414c84:	d030      	beq.n	414ce8 <lv_font_get_glyph_dsc_fmt_txt+0x88>
        uint32_t gid_next = get_glyph_dsc_id(font, unicode_letter_next);
  414c86:	4649      	mov	r1, r9
  414c88:	4638      	mov	r0, r7
  414c8a:	4b1b      	ldr	r3, [pc, #108]	; (414cf8 <lv_font_get_glyph_dsc_fmt_txt+0x98>)
  414c8c:	4798      	blx	r3
        if(gid_next) {
  414c8e:	4602      	mov	r2, r0
  414c90:	bb28      	cbnz	r0, 414cde <lv_font_get_glyph_dsc_fmt_txt+0x7e>
    int8_t kvalue = 0;
  414c92:	2000      	movs	r0, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
  414c94:	6871      	ldr	r1, [r6, #4]
  414c96:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
  414c9a:	8a33      	ldrh	r3, [r6, #16]
  414c9c:	fb03 f300 	mul.w	r3, r3, r0
  414ca0:	111b      	asrs	r3, r3, #4
    uint32_t adv_w = gdsc->adv_w;
  414ca2:	8848      	ldrh	r0, [r1, #2]
  414ca4:	f3c0 100b 	ubfx	r0, r0, #4, #12
    if(is_tab) adv_w *= 2;
  414ca8:	b105      	cbz	r5, 414cac <lv_font_get_glyph_dsc_fmt_txt+0x4c>
  414caa:	0040      	lsls	r0, r0, #1
    adv_w += kv;
  414cac:	4403      	add	r3, r0
    adv_w  = (adv_w + (1 << 3)) >> 4;
  414cae:	3308      	adds	r3, #8
  414cb0:	091b      	lsrs	r3, r3, #4
    dsc_out->adv_w = adv_w;
  414cb2:	8023      	strh	r3, [r4, #0]
    dsc_out->box_h = gdsc->box_h;
  414cb4:	794b      	ldrb	r3, [r1, #5]
  414cb6:	80a3      	strh	r3, [r4, #4]
    dsc_out->box_w = gdsc->box_w;
  414cb8:	790a      	ldrb	r2, [r1, #4]
  414cba:	8062      	strh	r2, [r4, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
  414cbc:	f991 3006 	ldrsb.w	r3, [r1, #6]
  414cc0:	80e3      	strh	r3, [r4, #6]
    dsc_out->ofs_y = gdsc->ofs_y;
  414cc2:	f991 3007 	ldrsb.w	r3, [r1, #7]
  414cc6:	8123      	strh	r3, [r4, #8]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
  414cc8:	7cf3      	ldrb	r3, [r6, #19]
  414cca:	f3c3 0343 	ubfx	r3, r3, #1, #4
  414cce:	72a3      	strb	r3, [r4, #10]
    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
  414cd0:	b185      	cbz	r5, 414cf4 <lv_font_get_glyph_dsc_fmt_txt+0x94>
  414cd2:	0052      	lsls	r2, r2, #1
  414cd4:	8062      	strh	r2, [r4, #2]
  414cd6:	e00a      	b.n	414cee <lv_font_get_glyph_dsc_fmt_txt+0x8e>
        is_tab = true;
  414cd8:	2501      	movs	r5, #1
        unicode_letter = ' ';
  414cda:	2220      	movs	r2, #32
  414cdc:	e7c8      	b.n	414c70 <lv_font_get_glyph_dsc_fmt_txt+0x10>
            kvalue = get_kern_value(font, gid, gid_next);
  414cde:	4641      	mov	r1, r8
  414ce0:	4638      	mov	r0, r7
  414ce2:	4b06      	ldr	r3, [pc, #24]	; (414cfc <lv_font_get_glyph_dsc_fmt_txt+0x9c>)
  414ce4:	4798      	blx	r3
  414ce6:	e7d5      	b.n	414c94 <lv_font_get_glyph_dsc_fmt_txt+0x34>
    int8_t kvalue = 0;
  414ce8:	2000      	movs	r0, #0
  414cea:	e7d3      	b.n	414c94 <lv_font_get_glyph_dsc_fmt_txt+0x34>
    if(!gid) return false;
  414cec:	2500      	movs	r5, #0
}
  414cee:	4628      	mov	r0, r5
  414cf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return true;
  414cf4:	2501      	movs	r5, #1
  414cf6:	e7fa      	b.n	414cee <lv_font_get_glyph_dsc_fmt_txt+0x8e>
  414cf8:	00413c3d 	.word	0x00413c3d
  414cfc:	00413d15 	.word	0x00413d15

00414d00 <_lv_font_clean_up_fmt_txt>:
{
  414d00:	b508      	push	{r3, lr}
    if(LV_GC_ROOT(_lv_font_decompr_buf)) {
  414d02:	4b04      	ldr	r3, [pc, #16]	; (414d14 <_lv_font_clean_up_fmt_txt+0x14>)
  414d04:	6818      	ldr	r0, [r3, #0]
  414d06:	b120      	cbz	r0, 414d12 <_lv_font_clean_up_fmt_txt+0x12>
        lv_mem_free(LV_GC_ROOT(_lv_font_decompr_buf));
  414d08:	4b03      	ldr	r3, [pc, #12]	; (414d18 <_lv_font_clean_up_fmt_txt+0x18>)
  414d0a:	4798      	blx	r3
        LV_GC_ROOT(_lv_font_decompr_buf) = NULL;
  414d0c:	2200      	movs	r2, #0
  414d0e:	4b01      	ldr	r3, [pc, #4]	; (414d14 <_lv_font_clean_up_fmt_txt+0x14>)
  414d10:	601a      	str	r2, [r3, #0]
  414d12:	bd08      	pop	{r3, pc}
  414d14:	2043a280 	.word	0x2043a280
  414d18:	0041679d 	.word	0x0041679d

00414d1c <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
  414d1c:	b510      	push	{r4, lr}
  414d1e:	4604      	mov	r4, r0
    _lv_memset_00(driver, sizeof(lv_disp_drv_t));
  414d20:	2134      	movs	r1, #52	; 0x34
  414d22:	4b13      	ldr	r3, [pc, #76]	; (414d70 <lv_disp_drv_init+0x54>)
  414d24:	4798      	blx	r3

    driver->flush_cb         = NULL;
  414d26:	2300      	movs	r3, #0
  414d28:	60e3      	str	r3, [r4, #12]
    driver->hor_res          = LV_HOR_RES_MAX;
  414d2a:	f44f 72a0 	mov.w	r2, #320	; 0x140
  414d2e:	8022      	strh	r2, [r4, #0]
    driver->ver_res          = LV_VER_RES_MAX;
  414d30:	22f0      	movs	r2, #240	; 0xf0
  414d32:	8062      	strh	r2, [r4, #2]
    driver->buffer           = NULL;
  414d34:	6063      	str	r3, [r4, #4]
    driver->rotated          = 0;
  414d36:	7a22      	ldrb	r2, [r4, #8]
  414d38:	f363 0241 	bfi	r2, r3, #1, #1
  414d3c:	7222      	strb	r2, [r4, #8]
    driver->color_chroma_key = LV_COLOR_TRANSP;
  414d3e:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
  414d42:	f042 0207 	orr.w	r2, r2, #7
  414d46:	f363 02c7 	bfi	r2, r3, #3, #5
  414d4a:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
  414d4e:	22e0      	movs	r2, #224	; 0xe0
  414d50:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
    driver->dpi = LV_DPI;
  414d54:	8922      	ldrh	r2, [r4, #8]
  414d56:	2194      	movs	r1, #148	; 0x94
  414d58:	f361 028b 	bfi	r2, r1, #2, #10
  414d5c:	8122      	strh	r2, [r4, #8]

#if LV_ANTIALIAS
    driver->antialiasing = true;
  414d5e:	b2d2      	uxtb	r2, r2
  414d60:	f042 0201 	orr.w	r2, r2, #1
  414d64:	7222      	strb	r2, [r4, #8]
#if LV_COLOR_SCREEN_TRANSP
    driver->screen_transp = 1;
#endif

#if LV_USE_GPU
    driver->gpu_blend_cb = NULL;
  414d66:	62a3      	str	r3, [r4, #40]	; 0x28
    driver->gpu_fill_cb  = NULL;
  414d68:	62e3      	str	r3, [r4, #44]	; 0x2c

#if LV_USE_USER_DATA
    driver->user_data = NULL;
#endif

    driver->set_px_cb = NULL;
  414d6a:	6163      	str	r3, [r4, #20]
  414d6c:	bd10      	pop	{r4, pc}
  414d6e:	bf00      	nop
  414d70:	00416c0d 	.word	0x00416c0d

00414d74 <lv_disp_buf_init>:
 *             It lets LVGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_buf_init(lv_disp_buf_t * disp_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
  414d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  414d76:	4604      	mov	r4, r0
  414d78:	460d      	mov	r5, r1
  414d7a:	4617      	mov	r7, r2
  414d7c:	461e      	mov	r6, r3
    _lv_memset_00(disp_buf, sizeof(lv_disp_buf_t));
  414d7e:	2124      	movs	r1, #36	; 0x24
  414d80:	4b03      	ldr	r3, [pc, #12]	; (414d90 <lv_disp_buf_init+0x1c>)
  414d82:	4798      	blx	r3

    disp_buf->buf1    = buf1;
  414d84:	6025      	str	r5, [r4, #0]
    disp_buf->buf2    = buf2;
  414d86:	6067      	str	r7, [r4, #4]
    disp_buf->buf_act = disp_buf->buf1;
  414d88:	60a5      	str	r5, [r4, #8]
    disp_buf->size    = size_in_px_cnt;
  414d8a:	60e6      	str	r6, [r4, #12]
  414d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  414d8e:	bf00      	nop
  414d90:	00416c0d 	.word	0x00416c0d

00414d94 <lv_disp_get_default>:
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
}
  414d94:	4b01      	ldr	r3, [pc, #4]	; (414d9c <lv_disp_get_default+0x8>)
  414d96:	6818      	ldr	r0, [r3, #0]
  414d98:	4770      	bx	lr
  414d9a:	bf00      	nop
  414d9c:	2040c7d0 	.word	0x2040c7d0

00414da0 <lv_disp_get_hor_res>:
 * Get the horizontal resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
  414da0:	b508      	push	{r3, lr}
    if(disp == NULL) disp = lv_disp_get_default();
  414da2:	4603      	mov	r3, r0
  414da4:	b138      	cbz	r0, 414db6 <lv_disp_get_hor_res+0x16>

    if(disp == NULL)
  414da6:	b16b      	cbz	r3, 414dc4 <lv_disp_get_hor_res+0x24>
        return LV_HOR_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
  414da8:	7a1a      	ldrb	r2, [r3, #8]
  414daa:	f012 0f02 	tst.w	r2, #2
  414dae:	d006      	beq.n	414dbe <lv_disp_get_hor_res+0x1e>
  414db0:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
  414db4:	bd08      	pop	{r3, pc}
    if(disp == NULL) disp = lv_disp_get_default();
  414db6:	4b05      	ldr	r3, [pc, #20]	; (414dcc <lv_disp_get_hor_res+0x2c>)
  414db8:	4798      	blx	r3
  414dba:	4603      	mov	r3, r0
  414dbc:	e7f3      	b.n	414da6 <lv_disp_get_hor_res+0x6>
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
  414dbe:	f9b3 0000 	ldrsh.w	r0, [r3]
  414dc2:	bd08      	pop	{r3, pc}
        return LV_HOR_RES_MAX;
  414dc4:	f44f 70a0 	mov.w	r0, #320	; 0x140
}
  414dc8:	bd08      	pop	{r3, pc}
  414dca:	bf00      	nop
  414dcc:	00414d95 	.word	0x00414d95

00414dd0 <lv_disp_get_ver_res>:
 * Get the vertical resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
  414dd0:	b508      	push	{r3, lr}
    if(disp == NULL) disp = lv_disp_get_default();
  414dd2:	4603      	mov	r3, r0
  414dd4:	b138      	cbz	r0, 414de6 <lv_disp_get_ver_res+0x16>

    if(disp == NULL)
  414dd6:	b16b      	cbz	r3, 414df4 <lv_disp_get_ver_res+0x24>
        return LV_VER_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
  414dd8:	7a1a      	ldrb	r2, [r3, #8]
  414dda:	f012 0f02 	tst.w	r2, #2
  414dde:	d006      	beq.n	414dee <lv_disp_get_ver_res+0x1e>
  414de0:	f9b3 0000 	ldrsh.w	r0, [r3]
  414de4:	bd08      	pop	{r3, pc}
    if(disp == NULL) disp = lv_disp_get_default();
  414de6:	4b04      	ldr	r3, [pc, #16]	; (414df8 <lv_disp_get_ver_res+0x28>)
  414de8:	4798      	blx	r3
  414dea:	4603      	mov	r3, r0
  414dec:	e7f3      	b.n	414dd6 <lv_disp_get_ver_res+0x6>
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
  414dee:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
  414df2:	bd08      	pop	{r3, pc}
        return LV_VER_RES_MAX;
  414df4:	20f0      	movs	r0, #240	; 0xf0
}
  414df6:	bd08      	pop	{r3, pc}
  414df8:	00414d95 	.word	0x00414d95

00414dfc <lv_disp_get_dpi>:
 * Get the DPI of the display
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
lv_coord_t lv_disp_get_dpi(lv_disp_t * disp)
{
  414dfc:	b508      	push	{r3, lr}
    if(disp == NULL) disp = lv_disp_get_default();
  414dfe:	4603      	mov	r3, r0
  414e00:	b120      	cbz	r0, 414e0c <lv_disp_get_dpi+0x10>
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
  414e02:	b13b      	cbz	r3, 414e14 <lv_disp_get_dpi+0x18>
    return disp->driver.dpi;
  414e04:	8918      	ldrh	r0, [r3, #8]
  414e06:	f3c0 0089 	ubfx	r0, r0, #2, #10
  414e0a:	bd08      	pop	{r3, pc}
    if(disp == NULL) disp = lv_disp_get_default();
  414e0c:	4b02      	ldr	r3, [pc, #8]	; (414e18 <lv_disp_get_dpi+0x1c>)
  414e0e:	4798      	blx	r3
  414e10:	4603      	mov	r3, r0
  414e12:	e7f6      	b.n	414e02 <lv_disp_get_dpi+0x6>
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
  414e14:	2094      	movs	r0, #148	; 0x94
}
  414e16:	bd08      	pop	{r3, pc}
  414e18:	00414d95 	.word	0x00414d95

00414e1c <lv_disp_get_size_category>:
 * Get the size category of the display based on it's hor. res. and dpi.
 * @param disp pointer to a display (NULL to use the default display)
 * @return LV_DISP_SIZE_SMALL/MEDIUM/LARGE/EXTRA_LARGE
 */
lv_disp_size_t lv_disp_get_size_category(lv_disp_t * disp)
{
  414e1c:	b538      	push	{r3, r4, r5, lr}
    if(disp == NULL) disp = lv_disp_get_default();
  414e1e:	4605      	mov	r5, r0
  414e20:	b1a0      	cbz	r0, 414e4c <lv_disp_get_size_category+0x30>

    uint32_t w;
    if(disp == NULL) w = LV_HOR_RES_MAX;
  414e22:	b1bd      	cbz	r5, 414e54 <lv_disp_get_size_category+0x38>
    else w = lv_disp_get_hor_res(disp);
  414e24:	4628      	mov	r0, r5
  414e26:	4b10      	ldr	r3, [pc, #64]	; (414e68 <lv_disp_get_size_category+0x4c>)
  414e28:	4798      	blx	r3
  414e2a:	4604      	mov	r4, r0

    uint32_t dpi = lv_disp_get_dpi(disp);
  414e2c:	4628      	mov	r0, r5
  414e2e:	4b0f      	ldr	r3, [pc, #60]	; (414e6c <lv_disp_get_size_category+0x50>)
  414e30:	4798      	blx	r3

    w = w * 10 / dpi;
  414e32:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  414e36:	0063      	lsls	r3, r4, #1
  414e38:	fbb3 f0f0 	udiv	r0, r3, r0

    if(w < LV_DISP_SMALL_LIMIT) return LV_DISP_SIZE_SMALL;
  414e3c:	281d      	cmp	r0, #29
  414e3e:	d90c      	bls.n	414e5a <lv_disp_get_size_category+0x3e>
    if(w < LV_DISP_MEDIUM_LIMIT) return LV_DISP_SIZE_MEDIUM;
  414e40:	2831      	cmp	r0, #49	; 0x31
  414e42:	d90c      	bls.n	414e5e <lv_disp_get_size_category+0x42>
    if(w < LV_DISP_LARGE_LIMIT) return LV_DISP_SIZE_LARGE;
  414e44:	2845      	cmp	r0, #69	; 0x45
  414e46:	d80c      	bhi.n	414e62 <lv_disp_get_size_category+0x46>
  414e48:	2002      	movs	r0, #2
  414e4a:	bd38      	pop	{r3, r4, r5, pc}
    if(disp == NULL) disp = lv_disp_get_default();
  414e4c:	4b08      	ldr	r3, [pc, #32]	; (414e70 <lv_disp_get_size_category+0x54>)
  414e4e:	4798      	blx	r3
  414e50:	4605      	mov	r5, r0
  414e52:	e7e6      	b.n	414e22 <lv_disp_get_size_category+0x6>
    if(disp == NULL) w = LV_HOR_RES_MAX;
  414e54:	f44f 74a0 	mov.w	r4, #320	; 0x140
  414e58:	e7e8      	b.n	414e2c <lv_disp_get_size_category+0x10>
    if(w < LV_DISP_SMALL_LIMIT) return LV_DISP_SIZE_SMALL;
  414e5a:	2000      	movs	r0, #0
  414e5c:	bd38      	pop	{r3, r4, r5, pc}
    if(w < LV_DISP_MEDIUM_LIMIT) return LV_DISP_SIZE_MEDIUM;
  414e5e:	2001      	movs	r0, #1
  414e60:	bd38      	pop	{r3, r4, r5, pc}
    else return LV_DISP_SIZE_EXTRA_LARGE;
  414e62:	2003      	movs	r0, #3
}
  414e64:	bd38      	pop	{r3, r4, r5, pc}
  414e66:	bf00      	nop
  414e68:	00414da1 	.word	0x00414da1
  414e6c:	00414dfd 	.word	0x00414dfd
  414e70:	00414d95 	.word	0x00414d95

00414e74 <lv_disp_flush_ready>:
    if(disp_drv->screen_transp) {
        _lv_memset_00(disp_drv->buffer->buf_act, disp_drv->buffer->size * sizeof(lv_color32_t));
    }
#endif

    disp_drv->buffer->flushing = 0;
  414e74:	6842      	ldr	r2, [r0, #4]
  414e76:	2300      	movs	r3, #0
  414e78:	6193      	str	r3, [r2, #24]
    disp_drv->buffer->flushing_last = 0;
  414e7a:	6842      	ldr	r2, [r0, #4]
  414e7c:	61d3      	str	r3, [r2, #28]
  414e7e:	4770      	bx	lr

00414e80 <lv_disp_get_next>:
 * Get the next display.
 * @param disp pointer to the current display. NULL to initialize.
 * @return the next display or NULL if no more. Give the first display when the parameter is NULL
 */
lv_disp_t * lv_disp_get_next(lv_disp_t * disp)
{
  414e80:	b508      	push	{r3, lr}
    if(disp == NULL)
  414e82:	b120      	cbz	r0, 414e8e <lv_disp_get_next+0xe>
  414e84:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_disp_ll), disp);
  414e86:	4804      	ldr	r0, [pc, #16]	; (414e98 <lv_disp_get_next+0x18>)
  414e88:	4b04      	ldr	r3, [pc, #16]	; (414e9c <lv_disp_get_next+0x1c>)
  414e8a:	4798      	blx	r3
}
  414e8c:	bd08      	pop	{r3, pc}
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
  414e8e:	4802      	ldr	r0, [pc, #8]	; (414e98 <lv_disp_get_next+0x18>)
  414e90:	4b03      	ldr	r3, [pc, #12]	; (414ea0 <lv_disp_get_next+0x20>)
  414e92:	4798      	blx	r3
  414e94:	bd08      	pop	{r3, pc}
  414e96:	bf00      	nop
  414e98:	2043a290 	.word	0x2043a290
  414e9c:	004162b9 	.word	0x004162b9
  414ea0:	004162a5 	.word	0x004162a5

00414ea4 <lv_disp_get_buf>:
 * @return pointer to the internal buffers
 */
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)
{
    return disp->driver.buffer;
}
  414ea4:	6840      	ldr	r0, [r0, #4]
  414ea6:	4770      	bx	lr

00414ea8 <lv_disp_get_inv_buf_size>:
 * Get the number of areas in the buffer
 * @return number of invalid areas
 */
uint16_t lv_disp_get_inv_buf_size(lv_disp_t * disp)
{
    return disp->inv_p;
  414ea8:	f8b0 0182 	ldrh.w	r0, [r0, #386]	; 0x182
}
  414eac:	f3c0 0009 	ubfx	r0, r0, #0, #10
  414eb0:	4770      	bx	lr

00414eb2 <_lv_disp_pop_from_inv_buf>:
 * @param num number of areas to delete
 */
void _lv_disp_pop_from_inv_buf(lv_disp_t * disp, uint16_t num)
{

    if(disp->inv_p < num)
  414eb2:	f8b0 3182 	ldrh.w	r3, [r0, #386]	; 0x182
  414eb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
  414eba:	428b      	cmp	r3, r1
  414ebc:	db07      	blt.n	414ece <_lv_disp_pop_from_inv_buf+0x1c>
        disp->inv_p = 0;
    else
        disp->inv_p -= num;
  414ebe:	1a5b      	subs	r3, r3, r1
  414ec0:	f8b0 2182 	ldrh.w	r2, [r0, #386]	; 0x182
  414ec4:	f363 0209 	bfi	r2, r3, #0, #10
  414ec8:	f8a0 2182 	strh.w	r2, [r0, #386]	; 0x182
  414ecc:	4770      	bx	lr
        disp->inv_p = 0;
  414ece:	f8b0 3182 	ldrh.w	r3, [r0, #386]	; 0x182
  414ed2:	f36f 0309 	bfc	r3, #0, #10
  414ed6:	f8a0 3182 	strh.w	r3, [r0, #386]	; 0x182
  414eda:	4770      	bx	lr

00414edc <lv_disp_is_double_buf>:
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_double_buf(lv_disp_t * disp)
{
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
  414edc:	6843      	ldr	r3, [r0, #4]
  414ede:	681a      	ldr	r2, [r3, #0]
  414ee0:	b12a      	cbz	r2, 414eee <lv_disp_is_double_buf+0x12>
  414ee2:	685b      	ldr	r3, [r3, #4]
  414ee4:	b10b      	cbz	r3, 414eea <lv_disp_is_double_buf+0xe>
        return true;
  414ee6:	2001      	movs	r0, #1
    else
        return false;
}
  414ee8:	4770      	bx	lr
        return false;
  414eea:	2000      	movs	r0, #0
  414eec:	4770      	bx	lr
  414eee:	2000      	movs	r0, #0
  414ef0:	4770      	bx	lr
	...

00414ef4 <lv_disp_is_true_double_buf>:
 * `size` is screen sized)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_true_double_buf(lv_disp_t * disp)
{
  414ef4:	b538      	push	{r3, r4, r5, lr}
  414ef6:	4605      	mov	r5, r0
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
  414ef8:	f9b0 4000 	ldrsh.w	r4, [r0]
  414efc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  414f00:	fb03 f404 	mul.w	r4, r3, r4

    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
  414f04:	4b06      	ldr	r3, [pc, #24]	; (414f20 <lv_disp_is_true_double_buf+0x2c>)
  414f06:	4798      	blx	r3
  414f08:	b130      	cbz	r0, 414f18 <lv_disp_is_true_double_buf+0x24>
  414f0a:	4603      	mov	r3, r0
  414f0c:	686a      	ldr	r2, [r5, #4]
  414f0e:	68d2      	ldr	r2, [r2, #12]
  414f10:	4294      	cmp	r4, r2
  414f12:	d002      	beq.n	414f1a <lv_disp_is_true_double_buf+0x26>
        return true;
    }
    else {
        return false;
  414f14:	2300      	movs	r3, #0
  414f16:	e000      	b.n	414f1a <lv_disp_is_true_double_buf+0x26>
  414f18:	2300      	movs	r3, #0
    }
}
  414f1a:	4618      	mov	r0, r3
  414f1c:	bd38      	pop	{r3, r4, r5, pc}
  414f1e:	bf00      	nop
  414f20:	00414edd 	.word	0x00414edd

00414f24 <lv_disp_drv_register>:
{
  414f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  414f26:	4605      	mov	r5, r0
    lv_disp_t * disp = _lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
  414f28:	483b      	ldr	r0, [pc, #236]	; (415018 <lv_disp_drv_register+0xf4>)
  414f2a:	4b3c      	ldr	r3, [pc, #240]	; (41501c <lv_disp_drv_register+0xf8>)
  414f2c:	4798      	blx	r3
    if(!disp) {
  414f2e:	4604      	mov	r4, r0
  414f30:	2800      	cmp	r0, #0
  414f32:	d05c      	beq.n	414fee <lv_disp_drv_register+0xca>
    _lv_memset_00(disp, sizeof(lv_disp_t));
  414f34:	f44f 71c4 	mov.w	r1, #392	; 0x188
  414f38:	4b39      	ldr	r3, [pc, #228]	; (415020 <lv_disp_drv_register+0xfc>)
  414f3a:	4798      	blx	r3
    _lv_memcpy(&disp->driver, driver, sizeof(lv_disp_drv_t));
  414f3c:	2234      	movs	r2, #52	; 0x34
  414f3e:	4629      	mov	r1, r5
  414f40:	4620      	mov	r0, r4
  414f42:	4b38      	ldr	r3, [pc, #224]	; (415024 <lv_disp_drv_register+0x100>)
  414f44:	4798      	blx	r3
    _lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
  414f46:	214c      	movs	r1, #76	; 0x4c
  414f48:	f104 0038 	add.w	r0, r4, #56	; 0x38
  414f4c:	4b36      	ldr	r3, [pc, #216]	; (415028 <lv_disp_drv_register+0x104>)
  414f4e:	4798      	blx	r3
    disp->last_activity_time = 0;
  414f50:	2300      	movs	r3, #0
  414f52:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
    if(disp_def == NULL) disp_def = disp;
  414f56:	4b35      	ldr	r3, [pc, #212]	; (41502c <lv_disp_drv_register+0x108>)
  414f58:	681b      	ldr	r3, [r3, #0]
  414f5a:	2b00      	cmp	r3, #0
  414f5c:	d051      	beq.n	415002 <lv_disp_drv_register+0xde>
    lv_disp_t * disp_def_tmp = disp_def;
  414f5e:	4b33      	ldr	r3, [pc, #204]	; (41502c <lv_disp_drv_register+0x108>)
  414f60:	681f      	ldr	r7, [r3, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
  414f62:	601c      	str	r4, [r3, #0]
    disp->refr_task = lv_task_create(_lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_REFR_TASK_PRIO, disp);
  414f64:	4623      	mov	r3, r4
  414f66:	2203      	movs	r2, #3
  414f68:	211e      	movs	r1, #30
  414f6a:	4831      	ldr	r0, [pc, #196]	; (415030 <lv_disp_drv_register+0x10c>)
  414f6c:	4d31      	ldr	r5, [pc, #196]	; (415034 <lv_disp_drv_register+0x110>)
  414f6e:	47a8      	blx	r5
  414f70:	6360      	str	r0, [r4, #52]	; 0x34
    LV_ASSERT_MEM(disp->refr_task);
  414f72:	4b31      	ldr	r3, [pc, #196]	; (415038 <lv_disp_drv_register+0x114>)
  414f74:	4798      	blx	r3
  414f76:	2800      	cmp	r0, #0
  414f78:	d046      	beq.n	415008 <lv_disp_drv_register+0xe4>
    if(disp->refr_task == NULL) return NULL;
  414f7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
  414f7c:	2b00      	cmp	r3, #0
  414f7e:	d049      	beq.n	415014 <lv_disp_drv_register+0xf0>
    disp->inv_p = 0;
  414f80:	f8b4 3182 	ldrh.w	r3, [r4, #386]	; 0x182
  414f84:	f36f 0309 	bfc	r3, #0, #10
  414f88:	f8a4 3182 	strh.w	r3, [r4, #386]	; 0x182
    disp->last_activity_time = 0;
  414f8c:	2500      	movs	r5, #0
  414f8e:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
    disp->bg_color = LV_COLOR_WHITE;
  414f92:	4b2a      	ldr	r3, [pc, #168]	; (41503c <lv_disp_drv_register+0x118>)
  414f94:	881b      	ldrh	r3, [r3, #0]
  414f96:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    disp->bg_img = NULL;
  414f9a:	65e5      	str	r5, [r4, #92]	; 0x5c
    disp->bg_opa = LV_OPA_COVER;
  414f9c:	23ff      	movs	r3, #255	; 0xff
  414f9e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    disp->prev_scr  = NULL;
  414fa2:	64a5      	str	r5, [r4, #72]	; 0x48
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
  414fa4:	4629      	mov	r1, r5
  414fa6:	4628      	mov	r0, r5
  414fa8:	4e25      	ldr	r6, [pc, #148]	; (415040 <lv_disp_drv_register+0x11c>)
  414faa:	47b0      	blx	r6
  414fac:	6460      	str	r0, [r4, #68]	; 0x44
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
  414fae:	4629      	mov	r1, r5
  414fb0:	4628      	mov	r0, r5
  414fb2:	47b0      	blx	r6
  414fb4:	6520      	str	r0, [r4, #80]	; 0x50
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
  414fb6:	4629      	mov	r1, r5
  414fb8:	4628      	mov	r0, r5
  414fba:	47b0      	blx	r6
  414fbc:	6560      	str	r0, [r4, #84]	; 0x54
    lv_obj_reset_style_list(disp->top_layer, LV_OBJ_PART_MAIN);
  414fbe:	4629      	mov	r1, r5
  414fc0:	6d20      	ldr	r0, [r4, #80]	; 0x50
  414fc2:	4e20      	ldr	r6, [pc, #128]	; (415044 <lv_disp_drv_register+0x120>)
  414fc4:	47b0      	blx	r6
    lv_obj_reset_style_list(disp->sys_layer, LV_OBJ_PART_MAIN);
  414fc6:	4629      	mov	r1, r5
  414fc8:	6d60      	ldr	r0, [r4, #84]	; 0x54
  414fca:	47b0      	blx	r6
    lv_obj_set_click(disp->top_layer, false);
  414fcc:	4629      	mov	r1, r5
  414fce:	6d20      	ldr	r0, [r4, #80]	; 0x50
  414fd0:	4e1d      	ldr	r6, [pc, #116]	; (415048 <lv_disp_drv_register+0x124>)
  414fd2:	47b0      	blx	r6
    lv_obj_set_click(disp->sys_layer, false);
  414fd4:	4629      	mov	r1, r5
  414fd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
  414fd8:	47b0      	blx	r6
    lv_obj_invalidate(disp->act_scr);
  414fda:	6c60      	ldr	r0, [r4, #68]	; 0x44
  414fdc:	4b1b      	ldr	r3, [pc, #108]	; (41504c <lv_disp_drv_register+0x128>)
  414fde:	4798      	blx	r3
    disp_def = disp_def_tmp; /*Revert the default display*/
  414fe0:	4b12      	ldr	r3, [pc, #72]	; (41502c <lv_disp_drv_register+0x108>)
  414fe2:	601f      	str	r7, [r3, #0]
    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
  414fe4:	6b60      	ldr	r0, [r4, #52]	; 0x34
  414fe6:	4b1a      	ldr	r3, [pc, #104]	; (415050 <lv_disp_drv_register+0x12c>)
  414fe8:	4798      	blx	r3
}
  414fea:	4620      	mov	r0, r4
  414fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        LV_ASSERT_MEM(disp);
  414fee:	4b12      	ldr	r3, [pc, #72]	; (415038 <lv_disp_drv_register+0x114>)
  414ff0:	4798      	blx	r3
  414ff2:	2800      	cmp	r0, #0
  414ff4:	d1f9      	bne.n	414fea <lv_disp_drv_register+0xc6>
  414ff6:	4622      	mov	r2, r4
  414ff8:	2300      	movs	r3, #0
  414ffa:	4816      	ldr	r0, [pc, #88]	; (415054 <lv_disp_drv_register+0x130>)
  414ffc:	4916      	ldr	r1, [pc, #88]	; (415058 <lv_disp_drv_register+0x134>)
  414ffe:	4788      	blx	r1
  415000:	e7fe      	b.n	415000 <lv_disp_drv_register+0xdc>
    if(disp_def == NULL) disp_def = disp;
  415002:	4b0a      	ldr	r3, [pc, #40]	; (41502c <lv_disp_drv_register+0x108>)
  415004:	601c      	str	r4, [r3, #0]
  415006:	e7aa      	b.n	414f5e <lv_disp_drv_register+0x3a>
    LV_ASSERT_MEM(disp->refr_task);
  415008:	6b62      	ldr	r2, [r4, #52]	; 0x34
  41500a:	2300      	movs	r3, #0
  41500c:	4811      	ldr	r0, [pc, #68]	; (415054 <lv_disp_drv_register+0x130>)
  41500e:	4912      	ldr	r1, [pc, #72]	; (415058 <lv_disp_drv_register+0x134>)
  415010:	4788      	blx	r1
  415012:	e7fe      	b.n	415012 <lv_disp_drv_register+0xee>
    if(disp->refr_task == NULL) return NULL;
  415014:	2400      	movs	r4, #0
  415016:	e7e8      	b.n	414fea <lv_disp_drv_register+0xc6>
  415018:	2043a290 	.word	0x2043a290
  41501c:	0041620d 	.word	0x0041620d
  415020:	00416c0d 	.word	0x00416c0d
  415024:	004168e9 	.word	0x004168e9
  415028:	004161fb 	.word	0x004161fb
  41502c:	2040c7d0 	.word	0x2040c7d0
  415030:	00409cd1 	.word	0x00409cd1
  415034:	00417645 	.word	0x00417645
  415038:	00415f95 	.word	0x00415f95
  41503c:	0042fcc4 	.word	0x0042fcc4
  415040:	00406855 	.word	0x00406855
  415044:	004079e1 	.word	0x004079e1
  415048:	00405751 	.word	0x00405751
  41504c:	00405f99 	.word	0x00405f99
  415050:	00417a0d 	.word	0x00417a0d
  415054:	0042c714 	.word	0x0042c714
  415058:	00415fa1 	.word	0x00415fa1

0041505c <lv_indev_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_indev_drv_init(lv_indev_drv_t * driver)
{
  41505c:	b510      	push	{r4, lr}
  41505e:	4604      	mov	r4, r0
    _lv_memset_00(driver, sizeof(lv_indev_drv_t));
  415060:	211c      	movs	r1, #28
  415062:	4b08      	ldr	r3, [pc, #32]	; (415084 <lv_indev_drv_init+0x28>)
  415064:	4798      	blx	r3

    driver->type                 = LV_INDEV_TYPE_NONE;
  415066:	2300      	movs	r3, #0
  415068:	7023      	strb	r3, [r4, #0]
    driver->drag_limit           = LV_INDEV_DEF_DRAG_LIMIT;
  41506a:	230a      	movs	r3, #10
  41506c:	7523      	strb	r3, [r4, #20]
    driver->drag_throw           = LV_INDEV_DEF_DRAG_THROW;
  41506e:	7563      	strb	r3, [r4, #21]
    driver->long_press_time      = LV_INDEV_DEF_LONG_PRESS_TIME;
  415070:	f44f 73c8 	mov.w	r3, #400	; 0x190
  415074:	8323      	strh	r3, [r4, #24]
    driver->long_press_rep_time  = LV_INDEV_DEF_LONG_PRESS_REP_TIME;
  415076:	2364      	movs	r3, #100	; 0x64
  415078:	8363      	strh	r3, [r4, #26]
    driver->gesture_limit        = LV_INDEV_DEF_GESTURE_LIMIT;
  41507a:	2332      	movs	r3, #50	; 0x32
  41507c:	75e3      	strb	r3, [r4, #23]
    driver->gesture_min_velocity = LV_INDEV_DEF_GESTURE_MIN_VELOCITY;
  41507e:	2303      	movs	r3, #3
  415080:	75a3      	strb	r3, [r4, #22]
  415082:	bd10      	pop	{r4, pc}
  415084:	00416c0d 	.word	0x00416c0d

00415088 <lv_indev_drv_register>:
 * Register an initialized input device driver.
 * @param driver pointer to an initialized 'lv_indev_drv_t' variable (can be local variable)
 * @return pointer to the new input device or NULL on error
 */
lv_indev_t * lv_indev_drv_register(lv_indev_drv_t * driver)
{
  415088:	b538      	push	{r3, r4, r5, lr}
  41508a:	4605      	mov	r5, r0

    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
  41508c:	68c3      	ldr	r3, [r0, #12]
  41508e:	b313      	cbz	r3, 4150d6 <lv_indev_drv_register+0x4e>

    if(driver->disp == NULL) {
  415090:	68eb      	ldr	r3, [r5, #12]
  415092:	2b00      	cmp	r3, #0
  415094:	d02d      	beq.n	4150f2 <lv_indev_drv_register+0x6a>
        LV_LOG_WARN("lv_indev_drv_register: no display registered hence can't attach the indev to "
                    "a display");
        return NULL;
    }

    lv_indev_t * indev = _lv_ll_ins_head(&LV_GC_ROOT(_lv_indev_ll));
  415096:	4818      	ldr	r0, [pc, #96]	; (4150f8 <lv_indev_drv_register+0x70>)
  415098:	4b18      	ldr	r3, [pc, #96]	; (4150fc <lv_indev_drv_register+0x74>)
  41509a:	4798      	blx	r3
    if(!indev) {
  41509c:	4604      	mov	r4, r0
  41509e:	b1f0      	cbz	r0, 4150de <lv_indev_drv_register+0x56>
        LV_ASSERT_MEM(indev);
        return NULL;
    }

    _lv_memset_00(indev, sizeof(lv_indev_t));
  4150a0:	2160      	movs	r1, #96	; 0x60
  4150a2:	4b17      	ldr	r3, [pc, #92]	; (415100 <lv_indev_drv_register+0x78>)
  4150a4:	4798      	blx	r3
    _lv_memcpy(&indev->driver, driver, sizeof(lv_indev_drv_t));
  4150a6:	221c      	movs	r2, #28
  4150a8:	4629      	mov	r1, r5
  4150aa:	4620      	mov	r0, r4
  4150ac:	4b15      	ldr	r3, [pc, #84]	; (415104 <lv_indev_drv_register+0x7c>)
  4150ae:	4798      	blx	r3

    indev->proc.reset_query = 1;
  4150b0:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  4150b4:	f043 0302 	orr.w	r3, r3, #2
  4150b8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    indev->cursor           = NULL;
  4150bc:	2300      	movs	r3, #0
  4150be:	6563      	str	r3, [r4, #84]	; 0x54
    indev->group            = NULL;
  4150c0:	65a3      	str	r3, [r4, #88]	; 0x58
    indev->btn_points       = NULL;
  4150c2:	65e3      	str	r3, [r4, #92]	; 0x5c

    indev->driver.read_task = lv_task_create(_lv_indev_read_task, LV_INDEV_DEF_READ_PERIOD, LV_TASK_PRIO_HIGH, indev);
  4150c4:	4623      	mov	r3, r4
  4150c6:	2204      	movs	r2, #4
  4150c8:	211e      	movs	r1, #30
  4150ca:	480f      	ldr	r0, [pc, #60]	; (415108 <lv_indev_drv_register+0x80>)
  4150cc:	4d0f      	ldr	r5, [pc, #60]	; (41510c <lv_indev_drv_register+0x84>)
  4150ce:	47a8      	blx	r5
  4150d0:	6120      	str	r0, [r4, #16]

    return indev;
}
  4150d2:	4620      	mov	r0, r4
  4150d4:	bd38      	pop	{r3, r4, r5, pc}
    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
  4150d6:	4b0e      	ldr	r3, [pc, #56]	; (415110 <lv_indev_drv_register+0x88>)
  4150d8:	4798      	blx	r3
  4150da:	60e8      	str	r0, [r5, #12]
  4150dc:	e7d8      	b.n	415090 <lv_indev_drv_register+0x8>
        LV_ASSERT_MEM(indev);
  4150de:	4b0d      	ldr	r3, [pc, #52]	; (415114 <lv_indev_drv_register+0x8c>)
  4150e0:	4798      	blx	r3
  4150e2:	2800      	cmp	r0, #0
  4150e4:	d1f5      	bne.n	4150d2 <lv_indev_drv_register+0x4a>
  4150e6:	4622      	mov	r2, r4
  4150e8:	2300      	movs	r3, #0
  4150ea:	480b      	ldr	r0, [pc, #44]	; (415118 <lv_indev_drv_register+0x90>)
  4150ec:	490b      	ldr	r1, [pc, #44]	; (41511c <lv_indev_drv_register+0x94>)
  4150ee:	4788      	blx	r1
  4150f0:	e7fe      	b.n	4150f0 <lv_indev_drv_register+0x68>
        return NULL;
  4150f2:	2400      	movs	r4, #0
  4150f4:	e7ed      	b.n	4150d2 <lv_indev_drv_register+0x4a>
  4150f6:	bf00      	nop
  4150f8:	2043a284 	.word	0x2043a284
  4150fc:	0041620d 	.word	0x0041620d
  415100:	00416c0d 	.word	0x00416c0d
  415104:	004168e9 	.word	0x004168e9
  415108:	004052b9 	.word	0x004052b9
  41510c:	00417645 	.word	0x00417645
  415110:	00414d95 	.word	0x00414d95
  415114:	00415f95 	.word	0x00415f95
  415118:	0042c714 	.word	0x0042c714
  41511c:	00415fa1 	.word	0x00415fa1

00415120 <lv_indev_get_next>:
 * @param indev pointer to the current input device. NULL to initialize.
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
  415120:	b508      	push	{r3, lr}
    if(indev == NULL)
  415122:	b120      	cbz	r0, 41512e <lv_indev_get_next+0xe>
  415124:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
  415126:	4804      	ldr	r0, [pc, #16]	; (415138 <lv_indev_get_next+0x18>)
  415128:	4b04      	ldr	r3, [pc, #16]	; (41513c <lv_indev_get_next+0x1c>)
  41512a:	4798      	blx	r3
}
  41512c:	bd08      	pop	{r3, pc}
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
  41512e:	4802      	ldr	r0, [pc, #8]	; (415138 <lv_indev_get_next+0x18>)
  415130:	4b03      	ldr	r3, [pc, #12]	; (415140 <lv_indev_get_next+0x20>)
  415132:	4798      	blx	r3
  415134:	bd08      	pop	{r3, pc}
  415136:	bf00      	nop
  415138:	2043a284 	.word	0x2043a284
  41513c:	004162b9 	.word	0x004162b9
  415140:	004162a5 	.word	0x004162a5

00415144 <_lv_indev_read>:
 * @param indev pointer to an input device
 * @param data input device will write its data here
 * @return false: no more data; true: there more data to read (buffered)
 */
bool _lv_indev_read(lv_indev_t * indev, lv_indev_data_t * data)
{
  415144:	b538      	push	{r3, r4, r5, lr}
  415146:	4604      	mov	r4, r0
  415148:	460d      	mov	r5, r1
    bool cont = false;

    _lv_memset_00(data, sizeof(lv_indev_data_t));
  41514a:	2110      	movs	r1, #16
  41514c:	4628      	mov	r0, r5
  41514e:	4b10      	ldr	r3, [pc, #64]	; (415190 <_lv_indev_read+0x4c>)
  415150:	4798      	blx	r3

    /* For touchpad sometimes users don't the last pressed coordinate on release.
     * So be sure a coordinates are initialized to the last point */
    if(indev->driver.type == LV_INDEV_TYPE_POINTER) {
  415152:	7823      	ldrb	r3, [r4, #0]
  415154:	2b01      	cmp	r3, #1
  415156:	d009      	beq.n	41516c <_lv_indev_read+0x28>
        data->point.x = indev->proc.types.pointer.act_point.x;
        data->point.y = indev->proc.types.pointer.act_point.y;
    }
    /*Similarly set at least the last key in case of the user doesn't set it on release*/
    else if(indev->driver.type == LV_INDEV_TYPE_KEYPAD) {
  415158:	2b02      	cmp	r3, #2
  41515a:	d00e      	beq.n	41517a <_lv_indev_read+0x36>
        data->key = indev->proc.types.keypad.last_key;
    }
    /*For compatibility assume that used button was enter (encoder push) */
    else if(indev->driver.type == LV_INDEV_TYPE_ENCODER) {
  41515c:	2b04      	cmp	r3, #4
  41515e:	d00f      	beq.n	415180 <_lv_indev_read+0x3c>
        data->key = LV_KEY_ENTER;
        data->enc_diff = 0;
    }

    if(indev->driver.read_cb) {
  415160:	6863      	ldr	r3, [r4, #4]
  415162:	b193      	cbz	r3, 41518a <_lv_indev_read+0x46>
        LV_LOG_TRACE("indev read started");
        cont = indev->driver.read_cb(&indev->driver, data);
  415164:	4629      	mov	r1, r5
  415166:	4620      	mov	r0, r4
  415168:	4798      	blx	r3
  41516a:	bd38      	pop	{r3, r4, r5, pc}
        data->point.x = indev->proc.types.pointer.act_point.x;
  41516c:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
  415170:	802b      	strh	r3, [r5, #0]
        data->point.y = indev->proc.types.pointer.act_point.y;
  415172:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
  415176:	806b      	strh	r3, [r5, #2]
  415178:	e7f2      	b.n	415160 <_lv_indev_read+0x1c>
        data->key = indev->proc.types.keypad.last_key;
  41517a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  41517c:	606b      	str	r3, [r5, #4]
  41517e:	e7ef      	b.n	415160 <_lv_indev_read+0x1c>
        data->key = LV_KEY_ENTER;
  415180:	230a      	movs	r3, #10
  415182:	606b      	str	r3, [r5, #4]
        data->enc_diff = 0;
  415184:	2300      	movs	r3, #0
  415186:	81ab      	strh	r3, [r5, #12]
  415188:	e7ea      	b.n	415160 <_lv_indev_read+0x1c>
    bool cont = false;
  41518a:	2000      	movs	r0, #0
    else {
        LV_LOG_WARN("indev function registered");
    }

    return cont;
}
  41518c:	bd38      	pop	{r3, r4, r5, pc}
  41518e:	bf00      	nop
  415190:	00416c0d 	.word	0x00416c0d

00415194 <lv_tick_inc>:
  415194:	2200      	movs	r2, #0
  415196:	4b03      	ldr	r3, [pc, #12]	; (4151a4 <lv_tick_inc+0x10>)
  415198:	701a      	strb	r2, [r3, #0]
  41519a:	4a03      	ldr	r2, [pc, #12]	; (4151a8 <lv_tick_inc+0x14>)
  41519c:	6813      	ldr	r3, [r2, #0]
  41519e:	4418      	add	r0, r3
  4151a0:	6010      	str	r0, [r2, #0]
  4151a2:	4770      	bx	lr
  4151a4:	2040c7d8 	.word	0x2040c7d8
  4151a8:	2040c7d4 	.word	0x2040c7d4

004151ac <lv_tick_get>:
  4151ac:	4b04      	ldr	r3, [pc, #16]	; (4151c0 <lv_tick_get+0x14>)
  4151ae:	2201      	movs	r2, #1
  4151b0:	701a      	strb	r2, [r3, #0]
  4151b2:	4a04      	ldr	r2, [pc, #16]	; (4151c4 <lv_tick_get+0x18>)
  4151b4:	6810      	ldr	r0, [r2, #0]
  4151b6:	781b      	ldrb	r3, [r3, #0]
  4151b8:	2b00      	cmp	r3, #0
  4151ba:	d0f7      	beq.n	4151ac <lv_tick_get>
  4151bc:	4770      	bx	lr
  4151be:	bf00      	nop
  4151c0:	2040c7d8 	.word	0x2040c7d8
  4151c4:	2040c7d4 	.word	0x2040c7d4

004151c8 <lv_tick_elaps>:
  4151c8:	b510      	push	{r4, lr}
  4151ca:	4604      	mov	r4, r0
  4151cc:	4b03      	ldr	r3, [pc, #12]	; (4151dc <lv_tick_elaps+0x14>)
  4151ce:	4798      	blx	r3
  4151d0:	42a0      	cmp	r0, r4
  4151d2:	d201      	bcs.n	4151d8 <lv_tick_elaps+0x10>
  4151d4:	1b00      	subs	r0, r0, r4
  4151d6:	bd10      	pop	{r4, pc}
  4151d8:	1b00      	subs	r0, r0, r4
  4151da:	bd10      	pop	{r4, pc}
  4151dc:	004151ad 	.word	0x004151ad

004151e0 <lv_anim_path_linear>:
{
    LV_UNUSED(path);

    /*Calculate the current step*/
    uint32_t step;
    if(a->time == a->act_time) {
  4151e0:	6a4a      	ldr	r2, [r1, #36]	; 0x24
  4151e2:	6a88      	ldr	r0, [r1, #40]	; 0x28
  4151e4:	4282      	cmp	r2, r0
  4151e6:	d00b      	beq.n	415200 <lv_anim_path_linear+0x20>
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
    }
    else {
        step = ((int32_t)a->act_time * LV_ANIM_RESOLUTION) / a->time;
  4151e8:	0280      	lsls	r0, r0, #10
  4151ea:	fb90 f0f2 	sdiv	r0, r0, r2
    }

    /* Get the new value which will be proportional to `step`
     * and the `start` and `end` values*/
    int32_t new_value;
    new_value = (int32_t)step * (a->end - a->start);
  4151ee:	6a0b      	ldr	r3, [r1, #32]
  4151f0:	698a      	ldr	r2, [r1, #24]
  4151f2:	1a9b      	subs	r3, r3, r2
  4151f4:	fb00 f003 	mul.w	r0, r0, r3
    new_value = new_value >> LV_ANIM_RES_SHIFT;
    new_value += a->start;
  4151f8:	eb02 20a0 	add.w	r0, r2, r0, asr #10

    return (lv_anim_value_t)new_value;
}
  4151fc:	b200      	sxth	r0, r0
  4151fe:	4770      	bx	lr
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
  415200:	f44f 6080 	mov.w	r0, #1024	; 0x400
  415204:	e7f3      	b.n	4151ee <lv_anim_path_linear+0xe>
	...

00415208 <anim_mark_list_change>:
    }

    return anim_list_changed;
}
static void anim_mark_list_change(void)
{
  415208:	b508      	push	{r3, lr}
    anim_list_changed = true;
  41520a:	2201      	movs	r2, #1
  41520c:	4b08      	ldr	r3, [pc, #32]	; (415230 <anim_mark_list_change+0x28>)
  41520e:	701a      	strb	r2, [r3, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
  415210:	4808      	ldr	r0, [pc, #32]	; (415234 <anim_mark_list_change+0x2c>)
  415212:	4b09      	ldr	r3, [pc, #36]	; (415238 <anim_mark_list_change+0x30>)
  415214:	4798      	blx	r3
  415216:	b128      	cbz	r0, 415224 <anim_mark_list_change+0x1c>
        lv_task_set_prio(_lv_anim_task, LV_TASK_PRIO_OFF);
    else
        lv_task_set_prio(_lv_anim_task, LV_ANIM_TASK_PRIO);
  415218:	2104      	movs	r1, #4
  41521a:	4b08      	ldr	r3, [pc, #32]	; (41523c <anim_mark_list_change+0x34>)
  41521c:	6818      	ldr	r0, [r3, #0]
  41521e:	4b08      	ldr	r3, [pc, #32]	; (415240 <anim_mark_list_change+0x38>)
  415220:	4798      	blx	r3
  415222:	bd08      	pop	{r3, pc}
        lv_task_set_prio(_lv_anim_task, LV_TASK_PRIO_OFF);
  415224:	2100      	movs	r1, #0
  415226:	4b05      	ldr	r3, [pc, #20]	; (41523c <anim_mark_list_change+0x34>)
  415228:	6818      	ldr	r0, [r3, #0]
  41522a:	4b05      	ldr	r3, [pc, #20]	; (415240 <anim_mark_list_change+0x38>)
  41522c:	4798      	blx	r3
  41522e:	bd08      	pop	{r3, pc}
  415230:	2040c7e0 	.word	0x2040c7e0
  415234:	2043a354 	.word	0x2043a354
  415238:	004162a5 	.word	0x004162a5
  41523c:	2040c7dc 	.word	0x2040c7dc
  415240:	00417999 	.word	0x00417999

00415244 <anim_ready_handler>:
{
  415244:	b510      	push	{r4, lr}
  415246:	b092      	sub	sp, #72	; 0x48
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
  415248:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  41524c:	f013 0301 	ands.w	r3, r3, #1
  415250:	d107      	bne.n	415262 <anim_ready_handler+0x1e>
  415252:	8f02      	ldrh	r2, [r0, #56]	; 0x38
  415254:	b12a      	cbz	r2, 415262 <anim_ready_handler+0x1e>
  415256:	f64f 71ff 	movw	r1, #65535	; 0xffff
  41525a:	428a      	cmp	r2, r1
  41525c:	d001      	beq.n	415262 <anim_ready_handler+0x1e>
        a->repeat_cnt--;
  41525e:	3a01      	subs	r2, #1
  415260:	8702      	strh	r2, [r0, #56]	; 0x38
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
  415262:	8f02      	ldrh	r2, [r0, #56]	; 0x38
  415264:	b9b2      	cbnz	r2, 415294 <anim_ready_handler+0x50>
  415266:	6b02      	ldr	r2, [r0, #48]	; 0x30
  415268:	b102      	cbz	r2, 41526c <anim_ready_handler+0x28>
  41526a:	b19b      	cbz	r3, 415294 <anim_ready_handler+0x50>
  41526c:	4604      	mov	r4, r0
        _lv_memcpy(&a_tmp, a, sizeof(lv_anim_t));
  41526e:	2244      	movs	r2, #68	; 0x44
  415270:	4601      	mov	r1, r0
  415272:	a801      	add	r0, sp, #4
  415274:	4b16      	ldr	r3, [pc, #88]	; (4152d0 <anim_ready_handler+0x8c>)
  415276:	4798      	blx	r3
        _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
  415278:	4621      	mov	r1, r4
  41527a:	4816      	ldr	r0, [pc, #88]	; (4152d4 <anim_ready_handler+0x90>)
  41527c:	4b16      	ldr	r3, [pc, #88]	; (4152d8 <anim_ready_handler+0x94>)
  41527e:	4798      	blx	r3
        lv_mem_free(a);
  415280:	4620      	mov	r0, r4
  415282:	4b16      	ldr	r3, [pc, #88]	; (4152dc <anim_ready_handler+0x98>)
  415284:	4798      	blx	r3
        anim_mark_list_change();
  415286:	4b16      	ldr	r3, [pc, #88]	; (4152e0 <anim_ready_handler+0x9c>)
  415288:	4798      	blx	r3
        if(a_tmp.ready_cb != NULL) a_tmp.ready_cb(&a_tmp);
  41528a:	9b04      	ldr	r3, [sp, #16]
  41528c:	b1e3      	cbz	r3, 4152c8 <anim_ready_handler+0x84>
  41528e:	a801      	add	r0, sp, #4
  415290:	4798      	blx	r3
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
  415292:	e019      	b.n	4152c8 <anim_ready_handler+0x84>
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
  415294:	6b42      	ldr	r2, [r0, #52]	; 0x34
  415296:	4252      	negs	r2, r2
  415298:	6282      	str	r2, [r0, #40]	; 0x28
        if(a->playback_time != 0) {
  41529a:	6b02      	ldr	r2, [r0, #48]	; 0x30
  41529c:	b1a2      	cbz	r2, 4152c8 <anim_ready_handler+0x84>
            if(a->playback_now == 0) a->act_time = -(int32_t)(a->playback_delay);
  41529e:	b913      	cbnz	r3, 4152a6 <anim_ready_handler+0x62>
  4152a0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  4152a2:	4249      	negs	r1, r1
  4152a4:	6281      	str	r1, [r0, #40]	; 0x28
            a->playback_now = a->playback_now == 0 ? 1 : 0;
  4152a6:	f083 0301 	eor.w	r3, r3, #1
  4152aa:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
  4152ae:	f363 0100 	bfi	r1, r3, #0, #1
  4152b2:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
            tmp      = a->start;
  4152b6:	6983      	ldr	r3, [r0, #24]
            a->start = a->end;
  4152b8:	6a04      	ldr	r4, [r0, #32]
  4152ba:	6184      	str	r4, [r0, #24]
            a->end   = tmp;
  4152bc:	6203      	str	r3, [r0, #32]
            a->time = a->playback_now == 0 ? a->time_orig : a->playback_time;
  4152be:	f011 0f01 	tst.w	r1, #1
  4152c2:	d100      	bne.n	4152c6 <anim_ready_handler+0x82>
  4152c4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  4152c6:	6242      	str	r2, [r0, #36]	; 0x24
}
  4152c8:	4b06      	ldr	r3, [pc, #24]	; (4152e4 <anim_ready_handler+0xa0>)
  4152ca:	7818      	ldrb	r0, [r3, #0]
  4152cc:	b012      	add	sp, #72	; 0x48
  4152ce:	bd10      	pop	{r4, pc}
  4152d0:	004168e9 	.word	0x004168e9
  4152d4:	2043a354 	.word	0x2043a354
  4152d8:	00416361 	.word	0x00416361
  4152dc:	0041679d 	.word	0x0041679d
  4152e0:	00415209 	.word	0x00415209
  4152e4:	2040c7e0 	.word	0x2040c7e0

004152e8 <anim_task>:
{
  4152e8:	b538      	push	{r3, r4, r5, lr}
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
  4152ea:	4836      	ldr	r0, [pc, #216]	; (4153c4 <anim_task+0xdc>)
  4152ec:	4b36      	ldr	r3, [pc, #216]	; (4153c8 <anim_task+0xe0>)
  4152ee:	4798      	blx	r3
  4152f0:	e009      	b.n	415306 <anim_task+0x1e>
        a->has_run = 0;
  4152f2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  4152f6:	f36f 0341 	bfc	r3, #1, #1
  4152fa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
  4152fe:	4601      	mov	r1, r0
  415300:	4830      	ldr	r0, [pc, #192]	; (4153c4 <anim_task+0xdc>)
  415302:	4b32      	ldr	r3, [pc, #200]	; (4153cc <anim_task+0xe4>)
  415304:	4798      	blx	r3
  415306:	2800      	cmp	r0, #0
  415308:	d1f3      	bne.n	4152f2 <anim_task+0xa>
    uint32_t elaps = lv_tick_elaps(last_task_run);
  41530a:	4b31      	ldr	r3, [pc, #196]	; (4153d0 <anim_task+0xe8>)
  41530c:	6818      	ldr	r0, [r3, #0]
  41530e:	4b31      	ldr	r3, [pc, #196]	; (4153d4 <anim_task+0xec>)
  415310:	4798      	blx	r3
  415312:	4605      	mov	r5, r0
    a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
  415314:	482b      	ldr	r0, [pc, #172]	; (4153c4 <anim_task+0xdc>)
  415316:	4b2c      	ldr	r3, [pc, #176]	; (4153c8 <anim_task+0xe0>)
  415318:	4798      	blx	r3
  41531a:	4604      	mov	r4, r0
    while(a != NULL) {
  41531c:	e022      	b.n	415364 <anim_task+0x7c>
            if(a->act_time <= 0 && new_act_time >= 0) {
  41531e:	2a00      	cmp	r2, #0
  415320:	db31      	blt.n	415386 <anim_task+0x9e>
                if(a->start_cb) a->start_cb(a);
  415322:	68a3      	ldr	r3, [r4, #8]
  415324:	2b00      	cmp	r3, #0
  415326:	d02e      	beq.n	415386 <anim_task+0x9e>
  415328:	4620      	mov	r0, r4
  41532a:	4798      	blx	r3
  41532c:	e02b      	b.n	415386 <anim_task+0x9e>
                if(a->path.cb) new_value = a->path.cb(&a->path, a);
  41532e:	6923      	ldr	r3, [r4, #16]
  415330:	2b00      	cmp	r3, #0
  415332:	d032      	beq.n	41539a <anim_task+0xb2>
  415334:	4621      	mov	r1, r4
  415336:	f104 0010 	add.w	r0, r4, #16
  41533a:	4798      	blx	r3
                if(new_value != a->current) {
  41533c:	69e3      	ldr	r3, [r4, #28]
  41533e:	4298      	cmp	r0, r3
  415340:	d005      	beq.n	41534e <anim_task+0x66>
                    a->current = new_value;
  415342:	61e0      	str	r0, [r4, #28]
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
  415344:	6863      	ldr	r3, [r4, #4]
  415346:	b113      	cbz	r3, 41534e <anim_task+0x66>
  415348:	b201      	sxth	r1, r0
  41534a:	6820      	ldr	r0, [r4, #0]
  41534c:	4798      	blx	r3
                if(a->act_time >= a->time) {
  41534e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  415350:	6a63      	ldr	r3, [r4, #36]	; 0x24
  415352:	429a      	cmp	r2, r3
  415354:	da27      	bge.n	4153a6 <anim_task+0xbe>
        if(anim_list_changed)
  415356:	4b20      	ldr	r3, [pc, #128]	; (4153d8 <anim_task+0xf0>)
  415358:	781b      	ldrb	r3, [r3, #0]
  41535a:	b343      	cbz	r3, 4153ae <anim_task+0xc6>
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
  41535c:	4819      	ldr	r0, [pc, #100]	; (4153c4 <anim_task+0xdc>)
  41535e:	4b1a      	ldr	r3, [pc, #104]	; (4153c8 <anim_task+0xe0>)
  415360:	4798      	blx	r3
  415362:	4604      	mov	r4, r0
    while(a != NULL) {
  415364:	b34c      	cbz	r4, 4153ba <anim_task+0xd2>
        anim_list_changed = false;
  415366:	2200      	movs	r2, #0
  415368:	4b1b      	ldr	r3, [pc, #108]	; (4153d8 <anim_task+0xf0>)
  41536a:	701a      	strb	r2, [r3, #0]
        if(!a->has_run) {
  41536c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  415370:	f013 0f02 	tst.w	r3, #2
  415374:	d1ef      	bne.n	415356 <anim_task+0x6e>
            a->has_run = 1; /*The list readying might be reset so need to know which anim has run already*/
  415376:	f043 0302 	orr.w	r3, r3, #2
  41537a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
            int32_t new_act_time = a->act_time + elaps;
  41537e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  415380:	18ea      	adds	r2, r5, r3
            if(a->act_time <= 0 && new_act_time >= 0) {
  415382:	2b00      	cmp	r3, #0
  415384:	ddcb      	ble.n	41531e <anim_task+0x36>
            a->act_time += elaps;
  415386:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  415388:	442b      	add	r3, r5
  41538a:	62a3      	str	r3, [r4, #40]	; 0x28
            if(a->act_time >= 0) {
  41538c:	2b00      	cmp	r3, #0
  41538e:	dbe2      	blt.n	415356 <anim_task+0x6e>
                if(a->act_time > a->time) a->act_time = a->time;
  415390:	6a62      	ldr	r2, [r4, #36]	; 0x24
  415392:	4293      	cmp	r3, r2
  415394:	ddcb      	ble.n	41532e <anim_task+0x46>
  415396:	62a2      	str	r2, [r4, #40]	; 0x28
  415398:	e7c9      	b.n	41532e <anim_task+0x46>
                else new_value = lv_anim_path_linear(&a->path, a);
  41539a:	4621      	mov	r1, r4
  41539c:	f104 0010 	add.w	r0, r4, #16
  4153a0:	4b0e      	ldr	r3, [pc, #56]	; (4153dc <anim_task+0xf4>)
  4153a2:	4798      	blx	r3
  4153a4:	e7ca      	b.n	41533c <anim_task+0x54>
                    anim_ready_handler(a);
  4153a6:	4620      	mov	r0, r4
  4153a8:	4b0d      	ldr	r3, [pc, #52]	; (4153e0 <anim_task+0xf8>)
  4153aa:	4798      	blx	r3
  4153ac:	e7d3      	b.n	415356 <anim_task+0x6e>
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
  4153ae:	4621      	mov	r1, r4
  4153b0:	4804      	ldr	r0, [pc, #16]	; (4153c4 <anim_task+0xdc>)
  4153b2:	4b06      	ldr	r3, [pc, #24]	; (4153cc <anim_task+0xe4>)
  4153b4:	4798      	blx	r3
  4153b6:	4604      	mov	r4, r0
  4153b8:	e7d4      	b.n	415364 <anim_task+0x7c>
    last_task_run = lv_tick_get();
  4153ba:	4b0a      	ldr	r3, [pc, #40]	; (4153e4 <anim_task+0xfc>)
  4153bc:	4798      	blx	r3
  4153be:	4b04      	ldr	r3, [pc, #16]	; (4153d0 <anim_task+0xe8>)
  4153c0:	6018      	str	r0, [r3, #0]
  4153c2:	bd38      	pop	{r3, r4, r5, pc}
  4153c4:	2043a354 	.word	0x2043a354
  4153c8:	004162a5 	.word	0x004162a5
  4153cc:	004162b9 	.word	0x004162b9
  4153d0:	2040c7e4 	.word	0x2040c7e4
  4153d4:	004151c9 	.word	0x004151c9
  4153d8:	2040c7e0 	.word	0x2040c7e0
  4153dc:	004151e1 	.word	0x004151e1
  4153e0:	00415245 	.word	0x00415245
  4153e4:	004151ad 	.word	0x004151ad

004153e8 <_lv_anim_core_init>:
{
  4153e8:	b510      	push	{r4, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
  4153ea:	2144      	movs	r1, #68	; 0x44
  4153ec:	480a      	ldr	r0, [pc, #40]	; (415418 <_lv_anim_core_init+0x30>)
  4153ee:	4b0b      	ldr	r3, [pc, #44]	; (41541c <_lv_anim_core_init+0x34>)
  4153f0:	4798      	blx	r3
    last_task_run = lv_tick_get();
  4153f2:	4b0b      	ldr	r3, [pc, #44]	; (415420 <_lv_anim_core_init+0x38>)
  4153f4:	4798      	blx	r3
  4153f6:	4b0b      	ldr	r3, [pc, #44]	; (415424 <_lv_anim_core_init+0x3c>)
  4153f8:	6018      	str	r0, [r3, #0]
    _lv_anim_task = lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_ANIM_TASK_PRIO, NULL);
  4153fa:	2300      	movs	r3, #0
  4153fc:	2204      	movs	r2, #4
  4153fe:	211e      	movs	r1, #30
  415400:	4809      	ldr	r0, [pc, #36]	; (415428 <_lv_anim_core_init+0x40>)
  415402:	4c0a      	ldr	r4, [pc, #40]	; (41542c <_lv_anim_core_init+0x44>)
  415404:	47a0      	blx	r4
  415406:	4b0a      	ldr	r3, [pc, #40]	; (415430 <_lv_anim_core_init+0x48>)
  415408:	6018      	str	r0, [r3, #0]
    anim_mark_list_change(); /*Turn off the animation task*/
  41540a:	4b0a      	ldr	r3, [pc, #40]	; (415434 <_lv_anim_core_init+0x4c>)
  41540c:	4798      	blx	r3
    anim_list_changed = false; /*The list has not actually changed*/
  41540e:	2200      	movs	r2, #0
  415410:	4b09      	ldr	r3, [pc, #36]	; (415438 <_lv_anim_core_init+0x50>)
  415412:	701a      	strb	r2, [r3, #0]
  415414:	bd10      	pop	{r4, pc}
  415416:	bf00      	nop
  415418:	2043a354 	.word	0x2043a354
  41541c:	004161fb 	.word	0x004161fb
  415420:	004151ad 	.word	0x004151ad
  415424:	2040c7e4 	.word	0x2040c7e4
  415428:	004152e9 	.word	0x004152e9
  41542c:	00417645 	.word	0x00417645
  415430:	2040c7dc 	.word	0x2040c7dc
  415434:	00415209 	.word	0x00415209
  415438:	2040c7e0 	.word	0x2040c7e0

0041543c <lv_anim_init>:
{
  41543c:	b510      	push	{r4, lr}
  41543e:	4604      	mov	r4, r0
    _lv_memset_00(a, sizeof(lv_anim_t));
  415440:	2144      	movs	r1, #68	; 0x44
  415442:	4b0f      	ldr	r3, [pc, #60]	; (415480 <lv_anim_init+0x44>)
  415444:	4798      	blx	r3
    a->time    = 500;
  415446:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  41544a:	6263      	str	r3, [r4, #36]	; 0x24
    a->start   = 0;
  41544c:	2300      	movs	r3, #0
  41544e:	61a3      	str	r3, [r4, #24]
    a->end     = 100;
  415450:	2364      	movs	r3, #100	; 0x64
  415452:	6223      	str	r3, [r4, #32]
    _lv_memcpy_small(&a->path, &lv_anim_path_def, sizeof(lv_anim_path_cb_t));
  415454:	f104 0110 	add.w	r1, r4, #16
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;
  415458:	4a0a      	ldr	r2, [pc, #40]	; (415484 <lv_anim_init+0x48>)
  41545a:	2304      	movs	r3, #4
  41545c:	e004      	b.n	415468 <lv_anim_init+0x2c>

    while(len) {
        *d8 = *s8;
  41545e:	f812 0b01 	ldrb.w	r0, [r2], #1
  415462:	f801 0b01 	strb.w	r0, [r1], #1
        d8++;
        s8++;
        len--;
  415466:	3b01      	subs	r3, #1
    while(len) {
  415468:	2b00      	cmp	r3, #0
  41546a:	d1f8      	bne.n	41545e <lv_anim_init+0x22>
    a->repeat_cnt = 1;
  41546c:	2301      	movs	r3, #1
  41546e:	8723      	strh	r3, [r4, #56]	; 0x38
    a->early_apply = 1;
  415470:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
  415474:	f043 0301 	orr.w	r3, r3, #1
  415478:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  41547c:	bd10      	pop	{r4, pc}
  41547e:	bf00      	nop
  415480:	00416c0d 	.word	0x00416c0d
  415484:	0042fcc8 	.word	0x0042fcc8

00415488 <lv_anim_del>:
{
  415488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  41548c:	4606      	mov	r6, r0
  41548e:	460f      	mov	r7, r1
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
  415490:	4812      	ldr	r0, [pc, #72]	; (4154dc <lv_anim_del+0x54>)
  415492:	4b13      	ldr	r3, [pc, #76]	; (4154e0 <lv_anim_del+0x58>)
  415494:	4798      	blx	r3
  415496:	4604      	mov	r4, r0
    bool del = false;
  415498:	f04f 0800 	mov.w	r8, #0
    while(a != NULL) {
  41549c:	e00b      	b.n	4154b6 <lv_anim_del+0x2e>
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
  41549e:	4621      	mov	r1, r4
  4154a0:	480e      	ldr	r0, [pc, #56]	; (4154dc <lv_anim_del+0x54>)
  4154a2:	4b10      	ldr	r3, [pc, #64]	; (4154e4 <lv_anim_del+0x5c>)
  4154a4:	4798      	blx	r3
            lv_mem_free(a);
  4154a6:	4620      	mov	r0, r4
  4154a8:	4b0f      	ldr	r3, [pc, #60]	; (4154e8 <lv_anim_del+0x60>)
  4154aa:	4798      	blx	r3
            anim_mark_list_change(); /*Read by `anim_task`. It need to know if a delete occurred in
  4154ac:	4b0f      	ldr	r3, [pc, #60]	; (4154ec <lv_anim_del+0x64>)
  4154ae:	4798      	blx	r3
            del = true;
  4154b0:	f04f 0801 	mov.w	r8, #1
  4154b4:	462c      	mov	r4, r5
    while(a != NULL) {
  4154b6:	b16c      	cbz	r4, 4154d4 <lv_anim_del+0x4c>
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
  4154b8:	4621      	mov	r1, r4
  4154ba:	4808      	ldr	r0, [pc, #32]	; (4154dc <lv_anim_del+0x54>)
  4154bc:	4b0c      	ldr	r3, [pc, #48]	; (4154f0 <lv_anim_del+0x68>)
  4154be:	4798      	blx	r3
  4154c0:	4605      	mov	r5, r0
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
  4154c2:	6823      	ldr	r3, [r4, #0]
  4154c4:	42b3      	cmp	r3, r6
  4154c6:	d1f5      	bne.n	4154b4 <lv_anim_del+0x2c>
  4154c8:	6863      	ldr	r3, [r4, #4]
  4154ca:	42bb      	cmp	r3, r7
  4154cc:	d0e7      	beq.n	41549e <lv_anim_del+0x16>
  4154ce:	2f00      	cmp	r7, #0
  4154d0:	d1f0      	bne.n	4154b4 <lv_anim_del+0x2c>
  4154d2:	e7e4      	b.n	41549e <lv_anim_del+0x16>
}
  4154d4:	4640      	mov	r0, r8
  4154d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4154da:	bf00      	nop
  4154dc:	2043a354 	.word	0x2043a354
  4154e0:	004162a5 	.word	0x004162a5
  4154e4:	00416361 	.word	0x00416361
  4154e8:	0041679d 	.word	0x0041679d
  4154ec:	00415209 	.word	0x00415209
  4154f0:	004162b9 	.word	0x004162b9

004154f4 <lv_anim_start>:
{
  4154f4:	b538      	push	{r3, r4, r5, lr}
  4154f6:	4605      	mov	r5, r0
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
  4154f8:	6841      	ldr	r1, [r0, #4]
  4154fa:	b111      	cbz	r1, 415502 <lv_anim_start+0xe>
  4154fc:	6800      	ldr	r0, [r0, #0]
  4154fe:	4b18      	ldr	r3, [pc, #96]	; (415560 <lv_anim_start+0x6c>)
  415500:	4798      	blx	r3
    if(_lv_ll_is_empty(&LV_GC_ROOT(_lv_anim_ll))) {
  415502:	4818      	ldr	r0, [pc, #96]	; (415564 <lv_anim_start+0x70>)
  415504:	4b18      	ldr	r3, [pc, #96]	; (415568 <lv_anim_start+0x74>)
  415506:	4798      	blx	r3
  415508:	b9e8      	cbnz	r0, 415546 <lv_anim_start+0x52>
    lv_anim_t * new_anim = _lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
  41550a:	4816      	ldr	r0, [pc, #88]	; (415564 <lv_anim_start+0x70>)
  41550c:	4b17      	ldr	r3, [pc, #92]	; (41556c <lv_anim_start+0x78>)
  41550e:	4798      	blx	r3
  415510:	4604      	mov	r4, r0
    LV_ASSERT_MEM(new_anim);
  415512:	4b17      	ldr	r3, [pc, #92]	; (415570 <lv_anim_start+0x7c>)
  415514:	4798      	blx	r3
  415516:	b1e0      	cbz	r0, 415552 <lv_anim_start+0x5e>
    if(new_anim == NULL) return;
  415518:	b1a4      	cbz	r4, 415544 <lv_anim_start+0x50>
    a->time_orig = a->time;
  41551a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  41551c:	63eb      	str	r3, [r5, #60]	; 0x3c
    _lv_memcpy(new_anim, a, sizeof(lv_anim_t));
  41551e:	2244      	movs	r2, #68	; 0x44
  415520:	4629      	mov	r1, r5
  415522:	4620      	mov	r0, r4
  415524:	4b13      	ldr	r3, [pc, #76]	; (415574 <lv_anim_start+0x80>)
  415526:	4798      	blx	r3
    if(new_anim->early_apply) {
  415528:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
  41552c:	f013 0f01 	tst.w	r3, #1
  415530:	d006      	beq.n	415540 <lv_anim_start+0x4c>
        if(new_anim->exec_cb && new_anim->var) new_anim->exec_cb(new_anim->var, new_anim->start);
  415532:	6863      	ldr	r3, [r4, #4]
  415534:	b123      	cbz	r3, 415540 <lv_anim_start+0x4c>
  415536:	6820      	ldr	r0, [r4, #0]
  415538:	b110      	cbz	r0, 415540 <lv_anim_start+0x4c>
  41553a:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
  41553e:	4798      	blx	r3
    anim_mark_list_change();
  415540:	4b0d      	ldr	r3, [pc, #52]	; (415578 <lv_anim_start+0x84>)
  415542:	4798      	blx	r3
  415544:	bd38      	pop	{r3, r4, r5, pc}
        last_task_run = lv_tick_get() - 1;
  415546:	4b0d      	ldr	r3, [pc, #52]	; (41557c <lv_anim_start+0x88>)
  415548:	4798      	blx	r3
  41554a:	3801      	subs	r0, #1
  41554c:	4b0c      	ldr	r3, [pc, #48]	; (415580 <lv_anim_start+0x8c>)
  41554e:	6018      	str	r0, [r3, #0]
  415550:	e7db      	b.n	41550a <lv_anim_start+0x16>
    LV_ASSERT_MEM(new_anim);
  415552:	4622      	mov	r2, r4
  415554:	2300      	movs	r3, #0
  415556:	480b      	ldr	r0, [pc, #44]	; (415584 <lv_anim_start+0x90>)
  415558:	490b      	ldr	r1, [pc, #44]	; (415588 <lv_anim_start+0x94>)
  41555a:	4788      	blx	r1
  41555c:	e7fe      	b.n	41555c <lv_anim_start+0x68>
  41555e:	bf00      	nop
  415560:	00415489 	.word	0x00415489
  415564:	2043a354 	.word	0x2043a354
  415568:	0041654d 	.word	0x0041654d
  41556c:	0041620d 	.word	0x0041620d
  415570:	00415f95 	.word	0x00415f95
  415574:	004168e9 	.word	0x004168e9
  415578:	00415209 	.word	0x00415209
  41557c:	004151ad 	.word	0x004151ad
  415580:	2040c7e4 	.word	0x2040c7e4
  415584:	0042c714 	.word	0x0042c714
  415588:	00415fa1 	.word	0x00415fa1

0041558c <lv_anim_get>:
{
  41558c:	b538      	push	{r3, r4, r5, lr}
  41558e:	4604      	mov	r4, r0
  415590:	460d      	mov	r5, r1
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
  415592:	4808      	ldr	r0, [pc, #32]	; (4155b4 <lv_anim_get+0x28>)
  415594:	4b08      	ldr	r3, [pc, #32]	; (4155b8 <lv_anim_get+0x2c>)
  415596:	4798      	blx	r3
  415598:	e003      	b.n	4155a2 <lv_anim_get+0x16>
  41559a:	4601      	mov	r1, r0
  41559c:	4805      	ldr	r0, [pc, #20]	; (4155b4 <lv_anim_get+0x28>)
  41559e:	4b07      	ldr	r3, [pc, #28]	; (4155bc <lv_anim_get+0x30>)
  4155a0:	4798      	blx	r3
  4155a2:	b128      	cbz	r0, 4155b0 <lv_anim_get+0x24>
        if(a->var == var && a->exec_cb == exec_cb) {
  4155a4:	6803      	ldr	r3, [r0, #0]
  4155a6:	42a3      	cmp	r3, r4
  4155a8:	d1f7      	bne.n	41559a <lv_anim_get+0xe>
  4155aa:	6843      	ldr	r3, [r0, #4]
  4155ac:	42ab      	cmp	r3, r5
  4155ae:	d1f4      	bne.n	41559a <lv_anim_get+0xe>
}
  4155b0:	bd38      	pop	{r3, r4, r5, pc}
  4155b2:	bf00      	nop
  4155b4:	2043a354 	.word	0x2043a354
  4155b8:	004162a5 	.word	0x004162a5
  4155bc:	004162b9 	.word	0x004162b9

004155c0 <lv_anim_speed_to_time>:
    int32_t d     = LV_MATH_ABS((int32_t)start - end);
  4155c0:	1a89      	subs	r1, r1, r2
  4155c2:	2900      	cmp	r1, #0
  4155c4:	bfb8      	it	lt
  4155c6:	4249      	neglt	r1, r1
    uint32_t time = (int32_t)((int32_t)(d * 1000) / speed);
  4155c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4155cc:	fb02 f201 	mul.w	r2, r2, r1
  4155d0:	fb92 f0f0 	sdiv	r0, r2, r0
    if(time > UINT16_MAX) time = UINT16_MAX;
  4155d4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  4155d8:	d301      	bcc.n	4155de <lv_anim_speed_to_time+0x1e>
  4155da:	f64f 70ff 	movw	r0, #65535	; 0xffff
    if(time == 0) {
  4155de:	b900      	cbnz	r0, 4155e2 <lv_anim_speed_to_time+0x22>
        time++;
  4155e0:	3001      	adds	r0, #1
}
  4155e2:	b280      	uxth	r0, r0
  4155e4:	4770      	bx	lr

004155e6 <lv_point_within_circle>:
  4155e6:	b410      	push	{r4}
  4155e8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
  4155ec:	f9b0 2000 	ldrsh.w	r2, [r0]
  4155f0:	1a9b      	subs	r3, r3, r2
  4155f2:	d417      	bmi.n	415624 <lv_point_within_circle+0x3e>
  4155f4:	105b      	asrs	r3, r3, #1
  4155f6:	b29c      	uxth	r4, r3
  4155f8:	fa14 f282 	uxtah	r2, r4, r2
  4155fc:	b292      	uxth	r2, r2
  4155fe:	8840      	ldrh	r0, [r0, #2]
  415600:	4404      	add	r4, r0
  415602:	b2a4      	uxth	r4, r4
  415604:	8808      	ldrh	r0, [r1, #0]
  415606:	1a82      	subs	r2, r0, r2
  415608:	8849      	ldrh	r1, [r1, #2]
  41560a:	1b09      	subs	r1, r1, r4
  41560c:	fb13 f303 	smulbb	r3, r3, r3
  415610:	fb11 f101 	smulbb	r1, r1, r1
  415614:	fb12 1202 	smlabb	r2, r2, r2, r1
  415618:	4293      	cmp	r3, r2
  41561a:	d205      	bcs.n	415628 <lv_point_within_circle+0x42>
  41561c:	2000      	movs	r0, #0
  41561e:	f85d 4b04 	ldr.w	r4, [sp], #4
  415622:	4770      	bx	lr
  415624:	3301      	adds	r3, #1
  415626:	e7e5      	b.n	4155f4 <lv_point_within_circle+0xe>
  415628:	2001      	movs	r0, #1
  41562a:	e7f8      	b.n	41561e <lv_point_within_circle+0x38>

0041562c <lv_area_set>:
  41562c:	8001      	strh	r1, [r0, #0]
  41562e:	8042      	strh	r2, [r0, #2]
  415630:	8083      	strh	r3, [r0, #4]
  415632:	f9bd 3000 	ldrsh.w	r3, [sp]
  415636:	80c3      	strh	r3, [r0, #6]
  415638:	4770      	bx	lr

0041563a <lv_area_set_height>:
  41563a:	8843      	ldrh	r3, [r0, #2]
  41563c:	4419      	add	r1, r3
  41563e:	b289      	uxth	r1, r1
  415640:	3901      	subs	r1, #1
  415642:	80c1      	strh	r1, [r0, #6]
  415644:	4770      	bx	lr

00415646 <lv_area_get_size>:
  415646:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
  41564a:	f9b0 3000 	ldrsh.w	r3, [r0]
  41564e:	1ad2      	subs	r2, r2, r3
  415650:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
  415654:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
  415658:	1a18      	subs	r0, r3, r0
  41565a:	3001      	adds	r0, #1
  41565c:	fb02 0000 	mla	r0, r2, r0, r0
  415660:	4770      	bx	lr

00415662 <_lv_area_intersect>:
  415662:	b470      	push	{r4, r5, r6}
  415664:	f9b2 4000 	ldrsh.w	r4, [r2]
  415668:	f9b1 3000 	ldrsh.w	r3, [r1]
  41566c:	429c      	cmp	r4, r3
  41566e:	bfb8      	it	lt
  415670:	461c      	movlt	r4, r3
  415672:	8004      	strh	r4, [r0, #0]
  415674:	f9b2 5002 	ldrsh.w	r5, [r2, #2]
  415678:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  41567c:	429d      	cmp	r5, r3
  41567e:	bfb8      	it	lt
  415680:	461d      	movlt	r5, r3
  415682:	8045      	strh	r5, [r0, #2]
  415684:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
  415688:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
  41568c:	42b3      	cmp	r3, r6
  41568e:	bfa8      	it	ge
  415690:	4633      	movge	r3, r6
  415692:	8083      	strh	r3, [r0, #4]
  415694:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
  415698:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
  41569c:	428a      	cmp	r2, r1
  41569e:	bfa8      	it	ge
  4156a0:	460a      	movge	r2, r1
  4156a2:	80c2      	strh	r2, [r0, #6]
  4156a4:	429c      	cmp	r4, r3
  4156a6:	dc05      	bgt.n	4156b4 <_lv_area_intersect+0x52>
  4156a8:	4295      	cmp	r5, r2
  4156aa:	dd01      	ble.n	4156b0 <_lv_area_intersect+0x4e>
  4156ac:	2000      	movs	r0, #0
  4156ae:	e002      	b.n	4156b6 <_lv_area_intersect+0x54>
  4156b0:	2001      	movs	r0, #1
  4156b2:	e000      	b.n	4156b6 <_lv_area_intersect+0x54>
  4156b4:	2000      	movs	r0, #0
  4156b6:	bc70      	pop	{r4, r5, r6}
  4156b8:	4770      	bx	lr

004156ba <_lv_area_join>:
  4156ba:	b410      	push	{r4}
  4156bc:	f9b2 3000 	ldrsh.w	r3, [r2]
  4156c0:	f9b1 4000 	ldrsh.w	r4, [r1]
  4156c4:	42a3      	cmp	r3, r4
  4156c6:	bfa8      	it	ge
  4156c8:	4623      	movge	r3, r4
  4156ca:	8003      	strh	r3, [r0, #0]
  4156cc:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
  4156d0:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
  4156d4:	42a3      	cmp	r3, r4
  4156d6:	bfa8      	it	ge
  4156d8:	4623      	movge	r3, r4
  4156da:	8043      	strh	r3, [r0, #2]
  4156dc:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
  4156e0:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
  4156e4:	42a3      	cmp	r3, r4
  4156e6:	bfb8      	it	lt
  4156e8:	4623      	movlt	r3, r4
  4156ea:	8083      	strh	r3, [r0, #4]
  4156ec:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
  4156f0:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
  4156f4:	4293      	cmp	r3, r2
  4156f6:	bfb8      	it	lt
  4156f8:	4613      	movlt	r3, r2
  4156fa:	80c3      	strh	r3, [r0, #6]
  4156fc:	f85d 4b04 	ldr.w	r4, [sp], #4
  415700:	4770      	bx	lr
	...

00415704 <_lv_area_is_point_on>:
  415704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  415708:	b082      	sub	sp, #8
  41570a:	f9b1 3000 	ldrsh.w	r3, [r1]
  41570e:	f9b0 6000 	ldrsh.w	r6, [r0]
  415712:	42b3      	cmp	r3, r6
  415714:	db0f      	blt.n	415736 <_lv_area_is_point_on+0x32>
  415716:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
  41571a:	42a3      	cmp	r3, r4
  41571c:	dc52      	bgt.n	4157c4 <_lv_area_is_point_on+0xc0>
  41571e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  415722:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
  415726:	42a3      	cmp	r3, r4
  415728:	db4e      	blt.n	4157c8 <_lv_area_is_point_on+0xc4>
  41572a:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
  41572e:	42a3      	cmp	r3, r4
  415730:	dd4c      	ble.n	4157cc <_lv_area_is_point_on+0xc8>
  415732:	2500      	movs	r5, #0
  415734:	e000      	b.n	415738 <_lv_area_is_point_on+0x34>
  415736:	2500      	movs	r5, #0
  415738:	2d00      	cmp	r5, #0
  41573a:	d03f      	beq.n	4157bc <_lv_area_is_point_on+0xb8>
  41573c:	2a00      	cmp	r2, #0
  41573e:	dd3d      	ble.n	4157bc <_lv_area_is_point_on+0xb8>
  415740:	8884      	ldrh	r4, [r0, #4]
  415742:	b2b3      	uxth	r3, r6
  415744:	1ae4      	subs	r4, r4, r3
  415746:	b2a4      	uxth	r4, r4
  415748:	3401      	adds	r4, #1
  41574a:	b224      	sxth	r4, r4
  41574c:	2c00      	cmp	r4, #0
  41574e:	db3f      	blt.n	4157d0 <_lv_area_is_point_on+0xcc>
  415750:	1064      	asrs	r4, r4, #1
  415752:	88c3      	ldrh	r3, [r0, #6]
  415754:	8847      	ldrh	r7, [r0, #2]
  415756:	1bdb      	subs	r3, r3, r7
  415758:	b29b      	uxth	r3, r3
  41575a:	3301      	adds	r3, #1
  41575c:	b21b      	sxth	r3, r3
  41575e:	2b00      	cmp	r3, #0
  415760:	db38      	blt.n	4157d4 <_lv_area_is_point_on+0xd0>
  415762:	105b      	asrs	r3, r3, #1
  415764:	429c      	cmp	r4, r3
  415766:	bfa8      	it	ge
  415768:	461c      	movge	r4, r3
  41576a:	b224      	sxth	r4, r4
  41576c:	42a2      	cmp	r2, r4
  41576e:	dc00      	bgt.n	415772 <_lv_area_is_point_on+0x6e>
  415770:	4614      	mov	r4, r2
  415772:	4688      	mov	r8, r1
  415774:	4607      	mov	r7, r0
  415776:	f8ad 6000 	strh.w	r6, [sp]
  41577a:	8803      	ldrh	r3, [r0, #0]
  41577c:	b2a4      	uxth	r4, r4
  41577e:	4423      	add	r3, r4
  415780:	f8ad 3004 	strh.w	r3, [sp, #4]
  415784:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  415788:	f8ad 3002 	strh.w	r3, [sp, #2]
  41578c:	8843      	ldrh	r3, [r0, #2]
  41578e:	4423      	add	r3, r4
  415790:	f8ad 3006 	strh.w	r3, [sp, #6]
  415794:	2200      	movs	r2, #0
  415796:	4668      	mov	r0, sp
  415798:	f7ff ffb4 	bl	415704 <_lv_area_is_point_on>
  41579c:	b1e0      	cbz	r0, 4157d8 <_lv_area_is_point_on+0xd4>
  41579e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  4157a2:	4423      	add	r3, r4
  4157a4:	f8ad 3004 	strh.w	r3, [sp, #4]
  4157a8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4157ac:	441c      	add	r4, r3
  4157ae:	f8ad 4006 	strh.w	r4, [sp, #6]
  4157b2:	4641      	mov	r1, r8
  4157b4:	4668      	mov	r0, sp
  4157b6:	4b36      	ldr	r3, [pc, #216]	; (415890 <_lv_area_is_point_on+0x18c>)
  4157b8:	4798      	blx	r3
  4157ba:	4605      	mov	r5, r0
  4157bc:	4628      	mov	r0, r5
  4157be:	b002      	add	sp, #8
  4157c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4157c4:	2500      	movs	r5, #0
  4157c6:	e7b7      	b.n	415738 <_lv_area_is_point_on+0x34>
  4157c8:	2500      	movs	r5, #0
  4157ca:	e7b5      	b.n	415738 <_lv_area_is_point_on+0x34>
  4157cc:	2501      	movs	r5, #1
  4157ce:	e7b3      	b.n	415738 <_lv_area_is_point_on+0x34>
  4157d0:	3401      	adds	r4, #1
  4157d2:	e7bd      	b.n	415750 <_lv_area_is_point_on+0x4c>
  4157d4:	3301      	adds	r3, #1
  4157d6:	e7c4      	b.n	415762 <_lv_area_is_point_on+0x5e>
  4157d8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
  4157dc:	b293      	uxth	r3, r2
  4157de:	1b1b      	subs	r3, r3, r4
  4157e0:	f8ad 3002 	strh.w	r3, [sp, #2]
  4157e4:	f8ad 2006 	strh.w	r2, [sp, #6]
  4157e8:	2200      	movs	r2, #0
  4157ea:	4641      	mov	r1, r8
  4157ec:	4668      	mov	r0, sp
  4157ee:	f7ff ff89 	bl	415704 <_lv_area_is_point_on>
  4157f2:	b178      	cbz	r0, 415814 <_lv_area_is_point_on+0x110>
  4157f4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  4157f8:	4423      	add	r3, r4
  4157fa:	f8ad 3004 	strh.w	r3, [sp, #4]
  4157fe:	f8bd 3002 	ldrh.w	r3, [sp, #2]
  415802:	1b1c      	subs	r4, r3, r4
  415804:	f8ad 4002 	strh.w	r4, [sp, #2]
  415808:	4641      	mov	r1, r8
  41580a:	4668      	mov	r0, sp
  41580c:	4b20      	ldr	r3, [pc, #128]	; (415890 <_lv_area_is_point_on+0x18c>)
  41580e:	4798      	blx	r3
  415810:	4605      	mov	r5, r0
  415812:	e7d3      	b.n	4157bc <_lv_area_is_point_on+0xb8>
  415814:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
  415818:	b293      	uxth	r3, r2
  41581a:	1b1b      	subs	r3, r3, r4
  41581c:	f8ad 3000 	strh.w	r3, [sp]
  415820:	f8ad 2004 	strh.w	r2, [sp, #4]
  415824:	2200      	movs	r2, #0
  415826:	4641      	mov	r1, r8
  415828:	4668      	mov	r0, sp
  41582a:	f7ff ff6b 	bl	415704 <_lv_area_is_point_on>
  41582e:	b178      	cbz	r0, 415850 <_lv_area_is_point_on+0x14c>
  415830:	f8bd 3000 	ldrh.w	r3, [sp]
  415834:	1b1b      	subs	r3, r3, r4
  415836:	f8ad 3000 	strh.w	r3, [sp]
  41583a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
  41583e:	1b1c      	subs	r4, r3, r4
  415840:	f8ad 4002 	strh.w	r4, [sp, #2]
  415844:	4641      	mov	r1, r8
  415846:	4668      	mov	r0, sp
  415848:	4b11      	ldr	r3, [pc, #68]	; (415890 <_lv_area_is_point_on+0x18c>)
  41584a:	4798      	blx	r3
  41584c:	4605      	mov	r5, r0
  41584e:	e7b5      	b.n	4157bc <_lv_area_is_point_on+0xb8>
  415850:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
  415854:	f8ad 3002 	strh.w	r3, [sp, #2]
  415858:	887b      	ldrh	r3, [r7, #2]
  41585a:	4423      	add	r3, r4
  41585c:	f8ad 3006 	strh.w	r3, [sp, #6]
  415860:	2200      	movs	r2, #0
  415862:	4641      	mov	r1, r8
  415864:	4668      	mov	r0, sp
  415866:	f7ff ff4d 	bl	415704 <_lv_area_is_point_on>
  41586a:	2800      	cmp	r0, #0
  41586c:	d0a6      	beq.n	4157bc <_lv_area_is_point_on+0xb8>
  41586e:	f8bd 3000 	ldrh.w	r3, [sp]
  415872:	1b1b      	subs	r3, r3, r4
  415874:	f8ad 3000 	strh.w	r3, [sp]
  415878:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  41587c:	441c      	add	r4, r3
  41587e:	f8ad 4006 	strh.w	r4, [sp, #6]
  415882:	4641      	mov	r1, r8
  415884:	4668      	mov	r0, sp
  415886:	4b02      	ldr	r3, [pc, #8]	; (415890 <_lv_area_is_point_on+0x18c>)
  415888:	4798      	blx	r3
  41588a:	4605      	mov	r5, r0
  41588c:	e796      	b.n	4157bc <_lv_area_is_point_on+0xb8>
  41588e:	bf00      	nop
  415890:	004155e7 	.word	0x004155e7

00415894 <_lv_area_is_on>:
  415894:	f9b0 2000 	ldrsh.w	r2, [r0]
  415898:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
  41589c:	429a      	cmp	r2, r3
  41589e:	dc13      	bgt.n	4158c8 <_lv_area_is_on+0x34>
  4158a0:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
  4158a4:	f9b1 3000 	ldrsh.w	r3, [r1]
  4158a8:	429a      	cmp	r2, r3
  4158aa:	db0f      	blt.n	4158cc <_lv_area_is_on+0x38>
  4158ac:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
  4158b0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
  4158b4:	429a      	cmp	r2, r3
  4158b6:	dc0b      	bgt.n	4158d0 <_lv_area_is_on+0x3c>
  4158b8:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
  4158bc:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  4158c0:	429a      	cmp	r2, r3
  4158c2:	da07      	bge.n	4158d4 <_lv_area_is_on+0x40>
  4158c4:	2000      	movs	r0, #0
  4158c6:	4770      	bx	lr
  4158c8:	2000      	movs	r0, #0
  4158ca:	4770      	bx	lr
  4158cc:	2000      	movs	r0, #0
  4158ce:	4770      	bx	lr
  4158d0:	2000      	movs	r0, #0
  4158d2:	4770      	bx	lr
  4158d4:	2001      	movs	r0, #1
  4158d6:	4770      	bx	lr

004158d8 <_lv_area_is_in>:
  4158d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4158da:	b083      	sub	sp, #12
  4158dc:	f9b0 5000 	ldrsh.w	r5, [r0]
  4158e0:	f9b1 3000 	ldrsh.w	r3, [r1]
  4158e4:	429d      	cmp	r5, r3
  4158e6:	db13      	blt.n	415910 <_lv_area_is_in+0x38>
  4158e8:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
  4158ec:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  4158f0:	429c      	cmp	r4, r3
  4158f2:	db13      	blt.n	41591c <_lv_area_is_in+0x44>
  4158f4:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
  4158f8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
  4158fc:	429c      	cmp	r4, r3
  4158fe:	dc0f      	bgt.n	415920 <_lv_area_is_in+0x48>
  415900:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
  415904:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
  415908:	429c      	cmp	r4, r3
  41590a:	dd0b      	ble.n	415924 <_lv_area_is_in+0x4c>
  41590c:	2300      	movs	r3, #0
  41590e:	e000      	b.n	415912 <_lv_area_is_in+0x3a>
  415910:	2300      	movs	r3, #0
  415912:	b103      	cbz	r3, 415916 <_lv_area_is_in+0x3e>
  415914:	b942      	cbnz	r2, 415928 <_lv_area_is_in+0x50>
  415916:	4618      	mov	r0, r3
  415918:	b003      	add	sp, #12
  41591a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  41591c:	2300      	movs	r3, #0
  41591e:	e7f8      	b.n	415912 <_lv_area_is_in+0x3a>
  415920:	2300      	movs	r3, #0
  415922:	e7f6      	b.n	415912 <_lv_area_is_in+0x3a>
  415924:	2301      	movs	r3, #1
  415926:	e7f4      	b.n	415912 <_lv_area_is_in+0x3a>
  415928:	4617      	mov	r7, r2
  41592a:	460c      	mov	r4, r1
  41592c:	4606      	mov	r6, r0
  41592e:	f8ad 5004 	strh.w	r5, [sp, #4]
  415932:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  415936:	f8ad 3006 	strh.w	r3, [sp, #6]
  41593a:	a901      	add	r1, sp, #4
  41593c:	4620      	mov	r0, r4
  41593e:	4b17      	ldr	r3, [pc, #92]	; (41599c <_lv_area_is_in+0xc4>)
  415940:	4798      	blx	r3
  415942:	4603      	mov	r3, r0
  415944:	2800      	cmp	r0, #0
  415946:	d0e6      	beq.n	415916 <_lv_area_is_in+0x3e>
  415948:	f9b6 5004 	ldrsh.w	r5, [r6, #4]
  41594c:	f8ad 5004 	strh.w	r5, [sp, #4]
  415950:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
  415954:	f8ad 3006 	strh.w	r3, [sp, #6]
  415958:	463a      	mov	r2, r7
  41595a:	a901      	add	r1, sp, #4
  41595c:	4620      	mov	r0, r4
  41595e:	4b0f      	ldr	r3, [pc, #60]	; (41599c <_lv_area_is_in+0xc4>)
  415960:	4798      	blx	r3
  415962:	4603      	mov	r3, r0
  415964:	2800      	cmp	r0, #0
  415966:	d0d6      	beq.n	415916 <_lv_area_is_in+0x3e>
  415968:	f9b6 3000 	ldrsh.w	r3, [r6]
  41596c:	f8ad 3004 	strh.w	r3, [sp, #4]
  415970:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
  415974:	f8ad 3006 	strh.w	r3, [sp, #6]
  415978:	463a      	mov	r2, r7
  41597a:	a901      	add	r1, sp, #4
  41597c:	4620      	mov	r0, r4
  41597e:	4b07      	ldr	r3, [pc, #28]	; (41599c <_lv_area_is_in+0xc4>)
  415980:	4798      	blx	r3
  415982:	4603      	mov	r3, r0
  415984:	2800      	cmp	r0, #0
  415986:	d0c6      	beq.n	415916 <_lv_area_is_in+0x3e>
  415988:	a902      	add	r1, sp, #8
  41598a:	f821 5d04 	strh.w	r5, [r1, #-4]!
  41598e:	463a      	mov	r2, r7
  415990:	4620      	mov	r0, r4
  415992:	4b02      	ldr	r3, [pc, #8]	; (41599c <_lv_area_is_in+0xc4>)
  415994:	4798      	blx	r3
  415996:	4603      	mov	r3, r0
  415998:	e7bd      	b.n	415916 <_lv_area_is_in+0x3e>
  41599a:	bf00      	nop
  41599c:	00415705 	.word	0x00415705

004159a0 <_lv_area_align>:
  4159a0:	b430      	push	{r4, r5}
  4159a2:	2a14      	cmp	r2, #20
  4159a4:	d842      	bhi.n	415a2c <_lv_area_align+0x8c>
  4159a6:	e8df f012 	tbh	[pc, r2, lsl #1]
  4159aa:	0015      	.short	0x0015
  4159ac:	00570053 	.word	0x00570053
  4159b0:	00850074 	.word	0x00850074
  4159b4:	00bf0096 	.word	0x00bf0096
  4159b8:	00f900dc 	.word	0x00f900dc
  4159bc:	012b0122 	.word	0x012b0122
  4159c0:	0161014c 	.word	0x0161014c
  4159c4:	018b016a 	.word	0x018b016a
  4159c8:	01a901a0 	.word	0x01a901a0
  4159cc:	01df01ca 	.word	0x01df01ca
  4159d0:	020901e8 	.word	0x020901e8
  4159d4:	8884      	ldrh	r4, [r0, #4]
  4159d6:	8802      	ldrh	r2, [r0, #0]
  4159d8:	1aa4      	subs	r4, r4, r2
  4159da:	b2a4      	uxth	r4, r4
  4159dc:	3401      	adds	r4, #1
  4159de:	b224      	sxth	r4, r4
  4159e0:	888a      	ldrh	r2, [r1, #4]
  4159e2:	880d      	ldrh	r5, [r1, #0]
  4159e4:	1b52      	subs	r2, r2, r5
  4159e6:	b292      	uxth	r2, r2
  4159e8:	3201      	adds	r2, #1
  4159ea:	b212      	sxth	r2, r2
  4159ec:	4625      	mov	r5, r4
  4159ee:	2c00      	cmp	r4, #0
  4159f0:	db26      	blt.n	415a40 <_lv_area_align+0xa0>
  4159f2:	106d      	asrs	r5, r5, #1
  4159f4:	4614      	mov	r4, r2
  4159f6:	2a00      	cmp	r2, #0
  4159f8:	db24      	blt.n	415a44 <_lv_area_align+0xa4>
  4159fa:	eba5 0564 	sub.w	r5, r5, r4, asr #1
  4159fe:	801d      	strh	r5, [r3, #0]
  415a00:	88c4      	ldrh	r4, [r0, #6]
  415a02:	8842      	ldrh	r2, [r0, #2]
  415a04:	1aa4      	subs	r4, r4, r2
  415a06:	b2a4      	uxth	r4, r4
  415a08:	3401      	adds	r4, #1
  415a0a:	b224      	sxth	r4, r4
  415a0c:	88ca      	ldrh	r2, [r1, #6]
  415a0e:	8849      	ldrh	r1, [r1, #2]
  415a10:	1a52      	subs	r2, r2, r1
  415a12:	b292      	uxth	r2, r2
  415a14:	3201      	adds	r2, #1
  415a16:	b212      	sxth	r2, r2
  415a18:	4621      	mov	r1, r4
  415a1a:	2c00      	cmp	r4, #0
  415a1c:	db14      	blt.n	415a48 <_lv_area_align+0xa8>
  415a1e:	1049      	asrs	r1, r1, #1
  415a20:	4614      	mov	r4, r2
  415a22:	2a00      	cmp	r2, #0
  415a24:	db12      	blt.n	415a4c <_lv_area_align+0xac>
  415a26:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  415a2a:	8059      	strh	r1, [r3, #2]
  415a2c:	8802      	ldrh	r2, [r0, #0]
  415a2e:	8819      	ldrh	r1, [r3, #0]
  415a30:	440a      	add	r2, r1
  415a32:	801a      	strh	r2, [r3, #0]
  415a34:	8842      	ldrh	r2, [r0, #2]
  415a36:	8859      	ldrh	r1, [r3, #2]
  415a38:	440a      	add	r2, r1
  415a3a:	805a      	strh	r2, [r3, #2]
  415a3c:	bc30      	pop	{r4, r5}
  415a3e:	4770      	bx	lr
  415a40:	1c65      	adds	r5, r4, #1
  415a42:	e7d6      	b.n	4159f2 <_lv_area_align+0x52>
  415a44:	1c54      	adds	r4, r2, #1
  415a46:	e7d8      	b.n	4159fa <_lv_area_align+0x5a>
  415a48:	1c61      	adds	r1, r4, #1
  415a4a:	e7e8      	b.n	415a1e <_lv_area_align+0x7e>
  415a4c:	1c54      	adds	r4, r2, #1
  415a4e:	e7ea      	b.n	415a26 <_lv_area_align+0x86>
  415a50:	2200      	movs	r2, #0
  415a52:	801a      	strh	r2, [r3, #0]
  415a54:	805a      	strh	r2, [r3, #2]
  415a56:	e7e9      	b.n	415a2c <_lv_area_align+0x8c>
  415a58:	8884      	ldrh	r4, [r0, #4]
  415a5a:	8802      	ldrh	r2, [r0, #0]
  415a5c:	1aa4      	subs	r4, r4, r2
  415a5e:	b2a4      	uxth	r4, r4
  415a60:	3401      	adds	r4, #1
  415a62:	b224      	sxth	r4, r4
  415a64:	888a      	ldrh	r2, [r1, #4]
  415a66:	8809      	ldrh	r1, [r1, #0]
  415a68:	1a52      	subs	r2, r2, r1
  415a6a:	b292      	uxth	r2, r2
  415a6c:	3201      	adds	r2, #1
  415a6e:	b212      	sxth	r2, r2
  415a70:	4621      	mov	r1, r4
  415a72:	2c00      	cmp	r4, #0
  415a74:	db09      	blt.n	415a8a <_lv_area_align+0xea>
  415a76:	1049      	asrs	r1, r1, #1
  415a78:	4614      	mov	r4, r2
  415a7a:	2a00      	cmp	r2, #0
  415a7c:	db07      	blt.n	415a8e <_lv_area_align+0xee>
  415a7e:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  415a82:	8019      	strh	r1, [r3, #0]
  415a84:	2200      	movs	r2, #0
  415a86:	805a      	strh	r2, [r3, #2]
  415a88:	e7d0      	b.n	415a2c <_lv_area_align+0x8c>
  415a8a:	1c61      	adds	r1, r4, #1
  415a8c:	e7f3      	b.n	415a76 <_lv_area_align+0xd6>
  415a8e:	1c54      	adds	r4, r2, #1
  415a90:	e7f5      	b.n	415a7e <_lv_area_align+0xde>
  415a92:	8882      	ldrh	r2, [r0, #4]
  415a94:	8804      	ldrh	r4, [r0, #0]
  415a96:	1b12      	subs	r2, r2, r4
  415a98:	b292      	uxth	r2, r2
  415a9a:	3201      	adds	r2, #1
  415a9c:	b292      	uxth	r2, r2
  415a9e:	888c      	ldrh	r4, [r1, #4]
  415aa0:	8809      	ldrh	r1, [r1, #0]
  415aa2:	1a61      	subs	r1, r4, r1
  415aa4:	b289      	uxth	r1, r1
  415aa6:	3101      	adds	r1, #1
  415aa8:	b289      	uxth	r1, r1
  415aaa:	1a52      	subs	r2, r2, r1
  415aac:	801a      	strh	r2, [r3, #0]
  415aae:	2200      	movs	r2, #0
  415ab0:	805a      	strh	r2, [r3, #2]
  415ab2:	e7bb      	b.n	415a2c <_lv_area_align+0x8c>
  415ab4:	2200      	movs	r2, #0
  415ab6:	801a      	strh	r2, [r3, #0]
  415ab8:	88c2      	ldrh	r2, [r0, #6]
  415aba:	8844      	ldrh	r4, [r0, #2]
  415abc:	1b12      	subs	r2, r2, r4
  415abe:	b292      	uxth	r2, r2
  415ac0:	3201      	adds	r2, #1
  415ac2:	b292      	uxth	r2, r2
  415ac4:	88cc      	ldrh	r4, [r1, #6]
  415ac6:	8849      	ldrh	r1, [r1, #2]
  415ac8:	1a61      	subs	r1, r4, r1
  415aca:	b289      	uxth	r1, r1
  415acc:	3101      	adds	r1, #1
  415ace:	b289      	uxth	r1, r1
  415ad0:	1a52      	subs	r2, r2, r1
  415ad2:	805a      	strh	r2, [r3, #2]
  415ad4:	e7aa      	b.n	415a2c <_lv_area_align+0x8c>
  415ad6:	8884      	ldrh	r4, [r0, #4]
  415ad8:	8802      	ldrh	r2, [r0, #0]
  415ada:	1aa4      	subs	r4, r4, r2
  415adc:	b2a4      	uxth	r4, r4
  415ade:	3401      	adds	r4, #1
  415ae0:	b224      	sxth	r4, r4
  415ae2:	888a      	ldrh	r2, [r1, #4]
  415ae4:	880d      	ldrh	r5, [r1, #0]
  415ae6:	1b52      	subs	r2, r2, r5
  415ae8:	b292      	uxth	r2, r2
  415aea:	3201      	adds	r2, #1
  415aec:	b212      	sxth	r2, r2
  415aee:	4625      	mov	r5, r4
  415af0:	2c00      	cmp	r4, #0
  415af2:	db15      	blt.n	415b20 <_lv_area_align+0x180>
  415af4:	106d      	asrs	r5, r5, #1
  415af6:	4614      	mov	r4, r2
  415af8:	2a00      	cmp	r2, #0
  415afa:	db13      	blt.n	415b24 <_lv_area_align+0x184>
  415afc:	eba5 0564 	sub.w	r5, r5, r4, asr #1
  415b00:	801d      	strh	r5, [r3, #0]
  415b02:	88c2      	ldrh	r2, [r0, #6]
  415b04:	8844      	ldrh	r4, [r0, #2]
  415b06:	1b12      	subs	r2, r2, r4
  415b08:	b292      	uxth	r2, r2
  415b0a:	3201      	adds	r2, #1
  415b0c:	b292      	uxth	r2, r2
  415b0e:	88cc      	ldrh	r4, [r1, #6]
  415b10:	8849      	ldrh	r1, [r1, #2]
  415b12:	1a61      	subs	r1, r4, r1
  415b14:	b289      	uxth	r1, r1
  415b16:	3101      	adds	r1, #1
  415b18:	b289      	uxth	r1, r1
  415b1a:	1a52      	subs	r2, r2, r1
  415b1c:	805a      	strh	r2, [r3, #2]
  415b1e:	e785      	b.n	415a2c <_lv_area_align+0x8c>
  415b20:	1c65      	adds	r5, r4, #1
  415b22:	e7e7      	b.n	415af4 <_lv_area_align+0x154>
  415b24:	1c54      	adds	r4, r2, #1
  415b26:	e7e9      	b.n	415afc <_lv_area_align+0x15c>
  415b28:	8882      	ldrh	r2, [r0, #4]
  415b2a:	8804      	ldrh	r4, [r0, #0]
  415b2c:	1b12      	subs	r2, r2, r4
  415b2e:	b292      	uxth	r2, r2
  415b30:	3201      	adds	r2, #1
  415b32:	b292      	uxth	r2, r2
  415b34:	888c      	ldrh	r4, [r1, #4]
  415b36:	880d      	ldrh	r5, [r1, #0]
  415b38:	1b64      	subs	r4, r4, r5
  415b3a:	b2a4      	uxth	r4, r4
  415b3c:	3401      	adds	r4, #1
  415b3e:	b2a4      	uxth	r4, r4
  415b40:	1b12      	subs	r2, r2, r4
  415b42:	801a      	strh	r2, [r3, #0]
  415b44:	88c2      	ldrh	r2, [r0, #6]
  415b46:	8844      	ldrh	r4, [r0, #2]
  415b48:	1b12      	subs	r2, r2, r4
  415b4a:	b292      	uxth	r2, r2
  415b4c:	3201      	adds	r2, #1
  415b4e:	b292      	uxth	r2, r2
  415b50:	88cc      	ldrh	r4, [r1, #6]
  415b52:	8849      	ldrh	r1, [r1, #2]
  415b54:	1a61      	subs	r1, r4, r1
  415b56:	b289      	uxth	r1, r1
  415b58:	3101      	adds	r1, #1
  415b5a:	b289      	uxth	r1, r1
  415b5c:	1a52      	subs	r2, r2, r1
  415b5e:	805a      	strh	r2, [r3, #2]
  415b60:	e764      	b.n	415a2c <_lv_area_align+0x8c>
  415b62:	2200      	movs	r2, #0
  415b64:	801a      	strh	r2, [r3, #0]
  415b66:	88c4      	ldrh	r4, [r0, #6]
  415b68:	8842      	ldrh	r2, [r0, #2]
  415b6a:	1aa4      	subs	r4, r4, r2
  415b6c:	b2a4      	uxth	r4, r4
  415b6e:	3401      	adds	r4, #1
  415b70:	b224      	sxth	r4, r4
  415b72:	88ca      	ldrh	r2, [r1, #6]
  415b74:	8849      	ldrh	r1, [r1, #2]
  415b76:	1a52      	subs	r2, r2, r1
  415b78:	b292      	uxth	r2, r2
  415b7a:	3201      	adds	r2, #1
  415b7c:	b212      	sxth	r2, r2
  415b7e:	4621      	mov	r1, r4
  415b80:	2c00      	cmp	r4, #0
  415b82:	db07      	blt.n	415b94 <_lv_area_align+0x1f4>
  415b84:	1049      	asrs	r1, r1, #1
  415b86:	4614      	mov	r4, r2
  415b88:	2a00      	cmp	r2, #0
  415b8a:	db05      	blt.n	415b98 <_lv_area_align+0x1f8>
  415b8c:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  415b90:	8059      	strh	r1, [r3, #2]
  415b92:	e74b      	b.n	415a2c <_lv_area_align+0x8c>
  415b94:	1c61      	adds	r1, r4, #1
  415b96:	e7f5      	b.n	415b84 <_lv_area_align+0x1e4>
  415b98:	1c54      	adds	r4, r2, #1
  415b9a:	e7f7      	b.n	415b8c <_lv_area_align+0x1ec>
  415b9c:	8882      	ldrh	r2, [r0, #4]
  415b9e:	8804      	ldrh	r4, [r0, #0]
  415ba0:	1b12      	subs	r2, r2, r4
  415ba2:	b292      	uxth	r2, r2
  415ba4:	3201      	adds	r2, #1
  415ba6:	b292      	uxth	r2, r2
  415ba8:	888c      	ldrh	r4, [r1, #4]
  415baa:	880d      	ldrh	r5, [r1, #0]
  415bac:	1b64      	subs	r4, r4, r5
  415bae:	b2a4      	uxth	r4, r4
  415bb0:	3401      	adds	r4, #1
  415bb2:	b2a4      	uxth	r4, r4
  415bb4:	1b12      	subs	r2, r2, r4
  415bb6:	801a      	strh	r2, [r3, #0]
  415bb8:	88c4      	ldrh	r4, [r0, #6]
  415bba:	8842      	ldrh	r2, [r0, #2]
  415bbc:	1aa4      	subs	r4, r4, r2
  415bbe:	b2a4      	uxth	r4, r4
  415bc0:	3401      	adds	r4, #1
  415bc2:	b224      	sxth	r4, r4
  415bc4:	88ca      	ldrh	r2, [r1, #6]
  415bc6:	8849      	ldrh	r1, [r1, #2]
  415bc8:	1a52      	subs	r2, r2, r1
  415bca:	b292      	uxth	r2, r2
  415bcc:	3201      	adds	r2, #1
  415bce:	b212      	sxth	r2, r2
  415bd0:	4621      	mov	r1, r4
  415bd2:	2c00      	cmp	r4, #0
  415bd4:	db07      	blt.n	415be6 <_lv_area_align+0x246>
  415bd6:	1049      	asrs	r1, r1, #1
  415bd8:	4614      	mov	r4, r2
  415bda:	2a00      	cmp	r2, #0
  415bdc:	db05      	blt.n	415bea <_lv_area_align+0x24a>
  415bde:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  415be2:	8059      	strh	r1, [r3, #2]
  415be4:	e722      	b.n	415a2c <_lv_area_align+0x8c>
  415be6:	1c61      	adds	r1, r4, #1
  415be8:	e7f5      	b.n	415bd6 <_lv_area_align+0x236>
  415bea:	1c54      	adds	r4, r2, #1
  415bec:	e7f7      	b.n	415bde <_lv_area_align+0x23e>
  415bee:	2200      	movs	r2, #0
  415bf0:	801a      	strh	r2, [r3, #0]
  415bf2:	88ca      	ldrh	r2, [r1, #6]
  415bf4:	8849      	ldrh	r1, [r1, #2]
  415bf6:	1a52      	subs	r2, r2, r1
  415bf8:	b292      	uxth	r2, r2
  415bfa:	43d2      	mvns	r2, r2
  415bfc:	805a      	strh	r2, [r3, #2]
  415bfe:	e715      	b.n	415a2c <_lv_area_align+0x8c>
  415c00:	8884      	ldrh	r4, [r0, #4]
  415c02:	8802      	ldrh	r2, [r0, #0]
  415c04:	1aa4      	subs	r4, r4, r2
  415c06:	b2a4      	uxth	r4, r4
  415c08:	3401      	adds	r4, #1
  415c0a:	b224      	sxth	r4, r4
  415c0c:	888a      	ldrh	r2, [r1, #4]
  415c0e:	880d      	ldrh	r5, [r1, #0]
  415c10:	1b52      	subs	r2, r2, r5
  415c12:	b292      	uxth	r2, r2
  415c14:	3201      	adds	r2, #1
  415c16:	b212      	sxth	r2, r2
  415c18:	4625      	mov	r5, r4
  415c1a:	2c00      	cmp	r4, #0
  415c1c:	db0d      	blt.n	415c3a <_lv_area_align+0x29a>
  415c1e:	106d      	asrs	r5, r5, #1
  415c20:	4614      	mov	r4, r2
  415c22:	2a00      	cmp	r2, #0
  415c24:	db0b      	blt.n	415c3e <_lv_area_align+0x29e>
  415c26:	eba5 0564 	sub.w	r5, r5, r4, asr #1
  415c2a:	801d      	strh	r5, [r3, #0]
  415c2c:	88ca      	ldrh	r2, [r1, #6]
  415c2e:	8849      	ldrh	r1, [r1, #2]
  415c30:	1a52      	subs	r2, r2, r1
  415c32:	b292      	uxth	r2, r2
  415c34:	43d2      	mvns	r2, r2
  415c36:	805a      	strh	r2, [r3, #2]
  415c38:	e6f8      	b.n	415a2c <_lv_area_align+0x8c>
  415c3a:	1c65      	adds	r5, r4, #1
  415c3c:	e7ef      	b.n	415c1e <_lv_area_align+0x27e>
  415c3e:	1c54      	adds	r4, r2, #1
  415c40:	e7f1      	b.n	415c26 <_lv_area_align+0x286>
  415c42:	8882      	ldrh	r2, [r0, #4]
  415c44:	8804      	ldrh	r4, [r0, #0]
  415c46:	1b12      	subs	r2, r2, r4
  415c48:	b292      	uxth	r2, r2
  415c4a:	3201      	adds	r2, #1
  415c4c:	b292      	uxth	r2, r2
  415c4e:	888c      	ldrh	r4, [r1, #4]
  415c50:	880d      	ldrh	r5, [r1, #0]
  415c52:	1b64      	subs	r4, r4, r5
  415c54:	b2a4      	uxth	r4, r4
  415c56:	3401      	adds	r4, #1
  415c58:	b2a4      	uxth	r4, r4
  415c5a:	1b12      	subs	r2, r2, r4
  415c5c:	801a      	strh	r2, [r3, #0]
  415c5e:	88ca      	ldrh	r2, [r1, #6]
  415c60:	8849      	ldrh	r1, [r1, #2]
  415c62:	1a52      	subs	r2, r2, r1
  415c64:	b292      	uxth	r2, r2
  415c66:	43d2      	mvns	r2, r2
  415c68:	805a      	strh	r2, [r3, #2]
  415c6a:	e6df      	b.n	415a2c <_lv_area_align+0x8c>
  415c6c:	2200      	movs	r2, #0
  415c6e:	801a      	strh	r2, [r3, #0]
  415c70:	88c2      	ldrh	r2, [r0, #6]
  415c72:	8841      	ldrh	r1, [r0, #2]
  415c74:	1a52      	subs	r2, r2, r1
  415c76:	b292      	uxth	r2, r2
  415c78:	3201      	adds	r2, #1
  415c7a:	805a      	strh	r2, [r3, #2]
  415c7c:	e6d6      	b.n	415a2c <_lv_area_align+0x8c>
  415c7e:	8884      	ldrh	r4, [r0, #4]
  415c80:	8802      	ldrh	r2, [r0, #0]
  415c82:	1aa4      	subs	r4, r4, r2
  415c84:	b2a4      	uxth	r4, r4
  415c86:	3401      	adds	r4, #1
  415c88:	b224      	sxth	r4, r4
  415c8a:	888a      	ldrh	r2, [r1, #4]
  415c8c:	8809      	ldrh	r1, [r1, #0]
  415c8e:	1a52      	subs	r2, r2, r1
  415c90:	b292      	uxth	r2, r2
  415c92:	3201      	adds	r2, #1
  415c94:	b212      	sxth	r2, r2
  415c96:	4621      	mov	r1, r4
  415c98:	2c00      	cmp	r4, #0
  415c9a:	db0d      	blt.n	415cb8 <_lv_area_align+0x318>
  415c9c:	1049      	asrs	r1, r1, #1
  415c9e:	4614      	mov	r4, r2
  415ca0:	2a00      	cmp	r2, #0
  415ca2:	db0b      	blt.n	415cbc <_lv_area_align+0x31c>
  415ca4:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  415ca8:	8019      	strh	r1, [r3, #0]
  415caa:	88c2      	ldrh	r2, [r0, #6]
  415cac:	8841      	ldrh	r1, [r0, #2]
  415cae:	1a52      	subs	r2, r2, r1
  415cb0:	b292      	uxth	r2, r2
  415cb2:	3201      	adds	r2, #1
  415cb4:	805a      	strh	r2, [r3, #2]
  415cb6:	e6b9      	b.n	415a2c <_lv_area_align+0x8c>
  415cb8:	1c61      	adds	r1, r4, #1
  415cba:	e7ef      	b.n	415c9c <_lv_area_align+0x2fc>
  415cbc:	1c54      	adds	r4, r2, #1
  415cbe:	e7f1      	b.n	415ca4 <_lv_area_align+0x304>
  415cc0:	8882      	ldrh	r2, [r0, #4]
  415cc2:	8804      	ldrh	r4, [r0, #0]
  415cc4:	1b12      	subs	r2, r2, r4
  415cc6:	b292      	uxth	r2, r2
  415cc8:	3201      	adds	r2, #1
  415cca:	b292      	uxth	r2, r2
  415ccc:	888c      	ldrh	r4, [r1, #4]
  415cce:	8809      	ldrh	r1, [r1, #0]
  415cd0:	1a61      	subs	r1, r4, r1
  415cd2:	b289      	uxth	r1, r1
  415cd4:	3101      	adds	r1, #1
  415cd6:	b289      	uxth	r1, r1
  415cd8:	1a52      	subs	r2, r2, r1
  415cda:	801a      	strh	r2, [r3, #0]
  415cdc:	88c2      	ldrh	r2, [r0, #6]
  415cde:	8841      	ldrh	r1, [r0, #2]
  415ce0:	1a52      	subs	r2, r2, r1
  415ce2:	b292      	uxth	r2, r2
  415ce4:	3201      	adds	r2, #1
  415ce6:	805a      	strh	r2, [r3, #2]
  415ce8:	e6a0      	b.n	415a2c <_lv_area_align+0x8c>
  415cea:	888a      	ldrh	r2, [r1, #4]
  415cec:	8809      	ldrh	r1, [r1, #0]
  415cee:	1a52      	subs	r2, r2, r1
  415cf0:	b292      	uxth	r2, r2
  415cf2:	43d2      	mvns	r2, r2
  415cf4:	801a      	strh	r2, [r3, #0]
  415cf6:	2200      	movs	r2, #0
  415cf8:	805a      	strh	r2, [r3, #2]
  415cfa:	e697      	b.n	415a2c <_lv_area_align+0x8c>
  415cfc:	888a      	ldrh	r2, [r1, #4]
  415cfe:	880c      	ldrh	r4, [r1, #0]
  415d00:	1b12      	subs	r2, r2, r4
  415d02:	b292      	uxth	r2, r2
  415d04:	43d2      	mvns	r2, r2
  415d06:	801a      	strh	r2, [r3, #0]
  415d08:	88c4      	ldrh	r4, [r0, #6]
  415d0a:	8842      	ldrh	r2, [r0, #2]
  415d0c:	1aa4      	subs	r4, r4, r2
  415d0e:	b2a4      	uxth	r4, r4
  415d10:	3401      	adds	r4, #1
  415d12:	b224      	sxth	r4, r4
  415d14:	88ca      	ldrh	r2, [r1, #6]
  415d16:	8849      	ldrh	r1, [r1, #2]
  415d18:	1a52      	subs	r2, r2, r1
  415d1a:	b292      	uxth	r2, r2
  415d1c:	3201      	adds	r2, #1
  415d1e:	b212      	sxth	r2, r2
  415d20:	4621      	mov	r1, r4
  415d22:	2c00      	cmp	r4, #0
  415d24:	db07      	blt.n	415d36 <_lv_area_align+0x396>
  415d26:	1049      	asrs	r1, r1, #1
  415d28:	4614      	mov	r4, r2
  415d2a:	2a00      	cmp	r2, #0
  415d2c:	db05      	blt.n	415d3a <_lv_area_align+0x39a>
  415d2e:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  415d32:	8059      	strh	r1, [r3, #2]
  415d34:	e67a      	b.n	415a2c <_lv_area_align+0x8c>
  415d36:	1c61      	adds	r1, r4, #1
  415d38:	e7f5      	b.n	415d26 <_lv_area_align+0x386>
  415d3a:	1c54      	adds	r4, r2, #1
  415d3c:	e7f7      	b.n	415d2e <_lv_area_align+0x38e>
  415d3e:	888a      	ldrh	r2, [r1, #4]
  415d40:	880c      	ldrh	r4, [r1, #0]
  415d42:	1b12      	subs	r2, r2, r4
  415d44:	b292      	uxth	r2, r2
  415d46:	43d2      	mvns	r2, r2
  415d48:	801a      	strh	r2, [r3, #0]
  415d4a:	88c2      	ldrh	r2, [r0, #6]
  415d4c:	8844      	ldrh	r4, [r0, #2]
  415d4e:	1b12      	subs	r2, r2, r4
  415d50:	b292      	uxth	r2, r2
  415d52:	3201      	adds	r2, #1
  415d54:	b292      	uxth	r2, r2
  415d56:	88cc      	ldrh	r4, [r1, #6]
  415d58:	8849      	ldrh	r1, [r1, #2]
  415d5a:	1a61      	subs	r1, r4, r1
  415d5c:	b289      	uxth	r1, r1
  415d5e:	3101      	adds	r1, #1
  415d60:	b289      	uxth	r1, r1
  415d62:	1a52      	subs	r2, r2, r1
  415d64:	805a      	strh	r2, [r3, #2]
  415d66:	e661      	b.n	415a2c <_lv_area_align+0x8c>
  415d68:	8882      	ldrh	r2, [r0, #4]
  415d6a:	8801      	ldrh	r1, [r0, #0]
  415d6c:	1a52      	subs	r2, r2, r1
  415d6e:	b292      	uxth	r2, r2
  415d70:	3201      	adds	r2, #1
  415d72:	801a      	strh	r2, [r3, #0]
  415d74:	2200      	movs	r2, #0
  415d76:	805a      	strh	r2, [r3, #2]
  415d78:	e658      	b.n	415a2c <_lv_area_align+0x8c>
  415d7a:	8882      	ldrh	r2, [r0, #4]
  415d7c:	8804      	ldrh	r4, [r0, #0]
  415d7e:	1b12      	subs	r2, r2, r4
  415d80:	b292      	uxth	r2, r2
  415d82:	3201      	adds	r2, #1
  415d84:	801a      	strh	r2, [r3, #0]
  415d86:	88c4      	ldrh	r4, [r0, #6]
  415d88:	8842      	ldrh	r2, [r0, #2]
  415d8a:	1aa4      	subs	r4, r4, r2
  415d8c:	b2a4      	uxth	r4, r4
  415d8e:	3401      	adds	r4, #1
  415d90:	b224      	sxth	r4, r4
  415d92:	88ca      	ldrh	r2, [r1, #6]
  415d94:	8849      	ldrh	r1, [r1, #2]
  415d96:	1a52      	subs	r2, r2, r1
  415d98:	b292      	uxth	r2, r2
  415d9a:	3201      	adds	r2, #1
  415d9c:	b212      	sxth	r2, r2
  415d9e:	4621      	mov	r1, r4
  415da0:	2c00      	cmp	r4, #0
  415da2:	db07      	blt.n	415db4 <_lv_area_align+0x414>
  415da4:	1049      	asrs	r1, r1, #1
  415da6:	4614      	mov	r4, r2
  415da8:	2a00      	cmp	r2, #0
  415daa:	db05      	blt.n	415db8 <_lv_area_align+0x418>
  415dac:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  415db0:	8059      	strh	r1, [r3, #2]
  415db2:	e63b      	b.n	415a2c <_lv_area_align+0x8c>
  415db4:	1c61      	adds	r1, r4, #1
  415db6:	e7f5      	b.n	415da4 <_lv_area_align+0x404>
  415db8:	1c54      	adds	r4, r2, #1
  415dba:	e7f7      	b.n	415dac <_lv_area_align+0x40c>
  415dbc:	8882      	ldrh	r2, [r0, #4]
  415dbe:	8804      	ldrh	r4, [r0, #0]
  415dc0:	1b12      	subs	r2, r2, r4
  415dc2:	b292      	uxth	r2, r2
  415dc4:	3201      	adds	r2, #1
  415dc6:	801a      	strh	r2, [r3, #0]
  415dc8:	88c2      	ldrh	r2, [r0, #6]
  415dca:	8844      	ldrh	r4, [r0, #2]
  415dcc:	1b12      	subs	r2, r2, r4
  415dce:	b292      	uxth	r2, r2
  415dd0:	3201      	adds	r2, #1
  415dd2:	b292      	uxth	r2, r2
  415dd4:	88cc      	ldrh	r4, [r1, #6]
  415dd6:	8849      	ldrh	r1, [r1, #2]
  415dd8:	1a61      	subs	r1, r4, r1
  415dda:	b289      	uxth	r1, r1
  415ddc:	3101      	adds	r1, #1
  415dde:	b289      	uxth	r1, r1
  415de0:	1a52      	subs	r2, r2, r1
  415de2:	805a      	strh	r2, [r3, #2]
  415de4:	e622      	b.n	415a2c <_lv_area_align+0x8c>
	...

00415de8 <lv_async_task_cb>:
  415de8:	b510      	push	{r4, lr}
  415dea:	68c4      	ldr	r4, [r0, #12]
  415dec:	6823      	ldr	r3, [r4, #0]
  415dee:	6860      	ldr	r0, [r4, #4]
  415df0:	4798      	blx	r3
  415df2:	4620      	mov	r0, r4
  415df4:	4b01      	ldr	r3, [pc, #4]	; (415dfc <lv_async_task_cb+0x14>)
  415df6:	4798      	blx	r3
  415df8:	bd10      	pop	{r4, pc}
  415dfa:	bf00      	nop
  415dfc:	0041679d 	.word	0x0041679d

00415e00 <lv_async_call>:
  415e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  415e02:	4606      	mov	r6, r0
  415e04:	460d      	mov	r5, r1
  415e06:	2008      	movs	r0, #8
  415e08:	4b0c      	ldr	r3, [pc, #48]	; (415e3c <lv_async_call+0x3c>)
  415e0a:	4798      	blx	r3
  415e0c:	b198      	cbz	r0, 415e36 <lv_async_call+0x36>
  415e0e:	4604      	mov	r4, r0
  415e10:	4603      	mov	r3, r0
  415e12:	2205      	movs	r2, #5
  415e14:	2100      	movs	r1, #0
  415e16:	480a      	ldr	r0, [pc, #40]	; (415e40 <lv_async_call+0x40>)
  415e18:	4f0a      	ldr	r7, [pc, #40]	; (415e44 <lv_async_call+0x44>)
  415e1a:	47b8      	blx	r7
  415e1c:	b130      	cbz	r0, 415e2c <lv_async_call+0x2c>
  415e1e:	6026      	str	r6, [r4, #0]
  415e20:	6065      	str	r5, [r4, #4]
  415e22:	2101      	movs	r1, #1
  415e24:	4b08      	ldr	r3, [pc, #32]	; (415e48 <lv_async_call+0x48>)
  415e26:	4798      	blx	r3
  415e28:	2001      	movs	r0, #1
  415e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  415e2c:	4620      	mov	r0, r4
  415e2e:	4b07      	ldr	r3, [pc, #28]	; (415e4c <lv_async_call+0x4c>)
  415e30:	4798      	blx	r3
  415e32:	2000      	movs	r0, #0
  415e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  415e36:	2000      	movs	r0, #0
  415e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  415e3a:	bf00      	nop
  415e3c:	004166d9 	.word	0x004166d9
  415e40:	00415de9 	.word	0x00415de9
  415e44:	00417645 	.word	0x00417645
  415e48:	00417a25 	.word	0x00417a25
  415e4c:	0041679d 	.word	0x0041679d

00415e50 <lv_color_fill>:

LV_ATTRIBUTE_FAST_MEM void lv_color_fill(lv_color_t * buf, lv_color_t color, uint32_t px_num)
{
#if LV_COLOR_DEPTH == 16
    uintptr_t buf_int = (uintptr_t) buf;
    if(buf_int & 0x3) {
  415e50:	f010 0f03 	tst.w	r0, #3
  415e54:	d002      	beq.n	415e5c <lv_color_fill+0xc>
        *buf = color;
  415e56:	f820 1b02 	strh.w	r1, [r0], #2
        buf++;
        px_num--;
  415e5a:	3a01      	subs	r2, #1
    }

    uint32_t c32 = color.full + (color.full << 16);
  415e5c:	b28b      	uxth	r3, r1
  415e5e:	eb03 4303 	add.w	r3, r3, r3, lsl #16
    uint32_t * buf32 = (uint32_t *)buf;

    while(px_num > 16) {
  415e62:	e009      	b.n	415e78 <lv_color_fill+0x28>
        *buf32 = c32;
  415e64:	6003      	str	r3, [r0, #0]
        buf32++;
        *buf32 = c32;
  415e66:	6043      	str	r3, [r0, #4]
        buf32++;
        *buf32 = c32;
  415e68:	6083      	str	r3, [r0, #8]
        buf32++;
        *buf32 = c32;
  415e6a:	60c3      	str	r3, [r0, #12]
        buf32++;

        *buf32 = c32;
  415e6c:	6103      	str	r3, [r0, #16]
        buf32++;
        *buf32 = c32;
  415e6e:	6143      	str	r3, [r0, #20]
        buf32++;
        *buf32 = c32;
  415e70:	6183      	str	r3, [r0, #24]
        buf32++;
        *buf32 = c32;
  415e72:	61c3      	str	r3, [r0, #28]
        buf32++;
  415e74:	3020      	adds	r0, #32

        px_num -= 16;
  415e76:	3a10      	subs	r2, #16
    while(px_num > 16) {
  415e78:	2a10      	cmp	r2, #16
  415e7a:	d8f3      	bhi.n	415e64 <lv_color_fill+0x14>
  415e7c:	e002      	b.n	415e84 <lv_color_fill+0x34>
    }

    buf = (lv_color_t *)buf32;

    while(px_num) {
        *buf = color;
  415e7e:	f820 1b02 	strh.w	r1, [r0], #2
        buf++;
        px_num --;
  415e82:	3a01      	subs	r2, #1
    while(px_num) {
  415e84:	2a00      	cmp	r2, #0
  415e86:	d1fa      	bne.n	415e7e <lv_color_fill+0x2e>
        *buf = color;
        buf++;
        px_num --;
    }
#endif
}
  415e88:	4770      	bx	lr
	...

00415e8c <lv_color_lighten>:

lv_color_t lv_color_lighten(lv_color_t c, lv_opa_t lvl)
{
  415e8c:	b4f0      	push	{r4, r5, r6, r7}
  415e8e:	4602      	mov	r2, r0
    return lv_color_mix(LV_COLOR_WHITE, c, lvl);
  415e90:	4b23      	ldr	r3, [pc, #140]	; (415f20 <lv_color_lighten+0x94>)
  415e92:	881c      	ldrh	r4, [r3, #0]
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  415e94:	f3c4 03c4 	ubfx	r3, r4, #3, #5
  415e98:	f3c2 00c4 	ubfx	r0, r2, #3, #5
  415e9c:	f1c1 05ff 	rsb	r5, r1, #255	; 0xff
  415ea0:	fb05 f000 	mul.w	r0, r5, r0
  415ea4:	fb01 0303 	mla	r3, r1, r3, r0
  415ea8:	3380      	adds	r3, #128	; 0x80
  415eaa:	eb03 2003 	add.w	r0, r3, r3, lsl #8
  415eae:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
  415eb2:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  415eb6:	f04f 0000 	mov.w	r0, #0
  415eba:	f363 00c7 	bfi	r0, r3, #3, #5
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  415ebe:	f004 0607 	and.w	r6, r4, #7
  415ec2:	f3c4 3342 	ubfx	r3, r4, #13, #3
  415ec6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  415eca:	f002 0707 	and.w	r7, r2, #7
  415ece:	f3c2 3642 	ubfx	r6, r2, #13, #3
  415ed2:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
  415ed6:	fb06 f605 	mul.w	r6, r6, r5
  415eda:	fb03 6301 	mla	r3, r3, r1, r6
  415ede:	3380      	adds	r3, #128	; 0x80
  415ee0:	eb03 2603 	add.w	r6, r3, r3, lsl #8
  415ee4:	eb03 13c6 	add.w	r3, r3, r6, lsl #7
  415ee8:	f3c3 6682 	ubfx	r6, r3, #26, #3
  415eec:	f366 0002 	bfi	r0, r6, #0, #3
  415ef0:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  415ef4:	f363 304f 	bfi	r0, r3, #13, #3
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  415ef8:	f3c4 2404 	ubfx	r4, r4, #8, #5
  415efc:	f3c2 2204 	ubfx	r2, r2, #8, #5
  415f00:	fb02 f505 	mul.w	r5, r2, r5
  415f04:	fb04 5101 	mla	r1, r4, r1, r5
  415f08:	3180      	adds	r1, #128	; 0x80
  415f0a:	eb01 2301 	add.w	r3, r1, r1, lsl #8
  415f0e:	eb01 11c3 	add.w	r1, r1, r3, lsl #7
  415f12:	f3c1 51c4 	ubfx	r1, r1, #23, #5
  415f16:	f361 200c 	bfi	r0, r1, #8, #5
}
  415f1a:	bcf0      	pop	{r4, r5, r6, r7}
  415f1c:	4770      	bx	lr
  415f1e:	bf00      	nop
  415f20:	0042fcd0 	.word	0x0042fcd0

00415f24 <lv_color_darken>:

lv_color_t lv_color_darken(lv_color_t c, lv_opa_t lvl)
{
  415f24:	b410      	push	{r4}
  415f26:	4603      	mov	r3, r0
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  415f28:	f3c3 02c4 	ubfx	r2, r3, #3, #5
  415f2c:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
  415f30:	fb01 f202 	mul.w	r2, r1, r2
  415f34:	3280      	adds	r2, #128	; 0x80
  415f36:	eb02 2002 	add.w	r0, r2, r2, lsl #8
  415f3a:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
  415f3e:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  415f42:	f04f 0000 	mov.w	r0, #0
  415f46:	f362 00c7 	bfi	r0, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  415f4a:	f003 0407 	and.w	r4, r3, #7
  415f4e:	f3c3 3242 	ubfx	r2, r3, #13, #3
  415f52:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
  415f56:	fb02 f201 	mul.w	r2, r2, r1
  415f5a:	3280      	adds	r2, #128	; 0x80
  415f5c:	eb02 2402 	add.w	r4, r2, r2, lsl #8
  415f60:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
  415f64:	f3c2 6482 	ubfx	r4, r2, #26, #3
  415f68:	f364 0002 	bfi	r0, r4, #0, #3
  415f6c:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  415f70:	f362 304f 	bfi	r0, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  415f74:	f3c3 2304 	ubfx	r3, r3, #8, #5
  415f78:	fb03 f301 	mul.w	r3, r3, r1
  415f7c:	3380      	adds	r3, #128	; 0x80
  415f7e:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  415f82:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  415f86:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  415f8a:	f363 200c 	bfi	r0, r3, #8, #5
    return lv_color_mix(LV_COLOR_BLACK, c, lvl);
}
  415f8e:	f85d 4b04 	ldr.w	r4, [sp], #4
  415f92:	4770      	bx	lr

00415f94 <lv_debug_check_null>:
  415f94:	b108      	cbz	r0, 415f9a <lv_debug_check_null+0x6>
  415f96:	2001      	movs	r0, #1
  415f98:	4770      	bx	lr
  415f9a:	2000      	movs	r0, #0
  415f9c:	4770      	bx	lr
	...

00415fa0 <lv_debug_log_error>:
  415fa0:	b570      	push	{r4, r5, r6, lr}
  415fa2:	b0c0      	sub	sp, #256	; 0x100
  415fa4:	4606      	mov	r6, r0
  415fa6:	4614      	mov	r4, r2
  415fa8:	4b15      	ldr	r3, [pc, #84]	; (416000 <lv_debug_log_error+0x60>)
  415faa:	4798      	blx	r3
  415fac:	28e5      	cmp	r0, #229	; 0xe5
  415fae:	d901      	bls.n	415fb4 <lv_debug_log_error+0x14>
  415fb0:	b040      	add	sp, #256	; 0x100
  415fb2:	bd70      	pop	{r4, r5, r6, pc}
  415fb4:	4605      	mov	r5, r0
  415fb6:	4602      	mov	r2, r0
  415fb8:	4631      	mov	r1, r6
  415fba:	4668      	mov	r0, sp
  415fbc:	4b11      	ldr	r3, [pc, #68]	; (416004 <lv_debug_log_error+0x64>)
  415fbe:	4798      	blx	r3
  415fc0:	eb0d 0105 	add.w	r1, sp, r5
  415fc4:	2320      	movs	r3, #32
  415fc6:	f80d 3005 	strb.w	r3, [sp, r5]
  415fca:	2328      	movs	r3, #40	; 0x28
  415fcc:	704b      	strb	r3, [r1, #1]
  415fce:	2330      	movs	r3, #48	; 0x30
  415fd0:	708b      	strb	r3, [r1, #2]
  415fd2:	2378      	movs	r3, #120	; 0x78
  415fd4:	70cb      	strb	r3, [r1, #3]
  415fd6:	3104      	adds	r1, #4
  415fd8:	2307      	movs	r3, #7
  415fda:	e00a      	b.n	415ff2 <lv_debug_log_error+0x52>
  415fdc:	009a      	lsls	r2, r3, #2
  415fde:	fa24 f202 	lsr.w	r2, r4, r2
  415fe2:	f002 020f 	and.w	r2, r2, #15
  415fe6:	4808      	ldr	r0, [pc, #32]	; (416008 <lv_debug_log_error+0x68>)
  415fe8:	5c82      	ldrb	r2, [r0, r2]
  415fea:	f801 2b01 	strb.w	r2, [r1], #1
  415fee:	3b01      	subs	r3, #1
  415ff0:	b25b      	sxtb	r3, r3
  415ff2:	2b00      	cmp	r3, #0
  415ff4:	daf2      	bge.n	415fdc <lv_debug_log_error+0x3c>
  415ff6:	2329      	movs	r3, #41	; 0x29
  415ff8:	700b      	strb	r3, [r1, #0]
  415ffa:	2300      	movs	r3, #0
  415ffc:	704b      	strb	r3, [r1, #1]
  415ffe:	e7d7      	b.n	415fb0 <lv_debug_log_error+0x10>
  416000:	004285c1 	.word	0x004285c1
  416004:	004168e9 	.word	0x004168e9
  416008:	0042fcd4 	.word	0x0042fcd4

0041600c <lv_fs_get_real_path>:
static const char * lv_fs_get_real_path(const char * path)
{
    /* Example path: "S:/folder/file.txt"
     * Leave the letter and the : / \ characters*/

    path++; /*Ignore the driver letter*/
  41600c:	3001      	adds	r0, #1

    while(*path != '\0') {
  41600e:	e000      	b.n	416012 <lv_fs_get_real_path+0x6>
        if(*path == ':' || *path == '\\' || *path == '/') {
            path++;
  416010:	3001      	adds	r0, #1
    while(*path != '\0') {
  416012:	7803      	ldrb	r3, [r0, #0]
  416014:	b12b      	cbz	r3, 416022 <lv_fs_get_real_path+0x16>
        if(*path == ':' || *path == '\\' || *path == '/') {
  416016:	2b5c      	cmp	r3, #92	; 0x5c
  416018:	bf18      	it	ne
  41601a:	2b3a      	cmpne	r3, #58	; 0x3a
  41601c:	d0f8      	beq.n	416010 <lv_fs_get_real_path+0x4>
  41601e:	2b2f      	cmp	r3, #47	; 0x2f
  416020:	d0f6      	beq.n	416010 <lv_fs_get_real_path+0x4>
            break;
        }
    }

    return path;
}
  416022:	4770      	bx	lr

00416024 <_lv_fs_init>:
{
  416024:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_drv_ll), sizeof(lv_fs_drv_t));
  416026:	2144      	movs	r1, #68	; 0x44
  416028:	4801      	ldr	r0, [pc, #4]	; (416030 <_lv_fs_init+0xc>)
  41602a:	4b02      	ldr	r3, [pc, #8]	; (416034 <_lv_fs_init+0x10>)
  41602c:	4798      	blx	r3
  41602e:	bd08      	pop	{r3, pc}
  416030:	2043a328 	.word	0x2043a328
  416034:	004161fb 	.word	0x004161fb

00416038 <lv_fs_close>:
{
  416038:	b538      	push	{r3, r4, r5, lr}
    if(file_p->drv == NULL) {
  41603a:	6843      	ldr	r3, [r0, #4]
  41603c:	b173      	cbz	r3, 41605c <lv_fs_close+0x24>
    if(file_p->drv->close_cb == NULL) {
  41603e:	691a      	ldr	r2, [r3, #16]
  416040:	b172      	cbz	r2, 416060 <lv_fs_close+0x28>
  416042:	4604      	mov	r4, r0
    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
  416044:	6801      	ldr	r1, [r0, #0]
  416046:	4618      	mov	r0, r3
  416048:	4790      	blx	r2
  41604a:	4605      	mov	r5, r0
    lv_mem_free(file_p->file_d); /*Clean up*/
  41604c:	6820      	ldr	r0, [r4, #0]
  41604e:	4b05      	ldr	r3, [pc, #20]	; (416064 <lv_fs_close+0x2c>)
  416050:	4798      	blx	r3
    file_p->file_d = NULL;
  416052:	2300      	movs	r3, #0
  416054:	6023      	str	r3, [r4, #0]
    file_p->drv    = NULL;
  416056:	6063      	str	r3, [r4, #4]
}
  416058:	4628      	mov	r0, r5
  41605a:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
  41605c:	250b      	movs	r5, #11
  41605e:	e7fb      	b.n	416058 <lv_fs_close+0x20>
        return LV_FS_RES_NOT_IMP;
  416060:	2509      	movs	r5, #9
  416062:	e7f9      	b.n	416058 <lv_fs_close+0x20>
  416064:	0041679d 	.word	0x0041679d

00416068 <lv_fs_read>:
{
  416068:	b5f0      	push	{r4, r5, r6, r7, lr}
  41606a:	b085      	sub	sp, #20
    if(br != NULL) *br = 0;
  41606c:	461e      	mov	r6, r3
  41606e:	b10b      	cbz	r3, 416074 <lv_fs_read+0xc>
  416070:	2300      	movs	r3, #0
  416072:	6033      	str	r3, [r6, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
  416074:	6845      	ldr	r5, [r0, #4]
  416076:	b18d      	cbz	r5, 41609c <lv_fs_read+0x34>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
  416078:	69af      	ldr	r7, [r5, #24]
  41607a:	b18f      	cbz	r7, 4160a0 <lv_fs_read+0x38>
  41607c:	4613      	mov	r3, r2
  41607e:	460a      	mov	r2, r1
  416080:	4604      	mov	r4, r0
    uint32_t br_tmp = 0;
  416082:	a804      	add	r0, sp, #16
  416084:	2100      	movs	r1, #0
  416086:	f840 1d04 	str.w	r1, [r0, #-4]!
    lv_fs_res_t res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
  41608a:	6821      	ldr	r1, [r4, #0]
  41608c:	9000      	str	r0, [sp, #0]
  41608e:	4628      	mov	r0, r5
  416090:	47b8      	blx	r7
    if(br != NULL) *br = br_tmp;
  416092:	b10e      	cbz	r6, 416098 <lv_fs_read+0x30>
  416094:	9b03      	ldr	r3, [sp, #12]
  416096:	6033      	str	r3, [r6, #0]
}
  416098:	b005      	add	sp, #20
  41609a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
  41609c:	200b      	movs	r0, #11
  41609e:	e7fb      	b.n	416098 <lv_fs_read+0x30>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
  4160a0:	2009      	movs	r0, #9
  4160a2:	e7f9      	b.n	416098 <lv_fs_read+0x30>

004160a4 <lv_fs_seek>:
{
  4160a4:	b538      	push	{r3, r4, r5, lr}
    if(file_p->drv == NULL) {
  4160a6:	6844      	ldr	r4, [r0, #4]
  4160a8:	b134      	cbz	r4, 4160b8 <lv_fs_seek+0x14>
    if(file_p->drv->seek_cb == NULL) {
  4160aa:	6a25      	ldr	r5, [r4, #32]
  4160ac:	b135      	cbz	r5, 4160bc <lv_fs_seek+0x18>
  4160ae:	460a      	mov	r2, r1
    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos);
  4160b0:	6801      	ldr	r1, [r0, #0]
  4160b2:	4620      	mov	r0, r4
  4160b4:	47a8      	blx	r5
    return res;
  4160b6:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
  4160b8:	200b      	movs	r0, #11
  4160ba:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_NOT_IMP;
  4160bc:	2009      	movs	r0, #9
}
  4160be:	bd38      	pop	{r3, r4, r5, pc}

004160c0 <lv_fs_get_drv>:
{
  4160c0:	b510      	push	{r4, lr}
  4160c2:	4604      	mov	r4, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
  4160c4:	4806      	ldr	r0, [pc, #24]	; (4160e0 <lv_fs_get_drv+0x20>)
  4160c6:	4b07      	ldr	r3, [pc, #28]	; (4160e4 <lv_fs_get_drv+0x24>)
  4160c8:	4798      	blx	r3
  4160ca:	b138      	cbz	r0, 4160dc <lv_fs_get_drv+0x1c>
        if(drv->letter == letter) {
  4160cc:	7803      	ldrb	r3, [r0, #0]
  4160ce:	42a3      	cmp	r3, r4
  4160d0:	d004      	beq.n	4160dc <lv_fs_get_drv+0x1c>
    _LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
  4160d2:	4601      	mov	r1, r0
  4160d4:	4802      	ldr	r0, [pc, #8]	; (4160e0 <lv_fs_get_drv+0x20>)
  4160d6:	4b04      	ldr	r3, [pc, #16]	; (4160e8 <lv_fs_get_drv+0x28>)
  4160d8:	4798      	blx	r3
  4160da:	e7f6      	b.n	4160ca <lv_fs_get_drv+0xa>
}
  4160dc:	bd10      	pop	{r4, pc}
  4160de:	bf00      	nop
  4160e0:	2043a328 	.word	0x2043a328
  4160e4:	004162a5 	.word	0x004162a5
  4160e8:	004162b9 	.word	0x004162b9

004160ec <lv_fs_open>:
{
  4160ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    file_p->drv    = NULL;
  4160f0:	2400      	movs	r4, #0
  4160f2:	6044      	str	r4, [r0, #4]
    file_p->file_d = NULL;
  4160f4:	6004      	str	r4, [r0, #0]
    if(path == NULL) return LV_FS_RES_INV_PARAM;
  4160f6:	2900      	cmp	r1, #0
  4160f8:	d044      	beq.n	416184 <lv_fs_open+0x98>
  4160fa:	460d      	mov	r5, r1
  4160fc:	4690      	mov	r8, r2
  4160fe:	4604      	mov	r4, r0
    file_p->drv = lv_fs_get_drv(letter);
  416100:	7808      	ldrb	r0, [r1, #0]
  416102:	4b23      	ldr	r3, [pc, #140]	; (416190 <lv_fs_open+0xa4>)
  416104:	4798      	blx	r3
  416106:	6060      	str	r0, [r4, #4]
    if(file_p->drv == NULL) {
  416108:	2800      	cmp	r0, #0
  41610a:	d03f      	beq.n	41618c <lv_fs_open+0xa0>
    if(file_p->drv->ready_cb != NULL) {
  41610c:	6883      	ldr	r3, [r0, #8]
  41610e:	b10b      	cbz	r3, 416114 <lv_fs_open+0x28>
        if(file_p->drv->ready_cb(file_p->drv) == false) {
  416110:	4798      	blx	r3
  416112:	b1a0      	cbz	r0, 41613e <lv_fs_open+0x52>
    if(file_p->drv->open_cb == NULL) {
  416114:	6867      	ldr	r7, [r4, #4]
  416116:	68fe      	ldr	r6, [r7, #12]
  416118:	b1ae      	cbz	r6, 416146 <lv_fs_open+0x5a>
    const char * real_path = lv_fs_get_real_path(path);
  41611a:	4628      	mov	r0, r5
  41611c:	4b1d      	ldr	r3, [pc, #116]	; (416194 <lv_fs_open+0xa8>)
  41611e:	4798      	blx	r3
  416120:	4605      	mov	r5, r0
    if(file_p->drv->file_size == 0) {  /*Is file_d zero size?*/
  416122:	8878      	ldrh	r0, [r7, #2]
  416124:	b198      	cbz	r0, 41614e <lv_fs_open+0x62>
    file_p->file_d = lv_mem_alloc(file_p->drv->file_size);
  416126:	4b1c      	ldr	r3, [pc, #112]	; (416198 <lv_fs_open+0xac>)
  416128:	4798      	blx	r3
  41612a:	6020      	str	r0, [r4, #0]
    LV_ASSERT_MEM(file_p->file_d);
  41612c:	4b1b      	ldr	r3, [pc, #108]	; (41619c <lv_fs_open+0xb0>)
  41612e:	4798      	blx	r3
  416130:	b1a0      	cbz	r0, 41615c <lv_fs_open+0x70>
    if(file_p->file_d == NULL) {
  416132:	6821      	ldr	r1, [r4, #0]
  416134:	b9c1      	cbnz	r1, 416168 <lv_fs_open+0x7c>
        file_p->drv = NULL;
  416136:	2300      	movs	r3, #0
  416138:	6063      	str	r3, [r4, #4]
        return LV_FS_RES_OUT_OF_MEM; /* Out of memory */
  41613a:	250a      	movs	r5, #10
  41613c:	e023      	b.n	416186 <lv_fs_open+0x9a>
            file_p->drv = NULL;
  41613e:	2300      	movs	r3, #0
  416140:	6063      	str	r3, [r4, #4]
            return LV_FS_RES_HW_ERR;
  416142:	2501      	movs	r5, #1
  416144:	e01f      	b.n	416186 <lv_fs_open+0x9a>
        file_p->drv = NULL;
  416146:	2300      	movs	r3, #0
  416148:	6063      	str	r3, [r4, #4]
        return LV_FS_RES_NOT_IMP;
  41614a:	2509      	movs	r5, #9
  41614c:	e01b      	b.n	416186 <lv_fs_open+0x9a>
        return file_p->drv->open_cb(file_p->drv, &file_p->file_d, real_path, mode);
  41614e:	4643      	mov	r3, r8
  416150:	462a      	mov	r2, r5
  416152:	4621      	mov	r1, r4
  416154:	4638      	mov	r0, r7
  416156:	47b0      	blx	r6
  416158:	4605      	mov	r5, r0
  41615a:	e014      	b.n	416186 <lv_fs_open+0x9a>
    LV_ASSERT_MEM(file_p->file_d);
  41615c:	6822      	ldr	r2, [r4, #0]
  41615e:	2300      	movs	r3, #0
  416160:	480f      	ldr	r0, [pc, #60]	; (4161a0 <lv_fs_open+0xb4>)
  416162:	4910      	ldr	r1, [pc, #64]	; (4161a4 <lv_fs_open+0xb8>)
  416164:	4788      	blx	r1
  416166:	e7fe      	b.n	416166 <lv_fs_open+0x7a>
    lv_fs_res_t res = file_p->drv->open_cb(file_p->drv, file_p->file_d, real_path, mode);
  416168:	6860      	ldr	r0, [r4, #4]
  41616a:	68c7      	ldr	r7, [r0, #12]
  41616c:	4643      	mov	r3, r8
  41616e:	462a      	mov	r2, r5
  416170:	47b8      	blx	r7
    if(res != LV_FS_RES_OK) {
  416172:	4605      	mov	r5, r0
  416174:	b138      	cbz	r0, 416186 <lv_fs_open+0x9a>
        lv_mem_free(file_p->file_d);
  416176:	6820      	ldr	r0, [r4, #0]
  416178:	4b0b      	ldr	r3, [pc, #44]	; (4161a8 <lv_fs_open+0xbc>)
  41617a:	4798      	blx	r3
        file_p->file_d = NULL;
  41617c:	2300      	movs	r3, #0
  41617e:	6023      	str	r3, [r4, #0]
        file_p->drv    = NULL;
  416180:	6063      	str	r3, [r4, #4]
  416182:	e000      	b.n	416186 <lv_fs_open+0x9a>
    if(path == NULL) return LV_FS_RES_INV_PARAM;
  416184:	250b      	movs	r5, #11
}
  416186:	4628      	mov	r0, r5
  416188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LV_FS_RES_NOT_EX;
  41618c:	2503      	movs	r5, #3
  41618e:	e7fa      	b.n	416186 <lv_fs_open+0x9a>
  416190:	004160c1 	.word	0x004160c1
  416194:	0041600d 	.word	0x0041600d
  416198:	004166d9 	.word	0x004166d9
  41619c:	00415f95 	.word	0x00415f95
  4161a0:	0042c714 	.word	0x0042c714
  4161a4:	00415fa1 	.word	0x00415fa1
  4161a8:	0041679d 	.word	0x0041679d

004161ac <lv_fs_get_ext>:
{
  4161ac:	b510      	push	{r4, lr}
  4161ae:	4604      	mov	r4, r0
    for(i = strlen(fn); i > 0; i--) {
  4161b0:	4b09      	ldr	r3, [pc, #36]	; (4161d8 <lv_fs_get_ext+0x2c>)
  4161b2:	4798      	blx	r3
  4161b4:	b158      	cbz	r0, 4161ce <lv_fs_get_ext+0x22>
        if(fn[i] == '.') {
  4161b6:	5c23      	ldrb	r3, [r4, r0]
  4161b8:	2b2e      	cmp	r3, #46	; 0x2e
  4161ba:	d005      	beq.n	4161c8 <lv_fs_get_ext+0x1c>
        else if(fn[i] == '/' || fn[i] == '\\') {
  4161bc:	2b5c      	cmp	r3, #92	; 0x5c
  4161be:	bf18      	it	ne
  4161c0:	2b2f      	cmpne	r3, #47	; 0x2f
  4161c2:	d006      	beq.n	4161d2 <lv_fs_get_ext+0x26>
    for(i = strlen(fn); i > 0; i--) {
  4161c4:	3801      	subs	r0, #1
  4161c6:	e7f5      	b.n	4161b4 <lv_fs_get_ext+0x8>
            return &fn[i + 1];
  4161c8:	3001      	adds	r0, #1
  4161ca:	4420      	add	r0, r4
  4161cc:	bd10      	pop	{r4, pc}
    return ""; /*Empty string if no '.' in the file name. */
  4161ce:	4803      	ldr	r0, [pc, #12]	; (4161dc <lv_fs_get_ext+0x30>)
  4161d0:	bd10      	pop	{r4, pc}
            return ""; /*No extension if a '\' or '/' found*/
  4161d2:	4802      	ldr	r0, [pc, #8]	; (4161dc <lv_fs_get_ext+0x30>)
}
  4161d4:	bd10      	pop	{r4, pc}
  4161d6:	bf00      	nop
  4161d8:	004285c1 	.word	0x004285c1
  4161dc:	00431730 	.word	0x00431730

004161e0 <node_set_prev>:
  4161e0:	460b      	mov	r3, r1
  4161e2:	b109      	cbz	r1, 4161e8 <node_set_prev+0x8>
  4161e4:	6801      	ldr	r1, [r0, #0]
  4161e6:	505a      	str	r2, [r3, r1]
  4161e8:	4770      	bx	lr

004161ea <node_set_next>:
  4161ea:	b129      	cbz	r1, 4161f8 <node_set_next+0xe>
  4161ec:	b410      	push	{r4}
  4161ee:	6803      	ldr	r3, [r0, #0]
  4161f0:	3304      	adds	r3, #4
  4161f2:	50ca      	str	r2, [r1, r3]
  4161f4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4161f8:	4770      	bx	lr

004161fa <_lv_ll_init>:
  4161fa:	2300      	movs	r3, #0
  4161fc:	6043      	str	r3, [r0, #4]
  4161fe:	6083      	str	r3, [r0, #8]
  416200:	3103      	adds	r1, #3
  416202:	f021 0103 	bic.w	r1, r1, #3
  416206:	6001      	str	r1, [r0, #0]
  416208:	4770      	bx	lr
	...

0041620c <_lv_ll_ins_head>:
  41620c:	b538      	push	{r3, r4, r5, lr}
  41620e:	4604      	mov	r4, r0
  416210:	6800      	ldr	r0, [r0, #0]
  416212:	3008      	adds	r0, #8
  416214:	4b0d      	ldr	r3, [pc, #52]	; (41624c <_lv_ll_ins_head+0x40>)
  416216:	4798      	blx	r3
  416218:	4605      	mov	r5, r0
  41621a:	b190      	cbz	r0, 416242 <_lv_ll_ins_head+0x36>
  41621c:	2200      	movs	r2, #0
  41621e:	4601      	mov	r1, r0
  416220:	4620      	mov	r0, r4
  416222:	4b0b      	ldr	r3, [pc, #44]	; (416250 <_lv_ll_ins_head+0x44>)
  416224:	4798      	blx	r3
  416226:	6862      	ldr	r2, [r4, #4]
  416228:	4629      	mov	r1, r5
  41622a:	4620      	mov	r0, r4
  41622c:	4b09      	ldr	r3, [pc, #36]	; (416254 <_lv_ll_ins_head+0x48>)
  41622e:	4798      	blx	r3
  416230:	6861      	ldr	r1, [r4, #4]
  416232:	b119      	cbz	r1, 41623c <_lv_ll_ins_head+0x30>
  416234:	462a      	mov	r2, r5
  416236:	4620      	mov	r0, r4
  416238:	4b05      	ldr	r3, [pc, #20]	; (416250 <_lv_ll_ins_head+0x44>)
  41623a:	4798      	blx	r3
  41623c:	6065      	str	r5, [r4, #4]
  41623e:	68a3      	ldr	r3, [r4, #8]
  416240:	b10b      	cbz	r3, 416246 <_lv_ll_ins_head+0x3a>
  416242:	4628      	mov	r0, r5
  416244:	bd38      	pop	{r3, r4, r5, pc}
  416246:	60a5      	str	r5, [r4, #8]
  416248:	e7fb      	b.n	416242 <_lv_ll_ins_head+0x36>
  41624a:	bf00      	nop
  41624c:	004166d9 	.word	0x004166d9
  416250:	004161e1 	.word	0x004161e1
  416254:	004161eb 	.word	0x004161eb

00416258 <_lv_ll_ins_tail>:
  416258:	b538      	push	{r3, r4, r5, lr}
  41625a:	4604      	mov	r4, r0
  41625c:	6800      	ldr	r0, [r0, #0]
  41625e:	3008      	adds	r0, #8
  416260:	4b0d      	ldr	r3, [pc, #52]	; (416298 <_lv_ll_ins_tail+0x40>)
  416262:	4798      	blx	r3
  416264:	4605      	mov	r5, r0
  416266:	b190      	cbz	r0, 41628e <_lv_ll_ins_tail+0x36>
  416268:	2200      	movs	r2, #0
  41626a:	4601      	mov	r1, r0
  41626c:	4620      	mov	r0, r4
  41626e:	4b0b      	ldr	r3, [pc, #44]	; (41629c <_lv_ll_ins_tail+0x44>)
  416270:	4798      	blx	r3
  416272:	68a2      	ldr	r2, [r4, #8]
  416274:	4629      	mov	r1, r5
  416276:	4620      	mov	r0, r4
  416278:	4b09      	ldr	r3, [pc, #36]	; (4162a0 <_lv_ll_ins_tail+0x48>)
  41627a:	4798      	blx	r3
  41627c:	68a1      	ldr	r1, [r4, #8]
  41627e:	b119      	cbz	r1, 416288 <_lv_ll_ins_tail+0x30>
  416280:	462a      	mov	r2, r5
  416282:	4620      	mov	r0, r4
  416284:	4b05      	ldr	r3, [pc, #20]	; (41629c <_lv_ll_ins_tail+0x44>)
  416286:	4798      	blx	r3
  416288:	60a5      	str	r5, [r4, #8]
  41628a:	6863      	ldr	r3, [r4, #4]
  41628c:	b10b      	cbz	r3, 416292 <_lv_ll_ins_tail+0x3a>
  41628e:	4628      	mov	r0, r5
  416290:	bd38      	pop	{r3, r4, r5, pc}
  416292:	6065      	str	r5, [r4, #4]
  416294:	e7fb      	b.n	41628e <_lv_ll_ins_tail+0x36>
  416296:	bf00      	nop
  416298:	004166d9 	.word	0x004166d9
  41629c:	004161eb 	.word	0x004161eb
  4162a0:	004161e1 	.word	0x004161e1

004162a4 <_lv_ll_get_head>:
  4162a4:	b108      	cbz	r0, 4162aa <_lv_ll_get_head+0x6>
  4162a6:	6840      	ldr	r0, [r0, #4]
  4162a8:	4770      	bx	lr
  4162aa:	2000      	movs	r0, #0
  4162ac:	4770      	bx	lr

004162ae <_lv_ll_get_tail>:
  4162ae:	b108      	cbz	r0, 4162b4 <_lv_ll_get_tail+0x6>
  4162b0:	6880      	ldr	r0, [r0, #8]
  4162b2:	4770      	bx	lr
  4162b4:	2000      	movs	r0, #0
  4162b6:	4770      	bx	lr

004162b8 <_lv_ll_get_next>:
  4162b8:	b118      	cbz	r0, 4162c2 <_lv_ll_get_next+0xa>
  4162ba:	6803      	ldr	r3, [r0, #0]
  4162bc:	3304      	adds	r3, #4
  4162be:	58c8      	ldr	r0, [r1, r3]
  4162c0:	4770      	bx	lr
  4162c2:	2000      	movs	r0, #0
  4162c4:	4770      	bx	lr

004162c6 <_lv_ll_get_prev>:
  4162c6:	b110      	cbz	r0, 4162ce <_lv_ll_get_prev+0x8>
  4162c8:	6803      	ldr	r3, [r0, #0]
  4162ca:	58c8      	ldr	r0, [r1, r3]
  4162cc:	4770      	bx	lr
  4162ce:	2000      	movs	r0, #0
  4162d0:	4770      	bx	lr
	...

004162d4 <_lv_ll_ins_prev>:
  4162d4:	2900      	cmp	r1, #0
  4162d6:	bf18      	it	ne
  4162d8:	2800      	cmpne	r0, #0
  4162da:	d02f      	beq.n	41633c <_lv_ll_ins_prev+0x68>
  4162dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4162e0:	4604      	mov	r4, r0
  4162e2:	4688      	mov	r8, r1
  4162e4:	4b18      	ldr	r3, [pc, #96]	; (416348 <_lv_ll_ins_prev+0x74>)
  4162e6:	4798      	blx	r3
  4162e8:	4580      	cmp	r8, r0
  4162ea:	d01f      	beq.n	41632c <_lv_ll_ins_prev+0x58>
  4162ec:	6820      	ldr	r0, [r4, #0]
  4162ee:	3008      	adds	r0, #8
  4162f0:	4b16      	ldr	r3, [pc, #88]	; (41634c <_lv_ll_ins_prev+0x78>)
  4162f2:	4798      	blx	r3
  4162f4:	4605      	mov	r5, r0
  4162f6:	b318      	cbz	r0, 416340 <_lv_ll_ins_prev+0x6c>
  4162f8:	4641      	mov	r1, r8
  4162fa:	4620      	mov	r0, r4
  4162fc:	4b14      	ldr	r3, [pc, #80]	; (416350 <_lv_ll_ins_prev+0x7c>)
  4162fe:	4798      	blx	r3
  416300:	4607      	mov	r7, r0
  416302:	462a      	mov	r2, r5
  416304:	4601      	mov	r1, r0
  416306:	4620      	mov	r0, r4
  416308:	4e12      	ldr	r6, [pc, #72]	; (416354 <_lv_ll_ins_prev+0x80>)
  41630a:	47b0      	blx	r6
  41630c:	463a      	mov	r2, r7
  41630e:	4629      	mov	r1, r5
  416310:	4620      	mov	r0, r4
  416312:	4f11      	ldr	r7, [pc, #68]	; (416358 <_lv_ll_ins_prev+0x84>)
  416314:	47b8      	blx	r7
  416316:	462a      	mov	r2, r5
  416318:	4641      	mov	r1, r8
  41631a:	4620      	mov	r0, r4
  41631c:	47b8      	blx	r7
  41631e:	4642      	mov	r2, r8
  416320:	4629      	mov	r1, r5
  416322:	4620      	mov	r0, r4
  416324:	47b0      	blx	r6
  416326:	4628      	mov	r0, r5
  416328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41632c:	4620      	mov	r0, r4
  41632e:	4b0b      	ldr	r3, [pc, #44]	; (41635c <_lv_ll_ins_prev+0x88>)
  416330:	4798      	blx	r3
  416332:	b108      	cbz	r0, 416338 <_lv_ll_ins_prev+0x64>
  416334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  416338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41633c:	2000      	movs	r0, #0
  41633e:	4770      	bx	lr
  416340:	2000      	movs	r0, #0
  416342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  416346:	bf00      	nop
  416348:	004162a5 	.word	0x004162a5
  41634c:	004166d9 	.word	0x004166d9
  416350:	004162c7 	.word	0x004162c7
  416354:	004161eb 	.word	0x004161eb
  416358:	004161e1 	.word	0x004161e1
  41635c:	0041620d 	.word	0x0041620d

00416360 <_lv_ll_remove>:
  416360:	b570      	push	{r4, r5, r6, lr}
  416362:	4604      	mov	r4, r0
  416364:	460d      	mov	r5, r1
  416366:	4b1e      	ldr	r3, [pc, #120]	; (4163e0 <_lv_ll_remove+0x80>)
  416368:	4798      	blx	r3
  41636a:	4285      	cmp	r5, r0
  41636c:	d019      	beq.n	4163a2 <_lv_ll_remove+0x42>
  41636e:	4620      	mov	r0, r4
  416370:	4b1c      	ldr	r3, [pc, #112]	; (4163e4 <_lv_ll_remove+0x84>)
  416372:	4798      	blx	r3
  416374:	4285      	cmp	r5, r0
  416376:	d023      	beq.n	4163c0 <_lv_ll_remove+0x60>
  416378:	4629      	mov	r1, r5
  41637a:	4620      	mov	r0, r4
  41637c:	4b1a      	ldr	r3, [pc, #104]	; (4163e8 <_lv_ll_remove+0x88>)
  41637e:	4798      	blx	r3
  416380:	4606      	mov	r6, r0
  416382:	4629      	mov	r1, r5
  416384:	4620      	mov	r0, r4
  416386:	4b19      	ldr	r3, [pc, #100]	; (4163ec <_lv_ll_remove+0x8c>)
  416388:	4798      	blx	r3
  41638a:	4605      	mov	r5, r0
  41638c:	4602      	mov	r2, r0
  41638e:	4631      	mov	r1, r6
  416390:	4620      	mov	r0, r4
  416392:	4b17      	ldr	r3, [pc, #92]	; (4163f0 <_lv_ll_remove+0x90>)
  416394:	4798      	blx	r3
  416396:	4632      	mov	r2, r6
  416398:	4629      	mov	r1, r5
  41639a:	4620      	mov	r0, r4
  41639c:	4b15      	ldr	r3, [pc, #84]	; (4163f4 <_lv_ll_remove+0x94>)
  41639e:	4798      	blx	r3
  4163a0:	bd70      	pop	{r4, r5, r6, pc}
  4163a2:	4629      	mov	r1, r5
  4163a4:	4620      	mov	r0, r4
  4163a6:	4b11      	ldr	r3, [pc, #68]	; (4163ec <_lv_ll_remove+0x8c>)
  4163a8:	4798      	blx	r3
  4163aa:	6060      	str	r0, [r4, #4]
  4163ac:	b128      	cbz	r0, 4163ba <_lv_ll_remove+0x5a>
  4163ae:	2200      	movs	r2, #0
  4163b0:	4601      	mov	r1, r0
  4163b2:	4620      	mov	r0, r4
  4163b4:	4b0f      	ldr	r3, [pc, #60]	; (4163f4 <_lv_ll_remove+0x94>)
  4163b6:	4798      	blx	r3
  4163b8:	bd70      	pop	{r4, r5, r6, pc}
  4163ba:	2300      	movs	r3, #0
  4163bc:	60a3      	str	r3, [r4, #8]
  4163be:	bd70      	pop	{r4, r5, r6, pc}
  4163c0:	4629      	mov	r1, r5
  4163c2:	4620      	mov	r0, r4
  4163c4:	4b08      	ldr	r3, [pc, #32]	; (4163e8 <_lv_ll_remove+0x88>)
  4163c6:	4798      	blx	r3
  4163c8:	60a0      	str	r0, [r4, #8]
  4163ca:	b128      	cbz	r0, 4163d8 <_lv_ll_remove+0x78>
  4163cc:	2200      	movs	r2, #0
  4163ce:	4601      	mov	r1, r0
  4163d0:	4620      	mov	r0, r4
  4163d2:	4b07      	ldr	r3, [pc, #28]	; (4163f0 <_lv_ll_remove+0x90>)
  4163d4:	4798      	blx	r3
  4163d6:	bd70      	pop	{r4, r5, r6, pc}
  4163d8:	2300      	movs	r3, #0
  4163da:	6063      	str	r3, [r4, #4]
  4163dc:	bd70      	pop	{r4, r5, r6, pc}
  4163de:	bf00      	nop
  4163e0:	004162a5 	.word	0x004162a5
  4163e4:	004162af 	.word	0x004162af
  4163e8:	004162c7 	.word	0x004162c7
  4163ec:	004162b9 	.word	0x004162b9
  4163f0:	004161eb 	.word	0x004161eb
  4163f4:	004161e1 	.word	0x004161e1

004163f8 <_lv_ll_clear>:
  4163f8:	b570      	push	{r4, r5, r6, lr}
  4163fa:	4605      	mov	r5, r0
  4163fc:	4b09      	ldr	r3, [pc, #36]	; (416424 <_lv_ll_clear+0x2c>)
  4163fe:	4798      	blx	r3
  416400:	4604      	mov	r4, r0
  416402:	e00c      	b.n	41641e <_lv_ll_clear+0x26>
  416404:	4621      	mov	r1, r4
  416406:	4628      	mov	r0, r5
  416408:	4b07      	ldr	r3, [pc, #28]	; (416428 <_lv_ll_clear+0x30>)
  41640a:	4798      	blx	r3
  41640c:	4606      	mov	r6, r0
  41640e:	4621      	mov	r1, r4
  416410:	4628      	mov	r0, r5
  416412:	4b06      	ldr	r3, [pc, #24]	; (41642c <_lv_ll_clear+0x34>)
  416414:	4798      	blx	r3
  416416:	4620      	mov	r0, r4
  416418:	4b05      	ldr	r3, [pc, #20]	; (416430 <_lv_ll_clear+0x38>)
  41641a:	4798      	blx	r3
  41641c:	4634      	mov	r4, r6
  41641e:	2c00      	cmp	r4, #0
  416420:	d1f0      	bne.n	416404 <_lv_ll_clear+0xc>
  416422:	bd70      	pop	{r4, r5, r6, pc}
  416424:	004162a5 	.word	0x004162a5
  416428:	004162b9 	.word	0x004162b9
  41642c:	00416361 	.word	0x00416361
  416430:	0041679d 	.word	0x0041679d

00416434 <_lv_ll_chg_list>:
  416434:	b570      	push	{r4, r5, r6, lr}
  416436:	460c      	mov	r4, r1
  416438:	4615      	mov	r5, r2
  41643a:	461e      	mov	r6, r3
  41643c:	4611      	mov	r1, r2
  41643e:	4b17      	ldr	r3, [pc, #92]	; (41649c <_lv_ll_chg_list+0x68>)
  416440:	4798      	blx	r3
  416442:	b1ae      	cbz	r6, 416470 <_lv_ll_chg_list+0x3c>
  416444:	2200      	movs	r2, #0
  416446:	4629      	mov	r1, r5
  416448:	4620      	mov	r0, r4
  41644a:	4b15      	ldr	r3, [pc, #84]	; (4164a0 <_lv_ll_chg_list+0x6c>)
  41644c:	4798      	blx	r3
  41644e:	6862      	ldr	r2, [r4, #4]
  416450:	4629      	mov	r1, r5
  416452:	4620      	mov	r0, r4
  416454:	4b13      	ldr	r3, [pc, #76]	; (4164a4 <_lv_ll_chg_list+0x70>)
  416456:	4798      	blx	r3
  416458:	6861      	ldr	r1, [r4, #4]
  41645a:	b119      	cbz	r1, 416464 <_lv_ll_chg_list+0x30>
  41645c:	462a      	mov	r2, r5
  41645e:	4620      	mov	r0, r4
  416460:	4b0f      	ldr	r3, [pc, #60]	; (4164a0 <_lv_ll_chg_list+0x6c>)
  416462:	4798      	blx	r3
  416464:	6065      	str	r5, [r4, #4]
  416466:	68a3      	ldr	r3, [r4, #8]
  416468:	b103      	cbz	r3, 41646c <_lv_ll_chg_list+0x38>
  41646a:	bd70      	pop	{r4, r5, r6, pc}
  41646c:	60a5      	str	r5, [r4, #8]
  41646e:	bd70      	pop	{r4, r5, r6, pc}
  416470:	68a2      	ldr	r2, [r4, #8]
  416472:	4629      	mov	r1, r5
  416474:	4620      	mov	r0, r4
  416476:	4b0a      	ldr	r3, [pc, #40]	; (4164a0 <_lv_ll_chg_list+0x6c>)
  416478:	4798      	blx	r3
  41647a:	2200      	movs	r2, #0
  41647c:	4629      	mov	r1, r5
  41647e:	4620      	mov	r0, r4
  416480:	4b08      	ldr	r3, [pc, #32]	; (4164a4 <_lv_ll_chg_list+0x70>)
  416482:	4798      	blx	r3
  416484:	68a1      	ldr	r1, [r4, #8]
  416486:	b119      	cbz	r1, 416490 <_lv_ll_chg_list+0x5c>
  416488:	462a      	mov	r2, r5
  41648a:	4620      	mov	r0, r4
  41648c:	4b05      	ldr	r3, [pc, #20]	; (4164a4 <_lv_ll_chg_list+0x70>)
  41648e:	4798      	blx	r3
  416490:	60a5      	str	r5, [r4, #8]
  416492:	6863      	ldr	r3, [r4, #4]
  416494:	2b00      	cmp	r3, #0
  416496:	d1e8      	bne.n	41646a <_lv_ll_chg_list+0x36>
  416498:	6065      	str	r5, [r4, #4]
  41649a:	e7e6      	b.n	41646a <_lv_ll_chg_list+0x36>
  41649c:	00416361 	.word	0x00416361
  4164a0:	004161e1 	.word	0x004161e1
  4164a4:	004161eb 	.word	0x004161eb

004164a8 <_lv_ll_get_len>:
  4164a8:	b538      	push	{r3, r4, r5, lr}
  4164aa:	4605      	mov	r5, r0
  4164ac:	4b06      	ldr	r3, [pc, #24]	; (4164c8 <_lv_ll_get_len+0x20>)
  4164ae:	4798      	blx	r3
  4164b0:	2400      	movs	r4, #0
  4164b2:	e004      	b.n	4164be <_lv_ll_get_len+0x16>
  4164b4:	3401      	adds	r4, #1
  4164b6:	4601      	mov	r1, r0
  4164b8:	4628      	mov	r0, r5
  4164ba:	4b04      	ldr	r3, [pc, #16]	; (4164cc <_lv_ll_get_len+0x24>)
  4164bc:	4798      	blx	r3
  4164be:	2800      	cmp	r0, #0
  4164c0:	d1f8      	bne.n	4164b4 <_lv_ll_get_len+0xc>
  4164c2:	4620      	mov	r0, r4
  4164c4:	bd38      	pop	{r3, r4, r5, pc}
  4164c6:	bf00      	nop
  4164c8:	004162a5 	.word	0x004162a5
  4164cc:	004162b9 	.word	0x004162b9

004164d0 <_lv_ll_move_before>:
  4164d0:	4291      	cmp	r1, r2
  4164d2:	d02f      	beq.n	416534 <_lv_ll_move_before+0x64>
  4164d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4164d8:	4617      	mov	r7, r2
  4164da:	460c      	mov	r4, r1
  4164dc:	4605      	mov	r5, r0
  4164de:	b30a      	cbz	r2, 416524 <_lv_ll_move_before+0x54>
  4164e0:	4611      	mov	r1, r2
  4164e2:	4b15      	ldr	r3, [pc, #84]	; (416538 <_lv_ll_move_before+0x68>)
  4164e4:	4798      	blx	r3
  4164e6:	4606      	mov	r6, r0
  4164e8:	42a6      	cmp	r6, r4
  4164ea:	d019      	beq.n	416520 <_lv_ll_move_before+0x50>
  4164ec:	4621      	mov	r1, r4
  4164ee:	4628      	mov	r0, r5
  4164f0:	4b12      	ldr	r3, [pc, #72]	; (41653c <_lv_ll_move_before+0x6c>)
  4164f2:	4798      	blx	r3
  4164f4:	4622      	mov	r2, r4
  4164f6:	4631      	mov	r1, r6
  4164f8:	4628      	mov	r0, r5
  4164fa:	f8df 8048 	ldr.w	r8, [pc, #72]	; 416544 <_lv_ll_move_before+0x74>
  4164fe:	47c0      	blx	r8
  416500:	4632      	mov	r2, r6
  416502:	4621      	mov	r1, r4
  416504:	4628      	mov	r0, r5
  416506:	f8df 9040 	ldr.w	r9, [pc, #64]	; 416548 <_lv_ll_move_before+0x78>
  41650a:	47c8      	blx	r9
  41650c:	4622      	mov	r2, r4
  41650e:	4639      	mov	r1, r7
  416510:	4628      	mov	r0, r5
  416512:	47c8      	blx	r9
  416514:	463a      	mov	r2, r7
  416516:	4621      	mov	r1, r4
  416518:	4628      	mov	r0, r5
  41651a:	47c0      	blx	r8
  41651c:	b137      	cbz	r7, 41652c <_lv_ll_move_before+0x5c>
  41651e:	b13e      	cbz	r6, 416530 <_lv_ll_move_before+0x60>
  416520:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  416524:	4b06      	ldr	r3, [pc, #24]	; (416540 <_lv_ll_move_before+0x70>)
  416526:	4798      	blx	r3
  416528:	4606      	mov	r6, r0
  41652a:	e7dd      	b.n	4164e8 <_lv_ll_move_before+0x18>
  41652c:	60ac      	str	r4, [r5, #8]
  41652e:	e7f6      	b.n	41651e <_lv_ll_move_before+0x4e>
  416530:	606c      	str	r4, [r5, #4]
  416532:	e7f5      	b.n	416520 <_lv_ll_move_before+0x50>
  416534:	4770      	bx	lr
  416536:	bf00      	nop
  416538:	004162c7 	.word	0x004162c7
  41653c:	00416361 	.word	0x00416361
  416540:	004162af 	.word	0x004162af
  416544:	004161eb 	.word	0x004161eb
  416548:	004161e1 	.word	0x004161e1

0041654c <_lv_ll_is_empty>:
  41654c:	b138      	cbz	r0, 41655e <_lv_ll_is_empty+0x12>
  41654e:	6842      	ldr	r2, [r0, #4]
  416550:	b10a      	cbz	r2, 416556 <_lv_ll_is_empty+0xa>
  416552:	2000      	movs	r0, #0
  416554:	4770      	bx	lr
  416556:	6883      	ldr	r3, [r0, #8]
  416558:	b11b      	cbz	r3, 416562 <_lv_ll_is_empty+0x16>
  41655a:	2000      	movs	r0, #0
  41655c:	4770      	bx	lr
  41655e:	2001      	movs	r0, #1
  416560:	4770      	bx	lr
  416562:	2001      	movs	r0, #1
  416564:	4770      	bx	lr
	...

00416568 <_lv_trigo_sin>:
  416568:	4b1c      	ldr	r3, [pc, #112]	; (4165dc <_lv_trigo_sin+0x74>)
  41656a:	fb83 2300 	smull	r2, r3, r3, r0
  41656e:	181a      	adds	r2, r3, r0
  416570:	17c3      	asrs	r3, r0, #31
  416572:	ebc3 2322 	rsb	r3, r3, r2, asr #8
  416576:	f44f 72b4 	mov.w	r2, #360	; 0x168
  41657a:	fb02 0013 	mls	r0, r2, r3, r0
  41657e:	b200      	sxth	r0, r0
  416580:	2800      	cmp	r0, #0
  416582:	db15      	blt.n	4165b0 <_lv_trigo_sin+0x48>
  416584:	2859      	cmp	r0, #89	; 0x59
  416586:	dd16      	ble.n	4165b6 <_lv_trigo_sin+0x4e>
  416588:	b280      	uxth	r0, r0
  41658a:	f1a0 035a 	sub.w	r3, r0, #90	; 0x5a
  41658e:	b29b      	uxth	r3, r3
  416590:	2b59      	cmp	r3, #89	; 0x59
  416592:	d914      	bls.n	4165be <_lv_trigo_sin+0x56>
  416594:	f1a0 03b4 	sub.w	r3, r0, #180	; 0xb4
  416598:	b29b      	uxth	r3, r3
  41659a:	2b59      	cmp	r3, #89	; 0x59
  41659c:	d916      	bls.n	4165cc <_lv_trigo_sin+0x64>
  41659e:	f5c0 70b4 	rsb	r0, r0, #360	; 0x168
  4165a2:	b200      	sxth	r0, r0
  4165a4:	4b0e      	ldr	r3, [pc, #56]	; (4165e0 <_lv_trigo_sin+0x78>)
  4165a6:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
  4165aa:	4240      	negs	r0, r0
  4165ac:	b200      	sxth	r0, r0
  4165ae:	4770      	bx	lr
  4165b0:	4410      	add	r0, r2
  4165b2:	b200      	sxth	r0, r0
  4165b4:	e7e6      	b.n	416584 <_lv_trigo_sin+0x1c>
  4165b6:	4b0a      	ldr	r3, [pc, #40]	; (4165e0 <_lv_trigo_sin+0x78>)
  4165b8:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
  4165bc:	4770      	bx	lr
  4165be:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
  4165c2:	b200      	sxth	r0, r0
  4165c4:	4b06      	ldr	r3, [pc, #24]	; (4165e0 <_lv_trigo_sin+0x78>)
  4165c6:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
  4165ca:	4770      	bx	lr
  4165cc:	b21b      	sxth	r3, r3
  4165ce:	4a04      	ldr	r2, [pc, #16]	; (4165e0 <_lv_trigo_sin+0x78>)
  4165d0:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
  4165d4:	4240      	negs	r0, r0
  4165d6:	b200      	sxth	r0, r0
  4165d8:	4770      	bx	lr
  4165da:	bf00      	nop
  4165dc:	b60b60b7 	.word	0xb60b60b7
  4165e0:	0042fce8 	.word	0x0042fce8

004165e4 <_lv_sqrt>:
  4165e4:	b430      	push	{r4, r5}
  4165e6:	0200      	lsls	r0, r0, #8
  4165e8:	2400      	movs	r4, #0
  4165ea:	e001      	b.n	4165f0 <_lv_sqrt+0xc>
  4165ec:	0852      	lsrs	r2, r2, #1
  4165ee:	d006      	beq.n	4165fe <_lv_sqrt+0x1a>
  4165f0:	1913      	adds	r3, r2, r4
  4165f2:	fb03 f503 	mul.w	r5, r3, r3
  4165f6:	42a8      	cmp	r0, r5
  4165f8:	d3f8      	bcc.n	4165ec <_lv_sqrt+0x8>
  4165fa:	461c      	mov	r4, r3
  4165fc:	e7f6      	b.n	4165ec <_lv_sqrt+0x8>
  4165fe:	0923      	lsrs	r3, r4, #4
  416600:	800b      	strh	r3, [r1, #0]
  416602:	0124      	lsls	r4, r4, #4
  416604:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
  416608:	804c      	strh	r4, [r1, #2]
  41660a:	bc30      	pop	{r4, r5}
  41660c:	4770      	bx	lr
	...

00416610 <ent_get_next>:
 */
static lv_mem_ent_t * ent_get_next(lv_mem_ent_t * act_e)
{
    lv_mem_ent_t * next_e = NULL;

    if(act_e == NULL) { /*NULL means: get the first entry*/
  416610:	4603      	mov	r3, r0
  416612:	b158      	cbz	r0, 41662c <ent_get_next+0x1c>
        next_e = (lv_mem_ent_t *)work_mem;
    }
    else {   /*Get the next entry */
        uint8_t * data = &act_e->first_data;
  416614:	3004      	adds	r0, #4
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
  416616:	681b      	ldr	r3, [r3, #0]
  416618:	eb00 0053 	add.w	r0, r0, r3, lsr #1

        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
  41661c:	1d02      	adds	r2, r0, #4
  41661e:	4b06      	ldr	r3, [pc, #24]	; (416638 <ent_get_next+0x28>)
  416620:	681b      	ldr	r3, [r3, #0]
  416622:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
  416626:	429a      	cmp	r2, r3
  416628:	d203      	bcs.n	416632 <ent_get_next+0x22>
    }

    return next_e;
}
  41662a:	4770      	bx	lr
        next_e = (lv_mem_ent_t *)work_mem;
  41662c:	4b02      	ldr	r3, [pc, #8]	; (416638 <ent_get_next+0x28>)
  41662e:	6818      	ldr	r0, [r3, #0]
  416630:	4770      	bx	lr
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
  416632:	2000      	movs	r0, #0
    return next_e;
  416634:	e7f9      	b.n	41662a <ent_get_next+0x1a>
  416636:	bf00      	nop
  416638:	2040c810 	.word	0x2040c810

0041663c <ent_trunc>:
 * @param size new size in bytes
 */
static void ent_trunc(lv_mem_ent_t * e, size_t size)
{
    /*Round the size up to ALIGN_MASK*/
    size = (size + ALIGN_MASK) & (~ALIGN_MASK);
  41663c:	3103      	adds	r1, #3
  41663e:	f021 0103 	bic.w	r1, r1, #3

    /*Don't let empty space only for a header without data*/
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
  416642:	6803      	ldr	r3, [r0, #0]
  416644:	f3c3 035e 	ubfx	r3, r3, #1, #31
  416648:	1d0a      	adds	r2, r1, #4
  41664a:	4293      	cmp	r3, r2
  41664c:	d016      	beq.n	41667c <ent_trunc+0x40>
        size = e->header.s.d_size;
    }

    /* Create the new entry after the current if there is space for it */
    if(e->header.s.d_size != size) {
  41664e:	4299      	cmp	r1, r3
  416650:	d013      	beq.n	41667a <ent_trunc+0x3e>
{
  416652:	b410      	push	{r4}
        uint8_t * e_data             = &e->first_data;
  416654:	1d02      	adds	r2, r0, #4
        lv_mem_ent_t * after_new_e   = (lv_mem_ent_t *)&e_data[size];
        after_new_e->header.s.used   = 0;
  416656:	5c53      	ldrb	r3, [r2, r1]
  416658:	f36f 0300 	bfc	r3, #0, #1
  41665c:	5453      	strb	r3, [r2, r1]
        after_new_e->header.s.d_size = (uint32_t)e->header.s.d_size - size - sizeof(lv_mem_header_t);
  41665e:	6803      	ldr	r3, [r0, #0]
  416660:	ebc1 0353 	rsb	r3, r1, r3, lsr #1
  416664:	3b04      	subs	r3, #4
  416666:	5854      	ldr	r4, [r2, r1]
  416668:	f363 045f 	bfi	r4, r3, #1, #31
  41666c:	5054      	str	r4, [r2, r1]

        /* Set the new size for the original entry */
        e->header.s.d_size = (uint32_t)size;
  41666e:	6803      	ldr	r3, [r0, #0]
  416670:	f361 035f 	bfi	r3, r1, #1, #31
  416674:	6003      	str	r3, [r0, #0]
    }
}
  416676:	f85d 4b04 	ldr.w	r4, [sp], #4
  41667a:	4770      	bx	lr
        size = e->header.s.d_size;
  41667c:	4619      	mov	r1, r3
  41667e:	e7e6      	b.n	41664e <ent_trunc+0x12>

00416680 <ent_alloc>:
    if(e->header.s.used == 0 && e->header.s.d_size >= size) {
  416680:	7803      	ldrb	r3, [r0, #0]
  416682:	f013 0f01 	tst.w	r3, #1
  416686:	d10f      	bne.n	4166a8 <ent_alloc+0x28>
  416688:	6803      	ldr	r3, [r0, #0]
  41668a:	f3c3 035e 	ubfx	r3, r3, #1, #31
  41668e:	428b      	cmp	r3, r1
  416690:	d30c      	bcc.n	4166ac <ent_alloc+0x2c>
{
  416692:	b510      	push	{r4, lr}
  416694:	4604      	mov	r4, r0
        ent_trunc(e, size);
  416696:	4b06      	ldr	r3, [pc, #24]	; (4166b0 <ent_alloc+0x30>)
  416698:	4798      	blx	r3
        e->header.s.used = 1;
  41669a:	7823      	ldrb	r3, [r4, #0]
  41669c:	f043 0301 	orr.w	r3, r3, #1
  4166a0:	4620      	mov	r0, r4
  4166a2:	f800 3b04 	strb.w	r3, [r0], #4
  4166a6:	bd10      	pop	{r4, pc}
    void * alloc = NULL;
  4166a8:	2000      	movs	r0, #0
  4166aa:	4770      	bx	lr
  4166ac:	2000      	movs	r0, #0
    return alloc;
  4166ae:	4770      	bx	lr
  4166b0:	0041663d 	.word	0x0041663d

004166b4 <_lv_mem_init>:
    work_mem = (uint8_t *)work_mem_int;
  4166b4:	4b06      	ldr	r3, [pc, #24]	; (4166d0 <_lv_mem_init+0x1c>)
  4166b6:	4a07      	ldr	r2, [pc, #28]	; (4166d4 <_lv_mem_init+0x20>)
  4166b8:	6013      	str	r3, [r2, #0]
    full->header.s.used = 0;
  4166ba:	781a      	ldrb	r2, [r3, #0]
  4166bc:	f36f 0200 	bfc	r2, #0, #1
  4166c0:	701a      	strb	r2, [r3, #0]
    full->header.s.d_size = LV_MEM_SIZE - sizeof(lv_mem_header_t);
  4166c2:	681a      	ldr	r2, [r3, #0]
  4166c4:	f647 71fc 	movw	r1, #32764	; 0x7ffc
  4166c8:	f361 025f 	bfi	r2, r1, #1, #31
  4166cc:	601a      	str	r2, [r3, #0]
  4166ce:	4770      	bx	lr
  4166d0:	2040c814 	.word	0x2040c814
  4166d4:	2040c810 	.word	0x2040c810

004166d8 <lv_mem_alloc>:
{
  4166d8:	b570      	push	{r4, r5, r6, lr}
    if(size == 0) {
  4166da:	b330      	cbz	r0, 41672a <lv_mem_alloc+0x52>
  4166dc:	4606      	mov	r6, r0
    size = (size + ALIGN_MASK) & (~ALIGN_MASK);
  4166de:	3603      	adds	r6, #3
  4166e0:	f026 0603 	bic.w	r6, r6, #3
    lv_mem_ent_t * e = NULL;
  4166e4:	2400      	movs	r4, #0
    void * alloc = NULL;
  4166e6:	4625      	mov	r5, r4
  4166e8:	e006      	b.n	4166f8 <lv_mem_alloc+0x20>
    } while(e != NULL && alloc == NULL);
  4166ea:	1c23      	adds	r3, r4, #0
  4166ec:	bf18      	it	ne
  4166ee:	2301      	movne	r3, #1
  4166f0:	2d00      	cmp	r5, #0
  4166f2:	bf18      	it	ne
  4166f4:	2300      	movne	r3, #0
  4166f6:	b153      	cbz	r3, 41670e <lv_mem_alloc+0x36>
        e = ent_get_next(e);
  4166f8:	4620      	mov	r0, r4
  4166fa:	4b0d      	ldr	r3, [pc, #52]	; (416730 <lv_mem_alloc+0x58>)
  4166fc:	4798      	blx	r3
        if(e != NULL) {
  4166fe:	4604      	mov	r4, r0
  416700:	2800      	cmp	r0, #0
  416702:	d0f2      	beq.n	4166ea <lv_mem_alloc+0x12>
            alloc = ent_alloc(e, size);
  416704:	4631      	mov	r1, r6
  416706:	4b0b      	ldr	r3, [pc, #44]	; (416734 <lv_mem_alloc+0x5c>)
  416708:	4798      	blx	r3
  41670a:	4605      	mov	r5, r0
  41670c:	e7ed      	b.n	4166ea <lv_mem_alloc+0x12>
    if(alloc == NULL) {
  41670e:	b16d      	cbz	r5, 41672c <lv_mem_alloc+0x54>
        if((uintptr_t) alloc > (uintptr_t) work_mem) {
  416710:	4b09      	ldr	r3, [pc, #36]	; (416738 <lv_mem_alloc+0x60>)
  416712:	681b      	ldr	r3, [r3, #0]
  416714:	429d      	cmp	r5, r3
  416716:	d909      	bls.n	41672c <lv_mem_alloc+0x54>
            if((((uintptr_t) alloc - (uintptr_t) work_mem) + size) > mem_max_size) {
  416718:	1aeb      	subs	r3, r5, r3
  41671a:	441e      	add	r6, r3
  41671c:	4b07      	ldr	r3, [pc, #28]	; (41673c <lv_mem_alloc+0x64>)
  41671e:	681b      	ldr	r3, [r3, #0]
  416720:	429e      	cmp	r6, r3
  416722:	d903      	bls.n	41672c <lv_mem_alloc+0x54>
                mem_max_size = ((uintptr_t) alloc - (uintptr_t) work_mem) + size;
  416724:	4b05      	ldr	r3, [pc, #20]	; (41673c <lv_mem_alloc+0x64>)
  416726:	601e      	str	r6, [r3, #0]
  416728:	e000      	b.n	41672c <lv_mem_alloc+0x54>
        return &zero_mem;
  41672a:	4d05      	ldr	r5, [pc, #20]	; (416740 <lv_mem_alloc+0x68>)
}
  41672c:	4628      	mov	r0, r5
  41672e:	bd70      	pop	{r4, r5, r6, pc}
  416730:	00416611 	.word	0x00416611
  416734:	00416681 	.word	0x00416681
  416738:	2040c810 	.word	0x2040c810
  41673c:	2040c80c 	.word	0x2040c80c
  416740:	20414814 	.word	0x20414814

00416744 <lv_mem_defrag>:
{
  416744:	b510      	push	{r4, lr}
    e_free = ent_get_next(NULL);
  416746:	2000      	movs	r0, #0
  416748:	4b13      	ldr	r3, [pc, #76]	; (416798 <lv_mem_defrag+0x54>)
  41674a:	4798      	blx	r3
  41674c:	4604      	mov	r4, r0
  41674e:	e017      	b.n	416780 <lv_mem_defrag+0x3c>
        if(e_free == NULL) return;
  416750:	b304      	cbz	r4, 416794 <lv_mem_defrag+0x50>
        e_next = ent_get_next(e_free);
  416752:	4620      	mov	r0, r4
  416754:	4b10      	ldr	r3, [pc, #64]	; (416798 <lv_mem_defrag+0x54>)
  416756:	4798      	blx	r3
        while(e_next != NULL) {
  416758:	b180      	cbz	r0, 41677c <lv_mem_defrag+0x38>
            if(e_next->header.s.used == 0) {
  41675a:	7803      	ldrb	r3, [r0, #0]
  41675c:	f013 0f01 	tst.w	r3, #1
  416760:	d10c      	bne.n	41677c <lv_mem_defrag+0x38>
                e_free->header.s.d_size += e_next->header.s.d_size + sizeof(e_next->header);
  416762:	6801      	ldr	r1, [r0, #0]
  416764:	6823      	ldr	r3, [r4, #0]
  416766:	f3c3 025e 	ubfx	r2, r3, #1, #31
  41676a:	eb02 0251 	add.w	r2, r2, r1, lsr #1
  41676e:	3204      	adds	r2, #4
  416770:	f362 035f 	bfi	r3, r2, #1, #31
  416774:	6023      	str	r3, [r4, #0]
            e_next = ent_get_next(e_next);
  416776:	4b08      	ldr	r3, [pc, #32]	; (416798 <lv_mem_defrag+0x54>)
  416778:	4798      	blx	r3
  41677a:	e7ed      	b.n	416758 <lv_mem_defrag+0x14>
        if(e_next == NULL) return;
  41677c:	b150      	cbz	r0, 416794 <lv_mem_defrag+0x50>
{
  41677e:	4604      	mov	r4, r0
        while(e_free != NULL) {
  416780:	2c00      	cmp	r4, #0
  416782:	d0e5      	beq.n	416750 <lv_mem_defrag+0xc>
            if(e_free->header.s.used != 0) {
  416784:	7823      	ldrb	r3, [r4, #0]
  416786:	f013 0f01 	tst.w	r3, #1
  41678a:	d0e1      	beq.n	416750 <lv_mem_defrag+0xc>
                e_free = ent_get_next(e_free);
  41678c:	4620      	mov	r0, r4
  41678e:	4b02      	ldr	r3, [pc, #8]	; (416798 <lv_mem_defrag+0x54>)
  416790:	4798      	blx	r3
  416792:	e7f4      	b.n	41677e <lv_mem_defrag+0x3a>
  416794:	bd10      	pop	{r4, pc}
  416796:	bf00      	nop
  416798:	00416611 	.word	0x00416611

0041679c <lv_mem_free>:
    if(data == &zero_mem) return;
  41679c:	4b18      	ldr	r3, [pc, #96]	; (416800 <lv_mem_free+0x64>)
  41679e:	4298      	cmp	r0, r3
  4167a0:	d02d      	beq.n	4167fe <lv_mem_free+0x62>
    if(data == NULL) return;
  4167a2:	b360      	cbz	r0, 4167fe <lv_mem_free+0x62>
{
  4167a4:	b510      	push	{r4, lr}
  4167a6:	4604      	mov	r4, r0
    lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data - sizeof(lv_mem_header_t));
  4167a8:	3804      	subs	r0, #4
    e->header.s.used = 0;
  4167aa:	f814 3c04 	ldrb.w	r3, [r4, #-4]
  4167ae:	f36f 0300 	bfc	r3, #0, #1
  4167b2:	f804 3c04 	strb.w	r3, [r4, #-4]
    full_defrag_cnt++;
  4167b6:	4a13      	ldr	r2, [pc, #76]	; (416804 <lv_mem_free+0x68>)
  4167b8:	8813      	ldrh	r3, [r2, #0]
  4167ba:	3301      	adds	r3, #1
  4167bc:	b29b      	uxth	r3, r3
  4167be:	8013      	strh	r3, [r2, #0]
    if(full_defrag_cnt < LV_MEM_FULL_DEFRAG_CNT) {
  4167c0:	2b0f      	cmp	r3, #15
  4167c2:	d816      	bhi.n	4167f2 <lv_mem_free+0x56>
        e_next = ent_get_next(e);
  4167c4:	4b10      	ldr	r3, [pc, #64]	; (416808 <lv_mem_free+0x6c>)
  4167c6:	4798      	blx	r3
        while(e_next != NULL) {
  4167c8:	b190      	cbz	r0, 4167f0 <lv_mem_free+0x54>
            if(e_next->header.s.used == 0) {
  4167ca:	7803      	ldrb	r3, [r0, #0]
  4167cc:	f013 0f01 	tst.w	r3, #1
  4167d0:	d114      	bne.n	4167fc <lv_mem_free+0x60>
                e->header.s.d_size += e_next->header.s.d_size + sizeof(e->header);
  4167d2:	6801      	ldr	r1, [r0, #0]
  4167d4:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4167d8:	f3c3 025e 	ubfx	r2, r3, #1, #31
  4167dc:	eb02 0251 	add.w	r2, r2, r1, lsr #1
  4167e0:	3204      	adds	r2, #4
  4167e2:	f362 035f 	bfi	r3, r2, #1, #31
  4167e6:	f844 3c04 	str.w	r3, [r4, #-4]
            e_next = ent_get_next(e_next);
  4167ea:	4b07      	ldr	r3, [pc, #28]	; (416808 <lv_mem_free+0x6c>)
  4167ec:	4798      	blx	r3
  4167ee:	e7eb      	b.n	4167c8 <lv_mem_free+0x2c>
  4167f0:	bd10      	pop	{r4, pc}
        full_defrag_cnt = 0;
  4167f2:	2200      	movs	r2, #0
  4167f4:	4b03      	ldr	r3, [pc, #12]	; (416804 <lv_mem_free+0x68>)
  4167f6:	801a      	strh	r2, [r3, #0]
        lv_mem_defrag();
  4167f8:	4b04      	ldr	r3, [pc, #16]	; (41680c <lv_mem_free+0x70>)
  4167fa:	4798      	blx	r3
  4167fc:	bd10      	pop	{r4, pc}
  4167fe:	4770      	bx	lr
  416800:	20414814 	.word	0x20414814
  416804:	2040c7e8 	.word	0x2040c7e8
  416808:	00416611 	.word	0x00416611
  41680c:	00416745 	.word	0x00416745

00416810 <_lv_mem_get_size>:
    if(data == NULL) return 0;
  416810:	b138      	cbz	r0, 416822 <_lv_mem_get_size+0x12>
    if(data == &zero_mem) return 0;
  416812:	4a06      	ldr	r2, [pc, #24]	; (41682c <_lv_mem_get_size+0x1c>)
  416814:	4290      	cmp	r0, r2
  416816:	d006      	beq.n	416826 <_lv_mem_get_size+0x16>
    return e->header.s.d_size;
  416818:	f850 0c04 	ldr.w	r0, [r0, #-4]
  41681c:	f3c0 005e 	ubfx	r0, r0, #1, #31
  416820:	4770      	bx	lr
    if(data == NULL) return 0;
  416822:	2000      	movs	r0, #0
  416824:	4770      	bx	lr
    if(data == &zero_mem) return 0;
  416826:	2000      	movs	r0, #0
}
  416828:	4770      	bx	lr
  41682a:	bf00      	nop
  41682c:	20414814 	.word	0x20414814

00416830 <_lv_mem_buf_release>:
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
  416830:	2300      	movs	r3, #0
  416832:	2b01      	cmp	r3, #1
  416834:	d810      	bhi.n	416858 <_lv_mem_buf_release+0x28>
        if(mem_buf_small[i].p == p) {
  416836:	4619      	mov	r1, r3
  416838:	4a12      	ldr	r2, [pc, #72]	; (416884 <_lv_mem_buf_release+0x54>)
  41683a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  41683e:	4282      	cmp	r2, r0
  416840:	d002      	beq.n	416848 <_lv_mem_buf_release+0x18>
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
  416842:	3301      	adds	r3, #1
  416844:	b2db      	uxtb	r3, r3
  416846:	e7f4      	b.n	416832 <_lv_mem_buf_release+0x2>
            mem_buf_small[i].used = 0;
  416848:	4b0e      	ldr	r3, [pc, #56]	; (416884 <_lv_mem_buf_release+0x54>)
  41684a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  41684e:	798b      	ldrb	r3, [r1, #6]
  416850:	f36f 0300 	bfc	r3, #0, #1
  416854:	718b      	strb	r3, [r1, #6]
            return;
  416856:	4770      	bx	lr
  416858:	2300      	movs	r3, #0
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  41685a:	2b0f      	cmp	r3, #15
  41685c:	d810      	bhi.n	416880 <_lv_mem_buf_release+0x50>
        if(LV_GC_ROOT(_lv_mem_buf[i]).p == p) {
  41685e:	4619      	mov	r1, r3
  416860:	4a09      	ldr	r2, [pc, #36]	; (416888 <_lv_mem_buf_release+0x58>)
  416862:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  416866:	4290      	cmp	r0, r2
  416868:	d002      	beq.n	416870 <_lv_mem_buf_release+0x40>
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  41686a:	3301      	adds	r3, #1
  41686c:	b2db      	uxtb	r3, r3
  41686e:	e7f4      	b.n	41685a <_lv_mem_buf_release+0x2a>
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
  416870:	4b05      	ldr	r3, [pc, #20]	; (416888 <_lv_mem_buf_release+0x58>)
  416872:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  416876:	798b      	ldrb	r3, [r1, #6]
  416878:	f36f 0300 	bfc	r3, #0, #1
  41687c:	718b      	strb	r3, [r1, #6]
            return;
  41687e:	4770      	bx	lr
  416880:	4770      	bx	lr
  416882:	bf00      	nop
  416884:	204000a0 	.word	0x204000a0
  416888:	2043a2a8 	.word	0x2043a2a8

0041688c <_lv_mem_buf_free_all>:
{
  41688c:	b510      	push	{r4, lr}
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
  41688e:	2300      	movs	r3, #0
  416890:	e008      	b.n	4168a4 <_lv_mem_buf_free_all+0x18>
        mem_buf_small[i].used = 0;
  416892:	4a12      	ldr	r2, [pc, #72]	; (4168dc <_lv_mem_buf_free_all+0x50>)
  416894:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  416898:	7991      	ldrb	r1, [r2, #6]
  41689a:	f36f 0100 	bfc	r1, #0, #1
  41689e:	7191      	strb	r1, [r2, #6]
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
  4168a0:	3301      	adds	r3, #1
  4168a2:	b2db      	uxtb	r3, r3
  4168a4:	2b01      	cmp	r3, #1
  4168a6:	d9f4      	bls.n	416892 <_lv_mem_buf_free_all+0x6>
  4168a8:	2400      	movs	r4, #0
  4168aa:	e001      	b.n	4168b0 <_lv_mem_buf_free_all+0x24>
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  4168ac:	3401      	adds	r4, #1
  4168ae:	b2e4      	uxtb	r4, r4
  4168b0:	2c0f      	cmp	r4, #15
  4168b2:	d812      	bhi.n	4168da <_lv_mem_buf_free_all+0x4e>
        if(LV_GC_ROOT(_lv_mem_buf[i]).p) {
  4168b4:	4b0a      	ldr	r3, [pc, #40]	; (4168e0 <_lv_mem_buf_free_all+0x54>)
  4168b6:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
  4168ba:	2800      	cmp	r0, #0
  4168bc:	d0f6      	beq.n	4168ac <_lv_mem_buf_free_all+0x20>
            lv_mem_free(LV_GC_ROOT(_lv_mem_buf[i]).p);
  4168be:	4b09      	ldr	r3, [pc, #36]	; (4168e4 <_lv_mem_buf_free_all+0x58>)
  4168c0:	4798      	blx	r3
            LV_GC_ROOT(_lv_mem_buf[i]).p = NULL;
  4168c2:	4b07      	ldr	r3, [pc, #28]	; (4168e0 <_lv_mem_buf_free_all+0x54>)
  4168c4:	2200      	movs	r2, #0
  4168c6:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
  4168ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  4168ce:	7999      	ldrb	r1, [r3, #6]
  4168d0:	f362 0100 	bfi	r1, r2, #0, #1
  4168d4:	7199      	strb	r1, [r3, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = 0;
  4168d6:	809a      	strh	r2, [r3, #4]
  4168d8:	e7e8      	b.n	4168ac <_lv_mem_buf_free_all+0x20>
}
  4168da:	bd10      	pop	{r4, pc}
  4168dc:	204000a0 	.word	0x204000a0
  4168e0:	2043a2a8 	.word	0x2043a2a8
  4168e4:	0041679d 	.word	0x0041679d

004168e8 <_lv_memcpy>:
{
  4168e8:	b430      	push	{r4, r5}
    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
  4168ea:	f000 0403 	and.w	r4, r0, #3
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
  4168ee:	f001 0303 	and.w	r3, r1, #3
    if(s_align != d_align) {
  4168f2:	429c      	cmp	r4, r3
  4168f4:	d050      	beq.n	416998 <_lv_memcpy+0xb0>
  4168f6:	4603      	mov	r3, r0
  4168f8:	e042      	b.n	416980 <_lv_memcpy+0x98>
            REPEAT8(COPY8);
  4168fa:	780c      	ldrb	r4, [r1, #0]
  4168fc:	701c      	strb	r4, [r3, #0]
  4168fe:	784c      	ldrb	r4, [r1, #1]
  416900:	705c      	strb	r4, [r3, #1]
  416902:	788c      	ldrb	r4, [r1, #2]
  416904:	709c      	strb	r4, [r3, #2]
  416906:	78cc      	ldrb	r4, [r1, #3]
  416908:	70dc      	strb	r4, [r3, #3]
  41690a:	790c      	ldrb	r4, [r1, #4]
  41690c:	711c      	strb	r4, [r3, #4]
  41690e:	794c      	ldrb	r4, [r1, #5]
  416910:	715c      	strb	r4, [r3, #5]
  416912:	798c      	ldrb	r4, [r1, #6]
  416914:	719c      	strb	r4, [r3, #6]
  416916:	79cc      	ldrb	r4, [r1, #7]
  416918:	71dc      	strb	r4, [r3, #7]
            REPEAT8(COPY8);
  41691a:	7a0c      	ldrb	r4, [r1, #8]
  41691c:	721c      	strb	r4, [r3, #8]
  41691e:	7a4c      	ldrb	r4, [r1, #9]
  416920:	725c      	strb	r4, [r3, #9]
  416922:	7a8c      	ldrb	r4, [r1, #10]
  416924:	729c      	strb	r4, [r3, #10]
  416926:	7acc      	ldrb	r4, [r1, #11]
  416928:	72dc      	strb	r4, [r3, #11]
  41692a:	7b0c      	ldrb	r4, [r1, #12]
  41692c:	731c      	strb	r4, [r3, #12]
  41692e:	7b4c      	ldrb	r4, [r1, #13]
  416930:	735c      	strb	r4, [r3, #13]
  416932:	7b8c      	ldrb	r4, [r1, #14]
  416934:	739c      	strb	r4, [r3, #14]
  416936:	7bcc      	ldrb	r4, [r1, #15]
  416938:	73dc      	strb	r4, [r3, #15]
            REPEAT8(COPY8);
  41693a:	7c0c      	ldrb	r4, [r1, #16]
  41693c:	741c      	strb	r4, [r3, #16]
  41693e:	7c4c      	ldrb	r4, [r1, #17]
  416940:	745c      	strb	r4, [r3, #17]
  416942:	7c8c      	ldrb	r4, [r1, #18]
  416944:	749c      	strb	r4, [r3, #18]
  416946:	7ccc      	ldrb	r4, [r1, #19]
  416948:	74dc      	strb	r4, [r3, #19]
  41694a:	7d0c      	ldrb	r4, [r1, #20]
  41694c:	751c      	strb	r4, [r3, #20]
  41694e:	7d4c      	ldrb	r4, [r1, #21]
  416950:	755c      	strb	r4, [r3, #21]
  416952:	7d8c      	ldrb	r4, [r1, #22]
  416954:	759c      	strb	r4, [r3, #22]
  416956:	7dcc      	ldrb	r4, [r1, #23]
  416958:	75dc      	strb	r4, [r3, #23]
            REPEAT8(COPY8);
  41695a:	7e0c      	ldrb	r4, [r1, #24]
  41695c:	761c      	strb	r4, [r3, #24]
  41695e:	7e4c      	ldrb	r4, [r1, #25]
  416960:	765c      	strb	r4, [r3, #25]
  416962:	7e8c      	ldrb	r4, [r1, #26]
  416964:	769c      	strb	r4, [r3, #26]
  416966:	7ecc      	ldrb	r4, [r1, #27]
  416968:	76dc      	strb	r4, [r3, #27]
  41696a:	7f0c      	ldrb	r4, [r1, #28]
  41696c:	771c      	strb	r4, [r3, #28]
  41696e:	7f4c      	ldrb	r4, [r1, #29]
  416970:	775c      	strb	r4, [r3, #29]
  416972:	7f8c      	ldrb	r4, [r1, #30]
  416974:	779c      	strb	r4, [r3, #30]
  416976:	7fcc      	ldrb	r4, [r1, #31]
  416978:	77dc      	strb	r4, [r3, #31]
  41697a:	3320      	adds	r3, #32
  41697c:	3120      	adds	r1, #32
            len -= 32;
  41697e:	3a20      	subs	r2, #32
        while(len > 32) {
  416980:	2a20      	cmp	r2, #32
  416982:	d8ba      	bhi.n	4168fa <_lv_memcpy+0x12>
  416984:	e004      	b.n	416990 <_lv_memcpy+0xa8>
            COPY8
  416986:	f811 4b01 	ldrb.w	r4, [r1], #1
  41698a:	f803 4b01 	strb.w	r4, [r3], #1
            len--;
  41698e:	3a01      	subs	r2, #1
        while(len) {
  416990:	2a00      	cmp	r2, #0
  416992:	d1f8      	bne.n	416986 <_lv_memcpy+0x9e>
}
  416994:	bc30      	pop	{r4, r5}
  416996:	4770      	bx	lr
    if(d_align) {
  416998:	b174      	cbz	r4, 4169b8 <_lv_memcpy+0xd0>
        d_align = ALIGN_MASK + 1 - d_align;
  41699a:	f1c4 0404 	rsb	r4, r4, #4
    uint8_t * d8 = dst;
  41699e:	4603      	mov	r3, r0
        while(d_align && len) {
  4169a0:	e005      	b.n	4169ae <_lv_memcpy+0xc6>
            COPY8;
  4169a2:	f811 5b01 	ldrb.w	r5, [r1], #1
  4169a6:	f803 5b01 	strb.w	r5, [r3], #1
            d_align--;
  4169aa:	3c01      	subs	r4, #1
            len--;
  4169ac:	3a01      	subs	r2, #1
        while(d_align && len) {
  4169ae:	2c00      	cmp	r4, #0
  4169b0:	bf18      	it	ne
  4169b2:	2a00      	cmpne	r2, #0
  4169b4:	d1f5      	bne.n	4169a2 <_lv_memcpy+0xba>
  4169b6:	e014      	b.n	4169e2 <_lv_memcpy+0xfa>
    uint8_t * d8 = dst;
  4169b8:	4603      	mov	r3, r0
  4169ba:	e012      	b.n	4169e2 <_lv_memcpy+0xfa>
        REPEAT8(COPY32)
  4169bc:	680c      	ldr	r4, [r1, #0]
  4169be:	601c      	str	r4, [r3, #0]
  4169c0:	684c      	ldr	r4, [r1, #4]
  4169c2:	605c      	str	r4, [r3, #4]
  4169c4:	688c      	ldr	r4, [r1, #8]
  4169c6:	609c      	str	r4, [r3, #8]
  4169c8:	68cc      	ldr	r4, [r1, #12]
  4169ca:	60dc      	str	r4, [r3, #12]
  4169cc:	690c      	ldr	r4, [r1, #16]
  4169ce:	611c      	str	r4, [r3, #16]
  4169d0:	694c      	ldr	r4, [r1, #20]
  4169d2:	615c      	str	r4, [r3, #20]
  4169d4:	698c      	ldr	r4, [r1, #24]
  4169d6:	619c      	str	r4, [r3, #24]
  4169d8:	69cc      	ldr	r4, [r1, #28]
  4169da:	61dc      	str	r4, [r3, #28]
  4169dc:	3320      	adds	r3, #32
  4169de:	3120      	adds	r1, #32
        len -= 32;
  4169e0:	3a20      	subs	r2, #32
    while(len > 32) {
  4169e2:	2a20      	cmp	r2, #32
  4169e4:	d8ea      	bhi.n	4169bc <_lv_memcpy+0xd4>
  4169e6:	e004      	b.n	4169f2 <_lv_memcpy+0x10a>
        COPY32;
  4169e8:	f851 4b04 	ldr.w	r4, [r1], #4
  4169ec:	f843 4b04 	str.w	r4, [r3], #4
        len -= 4;
  4169f0:	3a04      	subs	r2, #4
    while(len > 4) {
  4169f2:	2a04      	cmp	r2, #4
  4169f4:	d8f8      	bhi.n	4169e8 <_lv_memcpy+0x100>
  4169f6:	e004      	b.n	416a02 <_lv_memcpy+0x11a>
        COPY8
  4169f8:	f811 4b01 	ldrb.w	r4, [r1], #1
  4169fc:	f803 4b01 	strb.w	r4, [r3], #1
        len--;
  416a00:	3a01      	subs	r2, #1
    while(len) {
  416a02:	2a00      	cmp	r2, #0
  416a04:	d1f8      	bne.n	4169f8 <_lv_memcpy+0x110>
  416a06:	e7c5      	b.n	416994 <_lv_memcpy+0xac>

00416a08 <lv_mem_realloc>:
{
  416a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    new_size = (new_size + ALIGN_MASK) & (~ALIGN_MASK);
  416a0a:	3103      	adds	r1, #3
  416a0c:	f021 0403 	bic.w	r4, r1, #3
    if(data_p != NULL) {
  416a10:	4605      	mov	r5, r0
  416a12:	b128      	cbz	r0, 416a20 <lv_mem_realloc+0x18>
        if(e->header.s.used == 0) {
  416a14:	f810 3c04 	ldrb.w	r3, [r0, #-4]
  416a18:	f013 0f01 	tst.w	r3, #1
  416a1c:	d100      	bne.n	416a20 <lv_mem_realloc+0x18>
            data_p = NULL;
  416a1e:	2500      	movs	r5, #0
    uint32_t old_size = _lv_mem_get_size(data_p);
  416a20:	4628      	mov	r0, r5
  416a22:	4b12      	ldr	r3, [pc, #72]	; (416a6c <lv_mem_realloc+0x64>)
  416a24:	4798      	blx	r3
  416a26:	4606      	mov	r6, r0
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
  416a28:	4284      	cmp	r4, r0
  416a2a:	d01d      	beq.n	416a68 <lv_mem_realloc+0x60>
    if(new_size < old_size) {
  416a2c:	d30e      	bcc.n	416a4c <lv_mem_realloc+0x44>
    new_p = lv_mem_alloc(new_size);
  416a2e:	4620      	mov	r0, r4
  416a30:	4b0f      	ldr	r3, [pc, #60]	; (416a70 <lv_mem_realloc+0x68>)
  416a32:	4798      	blx	r3
    if(new_p == NULL) {
  416a34:	4607      	mov	r7, r0
  416a36:	b138      	cbz	r0, 416a48 <lv_mem_realloc+0x40>
    if(data_p != NULL) {
  416a38:	b135      	cbz	r5, 416a48 <lv_mem_realloc+0x40>
        if(old_size != 0 && new_size != 0) {
  416a3a:	2e00      	cmp	r6, #0
  416a3c:	bf18      	it	ne
  416a3e:	2c00      	cmpne	r4, #0
  416a40:	d10a      	bne.n	416a58 <lv_mem_realloc+0x50>
        lv_mem_free(data_p);
  416a42:	4628      	mov	r0, r5
  416a44:	4b0b      	ldr	r3, [pc, #44]	; (416a74 <lv_mem_realloc+0x6c>)
  416a46:	4798      	blx	r3
}
  416a48:	4638      	mov	r0, r7
  416a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ent_trunc(e, new_size);
  416a4c:	4621      	mov	r1, r4
  416a4e:	1f28      	subs	r0, r5, #4
  416a50:	4b09      	ldr	r3, [pc, #36]	; (416a78 <lv_mem_realloc+0x70>)
  416a52:	4798      	blx	r3
        return &e->first_data;
  416a54:	462f      	mov	r7, r5
  416a56:	e7f7      	b.n	416a48 <lv_mem_realloc+0x40>
            _lv_memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
  416a58:	4622      	mov	r2, r4
  416a5a:	42b4      	cmp	r4, r6
  416a5c:	bf28      	it	cs
  416a5e:	4632      	movcs	r2, r6
  416a60:	4629      	mov	r1, r5
  416a62:	4b06      	ldr	r3, [pc, #24]	; (416a7c <lv_mem_realloc+0x74>)
  416a64:	4798      	blx	r3
  416a66:	e7ec      	b.n	416a42 <lv_mem_realloc+0x3a>
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
  416a68:	462f      	mov	r7, r5
  416a6a:	e7ed      	b.n	416a48 <lv_mem_realloc+0x40>
  416a6c:	00416811 	.word	0x00416811
  416a70:	004166d9 	.word	0x004166d9
  416a74:	0041679d 	.word	0x0041679d
  416a78:	0041663d 	.word	0x0041663d
  416a7c:	004168e9 	.word	0x004168e9

00416a80 <_lv_mem_buf_get>:
{
  416a80:	b538      	push	{r3, r4, r5, lr}
    if(size == 0) return NULL;
  416a82:	2800      	cmp	r0, #0
  416a84:	f000 8085 	beq.w	416b92 <_lv_mem_buf_get+0x112>
  416a88:	4604      	mov	r4, r0
    if(size <= MEM_BUF_SMALL_SIZE) {
  416a8a:	2810      	cmp	r0, #16
  416a8c:	d91d      	bls.n	416aca <_lv_mem_buf_get+0x4a>
  416a8e:	f04f 31ff 	mov.w	r1, #4294967295
  416a92:	2300      	movs	r3, #0
  416a94:	e028      	b.n	416ae8 <_lv_mem_buf_get+0x68>
            if(mem_buf_small[i].used == 0) {
  416a96:	4619      	mov	r1, r3
  416a98:	4a3f      	ldr	r2, [pc, #252]	; (416b98 <_lv_mem_buf_get+0x118>)
  416a9a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  416a9e:	7992      	ldrb	r2, [r2, #6]
  416aa0:	f012 0f01 	tst.w	r2, #1
  416aa4:	d007      	beq.n	416ab6 <_lv_mem_buf_get+0x36>
        for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
  416aa6:	3301      	adds	r3, #1
  416aa8:	b2db      	uxtb	r3, r3
  416aaa:	2b01      	cmp	r3, #1
  416aac:	d9f3      	bls.n	416a96 <_lv_mem_buf_get+0x16>
  416aae:	f04f 31ff 	mov.w	r1, #4294967295
  416ab2:	2300      	movs	r3, #0
  416ab4:	e018      	b.n	416ae8 <_lv_mem_buf_get+0x68>
                mem_buf_small[i].used = 1;
  416ab6:	4a38      	ldr	r2, [pc, #224]	; (416b98 <_lv_mem_buf_get+0x118>)
  416ab8:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
  416abc:	7983      	ldrb	r3, [r0, #6]
  416abe:	f043 0301 	orr.w	r3, r3, #1
  416ac2:	7183      	strb	r3, [r0, #6]
                return mem_buf_small[i].p;
  416ac4:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
  416ac8:	e034      	b.n	416b34 <_lv_mem_buf_get+0xb4>
  416aca:	2300      	movs	r3, #0
  416acc:	e7ed      	b.n	416aaa <_lv_mem_buf_get+0x2a>
                LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
  416ace:	4a33      	ldr	r2, [pc, #204]	; (416b9c <_lv_mem_buf_get+0x11c>)
  416ad0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  416ad4:	798b      	ldrb	r3, [r1, #6]
  416ad6:	f043 0301 	orr.w	r3, r3, #1
  416ada:	718b      	strb	r3, [r1, #6]
                return LV_GC_ROOT(_lv_mem_buf[i]).p;
  416adc:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
  416ae0:	e028      	b.n	416b34 <_lv_mem_buf_get+0xb4>
                i_guess = i;
  416ae2:	b259      	sxtb	r1, r3
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  416ae4:	3301      	adds	r3, #1
  416ae6:	b2db      	uxtb	r3, r3
  416ae8:	2b0f      	cmp	r3, #15
  416aea:	d818      	bhi.n	416b1e <_lv_mem_buf_get+0x9e>
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0 && LV_GC_ROOT(_lv_mem_buf[i]).size >= size) {
  416aec:	4618      	mov	r0, r3
  416aee:	4a2b      	ldr	r2, [pc, #172]	; (416b9c <_lv_mem_buf_get+0x11c>)
  416af0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  416af4:	7992      	ldrb	r2, [r2, #6]
  416af6:	f012 0f01 	tst.w	r2, #1
  416afa:	d1f3      	bne.n	416ae4 <_lv_mem_buf_get+0x64>
  416afc:	4a27      	ldr	r2, [pc, #156]	; (416b9c <_lv_mem_buf_get+0x11c>)
  416afe:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  416b02:	8892      	ldrh	r2, [r2, #4]
  416b04:	4294      	cmp	r4, r2
  416b06:	d8ed      	bhi.n	416ae4 <_lv_mem_buf_get+0x64>
            if(LV_GC_ROOT(_lv_mem_buf[i]).size == size) {
  416b08:	d0e1      	beq.n	416ace <_lv_mem_buf_get+0x4e>
            else if(i_guess < 0) {
  416b0a:	2900      	cmp	r1, #0
  416b0c:	dbe9      	blt.n	416ae2 <_lv_mem_buf_get+0x62>
            else if(LV_GC_ROOT(_lv_mem_buf[i]).size < LV_GC_ROOT(_lv_mem_buf[i_guess]).size) {
  416b0e:	4823      	ldr	r0, [pc, #140]	; (416b9c <_lv_mem_buf_get+0x11c>)
  416b10:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
  416b14:	8880      	ldrh	r0, [r0, #4]
  416b16:	4282      	cmp	r2, r0
  416b18:	d2e4      	bcs.n	416ae4 <_lv_mem_buf_get+0x64>
                i_guess = i;
  416b1a:	b259      	sxtb	r1, r3
  416b1c:	e7e2      	b.n	416ae4 <_lv_mem_buf_get+0x64>
    if(i_guess >= 0) {
  416b1e:	2900      	cmp	r1, #0
  416b20:	db23      	blt.n	416b6a <_lv_mem_buf_get+0xea>
        LV_GC_ROOT(_lv_mem_buf[i_guess]).used = 1;
  416b22:	4a1e      	ldr	r2, [pc, #120]	; (416b9c <_lv_mem_buf_get+0x11c>)
  416b24:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
  416b28:	7983      	ldrb	r3, [r0, #6]
  416b2a:	f043 0301 	orr.w	r3, r3, #1
  416b2e:	7183      	strb	r3, [r0, #6]
        return LV_GC_ROOT(_lv_mem_buf[i_guess]).p;
  416b30:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
}
  416b34:	4618      	mov	r0, r3
  416b36:	bd38      	pop	{r3, r4, r5, pc}
            void * buf = lv_mem_realloc(LV_GC_ROOT(_lv_mem_buf[i]).p, size);
  416b38:	4621      	mov	r1, r4
  416b3a:	4b18      	ldr	r3, [pc, #96]	; (416b9c <_lv_mem_buf_get+0x11c>)
  416b3c:	f853 0035 	ldr.w	r0, [r3, r5, lsl #3]
  416b40:	4b17      	ldr	r3, [pc, #92]	; (416ba0 <_lv_mem_buf_get+0x120>)
  416b42:	4798      	blx	r3
            if(buf == NULL) {
  416b44:	4603      	mov	r3, r0
  416b46:	b150      	cbz	r0, 416b5e <_lv_mem_buf_get+0xde>
            LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
  416b48:	4814      	ldr	r0, [pc, #80]	; (416b9c <_lv_mem_buf_get+0x11c>)
  416b4a:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
  416b4e:	7991      	ldrb	r1, [r2, #6]
  416b50:	f041 0101 	orr.w	r1, r1, #1
  416b54:	7191      	strb	r1, [r2, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = size;
  416b56:	8094      	strh	r4, [r2, #4]
            LV_GC_ROOT(_lv_mem_buf[i]).p    = buf;
  416b58:	f840 3035 	str.w	r3, [r0, r5, lsl #3]
            return LV_GC_ROOT(_lv_mem_buf[i]).p;
  416b5c:	e7ea      	b.n	416b34 <_lv_mem_buf_get+0xb4>
                LV_DEBUG_ASSERT(false, "Out of memory, can't allocate a new buffer (increase your LV_MEM_SIZE/heap size)", 0x00);
  416b5e:	2200      	movs	r2, #0
  416b60:	2300      	movs	r3, #0
  416b62:	4810      	ldr	r0, [pc, #64]	; (416ba4 <_lv_mem_buf_get+0x124>)
  416b64:	4910      	ldr	r1, [pc, #64]	; (416ba8 <_lv_mem_buf_get+0x128>)
  416b66:	4788      	blx	r1
  416b68:	e7fe      	b.n	416b68 <_lv_mem_buf_get+0xe8>
  416b6a:	2300      	movs	r3, #0
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  416b6c:	2b0f      	cmp	r3, #15
  416b6e:	d80a      	bhi.n	416b86 <_lv_mem_buf_get+0x106>
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0) {
  416b70:	461d      	mov	r5, r3
  416b72:	4a0a      	ldr	r2, [pc, #40]	; (416b9c <_lv_mem_buf_get+0x11c>)
  416b74:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  416b78:	7992      	ldrb	r2, [r2, #6]
  416b7a:	f012 0f01 	tst.w	r2, #1
  416b7e:	d0db      	beq.n	416b38 <_lv_mem_buf_get+0xb8>
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  416b80:	3301      	adds	r3, #1
  416b82:	b2db      	uxtb	r3, r3
  416b84:	e7f2      	b.n	416b6c <_lv_mem_buf_get+0xec>
    LV_DEBUG_ASSERT(false, "No free buffer. Increase LV_MEM_BUF_MAX_NUM.", 0x00);
  416b86:	2200      	movs	r2, #0
  416b88:	2300      	movs	r3, #0
  416b8a:	4808      	ldr	r0, [pc, #32]	; (416bac <_lv_mem_buf_get+0x12c>)
  416b8c:	4906      	ldr	r1, [pc, #24]	; (416ba8 <_lv_mem_buf_get+0x128>)
  416b8e:	4788      	blx	r1
  416b90:	e7fe      	b.n	416b90 <_lv_mem_buf_get+0x110>
    if(size == 0) return NULL;
  416b92:	2300      	movs	r3, #0
  416b94:	e7ce      	b.n	416b34 <_lv_mem_buf_get+0xb4>
  416b96:	bf00      	nop
  416b98:	204000a0 	.word	0x204000a0
  416b9c:	2043a2a8 	.word	0x2043a2a8
  416ba0:	00416a09 	.word	0x00416a09
  416ba4:	0042fda0 	.word	0x0042fda0
  416ba8:	00415fa1 	.word	0x00415fa1
  416bac:	0042fdf4 	.word	0x0042fdf4

00416bb0 <_lv_memset>:
    if(d_align) {
  416bb0:	f010 0303 	ands.w	r3, r0, #3
  416bb4:	d00a      	beq.n	416bcc <_lv_memset+0x1c>
        d_align = ALIGN_MASK + 1 - d_align;
  416bb6:	f1c3 0304 	rsb	r3, r3, #4
        while(d_align && len) {
  416bba:	e003      	b.n	416bc4 <_lv_memset+0x14>
            SET8(v);
  416bbc:	f800 1b01 	strb.w	r1, [r0], #1
            len--;
  416bc0:	3a01      	subs	r2, #1
            d_align--;
  416bc2:	3b01      	subs	r3, #1
        while(d_align && len) {
  416bc4:	2b00      	cmp	r3, #0
  416bc6:	bf18      	it	ne
  416bc8:	2a00      	cmpne	r2, #0
  416bca:	d1f7      	bne.n	416bbc <_lv_memset+0xc>
    uint32_t v32 = v + (v << 8) + (v << 16) + (v << 24);
  416bcc:	eb01 2301 	add.w	r3, r1, r1, lsl #8
  416bd0:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  416bd4:	eb03 6301 	add.w	r3, r3, r1, lsl #24
    while(len > 32) {
  416bd8:	e009      	b.n	416bee <_lv_memset+0x3e>
        REPEAT8(SET32(v32));
  416bda:	6003      	str	r3, [r0, #0]
  416bdc:	6043      	str	r3, [r0, #4]
  416bde:	6083      	str	r3, [r0, #8]
  416be0:	60c3      	str	r3, [r0, #12]
  416be2:	6103      	str	r3, [r0, #16]
  416be4:	6143      	str	r3, [r0, #20]
  416be6:	6183      	str	r3, [r0, #24]
  416be8:	61c3      	str	r3, [r0, #28]
  416bea:	3020      	adds	r0, #32
        len -= 32;
  416bec:	3a20      	subs	r2, #32
    while(len > 32) {
  416bee:	2a20      	cmp	r2, #32
  416bf0:	d8f3      	bhi.n	416bda <_lv_memset+0x2a>
  416bf2:	e002      	b.n	416bfa <_lv_memset+0x4a>
        SET32(v32);
  416bf4:	f840 3b04 	str.w	r3, [r0], #4
        len -= 4;
  416bf8:	3a04      	subs	r2, #4
    while(len > 4) {
  416bfa:	2a04      	cmp	r2, #4
  416bfc:	d8fa      	bhi.n	416bf4 <_lv_memset+0x44>
  416bfe:	e002      	b.n	416c06 <_lv_memset+0x56>
        SET8(v);
  416c00:	f800 1b01 	strb.w	r1, [r0], #1
        len--;
  416c04:	3a01      	subs	r2, #1
    while(len) {
  416c06:	2a00      	cmp	r2, #0
  416c08:	d1fa      	bne.n	416c00 <_lv_memset+0x50>
}
  416c0a:	4770      	bx	lr

00416c0c <_lv_memset_00>:
    if(d_align) {
  416c0c:	f010 0303 	ands.w	r3, r0, #3
  416c10:	d017      	beq.n	416c42 <_lv_memset_00+0x36>
        d_align = ALIGN_MASK + 1 - d_align;
  416c12:	f1c3 0304 	rsb	r3, r3, #4
        while(d_align && len) {
  416c16:	e004      	b.n	416c22 <_lv_memset_00+0x16>
            SET8(0);
  416c18:	2200      	movs	r2, #0
  416c1a:	f800 2b01 	strb.w	r2, [r0], #1
            len--;
  416c1e:	3901      	subs	r1, #1
            d_align--;
  416c20:	3b01      	subs	r3, #1
        while(d_align && len) {
  416c22:	2b00      	cmp	r3, #0
  416c24:	bf18      	it	ne
  416c26:	2900      	cmpne	r1, #0
  416c28:	d1f6      	bne.n	416c18 <_lv_memset_00+0xc>
  416c2a:	e00a      	b.n	416c42 <_lv_memset_00+0x36>
        REPEAT8(SET32(0));
  416c2c:	2300      	movs	r3, #0
  416c2e:	6003      	str	r3, [r0, #0]
  416c30:	6043      	str	r3, [r0, #4]
  416c32:	6083      	str	r3, [r0, #8]
  416c34:	60c3      	str	r3, [r0, #12]
  416c36:	6103      	str	r3, [r0, #16]
  416c38:	6143      	str	r3, [r0, #20]
  416c3a:	6183      	str	r3, [r0, #24]
  416c3c:	61c3      	str	r3, [r0, #28]
  416c3e:	3020      	adds	r0, #32
        len -= 32;
  416c40:	3920      	subs	r1, #32
    while(len > 32) {
  416c42:	2920      	cmp	r1, #32
  416c44:	d8f2      	bhi.n	416c2c <_lv_memset_00+0x20>
  416c46:	e003      	b.n	416c50 <_lv_memset_00+0x44>
        SET32(0);
  416c48:	2300      	movs	r3, #0
  416c4a:	f840 3b04 	str.w	r3, [r0], #4
        len -= 4;
  416c4e:	3904      	subs	r1, #4
    while(len > 4) {
  416c50:	2904      	cmp	r1, #4
  416c52:	d8f9      	bhi.n	416c48 <_lv_memset_00+0x3c>
  416c54:	e003      	b.n	416c5e <_lv_memset_00+0x52>
        SET8(0);
  416c56:	2300      	movs	r3, #0
  416c58:	f800 3b01 	strb.w	r3, [r0], #1
        len--;
  416c5c:	3901      	subs	r1, #1
    while(len) {
  416c5e:	2900      	cmp	r1, #0
  416c60:	d1f9      	bne.n	416c56 <_lv_memset_00+0x4a>
}
  416c62:	4770      	bx	lr

00416c64 <_lv_memset_ff>:
    if(d_align) {
  416c64:	f010 0303 	ands.w	r3, r0, #3
  416c68:	d018      	beq.n	416c9c <_lv_memset_ff+0x38>
        d_align = ALIGN_MASK + 1 - d_align;
  416c6a:	f1c3 0304 	rsb	r3, r3, #4
        while(d_align && len) {
  416c6e:	e004      	b.n	416c7a <_lv_memset_ff+0x16>
            SET8(0xFF);
  416c70:	22ff      	movs	r2, #255	; 0xff
  416c72:	f800 2b01 	strb.w	r2, [r0], #1
            len--;
  416c76:	3901      	subs	r1, #1
            d_align--;
  416c78:	3b01      	subs	r3, #1
        while(d_align && len) {
  416c7a:	2b00      	cmp	r3, #0
  416c7c:	bf18      	it	ne
  416c7e:	2900      	cmpne	r1, #0
  416c80:	d1f6      	bne.n	416c70 <_lv_memset_ff+0xc>
  416c82:	e00b      	b.n	416c9c <_lv_memset_ff+0x38>
        REPEAT8(SET32(0xFFFFFFFF));
  416c84:	f04f 33ff 	mov.w	r3, #4294967295
  416c88:	6003      	str	r3, [r0, #0]
  416c8a:	6043      	str	r3, [r0, #4]
  416c8c:	6083      	str	r3, [r0, #8]
  416c8e:	60c3      	str	r3, [r0, #12]
  416c90:	6103      	str	r3, [r0, #16]
  416c92:	6143      	str	r3, [r0, #20]
  416c94:	6183      	str	r3, [r0, #24]
  416c96:	61c3      	str	r3, [r0, #28]
  416c98:	3020      	adds	r0, #32
        len -= 32;
  416c9a:	3920      	subs	r1, #32
    while(len > 32) {
  416c9c:	2920      	cmp	r1, #32
  416c9e:	d8f1      	bhi.n	416c84 <_lv_memset_ff+0x20>
  416ca0:	e004      	b.n	416cac <_lv_memset_ff+0x48>
        SET32(0xFFFFFFFF);
  416ca2:	f04f 33ff 	mov.w	r3, #4294967295
  416ca6:	f840 3b04 	str.w	r3, [r0], #4
        len -= 4;
  416caa:	3904      	subs	r1, #4
    while(len > 4) {
  416cac:	2904      	cmp	r1, #4
  416cae:	d8f8      	bhi.n	416ca2 <_lv_memset_ff+0x3e>
  416cb0:	e003      	b.n	416cba <_lv_memset_ff+0x56>
        SET8(0xFF);
  416cb2:	23ff      	movs	r3, #255	; 0xff
  416cb4:	f800 3b01 	strb.w	r3, [r0], #1
        len--;
  416cb8:	3901      	subs	r1, #1
    while(len) {
  416cba:	2900      	cmp	r1, #0
  416cbc:	d1f9      	bne.n	416cb2 <_lv_memset_ff+0x4e>
}
  416cbe:	4770      	bx	lr

00416cc0 <_out_buffer>:
  416cc0:	429a      	cmp	r2, r3
  416cc2:	d200      	bcs.n	416cc6 <_out_buffer+0x6>
  416cc4:	5488      	strb	r0, [r1, r2]
  416cc6:	4770      	bx	lr

00416cc8 <_out_null>:
  416cc8:	4770      	bx	lr

00416cca <_atoi>:
  416cca:	2300      	movs	r3, #0
  416ccc:	e007      	b.n	416cde <_atoi+0x14>
  416cce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  416cd2:	005a      	lsls	r2, r3, #1
  416cd4:	1c4b      	adds	r3, r1, #1
  416cd6:	6003      	str	r3, [r0, #0]
  416cd8:	780b      	ldrb	r3, [r1, #0]
  416cda:	4413      	add	r3, r2
  416cdc:	3b30      	subs	r3, #48	; 0x30
  416cde:	6801      	ldr	r1, [r0, #0]
  416ce0:	780a      	ldrb	r2, [r1, #0]
  416ce2:	3a30      	subs	r2, #48	; 0x30
  416ce4:	b2d2      	uxtb	r2, r2
  416ce6:	2a09      	cmp	r2, #9
  416ce8:	d9f1      	bls.n	416cce <_atoi+0x4>
  416cea:	4618      	mov	r0, r3
  416cec:	4770      	bx	lr

00416cee <_out_rev>:
  416cee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  416cf2:	b083      	sub	sp, #12
  416cf4:	4605      	mov	r5, r0
  416cf6:	9101      	str	r1, [sp, #4]
  416cf8:	4693      	mov	fp, r2
  416cfa:	461e      	mov	r6, r3
  416cfc:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
  416d00:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  416d02:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  416d06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  416d08:	f013 0f03 	tst.w	r3, #3
  416d0c:	d114      	bne.n	416d38 <_out_rev+0x4a>
  416d0e:	4627      	mov	r7, r4
  416d10:	e007      	b.n	416d22 <_out_rev+0x34>
  416d12:	f102 0a01 	add.w	sl, r2, #1
  416d16:	4633      	mov	r3, r6
  416d18:	9901      	ldr	r1, [sp, #4]
  416d1a:	2020      	movs	r0, #32
  416d1c:	47a8      	blx	r5
  416d1e:	3701      	adds	r7, #1
  416d20:	4652      	mov	r2, sl
  416d22:	4547      	cmp	r7, r8
  416d24:	d3f5      	bcc.n	416d12 <_out_rev+0x24>
  416d26:	e007      	b.n	416d38 <_out_rev+0x4a>
  416d28:	3c01      	subs	r4, #1
  416d2a:	1c57      	adds	r7, r2, #1
  416d2c:	4633      	mov	r3, r6
  416d2e:	9901      	ldr	r1, [sp, #4]
  416d30:	f819 0004 	ldrb.w	r0, [r9, r4]
  416d34:	47a8      	blx	r5
  416d36:	463a      	mov	r2, r7
  416d38:	2c00      	cmp	r4, #0
  416d3a:	d1f5      	bne.n	416d28 <_out_rev+0x3a>
  416d3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  416d3e:	f013 0f02 	tst.w	r3, #2
  416d42:	d00b      	beq.n	416d5c <_out_rev+0x6e>
  416d44:	9f01      	ldr	r7, [sp, #4]
  416d46:	e005      	b.n	416d54 <_out_rev+0x66>
  416d48:	1c54      	adds	r4, r2, #1
  416d4a:	4633      	mov	r3, r6
  416d4c:	4639      	mov	r1, r7
  416d4e:	2020      	movs	r0, #32
  416d50:	47a8      	blx	r5
  416d52:	4622      	mov	r2, r4
  416d54:	eba2 030b 	sub.w	r3, r2, fp
  416d58:	4598      	cmp	r8, r3
  416d5a:	d8f5      	bhi.n	416d48 <_out_rev+0x5a>
  416d5c:	4610      	mov	r0, r2
  416d5e:	b003      	add	sp, #12
  416d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00416d64 <_ntoa_format>:
  416d64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  416d68:	b085      	sub	sp, #20
  416d6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  416d6c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  416d6e:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
  416d72:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
  416d76:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  416d7a:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
  416d7e:	9e12      	ldr	r6, [sp, #72]	; 0x48
  416d80:	f016 0f02 	tst.w	r6, #2
  416d84:	d124      	bne.n	416dd0 <_ntoa_format+0x6c>
  416d86:	f1be 0f00 	cmp.w	lr, #0
  416d8a:	d00e      	beq.n	416daa <_ntoa_format+0x46>
  416d8c:	f016 0f01 	tst.w	r6, #1
  416d90:	d00b      	beq.n	416daa <_ntoa_format+0x46>
  416d92:	f1b9 0f00 	cmp.w	r9, #0
  416d96:	d102      	bne.n	416d9e <_ntoa_format+0x3a>
  416d98:	f016 0f0c 	tst.w	r6, #12
  416d9c:	d005      	beq.n	416daa <_ntoa_format+0x46>
  416d9e:	f10e 3eff 	add.w	lr, lr, #4294967295
  416da2:	e002      	b.n	416daa <_ntoa_format+0x46>
  416da4:	2730      	movs	r7, #48	; 0x30
  416da6:	552f      	strb	r7, [r5, r4]
  416da8:	3401      	adds	r4, #1
  416daa:	2c1f      	cmp	r4, #31
  416dac:	bf98      	it	ls
  416dae:	4564      	cmpls	r4, ip
  416db0:	d3f8      	bcc.n	416da4 <_ntoa_format+0x40>
  416db2:	e002      	b.n	416dba <_ntoa_format+0x56>
  416db4:	2730      	movs	r7, #48	; 0x30
  416db6:	552f      	strb	r7, [r5, r4]
  416db8:	3401      	adds	r4, #1
  416dba:	f016 0f01 	tst.w	r6, #1
  416dbe:	d007      	beq.n	416dd0 <_ntoa_format+0x6c>
  416dc0:	2c1f      	cmp	r4, #31
  416dc2:	bf8c      	ite	hi
  416dc4:	2700      	movhi	r7, #0
  416dc6:	2701      	movls	r7, #1
  416dc8:	4574      	cmp	r4, lr
  416dca:	d201      	bcs.n	416dd0 <_ntoa_format+0x6c>
  416dcc:	2f00      	cmp	r7, #0
  416dce:	d1f1      	bne.n	416db4 <_ntoa_format+0x50>
  416dd0:	f016 0f10 	tst.w	r6, #16
  416dd4:	d026      	beq.n	416e24 <_ntoa_format+0xc0>
  416dd6:	f416 6f80 	tst.w	r6, #1024	; 0x400
  416dda:	d110      	bne.n	416dfe <_ntoa_format+0x9a>
  416ddc:	b17c      	cbz	r4, 416dfe <_ntoa_format+0x9a>
  416dde:	4574      	cmp	r4, lr
  416de0:	bf18      	it	ne
  416de2:	4564      	cmpne	r4, ip
  416de4:	d10b      	bne.n	416dfe <_ntoa_format+0x9a>
  416de6:	f104 3cff 	add.w	ip, r4, #4294967295
  416dea:	f114 37ff 	adds.w	r7, r4, #4294967295
  416dee:	bf18      	it	ne
  416df0:	2701      	movne	r7, #1
  416df2:	f1b8 0f10 	cmp.w	r8, #16
  416df6:	bf18      	it	ne
  416df8:	2700      	movne	r7, #0
  416dfa:	b317      	cbz	r7, 416e42 <_ntoa_format+0xde>
  416dfc:	3c02      	subs	r4, #2
  416dfe:	f1b8 0f10 	cmp.w	r8, #16
  416e02:	d020      	beq.n	416e46 <_ntoa_format+0xe2>
  416e04:	f1b8 0f10 	cmp.w	r8, #16
  416e08:	d026      	beq.n	416e58 <_ntoa_format+0xf4>
  416e0a:	2c1f      	cmp	r4, #31
  416e0c:	bf98      	it	ls
  416e0e:	f1b8 0f02 	cmpls.w	r8, #2
  416e12:	d102      	bne.n	416e1a <_ntoa_format+0xb6>
  416e14:	2762      	movs	r7, #98	; 0x62
  416e16:	552f      	strb	r7, [r5, r4]
  416e18:	3401      	adds	r4, #1
  416e1a:	2c1f      	cmp	r4, #31
  416e1c:	d802      	bhi.n	416e24 <_ntoa_format+0xc0>
  416e1e:	2730      	movs	r7, #48	; 0x30
  416e20:	552f      	strb	r7, [r5, r4]
  416e22:	3401      	adds	r4, #1
  416e24:	2c1f      	cmp	r4, #31
  416e26:	d823      	bhi.n	416e70 <_ntoa_format+0x10c>
  416e28:	f1b9 0f00 	cmp.w	r9, #0
  416e2c:	d11d      	bne.n	416e6a <_ntoa_format+0x106>
  416e2e:	f016 0f04 	tst.w	r6, #4
  416e32:	d127      	bne.n	416e84 <_ntoa_format+0x120>
  416e34:	f016 0f08 	tst.w	r6, #8
  416e38:	d01a      	beq.n	416e70 <_ntoa_format+0x10c>
  416e3a:	2720      	movs	r7, #32
  416e3c:	552f      	strb	r7, [r5, r4]
  416e3e:	3401      	adds	r4, #1
  416e40:	e016      	b.n	416e70 <_ntoa_format+0x10c>
  416e42:	4664      	mov	r4, ip
  416e44:	e7db      	b.n	416dfe <_ntoa_format+0x9a>
  416e46:	f016 0f20 	tst.w	r6, #32
  416e4a:	d1db      	bne.n	416e04 <_ntoa_format+0xa0>
  416e4c:	2c1f      	cmp	r4, #31
  416e4e:	d8d9      	bhi.n	416e04 <_ntoa_format+0xa0>
  416e50:	2778      	movs	r7, #120	; 0x78
  416e52:	552f      	strb	r7, [r5, r4]
  416e54:	3401      	adds	r4, #1
  416e56:	e7e0      	b.n	416e1a <_ntoa_format+0xb6>
  416e58:	f016 0f20 	tst.w	r6, #32
  416e5c:	d0d5      	beq.n	416e0a <_ntoa_format+0xa6>
  416e5e:	2c1f      	cmp	r4, #31
  416e60:	d8d3      	bhi.n	416e0a <_ntoa_format+0xa6>
  416e62:	2758      	movs	r7, #88	; 0x58
  416e64:	552f      	strb	r7, [r5, r4]
  416e66:	3401      	adds	r4, #1
  416e68:	e7d7      	b.n	416e1a <_ntoa_format+0xb6>
  416e6a:	272d      	movs	r7, #45	; 0x2d
  416e6c:	552f      	strb	r7, [r5, r4]
  416e6e:	3401      	adds	r4, #1
  416e70:	9603      	str	r6, [sp, #12]
  416e72:	f8cd e008 	str.w	lr, [sp, #8]
  416e76:	9401      	str	r4, [sp, #4]
  416e78:	9500      	str	r5, [sp, #0]
  416e7a:	4c04      	ldr	r4, [pc, #16]	; (416e8c <_ntoa_format+0x128>)
  416e7c:	47a0      	blx	r4
  416e7e:	b005      	add	sp, #20
  416e80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  416e84:	272b      	movs	r7, #43	; 0x2b
  416e86:	552f      	strb	r7, [r5, r4]
  416e88:	3401      	adds	r4, #1
  416e8a:	e7f1      	b.n	416e70 <_ntoa_format+0x10c>
  416e8c:	00416cef 	.word	0x00416cef

00416e90 <_ntoa_long>:
  416e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  416e94:	b090      	sub	sp, #64	; 0x40
  416e96:	9d16      	ldr	r5, [sp, #88]	; 0x58
  416e98:	9f18      	ldr	r7, [sp, #96]	; 0x60
  416e9a:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
  416e9e:	b90d      	cbnz	r5, 416ea4 <_ntoa_long+0x14>
  416ea0:	f02e 0e10 	bic.w	lr, lr, #16
  416ea4:	f41e 6680 	ands.w	r6, lr, #1024	; 0x400
  416ea8:	d01b      	beq.n	416ee2 <_ntoa_long+0x52>
  416eaa:	b34d      	cbz	r5, 416f00 <_ntoa_long+0x70>
  416eac:	2600      	movs	r6, #0
  416eae:	e018      	b.n	416ee2 <_ntoa_long+0x52>
  416eb0:	f01e 0f20 	tst.w	lr, #32
  416eb4:	d021      	beq.n	416efa <_ntoa_long+0x6a>
  416eb6:	f04f 0841 	mov.w	r8, #65	; 0x41
  416eba:	4444      	add	r4, r8
  416ebc:	b2e4      	uxtb	r4, r4
  416ebe:	3c0a      	subs	r4, #10
  416ec0:	b2e4      	uxtb	r4, r4
  416ec2:	f10d 0840 	add.w	r8, sp, #64	; 0x40
  416ec6:	4446      	add	r6, r8
  416ec8:	f806 4c20 	strb.w	r4, [r6, #-32]
  416ecc:	fbb5 f5f7 	udiv	r5, r5, r7
  416ed0:	1c2c      	adds	r4, r5, #0
  416ed2:	bf18      	it	ne
  416ed4:	2401      	movne	r4, #1
  416ed6:	f1bc 0f1f 	cmp.w	ip, #31
  416eda:	bf88      	it	hi
  416edc:	2400      	movhi	r4, #0
  416ede:	4666      	mov	r6, ip
  416ee0:	b184      	cbz	r4, 416f04 <_ntoa_long+0x74>
  416ee2:	fbb5 f4f7 	udiv	r4, r5, r7
  416ee6:	fb07 5414 	mls	r4, r7, r4, r5
  416eea:	b2e4      	uxtb	r4, r4
  416eec:	f106 0c01 	add.w	ip, r6, #1
  416ef0:	2c09      	cmp	r4, #9
  416ef2:	d8dd      	bhi.n	416eb0 <_ntoa_long+0x20>
  416ef4:	3430      	adds	r4, #48	; 0x30
  416ef6:	b2e4      	uxtb	r4, r4
  416ef8:	e7e3      	b.n	416ec2 <_ntoa_long+0x32>
  416efa:	f04f 0861 	mov.w	r8, #97	; 0x61
  416efe:	e7dc      	b.n	416eba <_ntoa_long+0x2a>
  416f00:	f04f 0c00 	mov.w	ip, #0
  416f04:	f8cd e018 	str.w	lr, [sp, #24]
  416f08:	9c1a      	ldr	r4, [sp, #104]	; 0x68
  416f0a:	9405      	str	r4, [sp, #20]
  416f0c:	9c19      	ldr	r4, [sp, #100]	; 0x64
  416f0e:	9404      	str	r4, [sp, #16]
  416f10:	9703      	str	r7, [sp, #12]
  416f12:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
  416f16:	9402      	str	r4, [sp, #8]
  416f18:	f8cd c004 	str.w	ip, [sp, #4]
  416f1c:	ac08      	add	r4, sp, #32
  416f1e:	9400      	str	r4, [sp, #0]
  416f20:	4c02      	ldr	r4, [pc, #8]	; (416f2c <_ntoa_long+0x9c>)
  416f22:	47a0      	blx	r4
  416f24:	b010      	add	sp, #64	; 0x40
  416f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  416f2a:	bf00      	nop
  416f2c:	00416d65 	.word	0x00416d65

00416f30 <_ntoa_long_long>:
  416f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  416f34:	b095      	sub	sp, #84	; 0x54
  416f36:	9009      	str	r0, [sp, #36]	; 0x24
  416f38:	910a      	str	r1, [sp, #40]	; 0x28
  416f3a:	920b      	str	r2, [sp, #44]	; 0x2c
  416f3c:	469b      	mov	fp, r3
  416f3e:	e9dd 451e 	ldrd	r4, r5, [sp, #120]	; 0x78
  416f42:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
  416f46:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
  416f4a:	f8dd a098 	ldr.w	sl, [sp, #152]	; 0x98
  416f4e:	ea54 0305 	orrs.w	r3, r4, r5
  416f52:	d101      	bne.n	416f58 <_ntoa_long_long+0x28>
  416f54:	f02a 0a10 	bic.w	sl, sl, #16
  416f58:	f41a 6680 	ands.w	r6, sl, #1024	; 0x400
  416f5c:	d024      	beq.n	416fa8 <_ntoa_long_long+0x78>
  416f5e:	ea54 0305 	orrs.w	r3, r4, r5
  416f62:	d031      	beq.n	416fc8 <_ntoa_long_long+0x98>
  416f64:	2600      	movs	r6, #0
  416f66:	e01f      	b.n	416fa8 <_ntoa_long_long+0x78>
  416f68:	f01a 0f20 	tst.w	sl, #32
  416f6c:	d02a      	beq.n	416fc4 <_ntoa_long_long+0x94>
  416f6e:	2241      	movs	r2, #65	; 0x41
  416f70:	441a      	add	r2, r3
  416f72:	b2d2      	uxtb	r2, r2
  416f74:	3a0a      	subs	r2, #10
  416f76:	b2d2      	uxtb	r2, r2
  416f78:	ab14      	add	r3, sp, #80	; 0x50
  416f7a:	441e      	add	r6, r3
  416f7c:	f806 2c20 	strb.w	r2, [r6, #-32]
  416f80:	4642      	mov	r2, r8
  416f82:	464b      	mov	r3, r9
  416f84:	4620      	mov	r0, r4
  416f86:	4629      	mov	r1, r5
  416f88:	4c1b      	ldr	r4, [pc, #108]	; (416ff8 <_ntoa_long_long+0xc8>)
  416f8a:	47a0      	blx	r4
  416f8c:	4604      	mov	r4, r0
  416f8e:	460d      	mov	r5, r1
  416f90:	ea50 0301 	orrs.w	r3, r0, r1
  416f94:	bf14      	ite	ne
  416f96:	2301      	movne	r3, #1
  416f98:	2300      	moveq	r3, #0
  416f9a:	2f1f      	cmp	r7, #31
  416f9c:	bf8c      	ite	hi
  416f9e:	2300      	movhi	r3, #0
  416fa0:	f003 0301 	andls.w	r3, r3, #1
  416fa4:	463e      	mov	r6, r7
  416fa6:	b183      	cbz	r3, 416fca <_ntoa_long_long+0x9a>
  416fa8:	4642      	mov	r2, r8
  416faa:	464b      	mov	r3, r9
  416fac:	4620      	mov	r0, r4
  416fae:	4629      	mov	r1, r5
  416fb0:	4f11      	ldr	r7, [pc, #68]	; (416ff8 <_ntoa_long_long+0xc8>)
  416fb2:	47b8      	blx	r7
  416fb4:	b2d3      	uxtb	r3, r2
  416fb6:	1c77      	adds	r7, r6, #1
  416fb8:	2b09      	cmp	r3, #9
  416fba:	d8d5      	bhi.n	416f68 <_ntoa_long_long+0x38>
  416fbc:	f103 0230 	add.w	r2, r3, #48	; 0x30
  416fc0:	b2d2      	uxtb	r2, r2
  416fc2:	e7d9      	b.n	416f78 <_ntoa_long_long+0x48>
  416fc4:	2261      	movs	r2, #97	; 0x61
  416fc6:	e7d3      	b.n	416f70 <_ntoa_long_long+0x40>
  416fc8:	2700      	movs	r7, #0
  416fca:	f8cd a018 	str.w	sl, [sp, #24]
  416fce:	9b25      	ldr	r3, [sp, #148]	; 0x94
  416fd0:	9305      	str	r3, [sp, #20]
  416fd2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  416fd4:	9304      	str	r3, [sp, #16]
  416fd6:	f8cd 800c 	str.w	r8, [sp, #12]
  416fda:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
  416fde:	9302      	str	r3, [sp, #8]
  416fe0:	9701      	str	r7, [sp, #4]
  416fe2:	ab0c      	add	r3, sp, #48	; 0x30
  416fe4:	9300      	str	r3, [sp, #0]
  416fe6:	465b      	mov	r3, fp
  416fe8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  416fea:	990a      	ldr	r1, [sp, #40]	; 0x28
  416fec:	9809      	ldr	r0, [sp, #36]	; 0x24
  416fee:	4c03      	ldr	r4, [pc, #12]	; (416ffc <_ntoa_long_long+0xcc>)
  416ff0:	47a0      	blx	r4
  416ff2:	b015      	add	sp, #84	; 0x54
  416ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  416ff8:	004274dd 	.word	0x004274dd
  416ffc:	00416d65 	.word	0x00416d65

00417000 <_vsnprintf>:
  417000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  417004:	b08f      	sub	sp, #60	; 0x3c
  417006:	4606      	mov	r6, r0
  417008:	920a      	str	r2, [sp, #40]	; 0x28
  41700a:	930d      	str	r3, [sp, #52]	; 0x34
  41700c:	910b      	str	r1, [sp, #44]	; 0x2c
  41700e:	b189      	cbz	r1, 417034 <_vsnprintf+0x34>
  417010:	2500      	movs	r5, #0
  417012:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  417014:	7818      	ldrb	r0, [r3, #0]
  417016:	2800      	cmp	r0, #0
  417018:	f000 82e5 	beq.w	4175e6 <_vsnprintf+0x5e6>
  41701c:	2825      	cmp	r0, #37	; 0x25
  41701e:	d00b      	beq.n	417038 <_vsnprintf+0x38>
  417020:	1c6c      	adds	r4, r5, #1
  417022:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  417024:	462a      	mov	r2, r5
  417026:	990b      	ldr	r1, [sp, #44]	; 0x2c
  417028:	47b0      	blx	r6
  41702a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  41702c:	3301      	adds	r3, #1
  41702e:	930d      	str	r3, [sp, #52]	; 0x34
  417030:	4625      	mov	r5, r4
  417032:	e7ee      	b.n	417012 <_vsnprintf+0x12>
  417034:	4e93      	ldr	r6, [pc, #588]	; (417284 <_vsnprintf+0x284>)
  417036:	e7eb      	b.n	417010 <_vsnprintf+0x10>
  417038:	3301      	adds	r3, #1
  41703a:	930d      	str	r3, [sp, #52]	; 0x34
  41703c:	f04f 0900 	mov.w	r9, #0
  417040:	e006      	b.n	417050 <_vsnprintf+0x50>
  417042:	f049 0901 	orr.w	r9, r9, #1
  417046:	3201      	adds	r2, #1
  417048:	920d      	str	r2, [sp, #52]	; 0x34
  41704a:	2401      	movs	r4, #1
  41704c:	2c00      	cmp	r4, #0
  41704e:	d043      	beq.n	4170d8 <_vsnprintf+0xd8>
  417050:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  417052:	7813      	ldrb	r3, [r2, #0]
  417054:	3b20      	subs	r3, #32
  417056:	2b10      	cmp	r3, #16
  417058:	d83c      	bhi.n	4170d4 <_vsnprintf+0xd4>
  41705a:	a101      	add	r1, pc, #4	; (adr r1, 417060 <_vsnprintf+0x60>)
  41705c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
  417060:	004170bd 	.word	0x004170bd
  417064:	004170d5 	.word	0x004170d5
  417068:	004170d5 	.word	0x004170d5
  41706c:	004170c9 	.word	0x004170c9
  417070:	004170d5 	.word	0x004170d5
  417074:	004170d5 	.word	0x004170d5
  417078:	004170d5 	.word	0x004170d5
  41707c:	004170d5 	.word	0x004170d5
  417080:	004170d5 	.word	0x004170d5
  417084:	004170d5 	.word	0x004170d5
  417088:	004170d5 	.word	0x004170d5
  41708c:	004170b1 	.word	0x004170b1
  417090:	004170d5 	.word	0x004170d5
  417094:	004170a5 	.word	0x004170a5
  417098:	004170d5 	.word	0x004170d5
  41709c:	004170d5 	.word	0x004170d5
  4170a0:	00417043 	.word	0x00417043
  4170a4:	f049 0902 	orr.w	r9, r9, #2
  4170a8:	3201      	adds	r2, #1
  4170aa:	920d      	str	r2, [sp, #52]	; 0x34
  4170ac:	2401      	movs	r4, #1
  4170ae:	e7cd      	b.n	41704c <_vsnprintf+0x4c>
  4170b0:	f049 0904 	orr.w	r9, r9, #4
  4170b4:	3201      	adds	r2, #1
  4170b6:	920d      	str	r2, [sp, #52]	; 0x34
  4170b8:	2401      	movs	r4, #1
  4170ba:	e7c7      	b.n	41704c <_vsnprintf+0x4c>
  4170bc:	f049 0908 	orr.w	r9, r9, #8
  4170c0:	3201      	adds	r2, #1
  4170c2:	920d      	str	r2, [sp, #52]	; 0x34
  4170c4:	2401      	movs	r4, #1
  4170c6:	e7c1      	b.n	41704c <_vsnprintf+0x4c>
  4170c8:	f049 0910 	orr.w	r9, r9, #16
  4170cc:	3201      	adds	r2, #1
  4170ce:	920d      	str	r2, [sp, #52]	; 0x34
  4170d0:	2401      	movs	r4, #1
  4170d2:	e7bb      	b.n	41704c <_vsnprintf+0x4c>
  4170d4:	2400      	movs	r4, #0
  4170d6:	e7b9      	b.n	41704c <_vsnprintf+0x4c>
  4170d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4170da:	781a      	ldrb	r2, [r3, #0]
  4170dc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
  4170e0:	b2db      	uxtb	r3, r3
  4170e2:	2b09      	cmp	r3, #9
  4170e4:	d917      	bls.n	417116 <_vsnprintf+0x116>
  4170e6:	2a2a      	cmp	r2, #42	; 0x2a
  4170e8:	d01a      	beq.n	417120 <_vsnprintf+0x120>
  4170ea:	46a0      	mov	r8, r4
  4170ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4170ee:	781a      	ldrb	r2, [r3, #0]
  4170f0:	2a2e      	cmp	r2, #46	; 0x2e
  4170f2:	d025      	beq.n	417140 <_vsnprintf+0x140>
  4170f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4170f6:	7813      	ldrb	r3, [r2, #0]
  4170f8:	3b68      	subs	r3, #104	; 0x68
  4170fa:	2b12      	cmp	r3, #18
  4170fc:	d85b      	bhi.n	4171b6 <_vsnprintf+0x1b6>
  4170fe:	e8df f003 	tbb	[pc, r3]
  417102:	5a48      	.short	0x5a48
  417104:	5a3a5ab7 	.word	0x5a3a5ab7
  417108:	5a5a5a5a 	.word	0x5a5a5a5a
  41710c:	5a565a5a 	.word	0x5a565a5a
  417110:	5a5a5a5a 	.word	0x5a5a5a5a
  417114:	bc          	.byte	0xbc
  417115:	00          	.byte	0x00
  417116:	a80d      	add	r0, sp, #52	; 0x34
  417118:	4b5b      	ldr	r3, [pc, #364]	; (417288 <_vsnprintf+0x288>)
  41711a:	4798      	blx	r3
  41711c:	4680      	mov	r8, r0
  41711e:	e7e5      	b.n	4170ec <_vsnprintf+0xec>
  417120:	9b18      	ldr	r3, [sp, #96]	; 0x60
  417122:	1d1a      	adds	r2, r3, #4
  417124:	9218      	str	r2, [sp, #96]	; 0x60
  417126:	681b      	ldr	r3, [r3, #0]
  417128:	2b00      	cmp	r3, #0
  41712a:	db04      	blt.n	417136 <_vsnprintf+0x136>
  41712c:	4698      	mov	r8, r3
  41712e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  417130:	3301      	adds	r3, #1
  417132:	930d      	str	r3, [sp, #52]	; 0x34
  417134:	e7da      	b.n	4170ec <_vsnprintf+0xec>
  417136:	f049 0902 	orr.w	r9, r9, #2
  41713a:	f1c3 0800 	rsb	r8, r3, #0
  41713e:	e7f6      	b.n	41712e <_vsnprintf+0x12e>
  417140:	f449 6980 	orr.w	r9, r9, #1024	; 0x400
  417144:	1c5a      	adds	r2, r3, #1
  417146:	920d      	str	r2, [sp, #52]	; 0x34
  417148:	785a      	ldrb	r2, [r3, #1]
  41714a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
  41714e:	b2db      	uxtb	r3, r3
  417150:	2b09      	cmp	r3, #9
  417152:	d90b      	bls.n	41716c <_vsnprintf+0x16c>
  417154:	2a2a      	cmp	r2, #42	; 0x2a
  417156:	d1cd      	bne.n	4170f4 <_vsnprintf+0xf4>
  417158:	9b18      	ldr	r3, [sp, #96]	; 0x60
  41715a:	1d1a      	adds	r2, r3, #4
  41715c:	9218      	str	r2, [sp, #96]	; 0x60
  41715e:	681c      	ldr	r4, [r3, #0]
  417160:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
  417164:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  417166:	3301      	adds	r3, #1
  417168:	930d      	str	r3, [sp, #52]	; 0x34
  41716a:	e7c3      	b.n	4170f4 <_vsnprintf+0xf4>
  41716c:	a80d      	add	r0, sp, #52	; 0x34
  41716e:	4b46      	ldr	r3, [pc, #280]	; (417288 <_vsnprintf+0x288>)
  417170:	4798      	blx	r3
  417172:	4604      	mov	r4, r0
  417174:	e7be      	b.n	4170f4 <_vsnprintf+0xf4>
  417176:	f449 7180 	orr.w	r1, r9, #256	; 0x100
  41717a:	1c53      	adds	r3, r2, #1
  41717c:	930d      	str	r3, [sp, #52]	; 0x34
  41717e:	7852      	ldrb	r2, [r2, #1]
  417180:	2a6c      	cmp	r2, #108	; 0x6c
  417182:	d001      	beq.n	417188 <_vsnprintf+0x188>
  417184:	4689      	mov	r9, r1
  417186:	e016      	b.n	4171b6 <_vsnprintf+0x1b6>
  417188:	f449 7940 	orr.w	r9, r9, #768	; 0x300
  41718c:	3301      	adds	r3, #1
  41718e:	930d      	str	r3, [sp, #52]	; 0x34
  417190:	e011      	b.n	4171b6 <_vsnprintf+0x1b6>
  417192:	f049 0180 	orr.w	r1, r9, #128	; 0x80
  417196:	1c53      	adds	r3, r2, #1
  417198:	930d      	str	r3, [sp, #52]	; 0x34
  41719a:	7852      	ldrb	r2, [r2, #1]
  41719c:	2a68      	cmp	r2, #104	; 0x68
  41719e:	d001      	beq.n	4171a4 <_vsnprintf+0x1a4>
  4171a0:	4689      	mov	r9, r1
  4171a2:	e008      	b.n	4171b6 <_vsnprintf+0x1b6>
  4171a4:	f049 09c0 	orr.w	r9, r9, #192	; 0xc0
  4171a8:	3301      	adds	r3, #1
  4171aa:	930d      	str	r3, [sp, #52]	; 0x34
  4171ac:	e003      	b.n	4171b6 <_vsnprintf+0x1b6>
  4171ae:	f449 7980 	orr.w	r9, r9, #256	; 0x100
  4171b2:	3201      	adds	r2, #1
  4171b4:	920d      	str	r2, [sp, #52]	; 0x34
  4171b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4171b8:	7818      	ldrb	r0, [r3, #0]
  4171ba:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
  4171be:	2b53      	cmp	r3, #83	; 0x53
  4171c0:	f200 8207 	bhi.w	4175d2 <_vsnprintf+0x5d2>
  4171c4:	e8df f013 	tbh	[pc, r3, lsl #1]
  4171c8:	020501fa 	.word	0x020501fa
  4171cc:	02050205 	.word	0x02050205
  4171d0:	02050205 	.word	0x02050205
  4171d4:	02050205 	.word	0x02050205
  4171d8:	02050205 	.word	0x02050205
  4171dc:	02050205 	.word	0x02050205
  4171e0:	02050205 	.word	0x02050205
  4171e4:	02050205 	.word	0x02050205
  4171e8:	02050205 	.word	0x02050205
  4171ec:	02050205 	.word	0x02050205
  4171f0:	02050205 	.word	0x02050205
  4171f4:	02050205 	.word	0x02050205
  4171f8:	02050205 	.word	0x02050205
  4171fc:	02050205 	.word	0x02050205
  417200:	02050205 	.word	0x02050205
  417204:	02050205 	.word	0x02050205
  417208:	02050205 	.word	0x02050205
  41720c:	02050205 	.word	0x02050205
  417210:	02050205 	.word	0x02050205
  417214:	02050205 	.word	0x02050205
  417218:	02050205 	.word	0x02050205
  41721c:	02050205 	.word	0x02050205
  417220:	02050205 	.word	0x02050205
  417224:	02050205 	.word	0x02050205
  417228:	02050205 	.word	0x02050205
  41722c:	00620205 	.word	0x00620205
  417230:	02050205 	.word	0x02050205
  417234:	02050205 	.word	0x02050205
  417238:	02050205 	.word	0x02050205
  41723c:	02050205 	.word	0x02050205
  417240:	00620205 	.word	0x00620205
  417244:	00620155 	.word	0x00620155
  417248:	02050205 	.word	0x02050205
  41724c:	02050205 	.word	0x02050205
  417250:	02050062 	.word	0x02050062
  417254:	02050205 	.word	0x02050205
  417258:	02050205 	.word	0x02050205
  41725c:	01e00062 	.word	0x01e00062
  417260:	02050205 	.word	0x02050205
  417264:	02050187 	.word	0x02050187
  417268:	02050062 	.word	0x02050062
  41726c:	00620205 	.word	0x00620205
  417270:	f449 7900 	orr.w	r9, r9, #512	; 0x200
  417274:	3201      	adds	r2, #1
  417276:	920d      	str	r2, [sp, #52]	; 0x34
  417278:	e79d      	b.n	4171b6 <_vsnprintf+0x1b6>
  41727a:	f449 7980 	orr.w	r9, r9, #256	; 0x100
  41727e:	3201      	adds	r2, #1
  417280:	920d      	str	r2, [sp, #52]	; 0x34
  417282:	e798      	b.n	4171b6 <_vsnprintf+0x1b6>
  417284:	00416cc9 	.word	0x00416cc9
  417288:	00416ccb 	.word	0x00416ccb
  41728c:	2858      	cmp	r0, #88	; 0x58
  41728e:	bf18      	it	ne
  417290:	2878      	cmpne	r0, #120	; 0x78
  417292:	d007      	beq.n	4172a4 <_vsnprintf+0x2a4>
  417294:	286f      	cmp	r0, #111	; 0x6f
  417296:	d040      	beq.n	41731a <_vsnprintf+0x31a>
  417298:	2862      	cmp	r0, #98	; 0x62
  41729a:	d040      	beq.n	41731e <_vsnprintf+0x31e>
  41729c:	f029 0910 	bic.w	r9, r9, #16
  4172a0:	210a      	movs	r1, #10
  4172a2:	e000      	b.n	4172a6 <_vsnprintf+0x2a6>
  4172a4:	2110      	movs	r1, #16
  4172a6:	2858      	cmp	r0, #88	; 0x58
  4172a8:	d03b      	beq.n	417322 <_vsnprintf+0x322>
  4172aa:	2869      	cmp	r0, #105	; 0x69
  4172ac:	bf18      	it	ne
  4172ae:	2864      	cmpne	r0, #100	; 0x64
  4172b0:	d001      	beq.n	4172b6 <_vsnprintf+0x2b6>
  4172b2:	f029 090c 	bic.w	r9, r9, #12
  4172b6:	f419 6f80 	tst.w	r9, #1024	; 0x400
  4172ba:	d001      	beq.n	4172c0 <_vsnprintf+0x2c0>
  4172bc:	f029 0901 	bic.w	r9, r9, #1
  4172c0:	2864      	cmp	r0, #100	; 0x64
  4172c2:	bf18      	it	ne
  4172c4:	2869      	cmpne	r0, #105	; 0x69
  4172c6:	d178      	bne.n	4173ba <_vsnprintf+0x3ba>
  4172c8:	f419 7f00 	tst.w	r9, #512	; 0x200
  4172cc:	d12c      	bne.n	417328 <_vsnprintf+0x328>
  4172ce:	f419 7f80 	tst.w	r9, #256	; 0x100
  4172d2:	d14f      	bne.n	417374 <_vsnprintf+0x374>
  4172d4:	f019 0f40 	tst.w	r9, #64	; 0x40
  4172d8:	d165      	bne.n	4173a6 <_vsnprintf+0x3a6>
  4172da:	f019 0f80 	tst.w	r9, #128	; 0x80
  4172de:	d067      	beq.n	4173b0 <_vsnprintf+0x3b0>
  4172e0:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4172e2:	1d1a      	adds	r2, r3, #4
  4172e4:	9218      	str	r2, [sp, #96]	; 0x60
  4172e6:	f9b3 3000 	ldrsh.w	r3, [r3]
  4172ea:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
  4172ee:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
  4172f2:	0fdb      	lsrs	r3, r3, #31
  4172f4:	f8cd 9014 	str.w	r9, [sp, #20]
  4172f8:	f8cd 8010 	str.w	r8, [sp, #16]
  4172fc:	9403      	str	r4, [sp, #12]
  4172fe:	9102      	str	r1, [sp, #8]
  417300:	9301      	str	r3, [sp, #4]
  417302:	9200      	str	r2, [sp, #0]
  417304:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  417306:	462a      	mov	r2, r5
  417308:	990b      	ldr	r1, [sp, #44]	; 0x2c
  41730a:	4630      	mov	r0, r6
  41730c:	4c9c      	ldr	r4, [pc, #624]	; (417580 <_vsnprintf+0x580>)
  41730e:	47a0      	blx	r4
  417310:	4605      	mov	r5, r0
  417312:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  417314:	3301      	adds	r3, #1
  417316:	930d      	str	r3, [sp, #52]	; 0x34
  417318:	e67b      	b.n	417012 <_vsnprintf+0x12>
  41731a:	2108      	movs	r1, #8
  41731c:	e7c3      	b.n	4172a6 <_vsnprintf+0x2a6>
  41731e:	2102      	movs	r1, #2
  417320:	e7c1      	b.n	4172a6 <_vsnprintf+0x2a6>
  417322:	f049 0920 	orr.w	r9, r9, #32
  417326:	e7c0      	b.n	4172aa <_vsnprintf+0x2aa>
  417328:	9b18      	ldr	r3, [sp, #96]	; 0x60
  41732a:	3307      	adds	r3, #7
  41732c:	f023 0007 	bic.w	r0, r3, #7
  417330:	f100 0308 	add.w	r3, r0, #8
  417334:	9318      	str	r3, [sp, #96]	; 0x60
  417336:	6847      	ldr	r7, [r0, #4]
  417338:	6802      	ldr	r2, [r0, #0]
  41733a:	463b      	mov	r3, r7
  41733c:	2a00      	cmp	r2, #0
  41733e:	f177 0000 	sbcs.w	r0, r7, #0
  417342:	db13      	blt.n	41736c <_vsnprintf+0x36c>
  417344:	0fff      	lsrs	r7, r7, #31
  417346:	f8cd 9020 	str.w	r9, [sp, #32]
  41734a:	f8cd 801c 	str.w	r8, [sp, #28]
  41734e:	9406      	str	r4, [sp, #24]
  417350:	9104      	str	r1, [sp, #16]
  417352:	2100      	movs	r1, #0
  417354:	9105      	str	r1, [sp, #20]
  417356:	9702      	str	r7, [sp, #8]
  417358:	e9cd 2300 	strd	r2, r3, [sp]
  41735c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41735e:	462a      	mov	r2, r5
  417360:	990b      	ldr	r1, [sp, #44]	; 0x2c
  417362:	4630      	mov	r0, r6
  417364:	4c87      	ldr	r4, [pc, #540]	; (417584 <_vsnprintf+0x584>)
  417366:	47a0      	blx	r4
  417368:	4605      	mov	r5, r0
  41736a:	e7d2      	b.n	417312 <_vsnprintf+0x312>
  41736c:	4252      	negs	r2, r2
  41736e:	eb67 0347 	sbc.w	r3, r7, r7, lsl #1
  417372:	e7e7      	b.n	417344 <_vsnprintf+0x344>
  417374:	9b18      	ldr	r3, [sp, #96]	; 0x60
  417376:	1d1a      	adds	r2, r3, #4
  417378:	9218      	str	r2, [sp, #96]	; 0x60
  41737a:	681b      	ldr	r3, [r3, #0]
  41737c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
  417380:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
  417384:	0fdb      	lsrs	r3, r3, #31
  417386:	f8cd 9014 	str.w	r9, [sp, #20]
  41738a:	f8cd 8010 	str.w	r8, [sp, #16]
  41738e:	9403      	str	r4, [sp, #12]
  417390:	9102      	str	r1, [sp, #8]
  417392:	9301      	str	r3, [sp, #4]
  417394:	9200      	str	r2, [sp, #0]
  417396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  417398:	462a      	mov	r2, r5
  41739a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  41739c:	4630      	mov	r0, r6
  41739e:	4c78      	ldr	r4, [pc, #480]	; (417580 <_vsnprintf+0x580>)
  4173a0:	47a0      	blx	r4
  4173a2:	4605      	mov	r5, r0
  4173a4:	e7b5      	b.n	417312 <_vsnprintf+0x312>
  4173a6:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4173a8:	1d1a      	adds	r2, r3, #4
  4173aa:	9218      	str	r2, [sp, #96]	; 0x60
  4173ac:	781b      	ldrb	r3, [r3, #0]
  4173ae:	e79c      	b.n	4172ea <_vsnprintf+0x2ea>
  4173b0:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4173b2:	1d1a      	adds	r2, r3, #4
  4173b4:	9218      	str	r2, [sp, #96]	; 0x60
  4173b6:	681b      	ldr	r3, [r3, #0]
  4173b8:	e797      	b.n	4172ea <_vsnprintf+0x2ea>
  4173ba:	f419 7f00 	tst.w	r9, #512	; 0x200
  4173be:	d11d      	bne.n	4173fc <_vsnprintf+0x3fc>
  4173c0:	f419 7f80 	tst.w	r9, #256	; 0x100
  4173c4:	d136      	bne.n	417434 <_vsnprintf+0x434>
  4173c6:	f019 0f40 	tst.w	r9, #64	; 0x40
  4173ca:	d148      	bne.n	41745e <_vsnprintf+0x45e>
  4173cc:	f019 0f80 	tst.w	r9, #128	; 0x80
  4173d0:	d04a      	beq.n	417468 <_vsnprintf+0x468>
  4173d2:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4173d4:	1d1a      	adds	r2, r3, #4
  4173d6:	9218      	str	r2, [sp, #96]	; 0x60
  4173d8:	881b      	ldrh	r3, [r3, #0]
  4173da:	f8cd 9014 	str.w	r9, [sp, #20]
  4173de:	f8cd 8010 	str.w	r8, [sp, #16]
  4173e2:	9403      	str	r4, [sp, #12]
  4173e4:	9102      	str	r1, [sp, #8]
  4173e6:	2200      	movs	r2, #0
  4173e8:	9201      	str	r2, [sp, #4]
  4173ea:	9300      	str	r3, [sp, #0]
  4173ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4173ee:	462a      	mov	r2, r5
  4173f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4173f2:	4630      	mov	r0, r6
  4173f4:	4c62      	ldr	r4, [pc, #392]	; (417580 <_vsnprintf+0x580>)
  4173f6:	47a0      	blx	r4
  4173f8:	4605      	mov	r5, r0
  4173fa:	e78a      	b.n	417312 <_vsnprintf+0x312>
  4173fc:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4173fe:	3307      	adds	r3, #7
  417400:	f023 0307 	bic.w	r3, r3, #7
  417404:	f103 0208 	add.w	r2, r3, #8
  417408:	9218      	str	r2, [sp, #96]	; 0x60
  41740a:	e9d3 2300 	ldrd	r2, r3, [r3]
  41740e:	2000      	movs	r0, #0
  417410:	f8cd 9020 	str.w	r9, [sp, #32]
  417414:	f8cd 801c 	str.w	r8, [sp, #28]
  417418:	9406      	str	r4, [sp, #24]
  41741a:	9104      	str	r1, [sp, #16]
  41741c:	9005      	str	r0, [sp, #20]
  41741e:	9002      	str	r0, [sp, #8]
  417420:	e9cd 2300 	strd	r2, r3, [sp]
  417424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  417426:	462a      	mov	r2, r5
  417428:	990b      	ldr	r1, [sp, #44]	; 0x2c
  41742a:	4630      	mov	r0, r6
  41742c:	4c55      	ldr	r4, [pc, #340]	; (417584 <_vsnprintf+0x584>)
  41742e:	47a0      	blx	r4
  417430:	4605      	mov	r5, r0
  417432:	e76e      	b.n	417312 <_vsnprintf+0x312>
  417434:	9b18      	ldr	r3, [sp, #96]	; 0x60
  417436:	1d1a      	adds	r2, r3, #4
  417438:	9218      	str	r2, [sp, #96]	; 0x60
  41743a:	681b      	ldr	r3, [r3, #0]
  41743c:	f8cd 9014 	str.w	r9, [sp, #20]
  417440:	f8cd 8010 	str.w	r8, [sp, #16]
  417444:	9403      	str	r4, [sp, #12]
  417446:	9102      	str	r1, [sp, #8]
  417448:	2200      	movs	r2, #0
  41744a:	9201      	str	r2, [sp, #4]
  41744c:	9300      	str	r3, [sp, #0]
  41744e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  417450:	462a      	mov	r2, r5
  417452:	990b      	ldr	r1, [sp, #44]	; 0x2c
  417454:	4630      	mov	r0, r6
  417456:	4c4a      	ldr	r4, [pc, #296]	; (417580 <_vsnprintf+0x580>)
  417458:	47a0      	blx	r4
  41745a:	4605      	mov	r5, r0
  41745c:	e759      	b.n	417312 <_vsnprintf+0x312>
  41745e:	9b18      	ldr	r3, [sp, #96]	; 0x60
  417460:	1d1a      	adds	r2, r3, #4
  417462:	9218      	str	r2, [sp, #96]	; 0x60
  417464:	781b      	ldrb	r3, [r3, #0]
  417466:	e7b8      	b.n	4173da <_vsnprintf+0x3da>
  417468:	9b18      	ldr	r3, [sp, #96]	; 0x60
  41746a:	1d1a      	adds	r2, r3, #4
  41746c:	9218      	str	r2, [sp, #96]	; 0x60
  41746e:	681b      	ldr	r3, [r3, #0]
  417470:	e7b3      	b.n	4173da <_vsnprintf+0x3da>
  417472:	f019 0902 	ands.w	r9, r9, #2
  417476:	d01d      	beq.n	4174b4 <_vsnprintf+0x4b4>
  417478:	2401      	movs	r4, #1
  41747a:	9818      	ldr	r0, [sp, #96]	; 0x60
  41747c:	1d03      	adds	r3, r0, #4
  41747e:	9318      	str	r3, [sp, #96]	; 0x60
  417480:	1c6f      	adds	r7, r5, #1
  417482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  417484:	462a      	mov	r2, r5
  417486:	990b      	ldr	r1, [sp, #44]	; 0x2c
  417488:	7800      	ldrb	r0, [r0, #0]
  41748a:	47b0      	blx	r6
  41748c:	f1b9 0f00 	cmp.w	r9, #0
  417490:	d11f      	bne.n	4174d2 <_vsnprintf+0x4d2>
  417492:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  417494:	3301      	adds	r3, #1
  417496:	930d      	str	r3, [sp, #52]	; 0x34
  417498:	463d      	mov	r5, r7
  41749a:	e5ba      	b.n	417012 <_vsnprintf+0x12>
  41749c:	1c55      	adds	r5, r2, #1
  41749e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4174a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4174a2:	2020      	movs	r0, #32
  4174a4:	47b0      	blx	r6
  4174a6:	4623      	mov	r3, r4
  4174a8:	462a      	mov	r2, r5
  4174aa:	1c5c      	adds	r4, r3, #1
  4174ac:	4598      	cmp	r8, r3
  4174ae:	d8f5      	bhi.n	41749c <_vsnprintf+0x49c>
  4174b0:	4615      	mov	r5, r2
  4174b2:	e7e2      	b.n	41747a <_vsnprintf+0x47a>
  4174b4:	2301      	movs	r3, #1
  4174b6:	462a      	mov	r2, r5
  4174b8:	e7f7      	b.n	4174aa <_vsnprintf+0x4aa>
  4174ba:	1c57      	adds	r7, r2, #1
  4174bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4174be:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4174c0:	2020      	movs	r0, #32
  4174c2:	47b0      	blx	r6
  4174c4:	462c      	mov	r4, r5
  4174c6:	463a      	mov	r2, r7
  4174c8:	1c65      	adds	r5, r4, #1
  4174ca:	45a0      	cmp	r8, r4
  4174cc:	d8f5      	bhi.n	4174ba <_vsnprintf+0x4ba>
  4174ce:	4617      	mov	r7, r2
  4174d0:	e7df      	b.n	417492 <_vsnprintf+0x492>
  4174d2:	463a      	mov	r2, r7
  4174d4:	e7f8      	b.n	4174c8 <_vsnprintf+0x4c8>
  4174d6:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4174d8:	1d1a      	adds	r2, r3, #4
  4174da:	9218      	str	r2, [sp, #96]	; 0x60
  4174dc:	681f      	ldr	r7, [r3, #0]
  4174de:	b114      	cbz	r4, 4174e6 <_vsnprintf+0x4e6>
  4174e0:	4622      	mov	r2, r4
  4174e2:	463b      	mov	r3, r7
  4174e4:	e004      	b.n	4174f0 <_vsnprintf+0x4f0>
  4174e6:	f04f 32ff 	mov.w	r2, #4294967295
  4174ea:	e7fa      	b.n	4174e2 <_vsnprintf+0x4e2>
  4174ec:	3301      	adds	r3, #1
  4174ee:	460a      	mov	r2, r1
  4174f0:	7819      	ldrb	r1, [r3, #0]
  4174f2:	b111      	cbz	r1, 4174fa <_vsnprintf+0x4fa>
  4174f4:	1e51      	subs	r1, r2, #1
  4174f6:	2a00      	cmp	r2, #0
  4174f8:	d1f8      	bne.n	4174ec <_vsnprintf+0x4ec>
  4174fa:	1bdb      	subs	r3, r3, r7
  4174fc:	f419 6b80 	ands.w	fp, r9, #1024	; 0x400
  417500:	d002      	beq.n	417508 <_vsnprintf+0x508>
  417502:	42a3      	cmp	r3, r4
  417504:	bf28      	it	cs
  417506:	4623      	movcs	r3, r4
  417508:	f019 0202 	ands.w	r2, r9, #2
  41750c:	920c      	str	r2, [sp, #48]	; 0x30
  41750e:	d011      	beq.n	417534 <_vsnprintf+0x534>
  417510:	4699      	mov	r9, r3
  417512:	462a      	mov	r2, r5
  417514:	465d      	mov	r5, fp
  417516:	e017      	b.n	417548 <_vsnprintf+0x548>
  417518:	f102 0a01 	add.w	sl, r2, #1
  41751c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41751e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  417520:	2020      	movs	r0, #32
  417522:	47b0      	blx	r6
  417524:	464b      	mov	r3, r9
  417526:	4652      	mov	r2, sl
  417528:	f103 0901 	add.w	r9, r3, #1
  41752c:	4598      	cmp	r8, r3
  41752e:	d8f3      	bhi.n	417518 <_vsnprintf+0x518>
  417530:	465d      	mov	r5, fp
  417532:	e009      	b.n	417548 <_vsnprintf+0x548>
  417534:	462a      	mov	r2, r5
  417536:	e7f7      	b.n	417528 <_vsnprintf+0x528>
  417538:	461c      	mov	r4, r3
  41753a:	3701      	adds	r7, #1
  41753c:	f102 0a01 	add.w	sl, r2, #1
  417540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  417542:	990b      	ldr	r1, [sp, #44]	; 0x2c
  417544:	47b0      	blx	r6
  417546:	4652      	mov	r2, sl
  417548:	7838      	ldrb	r0, [r7, #0]
  41754a:	b120      	cbz	r0, 417556 <_vsnprintf+0x556>
  41754c:	2d00      	cmp	r5, #0
  41754e:	d0f4      	beq.n	41753a <_vsnprintf+0x53a>
  417550:	1e63      	subs	r3, r4, #1
  417552:	2c00      	cmp	r4, #0
  417554:	d1f0      	bne.n	417538 <_vsnprintf+0x538>
  417556:	4615      	mov	r5, r2
  417558:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  41755a:	b953      	cbnz	r3, 417572 <_vsnprintf+0x572>
  41755c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  41755e:	3301      	adds	r3, #1
  417560:	930d      	str	r3, [sp, #52]	; 0x34
  417562:	e556      	b.n	417012 <_vsnprintf+0x12>
  417564:	1c55      	adds	r5, r2, #1
  417566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  417568:	990b      	ldr	r1, [sp, #44]	; 0x2c
  41756a:	2020      	movs	r0, #32
  41756c:	47b0      	blx	r6
  41756e:	46a1      	mov	r9, r4
  417570:	462a      	mov	r2, r5
  417572:	f109 0401 	add.w	r4, r9, #1
  417576:	45c8      	cmp	r8, r9
  417578:	d8f4      	bhi.n	417564 <_vsnprintf+0x564>
  41757a:	4615      	mov	r5, r2
  41757c:	e7ee      	b.n	41755c <_vsnprintf+0x55c>
  41757e:	bf00      	nop
  417580:	00416e91 	.word	0x00416e91
  417584:	00416f31 	.word	0x00416f31
  417588:	f049 0321 	orr.w	r3, r9, #33	; 0x21
  41758c:	9a18      	ldr	r2, [sp, #96]	; 0x60
  41758e:	1d11      	adds	r1, r2, #4
  417590:	9118      	str	r1, [sp, #96]	; 0x60
  417592:	6812      	ldr	r2, [r2, #0]
  417594:	9305      	str	r3, [sp, #20]
  417596:	2308      	movs	r3, #8
  417598:	9304      	str	r3, [sp, #16]
  41759a:	9403      	str	r4, [sp, #12]
  41759c:	2310      	movs	r3, #16
  41759e:	9302      	str	r3, [sp, #8]
  4175a0:	2300      	movs	r3, #0
  4175a2:	9301      	str	r3, [sp, #4]
  4175a4:	9200      	str	r2, [sp, #0]
  4175a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4175a8:	462a      	mov	r2, r5
  4175aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4175ac:	4630      	mov	r0, r6
  4175ae:	4c15      	ldr	r4, [pc, #84]	; (417604 <_vsnprintf+0x604>)
  4175b0:	47a0      	blx	r4
  4175b2:	4605      	mov	r5, r0
  4175b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4175b6:	3301      	adds	r3, #1
  4175b8:	930d      	str	r3, [sp, #52]	; 0x34
  4175ba:	e52a      	b.n	417012 <_vsnprintf+0x12>
  4175bc:	1c6c      	adds	r4, r5, #1
  4175be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4175c0:	462a      	mov	r2, r5
  4175c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4175c4:	2025      	movs	r0, #37	; 0x25
  4175c6:	47b0      	blx	r6
  4175c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4175ca:	3301      	adds	r3, #1
  4175cc:	930d      	str	r3, [sp, #52]	; 0x34
  4175ce:	4625      	mov	r5, r4
  4175d0:	e51f      	b.n	417012 <_vsnprintf+0x12>
  4175d2:	1c6c      	adds	r4, r5, #1
  4175d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4175d6:	462a      	mov	r2, r5
  4175d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4175da:	47b0      	blx	r6
  4175dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4175de:	3301      	adds	r3, #1
  4175e0:	930d      	str	r3, [sp, #52]	; 0x34
  4175e2:	4625      	mov	r5, r4
  4175e4:	e515      	b.n	417012 <_vsnprintf+0x12>
  4175e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4175e8:	4295      	cmp	r5, r2
  4175ea:	d308      	bcc.n	4175fe <_vsnprintf+0x5fe>
  4175ec:	3a01      	subs	r2, #1
  4175ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4175f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4175f2:	2000      	movs	r0, #0
  4175f4:	47b0      	blx	r6
  4175f6:	4628      	mov	r0, r5
  4175f8:	b00f      	add	sp, #60	; 0x3c
  4175fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4175fe:	462a      	mov	r2, r5
  417600:	e7f5      	b.n	4175ee <_vsnprintf+0x5ee>
  417602:	bf00      	nop
  417604:	00416e91 	.word	0x00416e91

00417608 <lv_vsnprintf>:
  417608:	b510      	push	{r4, lr}
  41760a:	b082      	sub	sp, #8
  41760c:	9300      	str	r3, [sp, #0]
  41760e:	4613      	mov	r3, r2
  417610:	460a      	mov	r2, r1
  417612:	4601      	mov	r1, r0
  417614:	4802      	ldr	r0, [pc, #8]	; (417620 <lv_vsnprintf+0x18>)
  417616:	4c03      	ldr	r4, [pc, #12]	; (417624 <lv_vsnprintf+0x1c>)
  417618:	47a0      	blx	r4
  41761a:	b002      	add	sp, #8
  41761c:	bd10      	pop	{r4, pc}
  41761e:	bf00      	nop
  417620:	00416cc1 	.word	0x00416cc1
  417624:	00417001 	.word	0x00417001

00417628 <lv_task_time_remaining>:
 * Find out how much time remains before a task must be run.
 * @param task pointer to lv_task
 * @return the time remaining, or 0 if it needs to be run again
 */
static uint32_t lv_task_time_remaining(lv_task_t * task)
{
  417628:	b510      	push	{r4, lr}
  41762a:	4604      	mov	r4, r0
    /*Check if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(task->last_run);
  41762c:	6840      	ldr	r0, [r0, #4]
  41762e:	4b04      	ldr	r3, [pc, #16]	; (417640 <lv_task_time_remaining+0x18>)
  417630:	4798      	blx	r3
    if(elp >= task->period)
  417632:	6823      	ldr	r3, [r4, #0]
  417634:	4298      	cmp	r0, r3
  417636:	d201      	bcs.n	41763c <lv_task_time_remaining+0x14>
        return 0;
    return task->period - elp;
  417638:	1a18      	subs	r0, r3, r0
  41763a:	bd10      	pop	{r4, pc}
        return 0;
  41763c:	2000      	movs	r0, #0
}
  41763e:	bd10      	pop	{r4, pc}
  417640:	004151c9 	.word	0x004151c9

00417644 <lv_task_create>:
{
  417644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  417648:	4607      	mov	r7, r0
  41764a:	4688      	mov	r8, r1
  41764c:	4615      	mov	r5, r2
  41764e:	461e      	mov	r6, r3
    tmp = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
  417650:	4831      	ldr	r0, [pc, #196]	; (417718 <lv_task_create+0xd4>)
  417652:	4b32      	ldr	r3, [pc, #200]	; (41771c <lv_task_create+0xd8>)
  417654:	4798      	blx	r3
    if(NULL == tmp) {
  417656:	4604      	mov	r4, r0
  417658:	b338      	cbz	r0, 4176aa <lv_task_create+0x66>
            if(tmp->prio <= prio) {
  41765a:	7d23      	ldrb	r3, [r4, #20]
  41765c:	f003 0307 	and.w	r3, r3, #7
  417660:	42ab      	cmp	r3, r5
  417662:	dd32      	ble.n	4176ca <lv_task_create+0x86>
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
  417664:	4621      	mov	r1, r4
  417666:	482c      	ldr	r0, [pc, #176]	; (417718 <lv_task_create+0xd4>)
  417668:	4b2d      	ldr	r3, [pc, #180]	; (417720 <lv_task_create+0xdc>)
  41766a:	4798      	blx	r3
        } while(tmp != NULL);
  41766c:	4604      	mov	r4, r0
  41766e:	2800      	cmp	r0, #0
  417670:	d1f3      	bne.n	41765a <lv_task_create+0x16>
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
  417672:	4603      	mov	r3, r0
        if(tmp == NULL) {
  417674:	2b00      	cmp	r3, #0
  417676:	d03c      	beq.n	4176f2 <lv_task_create+0xae>
    task_list_changed = true;
  417678:	f04f 0901 	mov.w	r9, #1
  41767c:	4b29      	ldr	r3, [pc, #164]	; (417724 <lv_task_create+0xe0>)
  41767e:	f883 9000 	strb.w	r9, [r3]
    new_task->period  = period;
  417682:	f8c4 8000 	str.w	r8, [r4]
    new_task->task_cb = task_xcb;
  417686:	60a7      	str	r7, [r4, #8]
    new_task->prio    = prio;
  417688:	7d23      	ldrb	r3, [r4, #20]
  41768a:	f365 0302 	bfi	r3, r5, #0, #3
  41768e:	7523      	strb	r3, [r4, #20]
    new_task->repeat_count = -1;
  417690:	f04f 33ff 	mov.w	r3, #4294967295
  417694:	6123      	str	r3, [r4, #16]
    new_task->last_run = lv_tick_get();
  417696:	4b24      	ldr	r3, [pc, #144]	; (417728 <lv_task_create+0xe4>)
  417698:	4798      	blx	r3
  41769a:	6060      	str	r0, [r4, #4]
    new_task->user_data = user_data;
  41769c:	60e6      	str	r6, [r4, #12]
    task_created = true;
  41769e:	4b23      	ldr	r3, [pc, #140]	; (41772c <lv_task_create+0xe8>)
  4176a0:	f883 9000 	strb.w	r9, [r3]
}
  4176a4:	4620      	mov	r0, r4
  4176a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        new_task = _lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
  4176aa:	481b      	ldr	r0, [pc, #108]	; (417718 <lv_task_create+0xd4>)
  4176ac:	4b20      	ldr	r3, [pc, #128]	; (417730 <lv_task_create+0xec>)
  4176ae:	4798      	blx	r3
  4176b0:	4604      	mov	r4, r0
        LV_ASSERT_MEM(new_task);
  4176b2:	4b20      	ldr	r3, [pc, #128]	; (417734 <lv_task_create+0xf0>)
  4176b4:	4798      	blx	r3
  4176b6:	b928      	cbnz	r0, 4176c4 <lv_task_create+0x80>
  4176b8:	4622      	mov	r2, r4
  4176ba:	2300      	movs	r3, #0
  4176bc:	481e      	ldr	r0, [pc, #120]	; (417738 <lv_task_create+0xf4>)
  4176be:	491f      	ldr	r1, [pc, #124]	; (41773c <lv_task_create+0xf8>)
  4176c0:	4788      	blx	r1
  4176c2:	e7fe      	b.n	4176c2 <lv_task_create+0x7e>
        if(new_task == NULL) return NULL;
  4176c4:	2c00      	cmp	r4, #0
  4176c6:	d1d7      	bne.n	417678 <lv_task_create+0x34>
  4176c8:	e7ec      	b.n	4176a4 <lv_task_create+0x60>
                new_task = _lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
  4176ca:	4621      	mov	r1, r4
  4176cc:	4812      	ldr	r0, [pc, #72]	; (417718 <lv_task_create+0xd4>)
  4176ce:	4b1c      	ldr	r3, [pc, #112]	; (417740 <lv_task_create+0xfc>)
  4176d0:	4798      	blx	r3
  4176d2:	4681      	mov	r9, r0
                LV_ASSERT_MEM(new_task);
  4176d4:	4b17      	ldr	r3, [pc, #92]	; (417734 <lv_task_create+0xf0>)
  4176d6:	4798      	blx	r3
  4176d8:	b128      	cbz	r0, 4176e6 <lv_task_create+0xa2>
                if(new_task == NULL) return NULL;
  4176da:	f1b9 0f00 	cmp.w	r9, #0
  4176de:	d018      	beq.n	417712 <lv_task_create+0xce>
  4176e0:	4623      	mov	r3, r4
                new_task = _lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
  4176e2:	464c      	mov	r4, r9
  4176e4:	e7c6      	b.n	417674 <lv_task_create+0x30>
                LV_ASSERT_MEM(new_task);
  4176e6:	464a      	mov	r2, r9
  4176e8:	2300      	movs	r3, #0
  4176ea:	4813      	ldr	r0, [pc, #76]	; (417738 <lv_task_create+0xf4>)
  4176ec:	4913      	ldr	r1, [pc, #76]	; (41773c <lv_task_create+0xf8>)
  4176ee:	4788      	blx	r1
  4176f0:	e7fe      	b.n	4176f0 <lv_task_create+0xac>
            new_task = _lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
  4176f2:	4809      	ldr	r0, [pc, #36]	; (417718 <lv_task_create+0xd4>)
  4176f4:	4b13      	ldr	r3, [pc, #76]	; (417744 <lv_task_create+0x100>)
  4176f6:	4798      	blx	r3
  4176f8:	4604      	mov	r4, r0
            LV_ASSERT_MEM(new_task);
  4176fa:	4b0e      	ldr	r3, [pc, #56]	; (417734 <lv_task_create+0xf0>)
  4176fc:	4798      	blx	r3
  4176fe:	b928      	cbnz	r0, 41770c <lv_task_create+0xc8>
  417700:	4622      	mov	r2, r4
  417702:	2300      	movs	r3, #0
  417704:	480c      	ldr	r0, [pc, #48]	; (417738 <lv_task_create+0xf4>)
  417706:	490d      	ldr	r1, [pc, #52]	; (41773c <lv_task_create+0xf8>)
  417708:	4788      	blx	r1
  41770a:	e7fe      	b.n	41770a <lv_task_create+0xc6>
            if(new_task == NULL) return NULL;
  41770c:	2c00      	cmp	r4, #0
  41770e:	d1b3      	bne.n	417678 <lv_task_create+0x34>
  417710:	e7c8      	b.n	4176a4 <lv_task_create+0x60>
                if(new_task == NULL) return NULL;
  417712:	464c      	mov	r4, r9
  417714:	e7c6      	b.n	4176a4 <lv_task_create+0x60>
  417716:	bf00      	nop
  417718:	2043a274 	.word	0x2043a274
  41771c:	004162a5 	.word	0x004162a5
  417720:	004162b9 	.word	0x004162b9
  417724:	2041482b 	.word	0x2041482b
  417728:	004151ad 	.word	0x004151ad
  41772c:	20414829 	.word	0x20414829
  417730:	0041620d 	.word	0x0041620d
  417734:	00415f95 	.word	0x00415f95
  417738:	0042c714 	.word	0x0042c714
  41773c:	00415fa1 	.word	0x00415fa1
  417740:	004162d5 	.word	0x004162d5
  417744:	00416259 	.word	0x00416259

00417748 <lv_task_del>:
{
  417748:	b510      	push	{r4, lr}
  41774a:	4604      	mov	r4, r0
    _lv_ll_remove(&LV_GC_ROOT(_lv_task_ll), task);
  41774c:	4601      	mov	r1, r0
  41774e:	4809      	ldr	r0, [pc, #36]	; (417774 <lv_task_del+0x2c>)
  417750:	4b09      	ldr	r3, [pc, #36]	; (417778 <lv_task_del+0x30>)
  417752:	4798      	blx	r3
    task_list_changed = true;
  417754:	2201      	movs	r2, #1
  417756:	4b09      	ldr	r3, [pc, #36]	; (41777c <lv_task_del+0x34>)
  417758:	701a      	strb	r2, [r3, #0]
    lv_mem_free(task);
  41775a:	4620      	mov	r0, r4
  41775c:	4b08      	ldr	r3, [pc, #32]	; (417780 <lv_task_del+0x38>)
  41775e:	4798      	blx	r3
    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
  417760:	4b08      	ldr	r3, [pc, #32]	; (417784 <lv_task_del+0x3c>)
  417762:	681b      	ldr	r3, [r3, #0]
  417764:	429c      	cmp	r4, r3
  417766:	d000      	beq.n	41776a <lv_task_del+0x22>
  417768:	bd10      	pop	{r4, pc}
  41776a:	2201      	movs	r2, #1
  41776c:	4b06      	ldr	r3, [pc, #24]	; (417788 <lv_task_del+0x40>)
  41776e:	701a      	strb	r2, [r3, #0]
}
  417770:	e7fa      	b.n	417768 <lv_task_del+0x20>
  417772:	bf00      	nop
  417774:	2043a274 	.word	0x2043a274
  417778:	00416361 	.word	0x00416361
  41777c:	2041482b 	.word	0x2041482b
  417780:	0041679d 	.word	0x0041679d
  417784:	2043a344 	.word	0x2043a344
  417788:	2041482a 	.word	0x2041482a

0041778c <lv_task_exec>:
{
  41778c:	b510      	push	{r4, lr}
  41778e:	4604      	mov	r4, r0
    if(lv_task_time_remaining(task) == 0) {
  417790:	4b0e      	ldr	r3, [pc, #56]	; (4177cc <lv_task_exec+0x40>)
  417792:	4798      	blx	r3
  417794:	b108      	cbz	r0, 41779a <lv_task_exec+0xe>
    bool exec = false;
  417796:	2000      	movs	r0, #0
  417798:	bd10      	pop	{r4, pc}
        task->last_run = lv_tick_get();
  41779a:	4b0d      	ldr	r3, [pc, #52]	; (4177d0 <lv_task_exec+0x44>)
  41779c:	4798      	blx	r3
  41779e:	6060      	str	r0, [r4, #4]
        if(task->task_cb) task->task_cb(task);
  4177a0:	68a3      	ldr	r3, [r4, #8]
  4177a2:	b10b      	cbz	r3, 4177a8 <lv_task_exec+0x1c>
  4177a4:	4620      	mov	r0, r4
  4177a6:	4798      	blx	r3
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
  4177a8:	4b0a      	ldr	r3, [pc, #40]	; (4177d4 <lv_task_exec+0x48>)
  4177aa:	7818      	ldrb	r0, [r3, #0]
  4177ac:	b938      	cbnz	r0, 4177be <lv_task_exec+0x32>
            if(task->repeat_count > 0) {
  4177ae:	6923      	ldr	r3, [r4, #16]
  4177b0:	2b00      	cmp	r3, #0
  4177b2:	dd01      	ble.n	4177b8 <lv_task_exec+0x2c>
                task->repeat_count--;
  4177b4:	3b01      	subs	r3, #1
  4177b6:	6123      	str	r3, [r4, #16]
            if(task->repeat_count == 0) {
  4177b8:	6923      	ldr	r3, [r4, #16]
  4177ba:	b10b      	cbz	r3, 4177c0 <lv_task_exec+0x34>
        exec = true;
  4177bc:	2001      	movs	r0, #1
}
  4177be:	bd10      	pop	{r4, pc}
                lv_task_del(task);
  4177c0:	4620      	mov	r0, r4
  4177c2:	4b05      	ldr	r3, [pc, #20]	; (4177d8 <lv_task_exec+0x4c>)
  4177c4:	4798      	blx	r3
        exec = true;
  4177c6:	2001      	movs	r0, #1
  4177c8:	bd10      	pop	{r4, pc}
  4177ca:	bf00      	nop
  4177cc:	00417629 	.word	0x00417629
  4177d0:	004151ad 	.word	0x004151ad
  4177d4:	2041482a 	.word	0x2041482a
  4177d8:	00417749 	.word	0x00417749

004177dc <lv_task_handler>:
{
  4177dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(already_running) return 1;
  4177de:	4b5e      	ldr	r3, [pc, #376]	; (417958 <lv_task_handler+0x17c>)
  4177e0:	781b      	ldrb	r3, [r3, #0]
  4177e2:	2b00      	cmp	r3, #0
  4177e4:	f040 80b5 	bne.w	417952 <lv_task_handler+0x176>
    already_running = true;
  4177e8:	2201      	movs	r2, #1
  4177ea:	4b5b      	ldr	r3, [pc, #364]	; (417958 <lv_task_handler+0x17c>)
  4177ec:	701a      	strb	r2, [r3, #0]
    if(lv_task_run == false) {
  4177ee:	4b5b      	ldr	r3, [pc, #364]	; (41795c <lv_task_handler+0x180>)
  4177f0:	781d      	ldrb	r5, [r3, #0]
  4177f2:	b925      	cbnz	r5, 4177fe <lv_task_handler+0x22>
        already_running = false; /*Release mutex*/
  4177f4:	2200      	movs	r2, #0
  4177f6:	4b58      	ldr	r3, [pc, #352]	; (417958 <lv_task_handler+0x17c>)
  4177f8:	701a      	strb	r2, [r3, #0]
        return 1;
  4177fa:	2501      	movs	r5, #1
  4177fc:	e0aa      	b.n	417954 <lv_task_handler+0x178>
    uint32_t handler_start = lv_tick_get();
  4177fe:	4b58      	ldr	r3, [pc, #352]	; (417960 <lv_task_handler+0x184>)
  417800:	4798      	blx	r3
  417802:	4606      	mov	r6, r0
    lv_task_t * task_interrupter = NULL;
  417804:	2400      	movs	r4, #0
  417806:	e04e      	b.n	4178a6 <lv_task_handler+0xca>
                LV_GC_ROOT(_lv_task_act) = next;
  417808:	4b56      	ldr	r3, [pc, #344]	; (417964 <lv_task_handler+0x188>)
  41780a:	601f      	str	r7, [r3, #0]
                task_interrupter = NULL; /*From this point only task after the interrupter comes, so
  41780c:	2400      	movs	r4, #0
                continue; /*Load the next task*/
  41780e:	e00f      	b.n	417830 <lv_task_handler+0x54>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
  417810:	4b55      	ldr	r3, [pc, #340]	; (417968 <lv_task_handler+0x18c>)
  417812:	4798      	blx	r3
            if(task_created || task_deleted) {
  417814:	4b55      	ldr	r3, [pc, #340]	; (41796c <lv_task_handler+0x190>)
  417816:	781b      	ldrb	r3, [r3, #0]
  417818:	2b00      	cmp	r3, #0
  41781a:	d153      	bne.n	4178c4 <lv_task_handler+0xe8>
  41781c:	4b54      	ldr	r3, [pc, #336]	; (417970 <lv_task_handler+0x194>)
  41781e:	781b      	ldrb	r3, [r3, #0]
  417820:	2b00      	cmp	r3, #0
  417822:	d151      	bne.n	4178c8 <lv_task_handler+0xec>
            if(task_list_changed) {
  417824:	4a53      	ldr	r2, [pc, #332]	; (417974 <lv_task_handler+0x198>)
  417826:	7812      	ldrb	r2, [r2, #0]
  417828:	2a00      	cmp	r2, #0
  41782a:	d14f      	bne.n	4178cc <lv_task_handler+0xf0>
            LV_GC_ROOT(_lv_task_act) = next; /*Load the next task*/
  41782c:	4b4d      	ldr	r3, [pc, #308]	; (417964 <lv_task_handler+0x188>)
  41782e:	601f      	str	r7, [r3, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
  417830:	4b4c      	ldr	r3, [pc, #304]	; (417964 <lv_task_handler+0x188>)
  417832:	6819      	ldr	r1, [r3, #0]
  417834:	2900      	cmp	r1, #0
  417836:	d034      	beq.n	4178a2 <lv_task_handler+0xc6>
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
  417838:	484f      	ldr	r0, [pc, #316]	; (417978 <lv_task_handler+0x19c>)
  41783a:	4b50      	ldr	r3, [pc, #320]	; (41797c <lv_task_handler+0x1a0>)
  41783c:	4798      	blx	r3
  41783e:	4607      	mov	r7, r0
            if(LV_GC_ROOT(_lv_task_act)->prio == LV_TASK_PRIO_OFF) {
  417840:	4b48      	ldr	r3, [pc, #288]	; (417964 <lv_task_handler+0x188>)
  417842:	6818      	ldr	r0, [r3, #0]
  417844:	7d03      	ldrb	r3, [r0, #20]
  417846:	f013 0307 	ands.w	r3, r3, #7
  41784a:	d039      	beq.n	4178c0 <lv_task_handler+0xe4>
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
  41784c:	4284      	cmp	r4, r0
  41784e:	d0db      	beq.n	417808 <lv_task_handler+0x2c>
            if(LV_GC_ROOT(_lv_task_act)->prio == LV_TASK_PRIO_HIGHEST) {
  417850:	2b05      	cmp	r3, #5
  417852:	d0dd      	beq.n	417810 <lv_task_handler+0x34>
            else if(task_interrupter) {
  417854:	b1b4      	cbz	r4, 417884 <lv_task_handler+0xa8>
                if(LV_GC_ROOT(_lv_task_act)->prio > task_interrupter->prio) {
  417856:	7d02      	ldrb	r2, [r0, #20]
  417858:	f002 0207 	and.w	r2, r2, #7
  41785c:	7d23      	ldrb	r3, [r4, #20]
  41785e:	f003 0307 	and.w	r3, r3, #7
  417862:	429a      	cmp	r2, r3
  417864:	ddd6      	ble.n	417814 <lv_task_handler+0x38>
                    if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
  417866:	4b40      	ldr	r3, [pc, #256]	; (417968 <lv_task_handler+0x18c>)
  417868:	4798      	blx	r3
  41786a:	2800      	cmp	r0, #0
  41786c:	d0d2      	beq.n	417814 <lv_task_handler+0x38>
                        if(!task_created && !task_deleted) {
  41786e:	4b3f      	ldr	r3, [pc, #252]	; (41796c <lv_task_handler+0x190>)
  417870:	781b      	ldrb	r3, [r3, #0]
  417872:	2b00      	cmp	r3, #0
  417874:	d1ce      	bne.n	417814 <lv_task_handler+0x38>
  417876:	4b3e      	ldr	r3, [pc, #248]	; (417970 <lv_task_handler+0x194>)
  417878:	781b      	ldrb	r3, [r3, #0]
  41787a:	2b00      	cmp	r3, #0
  41787c:	d1ca      	bne.n	417814 <lv_task_handler+0x38>
                            task_interrupter = LV_GC_ROOT(_lv_task_act);
  41787e:	4a39      	ldr	r2, [pc, #228]	; (417964 <lv_task_handler+0x188>)
  417880:	6814      	ldr	r4, [r2, #0]
                            break;
  417882:	e00f      	b.n	4178a4 <lv_task_handler+0xc8>
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
  417884:	4b38      	ldr	r3, [pc, #224]	; (417968 <lv_task_handler+0x18c>)
  417886:	4798      	blx	r3
  417888:	2800      	cmp	r0, #0
  41788a:	d0c3      	beq.n	417814 <lv_task_handler+0x38>
                    if(!task_created && !task_deleted) {
  41788c:	4b37      	ldr	r3, [pc, #220]	; (41796c <lv_task_handler+0x190>)
  41788e:	781b      	ldrb	r3, [r3, #0]
  417890:	2b00      	cmp	r3, #0
  417892:	d1bf      	bne.n	417814 <lv_task_handler+0x38>
  417894:	4b36      	ldr	r3, [pc, #216]	; (417970 <lv_task_handler+0x194>)
  417896:	781b      	ldrb	r3, [r3, #0]
  417898:	2b00      	cmp	r3, #0
  41789a:	d1bb      	bne.n	417814 <lv_task_handler+0x38>
                        task_interrupter = LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
  41789c:	4a31      	ldr	r2, [pc, #196]	; (417964 <lv_task_handler+0x188>)
  41789e:	6814      	ldr	r4, [r2, #0]
                        break;
  4178a0:	e000      	b.n	4178a4 <lv_task_handler+0xc8>
        end_flag                 = true;
  4178a2:	462b      	mov	r3, r5
    } while(!end_flag);
  4178a4:	b9a3      	cbnz	r3, 4178d0 <lv_task_handler+0xf4>
        task_deleted             = false;
  4178a6:	2300      	movs	r3, #0
  4178a8:	4a31      	ldr	r2, [pc, #196]	; (417970 <lv_task_handler+0x194>)
  4178aa:	7013      	strb	r3, [r2, #0]
        task_created             = false;
  4178ac:	4a2f      	ldr	r2, [pc, #188]	; (41796c <lv_task_handler+0x190>)
  4178ae:	7013      	strb	r3, [r2, #0]
        task_list_changed        = false;
  4178b0:	4a30      	ldr	r2, [pc, #192]	; (417974 <lv_task_handler+0x198>)
  4178b2:	7013      	strb	r3, [r2, #0]
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
  4178b4:	4830      	ldr	r0, [pc, #192]	; (417978 <lv_task_handler+0x19c>)
  4178b6:	4b32      	ldr	r3, [pc, #200]	; (417980 <lv_task_handler+0x1a4>)
  4178b8:	4798      	blx	r3
  4178ba:	4b2a      	ldr	r3, [pc, #168]	; (417964 <lv_task_handler+0x188>)
  4178bc:	6018      	str	r0, [r3, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
  4178be:	e7b7      	b.n	417830 <lv_task_handler+0x54>
        end_flag                 = true;
  4178c0:	462b      	mov	r3, r5
  4178c2:	e7ef      	b.n	4178a4 <lv_task_handler+0xc8>
                task_interrupter = NULL;
  4178c4:	2400      	movs	r4, #0
  4178c6:	e7ed      	b.n	4178a4 <lv_task_handler+0xc8>
  4178c8:	2400      	movs	r4, #0
  4178ca:	e7eb      	b.n	4178a4 <lv_task_handler+0xc8>
                task_interrupter = NULL;
  4178cc:	2400      	movs	r4, #0
  4178ce:	e7e9      	b.n	4178a4 <lv_task_handler+0xc8>
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
  4178d0:	4829      	ldr	r0, [pc, #164]	; (417978 <lv_task_handler+0x19c>)
  4178d2:	4b2b      	ldr	r3, [pc, #172]	; (417980 <lv_task_handler+0x1a4>)
  4178d4:	4798      	blx	r3
  4178d6:	4604      	mov	r4, r0
    uint32_t time_till_next = LV_NO_TASK_READY;
  4178d8:	f04f 35ff 	mov.w	r5, #4294967295
    while(next && next->prio != LV_TASK_PRIO_OFF) {
  4178dc:	e004      	b.n	4178e8 <lv_task_handler+0x10c>
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), next); /*Find the next task*/
  4178de:	4621      	mov	r1, r4
  4178e0:	4825      	ldr	r0, [pc, #148]	; (417978 <lv_task_handler+0x19c>)
  4178e2:	4b26      	ldr	r3, [pc, #152]	; (41797c <lv_task_handler+0x1a0>)
  4178e4:	4798      	blx	r3
  4178e6:	4604      	mov	r4, r0
    while(next && next->prio != LV_TASK_PRIO_OFF) {
  4178e8:	b154      	cbz	r4, 417900 <lv_task_handler+0x124>
  4178ea:	7d23      	ldrb	r3, [r4, #20]
  4178ec:	f013 0f07 	tst.w	r3, #7
  4178f0:	d006      	beq.n	417900 <lv_task_handler+0x124>
        uint32_t delay = lv_task_time_remaining(next);
  4178f2:	4620      	mov	r0, r4
  4178f4:	4b23      	ldr	r3, [pc, #140]	; (417984 <lv_task_handler+0x1a8>)
  4178f6:	4798      	blx	r3
        if(delay < time_till_next)
  4178f8:	4285      	cmp	r5, r0
  4178fa:	d9f0      	bls.n	4178de <lv_task_handler+0x102>
            time_till_next = delay;
  4178fc:	4605      	mov	r5, r0
  4178fe:	e7ee      	b.n	4178de <lv_task_handler+0x102>
    busy_time += lv_tick_elaps(handler_start);
  417900:	4630      	mov	r0, r6
  417902:	4c21      	ldr	r4, [pc, #132]	; (417988 <lv_task_handler+0x1ac>)
  417904:	47a0      	blx	r4
  417906:	4a21      	ldr	r2, [pc, #132]	; (41798c <lv_task_handler+0x1b0>)
  417908:	6813      	ldr	r3, [r2, #0]
  41790a:	4403      	add	r3, r0
  41790c:	6013      	str	r3, [r2, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
  41790e:	4b20      	ldr	r3, [pc, #128]	; (417990 <lv_task_handler+0x1b4>)
  417910:	6818      	ldr	r0, [r3, #0]
  417912:	47a0      	blx	r4
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
  417914:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
  417918:	d315      	bcc.n	417946 <lv_task_handler+0x16a>
        idle_last         = (busy_time * 100) / idle_period_time;  /*Calculate the busy percentage*/
  41791a:	4b1c      	ldr	r3, [pc, #112]	; (41798c <lv_task_handler+0x1b0>)
  41791c:	681a      	ldr	r2, [r3, #0]
  41791e:	2364      	movs	r3, #100	; 0x64
  417920:	fb03 f302 	mul.w	r3, r3, r2
  417924:	fbb3 f3f0 	udiv	r3, r3, r0
  417928:	b2db      	uxtb	r3, r3
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
  41792a:	2b64      	cmp	r3, #100	; 0x64
  41792c:	d80f      	bhi.n	41794e <lv_task_handler+0x172>
  41792e:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
  417932:	b2db      	uxtb	r3, r3
  417934:	4a17      	ldr	r2, [pc, #92]	; (417994 <lv_task_handler+0x1b8>)
  417936:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
  417938:	2200      	movs	r2, #0
  41793a:	4b14      	ldr	r3, [pc, #80]	; (41798c <lv_task_handler+0x1b0>)
  41793c:	601a      	str	r2, [r3, #0]
        idle_period_start = lv_tick_get();
  41793e:	4b08      	ldr	r3, [pc, #32]	; (417960 <lv_task_handler+0x184>)
  417940:	4798      	blx	r3
  417942:	4b13      	ldr	r3, [pc, #76]	; (417990 <lv_task_handler+0x1b4>)
  417944:	6018      	str	r0, [r3, #0]
    already_running = false; /*Release the mutex*/
  417946:	2200      	movs	r2, #0
  417948:	4b03      	ldr	r3, [pc, #12]	; (417958 <lv_task_handler+0x17c>)
  41794a:	701a      	strb	r2, [r3, #0]
    return time_till_next;
  41794c:	e002      	b.n	417954 <lv_task_handler+0x178>
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
  41794e:	2300      	movs	r3, #0
  417950:	e7f0      	b.n	417934 <lv_task_handler+0x158>
    if(already_running) return 1;
  417952:	2501      	movs	r5, #1
}
  417954:	4628      	mov	r0, r5
  417956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  417958:	20414818 	.word	0x20414818
  41795c:	20414828 	.word	0x20414828
  417960:	004151ad 	.word	0x004151ad
  417964:	2043a344 	.word	0x2043a344
  417968:	0041778d 	.word	0x0041778d
  41796c:	20414829 	.word	0x20414829
  417970:	2041482a 	.word	0x2041482a
  417974:	2041482b 	.word	0x2041482b
  417978:	2043a274 	.word	0x2043a274
  41797c:	004162b9 	.word	0x004162b9
  417980:	004162a5 	.word	0x004162a5
  417984:	00417629 	.word	0x00417629
  417988:	004151c9 	.word	0x004151c9
  41798c:	2041481c 	.word	0x2041481c
  417990:	20414824 	.word	0x20414824
  417994:	20414820 	.word	0x20414820

00417998 <lv_task_set_prio>:
{
  417998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(task->prio == prio) return;
  41799a:	7d03      	ldrb	r3, [r0, #20]
  41799c:	f003 0307 	and.w	r3, r3, #7
  4179a0:	428b      	cmp	r3, r1
  4179a2:	d021      	beq.n	4179e8 <lv_task_set_prio+0x50>
  4179a4:	460d      	mov	r5, r1
  4179a6:	460f      	mov	r7, r1
  4179a8:	4606      	mov	r6, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
  4179aa:	4813      	ldr	r0, [pc, #76]	; (4179f8 <lv_task_set_prio+0x60>)
  4179ac:	4b13      	ldr	r3, [pc, #76]	; (4179fc <lv_task_set_prio+0x64>)
  4179ae:	4798      	blx	r3
  4179b0:	4604      	mov	r4, r0
  4179b2:	b18c      	cbz	r4, 4179d8 <lv_task_set_prio+0x40>
        if(i->prio <= prio) {
  4179b4:	7d23      	ldrb	r3, [r4, #20]
  4179b6:	f003 0307 	and.w	r3, r3, #7
  4179ba:	429d      	cmp	r5, r3
  4179bc:	da05      	bge.n	4179ca <lv_task_set_prio+0x32>
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
  4179be:	4621      	mov	r1, r4
  4179c0:	480d      	ldr	r0, [pc, #52]	; (4179f8 <lv_task_set_prio+0x60>)
  4179c2:	4b0f      	ldr	r3, [pc, #60]	; (417a00 <lv_task_set_prio+0x68>)
  4179c4:	4798      	blx	r3
  4179c6:	4604      	mov	r4, r0
  4179c8:	e7f3      	b.n	4179b2 <lv_task_set_prio+0x1a>
            if(i != task) _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
  4179ca:	42b4      	cmp	r4, r6
  4179cc:	d004      	beq.n	4179d8 <lv_task_set_prio+0x40>
  4179ce:	4622      	mov	r2, r4
  4179d0:	4631      	mov	r1, r6
  4179d2:	4809      	ldr	r0, [pc, #36]	; (4179f8 <lv_task_set_prio+0x60>)
  4179d4:	4b0b      	ldr	r3, [pc, #44]	; (417a04 <lv_task_set_prio+0x6c>)
  4179d6:	4798      	blx	r3
    if(i == NULL) {
  4179d8:	b13c      	cbz	r4, 4179ea <lv_task_set_prio+0x52>
    task_list_changed = true;
  4179da:	2201      	movs	r2, #1
  4179dc:	4b0a      	ldr	r3, [pc, #40]	; (417a08 <lv_task_set_prio+0x70>)
  4179de:	701a      	strb	r2, [r3, #0]
    task->prio = prio;
  4179e0:	7d33      	ldrb	r3, [r6, #20]
  4179e2:	f367 0302 	bfi	r3, r7, #0, #3
  4179e6:	7533      	strb	r3, [r6, #20]
  4179e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
  4179ea:	2200      	movs	r2, #0
  4179ec:	4631      	mov	r1, r6
  4179ee:	4802      	ldr	r0, [pc, #8]	; (4179f8 <lv_task_set_prio+0x60>)
  4179f0:	4b04      	ldr	r3, [pc, #16]	; (417a04 <lv_task_set_prio+0x6c>)
  4179f2:	4798      	blx	r3
  4179f4:	e7f1      	b.n	4179da <lv_task_set_prio+0x42>
  4179f6:	bf00      	nop
  4179f8:	2043a274 	.word	0x2043a274
  4179fc:	004162a5 	.word	0x004162a5
  417a00:	004162b9 	.word	0x004162b9
  417a04:	004164d1 	.word	0x004164d1
  417a08:	2041482b 	.word	0x2041482b

00417a0c <lv_task_ready>:
{
  417a0c:	b510      	push	{r4, lr}
  417a0e:	4604      	mov	r4, r0
    task->last_run = lv_tick_get() - task->period - 1;
  417a10:	4b03      	ldr	r3, [pc, #12]	; (417a20 <lv_task_ready+0x14>)
  417a12:	4798      	blx	r3
  417a14:	6823      	ldr	r3, [r4, #0]
  417a16:	1ac0      	subs	r0, r0, r3
  417a18:	3801      	subs	r0, #1
  417a1a:	6060      	str	r0, [r4, #4]
  417a1c:	bd10      	pop	{r4, pc}
  417a1e:	bf00      	nop
  417a20:	004151ad 	.word	0x004151ad

00417a24 <lv_task_set_repeat_count>:
    task->repeat_count = repeat_count;
  417a24:	6101      	str	r1, [r0, #16]
  417a26:	4770      	bx	lr

00417a28 <lv_task_enable>:
    lv_task_run = en;
  417a28:	4b01      	ldr	r3, [pc, #4]	; (417a30 <lv_task_enable+0x8>)
  417a2a:	7018      	strb	r0, [r3, #0]
  417a2c:	4770      	bx	lr
  417a2e:	bf00      	nop
  417a30:	20414828 	.word	0x20414828

00417a34 <_lv_task_core_init>:
{
  417a34:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
  417a36:	2118      	movs	r1, #24
  417a38:	4803      	ldr	r0, [pc, #12]	; (417a48 <_lv_task_core_init+0x14>)
  417a3a:	4b04      	ldr	r3, [pc, #16]	; (417a4c <_lv_task_core_init+0x18>)
  417a3c:	4798      	blx	r3
    lv_task_enable(true);
  417a3e:	2001      	movs	r0, #1
  417a40:	4b03      	ldr	r3, [pc, #12]	; (417a50 <_lv_task_core_init+0x1c>)
  417a42:	4798      	blx	r3
  417a44:	bd08      	pop	{r3, pc}
  417a46:	bf00      	nop
  417a48:	2043a274 	.word	0x2043a274
  417a4c:	004161fb 	.word	0x004161fb
  417a50:	00417a29 	.word	0x00417a29

00417a54 <lv_txt_utf8_size>:
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4). O on invalid code
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
    if((str[0] & 0x80) == 0)
  417a54:	7803      	ldrb	r3, [r0, #0]
  417a56:	f013 0f80 	tst.w	r3, #128	; 0x80
  417a5a:	d101      	bne.n	417a60 <lv_txt_utf8_size+0xc>
        return 1;
  417a5c:	2001      	movs	r0, #1
  417a5e:	4770      	bx	lr
    else if((str[0] & 0xE0) == 0xC0)
  417a60:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
  417a64:	2ac0      	cmp	r2, #192	; 0xc0
  417a66:	d00b      	beq.n	417a80 <lv_txt_utf8_size+0x2c>
        return 2;
    else if((str[0] & 0xF0) == 0xE0)
  417a68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  417a6c:	2ae0      	cmp	r2, #224	; 0xe0
  417a6e:	d009      	beq.n	417a84 <lv_txt_utf8_size+0x30>
        return 3;
    else if((str[0] & 0xF8) == 0xF0)
  417a70:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
  417a74:	2bf0      	cmp	r3, #240	; 0xf0
  417a76:	d001      	beq.n	417a7c <lv_txt_utf8_size+0x28>
        return 4;
    return 0; /*If the char was invalid tell it's 1 byte long*/
  417a78:	2000      	movs	r0, #0
}
  417a7a:	4770      	bx	lr
        return 4;
  417a7c:	2004      	movs	r0, #4
  417a7e:	4770      	bx	lr
        return 2;
  417a80:	2002      	movs	r0, #2
  417a82:	4770      	bx	lr
        return 3;
  417a84:	2003      	movs	r0, #3
  417a86:	4770      	bx	lr

00417a88 <lv_txt_utf8_next>:
 *          After call it will point to the next UTF-8 char in 'txt'.
 *          NULL to use txt[0] as index
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_next(const char * txt, uint32_t * i)
{
  417a88:	b430      	push	{r4, r5}
  417a8a:	b082      	sub	sp, #8
     * */

    uint32_t result = 0;

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
  417a8c:	2300      	movs	r3, #0
  417a8e:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
  417a90:	460c      	mov	r4, r1
  417a92:	b151      	cbz	r1, 417aaa <lv_txt_utf8_next+0x22>

    /*Normal ASCII*/
    if((txt[*i] & 0x80) == 0) {
  417a94:	6822      	ldr	r2, [r4, #0]
  417a96:	5c83      	ldrb	r3, [r0, r2]
  417a98:	f013 0f80 	tst.w	r3, #128	; 0x80
  417a9c:	d107      	bne.n	417aae <lv_txt_utf8_next+0x26>
        result = txt[*i];
  417a9e:	4618      	mov	r0, r3
        (*i)++;
  417aa0:	3201      	adds	r2, #1
  417aa2:	6022      	str	r2, [r4, #0]
        else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
        }
    }
    return result;
}
  417aa4:	b002      	add	sp, #8
  417aa6:	bc30      	pop	{r4, r5}
  417aa8:	4770      	bx	lr
    if(i == NULL) i = &i_tmp;
  417aaa:	ac01      	add	r4, sp, #4
  417aac:	e7f2      	b.n	417a94 <lv_txt_utf8_next+0xc>
        if((txt[*i] & 0xE0) == 0xC0) {
  417aae:	f003 01e0 	and.w	r1, r3, #224	; 0xe0
  417ab2:	29c0      	cmp	r1, #192	; 0xc0
  417ab4:	d00b      	beq.n	417ace <lv_txt_utf8_next+0x46>
        else if((txt[*i] & 0xF0) == 0xE0) {
  417ab6:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
  417aba:	29e0      	cmp	r1, #224	; 0xe0
  417abc:	d019      	beq.n	417af2 <lv_txt_utf8_next+0x6a>
        else if((txt[*i] & 0xF8) == 0xF0) {
  417abe:	f003 01f8 	and.w	r1, r3, #248	; 0xf8
  417ac2:	29f0      	cmp	r1, #240	; 0xf0
  417ac4:	d033      	beq.n	417b2e <lv_txt_utf8_next+0xa6>
            (*i)++; /*Not UTF-8 char. Go the next.*/
  417ac6:	3201      	adds	r2, #1
  417ac8:	6022      	str	r2, [r4, #0]
    uint32_t result = 0;
  417aca:	2000      	movs	r0, #0
  417acc:	e7ea      	b.n	417aa4 <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
  417ace:	019b      	lsls	r3, r3, #6
  417ad0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
            (*i)++;
  417ad4:	3201      	adds	r2, #1
  417ad6:	6022      	str	r2, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  417ad8:	5c80      	ldrb	r0, [r0, r2]
  417ada:	f000 01c0 	and.w	r1, r0, #192	; 0xc0
  417ade:	2980      	cmp	r1, #128	; 0x80
  417ae0:	d001      	beq.n	417ae6 <lv_txt_utf8_next+0x5e>
  417ae2:	2000      	movs	r0, #0
  417ae4:	e7de      	b.n	417aa4 <lv_txt_utf8_next+0x1c>
            result += (txt[*i] & 0x3F);
  417ae6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  417aea:	4418      	add	r0, r3
            (*i)++;
  417aec:	3201      	adds	r2, #1
  417aee:	6022      	str	r2, [r4, #0]
  417af0:	e7d8      	b.n	417aa4 <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
  417af2:	031b      	lsls	r3, r3, #12
  417af4:	b29b      	uxth	r3, r3
            (*i)++;
  417af6:	3201      	adds	r2, #1
  417af8:	6022      	str	r2, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  417afa:	5c81      	ldrb	r1, [r0, r2]
  417afc:	f001 05c0 	and.w	r5, r1, #192	; 0xc0
  417b00:	2d80      	cmp	r5, #128	; 0x80
  417b02:	d001      	beq.n	417b08 <lv_txt_utf8_next+0x80>
  417b04:	2000      	movs	r0, #0
  417b06:	e7cd      	b.n	417aa4 <lv_txt_utf8_next+0x1c>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
  417b08:	0189      	lsls	r1, r1, #6
  417b0a:	f401 617c 	and.w	r1, r1, #4032	; 0xfc0
  417b0e:	440b      	add	r3, r1
            (*i)++;
  417b10:	3201      	adds	r2, #1
  417b12:	6022      	str	r2, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  417b14:	5c81      	ldrb	r1, [r0, r2]
  417b16:	f001 00c0 	and.w	r0, r1, #192	; 0xc0
  417b1a:	2880      	cmp	r0, #128	; 0x80
  417b1c:	d001      	beq.n	417b22 <lv_txt_utf8_next+0x9a>
  417b1e:	2000      	movs	r0, #0
  417b20:	e7c0      	b.n	417aa4 <lv_txt_utf8_next+0x1c>
            result += (txt[*i] & 0x3F);
  417b22:	f001 013f 	and.w	r1, r1, #63	; 0x3f
  417b26:	1858      	adds	r0, r3, r1
            (*i)++;
  417b28:	3201      	adds	r2, #1
  417b2a:	6022      	str	r2, [r4, #0]
  417b2c:	e7ba      	b.n	417aa4 <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
  417b2e:	049b      	lsls	r3, r3, #18
  417b30:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
            (*i)++;
  417b34:	3201      	adds	r2, #1
  417b36:	6022      	str	r2, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  417b38:	5c81      	ldrb	r1, [r0, r2]
  417b3a:	f001 05c0 	and.w	r5, r1, #192	; 0xc0
  417b3e:	2d80      	cmp	r5, #128	; 0x80
  417b40:	d001      	beq.n	417b46 <lv_txt_utf8_next+0xbe>
  417b42:	2000      	movs	r0, #0
  417b44:	e7ae      	b.n	417aa4 <lv_txt_utf8_next+0x1c>
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
  417b46:	0309      	lsls	r1, r1, #12
  417b48:	f401 317c 	and.w	r1, r1, #258048	; 0x3f000
  417b4c:	430b      	orrs	r3, r1
            (*i)++;
  417b4e:	3201      	adds	r2, #1
  417b50:	6022      	str	r2, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  417b52:	5c81      	ldrb	r1, [r0, r2]
  417b54:	f001 05c0 	and.w	r5, r1, #192	; 0xc0
  417b58:	2d80      	cmp	r5, #128	; 0x80
  417b5a:	d001      	beq.n	417b60 <lv_txt_utf8_next+0xd8>
  417b5c:	2000      	movs	r0, #0
  417b5e:	e7a1      	b.n	417aa4 <lv_txt_utf8_next+0x1c>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
  417b60:	0189      	lsls	r1, r1, #6
  417b62:	f401 617c 	and.w	r1, r1, #4032	; 0xfc0
  417b66:	440b      	add	r3, r1
            (*i)++;
  417b68:	3201      	adds	r2, #1
  417b6a:	6022      	str	r2, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  417b6c:	5c81      	ldrb	r1, [r0, r2]
  417b6e:	f001 00c0 	and.w	r0, r1, #192	; 0xc0
  417b72:	2880      	cmp	r0, #128	; 0x80
  417b74:	d001      	beq.n	417b7a <lv_txt_utf8_next+0xf2>
  417b76:	2000      	movs	r0, #0
  417b78:	e794      	b.n	417aa4 <lv_txt_utf8_next+0x1c>
            result += txt[*i] & 0x3F;
  417b7a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
  417b7e:	1858      	adds	r0, r3, r1
            (*i)++;
  417b80:	3201      	adds	r2, #1
  417b82:	6022      	str	r2, [r4, #0]
  417b84:	e78e      	b.n	417aa4 <lv_txt_utf8_next+0x1c>
	...

00417b88 <lv_txt_utf8_prev>:
 * @param i start byte index in 'txt' where to start. After the call it will point to the previous
 * UTF-8 char in 'txt'.
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_prev(const char * txt, uint32_t * i)
{
  417b88:	b570      	push	{r4, r5, r6, lr}
  417b8a:	b082      	sub	sp, #8
  417b8c:	4606      	mov	r6, r0
  417b8e:	460d      	mov	r5, r1
    uint8_t c_size;
    uint8_t cnt = 0;

    /*Try to find a !0 long UTF-8 char by stepping one character back*/
    (*i)--;
  417b90:	680b      	ldr	r3, [r1, #0]
  417b92:	3b01      	subs	r3, #1
  417b94:	600b      	str	r3, [r1, #0]
    uint8_t cnt = 0;
  417b96:	2400      	movs	r4, #0
  417b98:	e002      	b.n	417ba0 <lv_txt_utf8_prev+0x18>
            if(*i != 0)
                (*i)--;
            else
                return 0;
        }
        cnt++;
  417b9a:	3401      	adds	r4, #1
  417b9c:	b2e4      	uxtb	r4, r4
    } while(c_size == 0);
  417b9e:	b973      	cbnz	r3, 417bbe <lv_txt_utf8_prev+0x36>
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
  417ba0:	2c03      	cmp	r4, #3
  417ba2:	d815      	bhi.n	417bd0 <lv_txt_utf8_prev+0x48>
        c_size = _lv_txt_encoded_size(&txt[*i]);
  417ba4:	4b0c      	ldr	r3, [pc, #48]	; (417bd8 <lv_txt_utf8_prev+0x50>)
  417ba6:	681b      	ldr	r3, [r3, #0]
  417ba8:	6828      	ldr	r0, [r5, #0]
  417baa:	4430      	add	r0, r6
  417bac:	4798      	blx	r3
        if(c_size == 0) {
  417bae:	4603      	mov	r3, r0
  417bb0:	2800      	cmp	r0, #0
  417bb2:	d1f2      	bne.n	417b9a <lv_txt_utf8_prev+0x12>
            if(*i != 0)
  417bb4:	6828      	ldr	r0, [r5, #0]
  417bb6:	b160      	cbz	r0, 417bd2 <lv_txt_utf8_prev+0x4a>
                (*i)--;
  417bb8:	3801      	subs	r0, #1
  417bba:	6028      	str	r0, [r5, #0]
  417bbc:	e7ed      	b.n	417b9a <lv_txt_utf8_prev+0x12>

    uint32_t i_tmp  = *i;
  417bbe:	682b      	ldr	r3, [r5, #0]
  417bc0:	a902      	add	r1, sp, #8
  417bc2:	f841 3d04 	str.w	r3, [r1, #-4]!
    uint32_t letter = _lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
  417bc6:	4b05      	ldr	r3, [pc, #20]	; (417bdc <lv_txt_utf8_prev+0x54>)
  417bc8:	681b      	ldr	r3, [r3, #0]
  417bca:	4630      	mov	r0, r6
  417bcc:	4798      	blx	r3

    return letter;
  417bce:	e000      	b.n	417bd2 <lv_txt_utf8_prev+0x4a>
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
  417bd0:	2000      	movs	r0, #0
}
  417bd2:	b002      	add	sp, #8
  417bd4:	bd70      	pop	{r4, r5, r6, pc}
  417bd6:	bf00      	nop
  417bd8:	204000c0 	.word	0x204000c0
  417bdc:	204000b8 	.word	0x204000b8

00417be0 <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
  417be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  417be2:	4607      	mov	r7, r0
  417be4:	460e      	mov	r6, r1
    uint32_t i;
    uint32_t byte_cnt = 0;
  417be6:	2400      	movs	r4, #0
    for(i = 0; i < utf8_id; i++) {
  417be8:	4625      	mov	r5, r4
  417bea:	e001      	b.n	417bf0 <lv_txt_utf8_get_byte_id+0x10>
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
        byte_cnt += c_size > 0 ? c_size : 1;
  417bec:	4404      	add	r4, r0
    for(i = 0; i < utf8_id; i++) {
  417bee:	3501      	adds	r5, #1
  417bf0:	42b5      	cmp	r5, r6
  417bf2:	d207      	bcs.n	417c04 <lv_txt_utf8_get_byte_id+0x24>
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
  417bf4:	4b04      	ldr	r3, [pc, #16]	; (417c08 <lv_txt_utf8_get_byte_id+0x28>)
  417bf6:	681b      	ldr	r3, [r3, #0]
  417bf8:	1938      	adds	r0, r7, r4
  417bfa:	4798      	blx	r3
        byte_cnt += c_size > 0 ? c_size : 1;
  417bfc:	2800      	cmp	r0, #0
  417bfe:	d1f5      	bne.n	417bec <lv_txt_utf8_get_byte_id+0xc>
  417c00:	2001      	movs	r0, #1
  417c02:	e7f3      	b.n	417bec <lv_txt_utf8_get_byte_id+0xc>
    }

    return byte_cnt;
}
  417c04:	4620      	mov	r0, r4
  417c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  417c08:	204000c0 	.word	0x204000c0

00417c0c <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
  417c0c:	b570      	push	{r4, r5, r6, lr}
  417c0e:	b082      	sub	sp, #8
  417c10:	4606      	mov	r6, r0
  417c12:	460d      	mov	r5, r1
    uint32_t i        = 0;
  417c14:	2400      	movs	r4, #0
  417c16:	9401      	str	r4, [sp, #4]
    uint32_t char_cnt = 0;

    while(i < byte_id) {
  417c18:	e005      	b.n	417c26 <lv_txt_utf8_get_char_id+0x1a>
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
  417c1a:	4b06      	ldr	r3, [pc, #24]	; (417c34 <lv_txt_utf8_get_char_id+0x28>)
  417c1c:	681b      	ldr	r3, [r3, #0]
  417c1e:	a901      	add	r1, sp, #4
  417c20:	4630      	mov	r0, r6
  417c22:	4798      	blx	r3
        char_cnt++;
  417c24:	3401      	adds	r4, #1
    while(i < byte_id) {
  417c26:	9b01      	ldr	r3, [sp, #4]
  417c28:	42ab      	cmp	r3, r5
  417c2a:	d3f6      	bcc.n	417c1a <lv_txt_utf8_get_char_id+0xe>
    }

    return char_cnt;
}
  417c2c:	4620      	mov	r0, r4
  417c2e:	b002      	add	sp, #8
  417c30:	bd70      	pop	{r4, r5, r6, pc}
  417c32:	bf00      	nop
  417c34:	204000b8 	.word	0x204000b8

00417c38 <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
  417c38:	b530      	push	{r4, r5, lr}
  417c3a:	b083      	sub	sp, #12
  417c3c:	4605      	mov	r5, r0
    uint32_t len = 0;
    uint32_t i   = 0;
  417c3e:	2400      	movs	r4, #0
  417c40:	9401      	str	r4, [sp, #4]

    while(txt[i] != '\0') {
  417c42:	e005      	b.n	417c50 <lv_txt_utf8_get_length+0x18>
        _lv_txt_encoded_next(txt, &i);
  417c44:	4b06      	ldr	r3, [pc, #24]	; (417c60 <lv_txt_utf8_get_length+0x28>)
  417c46:	681b      	ldr	r3, [r3, #0]
  417c48:	a901      	add	r1, sp, #4
  417c4a:	4628      	mov	r0, r5
  417c4c:	4798      	blx	r3
        len++;
  417c4e:	3401      	adds	r4, #1
    while(txt[i] != '\0') {
  417c50:	9b01      	ldr	r3, [sp, #4]
  417c52:	5ceb      	ldrb	r3, [r5, r3]
  417c54:	2b00      	cmp	r3, #0
  417c56:	d1f5      	bne.n	417c44 <lv_txt_utf8_get_length+0xc>
    }

    return len;
}
  417c58:	4620      	mov	r0, r4
  417c5a:	b003      	add	sp, #12
  417c5c:	bd30      	pop	{r4, r5, pc}
  417c5e:	bf00      	nop
  417c60:	204000b8 	.word	0x204000b8

00417c64 <_lv_txt_is_cmd>:
{
  417c64:	4602      	mov	r2, r0
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
  417c66:	2923      	cmp	r1, #35	; 0x23
  417c68:	d004      	beq.n	417c74 <_lv_txt_is_cmd+0x10>
    bool ret = false;
  417c6a:	2000      	movs	r0, #0
    if(*state == LV_TXT_CMD_STATE_PAR) {
  417c6c:	7813      	ldrb	r3, [r2, #0]
  417c6e:	2b01      	cmp	r3, #1
  417c70:	d014      	beq.n	417c9c <_lv_txt_is_cmd+0x38>
}
  417c72:	4770      	bx	lr
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
  417c74:	7803      	ldrb	r3, [r0, #0]
  417c76:	b91b      	cbnz	r3, 417c80 <_lv_txt_is_cmd+0x1c>
            *state = LV_TXT_CMD_STATE_PAR;
  417c78:	2301      	movs	r3, #1
  417c7a:	7003      	strb	r3, [r0, #0]
            ret    = true;
  417c7c:	4618      	mov	r0, r3
  417c7e:	e7f5      	b.n	417c6c <_lv_txt_is_cmd+0x8>
        else if(*state == LV_TXT_CMD_STATE_PAR) {
  417c80:	2b01      	cmp	r3, #1
  417c82:	d003      	beq.n	417c8c <_lv_txt_is_cmd+0x28>
        else if(*state == LV_TXT_CMD_STATE_IN) {
  417c84:	2b02      	cmp	r3, #2
  417c86:	d005      	beq.n	417c94 <_lv_txt_is_cmd+0x30>
    bool ret = false;
  417c88:	2000      	movs	r0, #0
  417c8a:	e7ef      	b.n	417c6c <_lv_txt_is_cmd+0x8>
            *state = LV_TXT_CMD_STATE_WAIT;
  417c8c:	2300      	movs	r3, #0
  417c8e:	7003      	strb	r3, [r0, #0]
    bool ret = false;
  417c90:	4618      	mov	r0, r3
  417c92:	e7eb      	b.n	417c6c <_lv_txt_is_cmd+0x8>
            *state = LV_TXT_CMD_STATE_WAIT;
  417c94:	2300      	movs	r3, #0
  417c96:	7003      	strb	r3, [r0, #0]
            ret    = true;
  417c98:	2001      	movs	r0, #1
  417c9a:	e7e7      	b.n	417c6c <_lv_txt_is_cmd+0x8>
        if(c == ' ') {
  417c9c:	2920      	cmp	r1, #32
  417c9e:	d001      	beq.n	417ca4 <_lv_txt_is_cmd+0x40>
        ret = true;
  417ca0:	2001      	movs	r0, #1
  417ca2:	e7e6      	b.n	417c72 <_lv_txt_is_cmd+0xe>
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
  417ca4:	2302      	movs	r3, #2
  417ca6:	7013      	strb	r3, [r2, #0]
        ret = true;
  417ca8:	2001      	movs	r0, #1
  417caa:	4770      	bx	lr

00417cac <lv_txt_get_next_word>:
{
  417cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  417cb0:	b089      	sub	sp, #36	; 0x24
  417cb2:	9103      	str	r1, [sp, #12]
  417cb4:	9202      	str	r2, [sp, #8]
  417cb6:	9304      	str	r3, [sp, #16]
  417cb8:	f89d b048 	ldrb.w	fp, [sp, #72]	; 0x48
  417cbc:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
  417cc0:	9305      	str	r3, [sp, #20]
    if(txt == NULL || txt[0] == '\0') return 0;
  417cc2:	2800      	cmp	r0, #0
  417cc4:	f000 808f 	beq.w	417de6 <lv_txt_get_next_word+0x13a>
  417cc8:	4607      	mov	r7, r0
  417cca:	7803      	ldrb	r3, [r0, #0]
  417ccc:	2b00      	cmp	r3, #0
  417cce:	f000 808d 	beq.w	417dec <lv_txt_get_next_word+0x140>
    if(font == NULL) return 0;
  417cd2:	2900      	cmp	r1, #0
  417cd4:	f000 8090 	beq.w	417df8 <lv_txt_get_next_word+0x14c>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
  417cd8:	f01b 0f02 	tst.w	fp, #2
  417cdc:	d002      	beq.n	417ce4 <lv_txt_get_next_word+0x38>
  417cde:	f647 4318 	movw	r3, #31768	; 0x7c18
  417ce2:	9304      	str	r3, [sp, #16]
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
  417ce4:	2600      	movs	r6, #0
  417ce6:	9607      	str	r6, [sp, #28]
  417ce8:	9606      	str	r6, [sp, #24]
    letter = _lv_txt_encoded_next(txt, &i_next);
  417cea:	4b47      	ldr	r3, [pc, #284]	; (417e08 <lv_txt_get_next_word+0x15c>)
  417cec:	681b      	ldr	r3, [r3, #0]
  417cee:	a907      	add	r1, sp, #28
  417cf0:	4638      	mov	r0, r7
  417cf2:	4798      	blx	r3
  417cf4:	4604      	mov	r4, r0
    i_next_next = i_next;
  417cf6:	9b07      	ldr	r3, [sp, #28]
  417cf8:	9306      	str	r3, [sp, #24]
    uint32_t break_index = NO_BREAK_FOUND; /* only used for "long" words */
  417cfa:	f04f 38ff 	mov.w	r8, #4294967295
    uint32_t word_len = 0;   /* Number of characters in the transversed word */
  417cfe:	46b1      	mov	r9, r6
    lv_coord_t cur_w = 0;  /* Pixel Width of transversed string */
  417d00:	4635      	mov	r5, r6
    uint32_t letter_next = 0; /* Letter at i_next */
  417d02:	9601      	str	r6, [sp, #4]
    while(txt[i] != '\0') {
  417d04:	e039      	b.n	417d7a <lv_txt_get_next_word+0xce>
        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
  417d06:	9a01      	ldr	r2, [sp, #4]
  417d08:	4621      	mov	r1, r4
  417d0a:	9803      	ldr	r0, [sp, #12]
  417d0c:	4b3f      	ldr	r3, [pc, #252]	; (417e0c <lv_txt_get_next_word+0x160>)
  417d0e:	4798      	blx	r3
  417d10:	b203      	sxth	r3, r0
        cur_w += letter_w;
  417d12:	4428      	add	r0, r5
  417d14:	b280      	uxth	r0, r0
  417d16:	b205      	sxth	r5, r0
        if(letter_w > 0) {
  417d18:	2b00      	cmp	r3, #0
  417d1a:	dd02      	ble.n	417d22 <lv_txt_get_next_word+0x76>
            cur_w += letter_space;
  417d1c:	9b02      	ldr	r3, [sp, #8]
  417d1e:	18c5      	adds	r5, r0, r3
  417d20:	b22d      	sxth	r5, r5
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
  417d22:	f1b8 3fff 	cmp.w	r8, #4294967295
  417d26:	d00f      	beq.n	417d48 <lv_txt_get_next_word+0x9c>
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
  417d28:	2c0d      	cmp	r4, #13
  417d2a:	bf18      	it	ne
  417d2c:	2c0a      	cmpne	r4, #10
  417d2e:	bf0c      	ite	eq
  417d30:	2101      	moveq	r1, #1
  417d32:	2100      	movne	r1, #0
  417d34:	d038      	beq.n	417da8 <lv_txt_get_next_word+0xfc>
  417d36:	2300      	movs	r3, #0
{
    uint8_t i;
    bool ret = false;

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
  417d38:	4a35      	ldr	r2, [pc, #212]	; (417e10 <lv_txt_get_next_word+0x164>)
  417d3a:	5cd2      	ldrb	r2, [r2, r3]
  417d3c:	b162      	cbz	r2, 417d58 <lv_txt_get_next_word+0xac>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
  417d3e:	4294      	cmp	r4, r2
  417d40:	d009      	beq.n	417d56 <lv_txt_get_next_word+0xaa>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
  417d42:	3301      	adds	r3, #1
  417d44:	b2db      	uxtb	r3, r3
  417d46:	e7f7      	b.n	417d38 <lv_txt_get_next_word+0x8c>
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
  417d48:	9b02      	ldr	r3, [sp, #8]
  417d4a:	1aeb      	subs	r3, r5, r3
  417d4c:	9a04      	ldr	r2, [sp, #16]
  417d4e:	4293      	cmp	r3, r2
  417d50:	ddea      	ble.n	417d28 <lv_txt_get_next_word+0x7c>
            break_index = i;
  417d52:	46b0      	mov	r8, r6
  417d54:	e7e8      	b.n	417d28 <lv_txt_get_next_word+0x7c>
            ret = true; /*If match then it is break char*/
  417d56:	2101      	movs	r1, #1
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
  417d58:	bb31      	cbnz	r1, 417da8 <lv_txt_get_next_word+0xfc>
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
  417d5a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  417d5c:	3300      	adds	r3, #0
  417d5e:	bf18      	it	ne
  417d60:	2301      	movne	r3, #1
  417d62:	f1b8 3fff 	cmp.w	r8, #4294967295
  417d66:	bf18      	it	ne
  417d68:	2300      	movne	r3, #0
  417d6a:	b10b      	cbz	r3, 417d70 <lv_txt_get_next_word+0xc4>
  417d6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  417d6e:	601d      	str	r5, [r3, #0]
        i = i_next;
  417d70:	9e07      	ldr	r6, [sp, #28]
        i_next = i_next_next;
  417d72:	9b06      	ldr	r3, [sp, #24]
  417d74:	9307      	str	r3, [sp, #28]
            ret = true; /*If match then it is break char*/
  417d76:	46d1      	mov	r9, sl
  417d78:	9c01      	ldr	r4, [sp, #4]
    while(txt[i] != '\0') {
  417d7a:	5dbb      	ldrb	r3, [r7, r6]
  417d7c:	b1e3      	cbz	r3, 417db8 <lv_txt_get_next_word+0x10c>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
  417d7e:	4b22      	ldr	r3, [pc, #136]	; (417e08 <lv_txt_get_next_word+0x15c>)
  417d80:	681b      	ldr	r3, [r3, #0]
  417d82:	a906      	add	r1, sp, #24
  417d84:	4638      	mov	r0, r7
  417d86:	4798      	blx	r3
  417d88:	9001      	str	r0, [sp, #4]
        word_len++;
  417d8a:	f109 0a01 	add.w	sl, r9, #1
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
  417d8e:	f01b 0f01 	tst.w	fp, #1
  417d92:	d0b8      	beq.n	417d06 <lv_txt_get_next_word+0x5a>
            if(_lv_txt_is_cmd(cmd_state, letter) != false) {
  417d94:	4621      	mov	r1, r4
  417d96:	9814      	ldr	r0, [sp, #80]	; 0x50
  417d98:	4b1e      	ldr	r3, [pc, #120]	; (417e14 <lv_txt_get_next_word+0x168>)
  417d9a:	4798      	blx	r3
  417d9c:	2800      	cmp	r0, #0
  417d9e:	d0b2      	beq.n	417d06 <lv_txt_get_next_word+0x5a>
                i = i_next;
  417da0:	9e07      	ldr	r6, [sp, #28]
                i_next = i_next_next;
  417da2:	9b06      	ldr	r3, [sp, #24]
  417da4:	9307      	str	r3, [sp, #28]
                continue;   /*Skip the letter is it is part of a command*/
  417da6:	e7e6      	b.n	417d76 <lv_txt_get_next_word+0xca>
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
  417da8:	2e00      	cmp	r6, #0
  417daa:	bf08      	it	eq
  417dac:	f1b8 3fff 	cmpeq.w	r8, #4294967295
  417db0:	d102      	bne.n	417db8 <lv_txt_get_next_word+0x10c>
  417db2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  417db4:	b103      	cbz	r3, 417db8 <lv_txt_get_next_word+0x10c>
  417db6:	601d      	str	r5, [r3, #0]
    if(break_index == NO_BREAK_FOUND) {
  417db8:	f1b8 3fff 	cmp.w	r8, #4294967295
  417dbc:	d008      	beq.n	417dd0 <lv_txt_get_next_word+0x124>
    if(force) return break_index;
  417dbe:	9b05      	ldr	r3, [sp, #20]
  417dc0:	b9b3      	cbnz	r3, 417df0 <lv_txt_get_next_word+0x144>
    if(word_w_ptr != NULL) *word_w_ptr = 0; /* Return no word */
  417dc2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  417dc4:	b1eb      	cbz	r3, 417e02 <lv_txt_get_next_word+0x156>
  417dc6:	2300      	movs	r3, #0
  417dc8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  417dca:	6013      	str	r3, [r2, #0]
    return 0;
  417dcc:	4698      	mov	r8, r3
  417dce:	e00f      	b.n	417df0 <lv_txt_get_next_word+0x144>
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
  417dd0:	f1b9 0f00 	cmp.w	r9, #0
  417dd4:	d004      	beq.n	417de0 <lv_txt_get_next_word+0x134>
  417dd6:	9b01      	ldr	r3, [sp, #4]
  417dd8:	2c0d      	cmp	r4, #13
  417dda:	bf08      	it	eq
  417ddc:	2b0a      	cmpeq	r3, #10
  417dde:	d10e      	bne.n	417dfe <lv_txt_get_next_word+0x152>
  417de0:	f8dd 801c 	ldr.w	r8, [sp, #28]
  417de4:	e004      	b.n	417df0 <lv_txt_get_next_word+0x144>
    if(txt == NULL || txt[0] == '\0') return 0;
  417de6:	f04f 0800 	mov.w	r8, #0
  417dea:	e001      	b.n	417df0 <lv_txt_get_next_word+0x144>
  417dec:	f04f 0800 	mov.w	r8, #0
}
  417df0:	4640      	mov	r0, r8
  417df2:	b009      	add	sp, #36	; 0x24
  417df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(font == NULL) return 0;
  417df8:	f04f 0800 	mov.w	r8, #0
  417dfc:	e7f8      	b.n	417df0 <lv_txt_get_next_word+0x144>
  417dfe:	46b0      	mov	r8, r6
  417e00:	e7f6      	b.n	417df0 <lv_txt_get_next_word+0x144>
    return 0;
  417e02:	f04f 0800 	mov.w	r8, #0
  417e06:	e7f3      	b.n	417df0 <lv_txt_get_next_word+0x144>
  417e08:	204000b8 	.word	0x204000b8
  417e0c:	00413bed 	.word	0x00413bed
  417e10:	0042fe24 	.word	0x0042fe24
  417e14:	00417c65 	.word	0x00417c65

00417e18 <_lv_txt_get_next_line>:
{
  417e18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  417e1c:	b089      	sub	sp, #36	; 0x24
  417e1e:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
    if(txt == NULL) return 0;
  417e22:	2800      	cmp	r0, #0
  417e24:	d05f      	beq.n	417ee6 <_lv_txt_get_next_line+0xce>
  417e26:	4689      	mov	r9, r1
  417e28:	4690      	mov	r8, r2
  417e2a:	461d      	mov	r5, r3
  417e2c:	4604      	mov	r4, r0
    if(font == NULL) return 0;
  417e2e:	2900      	cmp	r1, #0
  417e30:	d05b      	beq.n	417eea <_lv_txt_get_next_line+0xd2>
    if((flag & LV_TXT_FLAG_EXPAND) || (flag & LV_TXT_FLAG_FIT)) {
  417e32:	f016 0f12 	tst.w	r6, #18
  417e36:	d145      	bne.n	417ec4 <_lv_txt_get_next_line+0xac>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
  417e38:	f016 0f02 	tst.w	r6, #2
  417e3c:	d001      	beq.n	417e42 <_lv_txt_get_next_line+0x2a>
  417e3e:	f647 4518 	movw	r5, #31768	; 0x7c18
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
  417e42:	2300      	movs	r3, #0
  417e44:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32_t i = 0;                                        /* Iterating index into txt */
  417e48:	9306      	str	r3, [sp, #24]
    while(txt[i] != '\0' && max_width > 0) {
  417e4a:	9b06      	ldr	r3, [sp, #24]
  417e4c:	18e0      	adds	r0, r4, r3
  417e4e:	5ce2      	ldrb	r2, [r4, r3]
  417e50:	b332      	cbz	r2, 417ea0 <_lv_txt_get_next_line+0x88>
  417e52:	2d00      	cmp	r5, #0
  417e54:	dd24      	ble.n	417ea0 <_lv_txt_get_next_line+0x88>
        uint32_t word_w = 0;
  417e56:	2200      	movs	r2, #0
  417e58:	9205      	str	r2, [sp, #20]
        uint32_t advance = lv_txt_get_next_word(&txt[i], font, letter_space, max_width, flag, &word_w, &cmd_state, i == 0);
  417e5a:	fab3 f383 	clz	r3, r3
  417e5e:	095b      	lsrs	r3, r3, #5
  417e60:	9303      	str	r3, [sp, #12]
  417e62:	f10d 031f 	add.w	r3, sp, #31
  417e66:	9302      	str	r3, [sp, #8]
  417e68:	ab05      	add	r3, sp, #20
  417e6a:	9301      	str	r3, [sp, #4]
  417e6c:	9600      	str	r6, [sp, #0]
  417e6e:	462b      	mov	r3, r5
  417e70:	4642      	mov	r2, r8
  417e72:	4649      	mov	r1, r9
  417e74:	4f1e      	ldr	r7, [pc, #120]	; (417ef0 <_lv_txt_get_next_line+0xd8>)
  417e76:	47b8      	blx	r7
        max_width -= word_w;
  417e78:	9b05      	ldr	r3, [sp, #20]
  417e7a:	1aed      	subs	r5, r5, r3
  417e7c:	b22d      	sxth	r5, r5
        if(advance == 0) {
  417e7e:	4603      	mov	r3, r0
  417e80:	b310      	cbz	r0, 417ec8 <_lv_txt_get_next_line+0xb0>
        i += advance;
  417e82:	9806      	ldr	r0, [sp, #24]
  417e84:	4418      	add	r0, r3
  417e86:	9006      	str	r0, [sp, #24]
        if(txt[0] == '\n' || txt[0] == '\r') break;
  417e88:	7823      	ldrb	r3, [r4, #0]
  417e8a:	2b0d      	cmp	r3, #13
  417e8c:	bf18      	it	ne
  417e8e:	2b0a      	cmpne	r3, #10
  417e90:	d006      	beq.n	417ea0 <_lv_txt_get_next_line+0x88>
        if(txt[i] == '\n' || txt[i] == '\r') {
  417e92:	5c23      	ldrb	r3, [r4, r0]
  417e94:	2b0d      	cmp	r3, #13
  417e96:	bf18      	it	ne
  417e98:	2b0a      	cmpne	r3, #10
  417e9a:	d1d6      	bne.n	417e4a <_lv_txt_get_next_line+0x32>
            i++;  /* Include the following newline in the current line */
  417e9c:	3001      	adds	r0, #1
  417e9e:	9006      	str	r0, [sp, #24]
    if(i == 0) {
  417ea0:	9b06      	ldr	r3, [sp, #24]
  417ea2:	b1d3      	cbz	r3, 417eda <_lv_txt_get_next_line+0xc2>
    return i;
  417ea4:	9806      	ldr	r0, [sp, #24]
}
  417ea6:	b009      	add	sp, #36	; 0x24
  417ea8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
  417eac:	3001      	adds	r0, #1
  417eae:	5c23      	ldrb	r3, [r4, r0]
  417eb0:	2b0a      	cmp	r3, #10
  417eb2:	bf18      	it	ne
  417eb4:	2b0d      	cmpne	r3, #13
  417eb6:	d001      	beq.n	417ebc <_lv_txt_get_next_line+0xa4>
  417eb8:	2b00      	cmp	r3, #0
  417eba:	d1f7      	bne.n	417eac <_lv_txt_get_next_line+0x94>
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
  417ebc:	2b00      	cmp	r3, #0
  417ebe:	d0f2      	beq.n	417ea6 <_lv_txt_get_next_line+0x8e>
  417ec0:	3001      	adds	r0, #1
  417ec2:	e7f0      	b.n	417ea6 <_lv_txt_get_next_line+0x8e>
  417ec4:	2000      	movs	r0, #0
  417ec6:	e7f2      	b.n	417eae <_lv_txt_get_next_line+0x96>
            if(i == 0) _lv_txt_encoded_next(txt, &i); // prevent inf loops
  417ec8:	9b06      	ldr	r3, [sp, #24]
  417eca:	2b00      	cmp	r3, #0
  417ecc:	d1e8      	bne.n	417ea0 <_lv_txt_get_next_line+0x88>
  417ece:	4b09      	ldr	r3, [pc, #36]	; (417ef4 <_lv_txt_get_next_line+0xdc>)
  417ed0:	681b      	ldr	r3, [r3, #0]
  417ed2:	a906      	add	r1, sp, #24
  417ed4:	4620      	mov	r0, r4
  417ed6:	4798      	blx	r3
  417ed8:	e7e2      	b.n	417ea0 <_lv_txt_get_next_line+0x88>
        _lv_txt_encoded_next(txt, &i);
  417eda:	4b06      	ldr	r3, [pc, #24]	; (417ef4 <_lv_txt_get_next_line+0xdc>)
  417edc:	681b      	ldr	r3, [r3, #0]
  417ede:	a906      	add	r1, sp, #24
  417ee0:	4620      	mov	r0, r4
  417ee2:	4798      	blx	r3
  417ee4:	e7de      	b.n	417ea4 <_lv_txt_get_next_line+0x8c>
    if(txt == NULL) return 0;
  417ee6:	2000      	movs	r0, #0
  417ee8:	e7dd      	b.n	417ea6 <_lv_txt_get_next_line+0x8e>
    if(font == NULL) return 0;
  417eea:	2000      	movs	r0, #0
  417eec:	e7db      	b.n	417ea6 <_lv_txt_get_next_line+0x8e>
  417eee:	bf00      	nop
  417ef0:	00417cad 	.word	0x00417cad
  417ef4:	204000b8 	.word	0x204000b8

00417ef8 <_lv_txt_get_width>:
{
  417ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  417efc:	b085      	sub	sp, #20
  417efe:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    if(txt == NULL) return 0;
  417f02:	2800      	cmp	r0, #0
  417f04:	d041      	beq.n	417f8a <_lv_txt_get_width+0x92>
  417f06:	4604      	mov	r4, r0
    if(font == NULL) return 0;
  417f08:	2a00      	cmp	r2, #0
  417f0a:	d041      	beq.n	417f90 <_lv_txt_get_width+0x98>
    uint32_t i                   = 0;
  417f0c:	2000      	movs	r0, #0
  417f0e:	9003      	str	r0, [sp, #12]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
  417f10:	f88d 000b 	strb.w	r0, [sp, #11]
    if(length != 0) {
  417f14:	b129      	cbz	r1, 417f22 <_lv_txt_get_width+0x2a>
  417f16:	4698      	mov	r8, r3
  417f18:	9201      	str	r2, [sp, #4]
  417f1a:	460d      	mov	r5, r1
  417f1c:	f04f 0a00 	mov.w	sl, #0
  417f20:	e00e      	b.n	417f40 <_lv_txt_get_width+0x48>
    lv_coord_t width             = 0;
  417f22:	4682      	mov	sl, r0
  417f24:	e02d      	b.n	417f82 <_lv_txt_get_width+0x8a>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
  417f26:	464a      	mov	r2, r9
  417f28:	4659      	mov	r1, fp
  417f2a:	9801      	ldr	r0, [sp, #4]
  417f2c:	4b1a      	ldr	r3, [pc, #104]	; (417f98 <_lv_txt_get_width+0xa0>)
  417f2e:	4798      	blx	r3
  417f30:	b203      	sxth	r3, r0
            if(char_width > 0) {
  417f32:	2b00      	cmp	r3, #0
  417f34:	dd04      	ble.n	417f40 <_lv_txt_get_width+0x48>
                width += char_width;
  417f36:	4450      	add	r0, sl
                width += letter_space;
  417f38:	fa18 f080 	uxtah	r0, r8, r0
  417f3c:	fa0f fa80 	sxth.w	sl, r0
        while(i < length) {
  417f40:	9b03      	ldr	r3, [sp, #12]
  417f42:	429d      	cmp	r5, r3
  417f44:	d916      	bls.n	417f74 <_lv_txt_get_width+0x7c>
            uint32_t letter      = _lv_txt_encoded_next(txt, &i);
  417f46:	4e15      	ldr	r6, [pc, #84]	; (417f9c <_lv_txt_get_width+0xa4>)
  417f48:	6833      	ldr	r3, [r6, #0]
  417f4a:	a903      	add	r1, sp, #12
  417f4c:	4620      	mov	r0, r4
  417f4e:	4798      	blx	r3
  417f50:	4683      	mov	fp, r0
            uint32_t letter_next = _lv_txt_encoded_next(&txt[i], NULL);
  417f52:	6833      	ldr	r3, [r6, #0]
  417f54:	2100      	movs	r1, #0
  417f56:	9803      	ldr	r0, [sp, #12]
  417f58:	4420      	add	r0, r4
  417f5a:	4798      	blx	r3
  417f5c:	4681      	mov	r9, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
  417f5e:	f017 0f01 	tst.w	r7, #1
  417f62:	d0e0      	beq.n	417f26 <_lv_txt_get_width+0x2e>
                if(_lv_txt_is_cmd(&cmd_state, letter) != false) {
  417f64:	4659      	mov	r1, fp
  417f66:	f10d 000b 	add.w	r0, sp, #11
  417f6a:	4b0d      	ldr	r3, [pc, #52]	; (417fa0 <_lv_txt_get_width+0xa8>)
  417f6c:	4798      	blx	r3
  417f6e:	2800      	cmp	r0, #0
  417f70:	d1e6      	bne.n	417f40 <_lv_txt_get_width+0x48>
  417f72:	e7d8      	b.n	417f26 <_lv_txt_get_width+0x2e>
        if(width > 0) {
  417f74:	f1ba 0f00 	cmp.w	sl, #0
  417f78:	dd03      	ble.n	417f82 <_lv_txt_get_width+0x8a>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
  417f7a:	ebaa 0008 	sub.w	r0, sl, r8
  417f7e:	fa0f fa80 	sxth.w	sl, r0
}
  417f82:	4650      	mov	r0, sl
  417f84:	b005      	add	sp, #20
  417f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(txt == NULL) return 0;
  417f8a:	f04f 0a00 	mov.w	sl, #0
  417f8e:	e7f8      	b.n	417f82 <_lv_txt_get_width+0x8a>
    if(font == NULL) return 0;
  417f90:	f04f 0a00 	mov.w	sl, #0
  417f94:	e7f5      	b.n	417f82 <_lv_txt_get_width+0x8a>
  417f96:	bf00      	nop
  417f98:	00413bed 	.word	0x00413bed
  417f9c:	204000b8 	.word	0x204000b8
  417fa0:	00417c65 	.word	0x00417c65

00417fa4 <_lv_txt_get_size>:
{
  417fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  417fa8:	b087      	sub	sp, #28
  417faa:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
  417fae:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
  417fb2:	9404      	str	r4, [sp, #16]
  417fb4:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    size_res->x = 0;
  417fb8:	2400      	movs	r4, #0
  417fba:	8004      	strh	r4, [r0, #0]
    size_res->y = 0;
  417fbc:	8044      	strh	r4, [r0, #2]
    if(text == NULL) return;
  417fbe:	2900      	cmp	r1, #0
  417fc0:	d04d      	beq.n	41805e <_lv_txt_get_size+0xba>
  417fc2:	460f      	mov	r7, r1
    if(font == NULL) return;
  417fc4:	2a00      	cmp	r2, #0
  417fc6:	d04a      	beq.n	41805e <_lv_txt_get_size+0xba>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
  417fc8:	f018 0f02 	tst.w	r8, #2
  417fcc:	d002      	beq.n	417fd4 <_lv_txt_get_size+0x30>
  417fce:	f647 4118 	movw	r1, #31768	; 0x7c18
  417fd2:	9104      	str	r1, [sp, #16]
  417fd4:	9303      	str	r3, [sp, #12]
  417fd6:	9202      	str	r2, [sp, #8]
  417fd8:	4604      	mov	r4, r0
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
  417fda:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
  417fde:	9305      	str	r3, [sp, #20]
    uint16_t letter_height = lv_font_get_line_height(font);
  417fe0:	fa1f fa83 	uxth.w	sl, r3
    uint32_t line_start     = 0;
  417fe4:	2500      	movs	r5, #0
    while(text[line_start] != '\0') {
  417fe6:	197e      	adds	r6, r7, r5
  417fe8:	5d7b      	ldrb	r3, [r7, r5]
  417fea:	b323      	cbz	r3, 418036 <_lv_txt_get_size+0x92>
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
  417fec:	f8cd 8000 	str.w	r8, [sp]
  417ff0:	9b04      	ldr	r3, [sp, #16]
  417ff2:	9a03      	ldr	r2, [sp, #12]
  417ff4:	9902      	ldr	r1, [sp, #8]
  417ff6:	4630      	mov	r0, r6
  417ff8:	f8df b074 	ldr.w	fp, [pc, #116]	; 418070 <_lv_txt_get_size+0xcc>
  417ffc:	47d8      	blx	fp
  417ffe:	4405      	add	r5, r0
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
  418000:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
  418004:	eb03 020a 	add.w	r2, r3, sl
  418008:	444a      	add	r2, r9
  41800a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  41800e:	d226      	bcs.n	41805e <_lv_txt_get_size+0xba>
            size_res->y += letter_height;
  418010:	4453      	add	r3, sl
            size_res->y += line_space;
  418012:	fa19 f383 	uxtah	r3, r9, r3
  418016:	8063      	strh	r3, [r4, #2]
        lv_coord_t act_line_length = _lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space,
  418018:	f8cd 8000 	str.w	r8, [sp]
  41801c:	9b03      	ldr	r3, [sp, #12]
  41801e:	9a02      	ldr	r2, [sp, #8]
  418020:	4601      	mov	r1, r0
  418022:	4630      	mov	r0, r6
  418024:	4e11      	ldr	r6, [pc, #68]	; (41806c <_lv_txt_get_size+0xc8>)
  418026:	47b0      	blx	r6
        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
  418028:	f9b4 3000 	ldrsh.w	r3, [r4]
  41802c:	4298      	cmp	r0, r3
  41802e:	bfb8      	it	lt
  418030:	4618      	movlt	r0, r3
  418032:	8020      	strh	r0, [r4, #0]
  418034:	e7d7      	b.n	417fe6 <_lv_txt_get_size+0x42>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
  418036:	b15d      	cbz	r5, 418050 <_lv_txt_get_size+0xac>
  418038:	f816 3c01 	ldrb.w	r3, [r6, #-1]
  41803c:	2b0d      	cmp	r3, #13
  41803e:	bf18      	it	ne
  418040:	2b0a      	cmpne	r3, #10
  418042:	d105      	bne.n	418050 <_lv_txt_get_size+0xac>
        size_res->y += letter_height + line_space;
  418044:	eb0a 0309 	add.w	r3, sl, r9
  418048:	8862      	ldrh	r2, [r4, #2]
  41804a:	fa12 f383 	uxtah	r3, r2, r3
  41804e:	8063      	strh	r3, [r4, #2]
    if(size_res->y == 0)
  418050:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
  418054:	b133      	cbz	r3, 418064 <_lv_txt_get_size+0xc0>
        size_res->y -= line_space;
  418056:	eba3 0909 	sub.w	r9, r3, r9
  41805a:	f8a4 9002 	strh.w	r9, [r4, #2]
}
  41805e:	b007      	add	sp, #28
  418060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        size_res->y = letter_height;
  418064:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  418068:	8063      	strh	r3, [r4, #2]
  41806a:	e7f8      	b.n	41805e <_lv_txt_get_size+0xba>
  41806c:	00417ef9 	.word	0x00417ef9
  418070:	00417e19 	.word	0x00417e19

00418074 <_lv_txt_set_text_vfmt>:
{
  418074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  418078:	b082      	sub	sp, #8
  41807a:	4607      	mov	r7, r0
  41807c:	460d      	mov	r5, r1
    va_copy(ap_copy, ap);
  41807e:	9101      	str	r1, [sp, #4]
    uint32_t len = lv_vsnprintf(NULL, 0, fmt, ap_copy);
  418080:	460b      	mov	r3, r1
  418082:	4602      	mov	r2, r0
  418084:	2100      	movs	r1, #0
  418086:	4608      	mov	r0, r1
  418088:	4c0f      	ldr	r4, [pc, #60]	; (4180c8 <_lv_txt_set_text_vfmt+0x54>)
  41808a:	47a0      	blx	r4
  41808c:	4680      	mov	r8, r0
    text = lv_mem_alloc(len + 1);
  41808e:	1c46      	adds	r6, r0, #1
  418090:	4630      	mov	r0, r6
  418092:	4b0e      	ldr	r3, [pc, #56]	; (4180cc <_lv_txt_set_text_vfmt+0x58>)
  418094:	4798      	blx	r3
  418096:	4604      	mov	r4, r0
    LV_ASSERT_MEM(text);
  418098:	4b0d      	ldr	r3, [pc, #52]	; (4180d0 <_lv_txt_set_text_vfmt+0x5c>)
  41809a:	4798      	blx	r3
  41809c:	b168      	cbz	r0, 4180ba <_lv_txt_set_text_vfmt+0x46>
    if(text == NULL) {
  41809e:	b144      	cbz	r4, 4180b2 <_lv_txt_set_text_vfmt+0x3e>
    text[len] = 0; /* Ensure NULL termination */
  4180a0:	2300      	movs	r3, #0
  4180a2:	f804 3008 	strb.w	r3, [r4, r8]
    lv_vsnprintf(text, len + 1, fmt, ap);
  4180a6:	462b      	mov	r3, r5
  4180a8:	463a      	mov	r2, r7
  4180aa:	4631      	mov	r1, r6
  4180ac:	4620      	mov	r0, r4
  4180ae:	4d06      	ldr	r5, [pc, #24]	; (4180c8 <_lv_txt_set_text_vfmt+0x54>)
  4180b0:	47a8      	blx	r5
}
  4180b2:	4620      	mov	r0, r4
  4180b4:	b002      	add	sp, #8
  4180b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LV_ASSERT_MEM(text);
  4180ba:	4622      	mov	r2, r4
  4180bc:	2300      	movs	r3, #0
  4180be:	4805      	ldr	r0, [pc, #20]	; (4180d4 <_lv_txt_set_text_vfmt+0x60>)
  4180c0:	4905      	ldr	r1, [pc, #20]	; (4180d8 <_lv_txt_set_text_vfmt+0x64>)
  4180c2:	4788      	blx	r1
  4180c4:	e7fe      	b.n	4180c4 <_lv_txt_set_text_vfmt+0x50>
  4180c6:	bf00      	nop
  4180c8:	00417609 	.word	0x00417609
  4180cc:	004166d9 	.word	0x004166d9
  4180d0:	00415f95 	.word	0x00415f95
  4180d4:	0042c714 	.word	0x0042c714
  4180d8:	00415fa1 	.word	0x00415fa1

004180dc <_lv_utils_bsearch>:
  4180dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4180e0:	4681      	mov	r9, r0
  4180e2:	468a      	mov	sl, r1
  4180e4:	4615      	mov	r5, r2
  4180e6:	461f      	mov	r7, r3
  4180e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
  4180ec:	4608      	mov	r0, r1
  4180ee:	e003      	b.n	4180f8 <_lv_utils_bsearch+0x1c>
  4180f0:	2800      	cmp	r0, #0
  4180f2:	da16      	bge.n	418122 <_lv_utils_bsearch+0x46>
  4180f4:	4650      	mov	r0, sl
  4180f6:	4635      	mov	r5, r6
  4180f8:	b185      	cbz	r5, 41811c <_lv_utils_bsearch+0x40>
  4180fa:	086e      	lsrs	r6, r5, #1
  4180fc:	fb07 0406 	mla	r4, r7, r6, r0
  418100:	4621      	mov	r1, r4
  418102:	4648      	mov	r0, r9
  418104:	47c0      	blx	r8
  418106:	2800      	cmp	r0, #0
  418108:	ddf2      	ble.n	4180f0 <_lv_utils_bsearch+0x14>
  41810a:	f015 0f01 	tst.w	r5, #1
  41810e:	bf0c      	ite	eq
  418110:	2501      	moveq	r5, #1
  418112:	2500      	movne	r5, #0
  418114:	1b75      	subs	r5, r6, r5
  418116:	19e0      	adds	r0, r4, r7
  418118:	4682      	mov	sl, r0
  41811a:	e7ed      	b.n	4180f8 <_lv_utils_bsearch+0x1c>
  41811c:	2000      	movs	r0, #0
  41811e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  418122:	4620      	mov	r0, r4
  418124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00418128 <apply_theme>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void apply_theme(lv_theme_t * th, lv_obj_t * obj, lv_theme_style_t name)
{
  418128:	b570      	push	{r4, r5, r6, lr}
  41812a:	4604      	mov	r4, r0
  41812c:	460d      	mov	r5, r1
  41812e:	4616      	mov	r6, r2
    if(th->base) {
  418130:	6880      	ldr	r0, [r0, #8]
  418132:	b108      	cbz	r0, 418138 <apply_theme+0x10>
        apply_theme(th->base, obj, name);
  418134:	f7ff fff8 	bl	418128 <apply_theme>
    }

    /*apply_xcb is deprecated, use apply_cb instead*/
    if(th->apply_xcb) {
  418138:	6863      	ldr	r3, [r4, #4]
  41813a:	b11b      	cbz	r3, 418144 <apply_theme+0x1c>
        th->apply_xcb(obj, name);
  41813c:	4631      	mov	r1, r6
  41813e:	4628      	mov	r0, r5
  418140:	4798      	blx	r3
  418142:	bd70      	pop	{r4, r5, r6, pc}
    }
    else if(th->apply_cb) {
  418144:	6823      	ldr	r3, [r4, #0]
  418146:	b123      	cbz	r3, 418152 <apply_theme+0x2a>
        th->apply_cb(act_theme, obj, name);
  418148:	4632      	mov	r2, r6
  41814a:	4629      	mov	r1, r5
  41814c:	4801      	ldr	r0, [pc, #4]	; (418154 <apply_theme+0x2c>)
  41814e:	6800      	ldr	r0, [r0, #0]
  418150:	4798      	blx	r3
  418152:	bd70      	pop	{r4, r5, r6, pc}
  418154:	2041482c 	.word	0x2041482c

00418158 <clear_styles>:
    }
}

static void clear_styles(lv_obj_t * obj, lv_theme_style_t name)
{
  418158:	b538      	push	{r3, r4, r5, lr}
  41815a:	4604      	mov	r4, r0
    switch(name) {
  41815c:	3901      	subs	r1, #1
  41815e:	2927      	cmp	r1, #39	; 0x27
  418160:	f200 8150 	bhi.w	418404 <clear_styles+0x2ac>
  418164:	e8df f011 	tbh	[pc, r1, lsl #1]
  418168:	002c0028 	.word	0x002c0028
  41816c:	0046006b 	.word	0x0046006b
  418170:	00380034 	.word	0x00380034
  418174:	0057012d 	.word	0x0057012d
  418178:	00ea0083 	.word	0x00ea0083
  41817c:	013a0030 	.word	0x013a0030
  418180:	014500dd 	.word	0x014500dd
  418184:	005f005b 	.word	0x005f005b
  418188:	0063003f 	.word	0x0063003f
  41818c:	00670095 	.word	0x00670095
  418190:	00d900cf 	.word	0x00d900cf
  418194:	008a0141 	.word	0x008a0141
  418198:	00cb008e 	.word	0x00cb008e
  41819c:	00c40099 	.word	0x00c40099
  4181a0:	01220079 	.word	0x01220079
  4181a4:	00720129 	.word	0x00720129
  4181a8:	00f4004d 	.word	0x00f4004d
  4181ac:	00b300a3 	.word	0x00b300a3
  4181b0:	00ba0115 	.word	0x00ba0115
  4181b4:	01110104 	.word	0x01110104
        case LV_THEME_NONE:
            break;

        case LV_THEME_SCR:
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
  4181b8:	2100      	movs	r1, #0
  4181ba:	4b93      	ldr	r3, [pc, #588]	; (418408 <clear_styles+0x2b0>)
  4181bc:	4798      	blx	r3
            break;
  4181be:	bd38      	pop	{r3, r4, r5, pc}
        case LV_THEME_OBJ:
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
  4181c0:	2100      	movs	r1, #0
  4181c2:	4b91      	ldr	r3, [pc, #580]	; (418408 <clear_styles+0x2b0>)
  4181c4:	4798      	blx	r3
            break;
  4181c6:	bd38      	pop	{r3, r4, r5, pc}
#if LV_USE_CONT
        case LV_THEME_CONT:
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
  4181c8:	2100      	movs	r1, #0
  4181ca:	4b8f      	ldr	r3, [pc, #572]	; (418408 <clear_styles+0x2b0>)
  4181cc:	4798      	blx	r3
            break;
  4181ce:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_BTN
        case LV_THEME_BTN:
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
  4181d0:	2100      	movs	r1, #0
  4181d2:	4b8d      	ldr	r3, [pc, #564]	; (418408 <clear_styles+0x2b0>)
  4181d4:	4798      	blx	r3
            break;
  4181d6:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_BTNMATRIX
        case LV_THEME_BTNMATRIX:
            lv_obj_clean_style_list(obj, LV_BTNMATRIX_PART_BG);
  4181d8:	2100      	movs	r1, #0
  4181da:	4d8b      	ldr	r5, [pc, #556]	; (418408 <clear_styles+0x2b0>)
  4181dc:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_BTNMATRIX_PART_BTN);
  4181de:	2101      	movs	r1, #1
  4181e0:	4620      	mov	r0, r4
  4181e2:	47a8      	blx	r5
            break;
  4181e4:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_KEYBOARD
        case LV_THEME_KEYBOARD:
            lv_obj_clean_style_list(obj, LV_KEYBOARD_PART_BG);
  4181e6:	2100      	movs	r1, #0
  4181e8:	4d87      	ldr	r5, [pc, #540]	; (418408 <clear_styles+0x2b0>)
  4181ea:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_KEYBOARD_PART_BTN);
  4181ec:	2101      	movs	r1, #1
  4181ee:	4620      	mov	r0, r4
  4181f0:	47a8      	blx	r5
            break;
  4181f2:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_BAR
        case LV_THEME_BAR:
            lv_obj_clean_style_list(obj, LV_BAR_PART_BG);
  4181f4:	2100      	movs	r1, #0
  4181f6:	4d84      	ldr	r5, [pc, #528]	; (418408 <clear_styles+0x2b0>)
  4181f8:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_BAR_PART_INDIC);
  4181fa:	2101      	movs	r1, #1
  4181fc:	4620      	mov	r0, r4
  4181fe:	47a8      	blx	r5
            break;
  418200:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_SWITCH
        case LV_THEME_SWITCH:
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_BG);
  418202:	2100      	movs	r1, #0
  418204:	4d80      	ldr	r5, [pc, #512]	; (418408 <clear_styles+0x2b0>)
  418206:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_INDIC);
  418208:	2101      	movs	r1, #1
  41820a:	4620      	mov	r0, r4
  41820c:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_KNOB);
  41820e:	2102      	movs	r1, #2
  418210:	4620      	mov	r0, r4
  418212:	47a8      	blx	r5
            break;
  418214:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_CANVAS
        case LV_THEME_CANVAS:
            lv_obj_clean_style_list(obj, LV_CANVAS_PART_MAIN);
  418216:	2100      	movs	r1, #0
  418218:	4b7b      	ldr	r3, [pc, #492]	; (418408 <clear_styles+0x2b0>)
  41821a:	4798      	blx	r3
            break;
  41821c:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_IMG
        case LV_THEME_IMAGE:
            lv_obj_clean_style_list(obj, LV_IMG_PART_MAIN);
  41821e:	2100      	movs	r1, #0
  418220:	4b79      	ldr	r3, [pc, #484]	; (418408 <clear_styles+0x2b0>)
  418222:	4798      	blx	r3
            break;
  418224:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_IMGBTN
        case LV_THEME_IMGBTN:
            lv_obj_clean_style_list(obj, LV_IMG_PART_MAIN);
  418226:	2100      	movs	r1, #0
  418228:	4b77      	ldr	r3, [pc, #476]	; (418408 <clear_styles+0x2b0>)
  41822a:	4798      	blx	r3
            break;
  41822c:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_LABEL
        case LV_THEME_LABEL:
            lv_obj_clean_style_list(obj, LV_LABEL_PART_MAIN);
  41822e:	2100      	movs	r1, #0
  418230:	4b75      	ldr	r3, [pc, #468]	; (418408 <clear_styles+0x2b0>)
  418232:	4798      	blx	r3
            break;
  418234:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_LINE
        case LV_THEME_LINE:
            lv_obj_clean_style_list(obj, LV_LABEL_PART_MAIN);
  418236:	2100      	movs	r1, #0
  418238:	4b73      	ldr	r3, [pc, #460]	; (418408 <clear_styles+0x2b0>)
  41823a:	4798      	blx	r3
            break;
  41823c:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_ARC
        case LV_THEME_ARC:
            lv_obj_clean_style_list(obj, LV_ARC_PART_BG);
  41823e:	2100      	movs	r1, #0
  418240:	4d71      	ldr	r5, [pc, #452]	; (418408 <clear_styles+0x2b0>)
  418242:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_ARC_PART_INDIC);
  418244:	2101      	movs	r1, #1
  418246:	4620      	mov	r0, r4
  418248:	47a8      	blx	r5
            break;
  41824a:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_SPINNER
        case LV_THEME_SPINNER:
            lv_obj_clean_style_list(obj, LV_SPINNER_PART_BG);
  41824c:	2100      	movs	r1, #0
  41824e:	4d6e      	ldr	r5, [pc, #440]	; (418408 <clear_styles+0x2b0>)
  418250:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SPINNER_PART_INDIC);
  418252:	2101      	movs	r1, #1
  418254:	4620      	mov	r0, r4
  418256:	47a8      	blx	r5
            break;
  418258:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_SLIDER
        case LV_THEME_SLIDER:
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_BG);
  41825a:	2100      	movs	r1, #0
  41825c:	4d6a      	ldr	r5, [pc, #424]	; (418408 <clear_styles+0x2b0>)
  41825e:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_INDIC);
  418260:	2101      	movs	r1, #1
  418262:	4620      	mov	r0, r4
  418264:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_KNOB);
  418266:	2102      	movs	r1, #2
  418268:	4620      	mov	r0, r4
  41826a:	47a8      	blx	r5
            break;
  41826c:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_CHECKBOX
        case LV_THEME_CHECKBOX:
            lv_obj_clean_style_list(obj, LV_CHECKBOX_PART_BG);
  41826e:	2100      	movs	r1, #0
  418270:	4d65      	ldr	r5, [pc, #404]	; (418408 <clear_styles+0x2b0>)
  418272:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CHECKBOX_PART_BULLET);
  418274:	2140      	movs	r1, #64	; 0x40
  418276:	4620      	mov	r0, r4
  418278:	47a8      	blx	r5
            break;
  41827a:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_MSGBOX
        case LV_THEME_MSGBOX:
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BG);
  41827c:	2100      	movs	r1, #0
  41827e:	4b62      	ldr	r3, [pc, #392]	; (418408 <clear_styles+0x2b0>)
  418280:	4798      	blx	r3
            break;
  418282:	bd38      	pop	{r3, r4, r5, pc}

        case LV_THEME_MSGBOX_BTNS:
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BTN_BG);
  418284:	2140      	movs	r1, #64	; 0x40
  418286:	4d60      	ldr	r5, [pc, #384]	; (418408 <clear_styles+0x2b0>)
  418288:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BTN);
  41828a:	2141      	movs	r1, #65	; 0x41
  41828c:	4620      	mov	r0, r4
  41828e:	47a8      	blx	r5
            break;
  418290:	bd38      	pop	{r3, r4, r5, pc}

#endif
#if LV_USE_LED
        case LV_THEME_LED:
            lv_obj_clean_style_list(obj, LV_LED_PART_MAIN);
  418292:	2100      	movs	r1, #0
  418294:	4b5c      	ldr	r3, [pc, #368]	; (418408 <clear_styles+0x2b0>)
  418296:	4798      	blx	r3
            break;
  418298:	bd38      	pop	{r3, r4, r5, pc}
#endif
#if LV_USE_PAGE
        case LV_THEME_PAGE:
            lv_obj_clean_style_list(obj, LV_PAGE_PART_BG);
  41829a:	2100      	movs	r1, #0
  41829c:	4d5a      	ldr	r5, [pc, #360]	; (418408 <clear_styles+0x2b0>)
  41829e:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLABLE);
  4182a0:	2140      	movs	r1, #64	; 0x40
  4182a2:	4620      	mov	r0, r4
  4182a4:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLBAR);
  4182a6:	2101      	movs	r1, #1
  4182a8:	4620      	mov	r0, r4
  4182aa:	47a8      	blx	r5
            break;
  4182ac:	bd38      	pop	{r3, r4, r5, pc}
#endif
#if LV_USE_TABVIEW
        case LV_THEME_TABVIEW:
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_BG);
  4182ae:	2100      	movs	r1, #0
  4182b0:	4d55      	ldr	r5, [pc, #340]	; (418408 <clear_styles+0x2b0>)
  4182b2:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_BG_SCROLLABLE);
  4182b4:	2140      	movs	r1, #64	; 0x40
  4182b6:	4620      	mov	r0, r4
  4182b8:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_TAB_BG);
  4182ba:	2141      	movs	r1, #65	; 0x41
  4182bc:	4620      	mov	r0, r4
  4182be:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_INDIC);
  4182c0:	2143      	movs	r1, #67	; 0x43
  4182c2:	4620      	mov	r0, r4
  4182c4:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_TAB_BTN);
  4182c6:	2142      	movs	r1, #66	; 0x42
  4182c8:	4620      	mov	r0, r4
  4182ca:	47a8      	blx	r5
            break;
  4182cc:	bd38      	pop	{r3, r4, r5, pc}

        case LV_THEME_TABVIEW_PAGE:
            lv_obj_clean_style_list(obj, LV_PAGE_PART_BG);
  4182ce:	2100      	movs	r1, #0
  4182d0:	4d4d      	ldr	r5, [pc, #308]	; (418408 <clear_styles+0x2b0>)
  4182d2:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLABLE);
  4182d4:	2140      	movs	r1, #64	; 0x40
  4182d6:	4620      	mov	r0, r4
  4182d8:	47a8      	blx	r5
            break;
  4182da:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_TILEVIEW
        case LV_THEME_TILEVIEW:
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_BG);
  4182dc:	2100      	movs	r1, #0
  4182de:	4d4a      	ldr	r5, [pc, #296]	; (418408 <clear_styles+0x2b0>)
  4182e0:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_SCROLLBAR);
  4182e2:	2101      	movs	r1, #1
  4182e4:	4620      	mov	r0, r4
  4182e6:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_EDGE_FLASH);
  4182e8:	2102      	movs	r1, #2
  4182ea:	4620      	mov	r0, r4
  4182ec:	47a8      	blx	r5
            break;
  4182ee:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_ROLLER
        case LV_THEME_ROLLER:
            lv_obj_clean_style_list(obj, LV_ROLLER_PART_BG);
  4182f0:	2100      	movs	r1, #0
  4182f2:	4d45      	ldr	r5, [pc, #276]	; (418408 <clear_styles+0x2b0>)
  4182f4:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_ROLLER_PART_SELECTED);
  4182f6:	2103      	movs	r1, #3
  4182f8:	4620      	mov	r0, r4
  4182fa:	47a8      	blx	r5
            break;
  4182fc:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_OBJMASK
        case LV_THEME_OBJMASK:
            lv_obj_clean_style_list(obj, LV_OBJMASK_PART_MAIN);
  4182fe:	2100      	movs	r1, #0
  418300:	4b41      	ldr	r3, [pc, #260]	; (418408 <clear_styles+0x2b0>)
  418302:	4798      	blx	r3
            break;
  418304:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_LIST
        case LV_THEME_LIST:
            lv_obj_clean_style_list(obj, LV_LIST_PART_BG);
  418306:	2100      	movs	r1, #0
  418308:	4d3f      	ldr	r5, [pc, #252]	; (418408 <clear_styles+0x2b0>)
  41830a:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_LIST_PART_SCROLLABLE);
  41830c:	2140      	movs	r1, #64	; 0x40
  41830e:	4620      	mov	r0, r4
  418310:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_LIST_PART_SCROLLBAR);
  418312:	2101      	movs	r1, #1
  418314:	4620      	mov	r0, r4
  418316:	47a8      	blx	r5
            break;
  418318:	bd38      	pop	{r3, r4, r5, pc}

        case LV_THEME_LIST_BTN:
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
  41831a:	2100      	movs	r1, #0
  41831c:	4b3a      	ldr	r3, [pc, #232]	; (418408 <clear_styles+0x2b0>)
  41831e:	4798      	blx	r3
            break;
  418320:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_DROPDOWN
        case LV_THEME_DROPDOWN:
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_MAIN);
  418322:	2100      	movs	r1, #0
  418324:	4d38      	ldr	r5, [pc, #224]	; (418408 <clear_styles+0x2b0>)
  418326:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_LIST);
  418328:	2140      	movs	r1, #64	; 0x40
  41832a:	4620      	mov	r0, r4
  41832c:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_SCROLLBAR);
  41832e:	2141      	movs	r1, #65	; 0x41
  418330:	4620      	mov	r0, r4
  418332:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_SELECTED);
  418334:	2142      	movs	r1, #66	; 0x42
  418336:	4620      	mov	r0, r4
  418338:	47a8      	blx	r5
            break;
  41833a:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_CHART
        case LV_THEME_CHART:
            lv_obj_clean_style_list(obj, LV_CHART_PART_BG);
  41833c:	2100      	movs	r1, #0
  41833e:	4d32      	ldr	r5, [pc, #200]	; (418408 <clear_styles+0x2b0>)
  418340:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CHART_PART_SERIES_BG);
  418342:	2101      	movs	r1, #1
  418344:	4620      	mov	r0, r4
  418346:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CHART_PART_SERIES);
  418348:	2102      	movs	r1, #2
  41834a:	4620      	mov	r0, r4
  41834c:	47a8      	blx	r5
            break;
  41834e:	bd38      	pop	{r3, r4, r5, pc}
#endif
#if LV_USE_TABLE
        case LV_THEME_TABLE:
            lv_obj_clean_style_list(obj, LV_TABLE_PART_BG);
  418350:	2100      	movs	r1, #0
  418352:	4d2d      	ldr	r5, [pc, #180]	; (418408 <clear_styles+0x2b0>)
  418354:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL1);
  418356:	2101      	movs	r1, #1
  418358:	4620      	mov	r0, r4
  41835a:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL2);
  41835c:	2102      	movs	r1, #2
  41835e:	4620      	mov	r0, r4
  418360:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL3);
  418362:	2103      	movs	r1, #3
  418364:	4620      	mov	r0, r4
  418366:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL4);
  418368:	2104      	movs	r1, #4
  41836a:	4620      	mov	r0, r4
  41836c:	47a8      	blx	r5
            break;
  41836e:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_WIN
        case LV_THEME_WIN:
            lv_obj_clean_style_list(obj, LV_WIN_PART_BG);
  418370:	2100      	movs	r1, #0
  418372:	4d25      	ldr	r5, [pc, #148]	; (418408 <clear_styles+0x2b0>)
  418374:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_WIN_PART_SCROLLBAR);
  418376:	2142      	movs	r1, #66	; 0x42
  418378:	4620      	mov	r0, r4
  41837a:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_WIN_PART_CONTENT_SCROLLABLE);
  41837c:	2141      	movs	r1, #65	; 0x41
  41837e:	4620      	mov	r0, r4
  418380:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_WIN_PART_HEADER);
  418382:	2140      	movs	r1, #64	; 0x40
  418384:	4620      	mov	r0, r4
  418386:	47a8      	blx	r5
            break;
  418388:	bd38      	pop	{r3, r4, r5, pc}

        case LV_THEME_WIN_BTN:
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
  41838a:	2100      	movs	r1, #0
  41838c:	4b1e      	ldr	r3, [pc, #120]	; (418408 <clear_styles+0x2b0>)
  41838e:	4798      	blx	r3
            break;
  418390:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_TEXTAREA
        case LV_THEME_TEXTAREA:
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_BG);
  418392:	2100      	movs	r1, #0
  418394:	4d1c      	ldr	r5, [pc, #112]	; (418408 <clear_styles+0x2b0>)
  418396:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_PLACEHOLDER);
  418398:	2104      	movs	r1, #4
  41839a:	4620      	mov	r0, r4
  41839c:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_CURSOR);
  41839e:	2103      	movs	r1, #3
  4183a0:	4620      	mov	r0, r4
  4183a2:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_SCROLLBAR);
  4183a4:	2101      	movs	r1, #1
  4183a6:	4620      	mov	r0, r4
  4183a8:	47a8      	blx	r5
            break;
  4183aa:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_SPINBOX
        case LV_THEME_SPINBOX:
            lv_obj_clean_style_list(obj, LV_SPINBOX_PART_BG);
  4183ac:	2100      	movs	r1, #0
  4183ae:	4d16      	ldr	r5, [pc, #88]	; (418408 <clear_styles+0x2b0>)
  4183b0:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SPINBOX_PART_CURSOR);
  4183b2:	2103      	movs	r1, #3
  4183b4:	4620      	mov	r0, r4
  4183b6:	47a8      	blx	r5
            break;
  4183b8:	bd38      	pop	{r3, r4, r5, pc}

        case LV_THEME_SPINBOX_BTN:
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
  4183ba:	2100      	movs	r1, #0
  4183bc:	4b12      	ldr	r3, [pc, #72]	; (418408 <clear_styles+0x2b0>)
  4183be:	4798      	blx	r3
            break;
  4183c0:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_CALENDAR
        case LV_THEME_CALENDAR:
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_BG);
  4183c2:	2100      	movs	r1, #0
  4183c4:	4d10      	ldr	r5, [pc, #64]	; (418408 <clear_styles+0x2b0>)
  4183c6:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_DATE);
  4183c8:	2103      	movs	r1, #3
  4183ca:	4620      	mov	r0, r4
  4183cc:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_HEADER);
  4183ce:	2101      	movs	r1, #1
  4183d0:	4620      	mov	r0, r4
  4183d2:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_DAY_NAMES);
  4183d4:	2102      	movs	r1, #2
  4183d6:	4620      	mov	r0, r4
  4183d8:	47a8      	blx	r5
            break;
  4183da:	bd38      	pop	{r3, r4, r5, pc}
#endif
#if LV_USE_CPICKER
        case LV_THEME_CPICKER:
            lv_obj_clean_style_list(obj, LV_CPICKER_PART_MAIN);
  4183dc:	2100      	movs	r1, #0
  4183de:	4d0a      	ldr	r5, [pc, #40]	; (418408 <clear_styles+0x2b0>)
  4183e0:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CPICKER_PART_KNOB);
  4183e2:	2101      	movs	r1, #1
  4183e4:	4620      	mov	r0, r4
  4183e6:	47a8      	blx	r5
            break;
  4183e8:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_LINEMETER
        case LV_THEME_LINEMETER:
            lv_obj_clean_style_list(obj, LV_LINEMETER_PART_MAIN);
  4183ea:	2100      	movs	r1, #0
  4183ec:	4b06      	ldr	r3, [pc, #24]	; (418408 <clear_styles+0x2b0>)
  4183ee:	4798      	blx	r3
            break;
  4183f0:	bd38      	pop	{r3, r4, r5, pc}
#endif
#if LV_USE_GAUGE
        case LV_THEME_GAUGE:
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_MAIN);
  4183f2:	2100      	movs	r1, #0
  4183f4:	4d04      	ldr	r5, [pc, #16]	; (418408 <clear_styles+0x2b0>)
  4183f6:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_MAJOR);
  4183f8:	2101      	movs	r1, #1
  4183fa:	4620      	mov	r0, r4
  4183fc:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_NEEDLE);
  4183fe:	2102      	movs	r1, #2
  418400:	4620      	mov	r0, r4
  418402:	47a8      	blx	r5
  418404:	bd38      	pop	{r3, r4, r5, pc}
  418406:	bf00      	nop
  418408:	00405d15 	.word	0x00405d15

0041840c <lv_theme_set_act>:
    act_theme = th;
  41840c:	4b01      	ldr	r3, [pc, #4]	; (418414 <lv_theme_set_act+0x8>)
  41840e:	6018      	str	r0, [r3, #0]
  418410:	4770      	bx	lr
  418412:	bf00      	nop
  418414:	2041482c 	.word	0x2041482c

00418418 <lv_theme_apply>:
{
  418418:	b538      	push	{r3, r4, r5, lr}
  41841a:	4604      	mov	r4, r0
  41841c:	460d      	mov	r5, r1
    clear_styles(obj, name);
  41841e:	4b04      	ldr	r3, [pc, #16]	; (418430 <lv_theme_apply+0x18>)
  418420:	4798      	blx	r3
    apply_theme(act_theme, obj, name);
  418422:	462a      	mov	r2, r5
  418424:	4621      	mov	r1, r4
  418426:	4b03      	ldr	r3, [pc, #12]	; (418434 <lv_theme_apply+0x1c>)
  418428:	6818      	ldr	r0, [r3, #0]
  41842a:	4b03      	ldr	r3, [pc, #12]	; (418438 <lv_theme_apply+0x20>)
  41842c:	4798      	blx	r3
  41842e:	bd38      	pop	{r3, r4, r5, pc}
  418430:	00418159 	.word	0x00418159
  418434:	2041482c 	.word	0x2041482c
  418438:	00418129 	.word	0x00418129

0041843c <lv_theme_get_font_normal>:
    return act_theme->font_normal;
  41843c:	4b01      	ldr	r3, [pc, #4]	; (418444 <lv_theme_get_font_normal+0x8>)
  41843e:	681b      	ldr	r3, [r3, #0]
}
  418440:	6958      	ldr	r0, [r3, #20]
  418442:	4770      	bx	lr
  418444:	2041482c 	.word	0x2041482c

00418448 <theme_apply>:

    return &theme;
}

static void theme_apply(lv_theme_t * th, lv_obj_t * obj, lv_theme_style_t name)
{
  418448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  41844c:	460c      	mov	r4, r1
    LV_UNUSED(th);

    lv_style_list_t * list;

    switch(name) {
  41844e:	3a01      	subs	r2, #1
  418450:	2a27      	cmp	r2, #39	; 0x27
  418452:	d831      	bhi.n	4184b8 <theme_apply+0x70>
  418454:	e8df f012 	tbh	[pc, r2, lsl #1]
  418458:	00370028 	.word	0x00370028
  41845c:	008800ae 	.word	0x008800ae
  418460:	0055004b 	.word	0x0055004b
  418464:	003002af 	.word	0x003002af
  418468:	01fd00fd 	.word	0x01fd00fd
  41846c:	02cb0041 	.word	0x02cb0041
  418470:	02ea01d3 	.word	0x02ea01d3
  418474:	00300030 	.word	0x00300030
  418478:	0030006f 	.word	0x0030006f
  41847c:	00300131 	.word	0x00300131
  418480:	01c901b4 	.word	0x01c901b4
  418484:	011202db 	.word	0x011202db
  418488:	01af0121 	.word	0x01af0121
  41848c:	019a013b 	.word	0x019a013b
  418490:	028500e2 	.word	0x028500e2
  418494:	00d202a0 	.word	0x00d202a0
  418498:	02270098 	.word	0x02270098
  41849c:	017b0160 	.word	0x017b0160
  4184a0:	01850264 	.word	0x01850264
  4184a4:	025a023f 	.word	0x025a023f
        case LV_THEME_NONE:
            break;

        case LV_THEME_SCR:
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
  4184a8:	2100      	movs	r1, #0
  4184aa:	4620      	mov	r0, r4
  4184ac:	4b96      	ldr	r3, [pc, #600]	; (418708 <theme_apply+0x2c0>)
  4184ae:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->scr);
  4184b0:	4b96      	ldr	r3, [pc, #600]	; (41870c <theme_apply+0x2c4>)
  4184b2:	6819      	ldr	r1, [r3, #0]
  4184b4:	4b96      	ldr	r3, [pc, #600]	; (418710 <theme_apply+0x2c8>)
  4184b6:	4798      	blx	r3
#endif
        default:
            break;
    }

    lv_obj_refresh_style(obj, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
  4184b8:	22ff      	movs	r2, #255	; 0xff
  4184ba:	4611      	mov	r1, r2
  4184bc:	4620      	mov	r0, r4
  4184be:	4b95      	ldr	r3, [pc, #596]	; (418714 <theme_apply+0x2cc>)
  4184c0:	4798      	blx	r3
  4184c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
  4184c6:	2100      	movs	r1, #0
  4184c8:	4620      	mov	r0, r4
  4184ca:	4b8f      	ldr	r3, [pc, #572]	; (418708 <theme_apply+0x2c0>)
  4184cc:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->bg);
  4184ce:	4b8f      	ldr	r3, [pc, #572]	; (41870c <theme_apply+0x2c4>)
  4184d0:	6819      	ldr	r1, [r3, #0]
  4184d2:	3104      	adds	r1, #4
  4184d4:	4b8e      	ldr	r3, [pc, #568]	; (418710 <theme_apply+0x2c8>)
  4184d6:	4798      	blx	r3
            break;
  4184d8:	e7ee      	b.n	4184b8 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_CONT_PART_MAIN);
  4184da:	2100      	movs	r1, #0
  4184dc:	4620      	mov	r0, r4
  4184de:	4b8a      	ldr	r3, [pc, #552]	; (418708 <theme_apply+0x2c0>)
  4184e0:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->bg);
  4184e2:	4b8a      	ldr	r3, [pc, #552]	; (41870c <theme_apply+0x2c4>)
  4184e4:	6819      	ldr	r1, [r3, #0]
  4184e6:	3104      	adds	r1, #4
  4184e8:	4b89      	ldr	r3, [pc, #548]	; (418710 <theme_apply+0x2c8>)
  4184ea:	4798      	blx	r3
            break;
  4184ec:	e7e4      	b.n	4184b8 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
  4184ee:	2100      	movs	r1, #0
  4184f0:	4620      	mov	r0, r4
  4184f2:	4b85      	ldr	r3, [pc, #532]	; (418708 <theme_apply+0x2c0>)
  4184f4:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->btn);
  4184f6:	4b85      	ldr	r3, [pc, #532]	; (41870c <theme_apply+0x2c4>)
  4184f8:	6819      	ldr	r1, [r3, #0]
  4184fa:	3110      	adds	r1, #16
  4184fc:	4b84      	ldr	r3, [pc, #528]	; (418710 <theme_apply+0x2c8>)
  4184fe:	4798      	blx	r3
            break;
  418500:	e7da      	b.n	4184b8 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BG);
  418502:	2100      	movs	r1, #0
  418504:	4620      	mov	r0, r4
  418506:	4f80      	ldr	r7, [pc, #512]	; (418708 <theme_apply+0x2c0>)
  418508:	47b8      	blx	r7
  41850a:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  41850c:	4e7f      	ldr	r6, [pc, #508]	; (41870c <theme_apply+0x2c4>)
  41850e:	6831      	ldr	r1, [r6, #0]
  418510:	3104      	adds	r1, #4
  418512:	4d7f      	ldr	r5, [pc, #508]	; (418710 <theme_apply+0x2c8>)
  418514:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
  418516:	6831      	ldr	r1, [r6, #0]
  418518:	3118      	adds	r1, #24
  41851a:	4640      	mov	r0, r8
  41851c:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BTN);
  41851e:	2101      	movs	r1, #1
  418520:	4620      	mov	r0, r4
  418522:	47b8      	blx	r7
  418524:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  418526:	6831      	ldr	r1, [r6, #0]
  418528:	3104      	adds	r1, #4
  41852a:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
  41852c:	6831      	ldr	r1, [r6, #0]
  41852e:	3108      	adds	r1, #8
  418530:	4638      	mov	r0, r7
  418532:	47a8      	blx	r5
            break;
  418534:	e7c0      	b.n	4184b8 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_KEYBOARD_PART_BG);
  418536:	2100      	movs	r1, #0
  418538:	4620      	mov	r0, r4
  41853a:	4f73      	ldr	r7, [pc, #460]	; (418708 <theme_apply+0x2c0>)
  41853c:	47b8      	blx	r7
  41853e:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->scr);
  418540:	4e72      	ldr	r6, [pc, #456]	; (41870c <theme_apply+0x2c4>)
  418542:	6831      	ldr	r1, [r6, #0]
  418544:	4d72      	ldr	r5, [pc, #456]	; (418710 <theme_apply+0x2c8>)
  418546:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->kb_bg);
  418548:	6831      	ldr	r1, [r6, #0]
  41854a:	316c      	adds	r1, #108	; 0x6c
  41854c:	4640      	mov	r0, r8
  41854e:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_KEYBOARD_PART_BTN);
  418550:	2101      	movs	r1, #1
  418552:	4620      	mov	r0, r4
  418554:	47b8      	blx	r7
  418556:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  418558:	6831      	ldr	r1, [r6, #0]
  41855a:	3104      	adds	r1, #4
  41855c:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
  41855e:	6831      	ldr	r1, [r6, #0]
  418560:	3108      	adds	r1, #8
  418562:	4638      	mov	r0, r7
  418564:	47a8      	blx	r5
            break;
  418566:	e7a7      	b.n	4184b8 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_BAR_PART_BG);
  418568:	2100      	movs	r1, #0
  41856a:	4620      	mov	r0, r4
  41856c:	4f66      	ldr	r7, [pc, #408]	; (418708 <theme_apply+0x2c0>)
  41856e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_bg);
  418570:	4e66      	ldr	r6, [pc, #408]	; (41870c <theme_apply+0x2c4>)
  418572:	6831      	ldr	r1, [r6, #0]
  418574:	3128      	adds	r1, #40	; 0x28
  418576:	4d66      	ldr	r5, [pc, #408]	; (418710 <theme_apply+0x2c8>)
  418578:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_BAR_PART_INDIC);
  41857a:	2101      	movs	r1, #1
  41857c:	4620      	mov	r0, r4
  41857e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_indic);
  418580:	6831      	ldr	r1, [r6, #0]
  418582:	312c      	adds	r1, #44	; 0x2c
  418584:	47a8      	blx	r5
            break;
  418586:	e797      	b.n	4184b8 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_BG);
  418588:	2100      	movs	r1, #0
  41858a:	4620      	mov	r0, r4
  41858c:	4f5e      	ldr	r7, [pc, #376]	; (418708 <theme_apply+0x2c0>)
  41858e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_bg);
  418590:	4e5e      	ldr	r6, [pc, #376]	; (41870c <theme_apply+0x2c4>)
  418592:	6831      	ldr	r1, [r6, #0]
  418594:	3128      	adds	r1, #40	; 0x28
  418596:	4d5e      	ldr	r5, [pc, #376]	; (418710 <theme_apply+0x2c8>)
  418598:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_INDIC);
  41859a:	2101      	movs	r1, #1
  41859c:	4620      	mov	r0, r4
  41859e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_indic);
  4185a0:	6831      	ldr	r1, [r6, #0]
  4185a2:	312c      	adds	r1, #44	; 0x2c
  4185a4:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_KNOB);
  4185a6:	2102      	movs	r1, #2
  4185a8:	4620      	mov	r0, r4
  4185aa:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sw_knob);
  4185ac:	6831      	ldr	r1, [r6, #0]
  4185ae:	31a0      	adds	r1, #160	; 0xa0
  4185b0:	47a8      	blx	r5
            break;
  4185b2:	e781      	b.n	4184b8 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_ARC_PART_BG);
  4185b4:	2100      	movs	r1, #0
  4185b6:	4620      	mov	r0, r4
  4185b8:	4f53      	ldr	r7, [pc, #332]	; (418708 <theme_apply+0x2c0>)
  4185ba:	47b8      	blx	r7
  4185bc:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  4185be:	4e53      	ldr	r6, [pc, #332]	; (41870c <theme_apply+0x2c4>)
  4185c0:	6831      	ldr	r1, [r6, #0]
  4185c2:	3104      	adds	r1, #4
  4185c4:	4d52      	ldr	r5, [pc, #328]	; (418710 <theme_apply+0x2c8>)
  4185c6:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->arc_bg);
  4185c8:	6831      	ldr	r1, [r6, #0]
  4185ca:	3120      	adds	r1, #32
  4185cc:	4640      	mov	r0, r8
  4185ce:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_ARC_PART_INDIC);
  4185d0:	2101      	movs	r1, #1
  4185d2:	4620      	mov	r0, r4
  4185d4:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->arc_indic);
  4185d6:	6831      	ldr	r1, [r6, #0]
  4185d8:	311c      	adds	r1, #28
  4185da:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_ARC_PART_KNOB);
  4185dc:	2102      	movs	r1, #2
  4185de:	4620      	mov	r0, r4
  4185e0:	47b8      	blx	r7
  4185e2:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  4185e4:	6831      	ldr	r1, [r6, #0]
  4185e6:	3104      	adds	r1, #4
  4185e8:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
  4185ea:	6831      	ldr	r1, [r6, #0]
  4185ec:	3108      	adds	r1, #8
  4185ee:	4638      	mov	r0, r7
  4185f0:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->arc_knob);
  4185f2:	6831      	ldr	r1, [r6, #0]
  4185f4:	3124      	adds	r1, #36	; 0x24
  4185f6:	4638      	mov	r0, r7
  4185f8:	47a8      	blx	r5
            break;
  4185fa:	e75d      	b.n	4184b8 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_SPINNER_PART_BG);
  4185fc:	2100      	movs	r1, #0
  4185fe:	4620      	mov	r0, r4
  418600:	4f41      	ldr	r7, [pc, #260]	; (418708 <theme_apply+0x2c0>)
  418602:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->arc_bg);
  418604:	4e41      	ldr	r6, [pc, #260]	; (41870c <theme_apply+0x2c4>)
  418606:	6831      	ldr	r1, [r6, #0]
  418608:	3120      	adds	r1, #32
  41860a:	4d41      	ldr	r5, [pc, #260]	; (418710 <theme_apply+0x2c8>)
  41860c:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SPINNER_PART_INDIC);
  41860e:	2101      	movs	r1, #1
  418610:	4620      	mov	r0, r4
  418612:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->arc_indic);
  418614:	6831      	ldr	r1, [r6, #0]
  418616:	311c      	adds	r1, #28
  418618:	47a8      	blx	r5
            break;
  41861a:	e74d      	b.n	4184b8 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_BG);
  41861c:	2100      	movs	r1, #0
  41861e:	4620      	mov	r0, r4
  418620:	4f39      	ldr	r7, [pc, #228]	; (418708 <theme_apply+0x2c0>)
  418622:	47b8      	blx	r7
  418624:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bar_bg);
  418626:	4e39      	ldr	r6, [pc, #228]	; (41870c <theme_apply+0x2c4>)
  418628:	6831      	ldr	r1, [r6, #0]
  41862a:	3128      	adds	r1, #40	; 0x28
  41862c:	4d38      	ldr	r5, [pc, #224]	; (418710 <theme_apply+0x2c8>)
  41862e:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->slider_bg);
  418630:	6831      	ldr	r1, [r6, #0]
  418632:	3198      	adds	r1, #152	; 0x98
  418634:	4640      	mov	r0, r8
  418636:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_INDIC);
  418638:	2101      	movs	r1, #1
  41863a:	4620      	mov	r0, r4
  41863c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_indic);
  41863e:	6831      	ldr	r1, [r6, #0]
  418640:	312c      	adds	r1, #44	; 0x2c
  418642:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_KNOB);
  418644:	2102      	movs	r1, #2
  418646:	4620      	mov	r0, r4
  418648:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->slider_knob);
  41864a:	6831      	ldr	r1, [r6, #0]
  41864c:	3194      	adds	r1, #148	; 0x94
  41864e:	47a8      	blx	r5
            break;
  418650:	e732      	b.n	4184b8 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_CHECKBOX_PART_BG);
  418652:	2100      	movs	r1, #0
  418654:	4620      	mov	r0, r4
  418656:	4f2c      	ldr	r7, [pc, #176]	; (418708 <theme_apply+0x2c0>)
  418658:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->cb_bg);
  41865a:	4e2c      	ldr	r6, [pc, #176]	; (41870c <theme_apply+0x2c4>)
  41865c:	6831      	ldr	r1, [r6, #0]
  41865e:	3150      	adds	r1, #80	; 0x50
  418660:	4d2b      	ldr	r5, [pc, #172]	; (418710 <theme_apply+0x2c8>)
  418662:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CHECKBOX_PART_BULLET);
  418664:	2140      	movs	r1, #64	; 0x40
  418666:	4620      	mov	r0, r4
  418668:	47b8      	blx	r7
  41866a:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->btn);
  41866c:	6831      	ldr	r1, [r6, #0]
  41866e:	3110      	adds	r1, #16
  418670:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->cb_bullet);
  418672:	6831      	ldr	r1, [r6, #0]
  418674:	3154      	adds	r1, #84	; 0x54
  418676:	4638      	mov	r0, r7
  418678:	47a8      	blx	r5
            break;
  41867a:	e71d      	b.n	4184b8 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BG);
  41867c:	2100      	movs	r1, #0
  41867e:	4620      	mov	r0, r4
  418680:	4b21      	ldr	r3, [pc, #132]	; (418708 <theme_apply+0x2c0>)
  418682:	4798      	blx	r3
  418684:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  418686:	4e21      	ldr	r6, [pc, #132]	; (41870c <theme_apply+0x2c4>)
  418688:	6831      	ldr	r1, [r6, #0]
  41868a:	3104      	adds	r1, #4
  41868c:	4d20      	ldr	r5, [pc, #128]	; (418710 <theme_apply+0x2c8>)
  41868e:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->mbox_bg);
  418690:	6831      	ldr	r1, [r6, #0]
  418692:	3180      	adds	r1, #128	; 0x80
  418694:	4638      	mov	r0, r7
  418696:	47a8      	blx	r5
            break;
  418698:	e70e      	b.n	4184b8 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BTN_BG);
  41869a:	2140      	movs	r1, #64	; 0x40
  41869c:	4620      	mov	r0, r4
  41869e:	4f1a      	ldr	r7, [pc, #104]	; (418708 <theme_apply+0x2c0>)
  4186a0:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->pad_small);
  4186a2:	4e1a      	ldr	r6, [pc, #104]	; (41870c <theme_apply+0x2c4>)
  4186a4:	6831      	ldr	r1, [r6, #0]
  4186a6:	3118      	adds	r1, #24
  4186a8:	4d19      	ldr	r5, [pc, #100]	; (418710 <theme_apply+0x2c8>)
  4186aa:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BTN);
  4186ac:	2141      	movs	r1, #65	; 0x41
  4186ae:	4620      	mov	r0, r4
  4186b0:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->btn);
  4186b2:	6831      	ldr	r1, [r6, #0]
  4186b4:	3110      	adds	r1, #16
  4186b6:	47a8      	blx	r5
            break;
  4186b8:	e6fe      	b.n	4184b8 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_LED_PART_MAIN);
  4186ba:	2100      	movs	r1, #0
  4186bc:	4620      	mov	r0, r4
  4186be:	4b12      	ldr	r3, [pc, #72]	; (418708 <theme_apply+0x2c0>)
  4186c0:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->led);
  4186c2:	4b12      	ldr	r3, [pc, #72]	; (41870c <theme_apply+0x2c4>)
  4186c4:	6819      	ldr	r1, [r3, #0]
  4186c6:	3170      	adds	r1, #112	; 0x70
  4186c8:	4b11      	ldr	r3, [pc, #68]	; (418710 <theme_apply+0x2c8>)
  4186ca:	4798      	blx	r3
            break;
  4186cc:	e6f4      	b.n	4184b8 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_BG);
  4186ce:	2100      	movs	r1, #0
  4186d0:	4620      	mov	r0, r4
  4186d2:	4f0d      	ldr	r7, [pc, #52]	; (418708 <theme_apply+0x2c0>)
  4186d4:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bg);
  4186d6:	4e0d      	ldr	r6, [pc, #52]	; (41870c <theme_apply+0x2c4>)
  4186d8:	6831      	ldr	r1, [r6, #0]
  4186da:	3104      	adds	r1, #4
  4186dc:	4d0c      	ldr	r5, [pc, #48]	; (418710 <theme_apply+0x2c8>)
  4186de:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLABLE);
  4186e0:	2140      	movs	r1, #64	; 0x40
  4186e2:	4620      	mov	r0, r4
  4186e4:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->pad_inner);
  4186e6:	6831      	ldr	r1, [r6, #0]
  4186e8:	3114      	adds	r1, #20
  4186ea:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLBAR);
  4186ec:	2101      	movs	r1, #1
  4186ee:	4620      	mov	r0, r4
  4186f0:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  4186f2:	6831      	ldr	r1, [r6, #0]
  4186f4:	3184      	adds	r1, #132	; 0x84
  4186f6:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_EDGE_FLASH);
  4186f8:	2102      	movs	r1, #2
  4186fa:	4620      	mov	r0, r4
  4186fc:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->edge_flash);
  4186fe:	6831      	ldr	r1, [r6, #0]
  418700:	3188      	adds	r1, #136	; 0x88
  418702:	47a8      	blx	r5
            break;
  418704:	e6d8      	b.n	4184b8 <theme_apply+0x70>
  418706:	bf00      	nop
  418708:	00405c4d 	.word	0x00405c4d
  41870c:	20414834 	.word	0x20414834
  418710:	00409f65 	.word	0x00409f65
  418714:	004078a1 	.word	0x004078a1
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_BG);
  418718:	2100      	movs	r1, #0
  41871a:	4620      	mov	r0, r4
  41871c:	4f9b      	ldr	r7, [pc, #620]	; (41898c <theme_apply+0x544>)
  41871e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->scr);
  418720:	4e9b      	ldr	r6, [pc, #620]	; (418990 <theme_apply+0x548>)
  418722:	6831      	ldr	r1, [r6, #0]
  418724:	4d9b      	ldr	r5, [pc, #620]	; (418994 <theme_apply+0x54c>)
  418726:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_TAB_BG);
  418728:	2141      	movs	r1, #65	; 0x41
  41872a:	4620      	mov	r0, r4
  41872c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_btns_bg);
  41872e:	6831      	ldr	r1, [r6, #0]
  418730:	31ac      	adds	r1, #172	; 0xac
  418732:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_INDIC);
  418734:	2143      	movs	r1, #67	; 0x43
  418736:	4620      	mov	r0, r4
  418738:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_indic);
  41873a:	6831      	ldr	r1, [r6, #0]
  41873c:	31b0      	adds	r1, #176	; 0xb0
  41873e:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_TAB_BTN);
  418740:	2142      	movs	r1, #66	; 0x42
  418742:	4620      	mov	r0, r4
  418744:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_btns);
  418746:	6831      	ldr	r1, [r6, #0]
  418748:	31a8      	adds	r1, #168	; 0xa8
  41874a:	47a8      	blx	r5
            break;
  41874c:	e6b4      	b.n	4184b8 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLABLE);
  41874e:	2140      	movs	r1, #64	; 0x40
  418750:	4620      	mov	r0, r4
  418752:	4b8e      	ldr	r3, [pc, #568]	; (41898c <theme_apply+0x544>)
  418754:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->tabview_page_scrl);
  418756:	4b8e      	ldr	r3, [pc, #568]	; (418990 <theme_apply+0x548>)
  418758:	6819      	ldr	r1, [r3, #0]
  41875a:	31b4      	adds	r1, #180	; 0xb4
  41875c:	4b8d      	ldr	r3, [pc, #564]	; (418994 <theme_apply+0x54c>)
  41875e:	4798      	blx	r3
            break;
  418760:	e6aa      	b.n	4184b8 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_BG);
  418762:	2100      	movs	r1, #0
  418764:	4620      	mov	r0, r4
  418766:	4f89      	ldr	r7, [pc, #548]	; (41898c <theme_apply+0x544>)
  418768:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->scr);
  41876a:	4e89      	ldr	r6, [pc, #548]	; (418990 <theme_apply+0x548>)
  41876c:	6831      	ldr	r1, [r6, #0]
  41876e:	4d89      	ldr	r5, [pc, #548]	; (418994 <theme_apply+0x54c>)
  418770:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_SCROLLBAR);
  418772:	2101      	movs	r1, #1
  418774:	4620      	mov	r0, r4
  418776:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  418778:	6831      	ldr	r1, [r6, #0]
  41877a:	3184      	adds	r1, #132	; 0x84
  41877c:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_EDGE_FLASH);
  41877e:	2102      	movs	r1, #2
  418780:	4620      	mov	r0, r4
  418782:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->edge_flash);
  418784:	6831      	ldr	r1, [r6, #0]
  418786:	3188      	adds	r1, #136	; 0x88
  418788:	47a8      	blx	r5
            break;
  41878a:	e695      	b.n	4184b8 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_ROLLER_PART_BG);
  41878c:	2100      	movs	r1, #0
  41878e:	4620      	mov	r0, r4
  418790:	4f7e      	ldr	r7, [pc, #504]	; (41898c <theme_apply+0x544>)
  418792:	47b8      	blx	r7
  418794:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  418796:	4e7e      	ldr	r6, [pc, #504]	; (418990 <theme_apply+0x548>)
  418798:	6831      	ldr	r1, [r6, #0]
  41879a:	3104      	adds	r1, #4
  41879c:	4d7d      	ldr	r5, [pc, #500]	; (418994 <theme_apply+0x54c>)
  41879e:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->roller_bg);
  4187a0:	6831      	ldr	r1, [r6, #0]
  4187a2:	318c      	adds	r1, #140	; 0x8c
  4187a4:	4640      	mov	r0, r8
  4187a6:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_ROLLER_PART_SELECTED);
  4187a8:	2103      	movs	r1, #3
  4187aa:	4620      	mov	r0, r4
  4187ac:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->roller_sel);
  4187ae:	6831      	ldr	r1, [r6, #0]
  4187b0:	3190      	adds	r1, #144	; 0x90
  4187b2:	47a8      	blx	r5
            break;
  4187b4:	e680      	b.n	4184b8 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_OBJMASK_PART_MAIN);
  4187b6:	2100      	movs	r1, #0
  4187b8:	4620      	mov	r0, r4
  4187ba:	4b74      	ldr	r3, [pc, #464]	; (41898c <theme_apply+0x544>)
  4187bc:	4798      	blx	r3
            break;
  4187be:	e67b      	b.n	4184b8 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_LIST_PART_BG);
  4187c0:	2100      	movs	r1, #0
  4187c2:	4620      	mov	r0, r4
  4187c4:	4f71      	ldr	r7, [pc, #452]	; (41898c <theme_apply+0x544>)
  4187c6:	47b8      	blx	r7
  4187c8:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  4187ca:	4e71      	ldr	r6, [pc, #452]	; (418990 <theme_apply+0x548>)
  4187cc:	6831      	ldr	r1, [r6, #0]
  4187ce:	3104      	adds	r1, #4
  4187d0:	4d70      	ldr	r5, [pc, #448]	; (418994 <theme_apply+0x54c>)
  4187d2:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->list_bg);
  4187d4:	6831      	ldr	r1, [r6, #0]
  4187d6:	3178      	adds	r1, #120	; 0x78
  4187d8:	4640      	mov	r0, r8
  4187da:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_LIST_PART_SCROLLBAR);
  4187dc:	2101      	movs	r1, #1
  4187de:	4620      	mov	r0, r4
  4187e0:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  4187e2:	6831      	ldr	r1, [r6, #0]
  4187e4:	3184      	adds	r1, #132	; 0x84
  4187e6:	47a8      	blx	r5
            break;
  4187e8:	e666      	b.n	4184b8 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
  4187ea:	2100      	movs	r1, #0
  4187ec:	4620      	mov	r0, r4
  4187ee:	4b67      	ldr	r3, [pc, #412]	; (41898c <theme_apply+0x544>)
  4187f0:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->list_btn);
  4187f2:	4b67      	ldr	r3, [pc, #412]	; (418990 <theme_apply+0x548>)
  4187f4:	6819      	ldr	r1, [r3, #0]
  4187f6:	317c      	adds	r1, #124	; 0x7c
  4187f8:	4b66      	ldr	r3, [pc, #408]	; (418994 <theme_apply+0x54c>)
  4187fa:	4798      	blx	r3
            break;
  4187fc:	e65c      	b.n	4184b8 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_MAIN);
  4187fe:	2100      	movs	r1, #0
  418800:	4620      	mov	r0, r4
  418802:	4f62      	ldr	r7, [pc, #392]	; (41898c <theme_apply+0x544>)
  418804:	47b8      	blx	r7
  418806:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  418808:	4e61      	ldr	r6, [pc, #388]	; (418990 <theme_apply+0x548>)
  41880a:	6831      	ldr	r1, [r6, #0]
  41880c:	3104      	adds	r1, #4
  41880e:	4d61      	ldr	r5, [pc, #388]	; (418994 <theme_apply+0x54c>)
  418810:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
  418812:	6831      	ldr	r1, [r6, #0]
  418814:	3108      	adds	r1, #8
  418816:	4640      	mov	r0, r8
  418818:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
  41881a:	6831      	ldr	r1, [r6, #0]
  41881c:	3118      	adds	r1, #24
  41881e:	4640      	mov	r0, r8
  418820:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_LIST);
  418822:	2140      	movs	r1, #64	; 0x40
  418824:	4620      	mov	r0, r4
  418826:	47b8      	blx	r7
  418828:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  41882a:	6831      	ldr	r1, [r6, #0]
  41882c:	3104      	adds	r1, #4
  41882e:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->ddlist_page);
  418830:	6831      	ldr	r1, [r6, #0]
  418832:	3158      	adds	r1, #88	; 0x58
  418834:	4640      	mov	r0, r8
  418836:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_SCROLLBAR);
  418838:	2141      	movs	r1, #65	; 0x41
  41883a:	4620      	mov	r0, r4
  41883c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  41883e:	6831      	ldr	r1, [r6, #0]
  418840:	3184      	adds	r1, #132	; 0x84
  418842:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_SELECTED);
  418844:	2142      	movs	r1, #66	; 0x42
  418846:	4620      	mov	r0, r4
  418848:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->ddlist_sel);
  41884a:	6831      	ldr	r1, [r6, #0]
  41884c:	315c      	adds	r1, #92	; 0x5c
  41884e:	47a8      	blx	r5
            break;
  418850:	e632      	b.n	4184b8 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_CHART_PART_BG);
  418852:	2100      	movs	r1, #0
  418854:	4620      	mov	r0, r4
  418856:	4f4d      	ldr	r7, [pc, #308]	; (41898c <theme_apply+0x544>)
  418858:	47b8      	blx	r7
  41885a:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  41885c:	4e4c      	ldr	r6, [pc, #304]	; (418990 <theme_apply+0x548>)
  41885e:	6831      	ldr	r1, [r6, #0]
  418860:	3104      	adds	r1, #4
  418862:	4d4c      	ldr	r5, [pc, #304]	; (418994 <theme_apply+0x54c>)
  418864:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->chart_bg);
  418866:	6831      	ldr	r1, [r6, #0]
  418868:	3144      	adds	r1, #68	; 0x44
  41886a:	4640      	mov	r0, r8
  41886c:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
  41886e:	6831      	ldr	r1, [r6, #0]
  418870:	3118      	adds	r1, #24
  418872:	4640      	mov	r0, r8
  418874:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CHART_PART_SERIES_BG);
  418876:	2101      	movs	r1, #1
  418878:	4620      	mov	r0, r4
  41887a:	47b8      	blx	r7
  41887c:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->pad_small);
  41887e:	6831      	ldr	r1, [r6, #0]
  418880:	3118      	adds	r1, #24
  418882:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->chart_series_bg);
  418884:	6831      	ldr	r1, [r6, #0]
  418886:	3148      	adds	r1, #72	; 0x48
  418888:	4640      	mov	r0, r8
  41888a:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CHART_PART_CURSOR);
  41888c:	2103      	movs	r1, #3
  41888e:	4620      	mov	r0, r4
  418890:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->chart_series_bg);
  418892:	6831      	ldr	r1, [r6, #0]
  418894:	3148      	adds	r1, #72	; 0x48
  418896:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CHART_PART_SERIES);
  418898:	2102      	movs	r1, #2
  41889a:	4620      	mov	r0, r4
  41889c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->chart_series);
  41889e:	6831      	ldr	r1, [r6, #0]
  4188a0:	314c      	adds	r1, #76	; 0x4c
  4188a2:	47a8      	blx	r5
            break;
  4188a4:	e608      	b.n	4184b8 <theme_apply+0x70>
                list = lv_obj_get_style_list(obj, LV_TABLE_PART_BG);
  4188a6:	2100      	movs	r1, #0
  4188a8:	4620      	mov	r0, r4
  4188aa:	4b38      	ldr	r3, [pc, #224]	; (41898c <theme_apply+0x544>)
  4188ac:	4798      	blx	r3
                _lv_style_list_add_style(list, &styles->bg);
  4188ae:	4b38      	ldr	r3, [pc, #224]	; (418990 <theme_apply+0x548>)
  4188b0:	6819      	ldr	r1, [r3, #0]
  4188b2:	3104      	adds	r1, #4
  4188b4:	4b37      	ldr	r3, [pc, #220]	; (418994 <theme_apply+0x54c>)
  4188b6:	4798      	blx	r3
                int idx = 1; /* start value should be 1, not zero, since cell styles
  4188b8:	2501      	movs	r5, #1
                for(; idx <= LV_TABLE_CELL_STYLE_CNT; idx ++) {
  4188ba:	e009      	b.n	4188d0 <theme_apply+0x488>
                    list = lv_obj_get_style_list(obj, idx);
  4188bc:	b2e9      	uxtb	r1, r5
  4188be:	4620      	mov	r0, r4
  4188c0:	4b32      	ldr	r3, [pc, #200]	; (41898c <theme_apply+0x544>)
  4188c2:	4798      	blx	r3
                    _lv_style_list_add_style(list, &styles->table_cell);
  4188c4:	4b32      	ldr	r3, [pc, #200]	; (418990 <theme_apply+0x548>)
  4188c6:	6819      	ldr	r1, [r3, #0]
  4188c8:	31a4      	adds	r1, #164	; 0xa4
  4188ca:	4b32      	ldr	r3, [pc, #200]	; (418994 <theme_apply+0x54c>)
  4188cc:	4798      	blx	r3
                for(; idx <= LV_TABLE_CELL_STYLE_CNT; idx ++) {
  4188ce:	3501      	adds	r5, #1
  4188d0:	2d04      	cmp	r5, #4
  4188d2:	ddf3      	ble.n	4188bc <theme_apply+0x474>
  4188d4:	e5f0      	b.n	4184b8 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_WIN_PART_BG);
  4188d6:	2100      	movs	r1, #0
  4188d8:	4620      	mov	r0, r4
  4188da:	4f2c      	ldr	r7, [pc, #176]	; (41898c <theme_apply+0x544>)
  4188dc:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->scr);
  4188de:	4e2c      	ldr	r6, [pc, #176]	; (418990 <theme_apply+0x548>)
  4188e0:	6831      	ldr	r1, [r6, #0]
  4188e2:	4d2c      	ldr	r5, [pc, #176]	; (418994 <theme_apply+0x54c>)
  4188e4:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_WIN_PART_SCROLLBAR);
  4188e6:	2142      	movs	r1, #66	; 0x42
  4188e8:	4620      	mov	r0, r4
  4188ea:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  4188ec:	6831      	ldr	r1, [r6, #0]
  4188ee:	3184      	adds	r1, #132	; 0x84
  4188f0:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_WIN_PART_CONTENT_SCROLLABLE);
  4188f2:	2141      	movs	r1, #65	; 0x41
  4188f4:	4620      	mov	r0, r4
  4188f6:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_page_scrl);
  4188f8:	6831      	ldr	r1, [r6, #0]
  4188fa:	31b4      	adds	r1, #180	; 0xb4
  4188fc:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_WIN_PART_HEADER);
  4188fe:	2140      	movs	r1, #64	; 0x40
  418900:	4620      	mov	r0, r4
  418902:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_btns_bg);
  418904:	6831      	ldr	r1, [r6, #0]
  418906:	31ac      	adds	r1, #172	; 0xac
  418908:	47a8      	blx	r5
            break;
  41890a:	e5d5      	b.n	4184b8 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
  41890c:	2100      	movs	r1, #0
  41890e:	4620      	mov	r0, r4
  418910:	4b1e      	ldr	r3, [pc, #120]	; (41898c <theme_apply+0x544>)
  418912:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->tabview_btns);
  418914:	4b1e      	ldr	r3, [pc, #120]	; (418990 <theme_apply+0x548>)
  418916:	6819      	ldr	r1, [r3, #0]
  418918:	31a8      	adds	r1, #168	; 0xa8
  41891a:	4b1e      	ldr	r3, [pc, #120]	; (418994 <theme_apply+0x54c>)
  41891c:	4798      	blx	r3
            break;
  41891e:	e5cb      	b.n	4184b8 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_BG);
  418920:	2100      	movs	r1, #0
  418922:	4620      	mov	r0, r4
  418924:	4f19      	ldr	r7, [pc, #100]	; (41898c <theme_apply+0x544>)
  418926:	47b8      	blx	r7
  418928:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  41892a:	4e19      	ldr	r6, [pc, #100]	; (418990 <theme_apply+0x548>)
  41892c:	6831      	ldr	r1, [r6, #0]
  41892e:	3104      	adds	r1, #4
  418930:	4d18      	ldr	r5, [pc, #96]	; (418994 <theme_apply+0x54c>)
  418932:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
  418934:	6831      	ldr	r1, [r6, #0]
  418936:	3118      	adds	r1, #24
  418938:	4640      	mov	r0, r8
  41893a:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_PLACEHOLDER);
  41893c:	2104      	movs	r1, #4
  41893e:	4620      	mov	r0, r4
  418940:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->ta_placeholder);
  418942:	6831      	ldr	r1, [r6, #0]
  418944:	31bc      	adds	r1, #188	; 0xbc
  418946:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_CURSOR);
  418948:	2103      	movs	r1, #3
  41894a:	4620      	mov	r0, r4
  41894c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->ta_cursor);
  41894e:	6831      	ldr	r1, [r6, #0]
  418950:	31b8      	adds	r1, #184	; 0xb8
  418952:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_SCROLLBAR);
  418954:	2101      	movs	r1, #1
  418956:	4620      	mov	r0, r4
  418958:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  41895a:	6831      	ldr	r1, [r6, #0]
  41895c:	3184      	adds	r1, #132	; 0x84
  41895e:	47a8      	blx	r5
            break;
  418960:	e5aa      	b.n	4184b8 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_SPINBOX_PART_BG);
  418962:	2100      	movs	r1, #0
  418964:	4620      	mov	r0, r4
  418966:	4f09      	ldr	r7, [pc, #36]	; (41898c <theme_apply+0x544>)
  418968:	47b8      	blx	r7
  41896a:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  41896c:	4e08      	ldr	r6, [pc, #32]	; (418990 <theme_apply+0x548>)
  41896e:	6831      	ldr	r1, [r6, #0]
  418970:	3104      	adds	r1, #4
  418972:	4d08      	ldr	r5, [pc, #32]	; (418994 <theme_apply+0x54c>)
  418974:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
  418976:	6831      	ldr	r1, [r6, #0]
  418978:	3118      	adds	r1, #24
  41897a:	4640      	mov	r0, r8
  41897c:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SPINBOX_PART_CURSOR);
  41897e:	2103      	movs	r1, #3
  418980:	4620      	mov	r0, r4
  418982:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->spinbox_cursor);
  418984:	6831      	ldr	r1, [r6, #0]
  418986:	319c      	adds	r1, #156	; 0x9c
  418988:	47a8      	blx	r5
            break;
  41898a:	e595      	b.n	4184b8 <theme_apply+0x70>
  41898c:	00405c4d 	.word	0x00405c4d
  418990:	20414834 	.word	0x20414834
  418994:	00409f65 	.word	0x00409f65
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
  418998:	2100      	movs	r1, #0
  41899a:	4620      	mov	r0, r4
  41899c:	4b31      	ldr	r3, [pc, #196]	; (418a64 <theme_apply+0x61c>)
  41899e:	4798      	blx	r3
  4189a0:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  4189a2:	4e31      	ldr	r6, [pc, #196]	; (418a68 <theme_apply+0x620>)
  4189a4:	6831      	ldr	r1, [r6, #0]
  4189a6:	3104      	adds	r1, #4
  4189a8:	4d30      	ldr	r5, [pc, #192]	; (418a6c <theme_apply+0x624>)
  4189aa:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
  4189ac:	6831      	ldr	r1, [r6, #0]
  4189ae:	3108      	adds	r1, #8
  4189b0:	4638      	mov	r0, r7
  4189b2:	47a8      	blx	r5
            break;
  4189b4:	e580      	b.n	4184b8 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_BG);
  4189b6:	2100      	movs	r1, #0
  4189b8:	4620      	mov	r0, r4
  4189ba:	4f2a      	ldr	r7, [pc, #168]	; (418a64 <theme_apply+0x61c>)
  4189bc:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bg);
  4189be:	4e2a      	ldr	r6, [pc, #168]	; (418a68 <theme_apply+0x620>)
  4189c0:	6831      	ldr	r1, [r6, #0]
  4189c2:	3104      	adds	r1, #4
  4189c4:	4d29      	ldr	r5, [pc, #164]	; (418a6c <theme_apply+0x624>)
  4189c6:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_DATE);
  4189c8:	2103      	movs	r1, #3
  4189ca:	4620      	mov	r0, r4
  4189cc:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->calendar_date_nums);
  4189ce:	6831      	ldr	r1, [r6, #0]
  4189d0:	3130      	adds	r1, #48	; 0x30
  4189d2:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_HEADER);
  4189d4:	2101      	movs	r1, #1
  4189d6:	4620      	mov	r0, r4
  4189d8:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->calendar_header);
  4189da:	6831      	ldr	r1, [r6, #0]
  4189dc:	3134      	adds	r1, #52	; 0x34
  4189de:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_DAY_NAMES);
  4189e0:	2102      	movs	r1, #2
  4189e2:	4620      	mov	r0, r4
  4189e4:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->calendar_daynames);
  4189e6:	6831      	ldr	r1, [r6, #0]
  4189e8:	3138      	adds	r1, #56	; 0x38
  4189ea:	47a8      	blx	r5
            break;
  4189ec:	e564      	b.n	4184b8 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_CPICKER_PART_MAIN);
  4189ee:	2100      	movs	r1, #0
  4189f0:	4620      	mov	r0, r4
  4189f2:	4f1c      	ldr	r7, [pc, #112]	; (418a64 <theme_apply+0x61c>)
  4189f4:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->cpicker_bg);
  4189f6:	4e1c      	ldr	r6, [pc, #112]	; (418a68 <theme_apply+0x620>)
  4189f8:	6831      	ldr	r1, [r6, #0]
  4189fa:	313c      	adds	r1, #60	; 0x3c
  4189fc:	4d1b      	ldr	r5, [pc, #108]	; (418a6c <theme_apply+0x624>)
  4189fe:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CPICKER_PART_KNOB);
  418a00:	2101      	movs	r1, #1
  418a02:	4620      	mov	r0, r4
  418a04:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->cpicker_indic);
  418a06:	6831      	ldr	r1, [r6, #0]
  418a08:	3140      	adds	r1, #64	; 0x40
  418a0a:	47a8      	blx	r5
            break;
  418a0c:	e554      	b.n	4184b8 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_LINEMETER_PART_MAIN);
  418a0e:	2100      	movs	r1, #0
  418a10:	4620      	mov	r0, r4
  418a12:	4b14      	ldr	r3, [pc, #80]	; (418a64 <theme_apply+0x61c>)
  418a14:	4798      	blx	r3
  418a16:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  418a18:	4e13      	ldr	r6, [pc, #76]	; (418a68 <theme_apply+0x620>)
  418a1a:	6831      	ldr	r1, [r6, #0]
  418a1c:	3104      	adds	r1, #4
  418a1e:	4d13      	ldr	r5, [pc, #76]	; (418a6c <theme_apply+0x624>)
  418a20:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->lmeter);
  418a22:	6831      	ldr	r1, [r6, #0]
  418a24:	3174      	adds	r1, #116	; 0x74
  418a26:	4638      	mov	r0, r7
  418a28:	47a8      	blx	r5
            break;
  418a2a:	e545      	b.n	4184b8 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_MAIN);
  418a2c:	2100      	movs	r1, #0
  418a2e:	4620      	mov	r0, r4
  418a30:	4f0c      	ldr	r7, [pc, #48]	; (418a64 <theme_apply+0x61c>)
  418a32:	47b8      	blx	r7
  418a34:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  418a36:	4e0c      	ldr	r6, [pc, #48]	; (418a68 <theme_apply+0x620>)
  418a38:	6831      	ldr	r1, [r6, #0]
  418a3a:	3104      	adds	r1, #4
  418a3c:	4d0b      	ldr	r5, [pc, #44]	; (418a6c <theme_apply+0x624>)
  418a3e:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->gauge_main);
  418a40:	6831      	ldr	r1, [r6, #0]
  418a42:	3160      	adds	r1, #96	; 0x60
  418a44:	4640      	mov	r0, r8
  418a46:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_MAJOR);
  418a48:	2101      	movs	r1, #1
  418a4a:	4620      	mov	r0, r4
  418a4c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->gauge_strong);
  418a4e:	6831      	ldr	r1, [r6, #0]
  418a50:	3164      	adds	r1, #100	; 0x64
  418a52:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_NEEDLE);
  418a54:	2102      	movs	r1, #2
  418a56:	4620      	mov	r0, r4
  418a58:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->gauge_needle);
  418a5a:	6831      	ldr	r1, [r6, #0]
  418a5c:	3168      	adds	r1, #104	; 0x68
  418a5e:	47a8      	blx	r5
            break;
  418a60:	e52a      	b.n	4184b8 <theme_apply+0x70>
  418a62:	bf00      	nop
  418a64:	00405c4d 	.word	0x00405c4d
  418a68:	20414834 	.word	0x20414834
  418a6c:	00409f65 	.word	0x00409f65

00418a70 <style_init_reset>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void style_init_reset(lv_style_t * style)
{
  418a70:	b508      	push	{r3, lr}
    if(inited) lv_style_reset(style);
  418a72:	4b04      	ldr	r3, [pc, #16]	; (418a84 <style_init_reset+0x14>)
  418a74:	781b      	ldrb	r3, [r3, #0]
  418a76:	b913      	cbnz	r3, 418a7e <style_init_reset+0xe>
    else lv_style_init(style);
  418a78:	4b03      	ldr	r3, [pc, #12]	; (418a88 <style_init_reset+0x18>)
  418a7a:	4798      	blx	r3
  418a7c:	bd08      	pop	{r3, pc}
    if(inited) lv_style_reset(style);
  418a7e:	4b03      	ldr	r3, [pc, #12]	; (418a8c <style_init_reset+0x1c>)
  418a80:	4798      	blx	r3
  418a82:	bd08      	pop	{r3, pc}
  418a84:	20414830 	.word	0x20414830
  418a88:	00409e81 	.word	0x00409e81
  418a8c:	0040a0a5 	.word	0x0040a0a5

00418a90 <bar_init>:
{
  418a90:	b570      	push	{r4, r5, r6, lr}
    style_init_reset(&styles->bar_bg);
  418a92:	4c6f      	ldr	r4, [pc, #444]	; (418c50 <bar_init+0x1c0>)
  418a94:	6820      	ldr	r0, [r4, #0]
  418a96:	3028      	adds	r0, #40	; 0x28
  418a98:	4b6e      	ldr	r3, [pc, #440]	; (418c54 <bar_init+0x1c4>)
  418a9a:	4798      	blx	r3
    lv_style_set_radius(&styles->bar_bg, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  418a9c:	6820      	ldr	r0, [r4, #0]
#define _LV_OBJ_STYLE_SET_GET_DECLARE(prop_name, func_name, value_type, style_type, scalar)                             \
    _OBJ_GET_STYLE_##scalar(prop_name, func_name, value_type, style_type)                                               \
    _OBJ_SET_STYLE_LOCAL_##scalar(prop_name, func_name, value_type, style_type)                                         \
    _OBJ_SET_STYLE_##scalar(prop_name, func_name, value_type, style_type)

_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  418a9e:	f647 72ff 	movw	r2, #32767	; 0x7fff
  418aa2:	2101      	movs	r1, #1
  418aa4:	3028      	adds	r0, #40	; 0x28
  418aa6:	4b6c      	ldr	r3, [pc, #432]	; (418c58 <bar_init+0x1c8>)
  418aa8:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->bar_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
  418aaa:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  418aac:	22ff      	movs	r2, #255	; 0xff
  418aae:	212c      	movs	r1, #44	; 0x2c
  418ab0:	3028      	adds	r0, #40	; 0x28
  418ab2:	4b6a      	ldr	r3, [pc, #424]	; (418c5c <bar_init+0x1cc>)
  418ab4:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bar_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
  418ab6:	6820      	ldr	r0, [r4, #0]
  418ab8:	3028      	adds	r0, #40	; 0x28
  418aba:	4b69      	ldr	r3, [pc, #420]	; (418c60 <bar_init+0x1d0>)
  418abc:	6a1b      	ldr	r3, [r3, #32]
  418abe:	f013 0f02 	tst.w	r3, #2
  418ac2:	f000 808e 	beq.w	418be2 <bar_init+0x152>
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
  418ac6:	f04f 0200 	mov.w	r2, #0
  418aca:	2306      	movs	r3, #6
  418acc:	f363 0202 	bfi	r2, r3, #0, #3
  418ad0:	231a      	movs	r3, #26
  418ad2:	f363 02c7 	bfi	r2, r3, #3, #5
  418ad6:	231b      	movs	r3, #27
  418ad8:	f363 220c 	bfi	r2, r3, #8, #5
  418adc:	2305      	movs	r3, #5
  418ade:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  418ae2:	2129      	movs	r1, #41	; 0x29
  418ae4:	4b5f      	ldr	r3, [pc, #380]	; (418c64 <bar_init+0x1d4>)
  418ae6:	4798      	blx	r3
    lv_style_set_value_color(&styles->bar_bg, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
  418ae8:	4b59      	ldr	r3, [pc, #356]	; (418c50 <bar_init+0x1c0>)
  418aea:	6818      	ldr	r0, [r3, #0]
  418aec:	3028      	adds	r0, #40	; 0x28
  418aee:	4b5c      	ldr	r3, [pc, #368]	; (418c60 <bar_init+0x1d0>)
  418af0:	6a1b      	ldr	r3, [r3, #32]
  418af2:	f013 0f02 	tst.w	r3, #2
  418af6:	f000 8082 	beq.w	418bfe <bar_init+0x16e>
  418afa:	f04f 0200 	mov.w	r2, #0
  418afe:	2302      	movs	r3, #2
  418b00:	f363 0202 	bfi	r2, r3, #0, #3
  418b04:	2306      	movs	r3, #6
  418b06:	f363 02c7 	bfi	r2, r3, #3, #5
  418b0a:	2309      	movs	r3, #9
  418b0c:	f363 220c 	bfi	r2, r3, #8, #5
  418b10:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LINE_SPACE, value_line_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_BLEND_MODE, value_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  418b14:	2179      	movs	r1, #121	; 0x79
  418b16:	4d53      	ldr	r5, [pc, #332]	; (418c64 <bar_init+0x1d4>)
  418b18:	47a8      	blx	r5
    lv_style_set_outline_color(&styles->bar_bg, LV_STATE_DEFAULT, theme.color_primary);
  418b1a:	4c4d      	ldr	r4, [pc, #308]	; (418c50 <bar_init+0x1c0>)
  418b1c:	6820      	ldr	r0, [r4, #0]
  418b1e:	4e50      	ldr	r6, [pc, #320]	; (418c60 <bar_init+0x1d0>)
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
  418b20:	89b2      	ldrh	r2, [r6, #12]
  418b22:	2149      	movs	r1, #73	; 0x49
  418b24:	3028      	adds	r0, #40	; 0x28
  418b26:	47a8      	blx	r5
    lv_style_set_outline_color(&styles->bar_bg, LV_STATE_EDITED, theme.color_secondary);
  418b28:	6820      	ldr	r0, [r4, #0]
  418b2a:	89f2      	ldrh	r2, [r6, #14]
  418b2c:	f240 4149 	movw	r1, #1097	; 0x449
  418b30:	3028      	adds	r0, #40	; 0x28
  418b32:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->bar_bg, LV_STATE_DEFAULT, LV_OPA_TRANSP);
  418b34:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  418b36:	2200      	movs	r2, #0
  418b38:	214c      	movs	r1, #76	; 0x4c
  418b3a:	3028      	adds	r0, #40	; 0x28
  418b3c:	4d47      	ldr	r5, [pc, #284]	; (418c5c <bar_init+0x1cc>)
  418b3e:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->bar_bg, LV_STATE_FOCUSED, LV_OPA_50);
  418b40:	6820      	ldr	r0, [r4, #0]
  418b42:	227f      	movs	r2, #127	; 0x7f
  418b44:	f44f 7113 	mov.w	r1, #588	; 0x24c
  418b48:	3028      	adds	r0, #40	; 0x28
  418b4a:	47a8      	blx	r5
    lv_style_set_outline_width(&styles->bar_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  418b4c:	6824      	ldr	r4, [r4, #0]
  418b4e:	3428      	adds	r4, #40	; 0x28
  418b50:	6a33      	ldr	r3, [r6, #32]
  418b52:	f013 0f20 	tst.w	r3, #32
  418b56:	d055      	beq.n	418c04 <bar_init+0x174>
  418b58:	2200      	movs	r2, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  418b5a:	2140      	movs	r1, #64	; 0x40
  418b5c:	4620      	mov	r0, r4
  418b5e:	4d3e      	ldr	r5, [pc, #248]	; (418c58 <bar_init+0x1c8>)
  418b60:	47a8      	blx	r5
    lv_style_set_transition_time(&styles->bar_bg, LV_STATE_DEFAULT, TRANSITION_TIME);
  418b62:	4c3b      	ldr	r4, [pc, #236]	; (418c50 <bar_init+0x1c0>)
  418b64:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  418b66:	2200      	movs	r2, #0
  418b68:	21b0      	movs	r1, #176	; 0xb0
  418b6a:	3028      	adds	r0, #40	; 0x28
  418b6c:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->bar_bg, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
  418b6e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_1, transition_prop_1, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_2, transition_prop_2, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  418b70:	224c      	movs	r2, #76	; 0x4c
  418b72:	21b7      	movs	r1, #183	; 0xb7
  418b74:	3028      	adds	r0, #40	; 0x28
  418b76:	47a8      	blx	r5
    style_init_reset(&styles->bar_indic);
  418b78:	6820      	ldr	r0, [r4, #0]
  418b7a:	302c      	adds	r0, #44	; 0x2c
  418b7c:	4b35      	ldr	r3, [pc, #212]	; (418c54 <bar_init+0x1c4>)
  418b7e:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->bar_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
  418b80:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  418b82:	22ff      	movs	r2, #255	; 0xff
  418b84:	212c      	movs	r1, #44	; 0x2c
  418b86:	4408      	add	r0, r1
  418b88:	4b34      	ldr	r3, [pc, #208]	; (418c5c <bar_init+0x1cc>)
  418b8a:	4798      	blx	r3
    lv_style_set_radius(&styles->bar_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  418b8c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  418b8e:	f647 72ff 	movw	r2, #32767	; 0x7fff
  418b92:	2101      	movs	r1, #1
  418b94:	302c      	adds	r0, #44	; 0x2c
  418b96:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bar_indic, LV_STATE_DEFAULT, theme.color_primary);
  418b98:	6820      	ldr	r0, [r4, #0]
  418b9a:	4d31      	ldr	r5, [pc, #196]	; (418c60 <bar_init+0x1d0>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  418b9c:	89aa      	ldrh	r2, [r5, #12]
  418b9e:	2129      	movs	r1, #41	; 0x29
  418ba0:	302c      	adds	r0, #44	; 0x2c
  418ba2:	4e30      	ldr	r6, [pc, #192]	; (418c64 <bar_init+0x1d4>)
  418ba4:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->bar_indic, LV_STATE_DISABLED, lv_color_hex3(0x888));
  418ba6:	6820      	ldr	r0, [r4, #0]
  418ba8:	f04f 0200 	mov.w	r2, #0
  418bac:	2304      	movs	r3, #4
  418bae:	f363 0202 	bfi	r2, r3, #0, #3
  418bb2:	2311      	movs	r3, #17
  418bb4:	f363 02c7 	bfi	r2, r3, #3, #5
  418bb8:	f363 220c 	bfi	r2, r3, #8, #5
  418bbc:	2302      	movs	r3, #2
  418bbe:	f363 324f 	bfi	r2, r3, #13, #3
  418bc2:	f242 0129 	movw	r1, #8233	; 0x2029
  418bc6:	302c      	adds	r0, #44	; 0x2c
  418bc8:	47b0      	blx	r6
    lv_style_set_value_color(&styles->bar_indic, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x41404f) : LV_COLOR_WHITE);
  418bca:	6820      	ldr	r0, [r4, #0]
  418bcc:	302c      	adds	r0, #44	; 0x2c
  418bce:	6a2b      	ldr	r3, [r5, #32]
  418bd0:	f013 0f02 	tst.w	r3, #2
  418bd4:	d12d      	bne.n	418c32 <bar_init+0x1a2>
  418bd6:	4b24      	ldr	r3, [pc, #144]	; (418c68 <bar_init+0x1d8>)
  418bd8:	881a      	ldrh	r2, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  418bda:	2179      	movs	r1, #121	; 0x79
  418bdc:	4b21      	ldr	r3, [pc, #132]	; (418c64 <bar_init+0x1d4>)
  418bde:	4798      	blx	r3
  418be0:	bd70      	pop	{r4, r5, r6, pc}
  418be2:	2302      	movs	r3, #2
  418be4:	f04f 0200 	mov.w	r2, #0
  418be8:	f363 0202 	bfi	r2, r3, #0, #3
  418bec:	2108      	movs	r1, #8
  418bee:	f361 02c7 	bfi	r2, r1, #3, #5
  418bf2:	2109      	movs	r1, #9
  418bf4:	f361 220c 	bfi	r2, r1, #8, #5
  418bf8:	f363 324f 	bfi	r2, r3, #13, #3
  418bfc:	e771      	b.n	418ae2 <bar_init+0x52>
    lv_style_set_value_color(&styles->bar_bg, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
  418bfe:	4b1a      	ldr	r3, [pc, #104]	; (418c68 <bar_init+0x1d8>)
  418c00:	881a      	ldrh	r2, [r3, #0]
  418c02:	e787      	b.n	418b14 <bar_init+0x84>
    lv_style_set_outline_width(&styles->bar_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  418c04:	2000      	movs	r0, #0
  418c06:	4b19      	ldr	r3, [pc, #100]	; (418c6c <bar_init+0x1dc>)
  418c08:	4798      	blx	r3
  418c0a:	3028      	adds	r0, #40	; 0x28
  418c0c:	0040      	lsls	r0, r0, #1
  418c0e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418c12:	da01      	bge.n	418c18 <bar_init+0x188>
  418c14:	2201      	movs	r2, #1
  418c16:	e7a0      	b.n	418b5a <bar_init+0xca>
  418c18:	2000      	movs	r0, #0
  418c1a:	4b14      	ldr	r3, [pc, #80]	; (418c6c <bar_init+0x1dc>)
  418c1c:	4798      	blx	r3
  418c1e:	3028      	adds	r0, #40	; 0x28
  418c20:	0040      	lsls	r0, r0, #1
  418c22:	4b13      	ldr	r3, [pc, #76]	; (418c70 <bar_init+0x1e0>)
  418c24:	fb83 2300 	smull	r2, r3, r3, r0
  418c28:	17c2      	asrs	r2, r0, #31
  418c2a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418c2e:	b212      	sxth	r2, r2
  418c30:	e793      	b.n	418b5a <bar_init+0xca>
  418c32:	f04f 0200 	mov.w	r2, #0
  418c36:	2302      	movs	r3, #2
  418c38:	f363 0202 	bfi	r2, r3, #0, #3
  418c3c:	2308      	movs	r3, #8
  418c3e:	f363 02c7 	bfi	r2, r3, #3, #5
  418c42:	2309      	movs	r3, #9
  418c44:	f363 220c 	bfi	r2, r3, #8, #5
  418c48:	f36f 324f 	bfc	r2, #13, #3
  418c4c:	e7c5      	b.n	418bda <bar_init+0x14a>
  418c4e:	bf00      	nop
  418c50:	20414834 	.word	0x20414834
  418c54:	00418a71 	.word	0x00418a71
  418c58:	0040a269 	.word	0x0040a269
  418c5c:	0040a589 	.word	0x0040a589
  418c60:	20414838 	.word	0x20414838
  418c64:	0040a3f9 	.word	0x0040a3f9
  418c68:	0042fe2c 	.word	0x0042fe2c
  418c6c:	00414dfd 	.word	0x00414dfd
  418c70:	66666667 	.word	0x66666667

00418c74 <slider_init>:
{
  418c74:	b510      	push	{r4, lr}
    style_init_reset(&styles->slider_knob);
  418c76:	4ca3      	ldr	r4, [pc, #652]	; (418f04 <slider_init+0x290>)
  418c78:	6820      	ldr	r0, [r4, #0]
  418c7a:	3094      	adds	r0, #148	; 0x94
  418c7c:	4ba2      	ldr	r3, [pc, #648]	; (418f08 <slider_init+0x294>)
  418c7e:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->slider_knob, LV_STATE_DEFAULT, LV_OPA_COVER);
  418c80:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  418c82:	22ff      	movs	r2, #255	; 0xff
  418c84:	212c      	movs	r1, #44	; 0x2c
  418c86:	3094      	adds	r0, #148	; 0x94
  418c88:	4ba0      	ldr	r3, [pc, #640]	; (418f0c <slider_init+0x298>)
  418c8a:	4798      	blx	r3
    lv_style_set_bg_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? theme.color_primary : LV_COLOR_WHITE);
  418c8c:	6820      	ldr	r0, [r4, #0]
  418c8e:	3094      	adds	r0, #148	; 0x94
  418c90:	4b9f      	ldr	r3, [pc, #636]	; (418f10 <slider_init+0x29c>)
  418c92:	6a1b      	ldr	r3, [r3, #32]
  418c94:	f013 0f02 	tst.w	r3, #2
  418c98:	f000 80ba 	beq.w	418e10 <slider_init+0x19c>
  418c9c:	4b9c      	ldr	r3, [pc, #624]	; (418f10 <slider_init+0x29c>)
  418c9e:	899a      	ldrh	r2, [r3, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  418ca0:	2129      	movs	r1, #41	; 0x29
  418ca2:	4b9c      	ldr	r3, [pc, #624]	; (418f14 <slider_init+0x2a0>)
  418ca4:	4798      	blx	r3
    lv_style_set_value_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
  418ca6:	4b97      	ldr	r3, [pc, #604]	; (418f04 <slider_init+0x290>)
  418ca8:	6818      	ldr	r0, [r3, #0]
  418caa:	3094      	adds	r0, #148	; 0x94
  418cac:	4b98      	ldr	r3, [pc, #608]	; (418f10 <slider_init+0x29c>)
  418cae:	6a1b      	ldr	r3, [r3, #32]
  418cb0:	f013 0f02 	tst.w	r3, #2
  418cb4:	f000 80af 	beq.w	418e16 <slider_init+0x1a2>
  418cb8:	f04f 0200 	mov.w	r2, #0
  418cbc:	2302      	movs	r3, #2
  418cbe:	f363 0202 	bfi	r2, r3, #0, #3
  418cc2:	2306      	movs	r3, #6
  418cc4:	f363 02c7 	bfi	r2, r3, #3, #5
  418cc8:	2309      	movs	r3, #9
  418cca:	f363 220c 	bfi	r2, r3, #8, #5
  418cce:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  418cd2:	2179      	movs	r1, #121	; 0x79
  418cd4:	4b8f      	ldr	r3, [pc, #572]	; (418f14 <slider_init+0x2a0>)
  418cd6:	4798      	blx	r3
    lv_style_set_radius(&styles->slider_knob, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  418cd8:	4c8a      	ldr	r4, [pc, #552]	; (418f04 <slider_init+0x290>)
  418cda:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  418cdc:	f647 72ff 	movw	r2, #32767	; 0x7fff
  418ce0:	2101      	movs	r1, #1
  418ce2:	3094      	adds	r0, #148	; 0x94
  418ce4:	4b8c      	ldr	r3, [pc, #560]	; (418f18 <slider_init+0x2a4>)
  418ce6:	4798      	blx	r3
    lv_style_set_pad_left(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  418ce8:	6824      	ldr	r4, [r4, #0]
  418cea:	3494      	adds	r4, #148	; 0x94
  418cec:	2000      	movs	r0, #0
  418cee:	4b8b      	ldr	r3, [pc, #556]	; (418f1c <slider_init+0x2a8>)
  418cf0:	4798      	blx	r3
  418cf2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  418cf6:	3050      	adds	r0, #80	; 0x50
  418cf8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418cfc:	f280 808e 	bge.w	418e1c <slider_init+0x1a8>
  418d00:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  418d02:	2112      	movs	r1, #18
  418d04:	4620      	mov	r0, r4
  418d06:	4b84      	ldr	r3, [pc, #528]	; (418f18 <slider_init+0x2a4>)
  418d08:	4798      	blx	r3
    lv_style_set_pad_right(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  418d0a:	4b7e      	ldr	r3, [pc, #504]	; (418f04 <slider_init+0x290>)
  418d0c:	681c      	ldr	r4, [r3, #0]
  418d0e:	3494      	adds	r4, #148	; 0x94
  418d10:	2000      	movs	r0, #0
  418d12:	4b82      	ldr	r3, [pc, #520]	; (418f1c <slider_init+0x2a8>)
  418d14:	4798      	blx	r3
  418d16:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  418d1a:	3050      	adds	r0, #80	; 0x50
  418d1c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418d20:	f280 808a 	bge.w	418e38 <slider_init+0x1c4>
  418d24:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  418d26:	2113      	movs	r1, #19
  418d28:	4620      	mov	r0, r4
  418d2a:	4b7b      	ldr	r3, [pc, #492]	; (418f18 <slider_init+0x2a4>)
  418d2c:	4798      	blx	r3
    lv_style_set_pad_top(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  418d2e:	4b75      	ldr	r3, [pc, #468]	; (418f04 <slider_init+0x290>)
  418d30:	681c      	ldr	r4, [r3, #0]
  418d32:	3494      	adds	r4, #148	; 0x94
  418d34:	2000      	movs	r0, #0
  418d36:	4b79      	ldr	r3, [pc, #484]	; (418f1c <slider_init+0x2a8>)
  418d38:	4798      	blx	r3
  418d3a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  418d3e:	3050      	adds	r0, #80	; 0x50
  418d40:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418d44:	f280 8086 	bge.w	418e54 <slider_init+0x1e0>
  418d48:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  418d4a:	2110      	movs	r1, #16
  418d4c:	4620      	mov	r0, r4
  418d4e:	4b72      	ldr	r3, [pc, #456]	; (418f18 <slider_init+0x2a4>)
  418d50:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  418d52:	4b6c      	ldr	r3, [pc, #432]	; (418f04 <slider_init+0x290>)
  418d54:	681c      	ldr	r4, [r3, #0]
  418d56:	3494      	adds	r4, #148	; 0x94
  418d58:	2000      	movs	r0, #0
  418d5a:	4b70      	ldr	r3, [pc, #448]	; (418f1c <slider_init+0x2a8>)
  418d5c:	4798      	blx	r3
  418d5e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  418d62:	3050      	adds	r0, #80	; 0x50
  418d64:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418d68:	f280 8082 	bge.w	418e70 <slider_init+0x1fc>
  418d6c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  418d6e:	2111      	movs	r1, #17
  418d70:	4620      	mov	r0, r4
  418d72:	4b69      	ldr	r3, [pc, #420]	; (418f18 <slider_init+0x2a4>)
  418d74:	4798      	blx	r3
    style_init_reset(&styles->slider_bg);
  418d76:	4c63      	ldr	r4, [pc, #396]	; (418f04 <slider_init+0x290>)
  418d78:	6820      	ldr	r0, [r4, #0]
  418d7a:	3098      	adds	r0, #152	; 0x98
  418d7c:	4b62      	ldr	r3, [pc, #392]	; (418f08 <slider_init+0x294>)
  418d7e:	4798      	blx	r3
    lv_style_set_margin_left(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  418d80:	6824      	ldr	r4, [r4, #0]
  418d82:	3498      	adds	r4, #152	; 0x98
  418d84:	2000      	movs	r0, #0
  418d86:	4b65      	ldr	r3, [pc, #404]	; (418f1c <slider_init+0x2a8>)
  418d88:	4798      	blx	r3
  418d8a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418d8e:	0040      	lsls	r0, r0, #1
  418d90:	3050      	adds	r0, #80	; 0x50
  418d92:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418d96:	da79      	bge.n	418e8c <slider_init+0x218>
  418d98:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  418d9a:	2117      	movs	r1, #23
  418d9c:	4620      	mov	r0, r4
  418d9e:	4b5e      	ldr	r3, [pc, #376]	; (418f18 <slider_init+0x2a4>)
  418da0:	4798      	blx	r3
    lv_style_set_margin_right(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  418da2:	4b58      	ldr	r3, [pc, #352]	; (418f04 <slider_init+0x290>)
  418da4:	681c      	ldr	r4, [r3, #0]
  418da6:	3498      	adds	r4, #152	; 0x98
  418da8:	2000      	movs	r0, #0
  418daa:	4b5c      	ldr	r3, [pc, #368]	; (418f1c <slider_init+0x2a8>)
  418dac:	4798      	blx	r3
  418dae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418db2:	0040      	lsls	r0, r0, #1
  418db4:	3050      	adds	r0, #80	; 0x50
  418db6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418dba:	da76      	bge.n	418eaa <slider_init+0x236>
  418dbc:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
  418dbe:	2118      	movs	r1, #24
  418dc0:	4620      	mov	r0, r4
  418dc2:	4b55      	ldr	r3, [pc, #340]	; (418f18 <slider_init+0x2a4>)
  418dc4:	4798      	blx	r3
    lv_style_set_margin_top(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  418dc6:	4b4f      	ldr	r3, [pc, #316]	; (418f04 <slider_init+0x290>)
  418dc8:	681c      	ldr	r4, [r3, #0]
  418dca:	3498      	adds	r4, #152	; 0x98
  418dcc:	2000      	movs	r0, #0
  418dce:	4b53      	ldr	r3, [pc, #332]	; (418f1c <slider_init+0x2a8>)
  418dd0:	4798      	blx	r3
  418dd2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418dd6:	0040      	lsls	r0, r0, #1
  418dd8:	3050      	adds	r0, #80	; 0x50
  418dda:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418dde:	da73      	bge.n	418ec8 <slider_init+0x254>
  418de0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  418de2:	2115      	movs	r1, #21
  418de4:	4620      	mov	r0, r4
  418de6:	4b4c      	ldr	r3, [pc, #304]	; (418f18 <slider_init+0x2a4>)
  418de8:	4798      	blx	r3
    lv_style_set_margin_bottom(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  418dea:	4b46      	ldr	r3, [pc, #280]	; (418f04 <slider_init+0x290>)
  418dec:	681c      	ldr	r4, [r3, #0]
  418dee:	3498      	adds	r4, #152	; 0x98
  418df0:	2000      	movs	r0, #0
  418df2:	4b4a      	ldr	r3, [pc, #296]	; (418f1c <slider_init+0x2a8>)
  418df4:	4798      	blx	r3
  418df6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418dfa:	0040      	lsls	r0, r0, #1
  418dfc:	3050      	adds	r0, #80	; 0x50
  418dfe:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418e02:	da70      	bge.n	418ee6 <slider_init+0x272>
  418e04:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  418e06:	2116      	movs	r1, #22
  418e08:	4620      	mov	r0, r4
  418e0a:	4b43      	ldr	r3, [pc, #268]	; (418f18 <slider_init+0x2a4>)
  418e0c:	4798      	blx	r3
  418e0e:	bd10      	pop	{r4, pc}
    lv_style_set_bg_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? theme.color_primary : LV_COLOR_WHITE);
  418e10:	4b43      	ldr	r3, [pc, #268]	; (418f20 <slider_init+0x2ac>)
  418e12:	881a      	ldrh	r2, [r3, #0]
  418e14:	e744      	b.n	418ca0 <slider_init+0x2c>
    lv_style_set_value_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
  418e16:	4b42      	ldr	r3, [pc, #264]	; (418f20 <slider_init+0x2ac>)
  418e18:	881a      	ldrh	r2, [r3, #0]
  418e1a:	e75a      	b.n	418cd2 <slider_init+0x5e>
    lv_style_set_pad_left(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  418e1c:	2000      	movs	r0, #0
  418e1e:	4b3f      	ldr	r3, [pc, #252]	; (418f1c <slider_init+0x2a8>)
  418e20:	4798      	blx	r3
  418e22:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  418e26:	3050      	adds	r0, #80	; 0x50
  418e28:	4b3e      	ldr	r3, [pc, #248]	; (418f24 <slider_init+0x2b0>)
  418e2a:	fb83 2300 	smull	r2, r3, r3, r0
  418e2e:	17c2      	asrs	r2, r0, #31
  418e30:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418e34:	b212      	sxth	r2, r2
  418e36:	e764      	b.n	418d02 <slider_init+0x8e>
    lv_style_set_pad_right(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  418e38:	2000      	movs	r0, #0
  418e3a:	4b38      	ldr	r3, [pc, #224]	; (418f1c <slider_init+0x2a8>)
  418e3c:	4798      	blx	r3
  418e3e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  418e42:	3050      	adds	r0, #80	; 0x50
  418e44:	4b37      	ldr	r3, [pc, #220]	; (418f24 <slider_init+0x2b0>)
  418e46:	fb83 2300 	smull	r2, r3, r3, r0
  418e4a:	17c2      	asrs	r2, r0, #31
  418e4c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418e50:	b212      	sxth	r2, r2
  418e52:	e768      	b.n	418d26 <slider_init+0xb2>
    lv_style_set_pad_top(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  418e54:	2000      	movs	r0, #0
  418e56:	4b31      	ldr	r3, [pc, #196]	; (418f1c <slider_init+0x2a8>)
  418e58:	4798      	blx	r3
  418e5a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  418e5e:	3050      	adds	r0, #80	; 0x50
  418e60:	4b30      	ldr	r3, [pc, #192]	; (418f24 <slider_init+0x2b0>)
  418e62:	fb83 2300 	smull	r2, r3, r3, r0
  418e66:	17c2      	asrs	r2, r0, #31
  418e68:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418e6c:	b212      	sxth	r2, r2
  418e6e:	e76c      	b.n	418d4a <slider_init+0xd6>
    lv_style_set_pad_bottom(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  418e70:	2000      	movs	r0, #0
  418e72:	4b2a      	ldr	r3, [pc, #168]	; (418f1c <slider_init+0x2a8>)
  418e74:	4798      	blx	r3
  418e76:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  418e7a:	3050      	adds	r0, #80	; 0x50
  418e7c:	4b29      	ldr	r3, [pc, #164]	; (418f24 <slider_init+0x2b0>)
  418e7e:	fb83 2300 	smull	r2, r3, r3, r0
  418e82:	17c2      	asrs	r2, r0, #31
  418e84:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418e88:	b212      	sxth	r2, r2
  418e8a:	e770      	b.n	418d6e <slider_init+0xfa>
    lv_style_set_margin_left(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  418e8c:	2000      	movs	r0, #0
  418e8e:	4b23      	ldr	r3, [pc, #140]	; (418f1c <slider_init+0x2a8>)
  418e90:	4798      	blx	r3
  418e92:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418e96:	0040      	lsls	r0, r0, #1
  418e98:	3050      	adds	r0, #80	; 0x50
  418e9a:	4b22      	ldr	r3, [pc, #136]	; (418f24 <slider_init+0x2b0>)
  418e9c:	fb83 2300 	smull	r2, r3, r3, r0
  418ea0:	17c2      	asrs	r2, r0, #31
  418ea2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418ea6:	b212      	sxth	r2, r2
  418ea8:	e777      	b.n	418d9a <slider_init+0x126>
    lv_style_set_margin_right(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  418eaa:	2000      	movs	r0, #0
  418eac:	4b1b      	ldr	r3, [pc, #108]	; (418f1c <slider_init+0x2a8>)
  418eae:	4798      	blx	r3
  418eb0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418eb4:	0040      	lsls	r0, r0, #1
  418eb6:	3050      	adds	r0, #80	; 0x50
  418eb8:	4b1a      	ldr	r3, [pc, #104]	; (418f24 <slider_init+0x2b0>)
  418eba:	fb83 2300 	smull	r2, r3, r3, r0
  418ebe:	17c2      	asrs	r2, r0, #31
  418ec0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418ec4:	b212      	sxth	r2, r2
  418ec6:	e77a      	b.n	418dbe <slider_init+0x14a>
    lv_style_set_margin_top(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  418ec8:	2000      	movs	r0, #0
  418eca:	4b14      	ldr	r3, [pc, #80]	; (418f1c <slider_init+0x2a8>)
  418ecc:	4798      	blx	r3
  418ece:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418ed2:	0040      	lsls	r0, r0, #1
  418ed4:	3050      	adds	r0, #80	; 0x50
  418ed6:	4b13      	ldr	r3, [pc, #76]	; (418f24 <slider_init+0x2b0>)
  418ed8:	fb83 2300 	smull	r2, r3, r3, r0
  418edc:	17c2      	asrs	r2, r0, #31
  418ede:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418ee2:	b212      	sxth	r2, r2
  418ee4:	e77d      	b.n	418de2 <slider_init+0x16e>
    lv_style_set_margin_bottom(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  418ee6:	2000      	movs	r0, #0
  418ee8:	4b0c      	ldr	r3, [pc, #48]	; (418f1c <slider_init+0x2a8>)
  418eea:	4798      	blx	r3
  418eec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418ef0:	0040      	lsls	r0, r0, #1
  418ef2:	3050      	adds	r0, #80	; 0x50
  418ef4:	4b0b      	ldr	r3, [pc, #44]	; (418f24 <slider_init+0x2b0>)
  418ef6:	fb83 2300 	smull	r2, r3, r3, r0
  418efa:	17c2      	asrs	r2, r0, #31
  418efc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418f00:	b212      	sxth	r2, r2
  418f02:	e780      	b.n	418e06 <slider_init+0x192>
  418f04:	20414834 	.word	0x20414834
  418f08:	00418a71 	.word	0x00418a71
  418f0c:	0040a589 	.word	0x0040a589
  418f10:	20414838 	.word	0x20414838
  418f14:	0040a3f9 	.word	0x0040a3f9
  418f18:	0040a269 	.word	0x0040a269
  418f1c:	00414dfd 	.word	0x00414dfd
  418f20:	0042fe2c 	.word	0x0042fe2c
  418f24:	66666667 	.word	0x66666667

00418f28 <switch_init>:
{
  418f28:	b510      	push	{r4, lr}
    style_init_reset(&styles->sw_knob);
  418f2a:	4c48      	ldr	r4, [pc, #288]	; (41904c <switch_init+0x124>)
  418f2c:	6820      	ldr	r0, [r4, #0]
  418f2e:	30a0      	adds	r0, #160	; 0xa0
  418f30:	4b47      	ldr	r3, [pc, #284]	; (419050 <switch_init+0x128>)
  418f32:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->sw_knob, LV_STATE_DEFAULT, LV_OPA_COVER);
  418f34:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  418f36:	22ff      	movs	r2, #255	; 0xff
  418f38:	212c      	movs	r1, #44	; 0x2c
  418f3a:	30a0      	adds	r0, #160	; 0xa0
  418f3c:	4b45      	ldr	r3, [pc, #276]	; (419054 <switch_init+0x12c>)
  418f3e:	4798      	blx	r3
    lv_style_set_bg_color(&styles->sw_knob, LV_STATE_DEFAULT, LV_COLOR_WHITE);
  418f40:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  418f42:	4b45      	ldr	r3, [pc, #276]	; (419058 <switch_init+0x130>)
  418f44:	881a      	ldrh	r2, [r3, #0]
  418f46:	2129      	movs	r1, #41	; 0x29
  418f48:	30a0      	adds	r0, #160	; 0xa0
  418f4a:	4b44      	ldr	r3, [pc, #272]	; (41905c <switch_init+0x134>)
  418f4c:	4798      	blx	r3
    lv_style_set_radius(&styles->sw_knob, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  418f4e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  418f50:	f647 72ff 	movw	r2, #32767	; 0x7fff
  418f54:	2101      	movs	r1, #1
  418f56:	30a0      	adds	r0, #160	; 0xa0
  418f58:	4b41      	ldr	r3, [pc, #260]	; (419060 <switch_init+0x138>)
  418f5a:	4798      	blx	r3
    lv_style_set_pad_top(&styles->sw_knob, LV_STATE_DEFAULT,    - LV_DPX(4));
  418f5c:	6824      	ldr	r4, [r4, #0]
  418f5e:	34a0      	adds	r4, #160	; 0xa0
  418f60:	2000      	movs	r0, #0
  418f62:	4b40      	ldr	r3, [pc, #256]	; (419064 <switch_init+0x13c>)
  418f64:	4798      	blx	r3
  418f66:	3014      	adds	r0, #20
  418f68:	0080      	lsls	r0, r0, #2
  418f6a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418f6e:	da39      	bge.n	418fe4 <switch_init+0xbc>
  418f70:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  418f74:	2110      	movs	r1, #16
  418f76:	4620      	mov	r0, r4
  418f78:	4b39      	ldr	r3, [pc, #228]	; (419060 <switch_init+0x138>)
  418f7a:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->sw_knob, LV_STATE_DEFAULT, - LV_DPX(4));
  418f7c:	4b33      	ldr	r3, [pc, #204]	; (41904c <switch_init+0x124>)
  418f7e:	681c      	ldr	r4, [r3, #0]
  418f80:	34a0      	adds	r4, #160	; 0xa0
  418f82:	2000      	movs	r0, #0
  418f84:	4b37      	ldr	r3, [pc, #220]	; (419064 <switch_init+0x13c>)
  418f86:	4798      	blx	r3
  418f88:	3014      	adds	r0, #20
  418f8a:	0080      	lsls	r0, r0, #2
  418f8c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418f90:	da35      	bge.n	418ffe <switch_init+0xd6>
  418f92:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  418f96:	2111      	movs	r1, #17
  418f98:	4620      	mov	r0, r4
  418f9a:	4b31      	ldr	r3, [pc, #196]	; (419060 <switch_init+0x138>)
  418f9c:	4798      	blx	r3
    lv_style_set_pad_left(&styles->sw_knob, LV_STATE_DEFAULT,   - LV_DPX(4));
  418f9e:	4b2b      	ldr	r3, [pc, #172]	; (41904c <switch_init+0x124>)
  418fa0:	681c      	ldr	r4, [r3, #0]
  418fa2:	34a0      	adds	r4, #160	; 0xa0
  418fa4:	2000      	movs	r0, #0
  418fa6:	4b2f      	ldr	r3, [pc, #188]	; (419064 <switch_init+0x13c>)
  418fa8:	4798      	blx	r3
  418faa:	3014      	adds	r0, #20
  418fac:	0080      	lsls	r0, r0, #2
  418fae:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418fb2:	da31      	bge.n	419018 <switch_init+0xf0>
  418fb4:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  418fb8:	2112      	movs	r1, #18
  418fba:	4620      	mov	r0, r4
  418fbc:	4b28      	ldr	r3, [pc, #160]	; (419060 <switch_init+0x138>)
  418fbe:	4798      	blx	r3
    lv_style_set_pad_right(&styles->sw_knob, LV_STATE_DEFAULT,  - LV_DPX(4));
  418fc0:	4b22      	ldr	r3, [pc, #136]	; (41904c <switch_init+0x124>)
  418fc2:	681c      	ldr	r4, [r3, #0]
  418fc4:	34a0      	adds	r4, #160	; 0xa0
  418fc6:	2000      	movs	r0, #0
  418fc8:	4b26      	ldr	r3, [pc, #152]	; (419064 <switch_init+0x13c>)
  418fca:	4798      	blx	r3
  418fcc:	3014      	adds	r0, #20
  418fce:	0080      	lsls	r0, r0, #2
  418fd0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418fd4:	da2d      	bge.n	419032 <switch_init+0x10a>
  418fd6:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  418fda:	2113      	movs	r1, #19
  418fdc:	4620      	mov	r0, r4
  418fde:	4b20      	ldr	r3, [pc, #128]	; (419060 <switch_init+0x138>)
  418fe0:	4798      	blx	r3
  418fe2:	bd10      	pop	{r4, pc}
    lv_style_set_pad_top(&styles->sw_knob, LV_STATE_DEFAULT,    - LV_DPX(4));
  418fe4:	2000      	movs	r0, #0
  418fe6:	4b1f      	ldr	r3, [pc, #124]	; (419064 <switch_init+0x13c>)
  418fe8:	4798      	blx	r3
  418fea:	3014      	adds	r0, #20
  418fec:	0080      	lsls	r0, r0, #2
  418fee:	4b1e      	ldr	r3, [pc, #120]	; (419068 <switch_init+0x140>)
  418ff0:	fb83 2300 	smull	r2, r3, r3, r0
  418ff4:	17c2      	asrs	r2, r0, #31
  418ff6:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  418ffa:	b212      	sxth	r2, r2
  418ffc:	e7ba      	b.n	418f74 <switch_init+0x4c>
    lv_style_set_pad_bottom(&styles->sw_knob, LV_STATE_DEFAULT, - LV_DPX(4));
  418ffe:	2000      	movs	r0, #0
  419000:	4b18      	ldr	r3, [pc, #96]	; (419064 <switch_init+0x13c>)
  419002:	4798      	blx	r3
  419004:	3014      	adds	r0, #20
  419006:	0080      	lsls	r0, r0, #2
  419008:	4b17      	ldr	r3, [pc, #92]	; (419068 <switch_init+0x140>)
  41900a:	fb83 2300 	smull	r2, r3, r3, r0
  41900e:	17c2      	asrs	r2, r0, #31
  419010:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  419014:	b212      	sxth	r2, r2
  419016:	e7be      	b.n	418f96 <switch_init+0x6e>
    lv_style_set_pad_left(&styles->sw_knob, LV_STATE_DEFAULT,   - LV_DPX(4));
  419018:	2000      	movs	r0, #0
  41901a:	4b12      	ldr	r3, [pc, #72]	; (419064 <switch_init+0x13c>)
  41901c:	4798      	blx	r3
  41901e:	3014      	adds	r0, #20
  419020:	0080      	lsls	r0, r0, #2
  419022:	4b11      	ldr	r3, [pc, #68]	; (419068 <switch_init+0x140>)
  419024:	fb83 2300 	smull	r2, r3, r3, r0
  419028:	17c2      	asrs	r2, r0, #31
  41902a:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41902e:	b212      	sxth	r2, r2
  419030:	e7c2      	b.n	418fb8 <switch_init+0x90>
    lv_style_set_pad_right(&styles->sw_knob, LV_STATE_DEFAULT,  - LV_DPX(4));
  419032:	2000      	movs	r0, #0
  419034:	4b0b      	ldr	r3, [pc, #44]	; (419064 <switch_init+0x13c>)
  419036:	4798      	blx	r3
  419038:	3014      	adds	r0, #20
  41903a:	0080      	lsls	r0, r0, #2
  41903c:	4b0a      	ldr	r3, [pc, #40]	; (419068 <switch_init+0x140>)
  41903e:	fb83 2300 	smull	r2, r3, r3, r0
  419042:	17c2      	asrs	r2, r0, #31
  419044:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  419048:	b212      	sxth	r2, r2
  41904a:	e7c6      	b.n	418fda <switch_init+0xb2>
  41904c:	20414834 	.word	0x20414834
  419050:	00418a71 	.word	0x00418a71
  419054:	0040a589 	.word	0x0040a589
  419058:	0042fe2c 	.word	0x0042fe2c
  41905c:	0040a3f9 	.word	0x0040a3f9
  419060:	0040a269 	.word	0x0040a269
  419064:	00414dfd 	.word	0x00414dfd
  419068:	66666667 	.word	0x66666667

0041906c <linemeter_init>:
{
  41906c:	b570      	push	{r4, r5, r6, lr}
    style_init_reset(&styles->lmeter);
  41906e:	4c8a      	ldr	r4, [pc, #552]	; (419298 <linemeter_init+0x22c>)
  419070:	6820      	ldr	r0, [r4, #0]
  419072:	3074      	adds	r0, #116	; 0x74
  419074:	4b89      	ldr	r3, [pc, #548]	; (41929c <linemeter_init+0x230>)
  419076:	4798      	blx	r3
    lv_style_set_radius(&styles->lmeter, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  419078:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41907a:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41907e:	2101      	movs	r1, #1
  419080:	3074      	adds	r0, #116	; 0x74
  419082:	4b87      	ldr	r3, [pc, #540]	; (4192a0 <linemeter_init+0x234>)
  419084:	4798      	blx	r3
    lv_style_set_pad_left(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  419086:	6824      	ldr	r4, [r4, #0]
  419088:	3474      	adds	r4, #116	; 0x74
  41908a:	2000      	movs	r0, #0
  41908c:	4b85      	ldr	r3, [pc, #532]	; (4192a4 <linemeter_init+0x238>)
  41908e:	4798      	blx	r3
  419090:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419094:	0080      	lsls	r0, r0, #2
  419096:	3050      	adds	r0, #80	; 0x50
  419098:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41909c:	f280 8093 	bge.w	4191c6 <linemeter_init+0x15a>
  4190a0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  4190a2:	2112      	movs	r1, #18
  4190a4:	4620      	mov	r0, r4
  4190a6:	4b7e      	ldr	r3, [pc, #504]	; (4192a0 <linemeter_init+0x234>)
  4190a8:	4798      	blx	r3
    lv_style_set_pad_right(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  4190aa:	4b7b      	ldr	r3, [pc, #492]	; (419298 <linemeter_init+0x22c>)
  4190ac:	681c      	ldr	r4, [r3, #0]
  4190ae:	3474      	adds	r4, #116	; 0x74
  4190b0:	2000      	movs	r0, #0
  4190b2:	4b7c      	ldr	r3, [pc, #496]	; (4192a4 <linemeter_init+0x238>)
  4190b4:	4798      	blx	r3
  4190b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4190ba:	0080      	lsls	r0, r0, #2
  4190bc:	3050      	adds	r0, #80	; 0x50
  4190be:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4190c2:	f280 808f 	bge.w	4191e4 <linemeter_init+0x178>
  4190c6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  4190c8:	2113      	movs	r1, #19
  4190ca:	4620      	mov	r0, r4
  4190cc:	4b74      	ldr	r3, [pc, #464]	; (4192a0 <linemeter_init+0x234>)
  4190ce:	4798      	blx	r3
    lv_style_set_pad_top(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  4190d0:	4b71      	ldr	r3, [pc, #452]	; (419298 <linemeter_init+0x22c>)
  4190d2:	681c      	ldr	r4, [r3, #0]
  4190d4:	3474      	adds	r4, #116	; 0x74
  4190d6:	2000      	movs	r0, #0
  4190d8:	4b72      	ldr	r3, [pc, #456]	; (4192a4 <linemeter_init+0x238>)
  4190da:	4798      	blx	r3
  4190dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4190e0:	0080      	lsls	r0, r0, #2
  4190e2:	3050      	adds	r0, #80	; 0x50
  4190e4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4190e8:	f280 808b 	bge.w	419202 <linemeter_init+0x196>
  4190ec:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  4190ee:	2110      	movs	r1, #16
  4190f0:	4620      	mov	r0, r4
  4190f2:	4b6b      	ldr	r3, [pc, #428]	; (4192a0 <linemeter_init+0x234>)
  4190f4:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(30));
  4190f6:	4b68      	ldr	r3, [pc, #416]	; (419298 <linemeter_init+0x22c>)
  4190f8:	681c      	ldr	r4, [r3, #0]
  4190fa:	3474      	adds	r4, #116	; 0x74
  4190fc:	2000      	movs	r0, #0
  4190fe:	4b69      	ldr	r3, [pc, #420]	; (4192a4 <linemeter_init+0x238>)
  419100:	4798      	blx	r3
  419102:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419106:	0040      	lsls	r0, r0, #1
  419108:	3050      	adds	r0, #80	; 0x50
  41910a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41910e:	f280 8087 	bge.w	419220 <linemeter_init+0x1b4>
  419112:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  419114:	2114      	movs	r1, #20
  419116:	4620      	mov	r0, r4
  419118:	4b61      	ldr	r3, [pc, #388]	; (4192a0 <linemeter_init+0x234>)
  41911a:	4798      	blx	r3
    lv_style_set_scale_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(25));
  41911c:	4b5e      	ldr	r3, [pc, #376]	; (419298 <linemeter_init+0x22c>)
  41911e:	681c      	ldr	r4, [r3, #0]
  419120:	3474      	adds	r4, #116	; 0x74
  419122:	2000      	movs	r0, #0
  419124:	4b5f      	ldr	r3, [pc, #380]	; (4192a4 <linemeter_init+0x238>)
  419126:	4798      	blx	r3
  419128:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41912c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419130:	3050      	adds	r0, #80	; 0x50
  419132:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419136:	f280 8082 	bge.w	41923e <linemeter_init+0x1d2>
  41913a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
#else
/*For compatibility*/
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr, scalar)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
  41913c:	21c0      	movs	r1, #192	; 0xc0
  41913e:	4620      	mov	r0, r4
  419140:	4b57      	ldr	r3, [pc, #348]	; (4192a0 <linemeter_init+0x234>)
  419142:	4798      	blx	r3
    lv_style_set_line_color(&styles->lmeter, LV_STATE_DEFAULT, theme.color_primary);
  419144:	4c54      	ldr	r4, [pc, #336]	; (419298 <linemeter_init+0x22c>)
  419146:	6820      	ldr	r0, [r4, #0]
  419148:	4e57      	ldr	r6, [pc, #348]	; (4192a8 <linemeter_init+0x23c>)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  41914a:	89b2      	ldrh	r2, [r6, #12]
  41914c:	2199      	movs	r1, #153	; 0x99
  41914e:	3074      	adds	r0, #116	; 0x74
  419150:	4d56      	ldr	r5, [pc, #344]	; (4192ac <linemeter_init+0x240>)
  419152:	47a8      	blx	r5
    lv_style_set_scale_grad_color(&styles->lmeter, LV_STATE_DEFAULT, theme.color_primary);
  419154:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_BORDER_WIDTH, scale_border_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
  419156:	89b2      	ldrh	r2, [r6, #12]
  419158:	21c9      	movs	r1, #201	; 0xc9
  41915a:	3074      	adds	r0, #116	; 0x74
  41915c:	47a8      	blx	r5
    lv_style_set_scale_end_color(&styles->lmeter, LV_STATE_DEFAULT, lv_color_hex3(0x888));
  41915e:	6820      	ldr	r0, [r4, #0]
  419160:	f04f 0200 	mov.w	r2, #0
  419164:	2304      	movs	r3, #4
  419166:	f363 0202 	bfi	r2, r3, #0, #3
  41916a:	2311      	movs	r3, #17
  41916c:	f363 02c7 	bfi	r2, r3, #3, #5
  419170:	f363 220c 	bfi	r2, r3, #8, #5
  419174:	2302      	movs	r3, #2
  419176:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
  41917a:	21ca      	movs	r1, #202	; 0xca
  41917c:	3074      	adds	r0, #116	; 0x74
  41917e:	47a8      	blx	r5
    lv_style_set_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(10));
  419180:	6824      	ldr	r4, [r4, #0]
  419182:	3474      	adds	r4, #116	; 0x74
  419184:	2000      	movs	r0, #0
  419186:	4b47      	ldr	r3, [pc, #284]	; (4192a4 <linemeter_init+0x238>)
  419188:	4798      	blx	r3
  41918a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41918e:	0040      	lsls	r0, r0, #1
  419190:	3050      	adds	r0, #80	; 0x50
  419192:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419196:	da62      	bge.n	41925e <linemeter_init+0x1f2>
  419198:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  41919a:	2190      	movs	r1, #144	; 0x90
  41919c:	4620      	mov	r0, r4
  41919e:	4b40      	ldr	r3, [pc, #256]	; (4192a0 <linemeter_init+0x234>)
  4191a0:	4798      	blx	r3
    lv_style_set_scale_end_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(7));
  4191a2:	4b3d      	ldr	r3, [pc, #244]	; (419298 <linemeter_init+0x22c>)
  4191a4:	681c      	ldr	r4, [r3, #0]
  4191a6:	3474      	adds	r4, #116	; 0x74
  4191a8:	2000      	movs	r0, #0
  4191aa:	4b3e      	ldr	r3, [pc, #248]	; (4192a4 <linemeter_init+0x238>)
  4191ac:	4798      	blx	r3
  4191ae:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  4191b2:	3050      	adds	r0, #80	; 0x50
  4191b4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4191b8:	da60      	bge.n	41927c <linemeter_init+0x210>
  4191ba:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
  4191bc:	21c3      	movs	r1, #195	; 0xc3
  4191be:	4620      	mov	r0, r4
  4191c0:	4b37      	ldr	r3, [pc, #220]	; (4192a0 <linemeter_init+0x234>)
  4191c2:	4798      	blx	r3
  4191c4:	bd70      	pop	{r4, r5, r6, pc}
    lv_style_set_pad_left(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  4191c6:	2000      	movs	r0, #0
  4191c8:	4b36      	ldr	r3, [pc, #216]	; (4192a4 <linemeter_init+0x238>)
  4191ca:	4798      	blx	r3
  4191cc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4191d0:	0080      	lsls	r0, r0, #2
  4191d2:	3050      	adds	r0, #80	; 0x50
  4191d4:	4b36      	ldr	r3, [pc, #216]	; (4192b0 <linemeter_init+0x244>)
  4191d6:	fb83 2300 	smull	r2, r3, r3, r0
  4191da:	17c2      	asrs	r2, r0, #31
  4191dc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4191e0:	b212      	sxth	r2, r2
  4191e2:	e75e      	b.n	4190a2 <linemeter_init+0x36>
    lv_style_set_pad_right(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  4191e4:	2000      	movs	r0, #0
  4191e6:	4b2f      	ldr	r3, [pc, #188]	; (4192a4 <linemeter_init+0x238>)
  4191e8:	4798      	blx	r3
  4191ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4191ee:	0080      	lsls	r0, r0, #2
  4191f0:	3050      	adds	r0, #80	; 0x50
  4191f2:	4b2f      	ldr	r3, [pc, #188]	; (4192b0 <linemeter_init+0x244>)
  4191f4:	fb83 2300 	smull	r2, r3, r3, r0
  4191f8:	17c2      	asrs	r2, r0, #31
  4191fa:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4191fe:	b212      	sxth	r2, r2
  419200:	e762      	b.n	4190c8 <linemeter_init+0x5c>
    lv_style_set_pad_top(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  419202:	2000      	movs	r0, #0
  419204:	4b27      	ldr	r3, [pc, #156]	; (4192a4 <linemeter_init+0x238>)
  419206:	4798      	blx	r3
  419208:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41920c:	0080      	lsls	r0, r0, #2
  41920e:	3050      	adds	r0, #80	; 0x50
  419210:	4b27      	ldr	r3, [pc, #156]	; (4192b0 <linemeter_init+0x244>)
  419212:	fb83 2300 	smull	r2, r3, r3, r0
  419216:	17c2      	asrs	r2, r0, #31
  419218:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41921c:	b212      	sxth	r2, r2
  41921e:	e766      	b.n	4190ee <linemeter_init+0x82>
    lv_style_set_pad_inner(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(30));
  419220:	2000      	movs	r0, #0
  419222:	4b20      	ldr	r3, [pc, #128]	; (4192a4 <linemeter_init+0x238>)
  419224:	4798      	blx	r3
  419226:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41922a:	0040      	lsls	r0, r0, #1
  41922c:	3050      	adds	r0, #80	; 0x50
  41922e:	4b20      	ldr	r3, [pc, #128]	; (4192b0 <linemeter_init+0x244>)
  419230:	fb83 2300 	smull	r2, r3, r3, r0
  419234:	17c2      	asrs	r2, r0, #31
  419236:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41923a:	b212      	sxth	r2, r2
  41923c:	e76a      	b.n	419114 <linemeter_init+0xa8>
    lv_style_set_scale_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(25));
  41923e:	2000      	movs	r0, #0
  419240:	4b18      	ldr	r3, [pc, #96]	; (4192a4 <linemeter_init+0x238>)
  419242:	4798      	blx	r3
  419244:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419248:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41924c:	3050      	adds	r0, #80	; 0x50
  41924e:	4b18      	ldr	r3, [pc, #96]	; (4192b0 <linemeter_init+0x244>)
  419250:	fb83 2300 	smull	r2, r3, r3, r0
  419254:	17c2      	asrs	r2, r0, #31
  419256:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41925a:	b212      	sxth	r2, r2
  41925c:	e76e      	b.n	41913c <linemeter_init+0xd0>
    lv_style_set_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(10));
  41925e:	2000      	movs	r0, #0
  419260:	4b10      	ldr	r3, [pc, #64]	; (4192a4 <linemeter_init+0x238>)
  419262:	4798      	blx	r3
  419264:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419268:	0040      	lsls	r0, r0, #1
  41926a:	3050      	adds	r0, #80	; 0x50
  41926c:	4b10      	ldr	r3, [pc, #64]	; (4192b0 <linemeter_init+0x244>)
  41926e:	fb83 2300 	smull	r2, r3, r3, r0
  419272:	17c2      	asrs	r2, r0, #31
  419274:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419278:	b212      	sxth	r2, r2
  41927a:	e78e      	b.n	41919a <linemeter_init+0x12e>
    lv_style_set_scale_end_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(7));
  41927c:	2000      	movs	r0, #0
  41927e:	4b09      	ldr	r3, [pc, #36]	; (4192a4 <linemeter_init+0x238>)
  419280:	4798      	blx	r3
  419282:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  419286:	3050      	adds	r0, #80	; 0x50
  419288:	4b09      	ldr	r3, [pc, #36]	; (4192b0 <linemeter_init+0x244>)
  41928a:	fb83 2300 	smull	r2, r3, r3, r0
  41928e:	17c2      	asrs	r2, r0, #31
  419290:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419294:	b212      	sxth	r2, r2
  419296:	e791      	b.n	4191bc <linemeter_init+0x150>
  419298:	20414834 	.word	0x20414834
  41929c:	00418a71 	.word	0x00418a71
  4192a0:	0040a269 	.word	0x0040a269
  4192a4:	00414dfd 	.word	0x00414dfd
  4192a8:	20414838 	.word	0x20414838
  4192ac:	0040a3f9 	.word	0x0040a3f9
  4192b0:	66666667 	.word	0x66666667

004192b4 <gauge_init>:
{
  4192b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    style_init_reset(&styles->gauge_main);
  4192b8:	4cc0      	ldr	r4, [pc, #768]	; (4195bc <gauge_init+0x308>)
  4192ba:	6820      	ldr	r0, [r4, #0]
  4192bc:	3060      	adds	r0, #96	; 0x60
  4192be:	4bc0      	ldr	r3, [pc, #768]	; (4195c0 <gauge_init+0x30c>)
  4192c0:	4798      	blx	r3
    lv_style_set_line_color(&styles->gauge_main, LV_STATE_DEFAULT, lv_color_hex3(0x888));
  4192c2:	6820      	ldr	r0, [r4, #0]
  4192c4:	f04f 0804 	mov.w	r8, #4
  4192c8:	f04f 0200 	mov.w	r2, #0
  4192cc:	f368 0202 	bfi	r2, r8, #0, #3
  4192d0:	2511      	movs	r5, #17
  4192d2:	f365 02c7 	bfi	r2, r5, #3, #5
  4192d6:	f365 220c 	bfi	r2, r5, #8, #5
  4192da:	2702      	movs	r7, #2
  4192dc:	f367 324f 	bfi	r2, r7, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  4192e0:	2199      	movs	r1, #153	; 0x99
  4192e2:	3060      	adds	r0, #96	; 0x60
  4192e4:	4eb7      	ldr	r6, [pc, #732]	; (4195c4 <gauge_init+0x310>)
  4192e6:	47b0      	blx	r6
    lv_style_set_scale_grad_color(&styles->gauge_main, LV_STATE_DEFAULT, lv_color_hex3(0x888));
  4192e8:	6820      	ldr	r0, [r4, #0]
  4192ea:	f04f 0200 	mov.w	r2, #0
  4192ee:	f368 0202 	bfi	r2, r8, #0, #3
  4192f2:	f365 02c7 	bfi	r2, r5, #3, #5
  4192f6:	f365 220c 	bfi	r2, r5, #8, #5
  4192fa:	f367 324f 	bfi	r2, r7, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
  4192fe:	21c9      	movs	r1, #201	; 0xc9
  419300:	3060      	adds	r0, #96	; 0x60
  419302:	47b0      	blx	r6
    lv_style_set_scale_end_color(&styles->gauge_main, LV_STATE_DEFAULT, theme.color_primary);
  419304:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
  419306:	4bb0      	ldr	r3, [pc, #704]	; (4195c8 <gauge_init+0x314>)
  419308:	899a      	ldrh	r2, [r3, #12]
  41930a:	21ca      	movs	r1, #202	; 0xca
  41930c:	3060      	adds	r0, #96	; 0x60
  41930e:	47b0      	blx	r6
    lv_style_set_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(5));
  419310:	6824      	ldr	r4, [r4, #0]
  419312:	3460      	adds	r4, #96	; 0x60
  419314:	2000      	movs	r0, #0
  419316:	4bad      	ldr	r3, [pc, #692]	; (4195cc <gauge_init+0x318>)
  419318:	4798      	blx	r3
  41931a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41931e:	3050      	adds	r0, #80	; 0x50
  419320:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419324:	f280 8177 	bge.w	419616 <gauge_init+0x362>
  419328:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  41932a:	2190      	movs	r1, #144	; 0x90
  41932c:	4620      	mov	r0, r4
  41932e:	4ba8      	ldr	r3, [pc, #672]	; (4195d0 <gauge_init+0x31c>)
  419330:	4798      	blx	r3
    lv_style_set_scale_end_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(4));
  419332:	4ba2      	ldr	r3, [pc, #648]	; (4195bc <gauge_init+0x308>)
  419334:	681c      	ldr	r4, [r3, #0]
  419336:	3460      	adds	r4, #96	; 0x60
  419338:	2000      	movs	r0, #0
  41933a:	4ba4      	ldr	r3, [pc, #656]	; (4195cc <gauge_init+0x318>)
  41933c:	4798      	blx	r3
  41933e:	3014      	adds	r0, #20
  419340:	0080      	lsls	r0, r0, #2
  419342:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419346:	f280 8174 	bge.w	419632 <gauge_init+0x37e>
  41934a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
  41934c:	21c3      	movs	r1, #195	; 0xc3
  41934e:	4620      	mov	r0, r4
  419350:	4b9f      	ldr	r3, [pc, #636]	; (4195d0 <gauge_init+0x31c>)
  419352:	4798      	blx	r3
    lv_style_set_scale_end_border_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(8));
  419354:	4b99      	ldr	r3, [pc, #612]	; (4195bc <gauge_init+0x308>)
  419356:	681c      	ldr	r4, [r3, #0]
  419358:	3460      	adds	r4, #96	; 0x60
  41935a:	2000      	movs	r0, #0
  41935c:	4b9b      	ldr	r3, [pc, #620]	; (4195cc <gauge_init+0x318>)
  41935e:	4798      	blx	r3
  419360:	300a      	adds	r0, #10
  419362:	00c0      	lsls	r0, r0, #3
  419364:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419368:	f280 8170 	bge.w	41964c <gauge_init+0x398>
  41936c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
  41936e:	21c2      	movs	r1, #194	; 0xc2
  419370:	4620      	mov	r0, r4
  419372:	4b97      	ldr	r3, [pc, #604]	; (4195d0 <gauge_init+0x31c>)
  419374:	4798      	blx	r3
    lv_style_set_pad_left(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  419376:	4b91      	ldr	r3, [pc, #580]	; (4195bc <gauge_init+0x308>)
  419378:	681c      	ldr	r4, [r3, #0]
  41937a:	3460      	adds	r4, #96	; 0x60
  41937c:	2000      	movs	r0, #0
  41937e:	4b93      	ldr	r3, [pc, #588]	; (4195cc <gauge_init+0x318>)
  419380:	4798      	blx	r3
  419382:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419386:	0080      	lsls	r0, r0, #2
  419388:	3050      	adds	r0, #80	; 0x50
  41938a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41938e:	f280 816a 	bge.w	419666 <gauge_init+0x3b2>
  419392:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  419394:	2112      	movs	r1, #18
  419396:	4620      	mov	r0, r4
  419398:	4b8d      	ldr	r3, [pc, #564]	; (4195d0 <gauge_init+0x31c>)
  41939a:	4798      	blx	r3
    lv_style_set_pad_right(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  41939c:	4b87      	ldr	r3, [pc, #540]	; (4195bc <gauge_init+0x308>)
  41939e:	681c      	ldr	r4, [r3, #0]
  4193a0:	3460      	adds	r4, #96	; 0x60
  4193a2:	2000      	movs	r0, #0
  4193a4:	4b89      	ldr	r3, [pc, #548]	; (4195cc <gauge_init+0x318>)
  4193a6:	4798      	blx	r3
  4193a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4193ac:	0080      	lsls	r0, r0, #2
  4193ae:	3050      	adds	r0, #80	; 0x50
  4193b0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4193b4:	f280 8166 	bge.w	419684 <gauge_init+0x3d0>
  4193b8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  4193ba:	2113      	movs	r1, #19
  4193bc:	4620      	mov	r0, r4
  4193be:	4b84      	ldr	r3, [pc, #528]	; (4195d0 <gauge_init+0x31c>)
  4193c0:	4798      	blx	r3
    lv_style_set_pad_top(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  4193c2:	4b7e      	ldr	r3, [pc, #504]	; (4195bc <gauge_init+0x308>)
  4193c4:	681c      	ldr	r4, [r3, #0]
  4193c6:	3460      	adds	r4, #96	; 0x60
  4193c8:	2000      	movs	r0, #0
  4193ca:	4b80      	ldr	r3, [pc, #512]	; (4195cc <gauge_init+0x318>)
  4193cc:	4798      	blx	r3
  4193ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4193d2:	0080      	lsls	r0, r0, #2
  4193d4:	3050      	adds	r0, #80	; 0x50
  4193d6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4193da:	f280 8162 	bge.w	4196a2 <gauge_init+0x3ee>
  4193de:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  4193e0:	2110      	movs	r1, #16
  4193e2:	4620      	mov	r0, r4
  4193e4:	4b7a      	ldr	r3, [pc, #488]	; (4195d0 <gauge_init+0x31c>)
  4193e6:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  4193e8:	4b74      	ldr	r3, [pc, #464]	; (4195bc <gauge_init+0x308>)
  4193ea:	681c      	ldr	r4, [r3, #0]
  4193ec:	3460      	adds	r4, #96	; 0x60
  4193ee:	2000      	movs	r0, #0
  4193f0:	4b76      	ldr	r3, [pc, #472]	; (4195cc <gauge_init+0x318>)
  4193f2:	4798      	blx	r3
  4193f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4193f8:	0080      	lsls	r0, r0, #2
  4193fa:	3050      	adds	r0, #80	; 0x50
  4193fc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419400:	f280 815e 	bge.w	4196c0 <gauge_init+0x40c>
  419404:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  419406:	2114      	movs	r1, #20
  419408:	4620      	mov	r0, r4
  41940a:	4b71      	ldr	r3, [pc, #452]	; (4195d0 <gauge_init+0x31c>)
  41940c:	4798      	blx	r3
    lv_style_set_scale_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(15));
  41940e:	4b6b      	ldr	r3, [pc, #428]	; (4195bc <gauge_init+0x308>)
  419410:	681c      	ldr	r4, [r3, #0]
  419412:	3460      	adds	r4, #96	; 0x60
  419414:	2000      	movs	r0, #0
  419416:	4b6d      	ldr	r3, [pc, #436]	; (4195cc <gauge_init+0x318>)
  419418:	4798      	blx	r3
  41941a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41941e:	3050      	adds	r0, #80	; 0x50
  419420:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419424:	f280 815b 	bge.w	4196de <gauge_init+0x42a>
  419428:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
  41942a:	21c0      	movs	r1, #192	; 0xc0
  41942c:	4620      	mov	r0, r4
  41942e:	4d68      	ldr	r5, [pc, #416]	; (4195d0 <gauge_init+0x31c>)
  419430:	47a8      	blx	r5
    lv_style_set_radius(&styles->gauge_main, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  419432:	4c62      	ldr	r4, [pc, #392]	; (4195bc <gauge_init+0x308>)
  419434:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  419436:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41943a:	2101      	movs	r1, #1
  41943c:	3060      	adds	r0, #96	; 0x60
  41943e:	47a8      	blx	r5
    style_init_reset(&styles->gauge_strong);
  419440:	6820      	ldr	r0, [r4, #0]
  419442:	3064      	adds	r0, #100	; 0x64
  419444:	4b5e      	ldr	r3, [pc, #376]	; (4195c0 <gauge_init+0x30c>)
  419446:	4798      	blx	r3
    lv_style_set_line_color(&styles->gauge_strong, LV_STATE_DEFAULT, lv_color_hex3(0x888));
  419448:	6820      	ldr	r0, [r4, #0]
  41944a:	f04f 0804 	mov.w	r8, #4
  41944e:	f04f 0200 	mov.w	r2, #0
  419452:	f368 0202 	bfi	r2, r8, #0, #3
  419456:	2511      	movs	r5, #17
  419458:	f365 02c7 	bfi	r2, r5, #3, #5
  41945c:	f365 220c 	bfi	r2, r5, #8, #5
  419460:	2702      	movs	r7, #2
  419462:	f367 324f 	bfi	r2, r7, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  419466:	2199      	movs	r1, #153	; 0x99
  419468:	3064      	adds	r0, #100	; 0x64
  41946a:	4e56      	ldr	r6, [pc, #344]	; (4195c4 <gauge_init+0x310>)
  41946c:	47b0      	blx	r6
    lv_style_set_scale_grad_color(&styles->gauge_strong, LV_STATE_DEFAULT, lv_color_hex3(0x888));
  41946e:	6820      	ldr	r0, [r4, #0]
  419470:	f04f 0200 	mov.w	r2, #0
  419474:	f368 0202 	bfi	r2, r8, #0, #3
  419478:	f365 02c7 	bfi	r2, r5, #3, #5
  41947c:	f365 220c 	bfi	r2, r5, #8, #5
  419480:	f367 324f 	bfi	r2, r7, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
  419484:	21c9      	movs	r1, #201	; 0xc9
  419486:	3064      	adds	r0, #100	; 0x64
  419488:	47b0      	blx	r6
    lv_style_set_scale_end_color(&styles->gauge_strong, LV_STATE_DEFAULT, theme.color_primary);
  41948a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
  41948c:	4b4e      	ldr	r3, [pc, #312]	; (4195c8 <gauge_init+0x314>)
  41948e:	899a      	ldrh	r2, [r3, #12]
  419490:	21ca      	movs	r1, #202	; 0xca
  419492:	3064      	adds	r0, #100	; 0x64
  419494:	47b0      	blx	r6
    lv_style_set_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
  419496:	6824      	ldr	r4, [r4, #0]
  419498:	3464      	adds	r4, #100	; 0x64
  41949a:	2000      	movs	r0, #0
  41949c:	4b4b      	ldr	r3, [pc, #300]	; (4195cc <gauge_init+0x318>)
  41949e:	4798      	blx	r3
  4194a0:	300a      	adds	r0, #10
  4194a2:	00c0      	lsls	r0, r0, #3
  4194a4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4194a8:	f280 8127 	bge.w	4196fa <gauge_init+0x446>
  4194ac:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  4194ae:	2190      	movs	r1, #144	; 0x90
  4194b0:	4620      	mov	r0, r4
  4194b2:	4b47      	ldr	r3, [pc, #284]	; (4195d0 <gauge_init+0x31c>)
  4194b4:	4798      	blx	r3
    lv_style_set_scale_end_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
  4194b6:	4b41      	ldr	r3, [pc, #260]	; (4195bc <gauge_init+0x308>)
  4194b8:	681c      	ldr	r4, [r3, #0]
  4194ba:	3464      	adds	r4, #100	; 0x64
  4194bc:	2000      	movs	r0, #0
  4194be:	4b43      	ldr	r3, [pc, #268]	; (4195cc <gauge_init+0x318>)
  4194c0:	4798      	blx	r3
  4194c2:	300a      	adds	r0, #10
  4194c4:	00c0      	lsls	r0, r0, #3
  4194c6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4194ca:	f280 8123 	bge.w	419714 <gauge_init+0x460>
  4194ce:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
  4194d0:	21c3      	movs	r1, #195	; 0xc3
  4194d2:	4620      	mov	r0, r4
  4194d4:	4b3e      	ldr	r3, [pc, #248]	; (4195d0 <gauge_init+0x31c>)
  4194d6:	4798      	blx	r3
    lv_style_set_scale_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(25));
  4194d8:	4b38      	ldr	r3, [pc, #224]	; (4195bc <gauge_init+0x308>)
  4194da:	681c      	ldr	r4, [r3, #0]
  4194dc:	3464      	adds	r4, #100	; 0x64
  4194de:	2000      	movs	r0, #0
  4194e0:	4b3a      	ldr	r3, [pc, #232]	; (4195cc <gauge_init+0x318>)
  4194e2:	4798      	blx	r3
  4194e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4194e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4194ec:	3050      	adds	r0, #80	; 0x50
  4194ee:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4194f2:	f280 811c 	bge.w	41972e <gauge_init+0x47a>
  4194f6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
  4194f8:	21c0      	movs	r1, #192	; 0xc0
  4194fa:	4620      	mov	r0, r4
  4194fc:	4b34      	ldr	r3, [pc, #208]	; (4195d0 <gauge_init+0x31c>)
  4194fe:	4798      	blx	r3
    style_init_reset(&styles->gauge_needle);
  419500:	4c2e      	ldr	r4, [pc, #184]	; (4195bc <gauge_init+0x308>)
  419502:	6820      	ldr	r0, [r4, #0]
  419504:	3068      	adds	r0, #104	; 0x68
  419506:	4b2e      	ldr	r3, [pc, #184]	; (4195c0 <gauge_init+0x30c>)
  419508:	4798      	blx	r3
    lv_style_set_line_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
  41950a:	6820      	ldr	r0, [r4, #0]
  41950c:	3068      	adds	r0, #104	; 0x68
  41950e:	4b2e      	ldr	r3, [pc, #184]	; (4195c8 <gauge_init+0x314>)
  419510:	6a1b      	ldr	r3, [r3, #32]
  419512:	f013 0f02 	tst.w	r3, #2
  419516:	f000 811a 	beq.w	41974e <gauge_init+0x49a>
  41951a:	2302      	movs	r3, #2
  41951c:	f04f 0200 	mov.w	r2, #0
  419520:	f363 0202 	bfi	r2, r3, #0, #3
  419524:	2108      	movs	r1, #8
  419526:	f361 02c7 	bfi	r2, r1, #3, #5
  41952a:	210b      	movs	r1, #11
  41952c:	f361 220c 	bfi	r2, r1, #8, #5
  419530:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  419534:	2199      	movs	r1, #153	; 0x99
  419536:	4b23      	ldr	r3, [pc, #140]	; (4195c4 <gauge_init+0x310>)
  419538:	4798      	blx	r3
    lv_style_set_line_width(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(8));
  41953a:	4b20      	ldr	r3, [pc, #128]	; (4195bc <gauge_init+0x308>)
  41953c:	681c      	ldr	r4, [r3, #0]
  41953e:	3468      	adds	r4, #104	; 0x68
  419540:	2000      	movs	r0, #0
  419542:	4b22      	ldr	r3, [pc, #136]	; (4195cc <gauge_init+0x318>)
  419544:	4798      	blx	r3
  419546:	300a      	adds	r0, #10
  419548:	00c0      	lsls	r0, r0, #3
  41954a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41954e:	f280 8101 	bge.w	419754 <gauge_init+0x4a0>
  419552:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  419554:	2190      	movs	r1, #144	; 0x90
  419556:	4620      	mov	r0, r4
  419558:	4b1d      	ldr	r3, [pc, #116]	; (4195d0 <gauge_init+0x31c>)
  41955a:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->gauge_needle, LV_STATE_DEFAULT, LV_OPA_COVER);
  41955c:	4c17      	ldr	r4, [pc, #92]	; (4195bc <gauge_init+0x308>)
  41955e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  419560:	22ff      	movs	r2, #255	; 0xff
  419562:	212c      	movs	r1, #44	; 0x2c
  419564:	3068      	adds	r0, #104	; 0x68
  419566:	4b1b      	ldr	r3, [pc, #108]	; (4195d4 <gauge_init+0x320>)
  419568:	4798      	blx	r3
    lv_style_set_bg_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
  41956a:	6820      	ldr	r0, [r4, #0]
  41956c:	3068      	adds	r0, #104	; 0x68
  41956e:	4b16      	ldr	r3, [pc, #88]	; (4195c8 <gauge_init+0x314>)
  419570:	6a1b      	ldr	r3, [r3, #32]
  419572:	f013 0f02 	tst.w	r3, #2
  419576:	f000 80fa 	beq.w	41976e <gauge_init+0x4ba>
  41957a:	2302      	movs	r3, #2
  41957c:	f04f 0200 	mov.w	r2, #0
  419580:	f363 0202 	bfi	r2, r3, #0, #3
  419584:	2108      	movs	r1, #8
  419586:	f361 02c7 	bfi	r2, r1, #3, #5
  41958a:	210b      	movs	r1, #11
  41958c:	f361 220c 	bfi	r2, r1, #8, #5
  419590:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  419594:	2129      	movs	r1, #41	; 0x29
  419596:	4b0b      	ldr	r3, [pc, #44]	; (4195c4 <gauge_init+0x310>)
  419598:	4798      	blx	r3
    lv_style_set_radius(&styles->gauge_needle, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  41959a:	4c08      	ldr	r4, [pc, #32]	; (4195bc <gauge_init+0x308>)
  41959c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41959e:	f647 72ff 	movw	r2, #32767	; 0x7fff
  4195a2:	2101      	movs	r1, #1
  4195a4:	3068      	adds	r0, #104	; 0x68
  4195a6:	4b0a      	ldr	r3, [pc, #40]	; (4195d0 <gauge_init+0x31c>)
  4195a8:	4798      	blx	r3
    lv_style_set_size(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(30));
  4195aa:	6824      	ldr	r4, [r4, #0]
  4195ac:	3468      	adds	r4, #104	; 0x68
  4195ae:	2000      	movs	r0, #0
  4195b0:	4b06      	ldr	r3, [pc, #24]	; (4195cc <gauge_init+0x318>)
  4195b2:	4798      	blx	r3
  4195b4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  4195b8:	0040      	lsls	r0, r0, #1
  4195ba:	e00d      	b.n	4195d8 <gauge_init+0x324>
  4195bc:	20414834 	.word	0x20414834
  4195c0:	00418a71 	.word	0x00418a71
  4195c4:	0040a3f9 	.word	0x0040a3f9
  4195c8:	20414838 	.word	0x20414838
  4195cc:	00414dfd 	.word	0x00414dfd
  4195d0:	0040a269 	.word	0x0040a269
  4195d4:	0040a589 	.word	0x0040a589
  4195d8:	3050      	adds	r0, #80	; 0x50
  4195da:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4195de:	f280 80c9 	bge.w	419774 <gauge_init+0x4c0>
  4195e2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  4195e4:	2103      	movs	r1, #3
  4195e6:	4620      	mov	r0, r4
  4195e8:	4b71      	ldr	r3, [pc, #452]	; (4197b0 <gauge_init+0x4fc>)
  4195ea:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(10));
  4195ec:	4b71      	ldr	r3, [pc, #452]	; (4197b4 <gauge_init+0x500>)
  4195ee:	681c      	ldr	r4, [r3, #0]
  4195f0:	3468      	adds	r4, #104	; 0x68
  4195f2:	2000      	movs	r0, #0
  4195f4:	4b70      	ldr	r3, [pc, #448]	; (4197b8 <gauge_init+0x504>)
  4195f6:	4798      	blx	r3
  4195f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4195fc:	0040      	lsls	r0, r0, #1
  4195fe:	3050      	adds	r0, #80	; 0x50
  419600:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419604:	f280 80c5 	bge.w	419792 <gauge_init+0x4de>
  419608:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41960a:	2114      	movs	r1, #20
  41960c:	4620      	mov	r0, r4
  41960e:	4b68      	ldr	r3, [pc, #416]	; (4197b0 <gauge_init+0x4fc>)
  419610:	4798      	blx	r3
  419612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_style_set_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(5));
  419616:	2000      	movs	r0, #0
  419618:	4b67      	ldr	r3, [pc, #412]	; (4197b8 <gauge_init+0x504>)
  41961a:	4798      	blx	r3
  41961c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419620:	3050      	adds	r0, #80	; 0x50
  419622:	4b66      	ldr	r3, [pc, #408]	; (4197bc <gauge_init+0x508>)
  419624:	fb83 2300 	smull	r2, r3, r3, r0
  419628:	17c2      	asrs	r2, r0, #31
  41962a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41962e:	b212      	sxth	r2, r2
  419630:	e67b      	b.n	41932a <gauge_init+0x76>
    lv_style_set_scale_end_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(4));
  419632:	2000      	movs	r0, #0
  419634:	4b60      	ldr	r3, [pc, #384]	; (4197b8 <gauge_init+0x504>)
  419636:	4798      	blx	r3
  419638:	3014      	adds	r0, #20
  41963a:	0080      	lsls	r0, r0, #2
  41963c:	4b5f      	ldr	r3, [pc, #380]	; (4197bc <gauge_init+0x508>)
  41963e:	fb83 2300 	smull	r2, r3, r3, r0
  419642:	17c2      	asrs	r2, r0, #31
  419644:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419648:	b212      	sxth	r2, r2
  41964a:	e67f      	b.n	41934c <gauge_init+0x98>
    lv_style_set_scale_end_border_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(8));
  41964c:	2000      	movs	r0, #0
  41964e:	4b5a      	ldr	r3, [pc, #360]	; (4197b8 <gauge_init+0x504>)
  419650:	4798      	blx	r3
  419652:	300a      	adds	r0, #10
  419654:	00c0      	lsls	r0, r0, #3
  419656:	4b59      	ldr	r3, [pc, #356]	; (4197bc <gauge_init+0x508>)
  419658:	fb83 2300 	smull	r2, r3, r3, r0
  41965c:	17c2      	asrs	r2, r0, #31
  41965e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419662:	b212      	sxth	r2, r2
  419664:	e683      	b.n	41936e <gauge_init+0xba>
    lv_style_set_pad_left(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  419666:	2000      	movs	r0, #0
  419668:	4b53      	ldr	r3, [pc, #332]	; (4197b8 <gauge_init+0x504>)
  41966a:	4798      	blx	r3
  41966c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419670:	0080      	lsls	r0, r0, #2
  419672:	3050      	adds	r0, #80	; 0x50
  419674:	4b51      	ldr	r3, [pc, #324]	; (4197bc <gauge_init+0x508>)
  419676:	fb83 2300 	smull	r2, r3, r3, r0
  41967a:	17c2      	asrs	r2, r0, #31
  41967c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419680:	b212      	sxth	r2, r2
  419682:	e687      	b.n	419394 <gauge_init+0xe0>
    lv_style_set_pad_right(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  419684:	2000      	movs	r0, #0
  419686:	4b4c      	ldr	r3, [pc, #304]	; (4197b8 <gauge_init+0x504>)
  419688:	4798      	blx	r3
  41968a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41968e:	0080      	lsls	r0, r0, #2
  419690:	3050      	adds	r0, #80	; 0x50
  419692:	4b4a      	ldr	r3, [pc, #296]	; (4197bc <gauge_init+0x508>)
  419694:	fb83 2300 	smull	r2, r3, r3, r0
  419698:	17c2      	asrs	r2, r0, #31
  41969a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41969e:	b212      	sxth	r2, r2
  4196a0:	e68b      	b.n	4193ba <gauge_init+0x106>
    lv_style_set_pad_top(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  4196a2:	2000      	movs	r0, #0
  4196a4:	4b44      	ldr	r3, [pc, #272]	; (4197b8 <gauge_init+0x504>)
  4196a6:	4798      	blx	r3
  4196a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4196ac:	0080      	lsls	r0, r0, #2
  4196ae:	3050      	adds	r0, #80	; 0x50
  4196b0:	4b42      	ldr	r3, [pc, #264]	; (4197bc <gauge_init+0x508>)
  4196b2:	fb83 2300 	smull	r2, r3, r3, r0
  4196b6:	17c2      	asrs	r2, r0, #31
  4196b8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4196bc:	b212      	sxth	r2, r2
  4196be:	e68f      	b.n	4193e0 <gauge_init+0x12c>
    lv_style_set_pad_inner(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  4196c0:	2000      	movs	r0, #0
  4196c2:	4b3d      	ldr	r3, [pc, #244]	; (4197b8 <gauge_init+0x504>)
  4196c4:	4798      	blx	r3
  4196c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4196ca:	0080      	lsls	r0, r0, #2
  4196cc:	3050      	adds	r0, #80	; 0x50
  4196ce:	4b3b      	ldr	r3, [pc, #236]	; (4197bc <gauge_init+0x508>)
  4196d0:	fb83 2300 	smull	r2, r3, r3, r0
  4196d4:	17c2      	asrs	r2, r0, #31
  4196d6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4196da:	b212      	sxth	r2, r2
  4196dc:	e693      	b.n	419406 <gauge_init+0x152>
    lv_style_set_scale_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(15));
  4196de:	2000      	movs	r0, #0
  4196e0:	4b35      	ldr	r3, [pc, #212]	; (4197b8 <gauge_init+0x504>)
  4196e2:	4798      	blx	r3
  4196e4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  4196e8:	3050      	adds	r0, #80	; 0x50
  4196ea:	4b34      	ldr	r3, [pc, #208]	; (4197bc <gauge_init+0x508>)
  4196ec:	fb83 2300 	smull	r2, r3, r3, r0
  4196f0:	17c2      	asrs	r2, r0, #31
  4196f2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4196f6:	b212      	sxth	r2, r2
  4196f8:	e697      	b.n	41942a <gauge_init+0x176>
    lv_style_set_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
  4196fa:	2000      	movs	r0, #0
  4196fc:	4b2e      	ldr	r3, [pc, #184]	; (4197b8 <gauge_init+0x504>)
  4196fe:	4798      	blx	r3
  419700:	300a      	adds	r0, #10
  419702:	00c0      	lsls	r0, r0, #3
  419704:	4b2d      	ldr	r3, [pc, #180]	; (4197bc <gauge_init+0x508>)
  419706:	fb83 2300 	smull	r2, r3, r3, r0
  41970a:	17c2      	asrs	r2, r0, #31
  41970c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419710:	b212      	sxth	r2, r2
  419712:	e6cc      	b.n	4194ae <gauge_init+0x1fa>
    lv_style_set_scale_end_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
  419714:	2000      	movs	r0, #0
  419716:	4b28      	ldr	r3, [pc, #160]	; (4197b8 <gauge_init+0x504>)
  419718:	4798      	blx	r3
  41971a:	300a      	adds	r0, #10
  41971c:	00c0      	lsls	r0, r0, #3
  41971e:	4b27      	ldr	r3, [pc, #156]	; (4197bc <gauge_init+0x508>)
  419720:	fb83 2300 	smull	r2, r3, r3, r0
  419724:	17c2      	asrs	r2, r0, #31
  419726:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41972a:	b212      	sxth	r2, r2
  41972c:	e6d0      	b.n	4194d0 <gauge_init+0x21c>
    lv_style_set_scale_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(25));
  41972e:	2000      	movs	r0, #0
  419730:	4b21      	ldr	r3, [pc, #132]	; (4197b8 <gauge_init+0x504>)
  419732:	4798      	blx	r3
  419734:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419738:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41973c:	3050      	adds	r0, #80	; 0x50
  41973e:	4b1f      	ldr	r3, [pc, #124]	; (4197bc <gauge_init+0x508>)
  419740:	fb83 2300 	smull	r2, r3, r3, r0
  419744:	17c2      	asrs	r2, r0, #31
  419746:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41974a:	b212      	sxth	r2, r2
  41974c:	e6d4      	b.n	4194f8 <gauge_init+0x244>
    lv_style_set_line_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
  41974e:	4b1c      	ldr	r3, [pc, #112]	; (4197c0 <gauge_init+0x50c>)
  419750:	881a      	ldrh	r2, [r3, #0]
  419752:	e6ef      	b.n	419534 <gauge_init+0x280>
    lv_style_set_line_width(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(8));
  419754:	2000      	movs	r0, #0
  419756:	4b18      	ldr	r3, [pc, #96]	; (4197b8 <gauge_init+0x504>)
  419758:	4798      	blx	r3
  41975a:	300a      	adds	r0, #10
  41975c:	00c0      	lsls	r0, r0, #3
  41975e:	4b17      	ldr	r3, [pc, #92]	; (4197bc <gauge_init+0x508>)
  419760:	fb83 2300 	smull	r2, r3, r3, r0
  419764:	17c2      	asrs	r2, r0, #31
  419766:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41976a:	b212      	sxth	r2, r2
  41976c:	e6f2      	b.n	419554 <gauge_init+0x2a0>
    lv_style_set_bg_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
  41976e:	4b14      	ldr	r3, [pc, #80]	; (4197c0 <gauge_init+0x50c>)
  419770:	881a      	ldrh	r2, [r3, #0]
  419772:	e70f      	b.n	419594 <gauge_init+0x2e0>
    lv_style_set_size(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(30));
  419774:	2000      	movs	r0, #0
  419776:	4b10      	ldr	r3, [pc, #64]	; (4197b8 <gauge_init+0x504>)
  419778:	4798      	blx	r3
  41977a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41977e:	0040      	lsls	r0, r0, #1
  419780:	3050      	adds	r0, #80	; 0x50
  419782:	4b0e      	ldr	r3, [pc, #56]	; (4197bc <gauge_init+0x508>)
  419784:	fb83 2300 	smull	r2, r3, r3, r0
  419788:	17c2      	asrs	r2, r0, #31
  41978a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41978e:	b212      	sxth	r2, r2
  419790:	e728      	b.n	4195e4 <gauge_init+0x330>
    lv_style_set_pad_inner(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(10));
  419792:	2000      	movs	r0, #0
  419794:	4b08      	ldr	r3, [pc, #32]	; (4197b8 <gauge_init+0x504>)
  419796:	4798      	blx	r3
  419798:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41979c:	0040      	lsls	r0, r0, #1
  41979e:	3050      	adds	r0, #80	; 0x50
  4197a0:	4b06      	ldr	r3, [pc, #24]	; (4197bc <gauge_init+0x508>)
  4197a2:	fb83 2300 	smull	r2, r3, r3, r0
  4197a6:	17c2      	asrs	r2, r0, #31
  4197a8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4197ac:	b212      	sxth	r2, r2
  4197ae:	e72c      	b.n	41960a <gauge_init+0x356>
  4197b0:	0040a269 	.word	0x0040a269
  4197b4:	20414834 	.word	0x20414834
  4197b8:	00414dfd 	.word	0x00414dfd
  4197bc:	66666667 	.word	0x66666667
  4197c0:	0042fe2c 	.word	0x0042fe2c

004197c4 <arc_init>:
{
  4197c4:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->arc_indic);
  4197c6:	4c53      	ldr	r4, [pc, #332]	; (419914 <arc_init+0x150>)
  4197c8:	6820      	ldr	r0, [r4, #0]
  4197ca:	301c      	adds	r0, #28
  4197cc:	4b52      	ldr	r3, [pc, #328]	; (419918 <arc_init+0x154>)
  4197ce:	4798      	blx	r3
    lv_style_set_line_color(&styles->arc_indic, LV_STATE_DEFAULT, theme.color_primary);
  4197d0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  4197d2:	4b52      	ldr	r3, [pc, #328]	; (41991c <arc_init+0x158>)
  4197d4:	899a      	ldrh	r2, [r3, #12]
  4197d6:	2199      	movs	r1, #153	; 0x99
  4197d8:	301c      	adds	r0, #28
  4197da:	4b51      	ldr	r3, [pc, #324]	; (419920 <arc_init+0x15c>)
  4197dc:	4798      	blx	r3
    lv_style_set_line_width(&styles->arc_indic, LV_STATE_DEFAULT, LV_DPX(25));
  4197de:	6824      	ldr	r4, [r4, #0]
  4197e0:	341c      	adds	r4, #28
  4197e2:	2000      	movs	r0, #0
  4197e4:	4b4f      	ldr	r3, [pc, #316]	; (419924 <arc_init+0x160>)
  4197e6:	4798      	blx	r3
  4197e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4197ec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4197f0:	3050      	adds	r0, #80	; 0x50
  4197f2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4197f6:	da5e      	bge.n	4198b6 <arc_init+0xf2>
  4197f8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  4197fa:	2190      	movs	r1, #144	; 0x90
  4197fc:	4620      	mov	r0, r4
  4197fe:	4d4a      	ldr	r5, [pc, #296]	; (419928 <arc_init+0x164>)
  419800:	47a8      	blx	r5
    lv_style_set_line_rounded(&styles->arc_indic, LV_STATE_DEFAULT, true);
  419802:	4c44      	ldr	r4, [pc, #272]	; (419914 <arc_init+0x150>)
  419804:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
  419806:	2201      	movs	r2, #1
  419808:	2194      	movs	r1, #148	; 0x94
  41980a:	301c      	adds	r0, #28
  41980c:	47a8      	blx	r5
    style_init_reset(&styles->arc_bg);
  41980e:	6820      	ldr	r0, [r4, #0]
  419810:	3020      	adds	r0, #32
  419812:	4b41      	ldr	r3, [pc, #260]	; (419918 <arc_init+0x154>)
  419814:	4798      	blx	r3
    lv_style_set_line_color(&styles->arc_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
  419816:	6820      	ldr	r0, [r4, #0]
  419818:	3020      	adds	r0, #32
  41981a:	4b40      	ldr	r3, [pc, #256]	; (41991c <arc_init+0x158>)
  41981c:	6a1b      	ldr	r3, [r3, #32]
  41981e:	f013 0f02 	tst.w	r3, #2
  419822:	d058      	beq.n	4198d6 <arc_init+0x112>
  419824:	f04f 0200 	mov.w	r2, #0
  419828:	2306      	movs	r3, #6
  41982a:	f363 0202 	bfi	r2, r3, #0, #3
  41982e:	231a      	movs	r3, #26
  419830:	f363 02c7 	bfi	r2, r3, #3, #5
  419834:	231b      	movs	r3, #27
  419836:	f363 220c 	bfi	r2, r3, #8, #5
  41983a:	2305      	movs	r3, #5
  41983c:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  419840:	2199      	movs	r1, #153	; 0x99
  419842:	4b37      	ldr	r3, [pc, #220]	; (419920 <arc_init+0x15c>)
  419844:	4798      	blx	r3
    lv_style_set_line_width(&styles->arc_bg, LV_STATE_DEFAULT, LV_DPX(25));
  419846:	4b33      	ldr	r3, [pc, #204]	; (419914 <arc_init+0x150>)
  419848:	681c      	ldr	r4, [r3, #0]
  41984a:	3420      	adds	r4, #32
  41984c:	2000      	movs	r0, #0
  41984e:	4b35      	ldr	r3, [pc, #212]	; (419924 <arc_init+0x160>)
  419850:	4798      	blx	r3
  419852:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419856:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41985a:	3050      	adds	r0, #80	; 0x50
  41985c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419860:	da47      	bge.n	4198f2 <arc_init+0x12e>
  419862:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  419864:	2190      	movs	r1, #144	; 0x90
  419866:	4620      	mov	r0, r4
  419868:	4c2f      	ldr	r4, [pc, #188]	; (419928 <arc_init+0x164>)
  41986a:	47a0      	blx	r4
    lv_style_set_line_rounded(&styles->arc_bg, LV_STATE_DEFAULT, true);
  41986c:	4d29      	ldr	r5, [pc, #164]	; (419914 <arc_init+0x150>)
  41986e:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
  419870:	2201      	movs	r2, #1
  419872:	2194      	movs	r1, #148	; 0x94
  419874:	3020      	adds	r0, #32
  419876:	47a0      	blx	r4
    style_init_reset(&styles->arc_knob);
  419878:	6828      	ldr	r0, [r5, #0]
  41987a:	3024      	adds	r0, #36	; 0x24
  41987c:	4b26      	ldr	r3, [pc, #152]	; (419918 <arc_init+0x154>)
  41987e:	4798      	blx	r3
    lv_style_set_radius(&styles->arc_knob, LV_STATE_DEFAULT,   LV_RADIUS_CIRCLE);
  419880:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  419882:	f647 72ff 	movw	r2, #32767	; 0x7fff
  419886:	2101      	movs	r1, #1
  419888:	3024      	adds	r0, #36	; 0x24
  41988a:	47a0      	blx	r4
    lv_style_set_pad_top(&styles->arc_knob, LV_STATE_DEFAULT,  LV_DPX(0));
  41988c:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41988e:	2200      	movs	r2, #0
  419890:	2110      	movs	r1, #16
  419892:	3024      	adds	r0, #36	; 0x24
  419894:	47a0      	blx	r4
    lv_style_set_pad_bottom(&styles->arc_knob, LV_STATE_DEFAULT,  LV_DPX(0));
  419896:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  419898:	2200      	movs	r2, #0
  41989a:	2111      	movs	r1, #17
  41989c:	3024      	adds	r0, #36	; 0x24
  41989e:	47a0      	blx	r4
    lv_style_set_pad_left(&styles->arc_knob, LV_STATE_DEFAULT,    LV_DPX(0));
  4198a0:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  4198a2:	2200      	movs	r2, #0
  4198a4:	2112      	movs	r1, #18
  4198a6:	3024      	adds	r0, #36	; 0x24
  4198a8:	47a0      	blx	r4
    lv_style_set_pad_right(&styles->arc_knob, LV_STATE_DEFAULT,   LV_DPX(0));
  4198aa:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  4198ac:	2200      	movs	r2, #0
  4198ae:	2113      	movs	r1, #19
  4198b0:	3024      	adds	r0, #36	; 0x24
  4198b2:	47a0      	blx	r4
  4198b4:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_set_line_width(&styles->arc_indic, LV_STATE_DEFAULT, LV_DPX(25));
  4198b6:	2000      	movs	r0, #0
  4198b8:	4b1a      	ldr	r3, [pc, #104]	; (419924 <arc_init+0x160>)
  4198ba:	4798      	blx	r3
  4198bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4198c0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4198c4:	3050      	adds	r0, #80	; 0x50
  4198c6:	4b19      	ldr	r3, [pc, #100]	; (41992c <arc_init+0x168>)
  4198c8:	fb83 2300 	smull	r2, r3, r3, r0
  4198cc:	17c2      	asrs	r2, r0, #31
  4198ce:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4198d2:	b212      	sxth	r2, r2
  4198d4:	e791      	b.n	4197fa <arc_init+0x36>
  4198d6:	2302      	movs	r3, #2
  4198d8:	f04f 0200 	mov.w	r2, #0
  4198dc:	f363 0202 	bfi	r2, r3, #0, #3
  4198e0:	2108      	movs	r1, #8
  4198e2:	f361 02c7 	bfi	r2, r1, #3, #5
  4198e6:	2109      	movs	r1, #9
  4198e8:	f361 220c 	bfi	r2, r1, #8, #5
  4198ec:	f363 324f 	bfi	r2, r3, #13, #3
  4198f0:	e7a6      	b.n	419840 <arc_init+0x7c>
    lv_style_set_line_width(&styles->arc_bg, LV_STATE_DEFAULT, LV_DPX(25));
  4198f2:	2000      	movs	r0, #0
  4198f4:	4b0b      	ldr	r3, [pc, #44]	; (419924 <arc_init+0x160>)
  4198f6:	4798      	blx	r3
  4198f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4198fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419900:	3050      	adds	r0, #80	; 0x50
  419902:	4b0a      	ldr	r3, [pc, #40]	; (41992c <arc_init+0x168>)
  419904:	fb83 2300 	smull	r2, r3, r3, r0
  419908:	17c2      	asrs	r2, r0, #31
  41990a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41990e:	b212      	sxth	r2, r2
  419910:	e7a8      	b.n	419864 <arc_init+0xa0>
  419912:	bf00      	nop
  419914:	20414834 	.word	0x20414834
  419918:	00418a71 	.word	0x00418a71
  41991c:	20414838 	.word	0x20414838
  419920:	0040a3f9 	.word	0x0040a3f9
  419924:	00414dfd 	.word	0x00414dfd
  419928:	0040a269 	.word	0x0040a269
  41992c:	66666667 	.word	0x66666667

00419930 <chart_init>:
{
  419930:	b510      	push	{r4, lr}
    style_init_reset(&styles->chart_bg);
  419932:	4c9a      	ldr	r4, [pc, #616]	; (419b9c <chart_init+0x26c>)
  419934:	6820      	ldr	r0, [r4, #0]
  419936:	3044      	adds	r0, #68	; 0x44
  419938:	4b99      	ldr	r3, [pc, #612]	; (419ba0 <chart_init+0x270>)
  41993a:	4798      	blx	r3
    lv_style_set_text_color(&styles->chart_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
  41993c:	6820      	ldr	r0, [r4, #0]
  41993e:	3044      	adds	r0, #68	; 0x44
  419940:	4b98      	ldr	r3, [pc, #608]	; (419ba4 <chart_init+0x274>)
  419942:	6a1b      	ldr	r3, [r3, #32]
  419944:	f013 0f02 	tst.w	r3, #2
  419948:	f000 80ab 	beq.w	419aa2 <chart_init+0x172>
  41994c:	f04f 0200 	mov.w	r2, #0
  419950:	2305      	movs	r3, #5
  419952:	f363 0202 	bfi	r2, r3, #0, #3
  419956:	2315      	movs	r3, #21
  419958:	f363 02c7 	bfi	r2, r3, #3, #5
  41995c:	f363 220c 	bfi	r2, r3, #8, #5
  419960:	2302      	movs	r3, #2
  419962:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  419966:	f248 0189 	movw	r1, #32905	; 0x8089
  41996a:	4b8f      	ldr	r3, [pc, #572]	; (419ba8 <chart_init+0x278>)
  41996c:	4798      	blx	r3
    style_init_reset(&styles->chart_series_bg);
  41996e:	4c8b      	ldr	r4, [pc, #556]	; (419b9c <chart_init+0x26c>)
  419970:	6820      	ldr	r0, [r4, #0]
  419972:	3048      	adds	r0, #72	; 0x48
  419974:	4b8a      	ldr	r3, [pc, #552]	; (419ba0 <chart_init+0x270>)
  419976:	4798      	blx	r3
    lv_style_set_line_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(1));
  419978:	6824      	ldr	r4, [r4, #0]
  41997a:	3448      	adds	r4, #72	; 0x48
  41997c:	2000      	movs	r0, #0
  41997e:	4b8b      	ldr	r3, [pc, #556]	; (419bac <chart_init+0x27c>)
  419980:	4798      	blx	r3
  419982:	3050      	adds	r0, #80	; 0x50
  419984:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419988:	f280 809a 	bge.w	419ac0 <chart_init+0x190>
  41998c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  41998e:	2190      	movs	r1, #144	; 0x90
  419990:	4620      	mov	r0, r4
  419992:	4b87      	ldr	r3, [pc, #540]	; (419bb0 <chart_init+0x280>)
  419994:	4798      	blx	r3
    lv_style_set_line_dash_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
  419996:	4b81      	ldr	r3, [pc, #516]	; (419b9c <chart_init+0x26c>)
  419998:	681c      	ldr	r4, [r3, #0]
  41999a:	3448      	adds	r4, #72	; 0x48
  41999c:	2000      	movs	r0, #0
  41999e:	4b83      	ldr	r3, [pc, #524]	; (419bac <chart_init+0x27c>)
  4199a0:	4798      	blx	r3
  4199a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4199a6:	0040      	lsls	r0, r0, #1
  4199a8:	3050      	adds	r0, #80	; 0x50
  4199aa:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4199ae:	f280 8093 	bge.w	419ad8 <chart_init+0x1a8>
  4199b2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_WIDTH, line_dash_width, lv_style_int_t, _int, scalar)
  4199b4:	2192      	movs	r1, #146	; 0x92
  4199b6:	4620      	mov	r0, r4
  4199b8:	4b7d      	ldr	r3, [pc, #500]	; (419bb0 <chart_init+0x280>)
  4199ba:	4798      	blx	r3
    lv_style_set_line_dash_gap(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
  4199bc:	4b77      	ldr	r3, [pc, #476]	; (419b9c <chart_init+0x26c>)
  4199be:	681c      	ldr	r4, [r3, #0]
  4199c0:	3448      	adds	r4, #72	; 0x48
  4199c2:	2000      	movs	r0, #0
  4199c4:	4b79      	ldr	r3, [pc, #484]	; (419bac <chart_init+0x27c>)
  4199c6:	4798      	blx	r3
  4199c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4199cc:	0040      	lsls	r0, r0, #1
  4199ce:	3050      	adds	r0, #80	; 0x50
  4199d0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4199d4:	f280 808f 	bge.w	419af6 <chart_init+0x1c6>
  4199d8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int, scalar)
  4199da:	2193      	movs	r1, #147	; 0x93
  4199dc:	4620      	mov	r0, r4
  4199de:	4b74      	ldr	r3, [pc, #464]	; (419bb0 <chart_init+0x280>)
  4199e0:	4798      	blx	r3
    lv_style_set_line_color(&styles->chart_series_bg, LV_STATE_DEFAULT, COLOR_BG_BORDER);
  4199e2:	4b6e      	ldr	r3, [pc, #440]	; (419b9c <chart_init+0x26c>)
  4199e4:	6818      	ldr	r0, [r3, #0]
  4199e6:	3048      	adds	r0, #72	; 0x48
  4199e8:	4b6e      	ldr	r3, [pc, #440]	; (419ba4 <chart_init+0x274>)
  4199ea:	6a1b      	ldr	r3, [r3, #32]
  4199ec:	f013 0f02 	tst.w	r3, #2
  4199f0:	f000 8090 	beq.w	419b14 <chart_init+0x1e4>
  4199f4:	f04f 0200 	mov.w	r2, #0
  4199f8:	2306      	movs	r3, #6
  4199fa:	f363 0202 	bfi	r2, r3, #0, #3
  4199fe:	231a      	movs	r3, #26
  419a00:	f363 02c7 	bfi	r2, r3, #3, #5
  419a04:	231c      	movs	r3, #28
  419a06:	f363 220c 	bfi	r2, r3, #8, #5
  419a0a:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  419a0e:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  419a12:	2199      	movs	r1, #153	; 0x99
  419a14:	4b64      	ldr	r3, [pc, #400]	; (419ba8 <chart_init+0x278>)
  419a16:	4798      	blx	r3
    style_init_reset(&styles->chart_series);
  419a18:	4c60      	ldr	r4, [pc, #384]	; (419b9c <chart_init+0x26c>)
  419a1a:	6820      	ldr	r0, [r4, #0]
  419a1c:	304c      	adds	r0, #76	; 0x4c
  419a1e:	4b60      	ldr	r3, [pc, #384]	; (419ba0 <chart_init+0x270>)
  419a20:	4798      	blx	r3
    lv_style_set_line_width(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(3));
  419a22:	6824      	ldr	r4, [r4, #0]
  419a24:	344c      	adds	r4, #76	; 0x4c
  419a26:	2000      	movs	r0, #0
  419a28:	4b60      	ldr	r3, [pc, #384]	; (419bac <chart_init+0x27c>)
  419a2a:	4798      	blx	r3
  419a2c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  419a30:	3050      	adds	r0, #80	; 0x50
  419a32:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419a36:	da7c      	bge.n	419b32 <chart_init+0x202>
  419a38:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  419a3a:	2190      	movs	r1, #144	; 0x90
  419a3c:	4620      	mov	r0, r4
  419a3e:	4b5c      	ldr	r3, [pc, #368]	; (419bb0 <chart_init+0x280>)
  419a40:	4798      	blx	r3
    lv_style_set_size(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(4));
  419a42:	4b56      	ldr	r3, [pc, #344]	; (419b9c <chart_init+0x26c>)
  419a44:	681c      	ldr	r4, [r3, #0]
  419a46:	344c      	adds	r4, #76	; 0x4c
  419a48:	2000      	movs	r0, #0
  419a4a:	4b58      	ldr	r3, [pc, #352]	; (419bac <chart_init+0x27c>)
  419a4c:	4798      	blx	r3
  419a4e:	3014      	adds	r0, #20
  419a50:	0080      	lsls	r0, r0, #2
  419a52:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419a56:	da7a      	bge.n	419b4e <chart_init+0x21e>
  419a58:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  419a5a:	2103      	movs	r1, #3
  419a5c:	4620      	mov	r0, r4
  419a5e:	4b54      	ldr	r3, [pc, #336]	; (419bb0 <chart_init+0x280>)
  419a60:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(2));     /*Space between columns*/
  419a62:	4b4e      	ldr	r3, [pc, #312]	; (419b9c <chart_init+0x26c>)
  419a64:	681c      	ldr	r4, [r3, #0]
  419a66:	344c      	adds	r4, #76	; 0x4c
  419a68:	2000      	movs	r0, #0
  419a6a:	4b50      	ldr	r3, [pc, #320]	; (419bac <chart_init+0x27c>)
  419a6c:	4798      	blx	r3
  419a6e:	3028      	adds	r0, #40	; 0x28
  419a70:	0040      	lsls	r0, r0, #1
  419a72:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419a76:	da77      	bge.n	419b68 <chart_init+0x238>
  419a78:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  419a7a:	2114      	movs	r1, #20
  419a7c:	4620      	mov	r0, r4
  419a7e:	4b4c      	ldr	r3, [pc, #304]	; (419bb0 <chart_init+0x280>)
  419a80:	4798      	blx	r3
    lv_style_set_radius(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(1));
  419a82:	4b46      	ldr	r3, [pc, #280]	; (419b9c <chart_init+0x26c>)
  419a84:	681c      	ldr	r4, [r3, #0]
  419a86:	344c      	adds	r4, #76	; 0x4c
  419a88:	2000      	movs	r0, #0
  419a8a:	4b48      	ldr	r3, [pc, #288]	; (419bac <chart_init+0x27c>)
  419a8c:	4798      	blx	r3
  419a8e:	3050      	adds	r0, #80	; 0x50
  419a90:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419a94:	da75      	bge.n	419b82 <chart_init+0x252>
  419a96:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  419a98:	2101      	movs	r1, #1
  419a9a:	4620      	mov	r0, r4
  419a9c:	4b44      	ldr	r3, [pc, #272]	; (419bb0 <chart_init+0x280>)
  419a9e:	4798      	blx	r3
  419aa0:	bd10      	pop	{r4, pc}
  419aa2:	f04f 0200 	mov.w	r2, #0
  419aa6:	2305      	movs	r3, #5
  419aa8:	f363 0202 	bfi	r2, r3, #0, #3
  419aac:	2314      	movs	r3, #20
  419aae:	f363 02c7 	bfi	r2, r3, #3, #5
  419ab2:	2317      	movs	r3, #23
  419ab4:	f363 220c 	bfi	r2, r3, #8, #5
  419ab8:	2303      	movs	r3, #3
  419aba:	f363 324f 	bfi	r2, r3, #13, #3
  419abe:	e752      	b.n	419966 <chart_init+0x36>
    lv_style_set_line_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(1));
  419ac0:	2000      	movs	r0, #0
  419ac2:	4b3a      	ldr	r3, [pc, #232]	; (419bac <chart_init+0x27c>)
  419ac4:	4798      	blx	r3
  419ac6:	3050      	adds	r0, #80	; 0x50
  419ac8:	4b3a      	ldr	r3, [pc, #232]	; (419bb4 <chart_init+0x284>)
  419aca:	fb83 2300 	smull	r2, r3, r3, r0
  419ace:	17c2      	asrs	r2, r0, #31
  419ad0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419ad4:	b212      	sxth	r2, r2
  419ad6:	e75a      	b.n	41998e <chart_init+0x5e>
    lv_style_set_line_dash_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
  419ad8:	2000      	movs	r0, #0
  419ada:	4b34      	ldr	r3, [pc, #208]	; (419bac <chart_init+0x27c>)
  419adc:	4798      	blx	r3
  419ade:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419ae2:	0040      	lsls	r0, r0, #1
  419ae4:	3050      	adds	r0, #80	; 0x50
  419ae6:	4b33      	ldr	r3, [pc, #204]	; (419bb4 <chart_init+0x284>)
  419ae8:	fb83 2300 	smull	r2, r3, r3, r0
  419aec:	17c2      	asrs	r2, r0, #31
  419aee:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419af2:	b212      	sxth	r2, r2
  419af4:	e75e      	b.n	4199b4 <chart_init+0x84>
    lv_style_set_line_dash_gap(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
  419af6:	2000      	movs	r0, #0
  419af8:	4b2c      	ldr	r3, [pc, #176]	; (419bac <chart_init+0x27c>)
  419afa:	4798      	blx	r3
  419afc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419b00:	0040      	lsls	r0, r0, #1
  419b02:	3050      	adds	r0, #80	; 0x50
  419b04:	4b2b      	ldr	r3, [pc, #172]	; (419bb4 <chart_init+0x284>)
  419b06:	fb83 2300 	smull	r2, r3, r3, r0
  419b0a:	17c2      	asrs	r2, r0, #31
  419b0c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419b10:	b212      	sxth	r2, r2
  419b12:	e762      	b.n	4199da <chart_init+0xaa>
  419b14:	f04f 0200 	mov.w	r2, #0
  419b18:	2304      	movs	r3, #4
  419b1a:	f363 0202 	bfi	r2, r3, #0, #3
  419b1e:	2310      	movs	r3, #16
  419b20:	f363 02c7 	bfi	r2, r3, #3, #5
  419b24:	2312      	movs	r3, #18
  419b26:	f363 220c 	bfi	r2, r3, #8, #5
  419b2a:	2302      	movs	r3, #2
  419b2c:	f363 324f 	bfi	r2, r3, #13, #3
  419b30:	e76f      	b.n	419a12 <chart_init+0xe2>
    lv_style_set_line_width(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(3));
  419b32:	2000      	movs	r0, #0
  419b34:	4b1d      	ldr	r3, [pc, #116]	; (419bac <chart_init+0x27c>)
  419b36:	4798      	blx	r3
  419b38:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  419b3c:	3050      	adds	r0, #80	; 0x50
  419b3e:	4b1d      	ldr	r3, [pc, #116]	; (419bb4 <chart_init+0x284>)
  419b40:	fb83 2300 	smull	r2, r3, r3, r0
  419b44:	17c2      	asrs	r2, r0, #31
  419b46:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419b4a:	b212      	sxth	r2, r2
  419b4c:	e775      	b.n	419a3a <chart_init+0x10a>
    lv_style_set_size(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(4));
  419b4e:	2000      	movs	r0, #0
  419b50:	4b16      	ldr	r3, [pc, #88]	; (419bac <chart_init+0x27c>)
  419b52:	4798      	blx	r3
  419b54:	3014      	adds	r0, #20
  419b56:	0080      	lsls	r0, r0, #2
  419b58:	4b16      	ldr	r3, [pc, #88]	; (419bb4 <chart_init+0x284>)
  419b5a:	fb83 2300 	smull	r2, r3, r3, r0
  419b5e:	17c2      	asrs	r2, r0, #31
  419b60:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419b64:	b212      	sxth	r2, r2
  419b66:	e778      	b.n	419a5a <chart_init+0x12a>
    lv_style_set_pad_inner(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(2));     /*Space between columns*/
  419b68:	2000      	movs	r0, #0
  419b6a:	4b10      	ldr	r3, [pc, #64]	; (419bac <chart_init+0x27c>)
  419b6c:	4798      	blx	r3
  419b6e:	3028      	adds	r0, #40	; 0x28
  419b70:	0040      	lsls	r0, r0, #1
  419b72:	4b10      	ldr	r3, [pc, #64]	; (419bb4 <chart_init+0x284>)
  419b74:	fb83 2300 	smull	r2, r3, r3, r0
  419b78:	17c2      	asrs	r2, r0, #31
  419b7a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419b7e:	b212      	sxth	r2, r2
  419b80:	e77b      	b.n	419a7a <chart_init+0x14a>
    lv_style_set_radius(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(1));
  419b82:	2000      	movs	r0, #0
  419b84:	4b09      	ldr	r3, [pc, #36]	; (419bac <chart_init+0x27c>)
  419b86:	4798      	blx	r3
  419b88:	3050      	adds	r0, #80	; 0x50
  419b8a:	4b0a      	ldr	r3, [pc, #40]	; (419bb4 <chart_init+0x284>)
  419b8c:	fb83 2300 	smull	r2, r3, r3, r0
  419b90:	17c2      	asrs	r2, r0, #31
  419b92:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419b96:	b212      	sxth	r2, r2
  419b98:	e77e      	b.n	419a98 <chart_init+0x168>
  419b9a:	bf00      	nop
  419b9c:	20414834 	.word	0x20414834
  419ba0:	00418a71 	.word	0x00418a71
  419ba4:	20414838 	.word	0x20414838
  419ba8:	0040a3f9 	.word	0x0040a3f9
  419bac:	00414dfd 	.word	0x00414dfd
  419bb0:	0040a269 	.word	0x0040a269
  419bb4:	66666667 	.word	0x66666667

00419bb8 <calendar_init>:
{
  419bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->calendar_header);
  419bba:	4cbd      	ldr	r4, [pc, #756]	; (419eb0 <calendar_init+0x2f8>)
  419bbc:	6820      	ldr	r0, [r4, #0]
  419bbe:	3034      	adds	r0, #52	; 0x34
  419bc0:	4bbc      	ldr	r3, [pc, #752]	; (419eb4 <calendar_init+0x2fc>)
  419bc2:	4798      	blx	r3
    lv_style_set_pad_top(&styles->calendar_header, LV_STATE_DEFAULT, 0);
  419bc4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  419bc6:	2200      	movs	r2, #0
  419bc8:	2110      	movs	r1, #16
  419bca:	3034      	adds	r0, #52	; 0x34
  419bcc:	4bba      	ldr	r3, [pc, #744]	; (419eb8 <calendar_init+0x300>)
  419bce:	4798      	blx	r3
    lv_style_set_pad_left(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  419bd0:	6824      	ldr	r4, [r4, #0]
  419bd2:	3434      	adds	r4, #52	; 0x34
  419bd4:	2000      	movs	r0, #0
  419bd6:	4bb9      	ldr	r3, [pc, #740]	; (419ebc <calendar_init+0x304>)
  419bd8:	4798      	blx	r3
  419bda:	2801      	cmp	r0, #1
  419bdc:	f240 81e5 	bls.w	419faa <calendar_init+0x3f2>
  419be0:	2000      	movs	r0, #0
  419be2:	4bb7      	ldr	r3, [pc, #732]	; (419ec0 <calendar_init+0x308>)
  419be4:	4798      	blx	r3
  419be6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419bea:	0040      	lsls	r0, r0, #1
  419bec:	3050      	adds	r0, #80	; 0x50
  419bee:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419bf2:	f280 81f3 	bge.w	419fdc <calendar_init+0x424>
  419bf6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  419bf8:	2112      	movs	r1, #18
  419bfa:	4620      	mov	r0, r4
  419bfc:	4bae      	ldr	r3, [pc, #696]	; (419eb8 <calendar_init+0x300>)
  419bfe:	4798      	blx	r3
    lv_style_set_pad_right(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  419c00:	4bab      	ldr	r3, [pc, #684]	; (419eb0 <calendar_init+0x2f8>)
  419c02:	681c      	ldr	r4, [r3, #0]
  419c04:	3434      	adds	r4, #52	; 0x34
  419c06:	2000      	movs	r0, #0
  419c08:	4bac      	ldr	r3, [pc, #688]	; (419ebc <calendar_init+0x304>)
  419c0a:	4798      	blx	r3
  419c0c:	2801      	cmp	r0, #1
  419c0e:	f240 81f4 	bls.w	419ffa <calendar_init+0x442>
  419c12:	2000      	movs	r0, #0
  419c14:	4baa      	ldr	r3, [pc, #680]	; (419ec0 <calendar_init+0x308>)
  419c16:	4798      	blx	r3
  419c18:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419c1c:	0040      	lsls	r0, r0, #1
  419c1e:	3050      	adds	r0, #80	; 0x50
  419c20:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419c24:	f280 8202 	bge.w	41a02c <calendar_init+0x474>
  419c28:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  419c2a:	2113      	movs	r1, #19
  419c2c:	4620      	mov	r0, r4
  419c2e:	4da2      	ldr	r5, [pc, #648]	; (419eb8 <calendar_init+0x300>)
  419c30:	47a8      	blx	r5
    lv_style_set_pad_bottom(&styles->calendar_header, LV_STATE_DEFAULT, 0);
  419c32:	4c9f      	ldr	r4, [pc, #636]	; (419eb0 <calendar_init+0x2f8>)
  419c34:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  419c36:	2200      	movs	r2, #0
  419c38:	2111      	movs	r1, #17
  419c3a:	3034      	adds	r0, #52	; 0x34
  419c3c:	47a8      	blx	r5
    lv_style_set_margin_top(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  419c3e:	6824      	ldr	r4, [r4, #0]
  419c40:	3434      	adds	r4, #52	; 0x34
  419c42:	2000      	movs	r0, #0
  419c44:	4b9d      	ldr	r3, [pc, #628]	; (419ebc <calendar_init+0x304>)
  419c46:	4798      	blx	r3
  419c48:	2801      	cmp	r0, #1
  419c4a:	f240 81fe 	bls.w	41a04a <calendar_init+0x492>
  419c4e:	2000      	movs	r0, #0
  419c50:	4b9b      	ldr	r3, [pc, #620]	; (419ec0 <calendar_init+0x308>)
  419c52:	4798      	blx	r3
  419c54:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419c58:	0040      	lsls	r0, r0, #1
  419c5a:	3050      	adds	r0, #80	; 0x50
  419c5c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419c60:	f280 820c 	bge.w	41a07c <calendar_init+0x4c4>
  419c64:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  419c66:	2115      	movs	r1, #21
  419c68:	4620      	mov	r0, r4
  419c6a:	4b93      	ldr	r3, [pc, #588]	; (419eb8 <calendar_init+0x300>)
  419c6c:	4798      	blx	r3
    lv_style_set_margin_bottom(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  419c6e:	4b90      	ldr	r3, [pc, #576]	; (419eb0 <calendar_init+0x2f8>)
  419c70:	681c      	ldr	r4, [r3, #0]
  419c72:	3434      	adds	r4, #52	; 0x34
  419c74:	2000      	movs	r0, #0
  419c76:	4b91      	ldr	r3, [pc, #580]	; (419ebc <calendar_init+0x304>)
  419c78:	4798      	blx	r3
  419c7a:	2801      	cmp	r0, #1
  419c7c:	f240 820d 	bls.w	41a09a <calendar_init+0x4e2>
  419c80:	2000      	movs	r0, #0
  419c82:	4b8f      	ldr	r3, [pc, #572]	; (419ec0 <calendar_init+0x308>)
  419c84:	4798      	blx	r3
  419c86:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419c8a:	0040      	lsls	r0, r0, #1
  419c8c:	3050      	adds	r0, #80	; 0x50
  419c8e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419c92:	f280 821b 	bge.w	41a0cc <calendar_init+0x514>
  419c96:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  419c98:	2116      	movs	r1, #22
  419c9a:	4620      	mov	r0, r4
  419c9c:	4b86      	ldr	r3, [pc, #536]	; (419eb8 <calendar_init+0x300>)
  419c9e:	4798      	blx	r3
    lv_style_set_text_color(&styles->calendar_header, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x888888) : LV_COLOR_WHITE);
  419ca0:	4b83      	ldr	r3, [pc, #524]	; (419eb0 <calendar_init+0x2f8>)
  419ca2:	6818      	ldr	r0, [r3, #0]
  419ca4:	3034      	adds	r0, #52	; 0x34
  419ca6:	4b87      	ldr	r3, [pc, #540]	; (419ec4 <calendar_init+0x30c>)
  419ca8:	6a1b      	ldr	r3, [r3, #32]
  419caa:	f013 0f02 	tst.w	r3, #2
  419cae:	f000 821c 	beq.w	41a0ea <calendar_init+0x532>
  419cb2:	f04f 0200 	mov.w	r2, #0
  419cb6:	2304      	movs	r3, #4
  419cb8:	f363 0202 	bfi	r2, r3, #0, #3
  419cbc:	2311      	movs	r3, #17
  419cbe:	f363 02c7 	bfi	r2, r3, #3, #5
  419cc2:	f363 220c 	bfi	r2, r3, #8, #5
  419cc6:	2302      	movs	r3, #2
  419cc8:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  419ccc:	f249 0189 	movw	r1, #37001	; 0x9089
  419cd0:	4b7d      	ldr	r3, [pc, #500]	; (419ec8 <calendar_init+0x310>)
  419cd2:	4798      	blx	r3
    style_init_reset(&styles->calendar_daynames);
  419cd4:	4c76      	ldr	r4, [pc, #472]	; (419eb0 <calendar_init+0x2f8>)
  419cd6:	6820      	ldr	r0, [r4, #0]
  419cd8:	3038      	adds	r0, #56	; 0x38
  419cda:	4b76      	ldr	r3, [pc, #472]	; (419eb4 <calendar_init+0x2fc>)
  419cdc:	4798      	blx	r3
    lv_style_set_text_color(&styles->calendar_daynames, LV_STATE_DEFAULT,
  419cde:	6820      	ldr	r0, [r4, #0]
  419ce0:	3038      	adds	r0, #56	; 0x38
                            IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex3(0xeee));
  419ce2:	4b78      	ldr	r3, [pc, #480]	; (419ec4 <calendar_init+0x30c>)
  419ce4:	6a1b      	ldr	r3, [r3, #32]
    lv_style_set_text_color(&styles->calendar_daynames, LV_STATE_DEFAULT,
  419ce6:	f013 0f02 	tst.w	r3, #2
  419cea:	f000 8201 	beq.w	41a0f0 <calendar_init+0x538>
  419cee:	f04f 0200 	mov.w	r2, #0
  419cf2:	2302      	movs	r3, #2
  419cf4:	f363 0202 	bfi	r2, r3, #0, #3
  419cf8:	2306      	movs	r3, #6
  419cfa:	f363 02c7 	bfi	r2, r3, #3, #5
  419cfe:	2309      	movs	r3, #9
  419d00:	f363 220c 	bfi	r2, r3, #8, #5
  419d04:	f36f 324f 	bfc	r2, #13, #3
  419d08:	f248 0189 	movw	r1, #32905	; 0x8089
  419d0c:	4b6e      	ldr	r3, [pc, #440]	; (419ec8 <calendar_init+0x310>)
  419d0e:	4798      	blx	r3
    lv_style_set_pad_left(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  419d10:	4b67      	ldr	r3, [pc, #412]	; (419eb0 <calendar_init+0x2f8>)
  419d12:	681c      	ldr	r4, [r3, #0]
  419d14:	3438      	adds	r4, #56	; 0x38
  419d16:	2000      	movs	r0, #0
  419d18:	4b68      	ldr	r3, [pc, #416]	; (419ebc <calendar_init+0x304>)
  419d1a:	4798      	blx	r3
  419d1c:	2801      	cmp	r0, #1
  419d1e:	f240 81f2 	bls.w	41a106 <calendar_init+0x54e>
  419d22:	2000      	movs	r0, #0
  419d24:	4b66      	ldr	r3, [pc, #408]	; (419ec0 <calendar_init+0x308>)
  419d26:	4798      	blx	r3
  419d28:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419d2c:	0040      	lsls	r0, r0, #1
  419d2e:	3050      	adds	r0, #80	; 0x50
  419d30:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419d34:	f280 8200 	bge.w	41a138 <calendar_init+0x580>
  419d38:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  419d3a:	2112      	movs	r1, #18
  419d3c:	4620      	mov	r0, r4
  419d3e:	4b5e      	ldr	r3, [pc, #376]	; (419eb8 <calendar_init+0x300>)
  419d40:	4798      	blx	r3
    lv_style_set_pad_right(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  419d42:	4b5b      	ldr	r3, [pc, #364]	; (419eb0 <calendar_init+0x2f8>)
  419d44:	681c      	ldr	r4, [r3, #0]
  419d46:	3438      	adds	r4, #56	; 0x38
  419d48:	2000      	movs	r0, #0
  419d4a:	4b5c      	ldr	r3, [pc, #368]	; (419ebc <calendar_init+0x304>)
  419d4c:	4798      	blx	r3
  419d4e:	2801      	cmp	r0, #1
  419d50:	f240 8201 	bls.w	41a156 <calendar_init+0x59e>
  419d54:	2000      	movs	r0, #0
  419d56:	4b5a      	ldr	r3, [pc, #360]	; (419ec0 <calendar_init+0x308>)
  419d58:	4798      	blx	r3
  419d5a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419d5e:	0040      	lsls	r0, r0, #1
  419d60:	3050      	adds	r0, #80	; 0x50
  419d62:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419d66:	f280 820f 	bge.w	41a188 <calendar_init+0x5d0>
  419d6a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  419d6c:	2113      	movs	r1, #19
  419d6e:	4620      	mov	r0, r4
  419d70:	4b51      	ldr	r3, [pc, #324]	; (419eb8 <calendar_init+0x300>)
  419d72:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  419d74:	4b4e      	ldr	r3, [pc, #312]	; (419eb0 <calendar_init+0x2f8>)
  419d76:	681c      	ldr	r4, [r3, #0]
  419d78:	3438      	adds	r4, #56	; 0x38
  419d7a:	2000      	movs	r0, #0
  419d7c:	4b4f      	ldr	r3, [pc, #316]	; (419ebc <calendar_init+0x304>)
  419d7e:	4798      	blx	r3
  419d80:	2801      	cmp	r0, #1
  419d82:	f240 8210 	bls.w	41a1a6 <calendar_init+0x5ee>
  419d86:	2000      	movs	r0, #0
  419d88:	4b4d      	ldr	r3, [pc, #308]	; (419ec0 <calendar_init+0x308>)
  419d8a:	4798      	blx	r3
  419d8c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419d90:	0040      	lsls	r0, r0, #1
  419d92:	3050      	adds	r0, #80	; 0x50
  419d94:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419d98:	f280 822a 	bge.w	41a1f0 <calendar_init+0x638>
  419d9c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  419d9e:	2111      	movs	r1, #17
  419da0:	4620      	mov	r0, r4
  419da2:	4b45      	ldr	r3, [pc, #276]	; (419eb8 <calendar_init+0x300>)
  419da4:	4798      	blx	r3
    style_init_reset(&styles->calendar_date_nums);
  419da6:	4c42      	ldr	r4, [pc, #264]	; (419eb0 <calendar_init+0x2f8>)
  419da8:	6820      	ldr	r0, [r4, #0]
  419daa:	3030      	adds	r0, #48	; 0x30
  419dac:	4b41      	ldr	r3, [pc, #260]	; (419eb4 <calendar_init+0x2fc>)
  419dae:	4798      	blx	r3
    lv_style_set_radius(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(4));
  419db0:	6824      	ldr	r4, [r4, #0]
  419db2:	3430      	adds	r4, #48	; 0x30
  419db4:	2000      	movs	r0, #0
  419db6:	4b42      	ldr	r3, [pc, #264]	; (419ec0 <calendar_init+0x308>)
  419db8:	4798      	blx	r3
  419dba:	3014      	adds	r0, #20
  419dbc:	0080      	lsls	r0, r0, #2
  419dbe:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419dc2:	f280 8224 	bge.w	41a20e <calendar_init+0x656>
  419dc6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  419dc8:	2101      	movs	r1, #1
  419dca:	4620      	mov	r0, r4
  419dcc:	4b3a      	ldr	r3, [pc, #232]	; (419eb8 <calendar_init+0x300>)
  419dce:	4798      	blx	r3
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_CHECKED,
  419dd0:	4b37      	ldr	r3, [pc, #220]	; (419eb0 <calendar_init+0x2f8>)
  419dd2:	6818      	ldr	r0, [r3, #0]
  419dd4:	3030      	adds	r0, #48	; 0x30
                            IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
  419dd6:	4b3b      	ldr	r3, [pc, #236]	; (419ec4 <calendar_init+0x30c>)
  419dd8:	6a1b      	ldr	r3, [r3, #32]
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_CHECKED,
  419dda:	f013 0f02 	tst.w	r3, #2
  419dde:	f000 8223 	beq.w	41a228 <calendar_init+0x670>
  419de2:	f04f 0200 	mov.w	r2, #0
  419de6:	2302      	movs	r3, #2
  419de8:	f363 0202 	bfi	r2, r3, #0, #3
  419dec:	2306      	movs	r3, #6
  419dee:	f363 02c7 	bfi	r2, r3, #3, #5
  419df2:	2309      	movs	r3, #9
  419df4:	f363 220c 	bfi	r2, r3, #8, #5
  419df8:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  419dfc:	f248 1189 	movw	r1, #33161	; 0x8189
  419e00:	4d31      	ldr	r5, [pc, #196]	; (419ec8 <calendar_init+0x310>)
  419e02:	47a8      	blx	r5
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_DISABLED, LV_COLOR_GRAY);
  419e04:	4c2a      	ldr	r4, [pc, #168]	; (419eb0 <calendar_init+0x2f8>)
  419e06:	6820      	ldr	r0, [r4, #0]
  419e08:	4b30      	ldr	r3, [pc, #192]	; (419ecc <calendar_init+0x314>)
  419e0a:	889a      	ldrh	r2, [r3, #4]
  419e0c:	f24a 0189 	movw	r1, #41097	; 0xa089
  419e10:	3030      	adds	r0, #48	; 0x30
  419e12:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_CHECKED, IS_LIGHT ? LV_OPA_20 : LV_OPA_40);
  419e14:	6820      	ldr	r0, [r4, #0]
  419e16:	3030      	adds	r0, #48	; 0x30
  419e18:	4b2a      	ldr	r3, [pc, #168]	; (419ec4 <calendar_init+0x30c>)
  419e1a:	6a1b      	ldr	r3, [r3, #32]
  419e1c:	f013 0f02 	tst.w	r3, #2
  419e20:	f000 8205 	beq.w	41a22e <calendar_init+0x676>
  419e24:	2233      	movs	r2, #51	; 0x33
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  419e26:	f44f 7196 	mov.w	r1, #300	; 0x12c
  419e2a:	4d29      	ldr	r5, [pc, #164]	; (419ed0 <calendar_init+0x318>)
  419e2c:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_PRESSED, LV_OPA_20);
  419e2e:	4c20      	ldr	r4, [pc, #128]	; (419eb0 <calendar_init+0x2f8>)
  419e30:	6820      	ldr	r0, [r4, #0]
  419e32:	2233      	movs	r2, #51	; 0x33
  419e34:	f241 012c 	movw	r1, #4140	; 0x102c
  419e38:	3030      	adds	r0, #48	; 0x30
  419e3a:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_FOCUSED, LV_OPA_COVER);
  419e3c:	6820      	ldr	r0, [r4, #0]
  419e3e:	22ff      	movs	r2, #255	; 0xff
  419e40:	f44f 710b 	mov.w	r1, #556	; 0x22c
  419e44:	3030      	adds	r0, #48	; 0x30
  419e46:	47a8      	blx	r5
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_FOCUSED, LV_COLOR_WHITE);
  419e48:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  419e4a:	4b20      	ldr	r3, [pc, #128]	; (419ecc <calendar_init+0x314>)
  419e4c:	881a      	ldrh	r2, [r3, #0]
  419e4e:	f248 2189 	movw	r1, #33417	; 0x8289
  419e52:	3030      	adds	r0, #48	; 0x30
  419e54:	4e1c      	ldr	r6, [pc, #112]	; (419ec8 <calendar_init+0x310>)
  419e56:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_FOCUSED, theme.color_primary);
  419e58:	6820      	ldr	r0, [r4, #0]
  419e5a:	4d1a      	ldr	r5, [pc, #104]	; (419ec4 <calendar_init+0x30c>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  419e5c:	89aa      	ldrh	r2, [r5, #12]
  419e5e:	f240 2129 	movw	r1, #553	; 0x229
  419e62:	3030      	adds	r0, #48	; 0x30
  419e64:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_DEFAULT,
  419e66:	6820      	ldr	r0, [r4, #0]
  419e68:	3030      	adds	r0, #48	; 0x30
                          IS_LIGHT ? lv_color_hex(0x666666) : LV_COLOR_WHITE);
  419e6a:	6a2b      	ldr	r3, [r5, #32]
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_DEFAULT,
  419e6c:	f013 0f02 	tst.w	r3, #2
  419e70:	f000 81df 	beq.w	41a232 <calendar_init+0x67a>
  419e74:	f04f 0200 	mov.w	r2, #0
  419e78:	2303      	movs	r3, #3
  419e7a:	f363 0202 	bfi	r2, r3, #0, #3
  419e7e:	230c      	movs	r3, #12
  419e80:	f363 02c7 	bfi	r2, r3, #3, #5
  419e84:	f363 220c 	bfi	r2, r3, #8, #5
  419e88:	2301      	movs	r3, #1
  419e8a:	f363 324f 	bfi	r2, r3, #13, #3
  419e8e:	2129      	movs	r1, #41	; 0x29
  419e90:	4d0d      	ldr	r5, [pc, #52]	; (419ec8 <calendar_init+0x310>)
  419e92:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_CHECKED, theme.color_primary);
  419e94:	4c06      	ldr	r4, [pc, #24]	; (419eb0 <calendar_init+0x2f8>)
  419e96:	6820      	ldr	r0, [r4, #0]
  419e98:	4e0a      	ldr	r6, [pc, #40]	; (419ec4 <calendar_init+0x30c>)
  419e9a:	89b2      	ldrh	r2, [r6, #12]
  419e9c:	f240 1129 	movw	r1, #297	; 0x129
  419ea0:	3030      	adds	r0, #48	; 0x30
  419ea2:	47a8      	blx	r5
    lv_style_set_border_width(&styles->calendar_date_nums, LV_STATE_CHECKED, 2);
  419ea4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  419ea6:	2202      	movs	r2, #2
  419ea8:	f44f 7198 	mov.w	r1, #304	; 0x130
  419eac:	3030      	adds	r0, #48	; 0x30
  419eae:	e011      	b.n	419ed4 <calendar_init+0x31c>
  419eb0:	20414834 	.word	0x20414834
  419eb4:	00418a71 	.word	0x00418a71
  419eb8:	0040a269 	.word	0x0040a269
  419ebc:	00414e1d 	.word	0x00414e1d
  419ec0:	00414dfd 	.word	0x00414dfd
  419ec4:	20414838 	.word	0x20414838
  419ec8:	0040a3f9 	.word	0x0040a3f9
  419ecc:	0042fe2c 	.word	0x0042fe2c
  419ed0:	0040a589 	.word	0x0040a589
  419ed4:	4fb9      	ldr	r7, [pc, #740]	; (41a1bc <calendar_init+0x604>)
  419ed6:	47b8      	blx	r7
    lv_style_set_border_side(&styles->calendar_date_nums, LV_STATE_CHECKED, LV_BORDER_SIDE_LEFT);
  419ed8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  419eda:	2204      	movs	r2, #4
  419edc:	f240 1131 	movw	r1, #305	; 0x131
  419ee0:	3030      	adds	r0, #48	; 0x30
  419ee2:	47b8      	blx	r7
    lv_style_set_border_color(&styles->calendar_date_nums, LV_STATE_CHECKED, theme.color_primary);
  419ee4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  419ee6:	89b2      	ldrh	r2, [r6, #12]
  419ee8:	f240 1139 	movw	r1, #313	; 0x139
  419eec:	3030      	adds	r0, #48	; 0x30
  419eee:	47a8      	blx	r5
    lv_style_set_pad_inner(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(3));
  419ef0:	6824      	ldr	r4, [r4, #0]
  419ef2:	3430      	adds	r4, #48	; 0x30
  419ef4:	2000      	movs	r0, #0
  419ef6:	4bb2      	ldr	r3, [pc, #712]	; (41a1c0 <calendar_init+0x608>)
  419ef8:	4798      	blx	r3
  419efa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  419efe:	3050      	adds	r0, #80	; 0x50
  419f00:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419f04:	f280 8198 	bge.w	41a238 <calendar_init+0x680>
  419f08:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  419f0a:	2114      	movs	r1, #20
  419f0c:	4620      	mov	r0, r4
  419f0e:	4bab      	ldr	r3, [pc, #684]	; (41a1bc <calendar_init+0x604>)
  419f10:	4798      	blx	r3
    lv_style_set_pad_left(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  419f12:	4bac      	ldr	r3, [pc, #688]	; (41a1c4 <calendar_init+0x60c>)
  419f14:	681c      	ldr	r4, [r3, #0]
  419f16:	3430      	adds	r4, #48	; 0x30
  419f18:	2000      	movs	r0, #0
  419f1a:	4bab      	ldr	r3, [pc, #684]	; (41a1c8 <calendar_init+0x610>)
  419f1c:	4798      	blx	r3
  419f1e:	2801      	cmp	r0, #1
  419f20:	f240 8198 	bls.w	41a254 <calendar_init+0x69c>
  419f24:	2000      	movs	r0, #0
  419f26:	4ba6      	ldr	r3, [pc, #664]	; (41a1c0 <calendar_init+0x608>)
  419f28:	4798      	blx	r3
  419f2a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419f2e:	0040      	lsls	r0, r0, #1
  419f30:	3050      	adds	r0, #80	; 0x50
  419f32:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419f36:	f280 81a6 	bge.w	41a286 <calendar_init+0x6ce>
  419f3a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  419f3c:	2112      	movs	r1, #18
  419f3e:	4620      	mov	r0, r4
  419f40:	4b9e      	ldr	r3, [pc, #632]	; (41a1bc <calendar_init+0x604>)
  419f42:	4798      	blx	r3
    lv_style_set_pad_right(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  419f44:	4b9f      	ldr	r3, [pc, #636]	; (41a1c4 <calendar_init+0x60c>)
  419f46:	681c      	ldr	r4, [r3, #0]
  419f48:	3430      	adds	r4, #48	; 0x30
  419f4a:	2000      	movs	r0, #0
  419f4c:	4b9e      	ldr	r3, [pc, #632]	; (41a1c8 <calendar_init+0x610>)
  419f4e:	4798      	blx	r3
  419f50:	2801      	cmp	r0, #1
  419f52:	f240 81a7 	bls.w	41a2a4 <calendar_init+0x6ec>
  419f56:	2000      	movs	r0, #0
  419f58:	4b99      	ldr	r3, [pc, #612]	; (41a1c0 <calendar_init+0x608>)
  419f5a:	4798      	blx	r3
  419f5c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419f60:	0040      	lsls	r0, r0, #1
  419f62:	3050      	adds	r0, #80	; 0x50
  419f64:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419f68:	f280 81b5 	bge.w	41a2d6 <calendar_init+0x71e>
  419f6c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  419f6e:	2113      	movs	r1, #19
  419f70:	4620      	mov	r0, r4
  419f72:	4b92      	ldr	r3, [pc, #584]	; (41a1bc <calendar_init+0x604>)
  419f74:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  419f76:	4b93      	ldr	r3, [pc, #588]	; (41a1c4 <calendar_init+0x60c>)
  419f78:	681c      	ldr	r4, [r3, #0]
  419f7a:	3430      	adds	r4, #48	; 0x30
  419f7c:	2000      	movs	r0, #0
  419f7e:	4b92      	ldr	r3, [pc, #584]	; (41a1c8 <calendar_init+0x610>)
  419f80:	4798      	blx	r3
  419f82:	2801      	cmp	r0, #1
  419f84:	f240 81b6 	bls.w	41a2f4 <calendar_init+0x73c>
  419f88:	2000      	movs	r0, #0
  419f8a:	4b8d      	ldr	r3, [pc, #564]	; (41a1c0 <calendar_init+0x608>)
  419f8c:	4798      	blx	r3
  419f8e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419f92:	0040      	lsls	r0, r0, #1
  419f94:	3050      	adds	r0, #80	; 0x50
  419f96:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419f9a:	f280 81c4 	bge.w	41a326 <calendar_init+0x76e>
  419f9e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  419fa0:	2111      	movs	r1, #17
  419fa2:	4620      	mov	r0, r4
  419fa4:	4b85      	ldr	r3, [pc, #532]	; (41a1bc <calendar_init+0x604>)
  419fa6:	4798      	blx	r3
  419fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_set_pad_left(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  419faa:	2000      	movs	r0, #0
  419fac:	4b84      	ldr	r3, [pc, #528]	; (41a1c0 <calendar_init+0x608>)
  419fae:	4798      	blx	r3
  419fb0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419fb4:	3050      	adds	r0, #80	; 0x50
  419fb6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419fba:	da01      	bge.n	419fc0 <calendar_init+0x408>
  419fbc:	2201      	movs	r2, #1
  419fbe:	e61b      	b.n	419bf8 <calendar_init+0x40>
  419fc0:	2000      	movs	r0, #0
  419fc2:	4b7f      	ldr	r3, [pc, #508]	; (41a1c0 <calendar_init+0x608>)
  419fc4:	4798      	blx	r3
  419fc6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419fca:	3050      	adds	r0, #80	; 0x50
  419fcc:	4b7f      	ldr	r3, [pc, #508]	; (41a1cc <calendar_init+0x614>)
  419fce:	fb83 2300 	smull	r2, r3, r3, r0
  419fd2:	17c2      	asrs	r2, r0, #31
  419fd4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419fd8:	b212      	sxth	r2, r2
  419fda:	e60d      	b.n	419bf8 <calendar_init+0x40>
  419fdc:	2000      	movs	r0, #0
  419fde:	4b78      	ldr	r3, [pc, #480]	; (41a1c0 <calendar_init+0x608>)
  419fe0:	4798      	blx	r3
  419fe2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419fe6:	0040      	lsls	r0, r0, #1
  419fe8:	3050      	adds	r0, #80	; 0x50
  419fea:	4b78      	ldr	r3, [pc, #480]	; (41a1cc <calendar_init+0x614>)
  419fec:	fb83 2300 	smull	r2, r3, r3, r0
  419ff0:	17c2      	asrs	r2, r0, #31
  419ff2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419ff6:	b212      	sxth	r2, r2
  419ff8:	e5fe      	b.n	419bf8 <calendar_init+0x40>
    lv_style_set_pad_right(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  419ffa:	2000      	movs	r0, #0
  419ffc:	4b70      	ldr	r3, [pc, #448]	; (41a1c0 <calendar_init+0x608>)
  419ffe:	4798      	blx	r3
  41a000:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a004:	3050      	adds	r0, #80	; 0x50
  41a006:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a00a:	da01      	bge.n	41a010 <calendar_init+0x458>
  41a00c:	2201      	movs	r2, #1
  41a00e:	e60c      	b.n	419c2a <calendar_init+0x72>
  41a010:	2000      	movs	r0, #0
  41a012:	4b6b      	ldr	r3, [pc, #428]	; (41a1c0 <calendar_init+0x608>)
  41a014:	4798      	blx	r3
  41a016:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a01a:	3050      	adds	r0, #80	; 0x50
  41a01c:	4b6b      	ldr	r3, [pc, #428]	; (41a1cc <calendar_init+0x614>)
  41a01e:	fb83 2300 	smull	r2, r3, r3, r0
  41a022:	17c2      	asrs	r2, r0, #31
  41a024:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a028:	b212      	sxth	r2, r2
  41a02a:	e5fe      	b.n	419c2a <calendar_init+0x72>
  41a02c:	2000      	movs	r0, #0
  41a02e:	4b64      	ldr	r3, [pc, #400]	; (41a1c0 <calendar_init+0x608>)
  41a030:	4798      	blx	r3
  41a032:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a036:	0040      	lsls	r0, r0, #1
  41a038:	3050      	adds	r0, #80	; 0x50
  41a03a:	4b64      	ldr	r3, [pc, #400]	; (41a1cc <calendar_init+0x614>)
  41a03c:	fb83 2300 	smull	r2, r3, r3, r0
  41a040:	17c2      	asrs	r2, r0, #31
  41a042:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a046:	b212      	sxth	r2, r2
  41a048:	e5ef      	b.n	419c2a <calendar_init+0x72>
    lv_style_set_margin_top(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  41a04a:	2000      	movs	r0, #0
  41a04c:	4b5c      	ldr	r3, [pc, #368]	; (41a1c0 <calendar_init+0x608>)
  41a04e:	4798      	blx	r3
  41a050:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a054:	3050      	adds	r0, #80	; 0x50
  41a056:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a05a:	da01      	bge.n	41a060 <calendar_init+0x4a8>
  41a05c:	2201      	movs	r2, #1
  41a05e:	e602      	b.n	419c66 <calendar_init+0xae>
  41a060:	2000      	movs	r0, #0
  41a062:	4b57      	ldr	r3, [pc, #348]	; (41a1c0 <calendar_init+0x608>)
  41a064:	4798      	blx	r3
  41a066:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a06a:	3050      	adds	r0, #80	; 0x50
  41a06c:	4b57      	ldr	r3, [pc, #348]	; (41a1cc <calendar_init+0x614>)
  41a06e:	fb83 2300 	smull	r2, r3, r3, r0
  41a072:	17c2      	asrs	r2, r0, #31
  41a074:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a078:	b212      	sxth	r2, r2
  41a07a:	e5f4      	b.n	419c66 <calendar_init+0xae>
  41a07c:	2000      	movs	r0, #0
  41a07e:	4b50      	ldr	r3, [pc, #320]	; (41a1c0 <calendar_init+0x608>)
  41a080:	4798      	blx	r3
  41a082:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a086:	0040      	lsls	r0, r0, #1
  41a088:	3050      	adds	r0, #80	; 0x50
  41a08a:	4b50      	ldr	r3, [pc, #320]	; (41a1cc <calendar_init+0x614>)
  41a08c:	fb83 2300 	smull	r2, r3, r3, r0
  41a090:	17c2      	asrs	r2, r0, #31
  41a092:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a096:	b212      	sxth	r2, r2
  41a098:	e5e5      	b.n	419c66 <calendar_init+0xae>
    lv_style_set_margin_bottom(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  41a09a:	2000      	movs	r0, #0
  41a09c:	4b48      	ldr	r3, [pc, #288]	; (41a1c0 <calendar_init+0x608>)
  41a09e:	4798      	blx	r3
  41a0a0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a0a4:	3050      	adds	r0, #80	; 0x50
  41a0a6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a0aa:	da01      	bge.n	41a0b0 <calendar_init+0x4f8>
  41a0ac:	2201      	movs	r2, #1
  41a0ae:	e5f3      	b.n	419c98 <calendar_init+0xe0>
  41a0b0:	2000      	movs	r0, #0
  41a0b2:	4b43      	ldr	r3, [pc, #268]	; (41a1c0 <calendar_init+0x608>)
  41a0b4:	4798      	blx	r3
  41a0b6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a0ba:	3050      	adds	r0, #80	; 0x50
  41a0bc:	4b43      	ldr	r3, [pc, #268]	; (41a1cc <calendar_init+0x614>)
  41a0be:	fb83 2300 	smull	r2, r3, r3, r0
  41a0c2:	17c2      	asrs	r2, r0, #31
  41a0c4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a0c8:	b212      	sxth	r2, r2
  41a0ca:	e5e5      	b.n	419c98 <calendar_init+0xe0>
  41a0cc:	2000      	movs	r0, #0
  41a0ce:	4b3c      	ldr	r3, [pc, #240]	; (41a1c0 <calendar_init+0x608>)
  41a0d0:	4798      	blx	r3
  41a0d2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a0d6:	0040      	lsls	r0, r0, #1
  41a0d8:	3050      	adds	r0, #80	; 0x50
  41a0da:	4b3c      	ldr	r3, [pc, #240]	; (41a1cc <calendar_init+0x614>)
  41a0dc:	fb83 2300 	smull	r2, r3, r3, r0
  41a0e0:	17c2      	asrs	r2, r0, #31
  41a0e2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a0e6:	b212      	sxth	r2, r2
  41a0e8:	e5d6      	b.n	419c98 <calendar_init+0xe0>
    lv_style_set_text_color(&styles->calendar_header, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x888888) : LV_COLOR_WHITE);
  41a0ea:	4b39      	ldr	r3, [pc, #228]	; (41a1d0 <calendar_init+0x618>)
  41a0ec:	881a      	ldrh	r2, [r3, #0]
  41a0ee:	e5ed      	b.n	419ccc <calendar_init+0x114>
  41a0f0:	f04f 0207 	mov.w	r2, #7
  41a0f4:	231d      	movs	r3, #29
  41a0f6:	f363 02c7 	bfi	r2, r3, #3, #5
  41a0fa:	f363 220c 	bfi	r2, r3, #8, #5
  41a0fe:	2303      	movs	r3, #3
  41a100:	f363 324f 	bfi	r2, r3, #13, #3
  41a104:	e600      	b.n	419d08 <calendar_init+0x150>
    lv_style_set_pad_left(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  41a106:	2000      	movs	r0, #0
  41a108:	4b2d      	ldr	r3, [pc, #180]	; (41a1c0 <calendar_init+0x608>)
  41a10a:	4798      	blx	r3
  41a10c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a110:	3050      	adds	r0, #80	; 0x50
  41a112:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a116:	da01      	bge.n	41a11c <calendar_init+0x564>
  41a118:	2201      	movs	r2, #1
  41a11a:	e60e      	b.n	419d3a <calendar_init+0x182>
  41a11c:	2000      	movs	r0, #0
  41a11e:	4b28      	ldr	r3, [pc, #160]	; (41a1c0 <calendar_init+0x608>)
  41a120:	4798      	blx	r3
  41a122:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a126:	3050      	adds	r0, #80	; 0x50
  41a128:	4b28      	ldr	r3, [pc, #160]	; (41a1cc <calendar_init+0x614>)
  41a12a:	fb83 2300 	smull	r2, r3, r3, r0
  41a12e:	17c2      	asrs	r2, r0, #31
  41a130:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a134:	b212      	sxth	r2, r2
  41a136:	e600      	b.n	419d3a <calendar_init+0x182>
  41a138:	2000      	movs	r0, #0
  41a13a:	4b21      	ldr	r3, [pc, #132]	; (41a1c0 <calendar_init+0x608>)
  41a13c:	4798      	blx	r3
  41a13e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a142:	0040      	lsls	r0, r0, #1
  41a144:	3050      	adds	r0, #80	; 0x50
  41a146:	4b21      	ldr	r3, [pc, #132]	; (41a1cc <calendar_init+0x614>)
  41a148:	fb83 2300 	smull	r2, r3, r3, r0
  41a14c:	17c2      	asrs	r2, r0, #31
  41a14e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a152:	b212      	sxth	r2, r2
  41a154:	e5f1      	b.n	419d3a <calendar_init+0x182>
    lv_style_set_pad_right(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  41a156:	2000      	movs	r0, #0
  41a158:	4b19      	ldr	r3, [pc, #100]	; (41a1c0 <calendar_init+0x608>)
  41a15a:	4798      	blx	r3
  41a15c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a160:	3050      	adds	r0, #80	; 0x50
  41a162:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a166:	da01      	bge.n	41a16c <calendar_init+0x5b4>
  41a168:	2201      	movs	r2, #1
  41a16a:	e5ff      	b.n	419d6c <calendar_init+0x1b4>
  41a16c:	2000      	movs	r0, #0
  41a16e:	4b14      	ldr	r3, [pc, #80]	; (41a1c0 <calendar_init+0x608>)
  41a170:	4798      	blx	r3
  41a172:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a176:	3050      	adds	r0, #80	; 0x50
  41a178:	4b14      	ldr	r3, [pc, #80]	; (41a1cc <calendar_init+0x614>)
  41a17a:	fb83 2300 	smull	r2, r3, r3, r0
  41a17e:	17c2      	asrs	r2, r0, #31
  41a180:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a184:	b212      	sxth	r2, r2
  41a186:	e5f1      	b.n	419d6c <calendar_init+0x1b4>
  41a188:	2000      	movs	r0, #0
  41a18a:	4b0d      	ldr	r3, [pc, #52]	; (41a1c0 <calendar_init+0x608>)
  41a18c:	4798      	blx	r3
  41a18e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a192:	0040      	lsls	r0, r0, #1
  41a194:	3050      	adds	r0, #80	; 0x50
  41a196:	4b0d      	ldr	r3, [pc, #52]	; (41a1cc <calendar_init+0x614>)
  41a198:	fb83 2300 	smull	r2, r3, r3, r0
  41a19c:	17c2      	asrs	r2, r0, #31
  41a19e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a1a2:	b212      	sxth	r2, r2
  41a1a4:	e5e2      	b.n	419d6c <calendar_init+0x1b4>
    lv_style_set_pad_bottom(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  41a1a6:	2000      	movs	r0, #0
  41a1a8:	4b05      	ldr	r3, [pc, #20]	; (41a1c0 <calendar_init+0x608>)
  41a1aa:	4798      	blx	r3
  41a1ac:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a1b0:	3050      	adds	r0, #80	; 0x50
  41a1b2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a1b6:	da0d      	bge.n	41a1d4 <calendar_init+0x61c>
  41a1b8:	2201      	movs	r2, #1
  41a1ba:	e5f0      	b.n	419d9e <calendar_init+0x1e6>
  41a1bc:	0040a269 	.word	0x0040a269
  41a1c0:	00414dfd 	.word	0x00414dfd
  41a1c4:	20414834 	.word	0x20414834
  41a1c8:	00414e1d 	.word	0x00414e1d
  41a1cc:	66666667 	.word	0x66666667
  41a1d0:	0042fe2c 	.word	0x0042fe2c
  41a1d4:	2000      	movs	r0, #0
  41a1d6:	4b5b      	ldr	r3, [pc, #364]	; (41a344 <calendar_init+0x78c>)
  41a1d8:	4798      	blx	r3
  41a1da:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a1de:	3050      	adds	r0, #80	; 0x50
  41a1e0:	4b59      	ldr	r3, [pc, #356]	; (41a348 <calendar_init+0x790>)
  41a1e2:	fb83 2300 	smull	r2, r3, r3, r0
  41a1e6:	17c2      	asrs	r2, r0, #31
  41a1e8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a1ec:	b212      	sxth	r2, r2
  41a1ee:	e5d6      	b.n	419d9e <calendar_init+0x1e6>
  41a1f0:	2000      	movs	r0, #0
  41a1f2:	4b54      	ldr	r3, [pc, #336]	; (41a344 <calendar_init+0x78c>)
  41a1f4:	4798      	blx	r3
  41a1f6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a1fa:	0040      	lsls	r0, r0, #1
  41a1fc:	3050      	adds	r0, #80	; 0x50
  41a1fe:	4b52      	ldr	r3, [pc, #328]	; (41a348 <calendar_init+0x790>)
  41a200:	fb83 2300 	smull	r2, r3, r3, r0
  41a204:	17c2      	asrs	r2, r0, #31
  41a206:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a20a:	b212      	sxth	r2, r2
  41a20c:	e5c7      	b.n	419d9e <calendar_init+0x1e6>
    lv_style_set_radius(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(4));
  41a20e:	2000      	movs	r0, #0
  41a210:	4b4c      	ldr	r3, [pc, #304]	; (41a344 <calendar_init+0x78c>)
  41a212:	4798      	blx	r3
  41a214:	3014      	adds	r0, #20
  41a216:	0080      	lsls	r0, r0, #2
  41a218:	4b4b      	ldr	r3, [pc, #300]	; (41a348 <calendar_init+0x790>)
  41a21a:	fb83 2300 	smull	r2, r3, r3, r0
  41a21e:	17c2      	asrs	r2, r0, #31
  41a220:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a224:	b212      	sxth	r2, r2
  41a226:	e5cf      	b.n	419dc8 <calendar_init+0x210>
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_CHECKED,
  41a228:	4b48      	ldr	r3, [pc, #288]	; (41a34c <calendar_init+0x794>)
  41a22a:	881a      	ldrh	r2, [r3, #0]
  41a22c:	e5e6      	b.n	419dfc <calendar_init+0x244>
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_CHECKED, IS_LIGHT ? LV_OPA_20 : LV_OPA_40);
  41a22e:	2266      	movs	r2, #102	; 0x66
  41a230:	e5f9      	b.n	419e26 <calendar_init+0x26e>
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_DEFAULT,
  41a232:	4b46      	ldr	r3, [pc, #280]	; (41a34c <calendar_init+0x794>)
  41a234:	881a      	ldrh	r2, [r3, #0]
  41a236:	e62a      	b.n	419e8e <calendar_init+0x2d6>
    lv_style_set_pad_inner(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(3));
  41a238:	2000      	movs	r0, #0
  41a23a:	4b42      	ldr	r3, [pc, #264]	; (41a344 <calendar_init+0x78c>)
  41a23c:	4798      	blx	r3
  41a23e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41a242:	3050      	adds	r0, #80	; 0x50
  41a244:	4b40      	ldr	r3, [pc, #256]	; (41a348 <calendar_init+0x790>)
  41a246:	fb83 2300 	smull	r2, r3, r3, r0
  41a24a:	17c2      	asrs	r2, r0, #31
  41a24c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a250:	b212      	sxth	r2, r2
  41a252:	e65a      	b.n	419f0a <calendar_init+0x352>
    lv_style_set_pad_left(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  41a254:	2000      	movs	r0, #0
  41a256:	4b3b      	ldr	r3, [pc, #236]	; (41a344 <calendar_init+0x78c>)
  41a258:	4798      	blx	r3
  41a25a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a25e:	3050      	adds	r0, #80	; 0x50
  41a260:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a264:	da01      	bge.n	41a26a <calendar_init+0x6b2>
  41a266:	2201      	movs	r2, #1
  41a268:	e668      	b.n	419f3c <calendar_init+0x384>
  41a26a:	2000      	movs	r0, #0
  41a26c:	4b35      	ldr	r3, [pc, #212]	; (41a344 <calendar_init+0x78c>)
  41a26e:	4798      	blx	r3
  41a270:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a274:	3050      	adds	r0, #80	; 0x50
  41a276:	4b34      	ldr	r3, [pc, #208]	; (41a348 <calendar_init+0x790>)
  41a278:	fb83 2300 	smull	r2, r3, r3, r0
  41a27c:	17c2      	asrs	r2, r0, #31
  41a27e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a282:	b212      	sxth	r2, r2
  41a284:	e65a      	b.n	419f3c <calendar_init+0x384>
  41a286:	2000      	movs	r0, #0
  41a288:	4b2e      	ldr	r3, [pc, #184]	; (41a344 <calendar_init+0x78c>)
  41a28a:	4798      	blx	r3
  41a28c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a290:	0040      	lsls	r0, r0, #1
  41a292:	3050      	adds	r0, #80	; 0x50
  41a294:	4b2c      	ldr	r3, [pc, #176]	; (41a348 <calendar_init+0x790>)
  41a296:	fb83 2300 	smull	r2, r3, r3, r0
  41a29a:	17c2      	asrs	r2, r0, #31
  41a29c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a2a0:	b212      	sxth	r2, r2
  41a2a2:	e64b      	b.n	419f3c <calendar_init+0x384>
    lv_style_set_pad_right(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  41a2a4:	2000      	movs	r0, #0
  41a2a6:	4b27      	ldr	r3, [pc, #156]	; (41a344 <calendar_init+0x78c>)
  41a2a8:	4798      	blx	r3
  41a2aa:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a2ae:	3050      	adds	r0, #80	; 0x50
  41a2b0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a2b4:	da01      	bge.n	41a2ba <calendar_init+0x702>
  41a2b6:	2201      	movs	r2, #1
  41a2b8:	e659      	b.n	419f6e <calendar_init+0x3b6>
  41a2ba:	2000      	movs	r0, #0
  41a2bc:	4b21      	ldr	r3, [pc, #132]	; (41a344 <calendar_init+0x78c>)
  41a2be:	4798      	blx	r3
  41a2c0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a2c4:	3050      	adds	r0, #80	; 0x50
  41a2c6:	4b20      	ldr	r3, [pc, #128]	; (41a348 <calendar_init+0x790>)
  41a2c8:	fb83 2300 	smull	r2, r3, r3, r0
  41a2cc:	17c2      	asrs	r2, r0, #31
  41a2ce:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a2d2:	b212      	sxth	r2, r2
  41a2d4:	e64b      	b.n	419f6e <calendar_init+0x3b6>
  41a2d6:	2000      	movs	r0, #0
  41a2d8:	4b1a      	ldr	r3, [pc, #104]	; (41a344 <calendar_init+0x78c>)
  41a2da:	4798      	blx	r3
  41a2dc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a2e0:	0040      	lsls	r0, r0, #1
  41a2e2:	3050      	adds	r0, #80	; 0x50
  41a2e4:	4b18      	ldr	r3, [pc, #96]	; (41a348 <calendar_init+0x790>)
  41a2e6:	fb83 2300 	smull	r2, r3, r3, r0
  41a2ea:	17c2      	asrs	r2, r0, #31
  41a2ec:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a2f0:	b212      	sxth	r2, r2
  41a2f2:	e63c      	b.n	419f6e <calendar_init+0x3b6>
    lv_style_set_pad_bottom(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  41a2f4:	2000      	movs	r0, #0
  41a2f6:	4b13      	ldr	r3, [pc, #76]	; (41a344 <calendar_init+0x78c>)
  41a2f8:	4798      	blx	r3
  41a2fa:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a2fe:	3050      	adds	r0, #80	; 0x50
  41a300:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a304:	da01      	bge.n	41a30a <calendar_init+0x752>
  41a306:	2201      	movs	r2, #1
  41a308:	e64a      	b.n	419fa0 <calendar_init+0x3e8>
  41a30a:	2000      	movs	r0, #0
  41a30c:	4b0d      	ldr	r3, [pc, #52]	; (41a344 <calendar_init+0x78c>)
  41a30e:	4798      	blx	r3
  41a310:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a314:	3050      	adds	r0, #80	; 0x50
  41a316:	4b0c      	ldr	r3, [pc, #48]	; (41a348 <calendar_init+0x790>)
  41a318:	fb83 2300 	smull	r2, r3, r3, r0
  41a31c:	17c2      	asrs	r2, r0, #31
  41a31e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a322:	b212      	sxth	r2, r2
  41a324:	e63c      	b.n	419fa0 <calendar_init+0x3e8>
  41a326:	2000      	movs	r0, #0
  41a328:	4b06      	ldr	r3, [pc, #24]	; (41a344 <calendar_init+0x78c>)
  41a32a:	4798      	blx	r3
  41a32c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a330:	0040      	lsls	r0, r0, #1
  41a332:	3050      	adds	r0, #80	; 0x50
  41a334:	4b04      	ldr	r3, [pc, #16]	; (41a348 <calendar_init+0x790>)
  41a336:	fb83 2300 	smull	r2, r3, r3, r0
  41a33a:	17c2      	asrs	r2, r0, #31
  41a33c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a340:	b212      	sxth	r2, r2
  41a342:	e62d      	b.n	419fa0 <calendar_init+0x3e8>
  41a344:	00414dfd 	.word	0x00414dfd
  41a348:	66666667 	.word	0x66666667
  41a34c:	0042fe2c 	.word	0x0042fe2c

0041a350 <cpicker_init>:
{
  41a350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->cpicker_bg);
  41a352:	4c9a      	ldr	r4, [pc, #616]	; (41a5bc <cpicker_init+0x26c>)
  41a354:	6820      	ldr	r0, [r4, #0]
  41a356:	303c      	adds	r0, #60	; 0x3c
  41a358:	4b99      	ldr	r3, [pc, #612]	; (41a5c0 <cpicker_init+0x270>)
  41a35a:	4798      	blx	r3
    lv_style_set_scale_width(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(30));
  41a35c:	6824      	ldr	r4, [r4, #0]
  41a35e:	343c      	adds	r4, #60	; 0x3c
  41a360:	2000      	movs	r0, #0
  41a362:	4b98      	ldr	r3, [pc, #608]	; (41a5c4 <cpicker_init+0x274>)
  41a364:	4798      	blx	r3
  41a366:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a36a:	0040      	lsls	r0, r0, #1
  41a36c:	3050      	adds	r0, #80	; 0x50
  41a36e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a372:	f280 80b6 	bge.w	41a4e2 <cpicker_init+0x192>
  41a376:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
  41a378:	21c0      	movs	r1, #192	; 0xc0
  41a37a:	4620      	mov	r0, r4
  41a37c:	4b92      	ldr	r3, [pc, #584]	; (41a5c8 <cpicker_init+0x278>)
  41a37e:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
  41a380:	4c8e      	ldr	r4, [pc, #568]	; (41a5bc <cpicker_init+0x26c>)
  41a382:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41a384:	22ff      	movs	r2, #255	; 0xff
  41a386:	212c      	movs	r1, #44	; 0x2c
  41a388:	303c      	adds	r0, #60	; 0x3c
  41a38a:	4b90      	ldr	r3, [pc, #576]	; (41a5cc <cpicker_init+0x27c>)
  41a38c:	4798      	blx	r3
    lv_style_set_bg_color(&styles->cpicker_bg, LV_STATE_DEFAULT, COLOR_SCR);
  41a38e:	6820      	ldr	r0, [r4, #0]
  41a390:	303c      	adds	r0, #60	; 0x3c
  41a392:	4b8f      	ldr	r3, [pc, #572]	; (41a5d0 <cpicker_init+0x280>)
  41a394:	6a1b      	ldr	r3, [r3, #32]
  41a396:	f013 0f02 	tst.w	r3, #2
  41a39a:	f000 80b1 	beq.w	41a500 <cpicker_init+0x1b0>
  41a39e:	f04f 0207 	mov.w	r2, #7
  41a3a2:	231d      	movs	r3, #29
  41a3a4:	f363 02c7 	bfi	r2, r3, #3, #5
  41a3a8:	231e      	movs	r3, #30
  41a3aa:	f363 220c 	bfi	r2, r3, #8, #5
  41a3ae:	2303      	movs	r3, #3
  41a3b0:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41a3b4:	2129      	movs	r1, #41	; 0x29
  41a3b6:	4b87      	ldr	r3, [pc, #540]	; (41a5d4 <cpicker_init+0x284>)
  41a3b8:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(20));
  41a3ba:	4b80      	ldr	r3, [pc, #512]	; (41a5bc <cpicker_init+0x26c>)
  41a3bc:	681c      	ldr	r4, [r3, #0]
  41a3be:	343c      	adds	r4, #60	; 0x3c
  41a3c0:	2000      	movs	r0, #0
  41a3c2:	4b80      	ldr	r3, [pc, #512]	; (41a5c4 <cpicker_init+0x274>)
  41a3c4:	4798      	blx	r3
  41a3c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a3ca:	0080      	lsls	r0, r0, #2
  41a3cc:	3050      	adds	r0, #80	; 0x50
  41a3ce:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a3d2:	f280 80a3 	bge.w	41a51c <cpicker_init+0x1cc>
  41a3d6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41a3d8:	2114      	movs	r1, #20
  41a3da:	4620      	mov	r0, r4
  41a3dc:	4e7a      	ldr	r6, [pc, #488]	; (41a5c8 <cpicker_init+0x278>)
  41a3de:	47b0      	blx	r6
    lv_style_set_radius(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  41a3e0:	4c76      	ldr	r4, [pc, #472]	; (41a5bc <cpicker_init+0x26c>)
  41a3e2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41a3e4:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41a3e8:	2101      	movs	r1, #1
  41a3ea:	303c      	adds	r0, #60	; 0x3c
  41a3ec:	47b0      	blx	r6
    style_init_reset(&styles->cpicker_indic);
  41a3ee:	6820      	ldr	r0, [r4, #0]
  41a3f0:	3040      	adds	r0, #64	; 0x40
  41a3f2:	4b73      	ldr	r3, [pc, #460]	; (41a5c0 <cpicker_init+0x270>)
  41a3f4:	4798      	blx	r3
    lv_style_set_radius(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  41a3f6:	6820      	ldr	r0, [r4, #0]
  41a3f8:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41a3fc:	2101      	movs	r1, #1
  41a3fe:	3040      	adds	r0, #64	; 0x40
  41a400:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_COLOR_WHITE);
  41a402:	6820      	ldr	r0, [r4, #0]
  41a404:	4f74      	ldr	r7, [pc, #464]	; (41a5d8 <cpicker_init+0x288>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41a406:	883a      	ldrh	r2, [r7, #0]
  41a408:	2129      	movs	r1, #41	; 0x29
  41a40a:	3040      	adds	r0, #64	; 0x40
  41a40c:	4d71      	ldr	r5, [pc, #452]	; (41a5d4 <cpicker_init+0x284>)
  41a40e:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
  41a410:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41a412:	22ff      	movs	r2, #255	; 0xff
  41a414:	212c      	movs	r1, #44	; 0x2c
  41a416:	3040      	adds	r0, #64	; 0x40
  41a418:	4b6c      	ldr	r3, [pc, #432]	; (41a5cc <cpicker_init+0x27c>)
  41a41a:	4798      	blx	r3
    lv_style_set_border_width(&styles->cpicker_indic, LV_STATE_DEFAULT, 2);
  41a41c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41a41e:	2202      	movs	r2, #2
  41a420:	2130      	movs	r1, #48	; 0x30
  41a422:	3040      	adds	r0, #64	; 0x40
  41a424:	47b0      	blx	r6
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_COLOR_GRAY);
  41a426:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41a428:	88ba      	ldrh	r2, [r7, #4]
  41a42a:	2139      	movs	r1, #57	; 0x39
  41a42c:	3040      	adds	r0, #64	; 0x40
  41a42e:	47a8      	blx	r5
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_FOCUSED, theme.color_primary);
  41a430:	6820      	ldr	r0, [r4, #0]
  41a432:	4e67      	ldr	r6, [pc, #412]	; (41a5d0 <cpicker_init+0x280>)
  41a434:	89b2      	ldrh	r2, [r6, #12]
  41a436:	f240 2139 	movw	r1, #569	; 0x239
  41a43a:	3040      	adds	r0, #64	; 0x40
  41a43c:	47a8      	blx	r5
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_EDITED, theme.color_secondary);
  41a43e:	6820      	ldr	r0, [r4, #0]
  41a440:	89f2      	ldrh	r2, [r6, #14]
  41a442:	f240 4139 	movw	r1, #1081	; 0x439
  41a446:	3040      	adds	r0, #64	; 0x40
  41a448:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  41a44a:	6824      	ldr	r4, [r4, #0]
  41a44c:	3440      	adds	r4, #64	; 0x40
  41a44e:	2000      	movs	r0, #0
  41a450:	4b5c      	ldr	r3, [pc, #368]	; (41a5c4 <cpicker_init+0x274>)
  41a452:	4798      	blx	r3
  41a454:	eb00 0340 	add.w	r3, r0, r0, lsl #1
  41a458:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  41a45c:	3050      	adds	r0, #80	; 0x50
  41a45e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a462:	da6a      	bge.n	41a53a <cpicker_init+0x1ea>
  41a464:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41a466:	2112      	movs	r1, #18
  41a468:	4620      	mov	r0, r4
  41a46a:	4b57      	ldr	r3, [pc, #348]	; (41a5c8 <cpicker_init+0x278>)
  41a46c:	4798      	blx	r3
    lv_style_set_pad_right(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  41a46e:	4b53      	ldr	r3, [pc, #332]	; (41a5bc <cpicker_init+0x26c>)
  41a470:	681c      	ldr	r4, [r3, #0]
  41a472:	3440      	adds	r4, #64	; 0x40
  41a474:	2000      	movs	r0, #0
  41a476:	4b53      	ldr	r3, [pc, #332]	; (41a5c4 <cpicker_init+0x274>)
  41a478:	4798      	blx	r3
  41a47a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
  41a47e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  41a482:	3050      	adds	r0, #80	; 0x50
  41a484:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a488:	da67      	bge.n	41a55a <cpicker_init+0x20a>
  41a48a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41a48c:	2113      	movs	r1, #19
  41a48e:	4620      	mov	r0, r4
  41a490:	4b4d      	ldr	r3, [pc, #308]	; (41a5c8 <cpicker_init+0x278>)
  41a492:	4798      	blx	r3
    lv_style_set_pad_top(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  41a494:	4b49      	ldr	r3, [pc, #292]	; (41a5bc <cpicker_init+0x26c>)
  41a496:	681c      	ldr	r4, [r3, #0]
  41a498:	3440      	adds	r4, #64	; 0x40
  41a49a:	2000      	movs	r0, #0
  41a49c:	4b49      	ldr	r3, [pc, #292]	; (41a5c4 <cpicker_init+0x274>)
  41a49e:	4798      	blx	r3
  41a4a0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
  41a4a4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  41a4a8:	3050      	adds	r0, #80	; 0x50
  41a4aa:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a4ae:	da64      	bge.n	41a57a <cpicker_init+0x22a>
  41a4b0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41a4b2:	2110      	movs	r1, #16
  41a4b4:	4620      	mov	r0, r4
  41a4b6:	4b44      	ldr	r3, [pc, #272]	; (41a5c8 <cpicker_init+0x278>)
  41a4b8:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  41a4ba:	4b40      	ldr	r3, [pc, #256]	; (41a5bc <cpicker_init+0x26c>)
  41a4bc:	681c      	ldr	r4, [r3, #0]
  41a4be:	3440      	adds	r4, #64	; 0x40
  41a4c0:	2000      	movs	r0, #0
  41a4c2:	4b40      	ldr	r3, [pc, #256]	; (41a5c4 <cpicker_init+0x274>)
  41a4c4:	4798      	blx	r3
  41a4c6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
  41a4ca:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  41a4ce:	3050      	adds	r0, #80	; 0x50
  41a4d0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a4d4:	da61      	bge.n	41a59a <cpicker_init+0x24a>
  41a4d6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41a4d8:	2111      	movs	r1, #17
  41a4da:	4620      	mov	r0, r4
  41a4dc:	4b3a      	ldr	r3, [pc, #232]	; (41a5c8 <cpicker_init+0x278>)
  41a4de:	4798      	blx	r3
  41a4e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_set_scale_width(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(30));
  41a4e2:	2000      	movs	r0, #0
  41a4e4:	4b37      	ldr	r3, [pc, #220]	; (41a5c4 <cpicker_init+0x274>)
  41a4e6:	4798      	blx	r3
  41a4e8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a4ec:	0040      	lsls	r0, r0, #1
  41a4ee:	3050      	adds	r0, #80	; 0x50
  41a4f0:	4b3a      	ldr	r3, [pc, #232]	; (41a5dc <cpicker_init+0x28c>)
  41a4f2:	fb83 2300 	smull	r2, r3, r3, r0
  41a4f6:	17c2      	asrs	r2, r0, #31
  41a4f8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a4fc:	b212      	sxth	r2, r2
  41a4fe:	e73b      	b.n	41a378 <cpicker_init+0x28>
  41a500:	2302      	movs	r3, #2
  41a502:	f04f 0200 	mov.w	r2, #0
  41a506:	f363 0202 	bfi	r2, r3, #0, #3
  41a50a:	2108      	movs	r1, #8
  41a50c:	f361 02c7 	bfi	r2, r1, #3, #5
  41a510:	210b      	movs	r1, #11
  41a512:	f361 220c 	bfi	r2, r1, #8, #5
  41a516:	f363 324f 	bfi	r2, r3, #13, #3
  41a51a:	e74b      	b.n	41a3b4 <cpicker_init+0x64>
    lv_style_set_pad_inner(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(20));
  41a51c:	2000      	movs	r0, #0
  41a51e:	4b29      	ldr	r3, [pc, #164]	; (41a5c4 <cpicker_init+0x274>)
  41a520:	4798      	blx	r3
  41a522:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a526:	0080      	lsls	r0, r0, #2
  41a528:	3050      	adds	r0, #80	; 0x50
  41a52a:	4b2c      	ldr	r3, [pc, #176]	; (41a5dc <cpicker_init+0x28c>)
  41a52c:	fb83 2300 	smull	r2, r3, r3, r0
  41a530:	17c2      	asrs	r2, r0, #31
  41a532:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a536:	b212      	sxth	r2, r2
  41a538:	e74e      	b.n	41a3d8 <cpicker_init+0x88>
    lv_style_set_pad_left(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  41a53a:	2000      	movs	r0, #0
  41a53c:	4b21      	ldr	r3, [pc, #132]	; (41a5c4 <cpicker_init+0x274>)
  41a53e:	4798      	blx	r3
  41a540:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  41a544:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  41a548:	3050      	adds	r0, #80	; 0x50
  41a54a:	4b24      	ldr	r3, [pc, #144]	; (41a5dc <cpicker_init+0x28c>)
  41a54c:	fb83 2300 	smull	r2, r3, r3, r0
  41a550:	17c2      	asrs	r2, r0, #31
  41a552:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a556:	b212      	sxth	r2, r2
  41a558:	e785      	b.n	41a466 <cpicker_init+0x116>
    lv_style_set_pad_right(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  41a55a:	2000      	movs	r0, #0
  41a55c:	4b19      	ldr	r3, [pc, #100]	; (41a5c4 <cpicker_init+0x274>)
  41a55e:	4798      	blx	r3
  41a560:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  41a564:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  41a568:	3050      	adds	r0, #80	; 0x50
  41a56a:	4b1c      	ldr	r3, [pc, #112]	; (41a5dc <cpicker_init+0x28c>)
  41a56c:	fb83 2300 	smull	r2, r3, r3, r0
  41a570:	17c2      	asrs	r2, r0, #31
  41a572:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a576:	b212      	sxth	r2, r2
  41a578:	e788      	b.n	41a48c <cpicker_init+0x13c>
    lv_style_set_pad_top(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  41a57a:	2000      	movs	r0, #0
  41a57c:	4b11      	ldr	r3, [pc, #68]	; (41a5c4 <cpicker_init+0x274>)
  41a57e:	4798      	blx	r3
  41a580:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  41a584:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  41a588:	3050      	adds	r0, #80	; 0x50
  41a58a:	4b14      	ldr	r3, [pc, #80]	; (41a5dc <cpicker_init+0x28c>)
  41a58c:	fb83 2300 	smull	r2, r3, r3, r0
  41a590:	17c2      	asrs	r2, r0, #31
  41a592:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a596:	b212      	sxth	r2, r2
  41a598:	e78b      	b.n	41a4b2 <cpicker_init+0x162>
    lv_style_set_pad_bottom(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  41a59a:	2000      	movs	r0, #0
  41a59c:	4b09      	ldr	r3, [pc, #36]	; (41a5c4 <cpicker_init+0x274>)
  41a59e:	4798      	blx	r3
  41a5a0:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  41a5a4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  41a5a8:	3050      	adds	r0, #80	; 0x50
  41a5aa:	4b0c      	ldr	r3, [pc, #48]	; (41a5dc <cpicker_init+0x28c>)
  41a5ac:	fb83 2300 	smull	r2, r3, r3, r0
  41a5b0:	17c2      	asrs	r2, r0, #31
  41a5b2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a5b6:	b212      	sxth	r2, r2
  41a5b8:	e78e      	b.n	41a4d8 <cpicker_init+0x188>
  41a5ba:	bf00      	nop
  41a5bc:	20414834 	.word	0x20414834
  41a5c0:	00418a71 	.word	0x00418a71
  41a5c4:	00414dfd 	.word	0x00414dfd
  41a5c8:	0040a269 	.word	0x0040a269
  41a5cc:	0040a589 	.word	0x0040a589
  41a5d0:	20414838 	.word	0x20414838
  41a5d4:	0040a3f9 	.word	0x0040a3f9
  41a5d8:	0042fe2c 	.word	0x0042fe2c
  41a5dc:	66666667 	.word	0x66666667

0041a5e0 <checkbox_init>:
{
  41a5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->cb_bg);
  41a5e2:	4cb5      	ldr	r4, [pc, #724]	; (41a8b8 <checkbox_init+0x2d8>)
  41a5e4:	6820      	ldr	r0, [r4, #0]
  41a5e6:	3050      	adds	r0, #80	; 0x50
  41a5e8:	4bb4      	ldr	r3, [pc, #720]	; (41a8bc <checkbox_init+0x2dc>)
  41a5ea:	4798      	blx	r3
    lv_style_set_radius(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(4));
  41a5ec:	6824      	ldr	r4, [r4, #0]
  41a5ee:	3450      	adds	r4, #80	; 0x50
  41a5f0:	2000      	movs	r0, #0
  41a5f2:	4bb3      	ldr	r3, [pc, #716]	; (41a8c0 <checkbox_init+0x2e0>)
  41a5f4:	4798      	blx	r3
  41a5f6:	3014      	adds	r0, #20
  41a5f8:	0080      	lsls	r0, r0, #2
  41a5fa:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a5fe:	f280 80e1 	bge.w	41a7c4 <checkbox_init+0x1e4>
  41a602:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41a604:	2101      	movs	r1, #1
  41a606:	4620      	mov	r0, r4
  41a608:	4bae      	ldr	r3, [pc, #696]	; (41a8c4 <checkbox_init+0x2e4>)
  41a60a:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
  41a60c:	4baa      	ldr	r3, [pc, #680]	; (41a8b8 <checkbox_init+0x2d8>)
  41a60e:	681c      	ldr	r4, [r3, #0]
  41a610:	3450      	adds	r4, #80	; 0x50
  41a612:	2000      	movs	r0, #0
  41a614:	4baa      	ldr	r3, [pc, #680]	; (41a8c0 <checkbox_init+0x2e0>)
  41a616:	4798      	blx	r3
  41a618:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a61c:	0043      	lsls	r3, r0, #1
  41a61e:	3350      	adds	r3, #80	; 0x50
  41a620:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  41a624:	f280 80db 	bge.w	41a7de <checkbox_init+0x1fe>
  41a628:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41a62a:	2114      	movs	r1, #20
  41a62c:	4620      	mov	r0, r4
  41a62e:	4ba5      	ldr	r3, [pc, #660]	; (41a8c4 <checkbox_init+0x2e4>)
  41a630:	4798      	blx	r3
    lv_style_set_outline_color(&styles->cb_bg, LV_STATE_DEFAULT, theme.color_primary);
  41a632:	4ca1      	ldr	r4, [pc, #644]	; (41a8b8 <checkbox_init+0x2d8>)
  41a634:	6820      	ldr	r0, [r4, #0]
  41a636:	4ea4      	ldr	r6, [pc, #656]	; (41a8c8 <checkbox_init+0x2e8>)
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
  41a638:	89b2      	ldrh	r2, [r6, #12]
  41a63a:	2149      	movs	r1, #73	; 0x49
  41a63c:	3050      	adds	r0, #80	; 0x50
  41a63e:	4ba3      	ldr	r3, [pc, #652]	; (41a8cc <checkbox_init+0x2ec>)
  41a640:	4798      	blx	r3
    lv_style_set_outline_opa(&styles->cb_bg, LV_STATE_DEFAULT, LV_OPA_TRANSP);
  41a642:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  41a644:	2200      	movs	r2, #0
  41a646:	214c      	movs	r1, #76	; 0x4c
  41a648:	3050      	adds	r0, #80	; 0x50
  41a64a:	4da1      	ldr	r5, [pc, #644]	; (41a8d0 <checkbox_init+0x2f0>)
  41a64c:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->cb_bg, LV_STATE_FOCUSED, LV_OPA_50);
  41a64e:	6820      	ldr	r0, [r4, #0]
  41a650:	227f      	movs	r2, #127	; 0x7f
  41a652:	f44f 7113 	mov.w	r1, #588	; 0x24c
  41a656:	3050      	adds	r0, #80	; 0x50
  41a658:	47a8      	blx	r5
    lv_style_set_outline_width(&styles->cb_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  41a65a:	6824      	ldr	r4, [r4, #0]
  41a65c:	3450      	adds	r4, #80	; 0x50
  41a65e:	6a33      	ldr	r3, [r6, #32]
  41a660:	f013 0f20 	tst.w	r3, #32
  41a664:	f000 80ca 	beq.w	41a7fc <checkbox_init+0x21c>
  41a668:	2200      	movs	r2, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  41a66a:	2140      	movs	r1, #64	; 0x40
  41a66c:	4620      	mov	r0, r4
  41a66e:	4b95      	ldr	r3, [pc, #596]	; (41a8c4 <checkbox_init+0x2e4>)
  41a670:	4798      	blx	r3
    lv_style_set_outline_pad(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
  41a672:	4b91      	ldr	r3, [pc, #580]	; (41a8b8 <checkbox_init+0x2d8>)
  41a674:	681c      	ldr	r4, [r3, #0]
  41a676:	3450      	adds	r4, #80	; 0x50
  41a678:	2000      	movs	r0, #0
  41a67a:	4b91      	ldr	r3, [pc, #580]	; (41a8c0 <checkbox_init+0x2e0>)
  41a67c:	4798      	blx	r3
  41a67e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a682:	0043      	lsls	r3, r0, #1
  41a684:	3350      	adds	r3, #80	; 0x50
  41a686:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  41a68a:	f280 80ce 	bge.w	41a82a <checkbox_init+0x24a>
  41a68e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
  41a690:	2141      	movs	r1, #65	; 0x41
  41a692:	4620      	mov	r0, r4
  41a694:	4d8b      	ldr	r5, [pc, #556]	; (41a8c4 <checkbox_init+0x2e4>)
  41a696:	47a8      	blx	r5
    lv_style_set_transition_time(&styles->cb_bg, LV_STATE_DEFAULT, TRANSITION_TIME);
  41a698:	4c87      	ldr	r4, [pc, #540]	; (41a8b8 <checkbox_init+0x2d8>)
  41a69a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  41a69c:	2200      	movs	r2, #0
  41a69e:	21b0      	movs	r1, #176	; 0xb0
  41a6a0:	3050      	adds	r0, #80	; 0x50
  41a6a2:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->cb_bg, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
  41a6a4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  41a6a6:	224c      	movs	r2, #76	; 0x4c
  41a6a8:	21b7      	movs	r1, #183	; 0xb7
  41a6aa:	3050      	adds	r0, #80	; 0x50
  41a6ac:	47a8      	blx	r5
    style_init_reset(&styles->cb_bullet);
  41a6ae:	6820      	ldr	r0, [r4, #0]
  41a6b0:	3054      	adds	r0, #84	; 0x54
  41a6b2:	4b82      	ldr	r3, [pc, #520]	; (41a8bc <checkbox_init+0x2dc>)
  41a6b4:	4798      	blx	r3
    lv_style_set_outline_opa(&styles->cb_bullet, LV_STATE_FOCUSED, LV_OPA_TRANSP);
  41a6b6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  41a6b8:	2200      	movs	r2, #0
  41a6ba:	f44f 7113 	mov.w	r1, #588	; 0x24c
  41a6be:	3054      	adds	r0, #84	; 0x54
  41a6c0:	4b83      	ldr	r3, [pc, #524]	; (41a8d0 <checkbox_init+0x2f0>)
  41a6c2:	4798      	blx	r3
    lv_style_set_radius(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(4));
  41a6c4:	6824      	ldr	r4, [r4, #0]
  41a6c6:	3454      	adds	r4, #84	; 0x54
  41a6c8:	2000      	movs	r0, #0
  41a6ca:	4b7d      	ldr	r3, [pc, #500]	; (41a8c0 <checkbox_init+0x2e0>)
  41a6cc:	4798      	blx	r3
  41a6ce:	3014      	adds	r0, #20
  41a6d0:	0080      	lsls	r0, r0, #2
  41a6d2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a6d6:	f280 80b7 	bge.w	41a848 <checkbox_init+0x268>
  41a6da:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41a6dc:	2101      	movs	r1, #1
  41a6de:	4620      	mov	r0, r4
  41a6e0:	4e78      	ldr	r6, [pc, #480]	; (41a8c4 <checkbox_init+0x2e4>)
  41a6e2:	47b0      	blx	r6
    lv_style_set_pattern_image(&styles->cb_bullet, LV_STATE_CHECKED, LV_SYMBOL_OK);
  41a6e4:	4c74      	ldr	r4, [pc, #464]	; (41a8b8 <checkbox_init+0x2d8>)
  41a6e6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
  41a6e8:	4a7a      	ldr	r2, [pc, #488]	; (41a8d4 <checkbox_init+0x2f4>)
  41a6ea:	f44f 71b7 	mov.w	r1, #366	; 0x16e
  41a6ee:	3054      	adds	r0, #84	; 0x54
  41a6f0:	4d79      	ldr	r5, [pc, #484]	; (41a8d8 <checkbox_init+0x2f8>)
  41a6f2:	47a8      	blx	r5
    lv_style_set_pattern_recolor(&styles->cb_bullet, LV_STATE_CHECKED, LV_COLOR_WHITE);
  41a6f4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
  41a6f6:	4b79      	ldr	r3, [pc, #484]	; (41a8dc <checkbox_init+0x2fc>)
  41a6f8:	881a      	ldrh	r2, [r3, #0]
  41a6fa:	f240 1169 	movw	r1, #361	; 0x169
  41a6fe:	3054      	adds	r0, #84	; 0x54
  41a700:	4b72      	ldr	r3, [pc, #456]	; (41a8cc <checkbox_init+0x2ec>)
  41a702:	4798      	blx	r3
    lv_style_set_pattern_opa(&styles->cb_bullet, LV_STATE_DEFAULT, LV_OPA_TRANSP);
  41a704:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_OPA, pattern_opa, lv_opa_t, _opa, scalar)
  41a706:	2200      	movs	r2, #0
  41a708:	216c      	movs	r1, #108	; 0x6c
  41a70a:	3054      	adds	r0, #84	; 0x54
  41a70c:	4f70      	ldr	r7, [pc, #448]	; (41a8d0 <checkbox_init+0x2f0>)
  41a70e:	47b8      	blx	r7
    lv_style_set_pattern_opa(&styles->cb_bullet, LV_STATE_CHECKED, LV_OPA_COVER);
  41a710:	6820      	ldr	r0, [r4, #0]
  41a712:	22ff      	movs	r2, #255	; 0xff
  41a714:	f44f 71b6 	mov.w	r1, #364	; 0x16c
  41a718:	3054      	adds	r0, #84	; 0x54
  41a71a:	47b8      	blx	r7
    lv_style_set_transition_prop_3(&styles->cb_bullet, LV_STATE_DEFAULT, LV_STYLE_PATTERN_OPA);
  41a71c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
  41a71e:	226c      	movs	r2, #108	; 0x6c
  41a720:	21b4      	movs	r1, #180	; 0xb4
  41a722:	3054      	adds	r0, #84	; 0x54
  41a724:	47b0      	blx	r6
    lv_style_set_text_font(&styles->cb_bullet, LV_STATE_CHECKED, theme.font_small);
  41a726:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  41a728:	4b67      	ldr	r3, [pc, #412]	; (41a8c8 <checkbox_init+0x2e8>)
  41a72a:	691a      	ldr	r2, [r3, #16]
  41a72c:	f248 118e 	movw	r1, #33166	; 0x818e
  41a730:	3054      	adds	r0, #84	; 0x54
  41a732:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  41a734:	6824      	ldr	r4, [r4, #0]
  41a736:	3454      	adds	r4, #84	; 0x54
  41a738:	2000      	movs	r0, #0
  41a73a:	4b61      	ldr	r3, [pc, #388]	; (41a8c0 <checkbox_init+0x2e0>)
  41a73c:	4798      	blx	r3
  41a73e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41a742:	3050      	adds	r0, #80	; 0x50
  41a744:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a748:	f280 808b 	bge.w	41a862 <checkbox_init+0x282>
  41a74c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41a74e:	2112      	movs	r1, #18
  41a750:	4620      	mov	r0, r4
  41a752:	4b5c      	ldr	r3, [pc, #368]	; (41a8c4 <checkbox_init+0x2e4>)
  41a754:	4798      	blx	r3
    lv_style_set_pad_right(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  41a756:	4b58      	ldr	r3, [pc, #352]	; (41a8b8 <checkbox_init+0x2d8>)
  41a758:	681c      	ldr	r4, [r3, #0]
  41a75a:	3454      	adds	r4, #84	; 0x54
  41a75c:	2000      	movs	r0, #0
  41a75e:	4b58      	ldr	r3, [pc, #352]	; (41a8c0 <checkbox_init+0x2e0>)
  41a760:	4798      	blx	r3
  41a762:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41a766:	3050      	adds	r0, #80	; 0x50
  41a768:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a76c:	f280 8087 	bge.w	41a87e <checkbox_init+0x29e>
  41a770:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41a772:	2113      	movs	r1, #19
  41a774:	4620      	mov	r0, r4
  41a776:	4b53      	ldr	r3, [pc, #332]	; (41a8c4 <checkbox_init+0x2e4>)
  41a778:	4798      	blx	r3
    lv_style_set_pad_top(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  41a77a:	4b4f      	ldr	r3, [pc, #316]	; (41a8b8 <checkbox_init+0x2d8>)
  41a77c:	681c      	ldr	r4, [r3, #0]
  41a77e:	3454      	adds	r4, #84	; 0x54
  41a780:	2000      	movs	r0, #0
  41a782:	4b4f      	ldr	r3, [pc, #316]	; (41a8c0 <checkbox_init+0x2e0>)
  41a784:	4798      	blx	r3
  41a786:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41a78a:	3050      	adds	r0, #80	; 0x50
  41a78c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a790:	f280 8083 	bge.w	41a89a <checkbox_init+0x2ba>
  41a794:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41a796:	2110      	movs	r1, #16
  41a798:	4620      	mov	r0, r4
  41a79a:	4b4a      	ldr	r3, [pc, #296]	; (41a8c4 <checkbox_init+0x2e4>)
  41a79c:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  41a79e:	4b46      	ldr	r3, [pc, #280]	; (41a8b8 <checkbox_init+0x2d8>)
  41a7a0:	681c      	ldr	r4, [r3, #0]
  41a7a2:	3454      	adds	r4, #84	; 0x54
  41a7a4:	2000      	movs	r0, #0
  41a7a6:	4b46      	ldr	r3, [pc, #280]	; (41a8c0 <checkbox_init+0x2e0>)
  41a7a8:	4798      	blx	r3
  41a7aa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41a7ae:	3050      	adds	r0, #80	; 0x50
  41a7b0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a7b4:	f280 8096 	bge.w	41a8e4 <checkbox_init+0x304>
  41a7b8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41a7ba:	2111      	movs	r1, #17
  41a7bc:	4620      	mov	r0, r4
  41a7be:	4b41      	ldr	r3, [pc, #260]	; (41a8c4 <checkbox_init+0x2e4>)
  41a7c0:	4798      	blx	r3
  41a7c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_set_radius(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(4));
  41a7c4:	2000      	movs	r0, #0
  41a7c6:	4b3e      	ldr	r3, [pc, #248]	; (41a8c0 <checkbox_init+0x2e0>)
  41a7c8:	4798      	blx	r3
  41a7ca:	3014      	adds	r0, #20
  41a7cc:	0080      	lsls	r0, r0, #2
  41a7ce:	4b44      	ldr	r3, [pc, #272]	; (41a8e0 <checkbox_init+0x300>)
  41a7d0:	fb83 2300 	smull	r2, r3, r3, r0
  41a7d4:	17c2      	asrs	r2, r0, #31
  41a7d6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a7da:	b212      	sxth	r2, r2
  41a7dc:	e712      	b.n	41a604 <checkbox_init+0x24>
    lv_style_set_pad_inner(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
  41a7de:	2000      	movs	r0, #0
  41a7e0:	4b37      	ldr	r3, [pc, #220]	; (41a8c0 <checkbox_init+0x2e0>)
  41a7e2:	4798      	blx	r3
  41a7e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a7e8:	0043      	lsls	r3, r0, #1
  41a7ea:	3350      	adds	r3, #80	; 0x50
  41a7ec:	493c      	ldr	r1, [pc, #240]	; (41a8e0 <checkbox_init+0x300>)
  41a7ee:	fb81 2103 	smull	r2, r1, r1, r3
  41a7f2:	17da      	asrs	r2, r3, #31
  41a7f4:	ebc2 12a1 	rsb	r2, r2, r1, asr #6
  41a7f8:	b212      	sxth	r2, r2
  41a7fa:	e716      	b.n	41a62a <checkbox_init+0x4a>
    lv_style_set_outline_width(&styles->cb_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  41a7fc:	2000      	movs	r0, #0
  41a7fe:	4b30      	ldr	r3, [pc, #192]	; (41a8c0 <checkbox_init+0x2e0>)
  41a800:	4798      	blx	r3
  41a802:	3028      	adds	r0, #40	; 0x28
  41a804:	0040      	lsls	r0, r0, #1
  41a806:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a80a:	da01      	bge.n	41a810 <checkbox_init+0x230>
  41a80c:	2201      	movs	r2, #1
  41a80e:	e72c      	b.n	41a66a <checkbox_init+0x8a>
  41a810:	2000      	movs	r0, #0
  41a812:	4b2b      	ldr	r3, [pc, #172]	; (41a8c0 <checkbox_init+0x2e0>)
  41a814:	4798      	blx	r3
  41a816:	3028      	adds	r0, #40	; 0x28
  41a818:	0040      	lsls	r0, r0, #1
  41a81a:	4b31      	ldr	r3, [pc, #196]	; (41a8e0 <checkbox_init+0x300>)
  41a81c:	fb83 2300 	smull	r2, r3, r3, r0
  41a820:	17c2      	asrs	r2, r0, #31
  41a822:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a826:	b212      	sxth	r2, r2
  41a828:	e71f      	b.n	41a66a <checkbox_init+0x8a>
    lv_style_set_outline_pad(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
  41a82a:	2000      	movs	r0, #0
  41a82c:	4b24      	ldr	r3, [pc, #144]	; (41a8c0 <checkbox_init+0x2e0>)
  41a82e:	4798      	blx	r3
  41a830:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a834:	0043      	lsls	r3, r0, #1
  41a836:	3350      	adds	r3, #80	; 0x50
  41a838:	4929      	ldr	r1, [pc, #164]	; (41a8e0 <checkbox_init+0x300>)
  41a83a:	fb81 2103 	smull	r2, r1, r1, r3
  41a83e:	17da      	asrs	r2, r3, #31
  41a840:	ebc2 12a1 	rsb	r2, r2, r1, asr #6
  41a844:	b212      	sxth	r2, r2
  41a846:	e723      	b.n	41a690 <checkbox_init+0xb0>
    lv_style_set_radius(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(4));
  41a848:	2000      	movs	r0, #0
  41a84a:	4b1d      	ldr	r3, [pc, #116]	; (41a8c0 <checkbox_init+0x2e0>)
  41a84c:	4798      	blx	r3
  41a84e:	3014      	adds	r0, #20
  41a850:	0080      	lsls	r0, r0, #2
  41a852:	4b23      	ldr	r3, [pc, #140]	; (41a8e0 <checkbox_init+0x300>)
  41a854:	fb83 2300 	smull	r2, r3, r3, r0
  41a858:	17c2      	asrs	r2, r0, #31
  41a85a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a85e:	b212      	sxth	r2, r2
  41a860:	e73c      	b.n	41a6dc <checkbox_init+0xfc>
    lv_style_set_pad_left(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  41a862:	2000      	movs	r0, #0
  41a864:	4b16      	ldr	r3, [pc, #88]	; (41a8c0 <checkbox_init+0x2e0>)
  41a866:	4798      	blx	r3
  41a868:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41a86c:	3050      	adds	r0, #80	; 0x50
  41a86e:	4b1c      	ldr	r3, [pc, #112]	; (41a8e0 <checkbox_init+0x300>)
  41a870:	fb83 2300 	smull	r2, r3, r3, r0
  41a874:	17c2      	asrs	r2, r0, #31
  41a876:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a87a:	b212      	sxth	r2, r2
  41a87c:	e767      	b.n	41a74e <checkbox_init+0x16e>
    lv_style_set_pad_right(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  41a87e:	2000      	movs	r0, #0
  41a880:	4b0f      	ldr	r3, [pc, #60]	; (41a8c0 <checkbox_init+0x2e0>)
  41a882:	4798      	blx	r3
  41a884:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41a888:	3050      	adds	r0, #80	; 0x50
  41a88a:	4b15      	ldr	r3, [pc, #84]	; (41a8e0 <checkbox_init+0x300>)
  41a88c:	fb83 2300 	smull	r2, r3, r3, r0
  41a890:	17c2      	asrs	r2, r0, #31
  41a892:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a896:	b212      	sxth	r2, r2
  41a898:	e76b      	b.n	41a772 <checkbox_init+0x192>
    lv_style_set_pad_top(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  41a89a:	2000      	movs	r0, #0
  41a89c:	4b08      	ldr	r3, [pc, #32]	; (41a8c0 <checkbox_init+0x2e0>)
  41a89e:	4798      	blx	r3
  41a8a0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41a8a4:	3050      	adds	r0, #80	; 0x50
  41a8a6:	4b0e      	ldr	r3, [pc, #56]	; (41a8e0 <checkbox_init+0x300>)
  41a8a8:	fb83 2300 	smull	r2, r3, r3, r0
  41a8ac:	17c2      	asrs	r2, r0, #31
  41a8ae:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a8b2:	b212      	sxth	r2, r2
  41a8b4:	e76f      	b.n	41a796 <checkbox_init+0x1b6>
  41a8b6:	bf00      	nop
  41a8b8:	20414834 	.word	0x20414834
  41a8bc:	00418a71 	.word	0x00418a71
  41a8c0:	00414dfd 	.word	0x00414dfd
  41a8c4:	0040a269 	.word	0x0040a269
  41a8c8:	20414838 	.word	0x20414838
  41a8cc:	0040a3f9 	.word	0x0040a3f9
  41a8d0:	0040a589 	.word	0x0040a589
  41a8d4:	0042fe38 	.word	0x0042fe38
  41a8d8:	0040a719 	.word	0x0040a719
  41a8dc:	0042fe2c 	.word	0x0042fe2c
  41a8e0:	66666667 	.word	0x66666667
    lv_style_set_pad_bottom(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  41a8e4:	2000      	movs	r0, #0
  41a8e6:	4b06      	ldr	r3, [pc, #24]	; (41a900 <checkbox_init+0x320>)
  41a8e8:	4798      	blx	r3
  41a8ea:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41a8ee:	3050      	adds	r0, #80	; 0x50
  41a8f0:	4b04      	ldr	r3, [pc, #16]	; (41a904 <checkbox_init+0x324>)
  41a8f2:	fb83 2300 	smull	r2, r3, r3, r0
  41a8f6:	17c2      	asrs	r2, r0, #31
  41a8f8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a8fc:	b212      	sxth	r2, r2
  41a8fe:	e75c      	b.n	41a7ba <checkbox_init+0x1da>
  41a900:	00414dfd 	.word	0x00414dfd
  41a904:	66666667 	.word	0x66666667

0041a908 <keyboard_init>:
{
  41a908:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->kb_bg);
  41a90a:	4c76      	ldr	r4, [pc, #472]	; (41aae4 <keyboard_init+0x1dc>)
  41a90c:	6820      	ldr	r0, [r4, #0]
  41a90e:	306c      	adds	r0, #108	; 0x6c
  41a910:	4b75      	ldr	r3, [pc, #468]	; (41aae8 <keyboard_init+0x1e0>)
  41a912:	4798      	blx	r3
    lv_style_set_radius(&styles->kb_bg, LV_STATE_DEFAULT, 0);
  41a914:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41a916:	2200      	movs	r2, #0
  41a918:	2101      	movs	r1, #1
  41a91a:	306c      	adds	r0, #108	; 0x6c
  41a91c:	4b73      	ldr	r3, [pc, #460]	; (41aaec <keyboard_init+0x1e4>)
  41a91e:	4798      	blx	r3
    lv_style_set_border_width(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(4));
  41a920:	6824      	ldr	r4, [r4, #0]
  41a922:	346c      	adds	r4, #108	; 0x6c
  41a924:	2000      	movs	r0, #0
  41a926:	4b72      	ldr	r3, [pc, #456]	; (41aaf0 <keyboard_init+0x1e8>)
  41a928:	4798      	blx	r3
  41a92a:	3014      	adds	r0, #20
  41a92c:	0080      	lsls	r0, r0, #2
  41a92e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a932:	f280 8081 	bge.w	41aa38 <keyboard_init+0x130>
  41a936:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41a938:	2130      	movs	r1, #48	; 0x30
  41a93a:	4620      	mov	r0, r4
  41a93c:	4d6b      	ldr	r5, [pc, #428]	; (41aaec <keyboard_init+0x1e4>)
  41a93e:	47a8      	blx	r5
    lv_style_set_border_side(&styles->kb_bg, LV_STATE_DEFAULT, LV_BORDER_SIDE_TOP);
  41a940:	4c68      	ldr	r4, [pc, #416]	; (41aae4 <keyboard_init+0x1dc>)
  41a942:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  41a944:	2202      	movs	r2, #2
  41a946:	2131      	movs	r1, #49	; 0x31
  41a948:	306c      	adds	r0, #108	; 0x6c
  41a94a:	47a8      	blx	r5
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT : LV_COLOR_BLACK);
  41a94c:	6820      	ldr	r0, [r4, #0]
  41a94e:	306c      	adds	r0, #108	; 0x6c
  41a950:	4b68      	ldr	r3, [pc, #416]	; (41aaf4 <keyboard_init+0x1ec>)
  41a952:	6a1b      	ldr	r3, [r3, #32]
  41a954:	f013 0f02 	tst.w	r3, #2
  41a958:	d07b      	beq.n	41aa52 <keyboard_init+0x14a>
  41a95a:	f04f 0200 	mov.w	r2, #0
  41a95e:	2301      	movs	r3, #1
  41a960:	f363 0202 	bfi	r2, r3, #0, #3
  41a964:	2307      	movs	r3, #7
  41a966:	f363 02c7 	bfi	r2, r3, #3, #5
  41a96a:	2308      	movs	r3, #8
  41a96c:	f363 220c 	bfi	r2, r3, #8, #5
  41a970:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41a974:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41a978:	2139      	movs	r1, #57	; 0x39
  41a97a:	4d5f      	ldr	r5, [pc, #380]	; (41aaf8 <keyboard_init+0x1f0>)
  41a97c:	47a8      	blx	r5
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_EDITED, theme.color_secondary);
  41a97e:	4c59      	ldr	r4, [pc, #356]	; (41aae4 <keyboard_init+0x1dc>)
  41a980:	6820      	ldr	r0, [r4, #0]
  41a982:	4b5c      	ldr	r3, [pc, #368]	; (41aaf4 <keyboard_init+0x1ec>)
  41a984:	89da      	ldrh	r2, [r3, #14]
  41a986:	f240 4139 	movw	r1, #1081	; 0x439
  41a98a:	306c      	adds	r0, #108	; 0x6c
  41a98c:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
  41a98e:	6824      	ldr	r4, [r4, #0]
  41a990:	346c      	adds	r4, #108	; 0x6c
  41a992:	2000      	movs	r0, #0
  41a994:	4b56      	ldr	r3, [pc, #344]	; (41aaf0 <keyboard_init+0x1e8>)
  41a996:	4798      	blx	r3
  41a998:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a99c:	3050      	adds	r0, #80	; 0x50
  41a99e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a9a2:	da59      	bge.n	41aa58 <keyboard_init+0x150>
  41a9a4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41a9a6:	2112      	movs	r1, #18
  41a9a8:	4620      	mov	r0, r4
  41a9aa:	4b50      	ldr	r3, [pc, #320]	; (41aaec <keyboard_init+0x1e4>)
  41a9ac:	4798      	blx	r3
    lv_style_set_pad_right(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
  41a9ae:	4b4d      	ldr	r3, [pc, #308]	; (41aae4 <keyboard_init+0x1dc>)
  41a9b0:	681c      	ldr	r4, [r3, #0]
  41a9b2:	346c      	adds	r4, #108	; 0x6c
  41a9b4:	2000      	movs	r0, #0
  41a9b6:	4b4e      	ldr	r3, [pc, #312]	; (41aaf0 <keyboard_init+0x1e8>)
  41a9b8:	4798      	blx	r3
  41a9ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a9be:	3050      	adds	r0, #80	; 0x50
  41a9c0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a9c4:	da56      	bge.n	41aa74 <keyboard_init+0x16c>
  41a9c6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41a9c8:	2113      	movs	r1, #19
  41a9ca:	4620      	mov	r0, r4
  41a9cc:	4b47      	ldr	r3, [pc, #284]	; (41aaec <keyboard_init+0x1e4>)
  41a9ce:	4798      	blx	r3
    lv_style_set_pad_top(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
  41a9d0:	4b44      	ldr	r3, [pc, #272]	; (41aae4 <keyboard_init+0x1dc>)
  41a9d2:	681c      	ldr	r4, [r3, #0]
  41a9d4:	346c      	adds	r4, #108	; 0x6c
  41a9d6:	2000      	movs	r0, #0
  41a9d8:	4b45      	ldr	r3, [pc, #276]	; (41aaf0 <keyboard_init+0x1e8>)
  41a9da:	4798      	blx	r3
  41a9dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a9e0:	3050      	adds	r0, #80	; 0x50
  41a9e2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a9e6:	da53      	bge.n	41aa90 <keyboard_init+0x188>
  41a9e8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41a9ea:	2110      	movs	r1, #16
  41a9ec:	4620      	mov	r0, r4
  41a9ee:	4b3f      	ldr	r3, [pc, #252]	; (41aaec <keyboard_init+0x1e4>)
  41a9f0:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
  41a9f2:	4b3c      	ldr	r3, [pc, #240]	; (41aae4 <keyboard_init+0x1dc>)
  41a9f4:	681c      	ldr	r4, [r3, #0]
  41a9f6:	346c      	adds	r4, #108	; 0x6c
  41a9f8:	2000      	movs	r0, #0
  41a9fa:	4b3d      	ldr	r3, [pc, #244]	; (41aaf0 <keyboard_init+0x1e8>)
  41a9fc:	4798      	blx	r3
  41a9fe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41aa02:	3050      	adds	r0, #80	; 0x50
  41aa04:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41aa08:	da50      	bge.n	41aaac <keyboard_init+0x1a4>
  41aa0a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41aa0c:	2111      	movs	r1, #17
  41aa0e:	4620      	mov	r0, r4
  41aa10:	4b36      	ldr	r3, [pc, #216]	; (41aaec <keyboard_init+0x1e4>)
  41aa12:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(3));
  41aa14:	4b33      	ldr	r3, [pc, #204]	; (41aae4 <keyboard_init+0x1dc>)
  41aa16:	681c      	ldr	r4, [r3, #0]
  41aa18:	346c      	adds	r4, #108	; 0x6c
  41aa1a:	2000      	movs	r0, #0
  41aa1c:	4b34      	ldr	r3, [pc, #208]	; (41aaf0 <keyboard_init+0x1e8>)
  41aa1e:	4798      	blx	r3
  41aa20:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41aa24:	3050      	adds	r0, #80	; 0x50
  41aa26:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41aa2a:	da4d      	bge.n	41aac8 <keyboard_init+0x1c0>
  41aa2c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41aa2e:	2114      	movs	r1, #20
  41aa30:	4620      	mov	r0, r4
  41aa32:	4b2e      	ldr	r3, [pc, #184]	; (41aaec <keyboard_init+0x1e4>)
  41aa34:	4798      	blx	r3
  41aa36:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_set_border_width(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(4));
  41aa38:	2000      	movs	r0, #0
  41aa3a:	4b2d      	ldr	r3, [pc, #180]	; (41aaf0 <keyboard_init+0x1e8>)
  41aa3c:	4798      	blx	r3
  41aa3e:	3014      	adds	r0, #20
  41aa40:	0080      	lsls	r0, r0, #2
  41aa42:	4b2e      	ldr	r3, [pc, #184]	; (41aafc <keyboard_init+0x1f4>)
  41aa44:	fb83 2300 	smull	r2, r3, r3, r0
  41aa48:	17c2      	asrs	r2, r0, #31
  41aa4a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41aa4e:	b212      	sxth	r2, r2
  41aa50:	e772      	b.n	41a938 <keyboard_init+0x30>
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT : LV_COLOR_BLACK);
  41aa52:	f04f 0200 	mov.w	r2, #0
  41aa56:	e78f      	b.n	41a978 <keyboard_init+0x70>
    lv_style_set_pad_left(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
  41aa58:	2000      	movs	r0, #0
  41aa5a:	4b25      	ldr	r3, [pc, #148]	; (41aaf0 <keyboard_init+0x1e8>)
  41aa5c:	4798      	blx	r3
  41aa5e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41aa62:	3050      	adds	r0, #80	; 0x50
  41aa64:	4b25      	ldr	r3, [pc, #148]	; (41aafc <keyboard_init+0x1f4>)
  41aa66:	fb83 2300 	smull	r2, r3, r3, r0
  41aa6a:	17c2      	asrs	r2, r0, #31
  41aa6c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41aa70:	b212      	sxth	r2, r2
  41aa72:	e798      	b.n	41a9a6 <keyboard_init+0x9e>
    lv_style_set_pad_right(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
  41aa74:	2000      	movs	r0, #0
  41aa76:	4b1e      	ldr	r3, [pc, #120]	; (41aaf0 <keyboard_init+0x1e8>)
  41aa78:	4798      	blx	r3
  41aa7a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41aa7e:	3050      	adds	r0, #80	; 0x50
  41aa80:	4b1e      	ldr	r3, [pc, #120]	; (41aafc <keyboard_init+0x1f4>)
  41aa82:	fb83 2300 	smull	r2, r3, r3, r0
  41aa86:	17c2      	asrs	r2, r0, #31
  41aa88:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41aa8c:	b212      	sxth	r2, r2
  41aa8e:	e79b      	b.n	41a9c8 <keyboard_init+0xc0>
    lv_style_set_pad_top(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
  41aa90:	2000      	movs	r0, #0
  41aa92:	4b17      	ldr	r3, [pc, #92]	; (41aaf0 <keyboard_init+0x1e8>)
  41aa94:	4798      	blx	r3
  41aa96:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41aa9a:	3050      	adds	r0, #80	; 0x50
  41aa9c:	4b17      	ldr	r3, [pc, #92]	; (41aafc <keyboard_init+0x1f4>)
  41aa9e:	fb83 2300 	smull	r2, r3, r3, r0
  41aaa2:	17c2      	asrs	r2, r0, #31
  41aaa4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41aaa8:	b212      	sxth	r2, r2
  41aaaa:	e79e      	b.n	41a9ea <keyboard_init+0xe2>
    lv_style_set_pad_bottom(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
  41aaac:	2000      	movs	r0, #0
  41aaae:	4b10      	ldr	r3, [pc, #64]	; (41aaf0 <keyboard_init+0x1e8>)
  41aab0:	4798      	blx	r3
  41aab2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41aab6:	3050      	adds	r0, #80	; 0x50
  41aab8:	4b10      	ldr	r3, [pc, #64]	; (41aafc <keyboard_init+0x1f4>)
  41aaba:	fb83 2300 	smull	r2, r3, r3, r0
  41aabe:	17c2      	asrs	r2, r0, #31
  41aac0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41aac4:	b212      	sxth	r2, r2
  41aac6:	e7a1      	b.n	41aa0c <keyboard_init+0x104>
    lv_style_set_pad_inner(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(3));
  41aac8:	2000      	movs	r0, #0
  41aaca:	4b09      	ldr	r3, [pc, #36]	; (41aaf0 <keyboard_init+0x1e8>)
  41aacc:	4798      	blx	r3
  41aace:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41aad2:	3050      	adds	r0, #80	; 0x50
  41aad4:	4b09      	ldr	r3, [pc, #36]	; (41aafc <keyboard_init+0x1f4>)
  41aad6:	fb83 2300 	smull	r2, r3, r3, r0
  41aada:	17c2      	asrs	r2, r0, #31
  41aadc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41aae0:	b212      	sxth	r2, r2
  41aae2:	e7a4      	b.n	41aa2e <keyboard_init+0x126>
  41aae4:	20414834 	.word	0x20414834
  41aae8:	00418a71 	.word	0x00418a71
  41aaec:	0040a269 	.word	0x0040a269
  41aaf0:	00414dfd 	.word	0x00414dfd
  41aaf4:	20414838 	.word	0x20414838
  41aaf8:	0040a3f9 	.word	0x0040a3f9
  41aafc:	66666667 	.word	0x66666667

0041ab00 <msgbox_init>:
{
  41ab00:	b510      	push	{r4, lr}
    style_init_reset(&styles->mbox_bg);
  41ab02:	4c20      	ldr	r4, [pc, #128]	; (41ab84 <msgbox_init+0x84>)
  41ab04:	6820      	ldr	r0, [r4, #0]
  41ab06:	3080      	adds	r0, #128	; 0x80
  41ab08:	4b1f      	ldr	r3, [pc, #124]	; (41ab88 <msgbox_init+0x88>)
  41ab0a:	4798      	blx	r3
    lv_style_set_shadow_width(&styles->mbox_bg, LV_STATE_DEFAULT, LV_DPX(50));
  41ab0c:	6824      	ldr	r4, [r4, #0]
  41ab0e:	3480      	adds	r4, #128	; 0x80
  41ab10:	2000      	movs	r0, #0
  41ab12:	4b1e      	ldr	r3, [pc, #120]	; (41ab8c <msgbox_init+0x8c>)
  41ab14:	4798      	blx	r3
  41ab16:	2332      	movs	r3, #50	; 0x32
  41ab18:	fb03 f000 	mul.w	r0, r3, r0
  41ab1c:	3050      	adds	r0, #80	; 0x50
  41ab1e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ab22:	da1d      	bge.n	41ab60 <msgbox_init+0x60>
  41ab24:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
  41ab26:	2150      	movs	r1, #80	; 0x50
  41ab28:	4620      	mov	r0, r4
  41ab2a:	4b19      	ldr	r3, [pc, #100]	; (41ab90 <msgbox_init+0x90>)
  41ab2c:	4798      	blx	r3
    lv_style_set_shadow_color(&styles->mbox_bg, LV_STATE_DEFAULT, IS_LIGHT ? LV_COLOR_SILVER : lv_color_hex3(0x999));
  41ab2e:	4b15      	ldr	r3, [pc, #84]	; (41ab84 <msgbox_init+0x84>)
  41ab30:	6818      	ldr	r0, [r3, #0]
  41ab32:	3080      	adds	r0, #128	; 0x80
  41ab34:	4b17      	ldr	r3, [pc, #92]	; (41ab94 <msgbox_init+0x94>)
  41ab36:	6a1b      	ldr	r3, [r3, #32]
  41ab38:	f013 0f02 	tst.w	r3, #2
  41ab3c:	d11f      	bne.n	41ab7e <msgbox_init+0x7e>
  41ab3e:	f04f 0200 	mov.w	r2, #0
  41ab42:	2304      	movs	r3, #4
  41ab44:	f363 0202 	bfi	r2, r3, #0, #3
  41ab48:	2313      	movs	r3, #19
  41ab4a:	f363 02c7 	bfi	r2, r3, #3, #5
  41ab4e:	f363 220c 	bfi	r2, r3, #8, #5
  41ab52:	2306      	movs	r3, #6
  41ab54:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
  41ab58:	2159      	movs	r1, #89	; 0x59
  41ab5a:	4b0f      	ldr	r3, [pc, #60]	; (41ab98 <msgbox_init+0x98>)
  41ab5c:	4798      	blx	r3
  41ab5e:	bd10      	pop	{r4, pc}
    lv_style_set_shadow_width(&styles->mbox_bg, LV_STATE_DEFAULT, LV_DPX(50));
  41ab60:	2000      	movs	r0, #0
  41ab62:	4b0a      	ldr	r3, [pc, #40]	; (41ab8c <msgbox_init+0x8c>)
  41ab64:	4798      	blx	r3
  41ab66:	2232      	movs	r2, #50	; 0x32
  41ab68:	fb02 f000 	mul.w	r0, r2, r0
  41ab6c:	3050      	adds	r0, #80	; 0x50
  41ab6e:	4b0b      	ldr	r3, [pc, #44]	; (41ab9c <msgbox_init+0x9c>)
  41ab70:	fb83 2300 	smull	r2, r3, r3, r0
  41ab74:	17c2      	asrs	r2, r0, #31
  41ab76:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41ab7a:	b212      	sxth	r2, r2
  41ab7c:	e7d3      	b.n	41ab26 <msgbox_init+0x26>
    lv_style_set_shadow_color(&styles->mbox_bg, LV_STATE_DEFAULT, IS_LIGHT ? LV_COLOR_SILVER : lv_color_hex3(0x999));
  41ab7e:	4b08      	ldr	r3, [pc, #32]	; (41aba0 <msgbox_init+0xa0>)
  41ab80:	891a      	ldrh	r2, [r3, #8]
  41ab82:	e7e9      	b.n	41ab58 <msgbox_init+0x58>
  41ab84:	20414834 	.word	0x20414834
  41ab88:	00418a71 	.word	0x00418a71
  41ab8c:	00414dfd 	.word	0x00414dfd
  41ab90:	0040a269 	.word	0x0040a269
  41ab94:	20414838 	.word	0x20414838
  41ab98:	0040a3f9 	.word	0x0040a3f9
  41ab9c:	66666667 	.word	0x66666667
  41aba0:	0042fe2c 	.word	0x0042fe2c

0041aba4 <page_init>:
{
  41aba4:	b510      	push	{r4, lr}
    style_init_reset(&styles->sb);
  41aba6:	4c5a      	ldr	r4, [pc, #360]	; (41ad10 <page_init+0x16c>)
  41aba8:	6820      	ldr	r0, [r4, #0]
  41abaa:	3084      	adds	r0, #132	; 0x84
  41abac:	4b59      	ldr	r3, [pc, #356]	; (41ad14 <page_init+0x170>)
  41abae:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->sb, LV_STATE_DEFAULT, LV_OPA_COVER);
  41abb0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41abb2:	22ff      	movs	r2, #255	; 0xff
  41abb4:	212c      	movs	r1, #44	; 0x2c
  41abb6:	3084      	adds	r0, #132	; 0x84
  41abb8:	4b57      	ldr	r3, [pc, #348]	; (41ad18 <page_init+0x174>)
  41abba:	4798      	blx	r3
    lv_style_set_bg_color(&styles->sb, LV_STATE_DEFAULT, (IS_LIGHT ? lv_color_hex(0xcccfd1) : lv_color_hex(0x777f85)));
  41abbc:	6820      	ldr	r0, [r4, #0]
  41abbe:	3084      	adds	r0, #132	; 0x84
  41abc0:	4b56      	ldr	r3, [pc, #344]	; (41ad1c <page_init+0x178>)
  41abc2:	6a1b      	ldr	r3, [r3, #32]
  41abc4:	f013 0f02 	tst.w	r3, #2
  41abc8:	d068      	beq.n	41ac9c <page_init+0xf8>
  41abca:	f04f 0200 	mov.w	r2, #0
  41abce:	2306      	movs	r3, #6
  41abd0:	f363 0202 	bfi	r2, r3, #0, #3
  41abd4:	2319      	movs	r3, #25
  41abd6:	f363 02c7 	bfi	r2, r3, #3, #5
  41abda:	231a      	movs	r3, #26
  41abdc:	f363 220c 	bfi	r2, r3, #8, #5
  41abe0:	2303      	movs	r3, #3
  41abe2:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41abe6:	2129      	movs	r1, #41	; 0x29
  41abe8:	4b4d      	ldr	r3, [pc, #308]	; (41ad20 <page_init+0x17c>)
  41abea:	4798      	blx	r3
    lv_style_set_radius(&styles->sb, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  41abec:	4c48      	ldr	r4, [pc, #288]	; (41ad10 <page_init+0x16c>)
  41abee:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41abf0:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41abf4:	2101      	movs	r1, #1
  41abf6:	3084      	adds	r0, #132	; 0x84
  41abf8:	4b4a      	ldr	r3, [pc, #296]	; (41ad24 <page_init+0x180>)
  41abfa:	4798      	blx	r3
    lv_style_set_size(&styles->sb, LV_STATE_DEFAULT, LV_DPX(7));
  41abfc:	6824      	ldr	r4, [r4, #0]
  41abfe:	3484      	adds	r4, #132	; 0x84
  41ac00:	2000      	movs	r0, #0
  41ac02:	4b49      	ldr	r3, [pc, #292]	; (41ad28 <page_init+0x184>)
  41ac04:	4798      	blx	r3
  41ac06:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41ac0a:	3050      	adds	r0, #80	; 0x50
  41ac0c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ac10:	da54      	bge.n	41acbc <page_init+0x118>
  41ac12:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  41ac14:	2103      	movs	r1, #3
  41ac16:	4620      	mov	r0, r4
  41ac18:	4b42      	ldr	r3, [pc, #264]	; (41ad24 <page_init+0x180>)
  41ac1a:	4798      	blx	r3
    lv_style_set_pad_right(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
  41ac1c:	4b3c      	ldr	r3, [pc, #240]	; (41ad10 <page_init+0x16c>)
  41ac1e:	681c      	ldr	r4, [r3, #0]
  41ac20:	3484      	adds	r4, #132	; 0x84
  41ac22:	2000      	movs	r0, #0
  41ac24:	4b40      	ldr	r3, [pc, #256]	; (41ad28 <page_init+0x184>)
  41ac26:	4798      	blx	r3
  41ac28:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41ac2c:	3050      	adds	r0, #80	; 0x50
  41ac2e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ac32:	da51      	bge.n	41acd8 <page_init+0x134>
  41ac34:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41ac36:	2113      	movs	r1, #19
  41ac38:	4620      	mov	r0, r4
  41ac3a:	4b3a      	ldr	r3, [pc, #232]	; (41ad24 <page_init+0x180>)
  41ac3c:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
  41ac3e:	4b34      	ldr	r3, [pc, #208]	; (41ad10 <page_init+0x16c>)
  41ac40:	681c      	ldr	r4, [r3, #0]
  41ac42:	3484      	adds	r4, #132	; 0x84
  41ac44:	2000      	movs	r0, #0
  41ac46:	4b38      	ldr	r3, [pc, #224]	; (41ad28 <page_init+0x184>)
  41ac48:	4798      	blx	r3
  41ac4a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41ac4e:	3050      	adds	r0, #80	; 0x50
  41ac50:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ac54:	da4e      	bge.n	41acf4 <page_init+0x150>
  41ac56:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41ac58:	2111      	movs	r1, #17
  41ac5a:	4620      	mov	r0, r4
  41ac5c:	4b31      	ldr	r3, [pc, #196]	; (41ad24 <page_init+0x180>)
  41ac5e:	4798      	blx	r3
    style_init_reset(&styles->edge_flash);
  41ac60:	4c2b      	ldr	r4, [pc, #172]	; (41ad10 <page_init+0x16c>)
  41ac62:	6820      	ldr	r0, [r4, #0]
  41ac64:	3088      	adds	r0, #136	; 0x88
  41ac66:	4b2b      	ldr	r3, [pc, #172]	; (41ad14 <page_init+0x170>)
  41ac68:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->edge_flash, LV_STATE_DEFAULT, LV_OPA_COVER);
  41ac6a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41ac6c:	22ff      	movs	r2, #255	; 0xff
  41ac6e:	212c      	movs	r1, #44	; 0x2c
  41ac70:	3088      	adds	r0, #136	; 0x88
  41ac72:	4b29      	ldr	r3, [pc, #164]	; (41ad18 <page_init+0x174>)
  41ac74:	4798      	blx	r3
    lv_style_set_bg_color(&styles->edge_flash, LV_STATE_DEFAULT,  lv_color_hex3(0x888));
  41ac76:	6820      	ldr	r0, [r4, #0]
  41ac78:	f04f 0200 	mov.w	r2, #0
  41ac7c:	2304      	movs	r3, #4
  41ac7e:	f363 0202 	bfi	r2, r3, #0, #3
  41ac82:	2311      	movs	r3, #17
  41ac84:	f363 02c7 	bfi	r2, r3, #3, #5
  41ac88:	f363 220c 	bfi	r2, r3, #8, #5
  41ac8c:	2302      	movs	r3, #2
  41ac8e:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41ac92:	2129      	movs	r1, #41	; 0x29
  41ac94:	3088      	adds	r0, #136	; 0x88
  41ac96:	4b22      	ldr	r3, [pc, #136]	; (41ad20 <page_init+0x17c>)
  41ac98:	4798      	blx	r3
  41ac9a:	bd10      	pop	{r4, pc}
  41ac9c:	f04f 0200 	mov.w	r2, #0
  41aca0:	2303      	movs	r3, #3
  41aca2:	f363 0202 	bfi	r2, r3, #0, #3
  41aca6:	230e      	movs	r3, #14
  41aca8:	f363 02c7 	bfi	r2, r3, #3, #5
  41acac:	2310      	movs	r3, #16
  41acae:	f363 220c 	bfi	r2, r3, #8, #5
  41acb2:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41acb6:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
  41acba:	e794      	b.n	41abe6 <page_init+0x42>
    lv_style_set_size(&styles->sb, LV_STATE_DEFAULT, LV_DPX(7));
  41acbc:	2000      	movs	r0, #0
  41acbe:	4b1a      	ldr	r3, [pc, #104]	; (41ad28 <page_init+0x184>)
  41acc0:	4798      	blx	r3
  41acc2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41acc6:	3050      	adds	r0, #80	; 0x50
  41acc8:	4b18      	ldr	r3, [pc, #96]	; (41ad2c <page_init+0x188>)
  41acca:	fb83 2300 	smull	r2, r3, r3, r0
  41acce:	17c2      	asrs	r2, r0, #31
  41acd0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41acd4:	b212      	sxth	r2, r2
  41acd6:	e79d      	b.n	41ac14 <page_init+0x70>
    lv_style_set_pad_right(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
  41acd8:	2000      	movs	r0, #0
  41acda:	4b13      	ldr	r3, [pc, #76]	; (41ad28 <page_init+0x184>)
  41acdc:	4798      	blx	r3
  41acde:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41ace2:	3050      	adds	r0, #80	; 0x50
  41ace4:	4b11      	ldr	r3, [pc, #68]	; (41ad2c <page_init+0x188>)
  41ace6:	fb83 2300 	smull	r2, r3, r3, r0
  41acea:	17c2      	asrs	r2, r0, #31
  41acec:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41acf0:	b212      	sxth	r2, r2
  41acf2:	e7a0      	b.n	41ac36 <page_init+0x92>
    lv_style_set_pad_bottom(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
  41acf4:	2000      	movs	r0, #0
  41acf6:	4b0c      	ldr	r3, [pc, #48]	; (41ad28 <page_init+0x184>)
  41acf8:	4798      	blx	r3
  41acfa:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41acfe:	3050      	adds	r0, #80	; 0x50
  41ad00:	4b0a      	ldr	r3, [pc, #40]	; (41ad2c <page_init+0x188>)
  41ad02:	fb83 2300 	smull	r2, r3, r3, r0
  41ad06:	17c2      	asrs	r2, r0, #31
  41ad08:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41ad0c:	b212      	sxth	r2, r2
  41ad0e:	e7a3      	b.n	41ac58 <page_init+0xb4>
  41ad10:	20414834 	.word	0x20414834
  41ad14:	00418a71 	.word	0x00418a71
  41ad18:	0040a589 	.word	0x0040a589
  41ad1c:	20414838 	.word	0x20414838
  41ad20:	0040a3f9 	.word	0x0040a3f9
  41ad24:	0040a269 	.word	0x0040a269
  41ad28:	00414dfd 	.word	0x00414dfd
  41ad2c:	66666667 	.word	0x66666667

0041ad30 <textarea_init>:
{
  41ad30:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->ta_cursor);
  41ad32:	4c4a      	ldr	r4, [pc, #296]	; (41ae5c <textarea_init+0x12c>)
  41ad34:	6820      	ldr	r0, [r4, #0]
  41ad36:	30b8      	adds	r0, #184	; 0xb8
  41ad38:	4b49      	ldr	r3, [pc, #292]	; (41ae60 <textarea_init+0x130>)
  41ad3a:	4798      	blx	r3
    lv_style_set_border_color(&styles->ta_cursor, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
  41ad3c:	6820      	ldr	r0, [r4, #0]
  41ad3e:	30b8      	adds	r0, #184	; 0xb8
  41ad40:	4b48      	ldr	r3, [pc, #288]	; (41ae64 <textarea_init+0x134>)
  41ad42:	6a1b      	ldr	r3, [r3, #32]
  41ad44:	f013 0f02 	tst.w	r3, #2
  41ad48:	d052      	beq.n	41adf0 <textarea_init+0xc0>
  41ad4a:	f04f 0200 	mov.w	r2, #0
  41ad4e:	2302      	movs	r3, #2
  41ad50:	f363 0202 	bfi	r2, r3, #0, #3
  41ad54:	2306      	movs	r3, #6
  41ad56:	f363 02c7 	bfi	r2, r3, #3, #5
  41ad5a:	2309      	movs	r3, #9
  41ad5c:	f363 220c 	bfi	r2, r3, #8, #5
  41ad60:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41ad64:	2139      	movs	r1, #57	; 0x39
  41ad66:	4b40      	ldr	r3, [pc, #256]	; (41ae68 <textarea_init+0x138>)
  41ad68:	4798      	blx	r3
    lv_style_set_border_width(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(2));
  41ad6a:	4b3c      	ldr	r3, [pc, #240]	; (41ae5c <textarea_init+0x12c>)
  41ad6c:	681c      	ldr	r4, [r3, #0]
  41ad6e:	34b8      	adds	r4, #184	; 0xb8
  41ad70:	2000      	movs	r0, #0
  41ad72:	4b3e      	ldr	r3, [pc, #248]	; (41ae6c <textarea_init+0x13c>)
  41ad74:	4798      	blx	r3
  41ad76:	3028      	adds	r0, #40	; 0x28
  41ad78:	0040      	lsls	r0, r0, #1
  41ad7a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ad7e:	da46      	bge.n	41ae0e <textarea_init+0xde>
  41ad80:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41ad82:	2130      	movs	r1, #48	; 0x30
  41ad84:	4620      	mov	r0, r4
  41ad86:	4b3a      	ldr	r3, [pc, #232]	; (41ae70 <textarea_init+0x140>)
  41ad88:	4798      	blx	r3
    lv_style_set_pad_left(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(1));
  41ad8a:	4b34      	ldr	r3, [pc, #208]	; (41ae5c <textarea_init+0x12c>)
  41ad8c:	681c      	ldr	r4, [r3, #0]
  41ad8e:	34b8      	adds	r4, #184	; 0xb8
  41ad90:	2000      	movs	r0, #0
  41ad92:	4b36      	ldr	r3, [pc, #216]	; (41ae6c <textarea_init+0x13c>)
  41ad94:	4798      	blx	r3
  41ad96:	3050      	adds	r0, #80	; 0x50
  41ad98:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ad9c:	da44      	bge.n	41ae28 <textarea_init+0xf8>
  41ad9e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41ada0:	2112      	movs	r1, #18
  41ada2:	4620      	mov	r0, r4
  41ada4:	4d32      	ldr	r5, [pc, #200]	; (41ae70 <textarea_init+0x140>)
  41ada6:	47a8      	blx	r5
    lv_style_set_border_side(&styles->ta_cursor, LV_STATE_DEFAULT, LV_BORDER_SIDE_LEFT);
  41ada8:	4c2c      	ldr	r4, [pc, #176]	; (41ae5c <textarea_init+0x12c>)
  41adaa:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  41adac:	2204      	movs	r2, #4
  41adae:	2131      	movs	r1, #49	; 0x31
  41adb0:	30b8      	adds	r0, #184	; 0xb8
  41adb2:	47a8      	blx	r5
    style_init_reset(&styles->ta_placeholder);
  41adb4:	6820      	ldr	r0, [r4, #0]
  41adb6:	30bc      	adds	r0, #188	; 0xbc
  41adb8:	4b29      	ldr	r3, [pc, #164]	; (41ae60 <textarea_init+0x130>)
  41adba:	4798      	blx	r3
    lv_style_set_text_color(&styles->ta_placeholder, LV_STATE_DEFAULT,
  41adbc:	6820      	ldr	r0, [r4, #0]
  41adbe:	30bc      	adds	r0, #188	; 0xbc
                            IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
  41adc0:	4b28      	ldr	r3, [pc, #160]	; (41ae64 <textarea_init+0x134>)
  41adc2:	6a1b      	ldr	r3, [r3, #32]
    lv_style_set_text_color(&styles->ta_placeholder, LV_STATE_DEFAULT,
  41adc4:	f013 0f02 	tst.w	r3, #2
  41adc8:	d13a      	bne.n	41ae40 <textarea_init+0x110>
  41adca:	f04f 0200 	mov.w	r2, #0
  41adce:	2305      	movs	r3, #5
  41add0:	f363 0202 	bfi	r2, r3, #0, #3
  41add4:	2314      	movs	r3, #20
  41add6:	f363 02c7 	bfi	r2, r3, #3, #5
  41adda:	2317      	movs	r3, #23
  41addc:	f363 220c 	bfi	r2, r3, #8, #5
  41ade0:	2303      	movs	r3, #3
  41ade2:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41ade6:	f248 0189 	movw	r1, #32905	; 0x8089
  41adea:	4b1f      	ldr	r3, [pc, #124]	; (41ae68 <textarea_init+0x138>)
  41adec:	4798      	blx	r3
  41adee:	bd38      	pop	{r3, r4, r5, pc}
  41adf0:	f04f 0200 	mov.w	r2, #0
  41adf4:	2305      	movs	r3, #5
  41adf6:	f363 0202 	bfi	r2, r3, #0, #3
  41adfa:	2314      	movs	r3, #20
  41adfc:	f363 02c7 	bfi	r2, r3, #3, #5
  41ae00:	2315      	movs	r3, #21
  41ae02:	f363 220c 	bfi	r2, r3, #8, #5
  41ae06:	2302      	movs	r3, #2
  41ae08:	f363 324f 	bfi	r2, r3, #13, #3
  41ae0c:	e7aa      	b.n	41ad64 <textarea_init+0x34>
    lv_style_set_border_width(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(2));
  41ae0e:	2000      	movs	r0, #0
  41ae10:	4b16      	ldr	r3, [pc, #88]	; (41ae6c <textarea_init+0x13c>)
  41ae12:	4798      	blx	r3
  41ae14:	3028      	adds	r0, #40	; 0x28
  41ae16:	0040      	lsls	r0, r0, #1
  41ae18:	4b16      	ldr	r3, [pc, #88]	; (41ae74 <textarea_init+0x144>)
  41ae1a:	fb83 2300 	smull	r2, r3, r3, r0
  41ae1e:	17c2      	asrs	r2, r0, #31
  41ae20:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41ae24:	b212      	sxth	r2, r2
  41ae26:	e7ac      	b.n	41ad82 <textarea_init+0x52>
    lv_style_set_pad_left(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(1));
  41ae28:	2000      	movs	r0, #0
  41ae2a:	4b10      	ldr	r3, [pc, #64]	; (41ae6c <textarea_init+0x13c>)
  41ae2c:	4798      	blx	r3
  41ae2e:	3050      	adds	r0, #80	; 0x50
  41ae30:	4b10      	ldr	r3, [pc, #64]	; (41ae74 <textarea_init+0x144>)
  41ae32:	fb83 2300 	smull	r2, r3, r3, r0
  41ae36:	17c2      	asrs	r2, r0, #31
  41ae38:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41ae3c:	b212      	sxth	r2, r2
  41ae3e:	e7af      	b.n	41ada0 <textarea_init+0x70>
  41ae40:	f04f 0200 	mov.w	r2, #0
  41ae44:	2305      	movs	r3, #5
  41ae46:	f363 0202 	bfi	r2, r3, #0, #3
  41ae4a:	2315      	movs	r3, #21
  41ae4c:	f363 02c7 	bfi	r2, r3, #3, #5
  41ae50:	f363 220c 	bfi	r2, r3, #8, #5
  41ae54:	2302      	movs	r3, #2
  41ae56:	f363 324f 	bfi	r2, r3, #13, #3
  41ae5a:	e7c4      	b.n	41ade6 <textarea_init+0xb6>
  41ae5c:	20414834 	.word	0x20414834
  41ae60:	00418a71 	.word	0x00418a71
  41ae64:	20414838 	.word	0x20414838
  41ae68:	0040a3f9 	.word	0x0040a3f9
  41ae6c:	00414dfd 	.word	0x00414dfd
  41ae70:	0040a269 	.word	0x0040a269
  41ae74:	66666667 	.word	0x66666667

0041ae78 <spinbox_init>:
{
  41ae78:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->spinbox_cursor);
  41ae7a:	4c2d      	ldr	r4, [pc, #180]	; (41af30 <spinbox_init+0xb8>)
  41ae7c:	6820      	ldr	r0, [r4, #0]
  41ae7e:	309c      	adds	r0, #156	; 0x9c
  41ae80:	4b2c      	ldr	r3, [pc, #176]	; (41af34 <spinbox_init+0xbc>)
  41ae82:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_OPA_COVER);
  41ae84:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41ae86:	22ff      	movs	r2, #255	; 0xff
  41ae88:	212c      	movs	r1, #44	; 0x2c
  41ae8a:	309c      	adds	r0, #156	; 0x9c
  41ae8c:	4b2a      	ldr	r3, [pc, #168]	; (41af38 <spinbox_init+0xc0>)
  41ae8e:	4798      	blx	r3
    lv_style_set_bg_color(&styles->spinbox_cursor, LV_STATE_DEFAULT, theme.color_primary);
  41ae90:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41ae92:	4b2a      	ldr	r3, [pc, #168]	; (41af3c <spinbox_init+0xc4>)
  41ae94:	899a      	ldrh	r2, [r3, #12]
  41ae96:	2129      	movs	r1, #41	; 0x29
  41ae98:	309c      	adds	r0, #156	; 0x9c
  41ae9a:	4d29      	ldr	r5, [pc, #164]	; (41af40 <spinbox_init+0xc8>)
  41ae9c:	47a8      	blx	r5
    lv_style_set_text_color(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_COLOR_WHITE);
  41ae9e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41aea0:	4b28      	ldr	r3, [pc, #160]	; (41af44 <spinbox_init+0xcc>)
  41aea2:	881a      	ldrh	r2, [r3, #0]
  41aea4:	f248 0189 	movw	r1, #32905	; 0x8089
  41aea8:	309c      	adds	r0, #156	; 0x9c
  41aeaa:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
  41aeac:	6824      	ldr	r4, [r4, #0]
  41aeae:	349c      	adds	r4, #156	; 0x9c
  41aeb0:	2000      	movs	r0, #0
  41aeb2:	4b25      	ldr	r3, [pc, #148]	; (41af48 <spinbox_init+0xd0>)
  41aeb4:	4798      	blx	r3
  41aeb6:	2364      	movs	r3, #100	; 0x64
  41aeb8:	fb03 f000 	mul.w	r0, r3, r0
  41aebc:	3050      	adds	r0, #80	; 0x50
  41aebe:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41aec2:	da17      	bge.n	41aef4 <spinbox_init+0x7c>
  41aec4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41aec6:	2110      	movs	r1, #16
  41aec8:	4620      	mov	r0, r4
  41aeca:	4b20      	ldr	r3, [pc, #128]	; (41af4c <spinbox_init+0xd4>)
  41aecc:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
  41aece:	4b18      	ldr	r3, [pc, #96]	; (41af30 <spinbox_init+0xb8>)
  41aed0:	681c      	ldr	r4, [r3, #0]
  41aed2:	349c      	adds	r4, #156	; 0x9c
  41aed4:	2000      	movs	r0, #0
  41aed6:	4b1c      	ldr	r3, [pc, #112]	; (41af48 <spinbox_init+0xd0>)
  41aed8:	4798      	blx	r3
  41aeda:	2364      	movs	r3, #100	; 0x64
  41aedc:	fb03 f000 	mul.w	r0, r3, r0
  41aee0:	3050      	adds	r0, #80	; 0x50
  41aee2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41aee6:	da14      	bge.n	41af12 <spinbox_init+0x9a>
  41aee8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41aeea:	2111      	movs	r1, #17
  41aeec:	4620      	mov	r0, r4
  41aeee:	4b17      	ldr	r3, [pc, #92]	; (41af4c <spinbox_init+0xd4>)
  41aef0:	4798      	blx	r3
  41aef2:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_set_pad_top(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
  41aef4:	2000      	movs	r0, #0
  41aef6:	4b14      	ldr	r3, [pc, #80]	; (41af48 <spinbox_init+0xd0>)
  41aef8:	4798      	blx	r3
  41aefa:	2264      	movs	r2, #100	; 0x64
  41aefc:	fb02 f000 	mul.w	r0, r2, r0
  41af00:	3050      	adds	r0, #80	; 0x50
  41af02:	4b13      	ldr	r3, [pc, #76]	; (41af50 <spinbox_init+0xd8>)
  41af04:	fb83 2300 	smull	r2, r3, r3, r0
  41af08:	17c2      	asrs	r2, r0, #31
  41af0a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41af0e:	b212      	sxth	r2, r2
  41af10:	e7d9      	b.n	41aec6 <spinbox_init+0x4e>
    lv_style_set_pad_bottom(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
  41af12:	2000      	movs	r0, #0
  41af14:	4b0c      	ldr	r3, [pc, #48]	; (41af48 <spinbox_init+0xd0>)
  41af16:	4798      	blx	r3
  41af18:	2264      	movs	r2, #100	; 0x64
  41af1a:	fb02 f000 	mul.w	r0, r2, r0
  41af1e:	3050      	adds	r0, #80	; 0x50
  41af20:	4b0b      	ldr	r3, [pc, #44]	; (41af50 <spinbox_init+0xd8>)
  41af22:	fb83 2300 	smull	r2, r3, r3, r0
  41af26:	17c2      	asrs	r2, r0, #31
  41af28:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41af2c:	b212      	sxth	r2, r2
  41af2e:	e7dc      	b.n	41aeea <spinbox_init+0x72>
  41af30:	20414834 	.word	0x20414834
  41af34:	00418a71 	.word	0x00418a71
  41af38:	0040a589 	.word	0x0040a589
  41af3c:	20414838 	.word	0x20414838
  41af40:	0040a3f9 	.word	0x0040a3f9
  41af44:	0042fe2c 	.word	0x0042fe2c
  41af48:	00414dfd 	.word	0x00414dfd
  41af4c:	0040a269 	.word	0x0040a269
  41af50:	66666667 	.word	0x66666667

0041af54 <list_init>:
{
  41af54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->list_bg);
  41af56:	4cbf      	ldr	r4, [pc, #764]	; (41b254 <list_init+0x300>)
  41af58:	6820      	ldr	r0, [r4, #0]
  41af5a:	3078      	adds	r0, #120	; 0x78
  41af5c:	4ebe      	ldr	r6, [pc, #760]	; (41b258 <list_init+0x304>)
  41af5e:	47b0      	blx	r6
    lv_style_set_clip_corner(&styles->list_bg, LV_STATE_DEFAULT, true);
  41af60:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  41af62:	2201      	movs	r2, #1
  41af64:	2102      	movs	r1, #2
  41af66:	3078      	adds	r0, #120	; 0x78
  41af68:	4dbc      	ldr	r5, [pc, #752]	; (41b25c <list_init+0x308>)
  41af6a:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->list_bg, LV_STATE_DEFAULT, 0);
  41af6c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41af6e:	2200      	movs	r2, #0
  41af70:	2112      	movs	r1, #18
  41af72:	3078      	adds	r0, #120	; 0x78
  41af74:	47a8      	blx	r5
    lv_style_set_pad_right(&styles->list_bg, LV_STATE_DEFAULT, 0);
  41af76:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41af78:	2200      	movs	r2, #0
  41af7a:	2113      	movs	r1, #19
  41af7c:	3078      	adds	r0, #120	; 0x78
  41af7e:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->list_bg, LV_STATE_DEFAULT, 0);
  41af80:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41af82:	2200      	movs	r2, #0
  41af84:	2110      	movs	r1, #16
  41af86:	3078      	adds	r0, #120	; 0x78
  41af88:	47a8      	blx	r5
    lv_style_set_pad_bottom(&styles->list_bg, LV_STATE_DEFAULT, 0);
  41af8a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41af8c:	2200      	movs	r2, #0
  41af8e:	2111      	movs	r1, #17
  41af90:	3078      	adds	r0, #120	; 0x78
  41af92:	47a8      	blx	r5
    lv_style_set_pad_inner(&styles->list_bg, LV_STATE_DEFAULT, 0);
  41af94:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41af96:	2200      	movs	r2, #0
  41af98:	2114      	movs	r1, #20
  41af9a:	3078      	adds	r0, #120	; 0x78
  41af9c:	47a8      	blx	r5
    style_init_reset(&styles->list_btn);
  41af9e:	6820      	ldr	r0, [r4, #0]
  41afa0:	307c      	adds	r0, #124	; 0x7c
  41afa2:	47b0      	blx	r6
    lv_style_set_bg_opa(&styles->list_btn, LV_STATE_DEFAULT, LV_OPA_COVER);
  41afa4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41afa6:	22ff      	movs	r2, #255	; 0xff
  41afa8:	212c      	movs	r1, #44	; 0x2c
  41afaa:	307c      	adds	r0, #124	; 0x7c
  41afac:	4bac      	ldr	r3, [pc, #688]	; (41b260 <list_init+0x30c>)
  41afae:	4798      	blx	r3
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG);
  41afb0:	6820      	ldr	r0, [r4, #0]
  41afb2:	307c      	adds	r0, #124	; 0x7c
  41afb4:	4bab      	ldr	r3, [pc, #684]	; (41b264 <list_init+0x310>)
  41afb6:	6a1b      	ldr	r3, [r3, #32]
  41afb8:	f013 0f02 	tst.w	r3, #2
  41afbc:	f000 8223 	beq.w	41b406 <list_init+0x4b2>
  41afc0:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41afc4:	2129      	movs	r1, #41	; 0x29
  41afc6:	4ba8      	ldr	r3, [pc, #672]	; (41b268 <list_init+0x314>)
  41afc8:	4798      	blx	r3
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_PRESSED, COLOR_BG_PR);
  41afca:	4ba2      	ldr	r3, [pc, #648]	; (41b254 <list_init+0x300>)
  41afcc:	6818      	ldr	r0, [r3, #0]
  41afce:	307c      	adds	r0, #124	; 0x7c
  41afd0:	4ba4      	ldr	r3, [pc, #656]	; (41b264 <list_init+0x310>)
  41afd2:	6a1b      	ldr	r3, [r3, #32]
  41afd4:	f013 0f02 	tst.w	r3, #2
  41afd8:	f000 8223 	beq.w	41b422 <list_init+0x4ce>
  41afdc:	f04f 0207 	mov.w	r2, #7
  41afe0:	231d      	movs	r3, #29
  41afe2:	f363 02c7 	bfi	r2, r3, #3, #5
  41afe6:	f363 220c 	bfi	r2, r3, #8, #5
  41afea:	2303      	movs	r3, #3
  41afec:	f363 324f 	bfi	r2, r3, #13, #3
  41aff0:	f241 0129 	movw	r1, #4137	; 0x1029
  41aff4:	4b9c      	ldr	r3, [pc, #624]	; (41b268 <list_init+0x314>)
  41aff6:	4798      	blx	r3
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_DIS);
  41aff8:	4b96      	ldr	r3, [pc, #600]	; (41b254 <list_init+0x300>)
  41affa:	6818      	ldr	r0, [r3, #0]
  41affc:	307c      	adds	r0, #124	; 0x7c
  41affe:	4b99      	ldr	r3, [pc, #612]	; (41b264 <list_init+0x310>)
  41b000:	6a1b      	ldr	r3, [r3, #32]
  41b002:	f013 0f02 	tst.w	r3, #2
  41b006:	f000 821b 	beq.w	41b440 <list_init+0x4ec>
  41b00a:	f04f 32ff 	mov.w	r2, #4294967295
  41b00e:	f242 0129 	movw	r1, #8233	; 0x2029
  41b012:	4d95      	ldr	r5, [pc, #596]	; (41b268 <list_init+0x314>)
  41b014:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_CHK);
  41b016:	4c8f      	ldr	r4, [pc, #572]	; (41b254 <list_init+0x300>)
  41b018:	6820      	ldr	r0, [r4, #0]
  41b01a:	4f92      	ldr	r7, [pc, #584]	; (41b264 <list_init+0x310>)
  41b01c:	89ba      	ldrh	r2, [r7, #12]
  41b01e:	f240 1129 	movw	r1, #297	; 0x129
  41b022:	307c      	adds	r0, #124	; 0x7c
  41b024:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_CHECKED | LV_STATE_PRESSED, COLOR_BG_PR_CHK);
  41b026:	6826      	ldr	r6, [r4, #0]
  41b028:	367c      	adds	r6, #124	; 0x7c
  41b02a:	2133      	movs	r1, #51	; 0x33
  41b02c:	89b8      	ldrh	r0, [r7, #12]
  41b02e:	4b8f      	ldr	r3, [pc, #572]	; (41b26c <list_init+0x318>)
  41b030:	4798      	blx	r3
  41b032:	4602      	mov	r2, r0
  41b034:	f241 1129 	movw	r1, #4393	; 0x1129
  41b038:	4630      	mov	r0, r6
  41b03a:	47a8      	blx	r5
    lv_style_set_text_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  41b03c:	6820      	ldr	r0, [r4, #0]
  41b03e:	307c      	adds	r0, #124	; 0x7c
  41b040:	6a3b      	ldr	r3, [r7, #32]
  41b042:	f013 0f02 	tst.w	r3, #2
  41b046:	f000 8209 	beq.w	41b45c <list_init+0x508>
  41b04a:	f04f 0200 	mov.w	r2, #0
  41b04e:	2301      	movs	r3, #1
  41b050:	f363 0202 	bfi	r2, r3, #0, #3
  41b054:	2307      	movs	r3, #7
  41b056:	f363 02c7 	bfi	r2, r3, #3, #5
  41b05a:	2308      	movs	r3, #8
  41b05c:	f363 220c 	bfi	r2, r3, #8, #5
  41b060:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41b064:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41b068:	f248 0189 	movw	r1, #32905	; 0x8089
  41b06c:	4b7e      	ldr	r3, [pc, #504]	; (41b268 <list_init+0x314>)
  41b06e:	4798      	blx	r3
    lv_style_set_text_color(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
  41b070:	4b78      	ldr	r3, [pc, #480]	; (41b254 <list_init+0x300>)
  41b072:	6818      	ldr	r0, [r3, #0]
  41b074:	307c      	adds	r0, #124	; 0x7c
  41b076:	4b7b      	ldr	r3, [pc, #492]	; (41b264 <list_init+0x310>)
  41b078:	6a1b      	ldr	r3, [r3, #32]
  41b07a:	f013 0f02 	tst.w	r3, #2
  41b07e:	f000 81f0 	beq.w	41b462 <list_init+0x50e>
  41b082:	f04f 32ff 	mov.w	r2, #4294967295
  41b086:	f248 1189 	movw	r1, #33161	; 0x8189
  41b08a:	4b77      	ldr	r3, [pc, #476]	; (41b268 <list_init+0x314>)
  41b08c:	4798      	blx	r3
    lv_style_set_text_color(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
  41b08e:	4b71      	ldr	r3, [pc, #452]	; (41b254 <list_init+0x300>)
  41b090:	6818      	ldr	r0, [r3, #0]
  41b092:	307c      	adds	r0, #124	; 0x7c
  41b094:	4b73      	ldr	r3, [pc, #460]	; (41b264 <list_init+0x310>)
  41b096:	6a1b      	ldr	r3, [r3, #32]
  41b098:	f013 0f02 	tst.w	r3, #2
  41b09c:	f000 81e4 	beq.w	41b468 <list_init+0x514>
  41b0a0:	f04f 0200 	mov.w	r2, #0
  41b0a4:	2305      	movs	r3, #5
  41b0a6:	f363 0202 	bfi	r2, r3, #0, #3
  41b0aa:	2315      	movs	r3, #21
  41b0ac:	f363 02c7 	bfi	r2, r3, #3, #5
  41b0b0:	f363 220c 	bfi	r2, r3, #8, #5
  41b0b4:	2302      	movs	r3, #2
  41b0b6:	f363 324f 	bfi	r2, r3, #13, #3
  41b0ba:	f24a 0189 	movw	r1, #41097	; 0xa089
  41b0be:	4b6a      	ldr	r3, [pc, #424]	; (41b268 <list_init+0x314>)
  41b0c0:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  41b0c2:	4b64      	ldr	r3, [pc, #400]	; (41b254 <list_init+0x300>)
  41b0c4:	6818      	ldr	r0, [r3, #0]
  41b0c6:	307c      	adds	r0, #124	; 0x7c
  41b0c8:	4b66      	ldr	r3, [pc, #408]	; (41b264 <list_init+0x310>)
  41b0ca:	6a1b      	ldr	r3, [r3, #32]
  41b0cc:	f013 0f02 	tst.w	r3, #2
  41b0d0:	f000 81d8 	beq.w	41b484 <list_init+0x530>
  41b0d4:	f04f 0200 	mov.w	r2, #0
  41b0d8:	2301      	movs	r3, #1
  41b0da:	f363 0202 	bfi	r2, r3, #0, #3
  41b0de:	2307      	movs	r3, #7
  41b0e0:	f363 02c7 	bfi	r2, r3, #3, #5
  41b0e4:	2308      	movs	r3, #8
  41b0e6:	f363 220c 	bfi	r2, r3, #8, #5
  41b0ea:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41b0ee:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  41b0f2:	f248 01a9 	movw	r1, #32937	; 0x80a9
  41b0f6:	4b5c      	ldr	r3, [pc, #368]	; (41b268 <list_init+0x314>)
  41b0f8:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
  41b0fa:	4b56      	ldr	r3, [pc, #344]	; (41b254 <list_init+0x300>)
  41b0fc:	6818      	ldr	r0, [r3, #0]
  41b0fe:	307c      	adds	r0, #124	; 0x7c
  41b100:	4b58      	ldr	r3, [pc, #352]	; (41b264 <list_init+0x310>)
  41b102:	6a1b      	ldr	r3, [r3, #32]
  41b104:	f013 0f02 	tst.w	r3, #2
  41b108:	f000 81bf 	beq.w	41b48a <list_init+0x536>
  41b10c:	f04f 32ff 	mov.w	r2, #4294967295
  41b110:	f248 11a9 	movw	r1, #33193	; 0x81a9
  41b114:	4b54      	ldr	r3, [pc, #336]	; (41b268 <list_init+0x314>)
  41b116:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
  41b118:	4b4e      	ldr	r3, [pc, #312]	; (41b254 <list_init+0x300>)
  41b11a:	6818      	ldr	r0, [r3, #0]
  41b11c:	307c      	adds	r0, #124	; 0x7c
  41b11e:	4b51      	ldr	r3, [pc, #324]	; (41b264 <list_init+0x310>)
  41b120:	6a1b      	ldr	r3, [r3, #32]
  41b122:	f013 0f02 	tst.w	r3, #2
  41b126:	f000 81b3 	beq.w	41b490 <list_init+0x53c>
  41b12a:	f04f 0200 	mov.w	r2, #0
  41b12e:	2305      	movs	r3, #5
  41b130:	f363 0202 	bfi	r2, r3, #0, #3
  41b134:	2315      	movs	r3, #21
  41b136:	f363 02c7 	bfi	r2, r3, #3, #5
  41b13a:	f363 220c 	bfi	r2, r3, #8, #5
  41b13e:	2302      	movs	r3, #2
  41b140:	f363 324f 	bfi	r2, r3, #13, #3
  41b144:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
  41b148:	4b47      	ldr	r3, [pc, #284]	; (41b268 <list_init+0x314>)
  41b14a:	4798      	blx	r3
    lv_style_set_border_side(&styles->list_btn, LV_STATE_DEFAULT, LV_BORDER_SIDE_BOTTOM);
  41b14c:	4c41      	ldr	r4, [pc, #260]	; (41b254 <list_init+0x300>)
  41b14e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  41b150:	2201      	movs	r2, #1
  41b152:	2131      	movs	r1, #49	; 0x31
  41b154:	307c      	adds	r0, #124	; 0x7c
  41b156:	4b41      	ldr	r3, [pc, #260]	; (41b25c <list_init+0x308>)
  41b158:	4798      	blx	r3
    lv_style_set_border_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_BORDER);
  41b15a:	6820      	ldr	r0, [r4, #0]
  41b15c:	307c      	adds	r0, #124	; 0x7c
  41b15e:	4b41      	ldr	r3, [pc, #260]	; (41b264 <list_init+0x310>)
  41b160:	6a1b      	ldr	r3, [r3, #32]
  41b162:	f013 0f02 	tst.w	r3, #2
  41b166:	f000 81a1 	beq.w	41b4ac <list_init+0x558>
  41b16a:	f04f 0200 	mov.w	r2, #0
  41b16e:	2306      	movs	r3, #6
  41b170:	f363 0202 	bfi	r2, r3, #0, #3
  41b174:	231a      	movs	r3, #26
  41b176:	f363 02c7 	bfi	r2, r3, #3, #5
  41b17a:	231c      	movs	r3, #28
  41b17c:	f363 220c 	bfi	r2, r3, #8, #5
  41b180:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41b184:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41b188:	2139      	movs	r1, #57	; 0x39
  41b18a:	4d37      	ldr	r5, [pc, #220]	; (41b268 <list_init+0x314>)
  41b18c:	47a8      	blx	r5
    lv_style_set_border_color(&styles->list_btn, LV_STATE_FOCUSED, theme.color_primary);
  41b18e:	4c31      	ldr	r4, [pc, #196]	; (41b254 <list_init+0x300>)
  41b190:	6820      	ldr	r0, [r4, #0]
  41b192:	4e34      	ldr	r6, [pc, #208]	; (41b264 <list_init+0x310>)
  41b194:	89b2      	ldrh	r2, [r6, #12]
  41b196:	f240 2139 	movw	r1, #569	; 0x239
  41b19a:	307c      	adds	r0, #124	; 0x7c
  41b19c:	47a8      	blx	r5
    lv_style_set_border_width(&styles->list_btn, LV_STATE_DEFAULT, 1);
  41b19e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41b1a0:	2201      	movs	r2, #1
  41b1a2:	2130      	movs	r1, #48	; 0x30
  41b1a4:	307c      	adds	r0, #124	; 0x7c
  41b1a6:	4b2d      	ldr	r3, [pc, #180]	; (41b25c <list_init+0x308>)
  41b1a8:	4798      	blx	r3
    lv_style_set_outline_color(&styles->list_btn, LV_STATE_FOCUSED, theme.color_secondary);
  41b1aa:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
  41b1ac:	89f2      	ldrh	r2, [r6, #14]
  41b1ae:	f240 2149 	movw	r1, #585	; 0x249
  41b1b2:	307c      	adds	r0, #124	; 0x7c
  41b1b4:	47a8      	blx	r5
    lv_style_set_outline_width(&styles->list_btn, LV_STATE_FOCUSED, OUTLINE_WIDTH);
  41b1b6:	6824      	ldr	r4, [r4, #0]
  41b1b8:	347c      	adds	r4, #124	; 0x7c
  41b1ba:	6a33      	ldr	r3, [r6, #32]
  41b1bc:	f013 0f20 	tst.w	r3, #32
  41b1c0:	f000 8183 	beq.w	41b4ca <list_init+0x576>
  41b1c4:	2200      	movs	r2, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  41b1c6:	f44f 7110 	mov.w	r1, #576	; 0x240
  41b1ca:	4620      	mov	r0, r4
  41b1cc:	4b23      	ldr	r3, [pc, #140]	; (41b25c <list_init+0x308>)
  41b1ce:	4798      	blx	r3
    lv_style_set_outline_pad(&styles->list_btn, LV_STATE_FOCUSED, -BORDER_WIDTH);
  41b1d0:	4b20      	ldr	r3, [pc, #128]	; (41b254 <list_init+0x300>)
  41b1d2:	681c      	ldr	r4, [r3, #0]
  41b1d4:	347c      	adds	r4, #124	; 0x7c
  41b1d6:	2000      	movs	r0, #0
  41b1d8:	4b25      	ldr	r3, [pc, #148]	; (41b270 <list_init+0x31c>)
  41b1da:	4798      	blx	r3
  41b1dc:	3028      	adds	r0, #40	; 0x28
  41b1de:	0040      	lsls	r0, r0, #1
  41b1e0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b1e4:	f280 8188 	bge.w	41b4f8 <list_init+0x5a4>
  41b1e8:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
  41b1ec:	f240 2141 	movw	r1, #577	; 0x241
  41b1f0:	4620      	mov	r0, r4
  41b1f2:	4b1a      	ldr	r3, [pc, #104]	; (41b25c <list_init+0x308>)
  41b1f4:	4798      	blx	r3
    lv_style_set_pad_left(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41b1f6:	4b17      	ldr	r3, [pc, #92]	; (41b254 <list_init+0x300>)
  41b1f8:	681c      	ldr	r4, [r3, #0]
  41b1fa:	347c      	adds	r4, #124	; 0x7c
  41b1fc:	2000      	movs	r0, #0
  41b1fe:	4b1d      	ldr	r3, [pc, #116]	; (41b274 <list_init+0x320>)
  41b200:	4798      	blx	r3
  41b202:	2801      	cmp	r0, #1
  41b204:	f240 8185 	bls.w	41b512 <list_init+0x5be>
  41b208:	2000      	movs	r0, #0
  41b20a:	4b19      	ldr	r3, [pc, #100]	; (41b270 <list_init+0x31c>)
  41b20c:	4798      	blx	r3
  41b20e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b212:	0040      	lsls	r0, r0, #1
  41b214:	3050      	adds	r0, #80	; 0x50
  41b216:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b21a:	f280 8193 	bge.w	41b544 <list_init+0x5f0>
  41b21e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41b220:	2112      	movs	r1, #18
  41b222:	4620      	mov	r0, r4
  41b224:	4b0d      	ldr	r3, [pc, #52]	; (41b25c <list_init+0x308>)
  41b226:	4798      	blx	r3
    lv_style_set_pad_right(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41b228:	4b0a      	ldr	r3, [pc, #40]	; (41b254 <list_init+0x300>)
  41b22a:	681c      	ldr	r4, [r3, #0]
  41b22c:	347c      	adds	r4, #124	; 0x7c
  41b22e:	2000      	movs	r0, #0
  41b230:	4b10      	ldr	r3, [pc, #64]	; (41b274 <list_init+0x320>)
  41b232:	4798      	blx	r3
  41b234:	2801      	cmp	r0, #1
  41b236:	f240 8194 	bls.w	41b562 <list_init+0x60e>
  41b23a:	2000      	movs	r0, #0
  41b23c:	4b0c      	ldr	r3, [pc, #48]	; (41b270 <list_init+0x31c>)
  41b23e:	4798      	blx	r3
  41b240:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b244:	0040      	lsls	r0, r0, #1
  41b246:	3050      	adds	r0, #80	; 0x50
  41b248:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b24c:	f280 81ac 	bge.w	41b5a8 <list_init+0x654>
  41b250:	e012      	b.n	41b278 <list_init+0x324>
  41b252:	bf00      	nop
  41b254:	20414834 	.word	0x20414834
  41b258:	00418a71 	.word	0x00418a71
  41b25c:	0040a269 	.word	0x0040a269
  41b260:	0040a589 	.word	0x0040a589
  41b264:	20414838 	.word	0x20414838
  41b268:	0040a3f9 	.word	0x0040a3f9
  41b26c:	00415f25 	.word	0x00415f25
  41b270:	00414dfd 	.word	0x00414dfd
  41b274:	00414e1d 	.word	0x00414e1d
  41b278:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41b27a:	2113      	movs	r1, #19
  41b27c:	4620      	mov	r0, r4
  41b27e:	4bc5      	ldr	r3, [pc, #788]	; (41b594 <list_init+0x640>)
  41b280:	4798      	blx	r3
    lv_style_set_pad_top(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41b282:	4bc5      	ldr	r3, [pc, #788]	; (41b598 <list_init+0x644>)
  41b284:	681c      	ldr	r4, [r3, #0]
  41b286:	347c      	adds	r4, #124	; 0x7c
  41b288:	2000      	movs	r0, #0
  41b28a:	4bc4      	ldr	r3, [pc, #784]	; (41b59c <list_init+0x648>)
  41b28c:	4798      	blx	r3
  41b28e:	2801      	cmp	r0, #1
  41b290:	f240 8199 	bls.w	41b5c6 <list_init+0x672>
  41b294:	2000      	movs	r0, #0
  41b296:	4bc2      	ldr	r3, [pc, #776]	; (41b5a0 <list_init+0x64c>)
  41b298:	4798      	blx	r3
  41b29a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b29e:	0040      	lsls	r0, r0, #1
  41b2a0:	3050      	adds	r0, #80	; 0x50
  41b2a2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b2a6:	f280 81a7 	bge.w	41b5f8 <list_init+0x6a4>
  41b2aa:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41b2ac:	2110      	movs	r1, #16
  41b2ae:	4620      	mov	r0, r4
  41b2b0:	4bb8      	ldr	r3, [pc, #736]	; (41b594 <list_init+0x640>)
  41b2b2:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41b2b4:	4bb8      	ldr	r3, [pc, #736]	; (41b598 <list_init+0x644>)
  41b2b6:	681c      	ldr	r4, [r3, #0]
  41b2b8:	347c      	adds	r4, #124	; 0x7c
  41b2ba:	2000      	movs	r0, #0
  41b2bc:	4bb7      	ldr	r3, [pc, #732]	; (41b59c <list_init+0x648>)
  41b2be:	4798      	blx	r3
  41b2c0:	2801      	cmp	r0, #1
  41b2c2:	f240 81a8 	bls.w	41b616 <list_init+0x6c2>
  41b2c6:	2000      	movs	r0, #0
  41b2c8:	4bb5      	ldr	r3, [pc, #724]	; (41b5a0 <list_init+0x64c>)
  41b2ca:	4798      	blx	r3
  41b2cc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b2d0:	0040      	lsls	r0, r0, #1
  41b2d2:	3050      	adds	r0, #80	; 0x50
  41b2d4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b2d8:	f280 81b6 	bge.w	41b648 <list_init+0x6f4>
  41b2dc:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41b2de:	2111      	movs	r1, #17
  41b2e0:	4620      	mov	r0, r4
  41b2e2:	4bac      	ldr	r3, [pc, #688]	; (41b594 <list_init+0x640>)
  41b2e4:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41b2e6:	4bac      	ldr	r3, [pc, #688]	; (41b598 <list_init+0x644>)
  41b2e8:	681c      	ldr	r4, [r3, #0]
  41b2ea:	347c      	adds	r4, #124	; 0x7c
  41b2ec:	2000      	movs	r0, #0
  41b2ee:	4bab      	ldr	r3, [pc, #684]	; (41b59c <list_init+0x648>)
  41b2f0:	4798      	blx	r3
  41b2f2:	2801      	cmp	r0, #1
  41b2f4:	f240 81b7 	bls.w	41b666 <list_init+0x712>
  41b2f8:	2000      	movs	r0, #0
  41b2fa:	4ba9      	ldr	r3, [pc, #676]	; (41b5a0 <list_init+0x64c>)
  41b2fc:	4798      	blx	r3
  41b2fe:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b302:	0040      	lsls	r0, r0, #1
  41b304:	3050      	adds	r0, #80	; 0x50
  41b306:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b30a:	f280 81c5 	bge.w	41b698 <list_init+0x744>
  41b30e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41b310:	2114      	movs	r1, #20
  41b312:	4620      	mov	r0, r4
  41b314:	4b9f      	ldr	r3, [pc, #636]	; (41b594 <list_init+0x640>)
  41b316:	4798      	blx	r3
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DEFAULT, - PAD_DEF);
  41b318:	4b9f      	ldr	r3, [pc, #636]	; (41b598 <list_init+0x644>)
  41b31a:	681c      	ldr	r4, [r3, #0]
  41b31c:	347c      	adds	r4, #124	; 0x7c
  41b31e:	2000      	movs	r0, #0
  41b320:	4b9e      	ldr	r3, [pc, #632]	; (41b59c <list_init+0x648>)
  41b322:	4798      	blx	r3
  41b324:	2801      	cmp	r0, #1
  41b326:	f240 81c6 	bls.w	41b6b6 <list_init+0x762>
  41b32a:	2000      	movs	r0, #0
  41b32c:	4b9c      	ldr	r3, [pc, #624]	; (41b5a0 <list_init+0x64c>)
  41b32e:	4798      	blx	r3
  41b330:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b334:	0040      	lsls	r0, r0, #1
  41b336:	3050      	adds	r0, #80	; 0x50
  41b338:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b33c:	f280 81d5 	bge.w	41b6ea <list_init+0x796>
  41b340:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  41b344:	2104      	movs	r1, #4
  41b346:	4620      	mov	r0, r4
  41b348:	4b92      	ldr	r3, [pc, #584]	; (41b594 <list_init+0x640>)
  41b34a:	4798      	blx	r3
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_PRESSED, -BORDER_WIDTH);
  41b34c:	4b92      	ldr	r3, [pc, #584]	; (41b598 <list_init+0x644>)
  41b34e:	681c      	ldr	r4, [r3, #0]
  41b350:	347c      	adds	r4, #124	; 0x7c
  41b352:	2000      	movs	r0, #0
  41b354:	4b92      	ldr	r3, [pc, #584]	; (41b5a0 <list_init+0x64c>)
  41b356:	4798      	blx	r3
  41b358:	3028      	adds	r0, #40	; 0x28
  41b35a:	0040      	lsls	r0, r0, #1
  41b35c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b360:	f280 81d2 	bge.w	41b708 <list_init+0x7b4>
  41b364:	f04f 32ff 	mov.w	r2, #4294967295
  41b368:	f241 0104 	movw	r1, #4100	; 0x1004
  41b36c:	4620      	mov	r0, r4
  41b36e:	4b89      	ldr	r3, [pc, #548]	; (41b594 <list_init+0x640>)
  41b370:	4798      	blx	r3
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_CHECKED, -BORDER_WIDTH);
  41b372:	4b89      	ldr	r3, [pc, #548]	; (41b598 <list_init+0x644>)
  41b374:	681c      	ldr	r4, [r3, #0]
  41b376:	347c      	adds	r4, #124	; 0x7c
  41b378:	2000      	movs	r0, #0
  41b37a:	4b89      	ldr	r3, [pc, #548]	; (41b5a0 <list_init+0x64c>)
  41b37c:	4798      	blx	r3
  41b37e:	3028      	adds	r0, #40	; 0x28
  41b380:	0040      	lsls	r0, r0, #1
  41b382:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b386:	f280 81cc 	bge.w	41b722 <list_init+0x7ce>
  41b38a:	f04f 32ff 	mov.w	r2, #4294967295
  41b38e:	f44f 7182 	mov.w	r1, #260	; 0x104
  41b392:	4620      	mov	r0, r4
  41b394:	4b7f      	ldr	r3, [pc, #508]	; (41b594 <list_init+0x640>)
  41b396:	4798      	blx	r3
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DISABLED, -BORDER_WIDTH);
  41b398:	4b7f      	ldr	r3, [pc, #508]	; (41b598 <list_init+0x644>)
  41b39a:	681c      	ldr	r4, [r3, #0]
  41b39c:	347c      	adds	r4, #124	; 0x7c
  41b39e:	2000      	movs	r0, #0
  41b3a0:	4b7f      	ldr	r3, [pc, #508]	; (41b5a0 <list_init+0x64c>)
  41b3a2:	4798      	blx	r3
  41b3a4:	3028      	adds	r0, #40	; 0x28
  41b3a6:	0040      	lsls	r0, r0, #1
  41b3a8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b3ac:	f280 81c6 	bge.w	41b73c <list_init+0x7e8>
  41b3b0:	f04f 32ff 	mov.w	r2, #4294967295
  41b3b4:	f242 0104 	movw	r1, #8196	; 0x2004
  41b3b8:	4620      	mov	r0, r4
  41b3ba:	4b76      	ldr	r3, [pc, #472]	; (41b594 <list_init+0x640>)
  41b3bc:	4798      	blx	r3
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_FOCUSED, - BORDER_WIDTH);
  41b3be:	4b76      	ldr	r3, [pc, #472]	; (41b598 <list_init+0x644>)
  41b3c0:	681c      	ldr	r4, [r3, #0]
  41b3c2:	347c      	adds	r4, #124	; 0x7c
  41b3c4:	2000      	movs	r0, #0
  41b3c6:	4b76      	ldr	r3, [pc, #472]	; (41b5a0 <list_init+0x64c>)
  41b3c8:	4798      	blx	r3
  41b3ca:	3028      	adds	r0, #40	; 0x28
  41b3cc:	0040      	lsls	r0, r0, #1
  41b3ce:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b3d2:	f280 81c0 	bge.w	41b756 <list_init+0x802>
  41b3d6:	f04f 32ff 	mov.w	r2, #4294967295
  41b3da:	f44f 7101 	mov.w	r1, #516	; 0x204
  41b3de:	4620      	mov	r0, r4
  41b3e0:	4c6c      	ldr	r4, [pc, #432]	; (41b594 <list_init+0x640>)
  41b3e2:	47a0      	blx	r4
    lv_style_set_transition_time(&styles->list_btn, LV_STATE_DEFAULT, TRANSITION_TIME);
  41b3e4:	4d6c      	ldr	r5, [pc, #432]	; (41b598 <list_init+0x644>)
  41b3e6:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  41b3e8:	2200      	movs	r2, #0
  41b3ea:	21b0      	movs	r1, #176	; 0xb0
  41b3ec:	307c      	adds	r0, #124	; 0x7c
  41b3ee:	47a0      	blx	r4
    lv_style_set_transition_prop_6(&styles->list_btn, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
  41b3f0:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  41b3f2:	2229      	movs	r2, #41	; 0x29
  41b3f4:	21b7      	movs	r1, #183	; 0xb7
  41b3f6:	307c      	adds	r0, #124	; 0x7c
  41b3f8:	47a0      	blx	r4
    lv_style_set_transition_prop_5(&styles->list_btn, LV_STATE_DEFAULT, LV_STYLE_TRANSFORM_WIDTH);
  41b3fa:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
  41b3fc:	2204      	movs	r2, #4
  41b3fe:	21b6      	movs	r1, #182	; 0xb6
  41b400:	307c      	adds	r0, #124	; 0x7c
  41b402:	47a0      	blx	r4
  41b404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41b406:	f04f 0200 	mov.w	r2, #0
  41b40a:	2303      	movs	r3, #3
  41b40c:	f363 0202 	bfi	r2, r3, #0, #3
  41b410:	230b      	movs	r3, #11
  41b412:	f363 02c7 	bfi	r2, r3, #3, #5
  41b416:	230e      	movs	r3, #14
  41b418:	f363 220c 	bfi	r2, r3, #8, #5
  41b41c:	f36f 324f 	bfc	r2, #13, #3
  41b420:	e5d0      	b.n	41afc4 <list_init+0x70>
  41b422:	f04f 0200 	mov.w	r2, #0
  41b426:	2302      	movs	r3, #2
  41b428:	f363 0202 	bfi	r2, r3, #0, #3
  41b42c:	2309      	movs	r3, #9
  41b42e:	f363 02c7 	bfi	r2, r3, #3, #5
  41b432:	230a      	movs	r3, #10
  41b434:	f363 220c 	bfi	r2, r3, #8, #5
  41b438:	2303      	movs	r3, #3
  41b43a:	f363 324f 	bfi	r2, r3, #13, #3
  41b43e:	e5d7      	b.n	41aff0 <list_init+0x9c>
  41b440:	f04f 0200 	mov.w	r2, #0
  41b444:	2303      	movs	r3, #3
  41b446:	f363 0202 	bfi	r2, r3, #0, #3
  41b44a:	230b      	movs	r3, #11
  41b44c:	f363 02c7 	bfi	r2, r3, #3, #5
  41b450:	230e      	movs	r3, #14
  41b452:	f363 220c 	bfi	r2, r3, #8, #5
  41b456:	f36f 324f 	bfc	r2, #13, #3
  41b45a:	e5d8      	b.n	41b00e <list_init+0xba>
  41b45c:	f04f 32ff 	mov.w	r2, #4294967295
  41b460:	e602      	b.n	41b068 <list_init+0x114>
  41b462:	f04f 32ff 	mov.w	r2, #4294967295
  41b466:	e60e      	b.n	41b086 <list_init+0x132>
  41b468:	f04f 0200 	mov.w	r2, #0
  41b46c:	2304      	movs	r3, #4
  41b46e:	f363 0202 	bfi	r2, r3, #0, #3
  41b472:	2313      	movs	r3, #19
  41b474:	f363 02c7 	bfi	r2, r3, #3, #5
  41b478:	f363 220c 	bfi	r2, r3, #8, #5
  41b47c:	2306      	movs	r3, #6
  41b47e:	f363 324f 	bfi	r2, r3, #13, #3
  41b482:	e61a      	b.n	41b0ba <list_init+0x166>
  41b484:	f04f 32ff 	mov.w	r2, #4294967295
  41b488:	e633      	b.n	41b0f2 <list_init+0x19e>
  41b48a:	f04f 32ff 	mov.w	r2, #4294967295
  41b48e:	e63f      	b.n	41b110 <list_init+0x1bc>
  41b490:	f04f 0200 	mov.w	r2, #0
  41b494:	2304      	movs	r3, #4
  41b496:	f363 0202 	bfi	r2, r3, #0, #3
  41b49a:	2313      	movs	r3, #19
  41b49c:	f363 02c7 	bfi	r2, r3, #3, #5
  41b4a0:	f363 220c 	bfi	r2, r3, #8, #5
  41b4a4:	2306      	movs	r3, #6
  41b4a6:	f363 324f 	bfi	r2, r3, #13, #3
  41b4aa:	e64b      	b.n	41b144 <list_init+0x1f0>
  41b4ac:	f04f 0200 	mov.w	r2, #0
  41b4b0:	2304      	movs	r3, #4
  41b4b2:	f363 0202 	bfi	r2, r3, #0, #3
  41b4b6:	2310      	movs	r3, #16
  41b4b8:	f363 02c7 	bfi	r2, r3, #3, #5
  41b4bc:	2312      	movs	r3, #18
  41b4be:	f363 220c 	bfi	r2, r3, #8, #5
  41b4c2:	2302      	movs	r3, #2
  41b4c4:	f363 324f 	bfi	r2, r3, #13, #3
  41b4c8:	e65e      	b.n	41b188 <list_init+0x234>
    lv_style_set_outline_width(&styles->list_btn, LV_STATE_FOCUSED, OUTLINE_WIDTH);
  41b4ca:	2000      	movs	r0, #0
  41b4cc:	4b34      	ldr	r3, [pc, #208]	; (41b5a0 <list_init+0x64c>)
  41b4ce:	4798      	blx	r3
  41b4d0:	3028      	adds	r0, #40	; 0x28
  41b4d2:	0040      	lsls	r0, r0, #1
  41b4d4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b4d8:	da01      	bge.n	41b4de <list_init+0x58a>
  41b4da:	2201      	movs	r2, #1
  41b4dc:	e673      	b.n	41b1c6 <list_init+0x272>
  41b4de:	2000      	movs	r0, #0
  41b4e0:	4b2f      	ldr	r3, [pc, #188]	; (41b5a0 <list_init+0x64c>)
  41b4e2:	4798      	blx	r3
  41b4e4:	3028      	adds	r0, #40	; 0x28
  41b4e6:	0040      	lsls	r0, r0, #1
  41b4e8:	4b2e      	ldr	r3, [pc, #184]	; (41b5a4 <list_init+0x650>)
  41b4ea:	fb83 2300 	smull	r2, r3, r3, r0
  41b4ee:	17c2      	asrs	r2, r0, #31
  41b4f0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b4f4:	b212      	sxth	r2, r2
  41b4f6:	e666      	b.n	41b1c6 <list_init+0x272>
    lv_style_set_outline_pad(&styles->list_btn, LV_STATE_FOCUSED, -BORDER_WIDTH);
  41b4f8:	2000      	movs	r0, #0
  41b4fa:	4b29      	ldr	r3, [pc, #164]	; (41b5a0 <list_init+0x64c>)
  41b4fc:	4798      	blx	r3
  41b4fe:	3028      	adds	r0, #40	; 0x28
  41b500:	0040      	lsls	r0, r0, #1
  41b502:	4b28      	ldr	r3, [pc, #160]	; (41b5a4 <list_init+0x650>)
  41b504:	fb83 2300 	smull	r2, r3, r3, r0
  41b508:	17c2      	asrs	r2, r0, #31
  41b50a:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41b50e:	b212      	sxth	r2, r2
  41b510:	e66c      	b.n	41b1ec <list_init+0x298>
    lv_style_set_pad_left(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41b512:	2000      	movs	r0, #0
  41b514:	4b22      	ldr	r3, [pc, #136]	; (41b5a0 <list_init+0x64c>)
  41b516:	4798      	blx	r3
  41b518:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b51c:	3050      	adds	r0, #80	; 0x50
  41b51e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b522:	da01      	bge.n	41b528 <list_init+0x5d4>
  41b524:	2201      	movs	r2, #1
  41b526:	e67b      	b.n	41b220 <list_init+0x2cc>
  41b528:	2000      	movs	r0, #0
  41b52a:	4b1d      	ldr	r3, [pc, #116]	; (41b5a0 <list_init+0x64c>)
  41b52c:	4798      	blx	r3
  41b52e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b532:	3050      	adds	r0, #80	; 0x50
  41b534:	4b1b      	ldr	r3, [pc, #108]	; (41b5a4 <list_init+0x650>)
  41b536:	fb83 2300 	smull	r2, r3, r3, r0
  41b53a:	17c2      	asrs	r2, r0, #31
  41b53c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b540:	b212      	sxth	r2, r2
  41b542:	e66d      	b.n	41b220 <list_init+0x2cc>
  41b544:	2000      	movs	r0, #0
  41b546:	4b16      	ldr	r3, [pc, #88]	; (41b5a0 <list_init+0x64c>)
  41b548:	4798      	blx	r3
  41b54a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b54e:	0040      	lsls	r0, r0, #1
  41b550:	3050      	adds	r0, #80	; 0x50
  41b552:	4b14      	ldr	r3, [pc, #80]	; (41b5a4 <list_init+0x650>)
  41b554:	fb83 2300 	smull	r2, r3, r3, r0
  41b558:	17c2      	asrs	r2, r0, #31
  41b55a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b55e:	b212      	sxth	r2, r2
  41b560:	e65e      	b.n	41b220 <list_init+0x2cc>
    lv_style_set_pad_right(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41b562:	2000      	movs	r0, #0
  41b564:	4b0e      	ldr	r3, [pc, #56]	; (41b5a0 <list_init+0x64c>)
  41b566:	4798      	blx	r3
  41b568:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b56c:	3050      	adds	r0, #80	; 0x50
  41b56e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b572:	da01      	bge.n	41b578 <list_init+0x624>
  41b574:	2201      	movs	r2, #1
  41b576:	e680      	b.n	41b27a <list_init+0x326>
  41b578:	2000      	movs	r0, #0
  41b57a:	4b09      	ldr	r3, [pc, #36]	; (41b5a0 <list_init+0x64c>)
  41b57c:	4798      	blx	r3
  41b57e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b582:	3050      	adds	r0, #80	; 0x50
  41b584:	4b07      	ldr	r3, [pc, #28]	; (41b5a4 <list_init+0x650>)
  41b586:	fb83 2300 	smull	r2, r3, r3, r0
  41b58a:	17c2      	asrs	r2, r0, #31
  41b58c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b590:	b212      	sxth	r2, r2
  41b592:	e672      	b.n	41b27a <list_init+0x326>
  41b594:	0040a269 	.word	0x0040a269
  41b598:	20414834 	.word	0x20414834
  41b59c:	00414e1d 	.word	0x00414e1d
  41b5a0:	00414dfd 	.word	0x00414dfd
  41b5a4:	66666667 	.word	0x66666667
  41b5a8:	2000      	movs	r0, #0
  41b5aa:	4b71      	ldr	r3, [pc, #452]	; (41b770 <list_init+0x81c>)
  41b5ac:	4798      	blx	r3
  41b5ae:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b5b2:	0040      	lsls	r0, r0, #1
  41b5b4:	3050      	adds	r0, #80	; 0x50
  41b5b6:	4b6f      	ldr	r3, [pc, #444]	; (41b774 <list_init+0x820>)
  41b5b8:	fb83 2300 	smull	r2, r3, r3, r0
  41b5bc:	17c2      	asrs	r2, r0, #31
  41b5be:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b5c2:	b212      	sxth	r2, r2
  41b5c4:	e659      	b.n	41b27a <list_init+0x326>
    lv_style_set_pad_top(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41b5c6:	2000      	movs	r0, #0
  41b5c8:	4b69      	ldr	r3, [pc, #420]	; (41b770 <list_init+0x81c>)
  41b5ca:	4798      	blx	r3
  41b5cc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b5d0:	3050      	adds	r0, #80	; 0x50
  41b5d2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b5d6:	da01      	bge.n	41b5dc <list_init+0x688>
  41b5d8:	2201      	movs	r2, #1
  41b5da:	e667      	b.n	41b2ac <list_init+0x358>
  41b5dc:	2000      	movs	r0, #0
  41b5de:	4b64      	ldr	r3, [pc, #400]	; (41b770 <list_init+0x81c>)
  41b5e0:	4798      	blx	r3
  41b5e2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b5e6:	3050      	adds	r0, #80	; 0x50
  41b5e8:	4b62      	ldr	r3, [pc, #392]	; (41b774 <list_init+0x820>)
  41b5ea:	fb83 2300 	smull	r2, r3, r3, r0
  41b5ee:	17c2      	asrs	r2, r0, #31
  41b5f0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b5f4:	b212      	sxth	r2, r2
  41b5f6:	e659      	b.n	41b2ac <list_init+0x358>
  41b5f8:	2000      	movs	r0, #0
  41b5fa:	4b5d      	ldr	r3, [pc, #372]	; (41b770 <list_init+0x81c>)
  41b5fc:	4798      	blx	r3
  41b5fe:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b602:	0040      	lsls	r0, r0, #1
  41b604:	3050      	adds	r0, #80	; 0x50
  41b606:	4b5b      	ldr	r3, [pc, #364]	; (41b774 <list_init+0x820>)
  41b608:	fb83 2300 	smull	r2, r3, r3, r0
  41b60c:	17c2      	asrs	r2, r0, #31
  41b60e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b612:	b212      	sxth	r2, r2
  41b614:	e64a      	b.n	41b2ac <list_init+0x358>
    lv_style_set_pad_bottom(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41b616:	2000      	movs	r0, #0
  41b618:	4b55      	ldr	r3, [pc, #340]	; (41b770 <list_init+0x81c>)
  41b61a:	4798      	blx	r3
  41b61c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b620:	3050      	adds	r0, #80	; 0x50
  41b622:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b626:	da01      	bge.n	41b62c <list_init+0x6d8>
  41b628:	2201      	movs	r2, #1
  41b62a:	e658      	b.n	41b2de <list_init+0x38a>
  41b62c:	2000      	movs	r0, #0
  41b62e:	4b50      	ldr	r3, [pc, #320]	; (41b770 <list_init+0x81c>)
  41b630:	4798      	blx	r3
  41b632:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b636:	3050      	adds	r0, #80	; 0x50
  41b638:	4b4e      	ldr	r3, [pc, #312]	; (41b774 <list_init+0x820>)
  41b63a:	fb83 2300 	smull	r2, r3, r3, r0
  41b63e:	17c2      	asrs	r2, r0, #31
  41b640:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b644:	b212      	sxth	r2, r2
  41b646:	e64a      	b.n	41b2de <list_init+0x38a>
  41b648:	2000      	movs	r0, #0
  41b64a:	4b49      	ldr	r3, [pc, #292]	; (41b770 <list_init+0x81c>)
  41b64c:	4798      	blx	r3
  41b64e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b652:	0040      	lsls	r0, r0, #1
  41b654:	3050      	adds	r0, #80	; 0x50
  41b656:	4b47      	ldr	r3, [pc, #284]	; (41b774 <list_init+0x820>)
  41b658:	fb83 2300 	smull	r2, r3, r3, r0
  41b65c:	17c2      	asrs	r2, r0, #31
  41b65e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b662:	b212      	sxth	r2, r2
  41b664:	e63b      	b.n	41b2de <list_init+0x38a>
    lv_style_set_pad_inner(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41b666:	2000      	movs	r0, #0
  41b668:	4b41      	ldr	r3, [pc, #260]	; (41b770 <list_init+0x81c>)
  41b66a:	4798      	blx	r3
  41b66c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b670:	3050      	adds	r0, #80	; 0x50
  41b672:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b676:	da01      	bge.n	41b67c <list_init+0x728>
  41b678:	2201      	movs	r2, #1
  41b67a:	e649      	b.n	41b310 <list_init+0x3bc>
  41b67c:	2000      	movs	r0, #0
  41b67e:	4b3c      	ldr	r3, [pc, #240]	; (41b770 <list_init+0x81c>)
  41b680:	4798      	blx	r3
  41b682:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b686:	3050      	adds	r0, #80	; 0x50
  41b688:	4b3a      	ldr	r3, [pc, #232]	; (41b774 <list_init+0x820>)
  41b68a:	fb83 2300 	smull	r2, r3, r3, r0
  41b68e:	17c2      	asrs	r2, r0, #31
  41b690:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b694:	b212      	sxth	r2, r2
  41b696:	e63b      	b.n	41b310 <list_init+0x3bc>
  41b698:	2000      	movs	r0, #0
  41b69a:	4b35      	ldr	r3, [pc, #212]	; (41b770 <list_init+0x81c>)
  41b69c:	4798      	blx	r3
  41b69e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b6a2:	0040      	lsls	r0, r0, #1
  41b6a4:	3050      	adds	r0, #80	; 0x50
  41b6a6:	4b33      	ldr	r3, [pc, #204]	; (41b774 <list_init+0x820>)
  41b6a8:	fb83 2300 	smull	r2, r3, r3, r0
  41b6ac:	17c2      	asrs	r2, r0, #31
  41b6ae:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b6b2:	b212      	sxth	r2, r2
  41b6b4:	e62c      	b.n	41b310 <list_init+0x3bc>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DEFAULT, - PAD_DEF);
  41b6b6:	2000      	movs	r0, #0
  41b6b8:	4b2d      	ldr	r3, [pc, #180]	; (41b770 <list_init+0x81c>)
  41b6ba:	4798      	blx	r3
  41b6bc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b6c0:	3050      	adds	r0, #80	; 0x50
  41b6c2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b6c6:	da02      	bge.n	41b6ce <list_init+0x77a>
  41b6c8:	f04f 32ff 	mov.w	r2, #4294967295
  41b6cc:	e63a      	b.n	41b344 <list_init+0x3f0>
  41b6ce:	2000      	movs	r0, #0
  41b6d0:	4b27      	ldr	r3, [pc, #156]	; (41b770 <list_init+0x81c>)
  41b6d2:	4798      	blx	r3
  41b6d4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b6d8:	3050      	adds	r0, #80	; 0x50
  41b6da:	4b26      	ldr	r3, [pc, #152]	; (41b774 <list_init+0x820>)
  41b6dc:	fb83 2300 	smull	r2, r3, r3, r0
  41b6e0:	17c2      	asrs	r2, r0, #31
  41b6e2:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41b6e6:	b212      	sxth	r2, r2
  41b6e8:	e62c      	b.n	41b344 <list_init+0x3f0>
  41b6ea:	2000      	movs	r0, #0
  41b6ec:	4b20      	ldr	r3, [pc, #128]	; (41b770 <list_init+0x81c>)
  41b6ee:	4798      	blx	r3
  41b6f0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b6f4:	0040      	lsls	r0, r0, #1
  41b6f6:	3050      	adds	r0, #80	; 0x50
  41b6f8:	4b1e      	ldr	r3, [pc, #120]	; (41b774 <list_init+0x820>)
  41b6fa:	fb83 2300 	smull	r2, r3, r3, r0
  41b6fe:	17c2      	asrs	r2, r0, #31
  41b700:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41b704:	b212      	sxth	r2, r2
  41b706:	e61d      	b.n	41b344 <list_init+0x3f0>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_PRESSED, -BORDER_WIDTH);
  41b708:	2000      	movs	r0, #0
  41b70a:	4b19      	ldr	r3, [pc, #100]	; (41b770 <list_init+0x81c>)
  41b70c:	4798      	blx	r3
  41b70e:	3028      	adds	r0, #40	; 0x28
  41b710:	0040      	lsls	r0, r0, #1
  41b712:	4b18      	ldr	r3, [pc, #96]	; (41b774 <list_init+0x820>)
  41b714:	fb83 2300 	smull	r2, r3, r3, r0
  41b718:	17c2      	asrs	r2, r0, #31
  41b71a:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41b71e:	b212      	sxth	r2, r2
  41b720:	e622      	b.n	41b368 <list_init+0x414>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_CHECKED, -BORDER_WIDTH);
  41b722:	2000      	movs	r0, #0
  41b724:	4b12      	ldr	r3, [pc, #72]	; (41b770 <list_init+0x81c>)
  41b726:	4798      	blx	r3
  41b728:	3028      	adds	r0, #40	; 0x28
  41b72a:	0040      	lsls	r0, r0, #1
  41b72c:	4b11      	ldr	r3, [pc, #68]	; (41b774 <list_init+0x820>)
  41b72e:	fb83 2300 	smull	r2, r3, r3, r0
  41b732:	17c2      	asrs	r2, r0, #31
  41b734:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41b738:	b212      	sxth	r2, r2
  41b73a:	e628      	b.n	41b38e <list_init+0x43a>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DISABLED, -BORDER_WIDTH);
  41b73c:	2000      	movs	r0, #0
  41b73e:	4b0c      	ldr	r3, [pc, #48]	; (41b770 <list_init+0x81c>)
  41b740:	4798      	blx	r3
  41b742:	3028      	adds	r0, #40	; 0x28
  41b744:	0040      	lsls	r0, r0, #1
  41b746:	4b0b      	ldr	r3, [pc, #44]	; (41b774 <list_init+0x820>)
  41b748:	fb83 2300 	smull	r2, r3, r3, r0
  41b74c:	17c2      	asrs	r2, r0, #31
  41b74e:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41b752:	b212      	sxth	r2, r2
  41b754:	e62e      	b.n	41b3b4 <list_init+0x460>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_FOCUSED, - BORDER_WIDTH);
  41b756:	2000      	movs	r0, #0
  41b758:	4b05      	ldr	r3, [pc, #20]	; (41b770 <list_init+0x81c>)
  41b75a:	4798      	blx	r3
  41b75c:	3028      	adds	r0, #40	; 0x28
  41b75e:	0040      	lsls	r0, r0, #1
  41b760:	4b04      	ldr	r3, [pc, #16]	; (41b774 <list_init+0x820>)
  41b762:	fb83 2300 	smull	r2, r3, r3, r0
  41b766:	17c2      	asrs	r2, r0, #31
  41b768:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41b76c:	b212      	sxth	r2, r2
  41b76e:	e634      	b.n	41b3da <list_init+0x486>
  41b770:	00414dfd 	.word	0x00414dfd
  41b774:	66666667 	.word	0x66666667

0041b778 <ddlist_init>:
{
  41b778:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->ddlist_page);
  41b77a:	4c48      	ldr	r4, [pc, #288]	; (41b89c <ddlist_init+0x124>)
  41b77c:	6820      	ldr	r0, [r4, #0]
  41b77e:	3058      	adds	r0, #88	; 0x58
  41b780:	4b47      	ldr	r3, [pc, #284]	; (41b8a0 <ddlist_init+0x128>)
  41b782:	4798      	blx	r3
    lv_style_set_text_line_space(&styles->ddlist_page, LV_STATE_DEFAULT, LV_DPX(20));
  41b784:	6824      	ldr	r4, [r4, #0]
  41b786:	3458      	adds	r4, #88	; 0x58
  41b788:	2000      	movs	r0, #0
  41b78a:	4b46      	ldr	r3, [pc, #280]	; (41b8a4 <ddlist_init+0x12c>)
  41b78c:	4798      	blx	r3
  41b78e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b792:	0080      	lsls	r0, r0, #2
  41b794:	3050      	adds	r0, #80	; 0x50
  41b796:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b79a:	da4d      	bge.n	41b838 <ddlist_init+0xc0>
  41b79c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  41b79e:	f248 0181 	movw	r1, #32897	; 0x8081
  41b7a2:	4620      	mov	r0, r4
  41b7a4:	4d40      	ldr	r5, [pc, #256]	; (41b8a8 <ddlist_init+0x130>)
  41b7a6:	47a8      	blx	r5
    lv_style_set_clip_corner(&styles->ddlist_page, LV_STATE_DEFAULT, true);
  41b7a8:	4c3c      	ldr	r4, [pc, #240]	; (41b89c <ddlist_init+0x124>)
  41b7aa:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  41b7ac:	2201      	movs	r2, #1
  41b7ae:	2102      	movs	r1, #2
  41b7b0:	3058      	adds	r0, #88	; 0x58
  41b7b2:	47a8      	blx	r5
    style_init_reset(&styles->ddlist_sel);
  41b7b4:	6820      	ldr	r0, [r4, #0]
  41b7b6:	305c      	adds	r0, #92	; 0x5c
  41b7b8:	4b39      	ldr	r3, [pc, #228]	; (41b8a0 <ddlist_init+0x128>)
  41b7ba:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->ddlist_sel, LV_STATE_DEFAULT, LV_OPA_COVER);
  41b7bc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41b7be:	22ff      	movs	r2, #255	; 0xff
  41b7c0:	212c      	movs	r1, #44	; 0x2c
  41b7c2:	305c      	adds	r0, #92	; 0x5c
  41b7c4:	4b39      	ldr	r3, [pc, #228]	; (41b8ac <ddlist_init+0x134>)
  41b7c6:	4798      	blx	r3
    lv_style_set_bg_color(&styles->ddlist_sel, LV_STATE_DEFAULT, theme.color_primary);
  41b7c8:	6820      	ldr	r0, [r4, #0]
  41b7ca:	4d39      	ldr	r5, [pc, #228]	; (41b8b0 <ddlist_init+0x138>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41b7cc:	89aa      	ldrh	r2, [r5, #12]
  41b7ce:	2129      	movs	r1, #41	; 0x29
  41b7d0:	305c      	adds	r0, #92	; 0x5c
  41b7d2:	4b38      	ldr	r3, [pc, #224]	; (41b8b4 <ddlist_init+0x13c>)
  41b7d4:	4798      	blx	r3
    lv_style_set_text_color(&styles->ddlist_sel, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex3(0xfff) : lv_color_hex3(0xfff));
  41b7d6:	6820      	ldr	r0, [r4, #0]
  41b7d8:	305c      	adds	r0, #92	; 0x5c
  41b7da:	6a2b      	ldr	r3, [r5, #32]
  41b7dc:	f013 0f02 	tst.w	r3, #2
  41b7e0:	d039      	beq.n	41b856 <ddlist_init+0xde>
  41b7e2:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41b7e6:	f248 0189 	movw	r1, #32905	; 0x8089
  41b7ea:	4b32      	ldr	r3, [pc, #200]	; (41b8b4 <ddlist_init+0x13c>)
  41b7ec:	4798      	blx	r3
    lv_style_set_bg_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_PR);
  41b7ee:	4b2b      	ldr	r3, [pc, #172]	; (41b89c <ddlist_init+0x124>)
  41b7f0:	6818      	ldr	r0, [r3, #0]
  41b7f2:	305c      	adds	r0, #92	; 0x5c
  41b7f4:	4b2e      	ldr	r3, [pc, #184]	; (41b8b0 <ddlist_init+0x138>)
  41b7f6:	6a1b      	ldr	r3, [r3, #32]
  41b7f8:	f013 0f02 	tst.w	r3, #2
  41b7fc:	d02e      	beq.n	41b85c <ddlist_init+0xe4>
  41b7fe:	f04f 0207 	mov.w	r2, #7
  41b802:	231d      	movs	r3, #29
  41b804:	f363 02c7 	bfi	r2, r3, #3, #5
  41b808:	f363 220c 	bfi	r2, r3, #8, #5
  41b80c:	2303      	movs	r3, #3
  41b80e:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41b812:	f241 0129 	movw	r1, #4137	; 0x1029
  41b816:	4b27      	ldr	r3, [pc, #156]	; (41b8b4 <ddlist_init+0x13c>)
  41b818:	4798      	blx	r3
    lv_style_set_text_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
  41b81a:	4b20      	ldr	r3, [pc, #128]	; (41b89c <ddlist_init+0x124>)
  41b81c:	6818      	ldr	r0, [r3, #0]
  41b81e:	305c      	adds	r0, #92	; 0x5c
  41b820:	4b23      	ldr	r3, [pc, #140]	; (41b8b0 <ddlist_init+0x138>)
  41b822:	6a1b      	ldr	r3, [r3, #32]
  41b824:	f013 0f02 	tst.w	r3, #2
  41b828:	d127      	bne.n	41b87a <ddlist_init+0x102>
  41b82a:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41b82e:	f249 0189 	movw	r1, #37001	; 0x9089
  41b832:	4b20      	ldr	r3, [pc, #128]	; (41b8b4 <ddlist_init+0x13c>)
  41b834:	4798      	blx	r3
  41b836:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_set_text_line_space(&styles->ddlist_page, LV_STATE_DEFAULT, LV_DPX(20));
  41b838:	2000      	movs	r0, #0
  41b83a:	4b1a      	ldr	r3, [pc, #104]	; (41b8a4 <ddlist_init+0x12c>)
  41b83c:	4798      	blx	r3
  41b83e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b842:	0080      	lsls	r0, r0, #2
  41b844:	3050      	adds	r0, #80	; 0x50
  41b846:	4b1c      	ldr	r3, [pc, #112]	; (41b8b8 <ddlist_init+0x140>)
  41b848:	fb83 2300 	smull	r2, r3, r3, r0
  41b84c:	17c2      	asrs	r2, r0, #31
  41b84e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b852:	b212      	sxth	r2, r2
  41b854:	e7a3      	b.n	41b79e <ddlist_init+0x26>
  41b856:	f04f 32ff 	mov.w	r2, #4294967295
  41b85a:	e7c4      	b.n	41b7e6 <ddlist_init+0x6e>
  41b85c:	f04f 0200 	mov.w	r2, #0
  41b860:	2302      	movs	r3, #2
  41b862:	f363 0202 	bfi	r2, r3, #0, #3
  41b866:	2309      	movs	r3, #9
  41b868:	f363 02c7 	bfi	r2, r3, #3, #5
  41b86c:	230a      	movs	r3, #10
  41b86e:	f363 220c 	bfi	r2, r3, #8, #5
  41b872:	2303      	movs	r3, #3
  41b874:	f363 324f 	bfi	r2, r3, #13, #3
  41b878:	e7cb      	b.n	41b812 <ddlist_init+0x9a>
  41b87a:	f04f 0200 	mov.w	r2, #0
  41b87e:	2301      	movs	r3, #1
  41b880:	f363 0202 	bfi	r2, r3, #0, #3
  41b884:	2307      	movs	r3, #7
  41b886:	f363 02c7 	bfi	r2, r3, #3, #5
  41b88a:	2308      	movs	r3, #8
  41b88c:	f363 220c 	bfi	r2, r3, #8, #5
  41b890:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41b894:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
  41b898:	e7c9      	b.n	41b82e <ddlist_init+0xb6>
  41b89a:	bf00      	nop
  41b89c:	20414834 	.word	0x20414834
  41b8a0:	00418a71 	.word	0x00418a71
  41b8a4:	00414dfd 	.word	0x00414dfd
  41b8a8:	0040a269 	.word	0x0040a269
  41b8ac:	0040a589 	.word	0x0040a589
  41b8b0:	20414838 	.word	0x20414838
  41b8b4:	0040a3f9 	.word	0x0040a3f9
  41b8b8:	66666667 	.word	0x66666667

0041b8bc <roller_init>:
{
  41b8bc:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->roller_bg);
  41b8be:	4c21      	ldr	r4, [pc, #132]	; (41b944 <roller_init+0x88>)
  41b8c0:	6820      	ldr	r0, [r4, #0]
  41b8c2:	308c      	adds	r0, #140	; 0x8c
  41b8c4:	4b20      	ldr	r3, [pc, #128]	; (41b948 <roller_init+0x8c>)
  41b8c6:	4798      	blx	r3
    lv_style_set_text_line_space(&styles->roller_bg, LV_STATE_DEFAULT, LV_DPX(25));
  41b8c8:	6824      	ldr	r4, [r4, #0]
  41b8ca:	348c      	adds	r4, #140	; 0x8c
  41b8cc:	2000      	movs	r0, #0
  41b8ce:	4b1f      	ldr	r3, [pc, #124]	; (41b94c <roller_init+0x90>)
  41b8d0:	4798      	blx	r3
  41b8d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b8d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b8da:	3050      	adds	r0, #80	; 0x50
  41b8dc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b8e0:	da1f      	bge.n	41b922 <roller_init+0x66>
  41b8e2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  41b8e4:	f248 0181 	movw	r1, #32897	; 0x8081
  41b8e8:	4620      	mov	r0, r4
  41b8ea:	4b19      	ldr	r3, [pc, #100]	; (41b950 <roller_init+0x94>)
  41b8ec:	4798      	blx	r3
    style_init_reset(&styles->roller_sel);
  41b8ee:	4c15      	ldr	r4, [pc, #84]	; (41b944 <roller_init+0x88>)
  41b8f0:	6820      	ldr	r0, [r4, #0]
  41b8f2:	3090      	adds	r0, #144	; 0x90
  41b8f4:	4b14      	ldr	r3, [pc, #80]	; (41b948 <roller_init+0x8c>)
  41b8f6:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->roller_sel, LV_STATE_DEFAULT, LV_OPA_COVER);
  41b8f8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41b8fa:	22ff      	movs	r2, #255	; 0xff
  41b8fc:	212c      	movs	r1, #44	; 0x2c
  41b8fe:	3090      	adds	r0, #144	; 0x90
  41b900:	4b14      	ldr	r3, [pc, #80]	; (41b954 <roller_init+0x98>)
  41b902:	4798      	blx	r3
    lv_style_set_bg_color(&styles->roller_sel, LV_STATE_DEFAULT, theme.color_primary);
  41b904:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41b906:	4b14      	ldr	r3, [pc, #80]	; (41b958 <roller_init+0x9c>)
  41b908:	899a      	ldrh	r2, [r3, #12]
  41b90a:	2129      	movs	r1, #41	; 0x29
  41b90c:	3090      	adds	r0, #144	; 0x90
  41b90e:	4d13      	ldr	r5, [pc, #76]	; (41b95c <roller_init+0xa0>)
  41b910:	47a8      	blx	r5
    lv_style_set_text_color(&styles->roller_sel, LV_STATE_DEFAULT, LV_COLOR_WHITE);
  41b912:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41b914:	4b12      	ldr	r3, [pc, #72]	; (41b960 <roller_init+0xa4>)
  41b916:	881a      	ldrh	r2, [r3, #0]
  41b918:	f248 0189 	movw	r1, #32905	; 0x8089
  41b91c:	3090      	adds	r0, #144	; 0x90
  41b91e:	47a8      	blx	r5
  41b920:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_set_text_line_space(&styles->roller_bg, LV_STATE_DEFAULT, LV_DPX(25));
  41b922:	2000      	movs	r0, #0
  41b924:	4b09      	ldr	r3, [pc, #36]	; (41b94c <roller_init+0x90>)
  41b926:	4798      	blx	r3
  41b928:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b92c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b930:	3050      	adds	r0, #80	; 0x50
  41b932:	4b0c      	ldr	r3, [pc, #48]	; (41b964 <roller_init+0xa8>)
  41b934:	fb83 2300 	smull	r2, r3, r3, r0
  41b938:	17c2      	asrs	r2, r0, #31
  41b93a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b93e:	b212      	sxth	r2, r2
  41b940:	e7d0      	b.n	41b8e4 <roller_init+0x28>
  41b942:	bf00      	nop
  41b944:	20414834 	.word	0x20414834
  41b948:	00418a71 	.word	0x00418a71
  41b94c:	00414dfd 	.word	0x00414dfd
  41b950:	0040a269 	.word	0x0040a269
  41b954:	0040a589 	.word	0x0040a589
  41b958:	20414838 	.word	0x20414838
  41b95c:	0040a3f9 	.word	0x0040a3f9
  41b960:	0042fe2c 	.word	0x0042fe2c
  41b964:	66666667 	.word	0x66666667

0041b968 <table_init>:
{
  41b968:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->table_cell);
  41b96a:	4c9d      	ldr	r4, [pc, #628]	; (41bbe0 <table_init+0x278>)
  41b96c:	6820      	ldr	r0, [r4, #0]
  41b96e:	30a4      	adds	r0, #164	; 0xa4
  41b970:	4b9c      	ldr	r3, [pc, #624]	; (41bbe4 <table_init+0x27c>)
  41b972:	4798      	blx	r3
    lv_style_set_border_color(&styles->table_cell, LV_STATE_DEFAULT, COLOR_BG_BORDER);
  41b974:	6820      	ldr	r0, [r4, #0]
  41b976:	30a4      	adds	r0, #164	; 0xa4
  41b978:	4b9b      	ldr	r3, [pc, #620]	; (41bbe8 <table_init+0x280>)
  41b97a:	6a1b      	ldr	r3, [r3, #32]
  41b97c:	f013 0f02 	tst.w	r3, #2
  41b980:	d07e      	beq.n	41ba80 <table_init+0x118>
  41b982:	f04f 0200 	mov.w	r2, #0
  41b986:	2306      	movs	r3, #6
  41b988:	f363 0202 	bfi	r2, r3, #0, #3
  41b98c:	231a      	movs	r3, #26
  41b98e:	f363 02c7 	bfi	r2, r3, #3, #5
  41b992:	231c      	movs	r3, #28
  41b994:	f363 220c 	bfi	r2, r3, #8, #5
  41b998:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41b99c:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41b9a0:	2139      	movs	r1, #57	; 0x39
  41b9a2:	4b92      	ldr	r3, [pc, #584]	; (41bbec <table_init+0x284>)
  41b9a4:	4798      	blx	r3
    lv_style_set_border_width(&styles->table_cell, LV_STATE_DEFAULT, 1);
  41b9a6:	4c8e      	ldr	r4, [pc, #568]	; (41bbe0 <table_init+0x278>)
  41b9a8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41b9aa:	2201      	movs	r2, #1
  41b9ac:	2130      	movs	r1, #48	; 0x30
  41b9ae:	30a4      	adds	r0, #164	; 0xa4
  41b9b0:	4d8f      	ldr	r5, [pc, #572]	; (41bbf0 <table_init+0x288>)
  41b9b2:	47a8      	blx	r5
    lv_style_set_border_side(&styles->table_cell, LV_STATE_DEFAULT, LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM);
  41b9b4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  41b9b6:	2203      	movs	r2, #3
  41b9b8:	2131      	movs	r1, #49	; 0x31
  41b9ba:	30a4      	adds	r0, #164	; 0xa4
  41b9bc:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41b9be:	6824      	ldr	r4, [r4, #0]
  41b9c0:	34a4      	adds	r4, #164	; 0xa4
  41b9c2:	2000      	movs	r0, #0
  41b9c4:	4b8b      	ldr	r3, [pc, #556]	; (41bbf4 <table_init+0x28c>)
  41b9c6:	4798      	blx	r3
  41b9c8:	2801      	cmp	r0, #1
  41b9ca:	d968      	bls.n	41ba9e <table_init+0x136>
  41b9cc:	2000      	movs	r0, #0
  41b9ce:	4b8a      	ldr	r3, [pc, #552]	; (41bbf8 <table_init+0x290>)
  41b9d0:	4798      	blx	r3
  41b9d2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b9d6:	0040      	lsls	r0, r0, #1
  41b9d8:	3050      	adds	r0, #80	; 0x50
  41b9da:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b9de:	da77      	bge.n	41bad0 <table_init+0x168>
  41b9e0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41b9e2:	2112      	movs	r1, #18
  41b9e4:	4620      	mov	r0, r4
  41b9e6:	4b82      	ldr	r3, [pc, #520]	; (41bbf0 <table_init+0x288>)
  41b9e8:	4798      	blx	r3
    lv_style_set_pad_right(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41b9ea:	4b7d      	ldr	r3, [pc, #500]	; (41bbe0 <table_init+0x278>)
  41b9ec:	681c      	ldr	r4, [r3, #0]
  41b9ee:	34a4      	adds	r4, #164	; 0xa4
  41b9f0:	2000      	movs	r0, #0
  41b9f2:	4b80      	ldr	r3, [pc, #512]	; (41bbf4 <table_init+0x28c>)
  41b9f4:	4798      	blx	r3
  41b9f6:	2801      	cmp	r0, #1
  41b9f8:	d979      	bls.n	41baee <table_init+0x186>
  41b9fa:	2000      	movs	r0, #0
  41b9fc:	4b7e      	ldr	r3, [pc, #504]	; (41bbf8 <table_init+0x290>)
  41b9fe:	4798      	blx	r3
  41ba00:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ba04:	0040      	lsls	r0, r0, #1
  41ba06:	3050      	adds	r0, #80	; 0x50
  41ba08:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ba0c:	f280 8088 	bge.w	41bb20 <table_init+0x1b8>
  41ba10:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41ba12:	2113      	movs	r1, #19
  41ba14:	4620      	mov	r0, r4
  41ba16:	4b76      	ldr	r3, [pc, #472]	; (41bbf0 <table_init+0x288>)
  41ba18:	4798      	blx	r3
    lv_style_set_pad_top(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41ba1a:	4b71      	ldr	r3, [pc, #452]	; (41bbe0 <table_init+0x278>)
  41ba1c:	681c      	ldr	r4, [r3, #0]
  41ba1e:	34a4      	adds	r4, #164	; 0xa4
  41ba20:	2000      	movs	r0, #0
  41ba22:	4b74      	ldr	r3, [pc, #464]	; (41bbf4 <table_init+0x28c>)
  41ba24:	4798      	blx	r3
  41ba26:	2801      	cmp	r0, #1
  41ba28:	f240 8089 	bls.w	41bb3e <table_init+0x1d6>
  41ba2c:	2000      	movs	r0, #0
  41ba2e:	4b72      	ldr	r3, [pc, #456]	; (41bbf8 <table_init+0x290>)
  41ba30:	4798      	blx	r3
  41ba32:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ba36:	0040      	lsls	r0, r0, #1
  41ba38:	3050      	adds	r0, #80	; 0x50
  41ba3a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ba3e:	f280 8097 	bge.w	41bb70 <table_init+0x208>
  41ba42:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41ba44:	2110      	movs	r1, #16
  41ba46:	4620      	mov	r0, r4
  41ba48:	4b69      	ldr	r3, [pc, #420]	; (41bbf0 <table_init+0x288>)
  41ba4a:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41ba4c:	4b64      	ldr	r3, [pc, #400]	; (41bbe0 <table_init+0x278>)
  41ba4e:	681c      	ldr	r4, [r3, #0]
  41ba50:	34a4      	adds	r4, #164	; 0xa4
  41ba52:	2000      	movs	r0, #0
  41ba54:	4b67      	ldr	r3, [pc, #412]	; (41bbf4 <table_init+0x28c>)
  41ba56:	4798      	blx	r3
  41ba58:	2801      	cmp	r0, #1
  41ba5a:	f240 8098 	bls.w	41bb8e <table_init+0x226>
  41ba5e:	2000      	movs	r0, #0
  41ba60:	4b65      	ldr	r3, [pc, #404]	; (41bbf8 <table_init+0x290>)
  41ba62:	4798      	blx	r3
  41ba64:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ba68:	0040      	lsls	r0, r0, #1
  41ba6a:	3050      	adds	r0, #80	; 0x50
  41ba6c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ba70:	f280 80a6 	bge.w	41bbc0 <table_init+0x258>
  41ba74:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41ba76:	2111      	movs	r1, #17
  41ba78:	4620      	mov	r0, r4
  41ba7a:	4b5d      	ldr	r3, [pc, #372]	; (41bbf0 <table_init+0x288>)
  41ba7c:	4798      	blx	r3
  41ba7e:	bd38      	pop	{r3, r4, r5, pc}
  41ba80:	f04f 0200 	mov.w	r2, #0
  41ba84:	2304      	movs	r3, #4
  41ba86:	f363 0202 	bfi	r2, r3, #0, #3
  41ba8a:	2310      	movs	r3, #16
  41ba8c:	f363 02c7 	bfi	r2, r3, #3, #5
  41ba90:	2312      	movs	r3, #18
  41ba92:	f363 220c 	bfi	r2, r3, #8, #5
  41ba96:	2302      	movs	r3, #2
  41ba98:	f363 324f 	bfi	r2, r3, #13, #3
  41ba9c:	e780      	b.n	41b9a0 <table_init+0x38>
    lv_style_set_pad_left(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41ba9e:	2000      	movs	r0, #0
  41baa0:	4b55      	ldr	r3, [pc, #340]	; (41bbf8 <table_init+0x290>)
  41baa2:	4798      	blx	r3
  41baa4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41baa8:	3050      	adds	r0, #80	; 0x50
  41baaa:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41baae:	da01      	bge.n	41bab4 <table_init+0x14c>
  41bab0:	2201      	movs	r2, #1
  41bab2:	e796      	b.n	41b9e2 <table_init+0x7a>
  41bab4:	2000      	movs	r0, #0
  41bab6:	4b50      	ldr	r3, [pc, #320]	; (41bbf8 <table_init+0x290>)
  41bab8:	4798      	blx	r3
  41baba:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41babe:	3050      	adds	r0, #80	; 0x50
  41bac0:	4b4e      	ldr	r3, [pc, #312]	; (41bbfc <table_init+0x294>)
  41bac2:	fb83 2300 	smull	r2, r3, r3, r0
  41bac6:	17c2      	asrs	r2, r0, #31
  41bac8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bacc:	b212      	sxth	r2, r2
  41bace:	e788      	b.n	41b9e2 <table_init+0x7a>
  41bad0:	2000      	movs	r0, #0
  41bad2:	4b49      	ldr	r3, [pc, #292]	; (41bbf8 <table_init+0x290>)
  41bad4:	4798      	blx	r3
  41bad6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bada:	0040      	lsls	r0, r0, #1
  41badc:	3050      	adds	r0, #80	; 0x50
  41bade:	4b47      	ldr	r3, [pc, #284]	; (41bbfc <table_init+0x294>)
  41bae0:	fb83 2300 	smull	r2, r3, r3, r0
  41bae4:	17c2      	asrs	r2, r0, #31
  41bae6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41baea:	b212      	sxth	r2, r2
  41baec:	e779      	b.n	41b9e2 <table_init+0x7a>
    lv_style_set_pad_right(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41baee:	2000      	movs	r0, #0
  41baf0:	4b41      	ldr	r3, [pc, #260]	; (41bbf8 <table_init+0x290>)
  41baf2:	4798      	blx	r3
  41baf4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41baf8:	3050      	adds	r0, #80	; 0x50
  41bafa:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bafe:	da01      	bge.n	41bb04 <table_init+0x19c>
  41bb00:	2201      	movs	r2, #1
  41bb02:	e786      	b.n	41ba12 <table_init+0xaa>
  41bb04:	2000      	movs	r0, #0
  41bb06:	4b3c      	ldr	r3, [pc, #240]	; (41bbf8 <table_init+0x290>)
  41bb08:	4798      	blx	r3
  41bb0a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bb0e:	3050      	adds	r0, #80	; 0x50
  41bb10:	4b3a      	ldr	r3, [pc, #232]	; (41bbfc <table_init+0x294>)
  41bb12:	fb83 2300 	smull	r2, r3, r3, r0
  41bb16:	17c2      	asrs	r2, r0, #31
  41bb18:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bb1c:	b212      	sxth	r2, r2
  41bb1e:	e778      	b.n	41ba12 <table_init+0xaa>
  41bb20:	2000      	movs	r0, #0
  41bb22:	4b35      	ldr	r3, [pc, #212]	; (41bbf8 <table_init+0x290>)
  41bb24:	4798      	blx	r3
  41bb26:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bb2a:	0040      	lsls	r0, r0, #1
  41bb2c:	3050      	adds	r0, #80	; 0x50
  41bb2e:	4b33      	ldr	r3, [pc, #204]	; (41bbfc <table_init+0x294>)
  41bb30:	fb83 2300 	smull	r2, r3, r3, r0
  41bb34:	17c2      	asrs	r2, r0, #31
  41bb36:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bb3a:	b212      	sxth	r2, r2
  41bb3c:	e769      	b.n	41ba12 <table_init+0xaa>
    lv_style_set_pad_top(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41bb3e:	2000      	movs	r0, #0
  41bb40:	4b2d      	ldr	r3, [pc, #180]	; (41bbf8 <table_init+0x290>)
  41bb42:	4798      	blx	r3
  41bb44:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bb48:	3050      	adds	r0, #80	; 0x50
  41bb4a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bb4e:	da01      	bge.n	41bb54 <table_init+0x1ec>
  41bb50:	2201      	movs	r2, #1
  41bb52:	e777      	b.n	41ba44 <table_init+0xdc>
  41bb54:	2000      	movs	r0, #0
  41bb56:	4b28      	ldr	r3, [pc, #160]	; (41bbf8 <table_init+0x290>)
  41bb58:	4798      	blx	r3
  41bb5a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bb5e:	3050      	adds	r0, #80	; 0x50
  41bb60:	4b26      	ldr	r3, [pc, #152]	; (41bbfc <table_init+0x294>)
  41bb62:	fb83 2300 	smull	r2, r3, r3, r0
  41bb66:	17c2      	asrs	r2, r0, #31
  41bb68:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bb6c:	b212      	sxth	r2, r2
  41bb6e:	e769      	b.n	41ba44 <table_init+0xdc>
  41bb70:	2000      	movs	r0, #0
  41bb72:	4b21      	ldr	r3, [pc, #132]	; (41bbf8 <table_init+0x290>)
  41bb74:	4798      	blx	r3
  41bb76:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bb7a:	0040      	lsls	r0, r0, #1
  41bb7c:	3050      	adds	r0, #80	; 0x50
  41bb7e:	4b1f      	ldr	r3, [pc, #124]	; (41bbfc <table_init+0x294>)
  41bb80:	fb83 2300 	smull	r2, r3, r3, r0
  41bb84:	17c2      	asrs	r2, r0, #31
  41bb86:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bb8a:	b212      	sxth	r2, r2
  41bb8c:	e75a      	b.n	41ba44 <table_init+0xdc>
    lv_style_set_pad_bottom(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41bb8e:	2000      	movs	r0, #0
  41bb90:	4b19      	ldr	r3, [pc, #100]	; (41bbf8 <table_init+0x290>)
  41bb92:	4798      	blx	r3
  41bb94:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bb98:	3050      	adds	r0, #80	; 0x50
  41bb9a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bb9e:	da01      	bge.n	41bba4 <table_init+0x23c>
  41bba0:	2201      	movs	r2, #1
  41bba2:	e768      	b.n	41ba76 <table_init+0x10e>
  41bba4:	2000      	movs	r0, #0
  41bba6:	4b14      	ldr	r3, [pc, #80]	; (41bbf8 <table_init+0x290>)
  41bba8:	4798      	blx	r3
  41bbaa:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bbae:	3050      	adds	r0, #80	; 0x50
  41bbb0:	4b12      	ldr	r3, [pc, #72]	; (41bbfc <table_init+0x294>)
  41bbb2:	fb83 2300 	smull	r2, r3, r3, r0
  41bbb6:	17c2      	asrs	r2, r0, #31
  41bbb8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bbbc:	b212      	sxth	r2, r2
  41bbbe:	e75a      	b.n	41ba76 <table_init+0x10e>
  41bbc0:	2000      	movs	r0, #0
  41bbc2:	4b0d      	ldr	r3, [pc, #52]	; (41bbf8 <table_init+0x290>)
  41bbc4:	4798      	blx	r3
  41bbc6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bbca:	0040      	lsls	r0, r0, #1
  41bbcc:	3050      	adds	r0, #80	; 0x50
  41bbce:	4b0b      	ldr	r3, [pc, #44]	; (41bbfc <table_init+0x294>)
  41bbd0:	fb83 2300 	smull	r2, r3, r3, r0
  41bbd4:	17c2      	asrs	r2, r0, #31
  41bbd6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bbda:	b212      	sxth	r2, r2
  41bbdc:	e74b      	b.n	41ba76 <table_init+0x10e>
  41bbde:	bf00      	nop
  41bbe0:	20414834 	.word	0x20414834
  41bbe4:	00418a71 	.word	0x00418a71
  41bbe8:	20414838 	.word	0x20414838
  41bbec:	0040a3f9 	.word	0x0040a3f9
  41bbf0:	0040a269 	.word	0x0040a269
  41bbf4:	00414e1d 	.word	0x00414e1d
  41bbf8:	00414dfd 	.word	0x00414dfd
  41bbfc:	66666667 	.word	0x66666667

0041bc00 <tabview_win_shared_init>:
{
  41bc00:	b570      	push	{r4, r5, r6, lr}
    style_init_reset(&styles->tabview_btns_bg);
  41bc02:	4cbe      	ldr	r4, [pc, #760]	; (41befc <tabview_win_shared_init+0x2fc>)
  41bc04:	6820      	ldr	r0, [r4, #0]
  41bc06:	30ac      	adds	r0, #172	; 0xac
  41bc08:	4bbd      	ldr	r3, [pc, #756]	; (41bf00 <tabview_win_shared_init+0x300>)
  41bc0a:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
  41bc0c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41bc0e:	22ff      	movs	r2, #255	; 0xff
  41bc10:	212c      	movs	r1, #44	; 0x2c
  41bc12:	30ac      	adds	r0, #172	; 0xac
  41bc14:	4bbb      	ldr	r3, [pc, #748]	; (41bf04 <tabview_win_shared_init+0x304>)
  41bc16:	4798      	blx	r3
    lv_style_set_bg_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_BG);
  41bc18:	6820      	ldr	r0, [r4, #0]
  41bc1a:	30ac      	adds	r0, #172	; 0xac
  41bc1c:	4bba      	ldr	r3, [pc, #744]	; (41bf08 <tabview_win_shared_init+0x308>)
  41bc1e:	6a1b      	ldr	r3, [r3, #32]
  41bc20:	f013 0f02 	tst.w	r3, #2
  41bc24:	f000 8198 	beq.w	41bf58 <tabview_win_shared_init+0x358>
  41bc28:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41bc2c:	2129      	movs	r1, #41	; 0x29
  41bc2e:	4bb7      	ldr	r3, [pc, #732]	; (41bf0c <tabview_win_shared_init+0x30c>)
  41bc30:	4798      	blx	r3
    lv_style_set_text_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
  41bc32:	4bb2      	ldr	r3, [pc, #712]	; (41befc <tabview_win_shared_init+0x2fc>)
  41bc34:	6818      	ldr	r0, [r3, #0]
  41bc36:	30ac      	adds	r0, #172	; 0xac
  41bc38:	4bb3      	ldr	r3, [pc, #716]	; (41bf08 <tabview_win_shared_init+0x308>)
  41bc3a:	6a1b      	ldr	r3, [r3, #32]
  41bc3c:	f013 0f02 	tst.w	r3, #2
  41bc40:	f000 8198 	beq.w	41bf74 <tabview_win_shared_init+0x374>
  41bc44:	f04f 0200 	mov.w	r2, #0
  41bc48:	2301      	movs	r3, #1
  41bc4a:	f363 0202 	bfi	r2, r3, #0, #3
  41bc4e:	2307      	movs	r3, #7
  41bc50:	f363 02c7 	bfi	r2, r3, #3, #5
  41bc54:	2308      	movs	r3, #8
  41bc56:	f363 220c 	bfi	r2, r3, #8, #5
  41bc5a:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41bc5e:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41bc62:	f248 0189 	movw	r1, #32905	; 0x8089
  41bc66:	4da9      	ldr	r5, [pc, #676]	; (41bf0c <tabview_win_shared_init+0x30c>)
  41bc68:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->tabview_btns_bg, LV_STATE_DEFAULT, lv_color_hex(0x979a9f));
  41bc6a:	4ca4      	ldr	r4, [pc, #656]	; (41befc <tabview_win_shared_init+0x2fc>)
  41bc6c:	6820      	ldr	r0, [r4, #0]
  41bc6e:	f04f 0200 	mov.w	r2, #0
  41bc72:	2304      	movs	r3, #4
  41bc74:	f363 0202 	bfi	r2, r3, #0, #3
  41bc78:	2312      	movs	r3, #18
  41bc7a:	f363 02c7 	bfi	r2, r3, #3, #5
  41bc7e:	2313      	movs	r3, #19
  41bc80:	f363 220c 	bfi	r2, r3, #8, #5
  41bc84:	2306      	movs	r3, #6
  41bc86:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  41bc8a:	f248 01a9 	movw	r1, #32937	; 0x80a9
  41bc8e:	30ac      	adds	r0, #172	; 0xac
  41bc90:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41bc92:	6824      	ldr	r4, [r4, #0]
  41bc94:	34ac      	adds	r4, #172	; 0xac
  41bc96:	2000      	movs	r0, #0
  41bc98:	4b9d      	ldr	r3, [pc, #628]	; (41bf10 <tabview_win_shared_init+0x310>)
  41bc9a:	4798      	blx	r3
  41bc9c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41bca0:	3050      	adds	r0, #80	; 0x50
  41bca2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bca6:	f280 8171 	bge.w	41bf8c <tabview_win_shared_init+0x38c>
  41bcaa:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41bcac:	2110      	movs	r1, #16
  41bcae:	4620      	mov	r0, r4
  41bcb0:	4b98      	ldr	r3, [pc, #608]	; (41bf14 <tabview_win_shared_init+0x314>)
  41bcb2:	4798      	blx	r3
    lv_style_set_pad_left(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41bcb4:	4b91      	ldr	r3, [pc, #580]	; (41befc <tabview_win_shared_init+0x2fc>)
  41bcb6:	681c      	ldr	r4, [r3, #0]
  41bcb8:	34ac      	adds	r4, #172	; 0xac
  41bcba:	2000      	movs	r0, #0
  41bcbc:	4b94      	ldr	r3, [pc, #592]	; (41bf10 <tabview_win_shared_init+0x310>)
  41bcbe:	4798      	blx	r3
  41bcc0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41bcc4:	3050      	adds	r0, #80	; 0x50
  41bcc6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bcca:	f280 816d 	bge.w	41bfa8 <tabview_win_shared_init+0x3a8>
  41bcce:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41bcd0:	2112      	movs	r1, #18
  41bcd2:	4620      	mov	r0, r4
  41bcd4:	4b8f      	ldr	r3, [pc, #572]	; (41bf14 <tabview_win_shared_init+0x314>)
  41bcd6:	4798      	blx	r3
    lv_style_set_pad_right(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41bcd8:	4b88      	ldr	r3, [pc, #544]	; (41befc <tabview_win_shared_init+0x2fc>)
  41bcda:	681c      	ldr	r4, [r3, #0]
  41bcdc:	34ac      	adds	r4, #172	; 0xac
  41bcde:	2000      	movs	r0, #0
  41bce0:	4b8b      	ldr	r3, [pc, #556]	; (41bf10 <tabview_win_shared_init+0x310>)
  41bce2:	4798      	blx	r3
  41bce4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41bce8:	3050      	adds	r0, #80	; 0x50
  41bcea:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bcee:	f280 8169 	bge.w	41bfc4 <tabview_win_shared_init+0x3c4>
  41bcf2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41bcf4:	2113      	movs	r1, #19
  41bcf6:	4620      	mov	r0, r4
  41bcf8:	4b86      	ldr	r3, [pc, #536]	; (41bf14 <tabview_win_shared_init+0x314>)
  41bcfa:	4798      	blx	r3
    style_init_reset(&styles->tabview_btns);
  41bcfc:	4c7f      	ldr	r4, [pc, #508]	; (41befc <tabview_win_shared_init+0x2fc>)
  41bcfe:	6820      	ldr	r0, [r4, #0]
  41bd00:	30a8      	adds	r0, #168	; 0xa8
  41bd02:	4b7f      	ldr	r3, [pc, #508]	; (41bf00 <tabview_win_shared_init+0x300>)
  41bd04:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->tabview_btns, LV_STATE_PRESSED, LV_OPA_50);
  41bd06:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41bd08:	227f      	movs	r2, #127	; 0x7f
  41bd0a:	f241 012c 	movw	r1, #4140	; 0x102c
  41bd0e:	30a8      	adds	r0, #168	; 0xa8
  41bd10:	4b7c      	ldr	r3, [pc, #496]	; (41bf04 <tabview_win_shared_init+0x304>)
  41bd12:	4798      	blx	r3
    lv_style_set_bg_color(&styles->tabview_btns, LV_STATE_PRESSED, lv_color_hex3(0x888));
  41bd14:	6820      	ldr	r0, [r4, #0]
  41bd16:	f04f 0200 	mov.w	r2, #0
  41bd1a:	2304      	movs	r3, #4
  41bd1c:	f363 0202 	bfi	r2, r3, #0, #3
  41bd20:	2311      	movs	r3, #17
  41bd22:	f363 02c7 	bfi	r2, r3, #3, #5
  41bd26:	f363 220c 	bfi	r2, r3, #8, #5
  41bd2a:	2302      	movs	r3, #2
  41bd2c:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41bd30:	f241 0129 	movw	r1, #4137	; 0x1029
  41bd34:	30a8      	adds	r0, #168	; 0xa8
  41bd36:	4b75      	ldr	r3, [pc, #468]	; (41bf0c <tabview_win_shared_init+0x30c>)
  41bd38:	4798      	blx	r3
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_CHECKED, COLOR_SCR_TEXT);
  41bd3a:	6820      	ldr	r0, [r4, #0]
  41bd3c:	30a8      	adds	r0, #168	; 0xa8
  41bd3e:	4b72      	ldr	r3, [pc, #456]	; (41bf08 <tabview_win_shared_init+0x308>)
  41bd40:	6a1b      	ldr	r3, [r3, #32]
  41bd42:	f013 0f02 	tst.w	r3, #2
  41bd46:	f000 814b 	beq.w	41bfe0 <tabview_win_shared_init+0x3e0>
  41bd4a:	f04f 0200 	mov.w	r2, #0
  41bd4e:	2301      	movs	r3, #1
  41bd50:	f363 0202 	bfi	r2, r3, #0, #3
  41bd54:	2307      	movs	r3, #7
  41bd56:	f363 02c7 	bfi	r2, r3, #3, #5
  41bd5a:	2308      	movs	r3, #8
  41bd5c:	f363 220c 	bfi	r2, r3, #8, #5
  41bd60:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41bd64:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41bd68:	f248 1189 	movw	r1, #33161	; 0x8189
  41bd6c:	4b67      	ldr	r3, [pc, #412]	; (41bf0c <tabview_win_shared_init+0x30c>)
  41bd6e:	4798      	blx	r3
    lv_style_set_pad_top(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
  41bd70:	4b62      	ldr	r3, [pc, #392]	; (41befc <tabview_win_shared_init+0x2fc>)
  41bd72:	681c      	ldr	r4, [r3, #0]
  41bd74:	34a8      	adds	r4, #168	; 0xa8
  41bd76:	2000      	movs	r0, #0
  41bd78:	4b65      	ldr	r3, [pc, #404]	; (41bf10 <tabview_win_shared_init+0x310>)
  41bd7a:	4798      	blx	r3
  41bd7c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41bd80:	0080      	lsls	r0, r0, #2
  41bd82:	3050      	adds	r0, #80	; 0x50
  41bd84:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bd88:	f280 8136 	bge.w	41bff8 <tabview_win_shared_init+0x3f8>
  41bd8c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41bd8e:	2110      	movs	r1, #16
  41bd90:	4620      	mov	r0, r4
  41bd92:	4b60      	ldr	r3, [pc, #384]	; (41bf14 <tabview_win_shared_init+0x314>)
  41bd94:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
  41bd96:	4b59      	ldr	r3, [pc, #356]	; (41befc <tabview_win_shared_init+0x2fc>)
  41bd98:	681c      	ldr	r4, [r3, #0]
  41bd9a:	34a8      	adds	r4, #168	; 0xa8
  41bd9c:	2000      	movs	r0, #0
  41bd9e:	4b5c      	ldr	r3, [pc, #368]	; (41bf10 <tabview_win_shared_init+0x310>)
  41bda0:	4798      	blx	r3
  41bda2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41bda6:	0080      	lsls	r0, r0, #2
  41bda8:	3050      	adds	r0, #80	; 0x50
  41bdaa:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bdae:	f280 8132 	bge.w	41c016 <tabview_win_shared_init+0x416>
  41bdb2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41bdb4:	2111      	movs	r1, #17
  41bdb6:	4620      	mov	r0, r4
  41bdb8:	4b56      	ldr	r3, [pc, #344]	; (41bf14 <tabview_win_shared_init+0x314>)
  41bdba:	4798      	blx	r3
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_FOCUSED, theme.color_primary);
  41bdbc:	4c4f      	ldr	r4, [pc, #316]	; (41befc <tabview_win_shared_init+0x2fc>)
  41bdbe:	6820      	ldr	r0, [r4, #0]
  41bdc0:	4e51      	ldr	r6, [pc, #324]	; (41bf08 <tabview_win_shared_init+0x308>)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41bdc2:	89b2      	ldrh	r2, [r6, #12]
  41bdc4:	f248 2189 	movw	r1, #33417	; 0x8289
  41bdc8:	30a8      	adds	r0, #168	; 0xa8
  41bdca:	4d50      	ldr	r5, [pc, #320]	; (41bf0c <tabview_win_shared_init+0x30c>)
  41bdcc:	47a8      	blx	r5
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_EDITED, theme.color_secondary);
  41bdce:	6820      	ldr	r0, [r4, #0]
  41bdd0:	89f2      	ldrh	r2, [r6, #14]
  41bdd2:	f248 4189 	movw	r1, #33929	; 0x8489
  41bdd6:	30a8      	adds	r0, #168	; 0xa8
  41bdd8:	47a8      	blx	r5
    style_init_reset(&styles->tabview_indic);
  41bdda:	6820      	ldr	r0, [r4, #0]
  41bddc:	30b0      	adds	r0, #176	; 0xb0
  41bdde:	4b48      	ldr	r3, [pc, #288]	; (41bf00 <tabview_win_shared_init+0x300>)
  41bde0:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->tabview_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
  41bde2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41bde4:	22ff      	movs	r2, #255	; 0xff
  41bde6:	212c      	movs	r1, #44	; 0x2c
  41bde8:	30b0      	adds	r0, #176	; 0xb0
  41bdea:	4b46      	ldr	r3, [pc, #280]	; (41bf04 <tabview_win_shared_init+0x304>)
  41bdec:	4798      	blx	r3
    lv_style_set_bg_color(&styles->tabview_indic, LV_STATE_DEFAULT, theme.color_primary);
  41bdee:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41bdf0:	89b2      	ldrh	r2, [r6, #12]
  41bdf2:	2129      	movs	r1, #41	; 0x29
  41bdf4:	30b0      	adds	r0, #176	; 0xb0
  41bdf6:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->tabview_indic, LV_STATE_EDITED, theme.color_secondary);
  41bdf8:	6820      	ldr	r0, [r4, #0]
  41bdfa:	89f2      	ldrh	r2, [r6, #14]
  41bdfc:	f240 4129 	movw	r1, #1065	; 0x429
  41be00:	30b0      	adds	r0, #176	; 0xb0
  41be02:	47a8      	blx	r5
    lv_style_set_size(&styles->tabview_indic, LV_STATE_DEFAULT, LV_DPX(5));
  41be04:	6824      	ldr	r4, [r4, #0]
  41be06:	34b0      	adds	r4, #176	; 0xb0
  41be08:	2000      	movs	r0, #0
  41be0a:	4b41      	ldr	r3, [pc, #260]	; (41bf10 <tabview_win_shared_init+0x310>)
  41be0c:	4798      	blx	r3
  41be0e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41be12:	3050      	adds	r0, #80	; 0x50
  41be14:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41be18:	f280 810c 	bge.w	41c034 <tabview_win_shared_init+0x434>
  41be1c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  41be1e:	2103      	movs	r1, #3
  41be20:	4620      	mov	r0, r4
  41be22:	4d3c      	ldr	r5, [pc, #240]	; (41bf14 <tabview_win_shared_init+0x314>)
  41be24:	47a8      	blx	r5
    lv_style_set_radius(&styles->tabview_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  41be26:	4c35      	ldr	r4, [pc, #212]	; (41befc <tabview_win_shared_init+0x2fc>)
  41be28:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41be2a:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41be2e:	2101      	movs	r1, #1
  41be30:	30b0      	adds	r0, #176	; 0xb0
  41be32:	47a8      	blx	r5
    style_init_reset(&styles->tabview_page_scrl);
  41be34:	6820      	ldr	r0, [r4, #0]
  41be36:	30b4      	adds	r0, #180	; 0xb4
  41be38:	4b31      	ldr	r3, [pc, #196]	; (41bf00 <tabview_win_shared_init+0x300>)
  41be3a:	4798      	blx	r3
    lv_style_set_pad_top(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41be3c:	6824      	ldr	r4, [r4, #0]
  41be3e:	34b4      	adds	r4, #180	; 0xb4
  41be40:	2000      	movs	r0, #0
  41be42:	4b35      	ldr	r3, [pc, #212]	; (41bf18 <tabview_win_shared_init+0x318>)
  41be44:	4798      	blx	r3
  41be46:	2801      	cmp	r0, #1
  41be48:	f240 8102 	bls.w	41c050 <tabview_win_shared_init+0x450>
  41be4c:	2000      	movs	r0, #0
  41be4e:	4b30      	ldr	r3, [pc, #192]	; (41bf10 <tabview_win_shared_init+0x310>)
  41be50:	4798      	blx	r3
  41be52:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41be56:	0040      	lsls	r0, r0, #1
  41be58:	3050      	adds	r0, #80	; 0x50
  41be5a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41be5e:	f280 8110 	bge.w	41c082 <tabview_win_shared_init+0x482>
  41be62:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41be64:	2110      	movs	r1, #16
  41be66:	4620      	mov	r0, r4
  41be68:	4b2a      	ldr	r3, [pc, #168]	; (41bf14 <tabview_win_shared_init+0x314>)
  41be6a:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41be6c:	4b23      	ldr	r3, [pc, #140]	; (41befc <tabview_win_shared_init+0x2fc>)
  41be6e:	681c      	ldr	r4, [r3, #0]
  41be70:	34b4      	adds	r4, #180	; 0xb4
  41be72:	2000      	movs	r0, #0
  41be74:	4b28      	ldr	r3, [pc, #160]	; (41bf18 <tabview_win_shared_init+0x318>)
  41be76:	4798      	blx	r3
  41be78:	2801      	cmp	r0, #1
  41be7a:	f240 8111 	bls.w	41c0a0 <tabview_win_shared_init+0x4a0>
  41be7e:	2000      	movs	r0, #0
  41be80:	4b23      	ldr	r3, [pc, #140]	; (41bf10 <tabview_win_shared_init+0x310>)
  41be82:	4798      	blx	r3
  41be84:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41be88:	0040      	lsls	r0, r0, #1
  41be8a:	3050      	adds	r0, #80	; 0x50
  41be8c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41be90:	f280 811f 	bge.w	41c0d2 <tabview_win_shared_init+0x4d2>
  41be94:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41be96:	2111      	movs	r1, #17
  41be98:	4620      	mov	r0, r4
  41be9a:	4b1e      	ldr	r3, [pc, #120]	; (41bf14 <tabview_win_shared_init+0x314>)
  41be9c:	4798      	blx	r3
    lv_style_set_pad_left(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41be9e:	4b17      	ldr	r3, [pc, #92]	; (41befc <tabview_win_shared_init+0x2fc>)
  41bea0:	681c      	ldr	r4, [r3, #0]
  41bea2:	34b4      	adds	r4, #180	; 0xb4
  41bea4:	2000      	movs	r0, #0
  41bea6:	4b1c      	ldr	r3, [pc, #112]	; (41bf18 <tabview_win_shared_init+0x318>)
  41bea8:	4798      	blx	r3
  41beaa:	2801      	cmp	r0, #1
  41beac:	f240 8120 	bls.w	41c0f0 <tabview_win_shared_init+0x4f0>
  41beb0:	2000      	movs	r0, #0
  41beb2:	4b17      	ldr	r3, [pc, #92]	; (41bf10 <tabview_win_shared_init+0x310>)
  41beb4:	4798      	blx	r3
  41beb6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41beba:	0040      	lsls	r0, r0, #1
  41bebc:	3050      	adds	r0, #80	; 0x50
  41bebe:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bec2:	f280 812e 	bge.w	41c122 <tabview_win_shared_init+0x522>
  41bec6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41bec8:	2112      	movs	r1, #18
  41beca:	4620      	mov	r0, r4
  41becc:	4b11      	ldr	r3, [pc, #68]	; (41bf14 <tabview_win_shared_init+0x314>)
  41bece:	4798      	blx	r3
    lv_style_set_pad_right(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41bed0:	4b0a      	ldr	r3, [pc, #40]	; (41befc <tabview_win_shared_init+0x2fc>)
  41bed2:	681c      	ldr	r4, [r3, #0]
  41bed4:	34b4      	adds	r4, #180	; 0xb4
  41bed6:	2000      	movs	r0, #0
  41bed8:	4b0f      	ldr	r3, [pc, #60]	; (41bf18 <tabview_win_shared_init+0x318>)
  41beda:	4798      	blx	r3
  41bedc:	2801      	cmp	r0, #1
  41bede:	f240 812f 	bls.w	41c140 <tabview_win_shared_init+0x540>
  41bee2:	2000      	movs	r0, #0
  41bee4:	4b0a      	ldr	r3, [pc, #40]	; (41bf10 <tabview_win_shared_init+0x310>)
  41bee6:	4798      	blx	r3
  41bee8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41beec:	0040      	lsls	r0, r0, #1
  41beee:	3050      	adds	r0, #80	; 0x50
  41bef0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bef4:	f280 813d 	bge.w	41c172 <tabview_win_shared_init+0x572>
  41bef8:	2201      	movs	r2, #1
  41befa:	e00f      	b.n	41bf1c <tabview_win_shared_init+0x31c>
  41befc:	20414834 	.word	0x20414834
  41bf00:	00418a71 	.word	0x00418a71
  41bf04:	0040a589 	.word	0x0040a589
  41bf08:	20414838 	.word	0x20414838
  41bf0c:	0040a3f9 	.word	0x0040a3f9
  41bf10:	00414dfd 	.word	0x00414dfd
  41bf14:	0040a269 	.word	0x0040a269
  41bf18:	00414e1d 	.word	0x00414e1d
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41bf1c:	2113      	movs	r1, #19
  41bf1e:	4620      	mov	r0, r4
  41bf20:	4baf      	ldr	r3, [pc, #700]	; (41c1e0 <tabview_win_shared_init+0x5e0>)
  41bf22:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41bf24:	4baf      	ldr	r3, [pc, #700]	; (41c1e4 <tabview_win_shared_init+0x5e4>)
  41bf26:	681c      	ldr	r4, [r3, #0]
  41bf28:	34b4      	adds	r4, #180	; 0xb4
  41bf2a:	2000      	movs	r0, #0
  41bf2c:	4bae      	ldr	r3, [pc, #696]	; (41c1e8 <tabview_win_shared_init+0x5e8>)
  41bf2e:	4798      	blx	r3
  41bf30:	2801      	cmp	r0, #1
  41bf32:	f240 812d 	bls.w	41c190 <tabview_win_shared_init+0x590>
  41bf36:	2000      	movs	r0, #0
  41bf38:	4bac      	ldr	r3, [pc, #688]	; (41c1ec <tabview_win_shared_init+0x5ec>)
  41bf3a:	4798      	blx	r3
  41bf3c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bf40:	0040      	lsls	r0, r0, #1
  41bf42:	3050      	adds	r0, #80	; 0x50
  41bf44:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bf48:	f280 813b 	bge.w	41c1c2 <tabview_win_shared_init+0x5c2>
  41bf4c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41bf4e:	2114      	movs	r1, #20
  41bf50:	4620      	mov	r0, r4
  41bf52:	4ba3      	ldr	r3, [pc, #652]	; (41c1e0 <tabview_win_shared_init+0x5e0>)
  41bf54:	4798      	blx	r3
  41bf56:	bd70      	pop	{r4, r5, r6, pc}
  41bf58:	f04f 0200 	mov.w	r2, #0
  41bf5c:	2303      	movs	r3, #3
  41bf5e:	f363 0202 	bfi	r2, r3, #0, #3
  41bf62:	230b      	movs	r3, #11
  41bf64:	f363 02c7 	bfi	r2, r3, #3, #5
  41bf68:	230e      	movs	r3, #14
  41bf6a:	f363 220c 	bfi	r2, r3, #8, #5
  41bf6e:	f36f 324f 	bfc	r2, #13, #3
  41bf72:	e65b      	b.n	41bc2c <tabview_win_shared_init+0x2c>
  41bf74:	f04f 0207 	mov.w	r2, #7
  41bf78:	231c      	movs	r3, #28
  41bf7a:	f363 02c7 	bfi	r2, r3, #3, #5
  41bf7e:	231d      	movs	r3, #29
  41bf80:	f363 220c 	bfi	r2, r3, #8, #5
  41bf84:	2302      	movs	r3, #2
  41bf86:	f363 324f 	bfi	r2, r3, #13, #3
  41bf8a:	e66a      	b.n	41bc62 <tabview_win_shared_init+0x62>
    lv_style_set_pad_top(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41bf8c:	2000      	movs	r0, #0
  41bf8e:	4b97      	ldr	r3, [pc, #604]	; (41c1ec <tabview_win_shared_init+0x5ec>)
  41bf90:	4798      	blx	r3
  41bf92:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41bf96:	3050      	adds	r0, #80	; 0x50
  41bf98:	4b95      	ldr	r3, [pc, #596]	; (41c1f0 <tabview_win_shared_init+0x5f0>)
  41bf9a:	fb83 2300 	smull	r2, r3, r3, r0
  41bf9e:	17c2      	asrs	r2, r0, #31
  41bfa0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bfa4:	b212      	sxth	r2, r2
  41bfa6:	e681      	b.n	41bcac <tabview_win_shared_init+0xac>
    lv_style_set_pad_left(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41bfa8:	2000      	movs	r0, #0
  41bfaa:	4b90      	ldr	r3, [pc, #576]	; (41c1ec <tabview_win_shared_init+0x5ec>)
  41bfac:	4798      	blx	r3
  41bfae:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41bfb2:	3050      	adds	r0, #80	; 0x50
  41bfb4:	4b8e      	ldr	r3, [pc, #568]	; (41c1f0 <tabview_win_shared_init+0x5f0>)
  41bfb6:	fb83 2300 	smull	r2, r3, r3, r0
  41bfba:	17c2      	asrs	r2, r0, #31
  41bfbc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bfc0:	b212      	sxth	r2, r2
  41bfc2:	e685      	b.n	41bcd0 <tabview_win_shared_init+0xd0>
    lv_style_set_pad_right(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41bfc4:	2000      	movs	r0, #0
  41bfc6:	4b89      	ldr	r3, [pc, #548]	; (41c1ec <tabview_win_shared_init+0x5ec>)
  41bfc8:	4798      	blx	r3
  41bfca:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41bfce:	3050      	adds	r0, #80	; 0x50
  41bfd0:	4b87      	ldr	r3, [pc, #540]	; (41c1f0 <tabview_win_shared_init+0x5f0>)
  41bfd2:	fb83 2300 	smull	r2, r3, r3, r0
  41bfd6:	17c2      	asrs	r2, r0, #31
  41bfd8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bfdc:	b212      	sxth	r2, r2
  41bfde:	e689      	b.n	41bcf4 <tabview_win_shared_init+0xf4>
  41bfe0:	f04f 0207 	mov.w	r2, #7
  41bfe4:	231c      	movs	r3, #28
  41bfe6:	f363 02c7 	bfi	r2, r3, #3, #5
  41bfea:	231d      	movs	r3, #29
  41bfec:	f363 220c 	bfi	r2, r3, #8, #5
  41bff0:	2302      	movs	r3, #2
  41bff2:	f363 324f 	bfi	r2, r3, #13, #3
  41bff6:	e6b7      	b.n	41bd68 <tabview_win_shared_init+0x168>
    lv_style_set_pad_top(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
  41bff8:	2000      	movs	r0, #0
  41bffa:	4b7c      	ldr	r3, [pc, #496]	; (41c1ec <tabview_win_shared_init+0x5ec>)
  41bffc:	4798      	blx	r3
  41bffe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41c002:	0080      	lsls	r0, r0, #2
  41c004:	3050      	adds	r0, #80	; 0x50
  41c006:	4b7a      	ldr	r3, [pc, #488]	; (41c1f0 <tabview_win_shared_init+0x5f0>)
  41c008:	fb83 2300 	smull	r2, r3, r3, r0
  41c00c:	17c2      	asrs	r2, r0, #31
  41c00e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c012:	b212      	sxth	r2, r2
  41c014:	e6bb      	b.n	41bd8e <tabview_win_shared_init+0x18e>
    lv_style_set_pad_bottom(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
  41c016:	2000      	movs	r0, #0
  41c018:	4b74      	ldr	r3, [pc, #464]	; (41c1ec <tabview_win_shared_init+0x5ec>)
  41c01a:	4798      	blx	r3
  41c01c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41c020:	0080      	lsls	r0, r0, #2
  41c022:	3050      	adds	r0, #80	; 0x50
  41c024:	4b72      	ldr	r3, [pc, #456]	; (41c1f0 <tabview_win_shared_init+0x5f0>)
  41c026:	fb83 2300 	smull	r2, r3, r3, r0
  41c02a:	17c2      	asrs	r2, r0, #31
  41c02c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c030:	b212      	sxth	r2, r2
  41c032:	e6bf      	b.n	41bdb4 <tabview_win_shared_init+0x1b4>
    lv_style_set_size(&styles->tabview_indic, LV_STATE_DEFAULT, LV_DPX(5));
  41c034:	2000      	movs	r0, #0
  41c036:	4b6d      	ldr	r3, [pc, #436]	; (41c1ec <tabview_win_shared_init+0x5ec>)
  41c038:	4798      	blx	r3
  41c03a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41c03e:	3050      	adds	r0, #80	; 0x50
  41c040:	4b6b      	ldr	r3, [pc, #428]	; (41c1f0 <tabview_win_shared_init+0x5f0>)
  41c042:	fb83 2300 	smull	r2, r3, r3, r0
  41c046:	17c2      	asrs	r2, r0, #31
  41c048:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c04c:	b212      	sxth	r2, r2
  41c04e:	e6e6      	b.n	41be1e <tabview_win_shared_init+0x21e>
    lv_style_set_pad_top(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41c050:	2000      	movs	r0, #0
  41c052:	4b66      	ldr	r3, [pc, #408]	; (41c1ec <tabview_win_shared_init+0x5ec>)
  41c054:	4798      	blx	r3
  41c056:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c05a:	3050      	adds	r0, #80	; 0x50
  41c05c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c060:	da01      	bge.n	41c066 <tabview_win_shared_init+0x466>
  41c062:	2201      	movs	r2, #1
  41c064:	e6fe      	b.n	41be64 <tabview_win_shared_init+0x264>
  41c066:	2000      	movs	r0, #0
  41c068:	4b60      	ldr	r3, [pc, #384]	; (41c1ec <tabview_win_shared_init+0x5ec>)
  41c06a:	4798      	blx	r3
  41c06c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c070:	3050      	adds	r0, #80	; 0x50
  41c072:	4b5f      	ldr	r3, [pc, #380]	; (41c1f0 <tabview_win_shared_init+0x5f0>)
  41c074:	fb83 2300 	smull	r2, r3, r3, r0
  41c078:	17c2      	asrs	r2, r0, #31
  41c07a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c07e:	b212      	sxth	r2, r2
  41c080:	e6f0      	b.n	41be64 <tabview_win_shared_init+0x264>
  41c082:	2000      	movs	r0, #0
  41c084:	4b59      	ldr	r3, [pc, #356]	; (41c1ec <tabview_win_shared_init+0x5ec>)
  41c086:	4798      	blx	r3
  41c088:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c08c:	0040      	lsls	r0, r0, #1
  41c08e:	3050      	adds	r0, #80	; 0x50
  41c090:	4b57      	ldr	r3, [pc, #348]	; (41c1f0 <tabview_win_shared_init+0x5f0>)
  41c092:	fb83 2300 	smull	r2, r3, r3, r0
  41c096:	17c2      	asrs	r2, r0, #31
  41c098:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c09c:	b212      	sxth	r2, r2
  41c09e:	e6e1      	b.n	41be64 <tabview_win_shared_init+0x264>
    lv_style_set_pad_bottom(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41c0a0:	2000      	movs	r0, #0
  41c0a2:	4b52      	ldr	r3, [pc, #328]	; (41c1ec <tabview_win_shared_init+0x5ec>)
  41c0a4:	4798      	blx	r3
  41c0a6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c0aa:	3050      	adds	r0, #80	; 0x50
  41c0ac:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c0b0:	da01      	bge.n	41c0b6 <tabview_win_shared_init+0x4b6>
  41c0b2:	2201      	movs	r2, #1
  41c0b4:	e6ef      	b.n	41be96 <tabview_win_shared_init+0x296>
  41c0b6:	2000      	movs	r0, #0
  41c0b8:	4b4c      	ldr	r3, [pc, #304]	; (41c1ec <tabview_win_shared_init+0x5ec>)
  41c0ba:	4798      	blx	r3
  41c0bc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c0c0:	3050      	adds	r0, #80	; 0x50
  41c0c2:	4b4b      	ldr	r3, [pc, #300]	; (41c1f0 <tabview_win_shared_init+0x5f0>)
  41c0c4:	fb83 2300 	smull	r2, r3, r3, r0
  41c0c8:	17c2      	asrs	r2, r0, #31
  41c0ca:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c0ce:	b212      	sxth	r2, r2
  41c0d0:	e6e1      	b.n	41be96 <tabview_win_shared_init+0x296>
  41c0d2:	2000      	movs	r0, #0
  41c0d4:	4b45      	ldr	r3, [pc, #276]	; (41c1ec <tabview_win_shared_init+0x5ec>)
  41c0d6:	4798      	blx	r3
  41c0d8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c0dc:	0040      	lsls	r0, r0, #1
  41c0de:	3050      	adds	r0, #80	; 0x50
  41c0e0:	4b43      	ldr	r3, [pc, #268]	; (41c1f0 <tabview_win_shared_init+0x5f0>)
  41c0e2:	fb83 2300 	smull	r2, r3, r3, r0
  41c0e6:	17c2      	asrs	r2, r0, #31
  41c0e8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c0ec:	b212      	sxth	r2, r2
  41c0ee:	e6d2      	b.n	41be96 <tabview_win_shared_init+0x296>
    lv_style_set_pad_left(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41c0f0:	2000      	movs	r0, #0
  41c0f2:	4b3e      	ldr	r3, [pc, #248]	; (41c1ec <tabview_win_shared_init+0x5ec>)
  41c0f4:	4798      	blx	r3
  41c0f6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c0fa:	3050      	adds	r0, #80	; 0x50
  41c0fc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c100:	da01      	bge.n	41c106 <tabview_win_shared_init+0x506>
  41c102:	2201      	movs	r2, #1
  41c104:	e6e0      	b.n	41bec8 <tabview_win_shared_init+0x2c8>
  41c106:	2000      	movs	r0, #0
  41c108:	4b38      	ldr	r3, [pc, #224]	; (41c1ec <tabview_win_shared_init+0x5ec>)
  41c10a:	4798      	blx	r3
  41c10c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c110:	3050      	adds	r0, #80	; 0x50
  41c112:	4b37      	ldr	r3, [pc, #220]	; (41c1f0 <tabview_win_shared_init+0x5f0>)
  41c114:	fb83 2300 	smull	r2, r3, r3, r0
  41c118:	17c2      	asrs	r2, r0, #31
  41c11a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c11e:	b212      	sxth	r2, r2
  41c120:	e6d2      	b.n	41bec8 <tabview_win_shared_init+0x2c8>
  41c122:	2000      	movs	r0, #0
  41c124:	4b31      	ldr	r3, [pc, #196]	; (41c1ec <tabview_win_shared_init+0x5ec>)
  41c126:	4798      	blx	r3
  41c128:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c12c:	0040      	lsls	r0, r0, #1
  41c12e:	3050      	adds	r0, #80	; 0x50
  41c130:	4b2f      	ldr	r3, [pc, #188]	; (41c1f0 <tabview_win_shared_init+0x5f0>)
  41c132:	fb83 2300 	smull	r2, r3, r3, r0
  41c136:	17c2      	asrs	r2, r0, #31
  41c138:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c13c:	b212      	sxth	r2, r2
  41c13e:	e6c3      	b.n	41bec8 <tabview_win_shared_init+0x2c8>
    lv_style_set_pad_right(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41c140:	2000      	movs	r0, #0
  41c142:	4b2a      	ldr	r3, [pc, #168]	; (41c1ec <tabview_win_shared_init+0x5ec>)
  41c144:	4798      	blx	r3
  41c146:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c14a:	3050      	adds	r0, #80	; 0x50
  41c14c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c150:	da01      	bge.n	41c156 <tabview_win_shared_init+0x556>
  41c152:	2201      	movs	r2, #1
  41c154:	e6e2      	b.n	41bf1c <tabview_win_shared_init+0x31c>
  41c156:	2000      	movs	r0, #0
  41c158:	4b24      	ldr	r3, [pc, #144]	; (41c1ec <tabview_win_shared_init+0x5ec>)
  41c15a:	4798      	blx	r3
  41c15c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c160:	3050      	adds	r0, #80	; 0x50
  41c162:	4b23      	ldr	r3, [pc, #140]	; (41c1f0 <tabview_win_shared_init+0x5f0>)
  41c164:	fb83 2300 	smull	r2, r3, r3, r0
  41c168:	17c2      	asrs	r2, r0, #31
  41c16a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c16e:	b212      	sxth	r2, r2
  41c170:	e6d4      	b.n	41bf1c <tabview_win_shared_init+0x31c>
  41c172:	2000      	movs	r0, #0
  41c174:	4b1d      	ldr	r3, [pc, #116]	; (41c1ec <tabview_win_shared_init+0x5ec>)
  41c176:	4798      	blx	r3
  41c178:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c17c:	0040      	lsls	r0, r0, #1
  41c17e:	3050      	adds	r0, #80	; 0x50
  41c180:	4b1b      	ldr	r3, [pc, #108]	; (41c1f0 <tabview_win_shared_init+0x5f0>)
  41c182:	fb83 2300 	smull	r2, r3, r3, r0
  41c186:	17c2      	asrs	r2, r0, #31
  41c188:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c18c:	b212      	sxth	r2, r2
  41c18e:	e6c5      	b.n	41bf1c <tabview_win_shared_init+0x31c>
    lv_style_set_pad_inner(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41c190:	2000      	movs	r0, #0
  41c192:	4b16      	ldr	r3, [pc, #88]	; (41c1ec <tabview_win_shared_init+0x5ec>)
  41c194:	4798      	blx	r3
  41c196:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c19a:	3050      	adds	r0, #80	; 0x50
  41c19c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c1a0:	da01      	bge.n	41c1a6 <tabview_win_shared_init+0x5a6>
  41c1a2:	2201      	movs	r2, #1
  41c1a4:	e6d3      	b.n	41bf4e <tabview_win_shared_init+0x34e>
  41c1a6:	2000      	movs	r0, #0
  41c1a8:	4b10      	ldr	r3, [pc, #64]	; (41c1ec <tabview_win_shared_init+0x5ec>)
  41c1aa:	4798      	blx	r3
  41c1ac:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c1b0:	3050      	adds	r0, #80	; 0x50
  41c1b2:	4b0f      	ldr	r3, [pc, #60]	; (41c1f0 <tabview_win_shared_init+0x5f0>)
  41c1b4:	fb83 2300 	smull	r2, r3, r3, r0
  41c1b8:	17c2      	asrs	r2, r0, #31
  41c1ba:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c1be:	b212      	sxth	r2, r2
  41c1c0:	e6c5      	b.n	41bf4e <tabview_win_shared_init+0x34e>
  41c1c2:	2000      	movs	r0, #0
  41c1c4:	4b09      	ldr	r3, [pc, #36]	; (41c1ec <tabview_win_shared_init+0x5ec>)
  41c1c6:	4798      	blx	r3
  41c1c8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c1cc:	0040      	lsls	r0, r0, #1
  41c1ce:	3050      	adds	r0, #80	; 0x50
  41c1d0:	4b07      	ldr	r3, [pc, #28]	; (41c1f0 <tabview_win_shared_init+0x5f0>)
  41c1d2:	fb83 2300 	smull	r2, r3, r3, r0
  41c1d6:	17c2      	asrs	r2, r0, #31
  41c1d8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c1dc:	b212      	sxth	r2, r2
  41c1de:	e6b6      	b.n	41bf4e <tabview_win_shared_init+0x34e>
  41c1e0:	0040a269 	.word	0x0040a269
  41c1e4:	20414834 	.word	0x20414834
  41c1e8:	00414e1d 	.word	0x00414e1d
  41c1ec:	00414dfd 	.word	0x00414dfd
  41c1f0:	66666667 	.word	0x66666667

0041c1f4 <led_init>:
{
  41c1f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    style_init_reset(&styles->led);
  41c1f8:	4c3a      	ldr	r4, [pc, #232]	; (41c2e4 <led_init+0xf0>)
  41c1fa:	6820      	ldr	r0, [r4, #0]
  41c1fc:	3070      	adds	r0, #112	; 0x70
  41c1fe:	4b3a      	ldr	r3, [pc, #232]	; (41c2e8 <led_init+0xf4>)
  41c200:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->led, LV_STATE_DEFAULT, LV_OPA_COVER);
  41c202:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41c204:	22ff      	movs	r2, #255	; 0xff
  41c206:	212c      	movs	r1, #44	; 0x2c
  41c208:	3070      	adds	r0, #112	; 0x70
  41c20a:	4d38      	ldr	r5, [pc, #224]	; (41c2ec <led_init+0xf8>)
  41c20c:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->led, LV_STATE_DEFAULT, theme.color_primary);
  41c20e:	6820      	ldr	r0, [r4, #0]
  41c210:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 41c300 <led_init+0x10c>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41c214:	f8b8 200c 	ldrh.w	r2, [r8, #12]
  41c218:	2129      	movs	r1, #41	; 0x29
  41c21a:	3070      	adds	r0, #112	; 0x70
  41c21c:	4f34      	ldr	r7, [pc, #208]	; (41c2f0 <led_init+0xfc>)
  41c21e:	47b8      	blx	r7
    lv_style_set_border_width(&styles->led, LV_STATE_DEFAULT, 2);
  41c220:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41c222:	2202      	movs	r2, #2
  41c224:	2130      	movs	r1, #48	; 0x30
  41c226:	3070      	adds	r0, #112	; 0x70
  41c228:	4e32      	ldr	r6, [pc, #200]	; (41c2f4 <led_init+0x100>)
  41c22a:	47b0      	blx	r6
    lv_style_set_border_opa(&styles->led, LV_STATE_DEFAULT, LV_OPA_50);
  41c22c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
  41c22e:	227f      	movs	r2, #127	; 0x7f
  41c230:	213c      	movs	r1, #60	; 0x3c
  41c232:	3070      	adds	r0, #112	; 0x70
  41c234:	47a8      	blx	r5
    lv_style_set_border_color(&styles->led, LV_STATE_DEFAULT, lv_color_lighten(theme.color_primary, LV_OPA_30));
  41c236:	6825      	ldr	r5, [r4, #0]
  41c238:	3570      	adds	r5, #112	; 0x70
  41c23a:	214c      	movs	r1, #76	; 0x4c
  41c23c:	f8b8 000c 	ldrh.w	r0, [r8, #12]
  41c240:	4b2d      	ldr	r3, [pc, #180]	; (41c2f8 <led_init+0x104>)
  41c242:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41c244:	4602      	mov	r2, r0
  41c246:	2139      	movs	r1, #57	; 0x39
  41c248:	4628      	mov	r0, r5
  41c24a:	47b8      	blx	r7
    lv_style_set_radius(&styles->led, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  41c24c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41c24e:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41c252:	2101      	movs	r1, #1
  41c254:	3070      	adds	r0, #112	; 0x70
  41c256:	47b0      	blx	r6
    lv_style_set_shadow_width(&styles->led, LV_STATE_DEFAULT, LV_DPX(15));
  41c258:	6824      	ldr	r4, [r4, #0]
  41c25a:	3470      	adds	r4, #112	; 0x70
  41c25c:	2000      	movs	r0, #0
  41c25e:	4b27      	ldr	r3, [pc, #156]	; (41c2fc <led_init+0x108>)
  41c260:	4798      	blx	r3
  41c262:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c266:	3050      	adds	r0, #80	; 0x50
  41c268:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c26c:	da1e      	bge.n	41c2ac <led_init+0xb8>
  41c26e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
  41c270:	2150      	movs	r1, #80	; 0x50
  41c272:	4620      	mov	r0, r4
  41c274:	4b1f      	ldr	r3, [pc, #124]	; (41c2f4 <led_init+0x100>)
  41c276:	4798      	blx	r3
    lv_style_set_shadow_color(&styles->led, LV_STATE_DEFAULT, theme.color_primary);
  41c278:	4c1a      	ldr	r4, [pc, #104]	; (41c2e4 <led_init+0xf0>)
  41c27a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
  41c27c:	4b20      	ldr	r3, [pc, #128]	; (41c300 <led_init+0x10c>)
  41c27e:	899a      	ldrh	r2, [r3, #12]
  41c280:	2159      	movs	r1, #89	; 0x59
  41c282:	3070      	adds	r0, #112	; 0x70
  41c284:	4b1a      	ldr	r3, [pc, #104]	; (41c2f0 <led_init+0xfc>)
  41c286:	4798      	blx	r3
    lv_style_set_shadow_spread(&styles->led, LV_STATE_DEFAULT, LV_DPX(5));
  41c288:	6824      	ldr	r4, [r4, #0]
  41c28a:	3470      	adds	r4, #112	; 0x70
  41c28c:	2000      	movs	r0, #0
  41c28e:	4b1b      	ldr	r3, [pc, #108]	; (41c2fc <led_init+0x108>)
  41c290:	4798      	blx	r3
  41c292:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41c296:	3050      	adds	r0, #80	; 0x50
  41c298:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c29c:	da14      	bge.n	41c2c8 <led_init+0xd4>
  41c29e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
  41c2a0:	2153      	movs	r1, #83	; 0x53
  41c2a2:	4620      	mov	r0, r4
  41c2a4:	4b13      	ldr	r3, [pc, #76]	; (41c2f4 <led_init+0x100>)
  41c2a6:	4798      	blx	r3
  41c2a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_style_set_shadow_width(&styles->led, LV_STATE_DEFAULT, LV_DPX(15));
  41c2ac:	2000      	movs	r0, #0
  41c2ae:	4b13      	ldr	r3, [pc, #76]	; (41c2fc <led_init+0x108>)
  41c2b0:	4798      	blx	r3
  41c2b2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c2b6:	3050      	adds	r0, #80	; 0x50
  41c2b8:	4b12      	ldr	r3, [pc, #72]	; (41c304 <led_init+0x110>)
  41c2ba:	fb83 2300 	smull	r2, r3, r3, r0
  41c2be:	17c2      	asrs	r2, r0, #31
  41c2c0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c2c4:	b212      	sxth	r2, r2
  41c2c6:	e7d3      	b.n	41c270 <led_init+0x7c>
    lv_style_set_shadow_spread(&styles->led, LV_STATE_DEFAULT, LV_DPX(5));
  41c2c8:	2000      	movs	r0, #0
  41c2ca:	4b0c      	ldr	r3, [pc, #48]	; (41c2fc <led_init+0x108>)
  41c2cc:	4798      	blx	r3
  41c2ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41c2d2:	3050      	adds	r0, #80	; 0x50
  41c2d4:	4b0b      	ldr	r3, [pc, #44]	; (41c304 <led_init+0x110>)
  41c2d6:	fb83 2300 	smull	r2, r3, r3, r0
  41c2da:	17c2      	asrs	r2, r0, #31
  41c2dc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c2e0:	b212      	sxth	r2, r2
  41c2e2:	e7dd      	b.n	41c2a0 <led_init+0xac>
  41c2e4:	20414834 	.word	0x20414834
  41c2e8:	00418a71 	.word	0x00418a71
  41c2ec:	0040a589 	.word	0x0040a589
  41c2f0:	0040a3f9 	.word	0x0040a3f9
  41c2f4:	0040a269 	.word	0x0040a269
  41c2f8:	00415e8d 	.word	0x00415e8d
  41c2fc:	00414dfd 	.word	0x00414dfd
  41c300:	20414838 	.word	0x20414838
  41c304:	66666667 	.word	0x66666667

0041c308 <basic_init>:
{
  41c308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->scr);
  41c30a:	4cc2      	ldr	r4, [pc, #776]	; (41c614 <basic_init+0x30c>)
  41c30c:	6820      	ldr	r0, [r4, #0]
  41c30e:	4bc2      	ldr	r3, [pc, #776]	; (41c618 <basic_init+0x310>)
  41c310:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41c312:	22ff      	movs	r2, #255	; 0xff
  41c314:	212c      	movs	r1, #44	; 0x2c
  41c316:	6820      	ldr	r0, [r4, #0]
  41c318:	4bc0      	ldr	r3, [pc, #768]	; (41c61c <basic_init+0x314>)
  41c31a:	4798      	blx	r3
    lv_style_set_bg_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR);
  41c31c:	6820      	ldr	r0, [r4, #0]
  41c31e:	4bc0      	ldr	r3, [pc, #768]	; (41c620 <basic_init+0x318>)
  41c320:	6a1b      	ldr	r3, [r3, #32]
  41c322:	f013 0f02 	tst.w	r3, #2
  41c326:	f000 8742 	beq.w	41d1ae <basic_init+0xea6>
  41c32a:	f04f 0207 	mov.w	r2, #7
  41c32e:	231d      	movs	r3, #29
  41c330:	f363 02c7 	bfi	r2, r3, #3, #5
  41c334:	231e      	movs	r3, #30
  41c336:	f363 220c 	bfi	r2, r3, #8, #5
  41c33a:	2303      	movs	r3, #3
  41c33c:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41c340:	2129      	movs	r1, #41	; 0x29
  41c342:	4bb8      	ldr	r3, [pc, #736]	; (41c624 <basic_init+0x31c>)
  41c344:	4798      	blx	r3
    lv_style_set_text_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
  41c346:	4bb3      	ldr	r3, [pc, #716]	; (41c614 <basic_init+0x30c>)
  41c348:	6818      	ldr	r0, [r3, #0]
  41c34a:	4bb5      	ldr	r3, [pc, #724]	; (41c620 <basic_init+0x318>)
  41c34c:	6a1b      	ldr	r3, [r3, #32]
  41c34e:	f013 0f02 	tst.w	r3, #2
  41c352:	f000 873b 	beq.w	41d1cc <basic_init+0xec4>
  41c356:	f04f 0200 	mov.w	r2, #0
  41c35a:	2301      	movs	r3, #1
  41c35c:	f363 0202 	bfi	r2, r3, #0, #3
  41c360:	2307      	movs	r3, #7
  41c362:	f363 02c7 	bfi	r2, r3, #3, #5
  41c366:	2308      	movs	r3, #8
  41c368:	f363 220c 	bfi	r2, r3, #8, #5
  41c36c:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41c370:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41c374:	f248 0189 	movw	r1, #32905	; 0x8089
  41c378:	4baa      	ldr	r3, [pc, #680]	; (41c624 <basic_init+0x31c>)
  41c37a:	4798      	blx	r3
    lv_style_set_value_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
  41c37c:	4ba5      	ldr	r3, [pc, #660]	; (41c614 <basic_init+0x30c>)
  41c37e:	6818      	ldr	r0, [r3, #0]
  41c380:	4ba7      	ldr	r3, [pc, #668]	; (41c620 <basic_init+0x318>)
  41c382:	6a1b      	ldr	r3, [r3, #32]
  41c384:	f013 0f02 	tst.w	r3, #2
  41c388:	f000 872d 	beq.w	41d1e6 <basic_init+0xede>
  41c38c:	f04f 0200 	mov.w	r2, #0
  41c390:	2301      	movs	r3, #1
  41c392:	f363 0202 	bfi	r2, r3, #0, #3
  41c396:	2307      	movs	r3, #7
  41c398:	f363 02c7 	bfi	r2, r3, #3, #5
  41c39c:	2308      	movs	r3, #8
  41c39e:	f363 220c 	bfi	r2, r3, #8, #5
  41c3a2:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41c3a6:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  41c3aa:	2179      	movs	r1, #121	; 0x79
  41c3ac:	4b9d      	ldr	r3, [pc, #628]	; (41c624 <basic_init+0x31c>)
  41c3ae:	4798      	blx	r3
    lv_style_set_text_sel_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
  41c3b0:	4b98      	ldr	r3, [pc, #608]	; (41c614 <basic_init+0x30c>)
  41c3b2:	6818      	ldr	r0, [r3, #0]
  41c3b4:	4b9a      	ldr	r3, [pc, #616]	; (41c620 <basic_init+0x318>)
  41c3b6:	6a1b      	ldr	r3, [r3, #32]
  41c3b8:	f013 0f02 	tst.w	r3, #2
  41c3bc:	f000 8720 	beq.w	41d200 <basic_init+0xef8>
  41c3c0:	f04f 0200 	mov.w	r2, #0
  41c3c4:	2301      	movs	r3, #1
  41c3c6:	f363 0202 	bfi	r2, r3, #0, #3
  41c3ca:	2307      	movs	r3, #7
  41c3cc:	f363 02c7 	bfi	r2, r3, #3, #5
  41c3d0:	2308      	movs	r3, #8
  41c3d2:	f363 220c 	bfi	r2, r3, #8, #5
  41c3d6:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41c3da:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
  41c3de:	f248 018a 	movw	r1, #32906	; 0x808a
  41c3e2:	4e90      	ldr	r6, [pc, #576]	; (41c624 <basic_init+0x31c>)
  41c3e4:	47b0      	blx	r6
    lv_style_set_text_sel_bg_color(&styles->scr, LV_STATE_DEFAULT, theme.color_primary);
  41c3e6:	4c8b      	ldr	r4, [pc, #556]	; (41c614 <basic_init+0x30c>)
  41c3e8:	4d8d      	ldr	r5, [pc, #564]	; (41c620 <basic_init+0x318>)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color, nonscalar)
  41c3ea:	89aa      	ldrh	r2, [r5, #12]
  41c3ec:	f248 018b 	movw	r1, #32907	; 0x808b
  41c3f0:	6820      	ldr	r0, [r4, #0]
  41c3f2:	47b0      	blx	r6
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
  41c3f4:	696a      	ldr	r2, [r5, #20]
  41c3f6:	217e      	movs	r1, #126	; 0x7e
  41c3f8:	6820      	ldr	r0, [r4, #0]
  41c3fa:	4b8b      	ldr	r3, [pc, #556]	; (41c628 <basic_init+0x320>)
  41c3fc:	4798      	blx	r3
    style_init_reset(&styles->bg);
  41c3fe:	6820      	ldr	r0, [r4, #0]
  41c400:	3004      	adds	r0, #4
  41c402:	4b85      	ldr	r3, [pc, #532]	; (41c618 <basic_init+0x310>)
  41c404:	4798      	blx	r3
    lv_style_set_radius(&styles->bg, LV_STATE_DEFAULT, LV_DPX(8));
  41c406:	6824      	ldr	r4, [r4, #0]
  41c408:	3404      	adds	r4, #4
  41c40a:	2000      	movs	r0, #0
  41c40c:	4b87      	ldr	r3, [pc, #540]	; (41c62c <basic_init+0x324>)
  41c40e:	4798      	blx	r3
  41c410:	300a      	adds	r0, #10
  41c412:	00c0      	lsls	r0, r0, #3
  41c414:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c418:	f280 86ff 	bge.w	41d21a <basic_init+0xf12>
  41c41c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41c41e:	2101      	movs	r1, #1
  41c420:	4620      	mov	r0, r4
  41c422:	4b83      	ldr	r3, [pc, #524]	; (41c630 <basic_init+0x328>)
  41c424:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->bg, LV_STATE_DEFAULT, LV_OPA_COVER);
  41c426:	4c7b      	ldr	r4, [pc, #492]	; (41c614 <basic_init+0x30c>)
  41c428:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41c42a:	22ff      	movs	r2, #255	; 0xff
  41c42c:	212c      	movs	r1, #44	; 0x2c
  41c42e:	3004      	adds	r0, #4
  41c430:	4b7a      	ldr	r3, [pc, #488]	; (41c61c <basic_init+0x314>)
  41c432:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG);
  41c434:	6820      	ldr	r0, [r4, #0]
  41c436:	3004      	adds	r0, #4
  41c438:	4b79      	ldr	r3, [pc, #484]	; (41c620 <basic_init+0x318>)
  41c43a:	6a1b      	ldr	r3, [r3, #32]
  41c43c:	f013 0f02 	tst.w	r3, #2
  41c440:	f000 86f9 	beq.w	41d236 <basic_init+0xf2e>
  41c444:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41c448:	2129      	movs	r1, #41	; 0x29
  41c44a:	4b76      	ldr	r3, [pc, #472]	; (41c624 <basic_init+0x31c>)
  41c44c:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_BORDER);
  41c44e:	4b71      	ldr	r3, [pc, #452]	; (41c614 <basic_init+0x30c>)
  41c450:	6818      	ldr	r0, [r3, #0]
  41c452:	3004      	adds	r0, #4
  41c454:	4b72      	ldr	r3, [pc, #456]	; (41c620 <basic_init+0x318>)
  41c456:	6a1b      	ldr	r3, [r3, #32]
  41c458:	f013 0f02 	tst.w	r3, #2
  41c45c:	f000 86fa 	beq.w	41d254 <basic_init+0xf4c>
  41c460:	f04f 0200 	mov.w	r2, #0
  41c464:	2306      	movs	r3, #6
  41c466:	f363 0202 	bfi	r2, r3, #0, #3
  41c46a:	231a      	movs	r3, #26
  41c46c:	f363 02c7 	bfi	r2, r3, #3, #5
  41c470:	231c      	movs	r3, #28
  41c472:	f363 220c 	bfi	r2, r3, #8, #5
  41c476:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41c47a:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41c47e:	2139      	movs	r1, #57	; 0x39
  41c480:	4b68      	ldr	r3, [pc, #416]	; (41c624 <basic_init+0x31c>)
  41c482:	4798      	blx	r3
    if((theme.flags & LV_THEME_MATERIAL_FLAG_NO_FOCUS) == 0)lv_style_set_border_color(&styles->bg, LV_STATE_FOCUSED,
  41c484:	4b66      	ldr	r3, [pc, #408]	; (41c620 <basic_init+0x318>)
  41c486:	6a1b      	ldr	r3, [r3, #32]
  41c488:	f013 0f20 	tst.w	r3, #32
  41c48c:	f000 86f2 	beq.w	41d274 <basic_init+0xf6c>
    lv_style_set_border_color(&styles->bg, LV_STATE_EDITED, theme.color_secondary);
  41c490:	4c60      	ldr	r4, [pc, #384]	; (41c614 <basic_init+0x30c>)
  41c492:	6820      	ldr	r0, [r4, #0]
  41c494:	4b62      	ldr	r3, [pc, #392]	; (41c620 <basic_init+0x318>)
  41c496:	89da      	ldrh	r2, [r3, #14]
  41c498:	f240 4139 	movw	r1, #1081	; 0x439
  41c49c:	3004      	adds	r0, #4
  41c49e:	4b61      	ldr	r3, [pc, #388]	; (41c624 <basic_init+0x31c>)
  41c4a0:	4798      	blx	r3
    lv_style_set_border_width(&styles->bg, LV_STATE_DEFAULT, BORDER_WIDTH);
  41c4a2:	6824      	ldr	r4, [r4, #0]
  41c4a4:	3404      	adds	r4, #4
  41c4a6:	2000      	movs	r0, #0
  41c4a8:	4b60      	ldr	r3, [pc, #384]	; (41c62c <basic_init+0x324>)
  41c4aa:	4798      	blx	r3
  41c4ac:	3028      	adds	r0, #40	; 0x28
  41c4ae:	0040      	lsls	r0, r0, #1
  41c4b0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c4b4:	f280 86e9 	bge.w	41d28a <basic_init+0xf82>
  41c4b8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41c4ba:	2130      	movs	r1, #48	; 0x30
  41c4bc:	4620      	mov	r0, r4
  41c4be:	4d5c      	ldr	r5, [pc, #368]	; (41c630 <basic_init+0x328>)
  41c4c0:	47a8      	blx	r5
    lv_style_set_border_post(&styles->bg, LV_STATE_DEFAULT, true);
  41c4c2:	4c54      	ldr	r4, [pc, #336]	; (41c614 <basic_init+0x30c>)
  41c4c4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  41c4c6:	2201      	movs	r2, #1
  41c4c8:	2133      	movs	r1, #51	; 0x33
  41c4ca:	3004      	adds	r0, #4
  41c4cc:	47a8      	blx	r5
    lv_style_set_text_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  41c4ce:	6820      	ldr	r0, [r4, #0]
  41c4d0:	3004      	adds	r0, #4
  41c4d2:	4b53      	ldr	r3, [pc, #332]	; (41c620 <basic_init+0x318>)
  41c4d4:	6a1b      	ldr	r3, [r3, #32]
  41c4d6:	f013 0f02 	tst.w	r3, #2
  41c4da:	f000 86e4 	beq.w	41d2a6 <basic_init+0xf9e>
  41c4de:	f04f 0200 	mov.w	r2, #0
  41c4e2:	2301      	movs	r3, #1
  41c4e4:	f363 0202 	bfi	r2, r3, #0, #3
  41c4e8:	2307      	movs	r3, #7
  41c4ea:	f363 02c7 	bfi	r2, r3, #3, #5
  41c4ee:	2308      	movs	r3, #8
  41c4f0:	f363 220c 	bfi	r2, r3, #8, #5
  41c4f4:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41c4f8:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41c4fc:	f248 0189 	movw	r1, #32905	; 0x8089
  41c500:	4b48      	ldr	r3, [pc, #288]	; (41c624 <basic_init+0x31c>)
  41c502:	4798      	blx	r3
    lv_style_set_value_font(&styles->bg, LV_STATE_DEFAULT, theme.font_normal);
  41c504:	4d43      	ldr	r5, [pc, #268]	; (41c614 <basic_init+0x30c>)
  41c506:	6828      	ldr	r0, [r5, #0]
  41c508:	4c45      	ldr	r4, [pc, #276]	; (41c620 <basic_init+0x318>)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
  41c50a:	6962      	ldr	r2, [r4, #20]
  41c50c:	217e      	movs	r1, #126	; 0x7e
  41c50e:	3004      	adds	r0, #4
  41c510:	4b45      	ldr	r3, [pc, #276]	; (41c628 <basic_init+0x320>)
  41c512:	4798      	blx	r3
    lv_style_set_value_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  41c514:	6828      	ldr	r0, [r5, #0]
  41c516:	3004      	adds	r0, #4
  41c518:	6a23      	ldr	r3, [r4, #32]
  41c51a:	f013 0f02 	tst.w	r3, #2
  41c51e:	f000 86c6 	beq.w	41d2ae <basic_init+0xfa6>
  41c522:	f04f 0200 	mov.w	r2, #0
  41c526:	2301      	movs	r3, #1
  41c528:	f363 0202 	bfi	r2, r3, #0, #3
  41c52c:	2307      	movs	r3, #7
  41c52e:	f363 02c7 	bfi	r2, r3, #3, #5
  41c532:	2308      	movs	r3, #8
  41c534:	f363 220c 	bfi	r2, r3, #8, #5
  41c538:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41c53c:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  41c540:	2179      	movs	r1, #121	; 0x79
  41c542:	4b38      	ldr	r3, [pc, #224]	; (41c624 <basic_init+0x31c>)
  41c544:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  41c546:	4b33      	ldr	r3, [pc, #204]	; (41c614 <basic_init+0x30c>)
  41c548:	6818      	ldr	r0, [r3, #0]
  41c54a:	3004      	adds	r0, #4
  41c54c:	4b34      	ldr	r3, [pc, #208]	; (41c620 <basic_init+0x318>)
  41c54e:	6a1b      	ldr	r3, [r3, #32]
  41c550:	f013 0f02 	tst.w	r3, #2
  41c554:	f000 86af 	beq.w	41d2b6 <basic_init+0xfae>
  41c558:	f04f 0200 	mov.w	r2, #0
  41c55c:	2301      	movs	r3, #1
  41c55e:	f363 0202 	bfi	r2, r3, #0, #3
  41c562:	2307      	movs	r3, #7
  41c564:	f363 02c7 	bfi	r2, r3, #3, #5
  41c568:	2308      	movs	r3, #8
  41c56a:	f363 220c 	bfi	r2, r3, #8, #5
  41c56e:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41c572:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  41c576:	f248 01a9 	movw	r1, #32937	; 0x80a9
  41c57a:	4b2a      	ldr	r3, [pc, #168]	; (41c624 <basic_init+0x31c>)
  41c57c:	4798      	blx	r3
    lv_style_set_line_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  41c57e:	4b25      	ldr	r3, [pc, #148]	; (41c614 <basic_init+0x30c>)
  41c580:	6818      	ldr	r0, [r3, #0]
  41c582:	3004      	adds	r0, #4
  41c584:	4b26      	ldr	r3, [pc, #152]	; (41c620 <basic_init+0x318>)
  41c586:	6a1b      	ldr	r3, [r3, #32]
  41c588:	f013 0f02 	tst.w	r3, #2
  41c58c:	f000 8697 	beq.w	41d2be <basic_init+0xfb6>
  41c590:	f04f 0200 	mov.w	r2, #0
  41c594:	2301      	movs	r3, #1
  41c596:	f363 0202 	bfi	r2, r3, #0, #3
  41c59a:	2307      	movs	r3, #7
  41c59c:	f363 02c7 	bfi	r2, r3, #3, #5
  41c5a0:	2308      	movs	r3, #8
  41c5a2:	f363 220c 	bfi	r2, r3, #8, #5
  41c5a6:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41c5aa:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  41c5ae:	2199      	movs	r1, #153	; 0x99
  41c5b0:	4b1c      	ldr	r3, [pc, #112]	; (41c624 <basic_init+0x31c>)
  41c5b2:	4798      	blx	r3
    lv_style_set_line_width(&styles->bg, LV_STATE_DEFAULT, 1);
  41c5b4:	4c17      	ldr	r4, [pc, #92]	; (41c614 <basic_init+0x30c>)
  41c5b6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  41c5b8:	2201      	movs	r2, #1
  41c5ba:	2190      	movs	r1, #144	; 0x90
  41c5bc:	3004      	adds	r0, #4
  41c5be:	4b1c      	ldr	r3, [pc, #112]	; (41c630 <basic_init+0x328>)
  41c5c0:	4798      	blx	r3
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41c5c2:	6825      	ldr	r5, [r4, #0]
  41c5c4:	3504      	adds	r5, #4
  41c5c6:	2000      	movs	r0, #0
  41c5c8:	4b1a      	ldr	r3, [pc, #104]	; (41c634 <basic_init+0x32c>)
  41c5ca:	4798      	blx	r3
  41c5cc:	2801      	cmp	r0, #1
  41c5ce:	f240 867a 	bls.w	41d2c6 <basic_init+0xfbe>
  41c5d2:	2000      	movs	r0, #0
  41c5d4:	4b15      	ldr	r3, [pc, #84]	; (41c62c <basic_init+0x324>)
  41c5d6:	4798      	blx	r3
  41c5d8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c5dc:	0040      	lsls	r0, r0, #1
  41c5de:	3050      	adds	r0, #80	; 0x50
  41c5e0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c5e4:	f280 868a 	bge.w	41d2fc <basic_init+0xff4>
  41c5e8:	2401      	movs	r4, #1
  41c5ea:	2000      	movs	r0, #0
  41c5ec:	4b0f      	ldr	r3, [pc, #60]	; (41c62c <basic_init+0x324>)
  41c5ee:	4798      	blx	r3
  41c5f0:	3028      	adds	r0, #40	; 0x28
  41c5f2:	0040      	lsls	r0, r0, #1
  41c5f4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c5f8:	f280 86a2 	bge.w	41d340 <basic_init+0x1038>
  41c5fc:	2201      	movs	r2, #1
  41c5fe:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41c600:	b212      	sxth	r2, r2
  41c602:	2112      	movs	r1, #18
  41c604:	4628      	mov	r0, r5
  41c606:	4b0a      	ldr	r3, [pc, #40]	; (41c630 <basic_init+0x328>)
  41c608:	4798      	blx	r3
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41c60a:	4b02      	ldr	r3, [pc, #8]	; (41c614 <basic_init+0x30c>)
  41c60c:	681d      	ldr	r5, [r3, #0]
  41c60e:	3504      	adds	r5, #4
  41c610:	e012      	b.n	41c638 <basic_init+0x330>
  41c612:	bf00      	nop
  41c614:	20414834 	.word	0x20414834
  41c618:	00418a71 	.word	0x00418a71
  41c61c:	0040a589 	.word	0x0040a589
  41c620:	20414838 	.word	0x20414838
  41c624:	0040a3f9 	.word	0x0040a3f9
  41c628:	0040a719 	.word	0x0040a719
  41c62c:	00414dfd 	.word	0x00414dfd
  41c630:	0040a269 	.word	0x0040a269
  41c634:	00414e1d 	.word	0x00414e1d
  41c638:	2000      	movs	r0, #0
  41c63a:	4bc2      	ldr	r3, [pc, #776]	; (41c944 <basic_init+0x63c>)
  41c63c:	4798      	blx	r3
  41c63e:	2801      	cmp	r0, #1
  41c640:	f240 868c 	bls.w	41d35c <basic_init+0x1054>
  41c644:	2000      	movs	r0, #0
  41c646:	4bc0      	ldr	r3, [pc, #768]	; (41c948 <basic_init+0x640>)
  41c648:	4798      	blx	r3
  41c64a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c64e:	0040      	lsls	r0, r0, #1
  41c650:	3050      	adds	r0, #80	; 0x50
  41c652:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c656:	f280 869c 	bge.w	41d392 <basic_init+0x108a>
  41c65a:	2401      	movs	r4, #1
  41c65c:	2000      	movs	r0, #0
  41c65e:	4bba      	ldr	r3, [pc, #744]	; (41c948 <basic_init+0x640>)
  41c660:	4798      	blx	r3
  41c662:	3028      	adds	r0, #40	; 0x28
  41c664:	0040      	lsls	r0, r0, #1
  41c666:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c66a:	f280 86a2 	bge.w	41d3b2 <basic_init+0x10aa>
  41c66e:	2201      	movs	r2, #1
  41c670:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41c672:	b212      	sxth	r2, r2
  41c674:	2113      	movs	r1, #19
  41c676:	4628      	mov	r0, r5
  41c678:	4bb4      	ldr	r3, [pc, #720]	; (41c94c <basic_init+0x644>)
  41c67a:	4798      	blx	r3
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41c67c:	4bb4      	ldr	r3, [pc, #720]	; (41c950 <basic_init+0x648>)
  41c67e:	681d      	ldr	r5, [r3, #0]
  41c680:	3504      	adds	r5, #4
  41c682:	2000      	movs	r0, #0
  41c684:	4baf      	ldr	r3, [pc, #700]	; (41c944 <basic_init+0x63c>)
  41c686:	4798      	blx	r3
  41c688:	2801      	cmp	r0, #1
  41c68a:	f240 86a0 	bls.w	41d3ce <basic_init+0x10c6>
  41c68e:	2000      	movs	r0, #0
  41c690:	4bad      	ldr	r3, [pc, #692]	; (41c948 <basic_init+0x640>)
  41c692:	4798      	blx	r3
  41c694:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c698:	0040      	lsls	r0, r0, #1
  41c69a:	3050      	adds	r0, #80	; 0x50
  41c69c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c6a0:	f280 86b0 	bge.w	41d404 <basic_init+0x10fc>
  41c6a4:	2401      	movs	r4, #1
  41c6a6:	2000      	movs	r0, #0
  41c6a8:	4ba7      	ldr	r3, [pc, #668]	; (41c948 <basic_init+0x640>)
  41c6aa:	4798      	blx	r3
  41c6ac:	3028      	adds	r0, #40	; 0x28
  41c6ae:	0040      	lsls	r0, r0, #1
  41c6b0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c6b4:	f280 86b6 	bge.w	41d424 <basic_init+0x111c>
  41c6b8:	2201      	movs	r2, #1
  41c6ba:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41c6bc:	b212      	sxth	r2, r2
  41c6be:	2110      	movs	r1, #16
  41c6c0:	4628      	mov	r0, r5
  41c6c2:	4ba2      	ldr	r3, [pc, #648]	; (41c94c <basic_init+0x644>)
  41c6c4:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41c6c6:	4ba2      	ldr	r3, [pc, #648]	; (41c950 <basic_init+0x648>)
  41c6c8:	681d      	ldr	r5, [r3, #0]
  41c6ca:	3504      	adds	r5, #4
  41c6cc:	2000      	movs	r0, #0
  41c6ce:	4b9d      	ldr	r3, [pc, #628]	; (41c944 <basic_init+0x63c>)
  41c6d0:	4798      	blx	r3
  41c6d2:	2801      	cmp	r0, #1
  41c6d4:	f240 86b4 	bls.w	41d440 <basic_init+0x1138>
  41c6d8:	2000      	movs	r0, #0
  41c6da:	4b9b      	ldr	r3, [pc, #620]	; (41c948 <basic_init+0x640>)
  41c6dc:	4798      	blx	r3
  41c6de:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c6e2:	0040      	lsls	r0, r0, #1
  41c6e4:	3050      	adds	r0, #80	; 0x50
  41c6e6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c6ea:	f280 86c4 	bge.w	41d476 <basic_init+0x116e>
  41c6ee:	2401      	movs	r4, #1
  41c6f0:	2000      	movs	r0, #0
  41c6f2:	4b95      	ldr	r3, [pc, #596]	; (41c948 <basic_init+0x640>)
  41c6f4:	4798      	blx	r3
  41c6f6:	3028      	adds	r0, #40	; 0x28
  41c6f8:	0040      	lsls	r0, r0, #1
  41c6fa:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c6fe:	f280 86ca 	bge.w	41d496 <basic_init+0x118e>
  41c702:	2201      	movs	r2, #1
  41c704:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41c706:	b212      	sxth	r2, r2
  41c708:	2111      	movs	r1, #17
  41c70a:	4628      	mov	r0, r5
  41c70c:	4b8f      	ldr	r3, [pc, #572]	; (41c94c <basic_init+0x644>)
  41c70e:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, PAD_DEF);
  41c710:	4b8f      	ldr	r3, [pc, #572]	; (41c950 <basic_init+0x648>)
  41c712:	681c      	ldr	r4, [r3, #0]
  41c714:	3404      	adds	r4, #4
  41c716:	2000      	movs	r0, #0
  41c718:	4b8a      	ldr	r3, [pc, #552]	; (41c944 <basic_init+0x63c>)
  41c71a:	4798      	blx	r3
  41c71c:	2801      	cmp	r0, #1
  41c71e:	f240 86c8 	bls.w	41d4b2 <basic_init+0x11aa>
  41c722:	2000      	movs	r0, #0
  41c724:	4b88      	ldr	r3, [pc, #544]	; (41c948 <basic_init+0x640>)
  41c726:	4798      	blx	r3
  41c728:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c72c:	0040      	lsls	r0, r0, #1
  41c72e:	3050      	adds	r0, #80	; 0x50
  41c730:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c734:	f280 86d8 	bge.w	41d4e8 <basic_init+0x11e0>
  41c738:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41c73a:	2114      	movs	r1, #20
  41c73c:	4620      	mov	r0, r4
  41c73e:	4d83      	ldr	r5, [pc, #524]	; (41c94c <basic_init+0x644>)
  41c740:	47a8      	blx	r5
    lv_style_set_transition_time(&styles->bg, LV_STATE_DEFAULT, TRANSITION_TIME);
  41c742:	4c83      	ldr	r4, [pc, #524]	; (41c950 <basic_init+0x648>)
  41c744:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  41c746:	2200      	movs	r2, #0
  41c748:	21b0      	movs	r1, #176	; 0xb0
  41c74a:	3004      	adds	r0, #4
  41c74c:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->bg, LV_STATE_DEFAULT, LV_STYLE_BORDER_COLOR);
  41c74e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  41c750:	2239      	movs	r2, #57	; 0x39
  41c752:	21b7      	movs	r1, #183	; 0xb7
  41c754:	3004      	adds	r0, #4
  41c756:	47a8      	blx	r5
    style_init_reset(&styles->bg_sec);
  41c758:	6820      	ldr	r0, [r4, #0]
  41c75a:	300c      	adds	r0, #12
  41c75c:	4b7d      	ldr	r3, [pc, #500]	; (41c954 <basic_init+0x64c>)
  41c75e:	4798      	blx	r3
    lv_style_copy(&styles->bg_sec, &styles->bg);
  41c760:	6820      	ldr	r0, [r4, #0]
  41c762:	1d01      	adds	r1, r0, #4
  41c764:	300c      	adds	r0, #12
  41c766:	4b7c      	ldr	r3, [pc, #496]	; (41c958 <basic_init+0x650>)
  41c768:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC);
  41c76a:	6820      	ldr	r0, [r4, #0]
  41c76c:	300c      	adds	r0, #12
  41c76e:	4b7b      	ldr	r3, [pc, #492]	; (41c95c <basic_init+0x654>)
  41c770:	6a1b      	ldr	r3, [r3, #32]
  41c772:	f013 0f02 	tst.w	r3, #2
  41c776:	f000 86c7 	beq.w	41d508 <basic_init+0x1200>
  41c77a:	f04f 0200 	mov.w	r2, #0
  41c77e:	2306      	movs	r3, #6
  41c780:	f363 0202 	bfi	r2, r3, #0, #3
  41c784:	231a      	movs	r3, #26
  41c786:	f363 02c7 	bfi	r2, r3, #3, #5
  41c78a:	231b      	movs	r3, #27
  41c78c:	f363 220c 	bfi	r2, r3, #8, #5
  41c790:	2305      	movs	r3, #5
  41c792:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41c796:	2129      	movs	r1, #41	; 0x29
  41c798:	4b71      	ldr	r3, [pc, #452]	; (41c960 <basic_init+0x658>)
  41c79a:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_BORDER);
  41c79c:	4b6c      	ldr	r3, [pc, #432]	; (41c950 <basic_init+0x648>)
  41c79e:	6818      	ldr	r0, [r3, #0]
  41c7a0:	300c      	adds	r0, #12
  41c7a2:	4b6e      	ldr	r3, [pc, #440]	; (41c95c <basic_init+0x654>)
  41c7a4:	6a1b      	ldr	r3, [r3, #32]
  41c7a6:	f013 0f02 	tst.w	r3, #2
  41c7aa:	f000 86bc 	beq.w	41d526 <basic_init+0x121e>
  41c7ae:	f04f 0207 	mov.w	r2, #7
  41c7b2:	231b      	movs	r3, #27
  41c7b4:	f363 02c7 	bfi	r2, r3, #3, #5
  41c7b8:	231d      	movs	r3, #29
  41c7ba:	f363 220c 	bfi	r2, r3, #8, #5
  41c7be:	2301      	movs	r3, #1
  41c7c0:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41c7c4:	2139      	movs	r1, #57	; 0x39
  41c7c6:	4b66      	ldr	r3, [pc, #408]	; (41c960 <basic_init+0x658>)
  41c7c8:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
  41c7ca:	4b61      	ldr	r3, [pc, #388]	; (41c950 <basic_init+0x648>)
  41c7cc:	6818      	ldr	r0, [r3, #0]
  41c7ce:	300c      	adds	r0, #12
  41c7d0:	4b62      	ldr	r3, [pc, #392]	; (41c95c <basic_init+0x654>)
  41c7d2:	6a1b      	ldr	r3, [r3, #32]
  41c7d4:	f013 0f02 	tst.w	r3, #2
  41c7d8:	f000 86b3 	beq.w	41d542 <basic_init+0x123a>
  41c7dc:	f04f 0200 	mov.w	r2, #0
  41c7e0:	2302      	movs	r3, #2
  41c7e2:	f363 0202 	bfi	r2, r3, #0, #3
  41c7e6:	2306      	movs	r3, #6
  41c7e8:	f363 02c7 	bfi	r2, r3, #3, #5
  41c7ec:	2309      	movs	r3, #9
  41c7ee:	f363 220c 	bfi	r2, r3, #8, #5
  41c7f2:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41c7f6:	f248 0189 	movw	r1, #32905	; 0x8089
  41c7fa:	4b59      	ldr	r3, [pc, #356]	; (41c960 <basic_init+0x658>)
  41c7fc:	4798      	blx	r3
    lv_style_set_value_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
  41c7fe:	4b54      	ldr	r3, [pc, #336]	; (41c950 <basic_init+0x648>)
  41c800:	6818      	ldr	r0, [r3, #0]
  41c802:	300c      	adds	r0, #12
  41c804:	4b55      	ldr	r3, [pc, #340]	; (41c95c <basic_init+0x654>)
  41c806:	6a1b      	ldr	r3, [r3, #32]
  41c808:	f013 0f02 	tst.w	r3, #2
  41c80c:	f000 86a9 	beq.w	41d562 <basic_init+0x125a>
  41c810:	f04f 0200 	mov.w	r2, #0
  41c814:	2302      	movs	r3, #2
  41c816:	f363 0202 	bfi	r2, r3, #0, #3
  41c81a:	2306      	movs	r3, #6
  41c81c:	f363 02c7 	bfi	r2, r3, #3, #5
  41c820:	2309      	movs	r3, #9
  41c822:	f363 220c 	bfi	r2, r3, #8, #5
  41c826:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  41c82a:	2179      	movs	r1, #121	; 0x79
  41c82c:	4b4c      	ldr	r3, [pc, #304]	; (41c960 <basic_init+0x658>)
  41c82e:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
  41c830:	4b47      	ldr	r3, [pc, #284]	; (41c950 <basic_init+0x648>)
  41c832:	6818      	ldr	r0, [r3, #0]
  41c834:	300c      	adds	r0, #12
  41c836:	4b49      	ldr	r3, [pc, #292]	; (41c95c <basic_init+0x654>)
  41c838:	6a1b      	ldr	r3, [r3, #32]
  41c83a:	f013 0f02 	tst.w	r3, #2
  41c83e:	f000 86a0 	beq.w	41d582 <basic_init+0x127a>
  41c842:	f04f 0200 	mov.w	r2, #0
  41c846:	2302      	movs	r3, #2
  41c848:	f363 0202 	bfi	r2, r3, #0, #3
  41c84c:	2306      	movs	r3, #6
  41c84e:	f363 02c7 	bfi	r2, r3, #3, #5
  41c852:	2309      	movs	r3, #9
  41c854:	f363 220c 	bfi	r2, r3, #8, #5
  41c858:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  41c85c:	f248 01a9 	movw	r1, #32937	; 0x80a9
  41c860:	4b3f      	ldr	r3, [pc, #252]	; (41c960 <basic_init+0x658>)
  41c862:	4798      	blx	r3
    lv_style_set_line_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
  41c864:	4b3a      	ldr	r3, [pc, #232]	; (41c950 <basic_init+0x648>)
  41c866:	6818      	ldr	r0, [r3, #0]
  41c868:	300c      	adds	r0, #12
  41c86a:	4b3c      	ldr	r3, [pc, #240]	; (41c95c <basic_init+0x654>)
  41c86c:	6a1b      	ldr	r3, [r3, #32]
  41c86e:	f013 0f02 	tst.w	r3, #2
  41c872:	f000 8696 	beq.w	41d5a2 <basic_init+0x129a>
  41c876:	f04f 0200 	mov.w	r2, #0
  41c87a:	2302      	movs	r3, #2
  41c87c:	f363 0202 	bfi	r2, r3, #0, #3
  41c880:	2306      	movs	r3, #6
  41c882:	f363 02c7 	bfi	r2, r3, #3, #5
  41c886:	2309      	movs	r3, #9
  41c888:	f363 220c 	bfi	r2, r3, #8, #5
  41c88c:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  41c890:	2199      	movs	r1, #153	; 0x99
  41c892:	4b33      	ldr	r3, [pc, #204]	; (41c960 <basic_init+0x658>)
  41c894:	4798      	blx	r3
    style_init_reset(&styles->bg_click);
  41c896:	4c2e      	ldr	r4, [pc, #184]	; (41c950 <basic_init+0x648>)
  41c898:	6820      	ldr	r0, [r4, #0]
  41c89a:	3008      	adds	r0, #8
  41c89c:	4b2d      	ldr	r3, [pc, #180]	; (41c954 <basic_init+0x64c>)
  41c89e:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_PR);
  41c8a0:	6820      	ldr	r0, [r4, #0]
  41c8a2:	3008      	adds	r0, #8
  41c8a4:	4b2d      	ldr	r3, [pc, #180]	; (41c95c <basic_init+0x654>)
  41c8a6:	6a1b      	ldr	r3, [r3, #32]
  41c8a8:	f013 0f02 	tst.w	r3, #2
  41c8ac:	f000 8689 	beq.w	41d5c2 <basic_init+0x12ba>
  41c8b0:	f04f 0207 	mov.w	r2, #7
  41c8b4:	231d      	movs	r3, #29
  41c8b6:	f363 02c7 	bfi	r2, r3, #3, #5
  41c8ba:	f363 220c 	bfi	r2, r3, #8, #5
  41c8be:	2303      	movs	r3, #3
  41c8c0:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41c8c4:	f241 0129 	movw	r1, #4137	; 0x1029
  41c8c8:	4d25      	ldr	r5, [pc, #148]	; (41c960 <basic_init+0x658>)
  41c8ca:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_CHK);
  41c8cc:	4c20      	ldr	r4, [pc, #128]	; (41c950 <basic_init+0x648>)
  41c8ce:	6820      	ldr	r0, [r4, #0]
  41c8d0:	4f22      	ldr	r7, [pc, #136]	; (41c95c <basic_init+0x654>)
  41c8d2:	89ba      	ldrh	r2, [r7, #12]
  41c8d4:	f240 1129 	movw	r1, #297	; 0x129
  41c8d8:	3008      	adds	r0, #8
  41c8da:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_PR_CHK);
  41c8dc:	6826      	ldr	r6, [r4, #0]
  41c8de:	3608      	adds	r6, #8
  41c8e0:	2133      	movs	r1, #51	; 0x33
  41c8e2:	89b8      	ldrh	r0, [r7, #12]
  41c8e4:	4b1f      	ldr	r3, [pc, #124]	; (41c964 <basic_init+0x65c>)
  41c8e6:	4798      	blx	r3
  41c8e8:	4602      	mov	r2, r0
  41c8ea:	f241 1129 	movw	r1, #4393	; 0x1129
  41c8ee:	4630      	mov	r0, r6
  41c8f0:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_DIS);
  41c8f2:	6820      	ldr	r0, [r4, #0]
  41c8f4:	3008      	adds	r0, #8
  41c8f6:	6a3b      	ldr	r3, [r7, #32]
  41c8f8:	f013 0f02 	tst.w	r3, #2
  41c8fc:	f000 8671 	beq.w	41d5e2 <basic_init+0x12da>
  41c900:	f04f 32ff 	mov.w	r2, #4294967295
  41c904:	f242 0129 	movw	r1, #8233	; 0x2029
  41c908:	4f15      	ldr	r7, [pc, #84]	; (41c960 <basic_init+0x658>)
  41c90a:	47b8      	blx	r7
    lv_style_set_border_width(&styles->bg_click, LV_STATE_CHECKED, 0);
  41c90c:	4c10      	ldr	r4, [pc, #64]	; (41c950 <basic_init+0x648>)
  41c90e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41c910:	2200      	movs	r2, #0
  41c912:	f44f 7198 	mov.w	r1, #304	; 0x130
  41c916:	3008      	adds	r0, #8
  41c918:	4b0c      	ldr	r3, [pc, #48]	; (41c94c <basic_init+0x644>)
  41c91a:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_FOCUSED | LV_STATE_PRESSED, lv_color_darken(theme.color_primary,
  41c91c:	6825      	ldr	r5, [r4, #0]
  41c91e:	3508      	adds	r5, #8
  41c920:	4e0e      	ldr	r6, [pc, #56]	; (41c95c <basic_init+0x654>)
  41c922:	2133      	movs	r1, #51	; 0x33
  41c924:	89b0      	ldrh	r0, [r6, #12]
  41c926:	4b0f      	ldr	r3, [pc, #60]	; (41c964 <basic_init+0x65c>)
  41c928:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41c92a:	4602      	mov	r2, r0
  41c92c:	f241 2139 	movw	r1, #4665	; 0x1239
  41c930:	4628      	mov	r0, r5
  41c932:	47b8      	blx	r7
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_BORDER_PR);
  41c934:	6820      	ldr	r0, [r4, #0]
  41c936:	3008      	adds	r0, #8
  41c938:	6a33      	ldr	r3, [r6, #32]
  41c93a:	f013 0f02 	tst.w	r3, #2
  41c93e:	f000 865f 	beq.w	41d600 <basic_init+0x12f8>
  41c942:	e011      	b.n	41c968 <basic_init+0x660>
  41c944:	00414e1d 	.word	0x00414e1d
  41c948:	00414dfd 	.word	0x00414dfd
  41c94c:	0040a269 	.word	0x0040a269
  41c950:	20414834 	.word	0x20414834
  41c954:	00418a71 	.word	0x00418a71
  41c958:	0040a105 	.word	0x0040a105
  41c95c:	20414838 	.word	0x20414838
  41c960:	0040a3f9 	.word	0x0040a3f9
  41c964:	00415f25 	.word	0x00415f25
  41c968:	f04f 0200 	mov.w	r2, #0
  41c96c:	2306      	movs	r3, #6
  41c96e:	f363 0202 	bfi	r2, r3, #0, #3
  41c972:	2319      	movs	r3, #25
  41c974:	f363 02c7 	bfi	r2, r3, #3, #5
  41c978:	f363 220c 	bfi	r2, r3, #8, #5
  41c97c:	2303      	movs	r3, #3
  41c97e:	f363 324f 	bfi	r2, r3, #13, #3
  41c982:	f241 0139 	movw	r1, #4153	; 0x1039
  41c986:	4bc9      	ldr	r3, [pc, #804]	; (41ccac <basic_init+0x9a4>)
  41c988:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_BORDER_CHK);
  41c98a:	4bc9      	ldr	r3, [pc, #804]	; (41ccb0 <basic_init+0x9a8>)
  41c98c:	6818      	ldr	r0, [r3, #0]
  41c98e:	3008      	adds	r0, #8
  41c990:	4bc8      	ldr	r3, [pc, #800]	; (41ccb4 <basic_init+0x9ac>)
  41c992:	6a1b      	ldr	r3, [r3, #32]
  41c994:	f013 0f02 	tst.w	r3, #2
  41c998:	f000 8642 	beq.w	41d620 <basic_init+0x1318>
  41c99c:	f04f 0200 	mov.w	r2, #0
  41c9a0:	2301      	movs	r3, #1
  41c9a2:	f363 0202 	bfi	r2, r3, #0, #3
  41c9a6:	2307      	movs	r3, #7
  41c9a8:	f363 02c7 	bfi	r2, r3, #3, #5
  41c9ac:	2308      	movs	r3, #8
  41c9ae:	f363 220c 	bfi	r2, r3, #8, #5
  41c9b2:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41c9b6:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
  41c9ba:	f240 1139 	movw	r1, #313	; 0x139
  41c9be:	4bbb      	ldr	r3, [pc, #748]	; (41ccac <basic_init+0x9a4>)
  41c9c0:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_BORDER_CHK_PR);
  41c9c2:	4bbb      	ldr	r3, [pc, #748]	; (41ccb0 <basic_init+0x9a8>)
  41c9c4:	6818      	ldr	r0, [r3, #0]
  41c9c6:	3008      	adds	r0, #8
  41c9c8:	4bba      	ldr	r3, [pc, #744]	; (41ccb4 <basic_init+0x9ac>)
  41c9ca:	6a1b      	ldr	r3, [r3, #32]
  41c9cc:	f013 0f02 	tst.w	r3, #2
  41c9d0:	f000 8636 	beq.w	41d640 <basic_init+0x1338>
  41c9d4:	f04f 0200 	mov.w	r2, #0
  41c9d8:	2301      	movs	r3, #1
  41c9da:	f363 0202 	bfi	r2, r3, #0, #3
  41c9de:	2307      	movs	r3, #7
  41c9e0:	f363 02c7 	bfi	r2, r3, #3, #5
  41c9e4:	2308      	movs	r3, #8
  41c9e6:	f363 220c 	bfi	r2, r3, #8, #5
  41c9ea:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41c9ee:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
  41c9f2:	f241 1139 	movw	r1, #4409	; 0x1139
  41c9f6:	4bad      	ldr	r3, [pc, #692]	; (41ccac <basic_init+0x9a4>)
  41c9f8:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_BORDER_DIS);
  41c9fa:	4bad      	ldr	r3, [pc, #692]	; (41ccb0 <basic_init+0x9a8>)
  41c9fc:	6818      	ldr	r0, [r3, #0]
  41c9fe:	3008      	adds	r0, #8
  41ca00:	4bac      	ldr	r3, [pc, #688]	; (41ccb4 <basic_init+0x9ac>)
  41ca02:	6a1b      	ldr	r3, [r3, #32]
  41ca04:	f013 0f02 	tst.w	r3, #2
  41ca08:	f000 862a 	beq.w	41d660 <basic_init+0x1358>
  41ca0c:	f04f 0200 	mov.w	r2, #0
  41ca10:	2306      	movs	r3, #6
  41ca12:	f363 0202 	bfi	r2, r3, #0, #3
  41ca16:	231a      	movs	r3, #26
  41ca18:	f363 02c7 	bfi	r2, r3, #3, #5
  41ca1c:	231c      	movs	r3, #28
  41ca1e:	f363 220c 	bfi	r2, r3, #8, #5
  41ca22:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41ca26:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
  41ca2a:	f242 0139 	movw	r1, #8249	; 0x2039
  41ca2e:	4b9f      	ldr	r3, [pc, #636]	; (41ccac <basic_init+0x9a4>)
  41ca30:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
  41ca32:	4b9f      	ldr	r3, [pc, #636]	; (41ccb0 <basic_init+0x9a8>)
  41ca34:	6818      	ldr	r0, [r3, #0]
  41ca36:	3008      	adds	r0, #8
  41ca38:	4b9e      	ldr	r3, [pc, #632]	; (41ccb4 <basic_init+0x9ac>)
  41ca3a:	6a1b      	ldr	r3, [r3, #32]
  41ca3c:	f013 0f02 	tst.w	r3, #2
  41ca40:	f000 861e 	beq.w	41d680 <basic_init+0x1378>
  41ca44:	f04f 0200 	mov.w	r2, #0
  41ca48:	2301      	movs	r3, #1
  41ca4a:	f363 0202 	bfi	r2, r3, #0, #3
  41ca4e:	2307      	movs	r3, #7
  41ca50:	f363 02c7 	bfi	r2, r3, #3, #5
  41ca54:	2308      	movs	r3, #8
  41ca56:	f363 220c 	bfi	r2, r3, #8, #5
  41ca5a:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41ca5e:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41ca62:	f249 0189 	movw	r1, #37001	; 0x9089
  41ca66:	4b91      	ldr	r3, [pc, #580]	; (41ccac <basic_init+0x9a4>)
  41ca68:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
  41ca6a:	4b91      	ldr	r3, [pc, #580]	; (41ccb0 <basic_init+0x9a8>)
  41ca6c:	6818      	ldr	r0, [r3, #0]
  41ca6e:	3008      	adds	r0, #8
  41ca70:	4b90      	ldr	r3, [pc, #576]	; (41ccb4 <basic_init+0x9ac>)
  41ca72:	6a1b      	ldr	r3, [r3, #32]
  41ca74:	f013 0f02 	tst.w	r3, #2
  41ca78:	f000 8606 	beq.w	41d688 <basic_init+0x1380>
  41ca7c:	f04f 32ff 	mov.w	r2, #4294967295
  41ca80:	f248 1189 	movw	r1, #33161	; 0x8189
  41ca84:	4b89      	ldr	r3, [pc, #548]	; (41ccac <basic_init+0x9a4>)
  41ca86:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_TEXT_CHK_PR);
  41ca88:	4b89      	ldr	r3, [pc, #548]	; (41ccb0 <basic_init+0x9a8>)
  41ca8a:	6818      	ldr	r0, [r3, #0]
  41ca8c:	3008      	adds	r0, #8
  41ca8e:	4b89      	ldr	r3, [pc, #548]	; (41ccb4 <basic_init+0x9ac>)
  41ca90:	6a1b      	ldr	r3, [r3, #32]
  41ca92:	f013 0f02 	tst.w	r3, #2
  41ca96:	f000 85fb 	beq.w	41d690 <basic_init+0x1388>
  41ca9a:	f04f 32ff 	mov.w	r2, #4294967295
  41ca9e:	f249 1189 	movw	r1, #37257	; 0x9189
  41caa2:	4b82      	ldr	r3, [pc, #520]	; (41ccac <basic_init+0x9a4>)
  41caa4:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
  41caa6:	4b82      	ldr	r3, [pc, #520]	; (41ccb0 <basic_init+0x9a8>)
  41caa8:	6818      	ldr	r0, [r3, #0]
  41caaa:	3008      	adds	r0, #8
  41caac:	4b81      	ldr	r3, [pc, #516]	; (41ccb4 <basic_init+0x9ac>)
  41caae:	6a1b      	ldr	r3, [r3, #32]
  41cab0:	f013 0f02 	tst.w	r3, #2
  41cab4:	f000 85f0 	beq.w	41d698 <basic_init+0x1390>
  41cab8:	f04f 0200 	mov.w	r2, #0
  41cabc:	2305      	movs	r3, #5
  41cabe:	f363 0202 	bfi	r2, r3, #0, #3
  41cac2:	2315      	movs	r3, #21
  41cac4:	f363 02c7 	bfi	r2, r3, #3, #5
  41cac8:	f363 220c 	bfi	r2, r3, #8, #5
  41cacc:	2302      	movs	r3, #2
  41cace:	f363 324f 	bfi	r2, r3, #13, #3
  41cad2:	f24a 0189 	movw	r1, #41097	; 0xa089
  41cad6:	4b75      	ldr	r3, [pc, #468]	; (41ccac <basic_init+0x9a4>)
  41cad8:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
  41cada:	4b75      	ldr	r3, [pc, #468]	; (41ccb0 <basic_init+0x9a8>)
  41cadc:	6818      	ldr	r0, [r3, #0]
  41cade:	3008      	adds	r0, #8
  41cae0:	4b74      	ldr	r3, [pc, #464]	; (41ccb4 <basic_init+0x9ac>)
  41cae2:	6a1b      	ldr	r3, [r3, #32]
  41cae4:	f013 0f02 	tst.w	r3, #2
  41cae8:	f000 85e5 	beq.w	41d6b6 <basic_init+0x13ae>
  41caec:	f04f 0200 	mov.w	r2, #0
  41caf0:	2301      	movs	r3, #1
  41caf2:	f363 0202 	bfi	r2, r3, #0, #3
  41caf6:	2307      	movs	r3, #7
  41caf8:	f363 02c7 	bfi	r2, r3, #3, #5
  41cafc:	2308      	movs	r3, #8
  41cafe:	f363 220c 	bfi	r2, r3, #8, #5
  41cb02:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41cb06:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  41cb0a:	f249 01a9 	movw	r1, #37033	; 0x90a9
  41cb0e:	4b67      	ldr	r3, [pc, #412]	; (41ccac <basic_init+0x9a4>)
  41cb10:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
  41cb12:	4b67      	ldr	r3, [pc, #412]	; (41ccb0 <basic_init+0x9a8>)
  41cb14:	6818      	ldr	r0, [r3, #0]
  41cb16:	3008      	adds	r0, #8
  41cb18:	4b66      	ldr	r3, [pc, #408]	; (41ccb4 <basic_init+0x9ac>)
  41cb1a:	6a1b      	ldr	r3, [r3, #32]
  41cb1c:	f013 0f02 	tst.w	r3, #2
  41cb20:	f000 85d2 	beq.w	41d6c8 <basic_init+0x13c0>
  41cb24:	f04f 32ff 	mov.w	r2, #4294967295
  41cb28:	f248 11a9 	movw	r1, #33193	; 0x81a9
  41cb2c:	4b5f      	ldr	r3, [pc, #380]	; (41ccac <basic_init+0x9a4>)
  41cb2e:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_TEXT_CHK_PR);
  41cb30:	4b5f      	ldr	r3, [pc, #380]	; (41ccb0 <basic_init+0x9a8>)
  41cb32:	6818      	ldr	r0, [r3, #0]
  41cb34:	3008      	adds	r0, #8
  41cb36:	4b5f      	ldr	r3, [pc, #380]	; (41ccb4 <basic_init+0x9ac>)
  41cb38:	6a1b      	ldr	r3, [r3, #32]
  41cb3a:	f013 0f02 	tst.w	r3, #2
  41cb3e:	f000 85c7 	beq.w	41d6d0 <basic_init+0x13c8>
  41cb42:	f04f 32ff 	mov.w	r2, #4294967295
  41cb46:	f249 11a9 	movw	r1, #37289	; 0x91a9
  41cb4a:	4b58      	ldr	r3, [pc, #352]	; (41ccac <basic_init+0x9a4>)
  41cb4c:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
  41cb4e:	4b58      	ldr	r3, [pc, #352]	; (41ccb0 <basic_init+0x9a8>)
  41cb50:	6818      	ldr	r0, [r3, #0]
  41cb52:	3008      	adds	r0, #8
  41cb54:	4b57      	ldr	r3, [pc, #348]	; (41ccb4 <basic_init+0x9ac>)
  41cb56:	6a1b      	ldr	r3, [r3, #32]
  41cb58:	f013 0f02 	tst.w	r3, #2
  41cb5c:	f000 85bc 	beq.w	41d6d8 <basic_init+0x13d0>
  41cb60:	f04f 0200 	mov.w	r2, #0
  41cb64:	2305      	movs	r3, #5
  41cb66:	f363 0202 	bfi	r2, r3, #0, #3
  41cb6a:	2315      	movs	r3, #21
  41cb6c:	f363 02c7 	bfi	r2, r3, #3, #5
  41cb70:	f363 220c 	bfi	r2, r3, #8, #5
  41cb74:	2302      	movs	r3, #2
  41cb76:	f363 324f 	bfi	r2, r3, #13, #3
  41cb7a:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
  41cb7e:	4b4b      	ldr	r3, [pc, #300]	; (41ccac <basic_init+0x9a4>)
  41cb80:	4798      	blx	r3
    lv_style_set_transition_prop_5(&styles->bg_click, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
  41cb82:	4c4b      	ldr	r4, [pc, #300]	; (41ccb0 <basic_init+0x9a8>)
  41cb84:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
  41cb86:	2229      	movs	r2, #41	; 0x29
  41cb88:	21b6      	movs	r1, #182	; 0xb6
  41cb8a:	3008      	adds	r0, #8
  41cb8c:	4d4a      	ldr	r5, [pc, #296]	; (41ccb8 <basic_init+0x9b0>)
  41cb8e:	47a8      	blx	r5
    style_init_reset(&styles->btn);
  41cb90:	6820      	ldr	r0, [r4, #0]
  41cb92:	3010      	adds	r0, #16
  41cb94:	4b49      	ldr	r3, [pc, #292]	; (41ccbc <basic_init+0x9b4>)
  41cb96:	4798      	blx	r3
    lv_style_set_radius(&styles->btn, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  41cb98:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41cb9a:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41cb9e:	2101      	movs	r1, #1
  41cba0:	3010      	adds	r0, #16
  41cba2:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->btn, LV_STATE_DEFAULT, LV_OPA_COVER);
  41cba4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41cba6:	22ff      	movs	r2, #255	; 0xff
  41cba8:	212c      	movs	r1, #44	; 0x2c
  41cbaa:	3010      	adds	r0, #16
  41cbac:	4b44      	ldr	r3, [pc, #272]	; (41ccc0 <basic_init+0x9b8>)
  41cbae:	4798      	blx	r3
    lv_style_set_bg_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN);
  41cbb0:	6820      	ldr	r0, [r4, #0]
  41cbb2:	3010      	adds	r0, #16
  41cbb4:	4b3f      	ldr	r3, [pc, #252]	; (41ccb4 <basic_init+0x9ac>)
  41cbb6:	6a1b      	ldr	r3, [r3, #32]
  41cbb8:	f013 0f02 	tst.w	r3, #2
  41cbbc:	f000 859b 	beq.w	41d6f6 <basic_init+0x13ee>
  41cbc0:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41cbc4:	2129      	movs	r1, #41	; 0x29
  41cbc6:	4b39      	ldr	r3, [pc, #228]	; (41ccac <basic_init+0x9a4>)
  41cbc8:	4798      	blx	r3
    lv_style_set_bg_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_PR);
  41cbca:	4b39      	ldr	r3, [pc, #228]	; (41ccb0 <basic_init+0x9a8>)
  41cbcc:	6818      	ldr	r0, [r3, #0]
  41cbce:	3010      	adds	r0, #16
  41cbd0:	4b38      	ldr	r3, [pc, #224]	; (41ccb4 <basic_init+0x9ac>)
  41cbd2:	6a1b      	ldr	r3, [r3, #32]
  41cbd4:	f013 0f02 	tst.w	r3, #2
  41cbd8:	f000 859c 	beq.w	41d714 <basic_init+0x140c>
  41cbdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41cbe0:	4a34      	ldr	r2, [pc, #208]	; (41ccb4 <basic_init+0x9ac>)
  41cbe2:	8994      	ldrh	r4, [r2, #12]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  41cbe4:	f3c4 02c4 	ubfx	r2, r4, #3, #5
  41cbe8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  41cbec:	eb02 1102 	add.w	r1, r2, r2, lsl #4
  41cbf0:	f3c3 02c4 	ubfx	r2, r3, #3, #5
  41cbf4:	25cc      	movs	r5, #204	; 0xcc
  41cbf6:	fb05 1202 	mla	r2, r5, r2, r1
  41cbfa:	3280      	adds	r2, #128	; 0x80
  41cbfc:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  41cc00:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  41cc04:	f3c2 51c4 	ubfx	r1, r2, #23, #5
  41cc08:	f04f 0200 	mov.w	r2, #0
  41cc0c:	f361 02c7 	bfi	r2, r1, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  41cc10:	f004 0607 	and.w	r6, r4, #7
  41cc14:	f3c4 3142 	ubfx	r1, r4, #13, #3
  41cc18:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
  41cc1c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  41cc20:	eb01 1601 	add.w	r6, r1, r1, lsl #4
  41cc24:	f003 0707 	and.w	r7, r3, #7
  41cc28:	0b59      	lsrs	r1, r3, #13
  41cc2a:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
  41cc2e:	fb05 6101 	mla	r1, r5, r1, r6
  41cc32:	3180      	adds	r1, #128	; 0x80
  41cc34:	eb01 2601 	add.w	r6, r1, r1, lsl #8
  41cc38:	eb01 11c6 	add.w	r1, r1, r6, lsl #7
  41cc3c:	f3c1 6682 	ubfx	r6, r1, #26, #3
  41cc40:	f366 0202 	bfi	r2, r6, #0, #3
  41cc44:	f3c1 51c2 	ubfx	r1, r1, #23, #3
  41cc48:	f361 324f 	bfi	r2, r1, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  41cc4c:	f3c4 2404 	ubfx	r4, r4, #8, #5
  41cc50:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  41cc54:	eb04 1404 	add.w	r4, r4, r4, lsl #4
  41cc58:	f3c3 2304 	ubfx	r3, r3, #8, #5
  41cc5c:	fb05 4303 	mla	r3, r5, r3, r4
  41cc60:	3380      	adds	r3, #128	; 0x80
  41cc62:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  41cc66:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  41cc6a:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  41cc6e:	f363 220c 	bfi	r2, r3, #8, #5
  41cc72:	f241 0129 	movw	r1, #4137	; 0x1029
  41cc76:	4d0d      	ldr	r5, [pc, #52]	; (41ccac <basic_init+0x9a4>)
  41cc78:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED, COLOR_BTN_CHK);
  41cc7a:	4c0d      	ldr	r4, [pc, #52]	; (41ccb0 <basic_init+0x9a8>)
  41cc7c:	6820      	ldr	r0, [r4, #0]
  41cc7e:	4f0d      	ldr	r7, [pc, #52]	; (41ccb4 <basic_init+0x9ac>)
  41cc80:	89ba      	ldrh	r2, [r7, #12]
  41cc82:	f240 1129 	movw	r1, #297	; 0x129
  41cc86:	3010      	adds	r0, #16
  41cc88:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, COLOR_BTN_CHK_PR);
  41cc8a:	6826      	ldr	r6, [r4, #0]
  41cc8c:	3610      	adds	r6, #16
  41cc8e:	214c      	movs	r1, #76	; 0x4c
  41cc90:	89b8      	ldrh	r0, [r7, #12]
  41cc92:	4b0c      	ldr	r3, [pc, #48]	; (41ccc4 <basic_init+0x9bc>)
  41cc94:	4798      	blx	r3
  41cc96:	4602      	mov	r2, r0
  41cc98:	f241 1129 	movw	r1, #4393	; 0x1129
  41cc9c:	4630      	mov	r0, r6
  41cc9e:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN);
  41cca0:	6820      	ldr	r0, [r4, #0]
  41cca2:	3010      	adds	r0, #16
  41cca4:	6a3b      	ldr	r3, [r7, #32]
  41cca6:	f013 0f02 	tst.w	r3, #2
  41ccaa:	e00d      	b.n	41ccc8 <basic_init+0x9c0>
  41ccac:	0040a3f9 	.word	0x0040a3f9
  41ccb0:	20414834 	.word	0x20414834
  41ccb4:	20414838 	.word	0x20414838
  41ccb8:	0040a269 	.word	0x0040a269
  41ccbc:	00418a71 	.word	0x00418a71
  41ccc0:	0040a589 	.word	0x0040a589
  41ccc4:	00415f25 	.word	0x00415f25
  41ccc8:	f000 8575 	beq.w	41d7b6 <basic_init+0x14ae>
  41cccc:	f04f 32ff 	mov.w	r2, #4294967295
  41ccd0:	f242 0129 	movw	r1, #8233	; 0x2029
  41ccd4:	4bc7      	ldr	r3, [pc, #796]	; (41cff4 <basic_init+0xcec>)
  41ccd6:	4798      	blx	r3
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED | LV_STATE_CHECKED, COLOR_BTN_DIS);
  41ccd8:	4bc7      	ldr	r3, [pc, #796]	; (41cff8 <basic_init+0xcf0>)
  41ccda:	6818      	ldr	r0, [r3, #0]
  41ccdc:	3010      	adds	r0, #16
  41ccde:	4bc7      	ldr	r3, [pc, #796]	; (41cffc <basic_init+0xcf4>)
  41cce0:	6a1b      	ldr	r3, [r3, #32]
  41cce2:	f013 0f02 	tst.w	r3, #2
  41cce6:	f000 8575 	beq.w	41d7d4 <basic_init+0x14cc>
    return LV_COLOR_MAKE(r, g, b);
  41ccea:	f04f 0200 	mov.w	r2, #0
  41ccee:	2306      	movs	r3, #6
  41ccf0:	f363 0202 	bfi	r2, r3, #0, #3
  41ccf4:	2319      	movs	r3, #25
  41ccf6:	f363 02c7 	bfi	r2, r3, #3, #5
  41ccfa:	f363 220c 	bfi	r2, r3, #8, #5
  41ccfe:	2303      	movs	r3, #3
  41cd00:	f363 324f 	bfi	r2, r3, #13, #3
  41cd04:	f242 1129 	movw	r1, #8489	; 0x2129
  41cd08:	4eba      	ldr	r6, [pc, #744]	; (41cff4 <basic_init+0xcec>)
  41cd0a:	47b0      	blx	r6
    lv_style_set_border_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN_BORDER);
  41cd0c:	4dba      	ldr	r5, [pc, #744]	; (41cff8 <basic_init+0xcf0>)
  41cd0e:	6828      	ldr	r0, [r5, #0]
  41cd10:	4cba      	ldr	r4, [pc, #744]	; (41cffc <basic_init+0xcf4>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41cd12:	89a2      	ldrh	r2, [r4, #12]
  41cd14:	2139      	movs	r1, #57	; 0x39
  41cd16:	3010      	adds	r0, #16
  41cd18:	47b0      	blx	r6
    lv_style_set_border_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_BORDER_PR);
  41cd1a:	6828      	ldr	r0, [r5, #0]
  41cd1c:	89a2      	ldrh	r2, [r4, #12]
  41cd1e:	f241 0139 	movw	r1, #4153	; 0x1039
  41cd22:	3010      	adds	r0, #16
  41cd24:	47b0      	blx	r6
    lv_style_set_border_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN_BORDER_INA);
  41cd26:	6828      	ldr	r0, [r5, #0]
  41cd28:	3010      	adds	r0, #16
  41cd2a:	6a23      	ldr	r3, [r4, #32]
  41cd2c:	f013 0f02 	tst.w	r3, #2
  41cd30:	f000 855f 	beq.w	41d7f2 <basic_init+0x14ea>
  41cd34:	f04f 0200 	mov.w	r2, #0
  41cd38:	2304      	movs	r3, #4
  41cd3a:	f363 0202 	bfi	r2, r3, #0, #3
  41cd3e:	2311      	movs	r3, #17
  41cd40:	f363 02c7 	bfi	r2, r3, #3, #5
  41cd44:	f363 220c 	bfi	r2, r3, #8, #5
  41cd48:	2302      	movs	r3, #2
  41cd4a:	f363 324f 	bfi	r2, r3, #13, #3
  41cd4e:	f242 0139 	movw	r1, #8249	; 0x2039
  41cd52:	4ba8      	ldr	r3, [pc, #672]	; (41cff4 <basic_init+0xcec>)
  41cd54:	4798      	blx	r3
    lv_style_set_border_width(&styles->btn, LV_STATE_DEFAULT, BORDER_WIDTH);
  41cd56:	4ba8      	ldr	r3, [pc, #672]	; (41cff8 <basic_init+0xcf0>)
  41cd58:	681c      	ldr	r4, [r3, #0]
  41cd5a:	3410      	adds	r4, #16
  41cd5c:	2000      	movs	r0, #0
  41cd5e:	4ba8      	ldr	r3, [pc, #672]	; (41d000 <basic_init+0xcf8>)
  41cd60:	4798      	blx	r3
  41cd62:	3028      	adds	r0, #40	; 0x28
  41cd64:	0040      	lsls	r0, r0, #1
  41cd66:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41cd6a:	f280 8550 	bge.w	41d80e <basic_init+0x1506>
  41cd6e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41cd70:	2130      	movs	r1, #48	; 0x30
  41cd72:	4620      	mov	r0, r4
  41cd74:	4ba3      	ldr	r3, [pc, #652]	; (41d004 <basic_init+0xcfc>)
  41cd76:	4798      	blx	r3
    lv_style_set_border_opa(&styles->btn, LV_STATE_CHECKED, LV_OPA_TRANSP);
  41cd78:	4c9f      	ldr	r4, [pc, #636]	; (41cff8 <basic_init+0xcf0>)
  41cd7a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
  41cd7c:	2200      	movs	r2, #0
  41cd7e:	f44f 719e 	mov.w	r1, #316	; 0x13c
  41cd82:	3010      	adds	r0, #16
  41cd84:	4ba0      	ldr	r3, [pc, #640]	; (41d008 <basic_init+0xd00>)
  41cd86:	4798      	blx	r3
    lv_style_set_text_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  41cd88:	6820      	ldr	r0, [r4, #0]
  41cd8a:	3010      	adds	r0, #16
  41cd8c:	4b9b      	ldr	r3, [pc, #620]	; (41cffc <basic_init+0xcf4>)
  41cd8e:	6a1b      	ldr	r3, [r3, #32]
  41cd90:	f013 0f02 	tst.w	r3, #2
  41cd94:	f000 8549 	beq.w	41d82a <basic_init+0x1522>
  41cd98:	f04f 0200 	mov.w	r2, #0
  41cd9c:	2302      	movs	r3, #2
  41cd9e:	f363 0202 	bfi	r2, r3, #0, #3
  41cda2:	2306      	movs	r3, #6
  41cda4:	f363 02c7 	bfi	r2, r3, #3, #5
  41cda8:	2309      	movs	r3, #9
  41cdaa:	f363 220c 	bfi	r2, r3, #8, #5
  41cdae:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41cdb2:	f248 0189 	movw	r1, #32905	; 0x8089
  41cdb6:	4b8f      	ldr	r3, [pc, #572]	; (41cff4 <basic_init+0xcec>)
  41cdb8:	4798      	blx	r3
    lv_style_set_text_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  41cdba:	4b8f      	ldr	r3, [pc, #572]	; (41cff8 <basic_init+0xcf0>)
  41cdbc:	6818      	ldr	r0, [r3, #0]
  41cdbe:	3010      	adds	r0, #16
  41cdc0:	4b8e      	ldr	r3, [pc, #568]	; (41cffc <basic_init+0xcf4>)
  41cdc2:	6a1b      	ldr	r3, [r3, #32]
  41cdc4:	f013 0f02 	tst.w	r3, #2
  41cdc8:	f000 8533 	beq.w	41d832 <basic_init+0x152a>
  41cdcc:	f04f 0200 	mov.w	r2, #0
  41cdd0:	2302      	movs	r3, #2
  41cdd2:	f363 0202 	bfi	r2, r3, #0, #3
  41cdd6:	2306      	movs	r3, #6
  41cdd8:	f363 02c7 	bfi	r2, r3, #3, #5
  41cddc:	2309      	movs	r3, #9
  41cdde:	f363 220c 	bfi	r2, r3, #8, #5
  41cde2:	f36f 324f 	bfc	r2, #13, #3
  41cde6:	f249 0189 	movw	r1, #37001	; 0x9089
  41cdea:	4d82      	ldr	r5, [pc, #520]	; (41cff4 <basic_init+0xcec>)
  41cdec:	47a8      	blx	r5
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED,  lv_color_hex(0xffffff));
  41cdee:	4c82      	ldr	r4, [pc, #520]	; (41cff8 <basic_init+0xcf0>)
  41cdf0:	6820      	ldr	r0, [r4, #0]
  41cdf2:	f04f 32ff 	mov.w	r2, #4294967295
  41cdf6:	f248 1189 	movw	r1, #33161	; 0x8189
  41cdfa:	3010      	adds	r0, #16
  41cdfc:	47a8      	blx	r5
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
  41cdfe:	6820      	ldr	r0, [r4, #0]
  41ce00:	f04f 32ff 	mov.w	r2, #4294967295
  41ce04:	f249 1189 	movw	r1, #37257	; 0x9189
  41ce08:	3010      	adds	r0, #16
  41ce0a:	47a8      	blx	r5
    lv_style_set_text_color(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
  41ce0c:	6820      	ldr	r0, [r4, #0]
  41ce0e:	3010      	adds	r0, #16
  41ce10:	4b7a      	ldr	r3, [pc, #488]	; (41cffc <basic_init+0xcf4>)
  41ce12:	6a1b      	ldr	r3, [r3, #32]
  41ce14:	f013 0f02 	tst.w	r3, #2
  41ce18:	f000 850f 	beq.w	41d83a <basic_init+0x1532>
  41ce1c:	f04f 0200 	mov.w	r2, #0
  41ce20:	2304      	movs	r3, #4
  41ce22:	f363 0202 	bfi	r2, r3, #0, #3
  41ce26:	2311      	movs	r3, #17
  41ce28:	f363 02c7 	bfi	r2, r3, #3, #5
  41ce2c:	f363 220c 	bfi	r2, r3, #8, #5
  41ce30:	2302      	movs	r3, #2
  41ce32:	f363 324f 	bfi	r2, r3, #13, #3
  41ce36:	f24a 0189 	movw	r1, #41097	; 0xa089
  41ce3a:	4b6e      	ldr	r3, [pc, #440]	; (41cff4 <basic_init+0xcec>)
  41ce3c:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  41ce3e:	4b6e      	ldr	r3, [pc, #440]	; (41cff8 <basic_init+0xcf0>)
  41ce40:	6818      	ldr	r0, [r3, #0]
  41ce42:	3010      	adds	r0, #16
  41ce44:	4b6d      	ldr	r3, [pc, #436]	; (41cffc <basic_init+0xcf4>)
  41ce46:	6a1b      	ldr	r3, [r3, #32]
  41ce48:	f013 0f02 	tst.w	r3, #2
  41ce4c:	f000 8504 	beq.w	41d858 <basic_init+0x1550>
  41ce50:	f04f 0200 	mov.w	r2, #0
  41ce54:	2302      	movs	r3, #2
  41ce56:	f363 0202 	bfi	r2, r3, #0, #3
  41ce5a:	2306      	movs	r3, #6
  41ce5c:	f363 02c7 	bfi	r2, r3, #3, #5
  41ce60:	2309      	movs	r3, #9
  41ce62:	f363 220c 	bfi	r2, r3, #8, #5
  41ce66:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  41ce6a:	f248 01a9 	movw	r1, #32937	; 0x80a9
  41ce6e:	4b61      	ldr	r3, [pc, #388]	; (41cff4 <basic_init+0xcec>)
  41ce70:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  41ce72:	4b61      	ldr	r3, [pc, #388]	; (41cff8 <basic_init+0xcf0>)
  41ce74:	6818      	ldr	r0, [r3, #0]
  41ce76:	3010      	adds	r0, #16
  41ce78:	4b60      	ldr	r3, [pc, #384]	; (41cffc <basic_init+0xcf4>)
  41ce7a:	6a1b      	ldr	r3, [r3, #32]
  41ce7c:	f013 0f02 	tst.w	r3, #2
  41ce80:	f000 84ee 	beq.w	41d860 <basic_init+0x1558>
  41ce84:	f04f 0200 	mov.w	r2, #0
  41ce88:	2302      	movs	r3, #2
  41ce8a:	f363 0202 	bfi	r2, r3, #0, #3
  41ce8e:	2306      	movs	r3, #6
  41ce90:	f363 02c7 	bfi	r2, r3, #3, #5
  41ce94:	2309      	movs	r3, #9
  41ce96:	f363 220c 	bfi	r2, r3, #8, #5
  41ce9a:	f36f 324f 	bfc	r2, #13, #3
  41ce9e:	f249 01a9 	movw	r1, #37033	; 0x90a9
  41cea2:	4d54      	ldr	r5, [pc, #336]	; (41cff4 <basic_init+0xcec>)
  41cea4:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, lv_color_hex(0xffffff));
  41cea6:	4c54      	ldr	r4, [pc, #336]	; (41cff8 <basic_init+0xcf0>)
  41cea8:	6820      	ldr	r0, [r4, #0]
  41ceaa:	f04f 32ff 	mov.w	r2, #4294967295
  41ceae:	f249 01a9 	movw	r1, #37033	; 0x90a9
  41ceb2:	3010      	adds	r0, #16
  41ceb4:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
  41ceb6:	6820      	ldr	r0, [r4, #0]
  41ceb8:	f04f 32ff 	mov.w	r2, #4294967295
  41cebc:	f249 11a9 	movw	r1, #37289	; 0x91a9
  41cec0:	3010      	adds	r0, #16
  41cec2:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
  41cec4:	6820      	ldr	r0, [r4, #0]
  41cec6:	3010      	adds	r0, #16
  41cec8:	4b4c      	ldr	r3, [pc, #304]	; (41cffc <basic_init+0xcf4>)
  41ceca:	6a1b      	ldr	r3, [r3, #32]
  41cecc:	f013 0f02 	tst.w	r3, #2
  41ced0:	f000 84ca 	beq.w	41d868 <basic_init+0x1560>
  41ced4:	f04f 0200 	mov.w	r2, #0
  41ced8:	2304      	movs	r3, #4
  41ceda:	f363 0202 	bfi	r2, r3, #0, #3
  41cede:	2311      	movs	r3, #17
  41cee0:	f363 02c7 	bfi	r2, r3, #3, #5
  41cee4:	f363 220c 	bfi	r2, r3, #8, #5
  41cee8:	2302      	movs	r3, #2
  41ceea:	f363 324f 	bfi	r2, r3, #13, #3
  41ceee:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
  41cef2:	4b40      	ldr	r3, [pc, #256]	; (41cff4 <basic_init+0xcec>)
  41cef4:	4798      	blx	r3
    lv_style_set_value_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  41cef6:	4b40      	ldr	r3, [pc, #256]	; (41cff8 <basic_init+0xcf0>)
  41cef8:	6818      	ldr	r0, [r3, #0]
  41cefa:	3010      	adds	r0, #16
  41cefc:	4b3f      	ldr	r3, [pc, #252]	; (41cffc <basic_init+0xcf4>)
  41cefe:	6a1b      	ldr	r3, [r3, #32]
  41cf00:	f013 0f02 	tst.w	r3, #2
  41cf04:	f000 84bf 	beq.w	41d886 <basic_init+0x157e>
  41cf08:	f04f 0200 	mov.w	r2, #0
  41cf0c:	2302      	movs	r3, #2
  41cf0e:	f363 0202 	bfi	r2, r3, #0, #3
  41cf12:	2306      	movs	r3, #6
  41cf14:	f363 02c7 	bfi	r2, r3, #3, #5
  41cf18:	2309      	movs	r3, #9
  41cf1a:	f363 220c 	bfi	r2, r3, #8, #5
  41cf1e:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  41cf22:	2179      	movs	r1, #121	; 0x79
  41cf24:	4b33      	ldr	r3, [pc, #204]	; (41cff4 <basic_init+0xcec>)
  41cf26:	4798      	blx	r3
    lv_style_set_value_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  41cf28:	4b33      	ldr	r3, [pc, #204]	; (41cff8 <basic_init+0xcf0>)
  41cf2a:	6818      	ldr	r0, [r3, #0]
  41cf2c:	3010      	adds	r0, #16
  41cf2e:	4b33      	ldr	r3, [pc, #204]	; (41cffc <basic_init+0xcf4>)
  41cf30:	6a1b      	ldr	r3, [r3, #32]
  41cf32:	f013 0f02 	tst.w	r3, #2
  41cf36:	f000 84aa 	beq.w	41d88e <basic_init+0x1586>
  41cf3a:	f04f 0200 	mov.w	r2, #0
  41cf3e:	2302      	movs	r3, #2
  41cf40:	f363 0202 	bfi	r2, r3, #0, #3
  41cf44:	2306      	movs	r3, #6
  41cf46:	f363 02c7 	bfi	r2, r3, #3, #5
  41cf4a:	2309      	movs	r3, #9
  41cf4c:	f363 220c 	bfi	r2, r3, #8, #5
  41cf50:	f36f 324f 	bfc	r2, #13, #3
  41cf54:	f241 0179 	movw	r1, #4217	; 0x1079
  41cf58:	4d26      	ldr	r5, [pc, #152]	; (41cff4 <basic_init+0xcec>)
  41cf5a:	47a8      	blx	r5
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED,  lv_color_hex(0xffffff));
  41cf5c:	4c26      	ldr	r4, [pc, #152]	; (41cff8 <basic_init+0xcf0>)
  41cf5e:	6820      	ldr	r0, [r4, #0]
  41cf60:	f04f 32ff 	mov.w	r2, #4294967295
  41cf64:	f240 1179 	movw	r1, #377	; 0x179
  41cf68:	3010      	adds	r0, #16
  41cf6a:	47a8      	blx	r5
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
  41cf6c:	6820      	ldr	r0, [r4, #0]
  41cf6e:	f04f 32ff 	mov.w	r2, #4294967295
  41cf72:	f241 1179 	movw	r1, #4473	; 0x1179
  41cf76:	3010      	adds	r0, #16
  41cf78:	47a8      	blx	r5
    lv_style_set_value_color(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
  41cf7a:	6820      	ldr	r0, [r4, #0]
  41cf7c:	3010      	adds	r0, #16
  41cf7e:	4b1f      	ldr	r3, [pc, #124]	; (41cffc <basic_init+0xcf4>)
  41cf80:	6a1b      	ldr	r3, [r3, #32]
  41cf82:	f013 0f02 	tst.w	r3, #2
  41cf86:	f000 8486 	beq.w	41d896 <basic_init+0x158e>
  41cf8a:	f04f 0200 	mov.w	r2, #0
  41cf8e:	2304      	movs	r3, #4
  41cf90:	f363 0202 	bfi	r2, r3, #0, #3
  41cf94:	2311      	movs	r3, #17
  41cf96:	f363 02c7 	bfi	r2, r3, #3, #5
  41cf9a:	f363 220c 	bfi	r2, r3, #8, #5
  41cf9e:	2302      	movs	r3, #2
  41cfa0:	f363 324f 	bfi	r2, r3, #13, #3
  41cfa4:	f242 0179 	movw	r1, #8313	; 0x2079
  41cfa8:	4b12      	ldr	r3, [pc, #72]	; (41cff4 <basic_init+0xcec>)
  41cfaa:	4798      	blx	r3
    lv_style_set_pad_left(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
  41cfac:	4b12      	ldr	r3, [pc, #72]	; (41cff8 <basic_init+0xcf0>)
  41cfae:	681c      	ldr	r4, [r3, #0]
  41cfb0:	3410      	adds	r4, #16
  41cfb2:	2000      	movs	r0, #0
  41cfb4:	4b12      	ldr	r3, [pc, #72]	; (41d000 <basic_init+0xcf8>)
  41cfb6:	4798      	blx	r3
  41cfb8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41cfbc:	00c0      	lsls	r0, r0, #3
  41cfbe:	3050      	adds	r0, #80	; 0x50
  41cfc0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41cfc4:	f280 8476 	bge.w	41d8b4 <basic_init+0x15ac>
  41cfc8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41cfca:	2112      	movs	r1, #18
  41cfcc:	4620      	mov	r0, r4
  41cfce:	4b0d      	ldr	r3, [pc, #52]	; (41d004 <basic_init+0xcfc>)
  41cfd0:	4798      	blx	r3
    lv_style_set_pad_right(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
  41cfd2:	4b09      	ldr	r3, [pc, #36]	; (41cff8 <basic_init+0xcf0>)
  41cfd4:	681c      	ldr	r4, [r3, #0]
  41cfd6:	3410      	adds	r4, #16
  41cfd8:	2000      	movs	r0, #0
  41cfda:	4b09      	ldr	r3, [pc, #36]	; (41d000 <basic_init+0xcf8>)
  41cfdc:	4798      	blx	r3
  41cfde:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41cfe2:	00c0      	lsls	r0, r0, #3
  41cfe4:	3050      	adds	r0, #80	; 0x50
  41cfe6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41cfea:	f280 8473 	bge.w	41d8d4 <basic_init+0x15cc>
  41cfee:	2201      	movs	r2, #1
  41cff0:	e00c      	b.n	41d00c <basic_init+0xd04>
  41cff2:	bf00      	nop
  41cff4:	0040a3f9 	.word	0x0040a3f9
  41cff8:	20414834 	.word	0x20414834
  41cffc:	20414838 	.word	0x20414838
  41d000:	00414dfd 	.word	0x00414dfd
  41d004:	0040a269 	.word	0x0040a269
  41d008:	0040a589 	.word	0x0040a589
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41d00c:	2113      	movs	r1, #19
  41d00e:	4620      	mov	r0, r4
  41d010:	4bc2      	ldr	r3, [pc, #776]	; (41d31c <basic_init+0x1014>)
  41d012:	4798      	blx	r3
    lv_style_set_pad_top(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
  41d014:	4bc2      	ldr	r3, [pc, #776]	; (41d320 <basic_init+0x1018>)
  41d016:	681c      	ldr	r4, [r3, #0]
  41d018:	3410      	adds	r4, #16
  41d01a:	2000      	movs	r0, #0
  41d01c:	4bc1      	ldr	r3, [pc, #772]	; (41d324 <basic_init+0x101c>)
  41d01e:	4798      	blx	r3
  41d020:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d024:	3050      	adds	r0, #80	; 0x50
  41d026:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41d02a:	f280 8463 	bge.w	41d8f4 <basic_init+0x15ec>
  41d02e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41d030:	2110      	movs	r1, #16
  41d032:	4620      	mov	r0, r4
  41d034:	4bb9      	ldr	r3, [pc, #740]	; (41d31c <basic_init+0x1014>)
  41d036:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
  41d038:	4bb9      	ldr	r3, [pc, #740]	; (41d320 <basic_init+0x1018>)
  41d03a:	681c      	ldr	r4, [r3, #0]
  41d03c:	3410      	adds	r4, #16
  41d03e:	2000      	movs	r0, #0
  41d040:	4bb8      	ldr	r3, [pc, #736]	; (41d324 <basic_init+0x101c>)
  41d042:	4798      	blx	r3
  41d044:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d048:	3050      	adds	r0, #80	; 0x50
  41d04a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41d04e:	f280 8460 	bge.w	41d912 <basic_init+0x160a>
  41d052:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41d054:	2111      	movs	r1, #17
  41d056:	4620      	mov	r0, r4
  41d058:	4bb0      	ldr	r3, [pc, #704]	; (41d31c <basic_init+0x1014>)
  41d05a:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->btn, LV_STATE_DEFAULT, LV_DPX(20));
  41d05c:	4bb0      	ldr	r3, [pc, #704]	; (41d320 <basic_init+0x1018>)
  41d05e:	681c      	ldr	r4, [r3, #0]
  41d060:	3410      	adds	r4, #16
  41d062:	2000      	movs	r0, #0
  41d064:	4baf      	ldr	r3, [pc, #700]	; (41d324 <basic_init+0x101c>)
  41d066:	4798      	blx	r3
  41d068:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41d06c:	0080      	lsls	r0, r0, #2
  41d06e:	3050      	adds	r0, #80	; 0x50
  41d070:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41d074:	f280 845c 	bge.w	41d930 <basic_init+0x1628>
  41d078:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41d07a:	2114      	movs	r1, #20
  41d07c:	4620      	mov	r0, r4
  41d07e:	4ba7      	ldr	r3, [pc, #668]	; (41d31c <basic_init+0x1014>)
  41d080:	4798      	blx	r3
    lv_style_set_outline_width(&styles->btn, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  41d082:	4ba7      	ldr	r3, [pc, #668]	; (41d320 <basic_init+0x1018>)
  41d084:	681c      	ldr	r4, [r3, #0]
  41d086:	3410      	adds	r4, #16
  41d088:	4ba7      	ldr	r3, [pc, #668]	; (41d328 <basic_init+0x1020>)
  41d08a:	6a1b      	ldr	r3, [r3, #32]
  41d08c:	f013 0f20 	tst.w	r3, #32
  41d090:	f000 845e 	beq.w	41d950 <basic_init+0x1648>
  41d094:	2200      	movs	r2, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  41d096:	2140      	movs	r1, #64	; 0x40
  41d098:	4620      	mov	r0, r4
  41d09a:	4da0      	ldr	r5, [pc, #640]	; (41d31c <basic_init+0x1014>)
  41d09c:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->btn, LV_STATE_DEFAULT, LV_OPA_0);
  41d09e:	4ca0      	ldr	r4, [pc, #640]	; (41d320 <basic_init+0x1018>)
  41d0a0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  41d0a2:	2200      	movs	r2, #0
  41d0a4:	214c      	movs	r1, #76	; 0x4c
  41d0a6:	3010      	adds	r0, #16
  41d0a8:	4ea0      	ldr	r6, [pc, #640]	; (41d32c <basic_init+0x1024>)
  41d0aa:	47b0      	blx	r6
    lv_style_set_outline_opa(&styles->btn, LV_STATE_FOCUSED, LV_OPA_50);
  41d0ac:	6820      	ldr	r0, [r4, #0]
  41d0ae:	227f      	movs	r2, #127	; 0x7f
  41d0b0:	f44f 7113 	mov.w	r1, #588	; 0x24c
  41d0b4:	3010      	adds	r0, #16
  41d0b6:	47b0      	blx	r6
    lv_style_set_outline_color(&styles->btn, LV_STATE_DEFAULT, theme.color_primary);
  41d0b8:	6820      	ldr	r0, [r4, #0]
  41d0ba:	4f9b      	ldr	r7, [pc, #620]	; (41d328 <basic_init+0x1020>)
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
  41d0bc:	89ba      	ldrh	r2, [r7, #12]
  41d0be:	2149      	movs	r1, #73	; 0x49
  41d0c0:	3010      	adds	r0, #16
  41d0c2:	4e9b      	ldr	r6, [pc, #620]	; (41d330 <basic_init+0x1028>)
  41d0c4:	47b0      	blx	r6
    lv_style_set_outline_color(&styles->btn, LV_STATE_EDITED, theme.color_secondary);
  41d0c6:	6820      	ldr	r0, [r4, #0]
  41d0c8:	89fa      	ldrh	r2, [r7, #14]
  41d0ca:	f240 4149 	movw	r1, #1097	; 0x449
  41d0ce:	3010      	adds	r0, #16
  41d0d0:	47b0      	blx	r6
    lv_style_set_transition_time(&styles->btn, LV_STATE_DEFAULT, TRANSITION_TIME);
  41d0d2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  41d0d4:	2200      	movs	r2, #0
  41d0d6:	21b0      	movs	r1, #176	; 0xb0
  41d0d8:	3010      	adds	r0, #16
  41d0da:	47a8      	blx	r5
    lv_style_set_transition_prop_4(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_BORDER_OPA);
  41d0dc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
  41d0de:	223c      	movs	r2, #60	; 0x3c
  41d0e0:	21b5      	movs	r1, #181	; 0xb5
  41d0e2:	3010      	adds	r0, #16
  41d0e4:	47a8      	blx	r5
    lv_style_set_transition_prop_5(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
  41d0e6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
  41d0e8:	2229      	movs	r2, #41	; 0x29
  41d0ea:	21b6      	movs	r1, #182	; 0xb6
  41d0ec:	3010      	adds	r0, #16
  41d0ee:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
  41d0f0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  41d0f2:	224c      	movs	r2, #76	; 0x4c
  41d0f4:	21b7      	movs	r1, #183	; 0xb7
  41d0f6:	3010      	adds	r0, #16
  41d0f8:	47a8      	blx	r5
    lv_style_set_transition_delay(&styles->btn, LV_STATE_DEFAULT, TRANSITION_TIME);
  41d0fa:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int, scalar)
  41d0fc:	2200      	movs	r2, #0
  41d0fe:	21b1      	movs	r1, #177	; 0xb1
  41d100:	3010      	adds	r0, #16
  41d102:	47a8      	blx	r5
    lv_style_set_transition_delay(&styles->btn, LV_STATE_PRESSED, 0);
  41d104:	6820      	ldr	r0, [r4, #0]
  41d106:	2200      	movs	r2, #0
  41d108:	f241 01b1 	movw	r1, #4273	; 0x10b1
  41d10c:	3010      	adds	r0, #16
  41d10e:	47a8      	blx	r5
    style_init_reset(&styles->pad_inner);
  41d110:	6820      	ldr	r0, [r4, #0]
  41d112:	3014      	adds	r0, #20
  41d114:	4b87      	ldr	r3, [pc, #540]	; (41d334 <basic_init+0x102c>)
  41d116:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  41d118:	6824      	ldr	r4, [r4, #0]
  41d11a:	3414      	adds	r4, #20
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
  41d11c:	2000      	movs	r0, #0
  41d11e:	4b86      	ldr	r3, [pc, #536]	; (41d338 <basic_init+0x1030>)
  41d120:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  41d122:	2801      	cmp	r0, #1
  41d124:	f240 842d 	bls.w	41d982 <basic_init+0x167a>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
  41d128:	2000      	movs	r0, #0
  41d12a:	4b7e      	ldr	r3, [pc, #504]	; (41d324 <basic_init+0x101c>)
  41d12c:	4798      	blx	r3
  41d12e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41d132:	00c0      	lsls	r0, r0, #3
  41d134:	3050      	adds	r0, #80	; 0x50
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  41d136:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41d13a:	f280 843f 	bge.w	41d9bc <basic_init+0x16b4>
  41d13e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41d140:	2114      	movs	r1, #20
  41d142:	4620      	mov	r0, r4
  41d144:	4b75      	ldr	r3, [pc, #468]	; (41d31c <basic_init+0x1014>)
  41d146:	4798      	blx	r3
    style_init_reset(&styles->pad_small);
  41d148:	4b75      	ldr	r3, [pc, #468]	; (41d320 <basic_init+0x1018>)
  41d14a:	6818      	ldr	r0, [r3, #0]
  41d14c:	3018      	adds	r0, #24
  41d14e:	4b79      	ldr	r3, [pc, #484]	; (41d334 <basic_init+0x102c>)
  41d150:	4798      	blx	r3
    lv_style_int_t pad_small_value = lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(10) : LV_DPX(20);
  41d152:	2000      	movs	r0, #0
  41d154:	4b78      	ldr	r3, [pc, #480]	; (41d338 <basic_init+0x1030>)
  41d156:	4798      	blx	r3
  41d158:	2801      	cmp	r0, #1
  41d15a:	f240 843f 	bls.w	41d9dc <basic_init+0x16d4>
  41d15e:	2000      	movs	r0, #0
  41d160:	4b70      	ldr	r3, [pc, #448]	; (41d324 <basic_init+0x101c>)
  41d162:	4798      	blx	r3
  41d164:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41d168:	0080      	lsls	r0, r0, #2
  41d16a:	3050      	adds	r0, #80	; 0x50
  41d16c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41d170:	f280 8451 	bge.w	41da16 <basic_init+0x170e>
  41d174:	2401      	movs	r4, #1
    lv_style_set_pad_left(&styles->pad_small, LV_STATE_DEFAULT,  pad_small_value);
  41d176:	4e6a      	ldr	r6, [pc, #424]	; (41d320 <basic_init+0x1018>)
  41d178:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41d17a:	4622      	mov	r2, r4
  41d17c:	2112      	movs	r1, #18
  41d17e:	3018      	adds	r0, #24
  41d180:	4d66      	ldr	r5, [pc, #408]	; (41d31c <basic_init+0x1014>)
  41d182:	47a8      	blx	r5
    lv_style_set_pad_right(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
  41d184:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41d186:	4622      	mov	r2, r4
  41d188:	2113      	movs	r1, #19
  41d18a:	3018      	adds	r0, #24
  41d18c:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->pad_small, LV_STATE_DEFAULT,  pad_small_value);
  41d18e:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41d190:	4622      	mov	r2, r4
  41d192:	2110      	movs	r1, #16
  41d194:	3018      	adds	r0, #24
  41d196:	47a8      	blx	r5
    lv_style_set_pad_bottom(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
  41d198:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41d19a:	4622      	mov	r2, r4
  41d19c:	2111      	movs	r1, #17
  41d19e:	3018      	adds	r0, #24
  41d1a0:	47a8      	blx	r5
    lv_style_set_pad_inner(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
  41d1a2:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41d1a4:	4622      	mov	r2, r4
  41d1a6:	2114      	movs	r1, #20
  41d1a8:	3018      	adds	r0, #24
  41d1aa:	47a8      	blx	r5
  41d1ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41d1ae:	2302      	movs	r3, #2
  41d1b0:	f04f 0200 	mov.w	r2, #0
  41d1b4:	f363 0202 	bfi	r2, r3, #0, #3
  41d1b8:	2108      	movs	r1, #8
  41d1ba:	f361 02c7 	bfi	r2, r1, #3, #5
  41d1be:	210b      	movs	r1, #11
  41d1c0:	f361 220c 	bfi	r2, r1, #8, #5
  41d1c4:	f363 324f 	bfi	r2, r3, #13, #3
  41d1c8:	f7ff b8ba 	b.w	41c340 <basic_init+0x38>
  41d1cc:	f04f 0207 	mov.w	r2, #7
  41d1d0:	231c      	movs	r3, #28
  41d1d2:	f363 02c7 	bfi	r2, r3, #3, #5
  41d1d6:	231d      	movs	r3, #29
  41d1d8:	f363 220c 	bfi	r2, r3, #8, #5
  41d1dc:	2302      	movs	r3, #2
  41d1de:	f363 324f 	bfi	r2, r3, #13, #3
  41d1e2:	f7ff b8c7 	b.w	41c374 <basic_init+0x6c>
  41d1e6:	f04f 0207 	mov.w	r2, #7
  41d1ea:	231c      	movs	r3, #28
  41d1ec:	f363 02c7 	bfi	r2, r3, #3, #5
  41d1f0:	231d      	movs	r3, #29
  41d1f2:	f363 220c 	bfi	r2, r3, #8, #5
  41d1f6:	2302      	movs	r3, #2
  41d1f8:	f363 324f 	bfi	r2, r3, #13, #3
  41d1fc:	f7ff b8d5 	b.w	41c3aa <basic_init+0xa2>
  41d200:	f04f 0207 	mov.w	r2, #7
  41d204:	231c      	movs	r3, #28
  41d206:	f363 02c7 	bfi	r2, r3, #3, #5
  41d20a:	231d      	movs	r3, #29
  41d20c:	f363 220c 	bfi	r2, r3, #8, #5
  41d210:	2302      	movs	r3, #2
  41d212:	f363 324f 	bfi	r2, r3, #13, #3
  41d216:	f7ff b8e2 	b.w	41c3de <basic_init+0xd6>
    lv_style_set_radius(&styles->bg, LV_STATE_DEFAULT, LV_DPX(8));
  41d21a:	2000      	movs	r0, #0
  41d21c:	4b41      	ldr	r3, [pc, #260]	; (41d324 <basic_init+0x101c>)
  41d21e:	4798      	blx	r3
  41d220:	300a      	adds	r0, #10
  41d222:	00c0      	lsls	r0, r0, #3
  41d224:	4b45      	ldr	r3, [pc, #276]	; (41d33c <basic_init+0x1034>)
  41d226:	fb83 2300 	smull	r2, r3, r3, r0
  41d22a:	17c2      	asrs	r2, r0, #31
  41d22c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41d230:	b212      	sxth	r2, r2
  41d232:	f7ff b8f4 	b.w	41c41e <basic_init+0x116>
  41d236:	f04f 0200 	mov.w	r2, #0
  41d23a:	2303      	movs	r3, #3
  41d23c:	f363 0202 	bfi	r2, r3, #0, #3
  41d240:	230b      	movs	r3, #11
  41d242:	f363 02c7 	bfi	r2, r3, #3, #5
  41d246:	230e      	movs	r3, #14
  41d248:	f363 220c 	bfi	r2, r3, #8, #5
  41d24c:	f36f 324f 	bfc	r2, #13, #3
  41d250:	f7ff b8fa 	b.w	41c448 <basic_init+0x140>
  41d254:	f04f 0200 	mov.w	r2, #0
  41d258:	2304      	movs	r3, #4
  41d25a:	f363 0202 	bfi	r2, r3, #0, #3
  41d25e:	2310      	movs	r3, #16
  41d260:	f363 02c7 	bfi	r2, r3, #3, #5
  41d264:	2312      	movs	r3, #18
  41d266:	f363 220c 	bfi	r2, r3, #8, #5
  41d26a:	2302      	movs	r3, #2
  41d26c:	f363 324f 	bfi	r2, r3, #13, #3
  41d270:	f7ff b905 	b.w	41c47e <basic_init+0x176>
    if((theme.flags & LV_THEME_MATERIAL_FLAG_NO_FOCUS) == 0)lv_style_set_border_color(&styles->bg, LV_STATE_FOCUSED,
  41d274:	4b2a      	ldr	r3, [pc, #168]	; (41d320 <basic_init+0x1018>)
  41d276:	6818      	ldr	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41d278:	4b2b      	ldr	r3, [pc, #172]	; (41d328 <basic_init+0x1020>)
  41d27a:	899a      	ldrh	r2, [r3, #12]
  41d27c:	f240 2139 	movw	r1, #569	; 0x239
  41d280:	3004      	adds	r0, #4
  41d282:	4b2b      	ldr	r3, [pc, #172]	; (41d330 <basic_init+0x1028>)
  41d284:	4798      	blx	r3
  41d286:	f7ff b903 	b.w	41c490 <basic_init+0x188>
    lv_style_set_border_width(&styles->bg, LV_STATE_DEFAULT, BORDER_WIDTH);
  41d28a:	2000      	movs	r0, #0
  41d28c:	4b25      	ldr	r3, [pc, #148]	; (41d324 <basic_init+0x101c>)
  41d28e:	4798      	blx	r3
  41d290:	3028      	adds	r0, #40	; 0x28
  41d292:	0040      	lsls	r0, r0, #1
  41d294:	4b29      	ldr	r3, [pc, #164]	; (41d33c <basic_init+0x1034>)
  41d296:	fb83 2300 	smull	r2, r3, r3, r0
  41d29a:	17c2      	asrs	r2, r0, #31
  41d29c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41d2a0:	b212      	sxth	r2, r2
  41d2a2:	f7ff b90a 	b.w	41c4ba <basic_init+0x1b2>
  41d2a6:	f04f 32ff 	mov.w	r2, #4294967295
  41d2aa:	f7ff b927 	b.w	41c4fc <basic_init+0x1f4>
  41d2ae:	f04f 32ff 	mov.w	r2, #4294967295
  41d2b2:	f7ff b945 	b.w	41c540 <basic_init+0x238>
  41d2b6:	f04f 32ff 	mov.w	r2, #4294967295
  41d2ba:	f7ff b95c 	b.w	41c576 <basic_init+0x26e>
  41d2be:	f04f 32ff 	mov.w	r2, #4294967295
  41d2c2:	f7ff b974 	b.w	41c5ae <basic_init+0x2a6>
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41d2c6:	2000      	movs	r0, #0
  41d2c8:	4b16      	ldr	r3, [pc, #88]	; (41d324 <basic_init+0x101c>)
  41d2ca:	4798      	blx	r3
  41d2cc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d2d0:	3050      	adds	r0, #80	; 0x50
  41d2d2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41d2d6:	da02      	bge.n	41d2de <basic_init+0xfd6>
  41d2d8:	2401      	movs	r4, #1
  41d2da:	f7ff b986 	b.w	41c5ea <basic_init+0x2e2>
  41d2de:	2000      	movs	r0, #0
  41d2e0:	4b10      	ldr	r3, [pc, #64]	; (41d324 <basic_init+0x101c>)
  41d2e2:	4798      	blx	r3
  41d2e4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d2e8:	3050      	adds	r0, #80	; 0x50
  41d2ea:	4a14      	ldr	r2, [pc, #80]	; (41d33c <basic_init+0x1034>)
  41d2ec:	fb82 3200 	smull	r3, r2, r2, r0
  41d2f0:	17c4      	asrs	r4, r0, #31
  41d2f2:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41d2f6:	b2a4      	uxth	r4, r4
  41d2f8:	f7ff b977 	b.w	41c5ea <basic_init+0x2e2>
  41d2fc:	2000      	movs	r0, #0
  41d2fe:	4b09      	ldr	r3, [pc, #36]	; (41d324 <basic_init+0x101c>)
  41d300:	4798      	blx	r3
  41d302:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d306:	0040      	lsls	r0, r0, #1
  41d308:	3050      	adds	r0, #80	; 0x50
  41d30a:	4a0c      	ldr	r2, [pc, #48]	; (41d33c <basic_init+0x1034>)
  41d30c:	fb82 3200 	smull	r3, r2, r2, r0
  41d310:	17c4      	asrs	r4, r0, #31
  41d312:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41d316:	b2a4      	uxth	r4, r4
  41d318:	f7ff b967 	b.w	41c5ea <basic_init+0x2e2>
  41d31c:	0040a269 	.word	0x0040a269
  41d320:	20414834 	.word	0x20414834
  41d324:	00414dfd 	.word	0x00414dfd
  41d328:	20414838 	.word	0x20414838
  41d32c:	0040a589 	.word	0x0040a589
  41d330:	0040a3f9 	.word	0x0040a3f9
  41d334:	00418a71 	.word	0x00418a71
  41d338:	00414e1d 	.word	0x00414e1d
  41d33c:	66666667 	.word	0x66666667
  41d340:	2000      	movs	r0, #0
  41d342:	4bdf      	ldr	r3, [pc, #892]	; (41d6c0 <basic_init+0x13b8>)
  41d344:	4798      	blx	r3
  41d346:	3028      	adds	r0, #40	; 0x28
  41d348:	0040      	lsls	r0, r0, #1
  41d34a:	4bde      	ldr	r3, [pc, #888]	; (41d6c4 <basic_init+0x13bc>)
  41d34c:	fb83 2300 	smull	r2, r3, r3, r0
  41d350:	17c2      	asrs	r2, r0, #31
  41d352:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41d356:	b292      	uxth	r2, r2
  41d358:	f7ff b951 	b.w	41c5fe <basic_init+0x2f6>
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41d35c:	2000      	movs	r0, #0
  41d35e:	4bd8      	ldr	r3, [pc, #864]	; (41d6c0 <basic_init+0x13b8>)
  41d360:	4798      	blx	r3
  41d362:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d366:	3050      	adds	r0, #80	; 0x50
  41d368:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41d36c:	da02      	bge.n	41d374 <basic_init+0x106c>
  41d36e:	2401      	movs	r4, #1
  41d370:	f7ff b974 	b.w	41c65c <basic_init+0x354>
  41d374:	2000      	movs	r0, #0
  41d376:	4bd2      	ldr	r3, [pc, #840]	; (41d6c0 <basic_init+0x13b8>)
  41d378:	4798      	blx	r3
  41d37a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d37e:	3050      	adds	r0, #80	; 0x50
  41d380:	4ad0      	ldr	r2, [pc, #832]	; (41d6c4 <basic_init+0x13bc>)
  41d382:	fb82 3200 	smull	r3, r2, r2, r0
  41d386:	17c4      	asrs	r4, r0, #31
  41d388:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41d38c:	b2a4      	uxth	r4, r4
  41d38e:	f7ff b965 	b.w	41c65c <basic_init+0x354>
  41d392:	2000      	movs	r0, #0
  41d394:	4bca      	ldr	r3, [pc, #808]	; (41d6c0 <basic_init+0x13b8>)
  41d396:	4798      	blx	r3
  41d398:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d39c:	0040      	lsls	r0, r0, #1
  41d39e:	3050      	adds	r0, #80	; 0x50
  41d3a0:	4ac8      	ldr	r2, [pc, #800]	; (41d6c4 <basic_init+0x13bc>)
  41d3a2:	fb82 3200 	smull	r3, r2, r2, r0
  41d3a6:	17c4      	asrs	r4, r0, #31
  41d3a8:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41d3ac:	b2a4      	uxth	r4, r4
  41d3ae:	f7ff b955 	b.w	41c65c <basic_init+0x354>
  41d3b2:	2000      	movs	r0, #0
  41d3b4:	4bc2      	ldr	r3, [pc, #776]	; (41d6c0 <basic_init+0x13b8>)
  41d3b6:	4798      	blx	r3
  41d3b8:	3028      	adds	r0, #40	; 0x28
  41d3ba:	0040      	lsls	r0, r0, #1
  41d3bc:	4bc1      	ldr	r3, [pc, #772]	; (41d6c4 <basic_init+0x13bc>)
  41d3be:	fb83 2300 	smull	r2, r3, r3, r0
  41d3c2:	17c2      	asrs	r2, r0, #31
  41d3c4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41d3c8:	b292      	uxth	r2, r2
  41d3ca:	f7ff b951 	b.w	41c670 <basic_init+0x368>
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41d3ce:	2000      	movs	r0, #0
  41d3d0:	4bbb      	ldr	r3, [pc, #748]	; (41d6c0 <basic_init+0x13b8>)
  41d3d2:	4798      	blx	r3
  41d3d4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d3d8:	3050      	adds	r0, #80	; 0x50
  41d3da:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41d3de:	da02      	bge.n	41d3e6 <basic_init+0x10de>
  41d3e0:	2401      	movs	r4, #1
  41d3e2:	f7ff b960 	b.w	41c6a6 <basic_init+0x39e>
  41d3e6:	2000      	movs	r0, #0
  41d3e8:	4bb5      	ldr	r3, [pc, #724]	; (41d6c0 <basic_init+0x13b8>)
  41d3ea:	4798      	blx	r3
  41d3ec:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d3f0:	3050      	adds	r0, #80	; 0x50
  41d3f2:	4ab4      	ldr	r2, [pc, #720]	; (41d6c4 <basic_init+0x13bc>)
  41d3f4:	fb82 3200 	smull	r3, r2, r2, r0
  41d3f8:	17c4      	asrs	r4, r0, #31
  41d3fa:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41d3fe:	b2a4      	uxth	r4, r4
  41d400:	f7ff b951 	b.w	41c6a6 <basic_init+0x39e>
  41d404:	2000      	movs	r0, #0
  41d406:	4bae      	ldr	r3, [pc, #696]	; (41d6c0 <basic_init+0x13b8>)
  41d408:	4798      	blx	r3
  41d40a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d40e:	0040      	lsls	r0, r0, #1
  41d410:	3050      	adds	r0, #80	; 0x50
  41d412:	4aac      	ldr	r2, [pc, #688]	; (41d6c4 <basic_init+0x13bc>)
  41d414:	fb82 3200 	smull	r3, r2, r2, r0
  41d418:	17c4      	asrs	r4, r0, #31
  41d41a:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41d41e:	b2a4      	uxth	r4, r4
  41d420:	f7ff b941 	b.w	41c6a6 <basic_init+0x39e>
  41d424:	2000      	movs	r0, #0
  41d426:	4ba6      	ldr	r3, [pc, #664]	; (41d6c0 <basic_init+0x13b8>)
  41d428:	4798      	blx	r3
  41d42a:	3028      	adds	r0, #40	; 0x28
  41d42c:	0040      	lsls	r0, r0, #1
  41d42e:	4ba5      	ldr	r3, [pc, #660]	; (41d6c4 <basic_init+0x13bc>)
  41d430:	fb83 2300 	smull	r2, r3, r3, r0
  41d434:	17c2      	asrs	r2, r0, #31
  41d436:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41d43a:	b292      	uxth	r2, r2
  41d43c:	f7ff b93d 	b.w	41c6ba <basic_init+0x3b2>
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41d440:	2000      	movs	r0, #0
  41d442:	4b9f      	ldr	r3, [pc, #636]	; (41d6c0 <basic_init+0x13b8>)
  41d444:	4798      	blx	r3
  41d446:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d44a:	3050      	adds	r0, #80	; 0x50
  41d44c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41d450:	da02      	bge.n	41d458 <basic_init+0x1150>
  41d452:	2401      	movs	r4, #1
  41d454:	f7ff b94c 	b.w	41c6f0 <basic_init+0x3e8>
  41d458:	2000      	movs	r0, #0
  41d45a:	4b99      	ldr	r3, [pc, #612]	; (41d6c0 <basic_init+0x13b8>)
  41d45c:	4798      	blx	r3
  41d45e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d462:	3050      	adds	r0, #80	; 0x50
  41d464:	4a97      	ldr	r2, [pc, #604]	; (41d6c4 <basic_init+0x13bc>)
  41d466:	fb82 3200 	smull	r3, r2, r2, r0
  41d46a:	17c4      	asrs	r4, r0, #31
  41d46c:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41d470:	b2a4      	uxth	r4, r4
  41d472:	f7ff b93d 	b.w	41c6f0 <basic_init+0x3e8>
  41d476:	2000      	movs	r0, #0
  41d478:	4b91      	ldr	r3, [pc, #580]	; (41d6c0 <basic_init+0x13b8>)
  41d47a:	4798      	blx	r3
  41d47c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d480:	0040      	lsls	r0, r0, #1
  41d482:	3050      	adds	r0, #80	; 0x50
  41d484:	4a8f      	ldr	r2, [pc, #572]	; (41d6c4 <basic_init+0x13bc>)
  41d486:	fb82 3200 	smull	r3, r2, r2, r0
  41d48a:	17c4      	asrs	r4, r0, #31
  41d48c:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41d490:	b2a4      	uxth	r4, r4
  41d492:	f7ff b92d 	b.w	41c6f0 <basic_init+0x3e8>
  41d496:	2000      	movs	r0, #0
  41d498:	4b89      	ldr	r3, [pc, #548]	; (41d6c0 <basic_init+0x13b8>)
  41d49a:	4798      	blx	r3
  41d49c:	3028      	adds	r0, #40	; 0x28
  41d49e:	0040      	lsls	r0, r0, #1
  41d4a0:	4b88      	ldr	r3, [pc, #544]	; (41d6c4 <basic_init+0x13bc>)
  41d4a2:	fb83 2300 	smull	r2, r3, r3, r0
  41d4a6:	17c2      	asrs	r2, r0, #31
  41d4a8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41d4ac:	b292      	uxth	r2, r2
  41d4ae:	f7ff b929 	b.w	41c704 <basic_init+0x3fc>
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, PAD_DEF);
  41d4b2:	2000      	movs	r0, #0
  41d4b4:	4b82      	ldr	r3, [pc, #520]	; (41d6c0 <basic_init+0x13b8>)
  41d4b6:	4798      	blx	r3
  41d4b8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d4bc:	3050      	adds	r0, #80	; 0x50
  41d4be:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41d4c2:	da02      	bge.n	41d4ca <basic_init+0x11c2>
  41d4c4:	2201      	movs	r2, #1
  41d4c6:	f7ff b938 	b.w	41c73a <basic_init+0x432>
  41d4ca:	2000      	movs	r0, #0
  41d4cc:	4b7c      	ldr	r3, [pc, #496]	; (41d6c0 <basic_init+0x13b8>)
  41d4ce:	4798      	blx	r3
  41d4d0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d4d4:	3050      	adds	r0, #80	; 0x50
  41d4d6:	4b7b      	ldr	r3, [pc, #492]	; (41d6c4 <basic_init+0x13bc>)
  41d4d8:	fb83 2300 	smull	r2, r3, r3, r0
  41d4dc:	17c2      	asrs	r2, r0, #31
  41d4de:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41d4e2:	b212      	sxth	r2, r2
  41d4e4:	f7ff b929 	b.w	41c73a <basic_init+0x432>
  41d4e8:	2000      	movs	r0, #0
  41d4ea:	4b75      	ldr	r3, [pc, #468]	; (41d6c0 <basic_init+0x13b8>)
  41d4ec:	4798      	blx	r3
  41d4ee:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d4f2:	0040      	lsls	r0, r0, #1
  41d4f4:	3050      	adds	r0, #80	; 0x50
  41d4f6:	4b73      	ldr	r3, [pc, #460]	; (41d6c4 <basic_init+0x13bc>)
  41d4f8:	fb83 2300 	smull	r2, r3, r3, r0
  41d4fc:	17c2      	asrs	r2, r0, #31
  41d4fe:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41d502:	b212      	sxth	r2, r2
  41d504:	f7ff b919 	b.w	41c73a <basic_init+0x432>
  41d508:	2302      	movs	r3, #2
  41d50a:	f04f 0200 	mov.w	r2, #0
  41d50e:	f363 0202 	bfi	r2, r3, #0, #3
  41d512:	2108      	movs	r1, #8
  41d514:	f361 02c7 	bfi	r2, r1, #3, #5
  41d518:	2109      	movs	r1, #9
  41d51a:	f361 220c 	bfi	r2, r1, #8, #5
  41d51e:	f363 324f 	bfi	r2, r3, #13, #3
  41d522:	f7ff b938 	b.w	41c796 <basic_init+0x48e>
  41d526:	f04f 0200 	mov.w	r2, #0
  41d52a:	2302      	movs	r3, #2
  41d52c:	f363 0202 	bfi	r2, r3, #0, #3
  41d530:	2308      	movs	r3, #8
  41d532:	f363 02c7 	bfi	r2, r3, #3, #5
  41d536:	f363 220c 	bfi	r2, r3, #8, #5
  41d53a:	f36f 324f 	bfc	r2, #13, #3
  41d53e:	f7ff b941 	b.w	41c7c4 <basic_init+0x4bc>
  41d542:	f04f 0200 	mov.w	r2, #0
  41d546:	2305      	movs	r3, #5
  41d548:	f363 0202 	bfi	r2, r3, #0, #3
  41d54c:	2314      	movs	r3, #20
  41d54e:	f363 02c7 	bfi	r2, r3, #3, #5
  41d552:	2315      	movs	r3, #21
  41d554:	f363 220c 	bfi	r2, r3, #8, #5
  41d558:	2302      	movs	r3, #2
  41d55a:	f363 324f 	bfi	r2, r3, #13, #3
  41d55e:	f7ff b94a 	b.w	41c7f6 <basic_init+0x4ee>
  41d562:	f04f 0200 	mov.w	r2, #0
  41d566:	2305      	movs	r3, #5
  41d568:	f363 0202 	bfi	r2, r3, #0, #3
  41d56c:	2314      	movs	r3, #20
  41d56e:	f363 02c7 	bfi	r2, r3, #3, #5
  41d572:	2315      	movs	r3, #21
  41d574:	f363 220c 	bfi	r2, r3, #8, #5
  41d578:	2302      	movs	r3, #2
  41d57a:	f363 324f 	bfi	r2, r3, #13, #3
  41d57e:	f7ff b954 	b.w	41c82a <basic_init+0x522>
  41d582:	f04f 0200 	mov.w	r2, #0
  41d586:	2305      	movs	r3, #5
  41d588:	f363 0202 	bfi	r2, r3, #0, #3
  41d58c:	2314      	movs	r3, #20
  41d58e:	f363 02c7 	bfi	r2, r3, #3, #5
  41d592:	2315      	movs	r3, #21
  41d594:	f363 220c 	bfi	r2, r3, #8, #5
  41d598:	2302      	movs	r3, #2
  41d59a:	f363 324f 	bfi	r2, r3, #13, #3
  41d59e:	f7ff b95d 	b.w	41c85c <basic_init+0x554>
  41d5a2:	f04f 0200 	mov.w	r2, #0
  41d5a6:	2305      	movs	r3, #5
  41d5a8:	f363 0202 	bfi	r2, r3, #0, #3
  41d5ac:	2314      	movs	r3, #20
  41d5ae:	f363 02c7 	bfi	r2, r3, #3, #5
  41d5b2:	2315      	movs	r3, #21
  41d5b4:	f363 220c 	bfi	r2, r3, #8, #5
  41d5b8:	2302      	movs	r3, #2
  41d5ba:	f363 324f 	bfi	r2, r3, #13, #3
  41d5be:	f7ff b967 	b.w	41c890 <basic_init+0x588>
  41d5c2:	f04f 0200 	mov.w	r2, #0
  41d5c6:	2302      	movs	r3, #2
  41d5c8:	f363 0202 	bfi	r2, r3, #0, #3
  41d5cc:	2309      	movs	r3, #9
  41d5ce:	f363 02c7 	bfi	r2, r3, #3, #5
  41d5d2:	230a      	movs	r3, #10
  41d5d4:	f363 220c 	bfi	r2, r3, #8, #5
  41d5d8:	2303      	movs	r3, #3
  41d5da:	f363 324f 	bfi	r2, r3, #13, #3
  41d5de:	f7ff b971 	b.w	41c8c4 <basic_init+0x5bc>
  41d5e2:	f04f 0200 	mov.w	r2, #0
  41d5e6:	2303      	movs	r3, #3
  41d5e8:	f363 0202 	bfi	r2, r3, #0, #3
  41d5ec:	230b      	movs	r3, #11
  41d5ee:	f363 02c7 	bfi	r2, r3, #3, #5
  41d5f2:	230e      	movs	r3, #14
  41d5f4:	f363 220c 	bfi	r2, r3, #8, #5
  41d5f8:	f36f 324f 	bfc	r2, #13, #3
  41d5fc:	f7ff b982 	b.w	41c904 <basic_init+0x5fc>
  41d600:	f04f 0200 	mov.w	r2, #0
  41d604:	2303      	movs	r3, #3
  41d606:	f363 0202 	bfi	r2, r3, #0, #3
  41d60a:	230b      	movs	r3, #11
  41d60c:	f363 02c7 	bfi	r2, r3, #3, #5
  41d610:	230d      	movs	r3, #13
  41d612:	f363 220c 	bfi	r2, r3, #8, #5
  41d616:	2301      	movs	r3, #1
  41d618:	f363 324f 	bfi	r2, r3, #13, #3
  41d61c:	f7ff b9b1 	b.w	41c982 <basic_init+0x67a>
  41d620:	f04f 0200 	mov.w	r2, #0
  41d624:	2303      	movs	r3, #3
  41d626:	f363 0202 	bfi	r2, r3, #0, #3
  41d62a:	230b      	movs	r3, #11
  41d62c:	f363 02c7 	bfi	r2, r3, #3, #5
  41d630:	230d      	movs	r3, #13
  41d632:	f363 220c 	bfi	r2, r3, #8, #5
  41d636:	2301      	movs	r3, #1
  41d638:	f363 324f 	bfi	r2, r3, #13, #3
  41d63c:	f7ff b9bd 	b.w	41c9ba <basic_init+0x6b2>
  41d640:	f04f 0200 	mov.w	r2, #0
  41d644:	2303      	movs	r3, #3
  41d646:	f363 0202 	bfi	r2, r3, #0, #3
  41d64a:	230b      	movs	r3, #11
  41d64c:	f363 02c7 	bfi	r2, r3, #3, #5
  41d650:	230d      	movs	r3, #13
  41d652:	f363 220c 	bfi	r2, r3, #8, #5
  41d656:	2301      	movs	r3, #1
  41d658:	f363 324f 	bfi	r2, r3, #13, #3
  41d65c:	f7ff b9c9 	b.w	41c9f2 <basic_init+0x6ea>
  41d660:	f04f 0200 	mov.w	r2, #0
  41d664:	2303      	movs	r3, #3
  41d666:	f363 0202 	bfi	r2, r3, #0, #3
  41d66a:	230b      	movs	r3, #11
  41d66c:	f363 02c7 	bfi	r2, r3, #3, #5
  41d670:	230d      	movs	r3, #13
  41d672:	f363 220c 	bfi	r2, r3, #8, #5
  41d676:	2301      	movs	r3, #1
  41d678:	f363 324f 	bfi	r2, r3, #13, #3
  41d67c:	f7ff b9d5 	b.w	41ca2a <basic_init+0x722>
  41d680:	f04f 32ff 	mov.w	r2, #4294967295
  41d684:	f7ff b9ed 	b.w	41ca62 <basic_init+0x75a>
  41d688:	f04f 32ff 	mov.w	r2, #4294967295
  41d68c:	f7ff b9f8 	b.w	41ca80 <basic_init+0x778>
  41d690:	f04f 32ff 	mov.w	r2, #4294967295
  41d694:	f7ff ba03 	b.w	41ca9e <basic_init+0x796>
  41d698:	f04f 0200 	mov.w	r2, #0
  41d69c:	2304      	movs	r3, #4
  41d69e:	f363 0202 	bfi	r2, r3, #0, #3
  41d6a2:	2313      	movs	r3, #19
  41d6a4:	f363 02c7 	bfi	r2, r3, #3, #5
  41d6a8:	f363 220c 	bfi	r2, r3, #8, #5
  41d6ac:	2306      	movs	r3, #6
  41d6ae:	f363 324f 	bfi	r2, r3, #13, #3
  41d6b2:	f7ff ba0e 	b.w	41cad2 <basic_init+0x7ca>
  41d6b6:	f04f 32ff 	mov.w	r2, #4294967295
  41d6ba:	f7ff ba26 	b.w	41cb0a <basic_init+0x802>
  41d6be:	bf00      	nop
  41d6c0:	00414dfd 	.word	0x00414dfd
  41d6c4:	66666667 	.word	0x66666667
  41d6c8:	f04f 32ff 	mov.w	r2, #4294967295
  41d6cc:	f7ff ba2c 	b.w	41cb28 <basic_init+0x820>
  41d6d0:	f04f 32ff 	mov.w	r2, #4294967295
  41d6d4:	f7ff ba37 	b.w	41cb46 <basic_init+0x83e>
  41d6d8:	f04f 0200 	mov.w	r2, #0
  41d6dc:	2304      	movs	r3, #4
  41d6de:	f363 0202 	bfi	r2, r3, #0, #3
  41d6e2:	2313      	movs	r3, #19
  41d6e4:	f363 02c7 	bfi	r2, r3, #3, #5
  41d6e8:	f363 220c 	bfi	r2, r3, #8, #5
  41d6ec:	2306      	movs	r3, #6
  41d6ee:	f363 324f 	bfi	r2, r3, #13, #3
  41d6f2:	f7ff ba42 	b.w	41cb7a <basic_init+0x872>
  41d6f6:	f04f 0200 	mov.w	r2, #0
  41d6fa:	2303      	movs	r3, #3
  41d6fc:	f363 0202 	bfi	r2, r3, #0, #3
  41d700:	230b      	movs	r3, #11
  41d702:	f363 02c7 	bfi	r2, r3, #3, #5
  41d706:	230e      	movs	r3, #14
  41d708:	f363 220c 	bfi	r2, r3, #8, #5
  41d70c:	f36f 324f 	bfc	r2, #13, #3
  41d710:	f7ff ba58 	b.w	41cbc4 <basic_init+0x8bc>
  41d714:	f04f 0400 	mov.w	r4, #0
  41d718:	2303      	movs	r3, #3
  41d71a:	f363 0402 	bfi	r4, r3, #0, #3
  41d71e:	230b      	movs	r3, #11
  41d720:	f363 04c7 	bfi	r4, r3, #3, #5
  41d724:	230e      	movs	r3, #14
  41d726:	f363 240c 	bfi	r4, r3, #8, #5
  41d72a:	f36f 344f 	bfc	r4, #13, #3
  41d72e:	4bc2      	ldr	r3, [pc, #776]	; (41da38 <basic_init+0x1730>)
  41d730:	899b      	ldrh	r3, [r3, #12]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  41d732:	f3c3 02c4 	ubfx	r2, r3, #3, #5
  41d736:	264c      	movs	r6, #76	; 0x4c
  41d738:	f3c4 01c4 	ubfx	r1, r4, #3, #5
  41d73c:	25b3      	movs	r5, #179	; 0xb3
  41d73e:	fb05 f101 	mul.w	r1, r5, r1
  41d742:	fb06 1202 	mla	r2, r6, r2, r1
  41d746:	3280      	adds	r2, #128	; 0x80
  41d748:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  41d74c:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  41d750:	f3c2 51c4 	ubfx	r1, r2, #23, #5
  41d754:	f04f 0200 	mov.w	r2, #0
  41d758:	f361 02c7 	bfi	r2, r1, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  41d75c:	f003 0707 	and.w	r7, r3, #7
  41d760:	f3c3 3142 	ubfx	r1, r3, #13, #3
  41d764:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
  41d768:	f004 0707 	and.w	r7, r4, #7
  41d76c:	00ff      	lsls	r7, r7, #3
  41d76e:	fb05 f707 	mul.w	r7, r5, r7
  41d772:	fb06 7101 	mla	r1, r6, r1, r7
  41d776:	3180      	adds	r1, #128	; 0x80
  41d778:	eb01 2701 	add.w	r7, r1, r1, lsl #8
  41d77c:	eb01 11c7 	add.w	r1, r1, r7, lsl #7
  41d780:	f3c1 6782 	ubfx	r7, r1, #26, #3
  41d784:	f367 0202 	bfi	r2, r7, #0, #3
  41d788:	f3c1 51c2 	ubfx	r1, r1, #23, #3
  41d78c:	f361 324f 	bfi	r2, r1, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  41d790:	f3c3 2304 	ubfx	r3, r3, #8, #5
  41d794:	f3c4 2404 	ubfx	r4, r4, #8, #5
  41d798:	fb05 f404 	mul.w	r4, r5, r4
  41d79c:	fb06 4303 	mla	r3, r6, r3, r4
  41d7a0:	3380      	adds	r3, #128	; 0x80
  41d7a2:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  41d7a6:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  41d7aa:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  41d7ae:	f363 220c 	bfi	r2, r3, #8, #5
  41d7b2:	f7ff ba5e 	b.w	41cc72 <basic_init+0x96a>
    return LV_COLOR_MAKE(r, g, b);
  41d7b6:	f04f 0200 	mov.w	r2, #0
  41d7ba:	2303      	movs	r3, #3
  41d7bc:	f363 0202 	bfi	r2, r3, #0, #3
  41d7c0:	230b      	movs	r3, #11
  41d7c2:	f363 02c7 	bfi	r2, r3, #3, #5
  41d7c6:	230e      	movs	r3, #14
  41d7c8:	f363 220c 	bfi	r2, r3, #8, #5
  41d7cc:	f36f 324f 	bfc	r2, #13, #3
  41d7d0:	f7ff ba7e 	b.w	41ccd0 <basic_init+0x9c8>
  41d7d4:	f04f 0200 	mov.w	r2, #0
  41d7d8:	2304      	movs	r3, #4
  41d7da:	f363 0202 	bfi	r2, r3, #0, #3
  41d7de:	2311      	movs	r3, #17
  41d7e0:	f363 02c7 	bfi	r2, r3, #3, #5
  41d7e4:	f363 220c 	bfi	r2, r3, #8, #5
  41d7e8:	2302      	movs	r3, #2
  41d7ea:	f363 324f 	bfi	r2, r3, #13, #3
  41d7ee:	f7ff ba89 	b.w	41cd04 <basic_init+0x9fc>
  41d7f2:	f04f 0200 	mov.w	r2, #0
  41d7f6:	2302      	movs	r3, #2
  41d7f8:	f363 0202 	bfi	r2, r3, #0, #3
  41d7fc:	2308      	movs	r3, #8
  41d7fe:	f363 02c7 	bfi	r2, r3, #3, #5
  41d802:	f363 220c 	bfi	r2, r3, #8, #5
  41d806:	f36f 324f 	bfc	r2, #13, #3
  41d80a:	f7ff baa0 	b.w	41cd4e <basic_init+0xa46>
    lv_style_set_border_width(&styles->btn, LV_STATE_DEFAULT, BORDER_WIDTH);
  41d80e:	2000      	movs	r0, #0
  41d810:	4b8a      	ldr	r3, [pc, #552]	; (41da3c <basic_init+0x1734>)
  41d812:	4798      	blx	r3
  41d814:	3028      	adds	r0, #40	; 0x28
  41d816:	0040      	lsls	r0, r0, #1
  41d818:	4b89      	ldr	r3, [pc, #548]	; (41da40 <basic_init+0x1738>)
  41d81a:	fb83 2300 	smull	r2, r3, r3, r0
  41d81e:	17c2      	asrs	r2, r0, #31
  41d820:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41d824:	b212      	sxth	r2, r2
  41d826:	f7ff baa3 	b.w	41cd70 <basic_init+0xa68>
  41d82a:	f04f 32ff 	mov.w	r2, #4294967295
  41d82e:	f7ff bac0 	b.w	41cdb2 <basic_init+0xaaa>
  41d832:	f04f 32ff 	mov.w	r2, #4294967295
  41d836:	f7ff bad6 	b.w	41cde6 <basic_init+0xade>
  41d83a:	f04f 0200 	mov.w	r2, #0
  41d83e:	2304      	movs	r3, #4
  41d840:	f363 0202 	bfi	r2, r3, #0, #3
  41d844:	2311      	movs	r3, #17
  41d846:	f363 02c7 	bfi	r2, r3, #3, #5
  41d84a:	f363 220c 	bfi	r2, r3, #8, #5
  41d84e:	2302      	movs	r3, #2
  41d850:	f363 324f 	bfi	r2, r3, #13, #3
  41d854:	f7ff baef 	b.w	41ce36 <basic_init+0xb2e>
  41d858:	f04f 32ff 	mov.w	r2, #4294967295
  41d85c:	f7ff bb05 	b.w	41ce6a <basic_init+0xb62>
  41d860:	f04f 32ff 	mov.w	r2, #4294967295
  41d864:	f7ff bb1b 	b.w	41ce9e <basic_init+0xb96>
  41d868:	f04f 0200 	mov.w	r2, #0
  41d86c:	2304      	movs	r3, #4
  41d86e:	f363 0202 	bfi	r2, r3, #0, #3
  41d872:	2311      	movs	r3, #17
  41d874:	f363 02c7 	bfi	r2, r3, #3, #5
  41d878:	f363 220c 	bfi	r2, r3, #8, #5
  41d87c:	2302      	movs	r3, #2
  41d87e:	f363 324f 	bfi	r2, r3, #13, #3
  41d882:	f7ff bb34 	b.w	41ceee <basic_init+0xbe6>
  41d886:	f04f 32ff 	mov.w	r2, #4294967295
  41d88a:	f7ff bb4a 	b.w	41cf22 <basic_init+0xc1a>
  41d88e:	f04f 32ff 	mov.w	r2, #4294967295
  41d892:	f7ff bb5f 	b.w	41cf54 <basic_init+0xc4c>
  41d896:	f04f 0200 	mov.w	r2, #0
  41d89a:	2304      	movs	r3, #4
  41d89c:	f363 0202 	bfi	r2, r3, #0, #3
  41d8a0:	2311      	movs	r3, #17
  41d8a2:	f363 02c7 	bfi	r2, r3, #3, #5
  41d8a6:	f363 220c 	bfi	r2, r3, #8, #5
  41d8aa:	2302      	movs	r3, #2
  41d8ac:	f363 324f 	bfi	r2, r3, #13, #3
  41d8b0:	f7ff bb78 	b.w	41cfa4 <basic_init+0xc9c>
    lv_style_set_pad_left(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
  41d8b4:	2000      	movs	r0, #0
  41d8b6:	4b61      	ldr	r3, [pc, #388]	; (41da3c <basic_init+0x1734>)
  41d8b8:	4798      	blx	r3
  41d8ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41d8be:	00c0      	lsls	r0, r0, #3
  41d8c0:	3050      	adds	r0, #80	; 0x50
  41d8c2:	4b5f      	ldr	r3, [pc, #380]	; (41da40 <basic_init+0x1738>)
  41d8c4:	fb83 2300 	smull	r2, r3, r3, r0
  41d8c8:	17c2      	asrs	r2, r0, #31
  41d8ca:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41d8ce:	b212      	sxth	r2, r2
  41d8d0:	f7ff bb7b 	b.w	41cfca <basic_init+0xcc2>
    lv_style_set_pad_right(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
  41d8d4:	2000      	movs	r0, #0
  41d8d6:	4b59      	ldr	r3, [pc, #356]	; (41da3c <basic_init+0x1734>)
  41d8d8:	4798      	blx	r3
  41d8da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41d8de:	00c0      	lsls	r0, r0, #3
  41d8e0:	3050      	adds	r0, #80	; 0x50
  41d8e2:	4b57      	ldr	r3, [pc, #348]	; (41da40 <basic_init+0x1738>)
  41d8e4:	fb83 2300 	smull	r2, r3, r3, r0
  41d8e8:	17c2      	asrs	r2, r0, #31
  41d8ea:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41d8ee:	b212      	sxth	r2, r2
  41d8f0:	f7ff bb8c 	b.w	41d00c <basic_init+0xd04>
    lv_style_set_pad_top(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
  41d8f4:	2000      	movs	r0, #0
  41d8f6:	4b51      	ldr	r3, [pc, #324]	; (41da3c <basic_init+0x1734>)
  41d8f8:	4798      	blx	r3
  41d8fa:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d8fe:	3050      	adds	r0, #80	; 0x50
  41d900:	4b4f      	ldr	r3, [pc, #316]	; (41da40 <basic_init+0x1738>)
  41d902:	fb83 2300 	smull	r2, r3, r3, r0
  41d906:	17c2      	asrs	r2, r0, #31
  41d908:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41d90c:	b212      	sxth	r2, r2
  41d90e:	f7ff bb8f 	b.w	41d030 <basic_init+0xd28>
    lv_style_set_pad_bottom(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
  41d912:	2000      	movs	r0, #0
  41d914:	4b49      	ldr	r3, [pc, #292]	; (41da3c <basic_init+0x1734>)
  41d916:	4798      	blx	r3
  41d918:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d91c:	3050      	adds	r0, #80	; 0x50
  41d91e:	4b48      	ldr	r3, [pc, #288]	; (41da40 <basic_init+0x1738>)
  41d920:	fb83 2300 	smull	r2, r3, r3, r0
  41d924:	17c2      	asrs	r2, r0, #31
  41d926:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41d92a:	b212      	sxth	r2, r2
  41d92c:	f7ff bb92 	b.w	41d054 <basic_init+0xd4c>
    lv_style_set_pad_inner(&styles->btn, LV_STATE_DEFAULT, LV_DPX(20));
  41d930:	2000      	movs	r0, #0
  41d932:	4b42      	ldr	r3, [pc, #264]	; (41da3c <basic_init+0x1734>)
  41d934:	4798      	blx	r3
  41d936:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41d93a:	0080      	lsls	r0, r0, #2
  41d93c:	3050      	adds	r0, #80	; 0x50
  41d93e:	4b40      	ldr	r3, [pc, #256]	; (41da40 <basic_init+0x1738>)
  41d940:	fb83 2300 	smull	r2, r3, r3, r0
  41d944:	17c2      	asrs	r2, r0, #31
  41d946:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41d94a:	b212      	sxth	r2, r2
  41d94c:	f7ff bb95 	b.w	41d07a <basic_init+0xd72>
    lv_style_set_outline_width(&styles->btn, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  41d950:	2000      	movs	r0, #0
  41d952:	4b3a      	ldr	r3, [pc, #232]	; (41da3c <basic_init+0x1734>)
  41d954:	4798      	blx	r3
  41d956:	3028      	adds	r0, #40	; 0x28
  41d958:	0040      	lsls	r0, r0, #1
  41d95a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41d95e:	da02      	bge.n	41d966 <basic_init+0x165e>
  41d960:	2201      	movs	r2, #1
  41d962:	f7ff bb98 	b.w	41d096 <basic_init+0xd8e>
  41d966:	2000      	movs	r0, #0
  41d968:	4b34      	ldr	r3, [pc, #208]	; (41da3c <basic_init+0x1734>)
  41d96a:	4798      	blx	r3
  41d96c:	3028      	adds	r0, #40	; 0x28
  41d96e:	0040      	lsls	r0, r0, #1
  41d970:	4b33      	ldr	r3, [pc, #204]	; (41da40 <basic_init+0x1738>)
  41d972:	fb83 2300 	smull	r2, r3, r3, r0
  41d976:	17c2      	asrs	r2, r0, #31
  41d978:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41d97c:	b212      	sxth	r2, r2
  41d97e:	f7ff bb8a 	b.w	41d096 <basic_init+0xd8e>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
  41d982:	2000      	movs	r0, #0
  41d984:	4b2d      	ldr	r3, [pc, #180]	; (41da3c <basic_init+0x1734>)
  41d986:	4798      	blx	r3
  41d988:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41d98c:	0080      	lsls	r0, r0, #2
  41d98e:	3050      	adds	r0, #80	; 0x50
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  41d990:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41d994:	da02      	bge.n	41d99c <basic_init+0x1694>
  41d996:	2201      	movs	r2, #1
  41d998:	f7ff bbd2 	b.w	41d140 <basic_init+0xe38>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
  41d99c:	2000      	movs	r0, #0
  41d99e:	4b27      	ldr	r3, [pc, #156]	; (41da3c <basic_init+0x1734>)
  41d9a0:	4798      	blx	r3
  41d9a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41d9a6:	0080      	lsls	r0, r0, #2
  41d9a8:	3050      	adds	r0, #80	; 0x50
  41d9aa:	4b25      	ldr	r3, [pc, #148]	; (41da40 <basic_init+0x1738>)
  41d9ac:	fb83 2300 	smull	r2, r3, r3, r0
  41d9b0:	17c2      	asrs	r2, r0, #31
  41d9b2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  41d9b6:	b212      	sxth	r2, r2
  41d9b8:	f7ff bbc2 	b.w	41d140 <basic_init+0xe38>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
  41d9bc:	2000      	movs	r0, #0
  41d9be:	4b1f      	ldr	r3, [pc, #124]	; (41da3c <basic_init+0x1734>)
  41d9c0:	4798      	blx	r3
  41d9c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41d9c6:	00c0      	lsls	r0, r0, #3
  41d9c8:	3050      	adds	r0, #80	; 0x50
  41d9ca:	4b1d      	ldr	r3, [pc, #116]	; (41da40 <basic_init+0x1738>)
  41d9cc:	fb83 2300 	smull	r2, r3, r3, r0
  41d9d0:	17c2      	asrs	r2, r0, #31
  41d9d2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  41d9d6:	b212      	sxth	r2, r2
  41d9d8:	f7ff bbb2 	b.w	41d140 <basic_init+0xe38>
    lv_style_int_t pad_small_value = lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(10) : LV_DPX(20);
  41d9dc:	2000      	movs	r0, #0
  41d9de:	4b17      	ldr	r3, [pc, #92]	; (41da3c <basic_init+0x1734>)
  41d9e0:	4798      	blx	r3
  41d9e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41d9e6:	0040      	lsls	r0, r0, #1
  41d9e8:	3050      	adds	r0, #80	; 0x50
  41d9ea:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41d9ee:	da02      	bge.n	41d9f6 <basic_init+0x16ee>
  41d9f0:	2401      	movs	r4, #1
  41d9f2:	f7ff bbc0 	b.w	41d176 <basic_init+0xe6e>
  41d9f6:	2000      	movs	r0, #0
  41d9f8:	4b10      	ldr	r3, [pc, #64]	; (41da3c <basic_init+0x1734>)
  41d9fa:	4798      	blx	r3
  41d9fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41da00:	0040      	lsls	r0, r0, #1
  41da02:	3050      	adds	r0, #80	; 0x50
  41da04:	4b0e      	ldr	r3, [pc, #56]	; (41da40 <basic_init+0x1738>)
  41da06:	fb83 2300 	smull	r2, r3, r3, r0
  41da0a:	17c4      	asrs	r4, r0, #31
  41da0c:	ebc4 14a3 	rsb	r4, r4, r3, asr #6
  41da10:	b224      	sxth	r4, r4
  41da12:	f7ff bbb0 	b.w	41d176 <basic_init+0xe6e>
  41da16:	2000      	movs	r0, #0
  41da18:	4b08      	ldr	r3, [pc, #32]	; (41da3c <basic_init+0x1734>)
  41da1a:	4798      	blx	r3
  41da1c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41da20:	0080      	lsls	r0, r0, #2
  41da22:	3050      	adds	r0, #80	; 0x50
  41da24:	4b06      	ldr	r3, [pc, #24]	; (41da40 <basic_init+0x1738>)
  41da26:	fb83 2300 	smull	r2, r3, r3, r0
  41da2a:	17c4      	asrs	r4, r0, #31
  41da2c:	ebc4 14a3 	rsb	r4, r4, r3, asr #6
  41da30:	b224      	sxth	r4, r4
  41da32:	f7ff bba0 	b.w	41d176 <basic_init+0xe6e>
  41da36:	bf00      	nop
  41da38:	20414838 	.word	0x20414838
  41da3c:	00414dfd 	.word	0x00414dfd
  41da40:	66666667 	.word	0x66666667

0041da44 <lv_theme_material_init>:
{
  41da44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  41da48:	4680      	mov	r8, r0
  41da4a:	460f      	mov	r7, r1
  41da4c:	4615      	mov	r5, r2
  41da4e:	461e      	mov	r6, r3
    if(!inited) {
  41da50:	4b27      	ldr	r3, [pc, #156]	; (41daf0 <lv_theme_material_init+0xac>)
  41da52:	781b      	ldrb	r3, [r3, #0]
  41da54:	2b00      	cmp	r3, #0
  41da56:	d043      	beq.n	41dae0 <lv_theme_material_init+0x9c>
    theme.color_primary = color_primary;
  41da58:	4c26      	ldr	r4, [pc, #152]	; (41daf4 <lv_theme_material_init+0xb0>)
  41da5a:	f8a4 800c 	strh.w	r8, [r4, #12]
    theme.color_secondary = color_secondary;
  41da5e:	81e7      	strh	r7, [r4, #14]
    theme.font_small = font_small;
  41da60:	6126      	str	r6, [r4, #16]
    theme.font_normal = font_normal;
  41da62:	9b06      	ldr	r3, [sp, #24]
  41da64:	6163      	str	r3, [r4, #20]
    theme.font_subtitle = font_subtitle;
  41da66:	9b07      	ldr	r3, [sp, #28]
  41da68:	61a3      	str	r3, [r4, #24]
    theme.font_title = font_title;
  41da6a:	9b08      	ldr	r3, [sp, #32]
  41da6c:	61e3      	str	r3, [r4, #28]
    theme.flags = flags;
  41da6e:	6225      	str	r5, [r4, #32]
    basic_init();
  41da70:	4b21      	ldr	r3, [pc, #132]	; (41daf8 <lv_theme_material_init+0xb4>)
  41da72:	4798      	blx	r3
    bar_init();
  41da74:	4b21      	ldr	r3, [pc, #132]	; (41dafc <lv_theme_material_init+0xb8>)
  41da76:	4798      	blx	r3
    led_init();
  41da78:	4b21      	ldr	r3, [pc, #132]	; (41db00 <lv_theme_material_init+0xbc>)
  41da7a:	4798      	blx	r3
    slider_init();
  41da7c:	4b21      	ldr	r3, [pc, #132]	; (41db04 <lv_theme_material_init+0xc0>)
  41da7e:	4798      	blx	r3
    switch_init();
  41da80:	4b21      	ldr	r3, [pc, #132]	; (41db08 <lv_theme_material_init+0xc4>)
  41da82:	4798      	blx	r3
    linemeter_init();
  41da84:	4b21      	ldr	r3, [pc, #132]	; (41db0c <lv_theme_material_init+0xc8>)
  41da86:	4798      	blx	r3
    gauge_init();
  41da88:	4b21      	ldr	r3, [pc, #132]	; (41db10 <lv_theme_material_init+0xcc>)
  41da8a:	4798      	blx	r3
    arc_init();
  41da8c:	4b21      	ldr	r3, [pc, #132]	; (41db14 <lv_theme_material_init+0xd0>)
  41da8e:	4798      	blx	r3
    chart_init();
  41da90:	4b21      	ldr	r3, [pc, #132]	; (41db18 <lv_theme_material_init+0xd4>)
  41da92:	4798      	blx	r3
    calendar_init();
  41da94:	4b21      	ldr	r3, [pc, #132]	; (41db1c <lv_theme_material_init+0xd8>)
  41da96:	4798      	blx	r3
    cpicker_init();
  41da98:	4b21      	ldr	r3, [pc, #132]	; (41db20 <lv_theme_material_init+0xdc>)
  41da9a:	4798      	blx	r3
    checkbox_init();
  41da9c:	4b21      	ldr	r3, [pc, #132]	; (41db24 <lv_theme_material_init+0xe0>)
  41da9e:	4798      	blx	r3
    keyboard_init();
  41daa0:	4b21      	ldr	r3, [pc, #132]	; (41db28 <lv_theme_material_init+0xe4>)
  41daa2:	4798      	blx	r3
    msgbox_init();
  41daa4:	4b21      	ldr	r3, [pc, #132]	; (41db2c <lv_theme_material_init+0xe8>)
  41daa6:	4798      	blx	r3
    page_init();
  41daa8:	4b21      	ldr	r3, [pc, #132]	; (41db30 <lv_theme_material_init+0xec>)
  41daaa:	4798      	blx	r3
    textarea_init();
  41daac:	4b21      	ldr	r3, [pc, #132]	; (41db34 <lv_theme_material_init+0xf0>)
  41daae:	4798      	blx	r3
    spinbox_init();
  41dab0:	4b21      	ldr	r3, [pc, #132]	; (41db38 <lv_theme_material_init+0xf4>)
  41dab2:	4798      	blx	r3
    list_init();
  41dab4:	4b21      	ldr	r3, [pc, #132]	; (41db3c <lv_theme_material_init+0xf8>)
  41dab6:	4798      	blx	r3
    ddlist_init();
  41dab8:	4b21      	ldr	r3, [pc, #132]	; (41db40 <lv_theme_material_init+0xfc>)
  41daba:	4798      	blx	r3
    roller_init();
  41dabc:	4b21      	ldr	r3, [pc, #132]	; (41db44 <lv_theme_material_init+0x100>)
  41dabe:	4798      	blx	r3
    table_init();
  41dac0:	4b21      	ldr	r3, [pc, #132]	; (41db48 <lv_theme_material_init+0x104>)
  41dac2:	4798      	blx	r3
    tabview_win_shared_init();
  41dac4:	4b21      	ldr	r3, [pc, #132]	; (41db4c <lv_theme_material_init+0x108>)
  41dac6:	4798      	blx	r3
    theme.apply_xcb = NULL;
  41dac8:	2000      	movs	r0, #0
  41daca:	6060      	str	r0, [r4, #4]
    theme.apply_cb = theme_apply;
  41dacc:	4b20      	ldr	r3, [pc, #128]	; (41db50 <lv_theme_material_init+0x10c>)
  41dace:	6023      	str	r3, [r4, #0]
    inited = true;
  41dad0:	2201      	movs	r2, #1
  41dad2:	4b07      	ldr	r3, [pc, #28]	; (41daf0 <lv_theme_material_init+0xac>)
  41dad4:	701a      	strb	r2, [r3, #0]
    lv_obj_report_style_mod(NULL);
  41dad6:	4b1f      	ldr	r3, [pc, #124]	; (41db54 <lv_theme_material_init+0x110>)
  41dad8:	4798      	blx	r3
}
  41dada:	4620      	mov	r0, r4
  41dadc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        LV_GC_ROOT(_lv_theme_material_styles) = lv_mem_alloc(sizeof(theme_styles_t));
  41dae0:	20c0      	movs	r0, #192	; 0xc0
  41dae2:	4b1d      	ldr	r3, [pc, #116]	; (41db58 <lv_theme_material_init+0x114>)
  41dae4:	4798      	blx	r3
  41dae6:	4b1d      	ldr	r3, [pc, #116]	; (41db5c <lv_theme_material_init+0x118>)
  41dae8:	6018      	str	r0, [r3, #0]
        styles = (theme_styles_t *)LV_GC_ROOT(_lv_theme_material_styles);
  41daea:	4b1d      	ldr	r3, [pc, #116]	; (41db60 <lv_theme_material_init+0x11c>)
  41daec:	6018      	str	r0, [r3, #0]
  41daee:	e7b3      	b.n	41da58 <lv_theme_material_init+0x14>
  41daf0:	20414830 	.word	0x20414830
  41daf4:	20414838 	.word	0x20414838
  41daf8:	0041c309 	.word	0x0041c309
  41dafc:	00418a91 	.word	0x00418a91
  41db00:	0041c1f5 	.word	0x0041c1f5
  41db04:	00418c75 	.word	0x00418c75
  41db08:	00418f29 	.word	0x00418f29
  41db0c:	0041906d 	.word	0x0041906d
  41db10:	004192b5 	.word	0x004192b5
  41db14:	004197c5 	.word	0x004197c5
  41db18:	00419931 	.word	0x00419931
  41db1c:	00419bb9 	.word	0x00419bb9
  41db20:	0041a351 	.word	0x0041a351
  41db24:	0041a5e1 	.word	0x0041a5e1
  41db28:	0041a909 	.word	0x0041a909
  41db2c:	0041ab01 	.word	0x0041ab01
  41db30:	0041aba5 	.word	0x0041aba5
  41db34:	0041ad31 	.word	0x0041ad31
  41db38:	0041ae79 	.word	0x0041ae79
  41db3c:	0041af55 	.word	0x0041af55
  41db40:	0041b779 	.word	0x0041b779
  41db44:	0041b8bd 	.word	0x0041b8bd
  41db48:	0041b969 	.word	0x0041b969
  41db4c:	0041bc01 	.word	0x0041bc01
  41db50:	00418449 	.word	0x00418449
  41db54:	00407ba1 	.word	0x00407ba1
  41db58:	004166d9 	.word	0x004166d9
  41db5c:	2043a340 	.word	0x2043a340
  41db60:	20414834 	.word	0x20414834

0041db64 <lv_btn_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return an element of `lv_design_res_t`
 */
static lv_design_res_t lv_btn_design(lv_obj_t * btn, const lv_area_t * clip_area, lv_design_mode_t mode)
{
  41db64:	b508      	push	{r3, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
  41db66:	2a02      	cmp	r2, #2
  41db68:	d004      	beq.n	41db74 <lv_btn_design+0x10>
        return ancestor_design(btn, clip_area, mode);
    }
    else if(mode == LV_DESIGN_DRAW_MAIN) {
  41db6a:	b13a      	cbz	r2, 41db7c <lv_btn_design+0x18>
        ancestor_design(btn, clip_area, mode);
    }
    else if(mode == LV_DESIGN_DRAW_POST) {
  41db6c:	2a01      	cmp	r2, #1
  41db6e:	d00a      	beq.n	41db86 <lv_btn_design+0x22>
        ancestor_design(btn, clip_area, mode);
    }

    return LV_DESIGN_RES_OK;
  41db70:	2000      	movs	r0, #0
}
  41db72:	bd08      	pop	{r3, pc}
        return ancestor_design(btn, clip_area, mode);
  41db74:	4b06      	ldr	r3, [pc, #24]	; (41db90 <lv_btn_design+0x2c>)
  41db76:	681b      	ldr	r3, [r3, #0]
  41db78:	4798      	blx	r3
  41db7a:	bd08      	pop	{r3, pc}
        ancestor_design(btn, clip_area, mode);
  41db7c:	4b04      	ldr	r3, [pc, #16]	; (41db90 <lv_btn_design+0x2c>)
  41db7e:	681b      	ldr	r3, [r3, #0]
  41db80:	4798      	blx	r3
    return LV_DESIGN_RES_OK;
  41db82:	2000      	movs	r0, #0
  41db84:	bd08      	pop	{r3, pc}
        ancestor_design(btn, clip_area, mode);
  41db86:	4b02      	ldr	r3, [pc, #8]	; (41db90 <lv_btn_design+0x2c>)
  41db88:	681b      	ldr	r3, [r3, #0]
  41db8a:	4798      	blx	r3
    return LV_DESIGN_RES_OK;
  41db8c:	2000      	movs	r0, #0
  41db8e:	bd08      	pop	{r3, pc}
  41db90:	20414860 	.word	0x20414860

0041db94 <lv_btn_create>:
{
  41db94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41db96:	4607      	mov	r7, r0
  41db98:	460e      	mov	r6, r1
    btn = lv_cont_create(par, copy);
  41db9a:	4b31      	ldr	r3, [pc, #196]	; (41dc60 <lv_btn_create+0xcc>)
  41db9c:	4798      	blx	r3
  41db9e:	4604      	mov	r4, r0
    LV_ASSERT_MEM(btn);
  41dba0:	4b30      	ldr	r3, [pc, #192]	; (41dc64 <lv_btn_create+0xd0>)
  41dba2:	4798      	blx	r3
  41dba4:	b1a8      	cbz	r0, 41dbd2 <lv_btn_create+0x3e>
    if(btn == NULL) return NULL;
  41dba6:	2c00      	cmp	r4, #0
  41dba8:	d045      	beq.n	41dc36 <lv_btn_create+0xa2>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(btn);
  41dbaa:	4b2f      	ldr	r3, [pc, #188]	; (41dc68 <lv_btn_create+0xd4>)
  41dbac:	681b      	ldr	r3, [r3, #0]
  41dbae:	b1b3      	cbz	r3, 41dbde <lv_btn_create+0x4a>
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(btn);
  41dbb0:	4b2e      	ldr	r3, [pc, #184]	; (41dc6c <lv_btn_create+0xd8>)
  41dbb2:	681b      	ldr	r3, [r3, #0]
  41dbb4:	b1cb      	cbz	r3, 41dbea <lv_btn_create+0x56>
    lv_btn_ext_t * ext = lv_obj_allocate_ext_attr(btn, sizeof(lv_btn_ext_t));
  41dbb6:	2103      	movs	r1, #3
  41dbb8:	4620      	mov	r0, r4
  41dbba:	4b2d      	ldr	r3, [pc, #180]	; (41dc70 <lv_btn_create+0xdc>)
  41dbbc:	4798      	blx	r3
  41dbbe:	4605      	mov	r5, r0
    LV_ASSERT_MEM(ext);
  41dbc0:	4b28      	ldr	r3, [pc, #160]	; (41dc64 <lv_btn_create+0xd0>)
  41dbc2:	4798      	blx	r3
  41dbc4:	b9b8      	cbnz	r0, 41dbf6 <lv_btn_create+0x62>
  41dbc6:	462a      	mov	r2, r5
  41dbc8:	2300      	movs	r3, #0
  41dbca:	482a      	ldr	r0, [pc, #168]	; (41dc74 <lv_btn_create+0xe0>)
  41dbcc:	492a      	ldr	r1, [pc, #168]	; (41dc78 <lv_btn_create+0xe4>)
  41dbce:	4788      	blx	r1
  41dbd0:	e7fe      	b.n	41dbd0 <lv_btn_create+0x3c>
    LV_ASSERT_MEM(btn);
  41dbd2:	4622      	mov	r2, r4
  41dbd4:	2300      	movs	r3, #0
  41dbd6:	4827      	ldr	r0, [pc, #156]	; (41dc74 <lv_btn_create+0xe0>)
  41dbd8:	4927      	ldr	r1, [pc, #156]	; (41dc78 <lv_btn_create+0xe4>)
  41dbda:	4788      	blx	r1
  41dbdc:	e7fe      	b.n	41dbdc <lv_btn_create+0x48>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(btn);
  41dbde:	4620      	mov	r0, r4
  41dbe0:	4b26      	ldr	r3, [pc, #152]	; (41dc7c <lv_btn_create+0xe8>)
  41dbe2:	4798      	blx	r3
  41dbe4:	4b20      	ldr	r3, [pc, #128]	; (41dc68 <lv_btn_create+0xd4>)
  41dbe6:	6018      	str	r0, [r3, #0]
  41dbe8:	e7e2      	b.n	41dbb0 <lv_btn_create+0x1c>
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(btn);
  41dbea:	4620      	mov	r0, r4
  41dbec:	4b24      	ldr	r3, [pc, #144]	; (41dc80 <lv_btn_create+0xec>)
  41dbee:	4798      	blx	r3
  41dbf0:	4b1e      	ldr	r3, [pc, #120]	; (41dc6c <lv_btn_create+0xd8>)
  41dbf2:	6018      	str	r0, [r3, #0]
  41dbf4:	e7df      	b.n	41dbb6 <lv_btn_create+0x22>
    if(ext == NULL) {
  41dbf6:	b305      	cbz	r5, 41dc3a <lv_btn_create+0xa6>
    ext->checkable = 0;
  41dbf8:	78ab      	ldrb	r3, [r5, #2]
  41dbfa:	f36f 0300 	bfc	r3, #0, #1
  41dbfe:	70ab      	strb	r3, [r5, #2]
    lv_obj_set_signal_cb(btn, lv_btn_signal);
  41dc00:	4920      	ldr	r1, [pc, #128]	; (41dc84 <lv_btn_create+0xf0>)
  41dc02:	4620      	mov	r0, r4
  41dc04:	4b20      	ldr	r3, [pc, #128]	; (41dc88 <lv_btn_create+0xf4>)
  41dc06:	4798      	blx	r3
    lv_obj_set_design_cb(btn, lv_btn_design);
  41dc08:	4920      	ldr	r1, [pc, #128]	; (41dc8c <lv_btn_create+0xf8>)
  41dc0a:	4620      	mov	r0, r4
  41dc0c:	4b20      	ldr	r3, [pc, #128]	; (41dc90 <lv_btn_create+0xfc>)
  41dc0e:	4798      	blx	r3
    if(copy == NULL) {
  41dc10:	b9c6      	cbnz	r6, 41dc44 <lv_btn_create+0xb0>
        if(par) {
  41dc12:	b147      	cbz	r7, 41dc26 <lv_btn_create+0x92>
            lv_obj_set_size(btn, LV_DPI, LV_DPI / 3);
  41dc14:	2231      	movs	r2, #49	; 0x31
  41dc16:	2194      	movs	r1, #148	; 0x94
  41dc18:	4620      	mov	r0, r4
  41dc1a:	4b1e      	ldr	r3, [pc, #120]	; (41dc94 <lv_btn_create+0x100>)
  41dc1c:	4798      	blx	r3
 * @param btn pointer to a button object
 * @param layout a layout from 'lv_cont_layout_t'
 */
static inline void lv_btn_set_layout(lv_obj_t * btn, lv_layout_t layout)
{
    lv_cont_set_layout(btn, layout);
  41dc1e:	2101      	movs	r1, #1
  41dc20:	4620      	mov	r0, r4
  41dc22:	4b1d      	ldr	r3, [pc, #116]	; (41dc98 <lv_btn_create+0x104>)
  41dc24:	4798      	blx	r3
        lv_obj_set_click(btn, true); /*Be sure the button is clickable*/
  41dc26:	2101      	movs	r1, #1
  41dc28:	4620      	mov	r0, r4
  41dc2a:	4b1c      	ldr	r3, [pc, #112]	; (41dc9c <lv_btn_create+0x108>)
  41dc2c:	4798      	blx	r3
        lv_theme_apply(btn, LV_THEME_BTN);
  41dc2e:	2105      	movs	r1, #5
  41dc30:	4620      	mov	r0, r4
  41dc32:	4b1b      	ldr	r3, [pc, #108]	; (41dca0 <lv_btn_create+0x10c>)
  41dc34:	4798      	blx	r3
}
  41dc36:	4620      	mov	r0, r4
  41dc38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_obj_del(btn);
  41dc3a:	4620      	mov	r0, r4
  41dc3c:	4b19      	ldr	r3, [pc, #100]	; (41dca4 <lv_btn_create+0x110>)
  41dc3e:	4798      	blx	r3
        return NULL;
  41dc40:	2400      	movs	r4, #0
  41dc42:	e7f8      	b.n	41dc36 <lv_btn_create+0xa2>
        lv_btn_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
  41dc44:	4630      	mov	r0, r6
  41dc46:	4b18      	ldr	r3, [pc, #96]	; (41dca8 <lv_btn_create+0x114>)
  41dc48:	4798      	blx	r3
        ext->checkable             = copy_ext->checkable;
  41dc4a:	7882      	ldrb	r2, [r0, #2]
  41dc4c:	78ab      	ldrb	r3, [r5, #2]
  41dc4e:	f362 0300 	bfi	r3, r2, #0, #1
  41dc52:	70ab      	strb	r3, [r5, #2]
        lv_obj_refresh_style(btn, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
  41dc54:	22ff      	movs	r2, #255	; 0xff
  41dc56:	4611      	mov	r1, r2
  41dc58:	4620      	mov	r0, r4
  41dc5a:	4b14      	ldr	r3, [pc, #80]	; (41dcac <lv_btn_create+0x118>)
  41dc5c:	4798      	blx	r3
  41dc5e:	e7ea      	b.n	41dc36 <lv_btn_create+0xa2>
  41dc60:	004215e9 	.word	0x004215e9
  41dc64:	00415f95 	.word	0x00415f95
  41dc68:	20414864 	.word	0x20414864
  41dc6c:	20414860 	.word	0x20414860
  41dc70:	00405981 	.word	0x00405981
  41dc74:	0042c714 	.word	0x0042c714
  41dc78:	00415fa1 	.word	0x00415fa1
  41dc7c:	004080c5 	.word	0x004080c5
  41dc80:	004080ed 	.word	0x004080ed
  41dc84:	0041dd85 	.word	0x0041dd85
  41dc88:	0040591d 	.word	0x0040591d
  41dc8c:	0041db65 	.word	0x0041db65
  41dc90:	00405959 	.word	0x00405959
  41dc94:	00406c79 	.word	0x00406c79
  41dc98:	00421719 	.word	0x00421719
  41dc9c:	00405751 	.word	0x00405751
  41dca0:	00418419 	.word	0x00418419
  41dca4:	00408275 	.word	0x00408275
  41dca8:	00408115 	.word	0x00408115
  41dcac:	004078a1 	.word	0x004078a1

0041dcb0 <lv_btn_set_state>:
{
  41dcb0:	b538      	push	{r3, r4, r5, lr}
  41dcb2:	4604      	mov	r4, r0
  41dcb4:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(btn, LV_OBJX_NAME);
  41dcb6:	4b21      	ldr	r3, [pc, #132]	; (41dd3c <lv_btn_set_state+0x8c>)
  41dcb8:	4798      	blx	r3
  41dcba:	b130      	cbz	r0, 41dcca <lv_btn_set_state+0x1a>
    switch(state) {
  41dcbc:	2d05      	cmp	r5, #5
  41dcbe:	d83b      	bhi.n	41dd38 <lv_btn_set_state+0x88>
  41dcc0:	e8df f005 	tbb	[pc, r5]
  41dcc4:	17290e09 	.word	0x17290e09
  41dcc8:	3220      	.short	0x3220
    LV_ASSERT_OBJ(btn, LV_OBJX_NAME);
  41dcca:	4622      	mov	r2, r4
  41dccc:	2300      	movs	r3, #0
  41dcce:	481c      	ldr	r0, [pc, #112]	; (41dd40 <lv_btn_set_state+0x90>)
  41dcd0:	491c      	ldr	r1, [pc, #112]	; (41dd44 <lv_btn_set_state+0x94>)
  41dcd2:	4788      	blx	r1
  41dcd4:	e7fe      	b.n	41dcd4 <lv_btn_set_state+0x24>
            lv_obj_clear_state(btn, LV_STATE_PRESSED | LV_STATE_CHECKED | LV_STATE_DISABLED);
  41dcd6:	2131      	movs	r1, #49	; 0x31
  41dcd8:	4620      	mov	r0, r4
  41dcda:	4b1b      	ldr	r3, [pc, #108]	; (41dd48 <lv_btn_set_state+0x98>)
  41dcdc:	4798      	blx	r3
            break;
  41dcde:	bd38      	pop	{r3, r4, r5, pc}
            lv_obj_clear_state(btn, LV_STATE_CHECKED | LV_STATE_DISABLED);
  41dce0:	2121      	movs	r1, #33	; 0x21
  41dce2:	4620      	mov	r0, r4
  41dce4:	4b18      	ldr	r3, [pc, #96]	; (41dd48 <lv_btn_set_state+0x98>)
  41dce6:	4798      	blx	r3
            lv_obj_add_state(btn, LV_STATE_PRESSED);
  41dce8:	2110      	movs	r1, #16
  41dcea:	4620      	mov	r0, r4
  41dcec:	4b17      	ldr	r3, [pc, #92]	; (41dd4c <lv_btn_set_state+0x9c>)
  41dcee:	4798      	blx	r3
            break;
  41dcf0:	bd38      	pop	{r3, r4, r5, pc}
            lv_obj_add_state(btn, LV_STATE_CHECKED);
  41dcf2:	2101      	movs	r1, #1
  41dcf4:	4620      	mov	r0, r4
  41dcf6:	4b15      	ldr	r3, [pc, #84]	; (41dd4c <lv_btn_set_state+0x9c>)
  41dcf8:	4798      	blx	r3
            lv_obj_clear_state(btn, LV_STATE_PRESSED | LV_STATE_DISABLED);
  41dcfa:	2130      	movs	r1, #48	; 0x30
  41dcfc:	4620      	mov	r0, r4
  41dcfe:	4b12      	ldr	r3, [pc, #72]	; (41dd48 <lv_btn_set_state+0x98>)
  41dd00:	4798      	blx	r3
            break;
  41dd02:	bd38      	pop	{r3, r4, r5, pc}
            lv_obj_add_state(btn, LV_STATE_PRESSED | LV_STATE_CHECKED);
  41dd04:	2111      	movs	r1, #17
  41dd06:	4620      	mov	r0, r4
  41dd08:	4b10      	ldr	r3, [pc, #64]	; (41dd4c <lv_btn_set_state+0x9c>)
  41dd0a:	4798      	blx	r3
            lv_obj_clear_state(btn, LV_STATE_DISABLED);
  41dd0c:	2120      	movs	r1, #32
  41dd0e:	4620      	mov	r0, r4
  41dd10:	4b0d      	ldr	r3, [pc, #52]	; (41dd48 <lv_btn_set_state+0x98>)
  41dd12:	4798      	blx	r3
            break;
  41dd14:	bd38      	pop	{r3, r4, r5, pc}
            lv_obj_clear_state(btn, LV_STATE_PRESSED | LV_STATE_CHECKED);
  41dd16:	2111      	movs	r1, #17
  41dd18:	4620      	mov	r0, r4
  41dd1a:	4b0b      	ldr	r3, [pc, #44]	; (41dd48 <lv_btn_set_state+0x98>)
  41dd1c:	4798      	blx	r3
            lv_obj_add_state(btn, LV_STATE_DISABLED);
  41dd1e:	2120      	movs	r1, #32
  41dd20:	4620      	mov	r0, r4
  41dd22:	4b0a      	ldr	r3, [pc, #40]	; (41dd4c <lv_btn_set_state+0x9c>)
  41dd24:	4798      	blx	r3
            break;
  41dd26:	bd38      	pop	{r3, r4, r5, pc}
            lv_obj_clear_state(btn, LV_STATE_PRESSED);
  41dd28:	2110      	movs	r1, #16
  41dd2a:	4620      	mov	r0, r4
  41dd2c:	4b06      	ldr	r3, [pc, #24]	; (41dd48 <lv_btn_set_state+0x98>)
  41dd2e:	4798      	blx	r3
            lv_obj_add_state(btn, LV_STATE_DISABLED | LV_STATE_CHECKED);
  41dd30:	2121      	movs	r1, #33	; 0x21
  41dd32:	4620      	mov	r0, r4
  41dd34:	4b05      	ldr	r3, [pc, #20]	; (41dd4c <lv_btn_set_state+0x9c>)
  41dd36:	4798      	blx	r3
  41dd38:	bd38      	pop	{r3, r4, r5, pc}
  41dd3a:	bf00      	nop
  41dd3c:	00415f95 	.word	0x00415f95
  41dd40:	0042c728 	.word	0x0042c728
  41dd44:	00415fa1 	.word	0x00415fa1
  41dd48:	0040909d 	.word	0x0040909d
  41dd4c:	00409061 	.word	0x00409061

0041dd50 <lv_btn_get_checkable>:
{
  41dd50:	b510      	push	{r4, lr}
  41dd52:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(btn, LV_OBJX_NAME);
  41dd54:	4b07      	ldr	r3, [pc, #28]	; (41dd74 <lv_btn_get_checkable+0x24>)
  41dd56:	4798      	blx	r3
  41dd58:	b928      	cbnz	r0, 41dd66 <lv_btn_get_checkable+0x16>
  41dd5a:	4622      	mov	r2, r4
  41dd5c:	2300      	movs	r3, #0
  41dd5e:	4806      	ldr	r0, [pc, #24]	; (41dd78 <lv_btn_get_checkable+0x28>)
  41dd60:	4906      	ldr	r1, [pc, #24]	; (41dd7c <lv_btn_get_checkable+0x2c>)
  41dd62:	4788      	blx	r1
  41dd64:	e7fe      	b.n	41dd64 <lv_btn_get_checkable+0x14>
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
  41dd66:	4620      	mov	r0, r4
  41dd68:	4b05      	ldr	r3, [pc, #20]	; (41dd80 <lv_btn_get_checkable+0x30>)
  41dd6a:	4798      	blx	r3
    return ext->checkable != 0 ? true : false;
  41dd6c:	7880      	ldrb	r0, [r0, #2]
}
  41dd6e:	f000 0001 	and.w	r0, r0, #1
  41dd72:	bd10      	pop	{r4, pc}
  41dd74:	00415f95 	.word	0x00415f95
  41dd78:	0042c728 	.word	0x0042c728
  41dd7c:	00415fa1 	.word	0x00415fa1
  41dd80:	00408115 	.word	0x00408115

0041dd84 <lv_btn_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_btn_signal(lv_obj_t * btn, lv_signal_t sign, void * param)
{
  41dd84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  41dd88:	b082      	sub	sp, #8
  41dd8a:	4606      	mov	r6, r0
  41dd8c:	460d      	mov	r5, r1
  41dd8e:	4617      	mov	r7, r2
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(btn, sign, param);
  41dd90:	4b36      	ldr	r3, [pc, #216]	; (41de6c <lv_btn_signal+0xe8>)
  41dd92:	681b      	ldr	r3, [r3, #0]
  41dd94:	4798      	blx	r3
  41dd96:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
  41dd98:	2801      	cmp	r0, #1
  41dd9a:	d003      	beq.n	41dda4 <lv_btn_signal+0x20>
        }
#endif
    }

    return res;
}
  41dd9c:	4620      	mov	r0, r4
  41dd9e:	b002      	add	sp, #8
  41dda0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  41dda4:	2d07      	cmp	r5, #7
  41dda6:	d023      	beq.n	41ddf0 <lv_btn_signal+0x6c>
    bool tgl           = lv_btn_get_checkable(btn);
  41dda8:	4630      	mov	r0, r6
  41ddaa:	4b31      	ldr	r3, [pc, #196]	; (41de70 <lv_btn_signal+0xec>)
  41ddac:	4798      	blx	r3
  41ddae:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_RELEASED) {
  41ddb0:	2d0e      	cmp	r5, #14
  41ddb2:	d023      	beq.n	41ddfc <lv_btn_signal+0x78>
    else if(sign == LV_SIGNAL_CONTROL) {
  41ddb4:	2d18      	cmp	r5, #24
  41ddb6:	d1f1      	bne.n	41dd9c <lv_btn_signal+0x18>
        char c = *((char *)param);
  41ddb8:	783b      	ldrb	r3, [r7, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
  41ddba:	2b11      	cmp	r3, #17
  41ddbc:	bf18      	it	ne
  41ddbe:	2b13      	cmpne	r3, #19
  41ddc0:	d040      	beq.n	41de44 <lv_btn_signal+0xc0>
        else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
  41ddc2:	2b12      	cmp	r3, #18
  41ddc4:	bf18      	it	ne
  41ddc6:	2b14      	cmpne	r3, #20
  41ddc8:	d1e8      	bne.n	41dd9c <lv_btn_signal+0x18>
            if(lv_btn_get_checkable(btn)) {
  41ddca:	4630      	mov	r0, r6
  41ddcc:	4b28      	ldr	r3, [pc, #160]	; (41de70 <lv_btn_signal+0xec>)
  41ddce:	4798      	blx	r3
  41ddd0:	2800      	cmp	r0, #0
  41ddd2:	d0e3      	beq.n	41dd9c <lv_btn_signal+0x18>
                lv_btn_set_state(btn, LV_BTN_STATE_RELEASED);
  41ddd4:	2100      	movs	r1, #0
  41ddd6:	4630      	mov	r0, r6
  41ddd8:	4b26      	ldr	r3, [pc, #152]	; (41de74 <lv_btn_signal+0xf0>)
  41ddda:	4798      	blx	r3
                uint32_t state = 0;
  41dddc:	aa02      	add	r2, sp, #8
  41ddde:	2300      	movs	r3, #0
  41dde0:	f842 3d04 	str.w	r3, [r2, #-4]!
                res            = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &state);
  41dde4:	2110      	movs	r1, #16
  41dde6:	4630      	mov	r0, r6
  41dde8:	4b23      	ldr	r3, [pc, #140]	; (41de78 <lv_btn_signal+0xf4>)
  41ddea:	4798      	blx	r3
  41ddec:	4604      	mov	r4, r0
  41ddee:	e7d5      	b.n	41dd9c <lv_btn_signal+0x18>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  41ddf0:	4922      	ldr	r1, [pc, #136]	; (41de7c <lv_btn_signal+0xf8>)
  41ddf2:	4638      	mov	r0, r7
  41ddf4:	4b22      	ldr	r3, [pc, #136]	; (41de80 <lv_btn_signal+0xfc>)
  41ddf6:	4798      	blx	r3
  41ddf8:	4604      	mov	r4, r0
  41ddfa:	e7cf      	b.n	41dd9c <lv_btn_signal+0x18>
        if(lv_indev_is_dragging(param) == false && tgl) {
  41ddfc:	4638      	mov	r0, r7
  41ddfe:	4b21      	ldr	r3, [pc, #132]	; (41de84 <lv_btn_signal+0x100>)
  41de00:	4798      	blx	r3
  41de02:	2800      	cmp	r0, #0
  41de04:	d1ca      	bne.n	41dd9c <lv_btn_signal+0x18>
  41de06:	f1b8 0f00 	cmp.w	r8, #0
  41de0a:	d0c7      	beq.n	41dd9c <lv_btn_signal+0x18>
            uint32_t toggled = 0;
  41de0c:	2100      	movs	r1, #0
  41de0e:	9101      	str	r1, [sp, #4]
            if(lv_obj_get_state(btn, LV_BTN_PART_MAIN) & LV_STATE_CHECKED) {
  41de10:	4630      	mov	r0, r6
  41de12:	4b1d      	ldr	r3, [pc, #116]	; (41de88 <lv_btn_signal+0x104>)
  41de14:	4798      	blx	r3
  41de16:	f010 0f01 	tst.w	r0, #1
  41de1a:	d00c      	beq.n	41de36 <lv_btn_signal+0xb2>
                lv_btn_set_state(btn, LV_BTN_STATE_RELEASED);
  41de1c:	2100      	movs	r1, #0
  41de1e:	4630      	mov	r0, r6
  41de20:	4b14      	ldr	r3, [pc, #80]	; (41de74 <lv_btn_signal+0xf0>)
  41de22:	4798      	blx	r3
                toggled = 0;
  41de24:	2300      	movs	r3, #0
  41de26:	9301      	str	r3, [sp, #4]
            res = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &toggled);
  41de28:	aa01      	add	r2, sp, #4
  41de2a:	2110      	movs	r1, #16
  41de2c:	4630      	mov	r0, r6
  41de2e:	4b12      	ldr	r3, [pc, #72]	; (41de78 <lv_btn_signal+0xf4>)
  41de30:	4798      	blx	r3
  41de32:	4604      	mov	r4, r0
  41de34:	e7b2      	b.n	41dd9c <lv_btn_signal+0x18>
                lv_btn_set_state(btn, LV_BTN_STATE_CHECKED_RELEASED);
  41de36:	2103      	movs	r1, #3
  41de38:	4630      	mov	r0, r6
  41de3a:	4b0e      	ldr	r3, [pc, #56]	; (41de74 <lv_btn_signal+0xf0>)
  41de3c:	4798      	blx	r3
                toggled = 1;
  41de3e:	2301      	movs	r3, #1
  41de40:	9301      	str	r3, [sp, #4]
  41de42:	e7f1      	b.n	41de28 <lv_btn_signal+0xa4>
            if(lv_btn_get_checkable(btn)) {
  41de44:	4630      	mov	r0, r6
  41de46:	4b0a      	ldr	r3, [pc, #40]	; (41de70 <lv_btn_signal+0xec>)
  41de48:	4798      	blx	r3
  41de4a:	2800      	cmp	r0, #0
  41de4c:	d0a6      	beq.n	41dd9c <lv_btn_signal+0x18>
                lv_btn_set_state(btn, LV_BTN_STATE_CHECKED_RELEASED);
  41de4e:	2103      	movs	r1, #3
  41de50:	4630      	mov	r0, r6
  41de52:	4b08      	ldr	r3, [pc, #32]	; (41de74 <lv_btn_signal+0xf0>)
  41de54:	4798      	blx	r3
                uint32_t state = 1;
  41de56:	aa02      	add	r2, sp, #8
  41de58:	2301      	movs	r3, #1
  41de5a:	f842 3d04 	str.w	r3, [r2, #-4]!
                res            = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &state);
  41de5e:	2110      	movs	r1, #16
  41de60:	4630      	mov	r0, r6
  41de62:	4b05      	ldr	r3, [pc, #20]	; (41de78 <lv_btn_signal+0xf4>)
  41de64:	4798      	blx	r3
  41de66:	4604      	mov	r4, r0
  41de68:	e798      	b.n	41dd9c <lv_btn_signal+0x18>
  41de6a:	bf00      	nop
  41de6c:	20414864 	.word	0x20414864
  41de70:	0041dd51 	.word	0x0041dd51
  41de74:	0041dcb1 	.word	0x0041dcb1
  41de78:	004058d1 	.word	0x004058d1
  41de7c:	0042fe3c 	.word	0x0042fe3c
  41de80:	004083d1 	.word	0x004083d1
  41de84:	00404d41 	.word	0x00404d41
  41de88:	00406e21 	.word	0x00406e21

0041de8c <get_button_width>:
 * @return the width of the button in units
 */
static uint8_t get_button_width(lv_btnmatrix_ctrl_t ctrl_bits)
{
    uint8_t w = ctrl_bits & LV_BTNMATRIX_WIDTH_MASK;
    return w != 0 ? w : 1;
  41de8c:	f010 0007 	ands.w	r0, r0, #7
  41de90:	d100      	bne.n	41de94 <get_button_width+0x8>
  41de92:	2001      	movs	r0, #1
}
  41de94:	4770      	bx	lr

0041de96 <button_is_hidden>:

static bool button_is_hidden(lv_btnmatrix_ctrl_t ctrl_bits)
{
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
}
  41de96:	f3c0 00c0 	ubfx	r0, r0, #3, #1
  41de9a:	4770      	bx	lr

0041de9c <button_is_repeat_disabled>:

static bool button_is_repeat_disabled(lv_btnmatrix_ctrl_t ctrl_bits)
{
    return (ctrl_bits & LV_BTNMATRIX_CTRL_NO_REPEAT) ? true : false;
}
  41de9c:	f3c0 1000 	ubfx	r0, r0, #4, #1
  41dea0:	4770      	bx	lr

0041dea2 <button_is_inactive>:

static bool button_is_inactive(lv_btnmatrix_ctrl_t ctrl_bits)
{
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
}
  41dea2:	f3c0 1040 	ubfx	r0, r0, #5, #1
  41dea6:	4770      	bx	lr

0041dea8 <button_is_click_trig>:

static bool button_is_click_trig(lv_btnmatrix_ctrl_t ctrl_bits)
{
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CLICK_TRIG) ? true : false;
}
  41dea8:	f3c0 2000 	ubfx	r0, r0, #8, #1
  41deac:	4770      	bx	lr

0041deae <button_is_tgl_enabled>:

static bool button_is_tgl_enabled(lv_btnmatrix_ctrl_t ctrl_bits)
{
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CHECKABLE) ? true : false;
}
  41deae:	f3c0 1080 	ubfx	r0, r0, #6, #1
  41deb2:	4770      	bx	lr

0041deb4 <button_get_tgl_state>:

static bool button_get_tgl_state(lv_btnmatrix_ctrl_t ctrl_bits)
{
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CHECK_STATE) ? true : false;
}
  41deb4:	f3c0 10c0 	ubfx	r0, r0, #7, #1
  41deb8:	4770      	bx	lr
	...

0041debc <lv_btnmatrix_get_style>:
{
  41debc:	b538      	push	{r3, r4, r5, lr}
  41debe:	4604      	mov	r4, r0
  41dec0:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
  41dec2:	4b0b      	ldr	r3, [pc, #44]	; (41def0 <lv_btnmatrix_get_style+0x34>)
  41dec4:	4798      	blx	r3
  41dec6:	b928      	cbnz	r0, 41ded4 <lv_btnmatrix_get_style+0x18>
  41dec8:	4622      	mov	r2, r4
  41deca:	2300      	movs	r3, #0
  41decc:	4809      	ldr	r0, [pc, #36]	; (41def4 <lv_btnmatrix_get_style+0x38>)
  41dece:	490a      	ldr	r1, [pc, #40]	; (41def8 <lv_btnmatrix_get_style+0x3c>)
  41ded0:	4788      	blx	r1
  41ded2:	e7fe      	b.n	41ded2 <lv_btnmatrix_get_style+0x16>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41ded4:	4620      	mov	r0, r4
  41ded6:	4b09      	ldr	r3, [pc, #36]	; (41defc <lv_btnmatrix_get_style+0x40>)
  41ded8:	4798      	blx	r3
    switch(part) {
  41deda:	b11d      	cbz	r5, 41dee4 <lv_btnmatrix_get_style+0x28>
  41dedc:	2d01      	cmp	r5, #1
  41dede:	d004      	beq.n	41deea <lv_btnmatrix_get_style+0x2e>
            style_dsc_p = NULL;
  41dee0:	2000      	movs	r0, #0
}
  41dee2:	bd38      	pop	{r3, r4, r5, pc}
            style_dsc_p = &btnm->style_list;
  41dee4:	f104 0028 	add.w	r0, r4, #40	; 0x28
            break;
  41dee8:	bd38      	pop	{r3, r4, r5, pc}
            style_dsc_p = &ext->style_btn;
  41deea:	300c      	adds	r0, #12
            break;
  41deec:	bd38      	pop	{r3, r4, r5, pc}
  41deee:	bf00      	nop
  41def0:	00415f95 	.word	0x00415f95
  41def4:	0042c728 	.word	0x0042c728
  41def8:	00415fa1 	.word	0x00415fa1
  41defc:	00408115 	.word	0x00408115

0041df00 <get_button_from_point>:
 * @param btnm pointer to a button matrix object
 * @param p a point with absolute coordinates
 * @return the id of the button or LV_BTNMATRIX_BTN_NONE.
 */
static uint16_t get_button_from_point(lv_obj_t * btnm, lv_point_t * p)
{
  41df00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41df04:	b087      	sub	sp, #28
  41df06:	4604      	mov	r4, r0
  41df08:	9101      	str	r1, [sp, #4]
    lv_area_t btnm_cords;
    lv_area_t btn_area;
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41df0a:	4b69      	ldr	r3, [pc, #420]	; (41e0b0 <get_button_from_point+0x1b0>)
  41df0c:	4798      	blx	r3
  41df0e:	4606      	mov	r6, r0
    uint16_t i;
    lv_obj_get_coords(btnm, &btnm_cords);
  41df10:	a904      	add	r1, sp, #16
  41df12:	4620      	mov	r0, r4
  41df14:	4b67      	ldr	r3, [pc, #412]	; (41e0b4 <get_button_from_point+0x1b4>)
  41df16:	4798      	blx	r3

    lv_coord_t w = lv_obj_get_width(btnm);
  41df18:	4620      	mov	r0, r4
  41df1a:	4b67      	ldr	r3, [pc, #412]	; (41e0b8 <get_button_from_point+0x1b8>)
  41df1c:	4798      	blx	r3
  41df1e:	9000      	str	r0, [sp, #0]
    lv_coord_t h = lv_obj_get_height(btnm);
  41df20:	4620      	mov	r0, r4
  41df22:	4b66      	ldr	r3, [pc, #408]	; (41e0bc <get_button_from_point+0x1bc>)
  41df24:	4798      	blx	r3
  41df26:	4683      	mov	fp, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41df28:	2212      	movs	r2, #18
  41df2a:	2100      	movs	r1, #0
  41df2c:	4620      	mov	r0, r4
  41df2e:	4d64      	ldr	r5, [pc, #400]	; (41e0c0 <get_button_from_point+0x1c0>)
  41df30:	47a8      	blx	r5
  41df32:	4682      	mov	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41df34:	2213      	movs	r2, #19
  41df36:	2100      	movs	r1, #0
  41df38:	4620      	mov	r0, r4
  41df3a:	47a8      	blx	r5
  41df3c:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41df3e:	2210      	movs	r2, #16
  41df40:	2100      	movs	r1, #0
  41df42:	4620      	mov	r0, r4
  41df44:	47a8      	blx	r5
  41df46:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41df48:	2211      	movs	r2, #17
  41df4a:	2100      	movs	r1, #0
  41df4c:	4620      	mov	r0, r4
  41df4e:	47a8      	blx	r5
  41df50:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41df52:	2214      	movs	r2, #20
  41df54:	2100      	movs	r1, #0
  41df56:	4620      	mov	r0, r4
  41df58:	47a8      	blx	r5
    lv_style_int_t ptop = lv_obj_get_style_pad_top(btnm, LV_BTNMATRIX_PART_BG);
    lv_style_int_t pbottom = lv_obj_get_style_pad_bottom(btnm, LV_BTNMATRIX_PART_BG);
    lv_style_int_t pinner = lv_obj_get_style_pad_inner(btnm, LV_BTNMATRIX_PART_BG);

    /*Get the half inner padding. Button look larger with this value. (+1 for rounding error)*/
    pinner = (pinner / 2) + 1 + (pinner & 1);
  41df5a:	f000 0501 	and.w	r5, r0, #1
  41df5e:	4603      	mov	r3, r0
  41df60:	2800      	cmp	r0, #0
  41df62:	db1a      	blt.n	41df9a <get_button_from_point+0x9a>
  41df64:	eb05 0563 	add.w	r5, r5, r3, asr #1
  41df68:	3501      	adds	r5, #1
  41df6a:	b22d      	sxth	r5, r5

    pinner = LV_MATH_MIN(pinner, BTN_EXTRA_CLICK_AREA_MAX);
  41df6c:	2d25      	cmp	r5, #37	; 0x25
  41df6e:	bfa8      	it	ge
  41df70:	2525      	movge	r5, #37	; 0x25
    pright = LV_MATH_MIN(pright, BTN_EXTRA_CLICK_AREA_MAX);
  41df72:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
  41df76:	bfa8      	it	ge
  41df78:	f04f 0925 	movge.w	r9, #37	; 0x25
  41df7c:	fa0f f989 	sxth.w	r9, r9
    ptop = LV_MATH_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
  41df80:	f1b8 0f25 	cmp.w	r8, #37	; 0x25
  41df84:	bfa8      	it	ge
  41df86:	f04f 0825 	movge.w	r8, #37	; 0x25
  41df8a:	fa0f f888 	sxth.w	r8, r8
    pbottom = LV_MATH_MIN(pbottom, BTN_EXTRA_CLICK_AREA_MAX);
  41df8e:	2f25      	cmp	r7, #37	; 0x25
  41df90:	bfa8      	it	ge
  41df92:	2725      	movge	r7, #37	; 0x25
  41df94:	b23f      	sxth	r7, r7

    for(i = 0; i < ext->btn_cnt; i++) {
  41df96:	2400      	movs	r4, #0
  41df98:	e057      	b.n	41e04a <get_button_from_point+0x14a>
    pinner = (pinner / 2) + 1 + (pinner & 1);
  41df9a:	1c43      	adds	r3, r0, #1
  41df9c:	e7e2      	b.n	41df64 <get_button_from_point+0x64>
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
  41df9e:	f812 0b01 	ldrb.w	r0, [r2], #1
  41dfa2:	f801 0b01 	strb.w	r0, [r1], #1
        d8++;
        s8++;
        len--;
  41dfa6:	3b01      	subs	r3, #1
    while(len) {
  41dfa8:	2b00      	cmp	r3, #0
  41dfaa:	d1f8      	bne.n	41df9e <get_button_from_point+0x9e>
        lv_area_copy(&btn_area, &ext->button_areas[i]);
        if(btn_area.x1 <= pleft) btn_area.x1 += btnm_cords.x1 - LV_MATH_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
  41dfac:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
  41dfb0:	4553      	cmp	r3, sl
  41dfb2:	dc53      	bgt.n	41e05c <get_button_from_point+0x15c>
  41dfb4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  41dfb8:	4651      	mov	r1, sl
  41dfba:	2925      	cmp	r1, #37	; 0x25
  41dfbc:	bfa8      	it	ge
  41dfbe:	2125      	movge	r1, #37	; 0x25
  41dfc0:	b289      	uxth	r1, r1
  41dfc2:	1a52      	subs	r2, r2, r1
  41dfc4:	fa13 f382 	uxtah	r3, r3, r2
  41dfc8:	f8ad 3008 	strh.w	r3, [sp, #8]
        else btn_area.x1 += btnm_cords.x1 - pinner;

        if(btn_area.y1 <= ptop) btn_area.y1 += btnm_cords.y1 - LV_MATH_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
  41dfcc:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
  41dfd0:	4598      	cmp	r8, r3
  41dfd2:	db4b      	blt.n	41e06c <get_button_from_point+0x16c>
  41dfd4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  41dfd8:	4641      	mov	r1, r8
  41dfda:	2925      	cmp	r1, #37	; 0x25
  41dfdc:	bfa8      	it	ge
  41dfde:	2125      	movge	r1, #37	; 0x25
  41dfe0:	b289      	uxth	r1, r1
  41dfe2:	1a52      	subs	r2, r2, r1
  41dfe4:	fa13 f382 	uxtah	r3, r3, r2
  41dfe8:	f8ad 300a 	strh.w	r3, [sp, #10]
        else btn_area.y1 += btnm_cords.y1 - pinner;

        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += btnm_cords.x1 + LV_MATH_MIN(pright,
  41dfec:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
  41dff0:	9b00      	ldr	r3, [sp, #0]
  41dff2:	eba3 0309 	sub.w	r3, r3, r9
  41dff6:	3b02      	subs	r3, #2
  41dff8:	429a      	cmp	r2, r3
  41dffa:	db3f      	blt.n	41e07c <get_button_from_point+0x17c>
  41dffc:	f8bd 1010 	ldrh.w	r1, [sp, #16]
  41e000:	464b      	mov	r3, r9
  41e002:	2b25      	cmp	r3, #37	; 0x25
  41e004:	bfa8      	it	ge
  41e006:	2325      	movge	r3, #37	; 0x25
  41e008:	fa11 f383 	uxtah	r3, r1, r3
  41e00c:	fa12 f283 	uxtah	r2, r2, r3
  41e010:	f8ad 200c 	strh.w	r2, [sp, #12]
                                                                                         BTN_EXTRA_CLICK_AREA_MAX);  /*-2 for rounding error*/
        else btn_area.x2 += btnm_cords.x1 + pinner;

        if(btn_area.y2 >= h - pbottom - 2) btn_area.y2 += btnm_cords.y1 + LV_MATH_MIN(pbottom,
  41e014:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
  41e018:	ebab 0307 	sub.w	r3, fp, r7
  41e01c:	3b02      	subs	r3, #2
  41e01e:	429a      	cmp	r2, r3
  41e020:	db34      	blt.n	41e08c <get_button_from_point+0x18c>
  41e022:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  41e026:	463b      	mov	r3, r7
  41e028:	2f25      	cmp	r7, #37	; 0x25
  41e02a:	bfa8      	it	ge
  41e02c:	2325      	movge	r3, #37	; 0x25
  41e02e:	fa11 f383 	uxtah	r3, r1, r3
  41e032:	fa12 f283 	uxtah	r2, r2, r3
  41e036:	f8ad 200e 	strh.w	r2, [sp, #14]
                                                                                          BTN_EXTRA_CLICK_AREA_MAX); /*-2 for rounding error*/
        else btn_area.y2 += btnm_cords.y1 + pinner;

        if(_lv_area_is_point_on(&btn_area, p, 0) != false) {
  41e03a:	2200      	movs	r2, #0
  41e03c:	9901      	ldr	r1, [sp, #4]
  41e03e:	a802      	add	r0, sp, #8
  41e040:	4b20      	ldr	r3, [pc, #128]	; (41e0c4 <get_button_from_point+0x1c4>)
  41e042:	4798      	blx	r3
  41e044:	bb50      	cbnz	r0, 41e09c <get_button_from_point+0x19c>
    for(i = 0; i < ext->btn_cnt; i++) {
  41e046:	3401      	adds	r4, #1
  41e048:	b2a4      	uxth	r4, r4
  41e04a:	8ab3      	ldrh	r3, [r6, #20]
  41e04c:	429c      	cmp	r4, r3
  41e04e:	d225      	bcs.n	41e09c <get_button_from_point+0x19c>
        lv_area_copy(&btn_area, &ext->button_areas[i]);
  41e050:	6872      	ldr	r2, [r6, #4]
  41e052:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
    uint8_t * d8 = (uint8_t *)dst;
  41e056:	a902      	add	r1, sp, #8
  41e058:	2308      	movs	r3, #8
  41e05a:	e7a5      	b.n	41dfa8 <get_button_from_point+0xa8>
        else btn_area.x1 += btnm_cords.x1 - pinner;
  41e05c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  41e060:	1b52      	subs	r2, r2, r5
  41e062:	fa13 f382 	uxtah	r3, r3, r2
  41e066:	f8ad 3008 	strh.w	r3, [sp, #8]
  41e06a:	e7af      	b.n	41dfcc <get_button_from_point+0xcc>
        else btn_area.y1 += btnm_cords.y1 - pinner;
  41e06c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  41e070:	1b52      	subs	r2, r2, r5
  41e072:	fa13 f382 	uxtah	r3, r3, r2
  41e076:	f8ad 300a 	strh.w	r3, [sp, #10]
  41e07a:	e7b7      	b.n	41dfec <get_button_from_point+0xec>
        else btn_area.x2 += btnm_cords.x1 + pinner;
  41e07c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  41e080:	442b      	add	r3, r5
  41e082:	fa12 f283 	uxtah	r2, r2, r3
  41e086:	f8ad 200c 	strh.w	r2, [sp, #12]
  41e08a:	e7c3      	b.n	41e014 <get_button_from_point+0x114>
        else btn_area.y2 += btnm_cords.y1 + pinner;
  41e08c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  41e090:	442b      	add	r3, r5
  41e092:	fa12 f283 	uxtah	r2, r2, r3
  41e096:	f8ad 200e 	strh.w	r2, [sp, #14]
  41e09a:	e7ce      	b.n	41e03a <get_button_from_point+0x13a>
            break;
        }
    }

    if(i == ext->btn_cnt) i = LV_BTNMATRIX_BTN_NONE;
  41e09c:	8ab3      	ldrh	r3, [r6, #20]
  41e09e:	429c      	cmp	r4, r3
  41e0a0:	d003      	beq.n	41e0aa <get_button_from_point+0x1aa>

    return i;
}
  41e0a2:	4620      	mov	r0, r4
  41e0a4:	b007      	add	sp, #28
  41e0a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(i == ext->btn_cnt) i = LV_BTNMATRIX_BTN_NONE;
  41e0aa:	f64f 74ff 	movw	r4, #65535	; 0xffff
  41e0ae:	e7f8      	b.n	41e0a2 <get_button_from_point+0x1a2>
  41e0b0:	00408115 	.word	0x00408115
  41e0b4:	00405b01 	.word	0x00405b01
  41e0b8:	00405bc1 	.word	0x00405bc1
  41e0bc:	00405bf1 	.word	0x00405bf1
  41e0c0:	00407485 	.word	0x00407485
  41e0c4:	00415705 	.word	0x00415705

0041e0c8 <invalidate_button_area>:

static void invalidate_button_area(const lv_obj_t * btnm, uint16_t btn_idx)
{
    if(btn_idx == LV_BTNMATRIX_BTN_NONE) return;
  41e0c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41e0cc:	4299      	cmp	r1, r3
  41e0ce:	d034      	beq.n	41e13a <invalidate_button_area+0x72>
{
  41e0d0:	b530      	push	{r4, r5, lr}
  41e0d2:	b085      	sub	sp, #20
  41e0d4:	460c      	mov	r4, r1
  41e0d6:	4605      	mov	r5, r0

    lv_area_t btn_area;
    lv_area_t btnm_area;

    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41e0d8:	4b18      	ldr	r3, [pc, #96]	; (41e13c <invalidate_button_area+0x74>)
  41e0da:	4798      	blx	r3
    lv_area_copy(&btn_area, &ext->button_areas[btn_idx]);
  41e0dc:	6841      	ldr	r1, [r0, #4]
  41e0de:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
  41e0e2:	aa02      	add	r2, sp, #8
  41e0e4:	2308      	movs	r3, #8
  41e0e6:	e004      	b.n	41e0f2 <invalidate_button_area+0x2a>
        *d8 = *s8;
  41e0e8:	f811 4b01 	ldrb.w	r4, [r1], #1
  41e0ec:	f802 4b01 	strb.w	r4, [r2], #1
        len--;
  41e0f0:	3b01      	subs	r3, #1
    while(len) {
  41e0f2:	2b00      	cmp	r3, #0
  41e0f4:	d1f8      	bne.n	41e0e8 <invalidate_button_area+0x20>
    lv_obj_get_coords(btnm, &btnm_area);
  41e0f6:	4669      	mov	r1, sp
  41e0f8:	4628      	mov	r0, r5
  41e0fa:	4b11      	ldr	r3, [pc, #68]	; (41e140 <invalidate_button_area+0x78>)
  41e0fc:	4798      	blx	r3

    /* Convert relative coordinates to absolute */
    btn_area.x1 += btnm_area.x1;
  41e0fe:	f8bd 2000 	ldrh.w	r2, [sp]
  41e102:	f8bd 3008 	ldrh.w	r3, [sp, #8]
  41e106:	4413      	add	r3, r2
  41e108:	f8ad 3008 	strh.w	r3, [sp, #8]
    btn_area.y1 += btnm_area.y1;
  41e10c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
  41e110:	f8bd 100a 	ldrh.w	r1, [sp, #10]
  41e114:	4419      	add	r1, r3
  41e116:	f8ad 100a 	strh.w	r1, [sp, #10]
    btn_area.x2 += btnm_area.x1;
  41e11a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
  41e11e:	440a      	add	r2, r1
  41e120:	f8ad 200c 	strh.w	r2, [sp, #12]
    btn_area.y2 += btnm_area.y1;
  41e124:	f8bd 200e 	ldrh.w	r2, [sp, #14]
  41e128:	4413      	add	r3, r2
  41e12a:	f8ad 300e 	strh.w	r3, [sp, #14]

    lv_obj_invalidate_area(btnm, &btn_area);
  41e12e:	a902      	add	r1, sp, #8
  41e130:	4628      	mov	r0, r5
  41e132:	4b04      	ldr	r3, [pc, #16]	; (41e144 <invalidate_button_area+0x7c>)
  41e134:	4798      	blx	r3
}
  41e136:	b005      	add	sp, #20
  41e138:	bd30      	pop	{r4, r5, pc}
  41e13a:	4770      	bx	lr
  41e13c:	00408115 	.word	0x00408115
  41e140:	00405b01 	.word	0x00405b01
  41e144:	00405f35 	.word	0x00405f35

0041e148 <allocate_btn_areas_and_controls>:
{
  41e148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41e14a:	4606      	mov	r6, r0
  41e14c:	460f      	mov	r7, r1
    uint16_t i       = 0;
  41e14e:	2400      	movs	r4, #0
    uint16_t btn_cnt = 0;
  41e150:	4625      	mov	r5, r4
    while(strlen(map[i]) != 0) {
  41e152:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
  41e156:	7803      	ldrb	r3, [r0, #0]
  41e158:	b9fb      	cbnz	r3, 41e19a <allocate_btn_areas_and_controls+0x52>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41e15a:	4630      	mov	r0, r6
  41e15c:	4b20      	ldr	r3, [pc, #128]	; (41e1e0 <allocate_btn_areas_and_controls+0x98>)
  41e15e:	4798      	blx	r3
  41e160:	4604      	mov	r4, r0
    if(btn_cnt == ext->btn_cnt) return;
  41e162:	8a83      	ldrh	r3, [r0, #20]
  41e164:	429d      	cmp	r5, r3
  41e166:	d03a      	beq.n	41e1de <allocate_btn_areas_and_controls+0x96>
    if(ext->button_areas != NULL) {
  41e168:	6840      	ldr	r0, [r0, #4]
  41e16a:	b118      	cbz	r0, 41e174 <allocate_btn_areas_and_controls+0x2c>
        lv_mem_free(ext->button_areas);
  41e16c:	4b1d      	ldr	r3, [pc, #116]	; (41e1e4 <allocate_btn_areas_and_controls+0x9c>)
  41e16e:	4798      	blx	r3
        ext->button_areas = NULL;
  41e170:	2300      	movs	r3, #0
  41e172:	6063      	str	r3, [r4, #4]
    if(ext->ctrl_bits != NULL) {
  41e174:	68a0      	ldr	r0, [r4, #8]
  41e176:	b118      	cbz	r0, 41e180 <allocate_btn_areas_and_controls+0x38>
        lv_mem_free(ext->ctrl_bits);
  41e178:	4b1a      	ldr	r3, [pc, #104]	; (41e1e4 <allocate_btn_areas_and_controls+0x9c>)
  41e17a:	4798      	blx	r3
        ext->ctrl_bits = NULL;
  41e17c:	2300      	movs	r3, #0
  41e17e:	60a3      	str	r3, [r4, #8]
    ext->button_areas = lv_mem_alloc(sizeof(lv_area_t) * btn_cnt);
  41e180:	00e8      	lsls	r0, r5, #3
  41e182:	4b19      	ldr	r3, [pc, #100]	; (41e1e8 <allocate_btn_areas_and_controls+0xa0>)
  41e184:	4798      	blx	r3
  41e186:	6060      	str	r0, [r4, #4]
    LV_ASSERT_MEM(ext->button_areas);
  41e188:	4b18      	ldr	r3, [pc, #96]	; (41e1ec <allocate_btn_areas_and_controls+0xa4>)
  41e18a:	4798      	blx	r3
  41e18c:	b970      	cbnz	r0, 41e1ac <allocate_btn_areas_and_controls+0x64>
  41e18e:	6862      	ldr	r2, [r4, #4]
  41e190:	2300      	movs	r3, #0
  41e192:	4817      	ldr	r0, [pc, #92]	; (41e1f0 <allocate_btn_areas_and_controls+0xa8>)
  41e194:	4917      	ldr	r1, [pc, #92]	; (41e1f4 <allocate_btn_areas_and_controls+0xac>)
  41e196:	4788      	blx	r1
  41e198:	e7fe      	b.n	41e198 <allocate_btn_areas_and_controls+0x50>
        if(strcmp(map[i], "\n") != 0) { /*Do not count line breaks*/
  41e19a:	4917      	ldr	r1, [pc, #92]	; (41e1f8 <allocate_btn_areas_and_controls+0xb0>)
  41e19c:	4b17      	ldr	r3, [pc, #92]	; (41e1fc <allocate_btn_areas_and_controls+0xb4>)
  41e19e:	4798      	blx	r3
  41e1a0:	b108      	cbz	r0, 41e1a6 <allocate_btn_areas_and_controls+0x5e>
            btn_cnt++;
  41e1a2:	3501      	adds	r5, #1
  41e1a4:	b2ad      	uxth	r5, r5
        i++;
  41e1a6:	3401      	adds	r4, #1
  41e1a8:	b2a4      	uxth	r4, r4
  41e1aa:	e7d2      	b.n	41e152 <allocate_btn_areas_and_controls+0xa>
    ext->ctrl_bits = lv_mem_alloc(sizeof(lv_btnmatrix_ctrl_t) * btn_cnt);
  41e1ac:	0068      	lsls	r0, r5, #1
  41e1ae:	4b0e      	ldr	r3, [pc, #56]	; (41e1e8 <allocate_btn_areas_and_controls+0xa0>)
  41e1b0:	4798      	blx	r3
  41e1b2:	60a0      	str	r0, [r4, #8]
    LV_ASSERT_MEM(ext->ctrl_bits);
  41e1b4:	4b0d      	ldr	r3, [pc, #52]	; (41e1ec <allocate_btn_areas_and_controls+0xa4>)
  41e1b6:	4798      	blx	r3
  41e1b8:	b928      	cbnz	r0, 41e1c6 <allocate_btn_areas_and_controls+0x7e>
  41e1ba:	68a2      	ldr	r2, [r4, #8]
  41e1bc:	2300      	movs	r3, #0
  41e1be:	480c      	ldr	r0, [pc, #48]	; (41e1f0 <allocate_btn_areas_and_controls+0xa8>)
  41e1c0:	490c      	ldr	r1, [pc, #48]	; (41e1f4 <allocate_btn_areas_and_controls+0xac>)
  41e1c2:	4788      	blx	r1
  41e1c4:	e7fe      	b.n	41e1c4 <allocate_btn_areas_and_controls+0x7c>
    if(ext->button_areas == NULL || ext->ctrl_bits == NULL) btn_cnt = 0;
  41e1c6:	6863      	ldr	r3, [r4, #4]
  41e1c8:	b11b      	cbz	r3, 41e1d2 <allocate_btn_areas_and_controls+0x8a>
  41e1ca:	68a3      	ldr	r3, [r4, #8]
  41e1cc:	b913      	cbnz	r3, 41e1d4 <allocate_btn_areas_and_controls+0x8c>
  41e1ce:	2500      	movs	r5, #0
  41e1d0:	e000      	b.n	41e1d4 <allocate_btn_areas_and_controls+0x8c>
  41e1d2:	2500      	movs	r5, #0
    _lv_memset_00(ext->ctrl_bits, sizeof(lv_btnmatrix_ctrl_t) * btn_cnt);
  41e1d4:	0069      	lsls	r1, r5, #1
  41e1d6:	68a0      	ldr	r0, [r4, #8]
  41e1d8:	4b09      	ldr	r3, [pc, #36]	; (41e200 <allocate_btn_areas_and_controls+0xb8>)
  41e1da:	4798      	blx	r3
    ext->btn_cnt = btn_cnt;
  41e1dc:	82a5      	strh	r5, [r4, #20]
  41e1de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41e1e0:	00408115 	.word	0x00408115
  41e1e4:	0041679d 	.word	0x0041679d
  41e1e8:	004166d9 	.word	0x004166d9
  41e1ec:	00415f95 	.word	0x00415f95
  41e1f0:	0042c714 	.word	0x0042c714
  41e1f4:	00415fa1 	.word	0x00415fa1
  41e1f8:	0042fe44 	.word	0x0042fe44
  41e1fc:	00428229 	.word	0x00428229
  41e200:	00416c0d 	.word	0x00416c0d

0041e204 <lv_btnmatrix_set_map>:
{
  41e204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41e208:	b097      	sub	sp, #92	; 0x5c
  41e20a:	4604      	mov	r4, r0
  41e20c:	9009      	str	r0, [sp, #36]	; 0x24
  41e20e:	4688      	mov	r8, r1
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
  41e210:	4ba8      	ldr	r3, [pc, #672]	; (41e4b4 <lv_btnmatrix_set_map+0x2b0>)
  41e212:	4798      	blx	r3
  41e214:	b928      	cbnz	r0, 41e222 <lv_btnmatrix_set_map+0x1e>
  41e216:	4622      	mov	r2, r4
  41e218:	2300      	movs	r3, #0
  41e21a:	48a7      	ldr	r0, [pc, #668]	; (41e4b8 <lv_btnmatrix_set_map+0x2b4>)
  41e21c:	49a7      	ldr	r1, [pc, #668]	; (41e4bc <lv_btnmatrix_set_map+0x2b8>)
  41e21e:	4788      	blx	r1
  41e220:	e7fe      	b.n	41e220 <lv_btnmatrix_set_map+0x1c>
    LV_ASSERT_NULL(map);
  41e222:	4640      	mov	r0, r8
  41e224:	4ba3      	ldr	r3, [pc, #652]	; (41e4b4 <lv_btnmatrix_set_map+0x2b0>)
  41e226:	4798      	blx	r3
  41e228:	b928      	cbnz	r0, 41e236 <lv_btnmatrix_set_map+0x32>
  41e22a:	4642      	mov	r2, r8
  41e22c:	2300      	movs	r3, #0
  41e22e:	48a2      	ldr	r0, [pc, #648]	; (41e4b8 <lv_btnmatrix_set_map+0x2b4>)
  41e230:	49a2      	ldr	r1, [pc, #648]	; (41e4bc <lv_btnmatrix_set_map+0x2b8>)
  41e232:	4788      	blx	r1
  41e234:	e7fe      	b.n	41e234 <lv_btnmatrix_set_map+0x30>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41e236:	9e09      	ldr	r6, [sp, #36]	; 0x24
  41e238:	4630      	mov	r0, r6
  41e23a:	4ba1      	ldr	r3, [pc, #644]	; (41e4c0 <lv_btnmatrix_set_map+0x2bc>)
  41e23c:	4798      	blx	r3
  41e23e:	4682      	mov	sl, r0
    allocate_btn_areas_and_controls(btnm, map);
  41e240:	4641      	mov	r1, r8
  41e242:	4630      	mov	r0, r6
  41e244:	4b9f      	ldr	r3, [pc, #636]	; (41e4c4 <lv_btnmatrix_set_map+0x2c0>)
  41e246:	4798      	blx	r3
    ext->map_p = map;
  41e248:	f8ca 8000 	str.w	r8, [sl]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41e24c:	2212      	movs	r2, #18
  41e24e:	2100      	movs	r1, #0
  41e250:	4630      	mov	r0, r6
  41e252:	4d9d      	ldr	r5, [pc, #628]	; (41e4c8 <lv_btnmatrix_set_map+0x2c4>)
  41e254:	47a8      	blx	r5
  41e256:	4683      	mov	fp, r0
  41e258:	900e      	str	r0, [sp, #56]	; 0x38
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41e25a:	2213      	movs	r2, #19
  41e25c:	2100      	movs	r1, #0
  41e25e:	4630      	mov	r0, r6
  41e260:	47a8      	blx	r5
  41e262:	4681      	mov	r9, r0
  41e264:	9014      	str	r0, [sp, #80]	; 0x50
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41e266:	2210      	movs	r2, #16
  41e268:	2100      	movs	r1, #0
  41e26a:	4630      	mov	r0, r6
  41e26c:	47a8      	blx	r5
  41e26e:	4607      	mov	r7, r0
  41e270:	9002      	str	r0, [sp, #8]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41e272:	2211      	movs	r2, #17
  41e274:	2100      	movs	r1, #0
  41e276:	4630      	mov	r0, r6
  41e278:	47a8      	blx	r5
  41e27a:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41e27c:	2214      	movs	r2, #20
  41e27e:	2100      	movs	r1, #0
  41e280:	4630      	mov	r0, r6
  41e282:	47a8      	blx	r5
  41e284:	900b      	str	r0, [sp, #44]	; 0x2c
    lv_coord_t max_w            = lv_obj_get_width(btnm) - left - right;
  41e286:	4630      	mov	r0, r6
  41e288:	4b90      	ldr	r3, [pc, #576]	; (41e4cc <lv_btnmatrix_set_map+0x2c8>)
  41e28a:	4798      	blx	r3
  41e28c:	b283      	uxth	r3, r0
  41e28e:	fa1f f28b 	uxth.w	r2, fp
  41e292:	920d      	str	r2, [sp, #52]	; 0x34
  41e294:	1a9b      	subs	r3, r3, r2
  41e296:	b29b      	uxth	r3, r3
  41e298:	fa1f f289 	uxth.w	r2, r9
  41e29c:	920f      	str	r2, [sp, #60]	; 0x3c
  41e29e:	1a9b      	subs	r3, r3, r2
  41e2a0:	b29b      	uxth	r3, r3
  41e2a2:	9310      	str	r3, [sp, #64]	; 0x40
  41e2a4:	b21b      	sxth	r3, r3
  41e2a6:	9311      	str	r3, [sp, #68]	; 0x44
    lv_coord_t max_h            = lv_obj_get_height(btnm) - top - bottom;
  41e2a8:	4630      	mov	r0, r6
  41e2aa:	4b89      	ldr	r3, [pc, #548]	; (41e4d0 <lv_btnmatrix_set_map+0x2cc>)
  41e2ac:	4798      	blx	r3
  41e2ae:	b286      	uxth	r6, r0
  41e2b0:	1bf6      	subs	r6, r6, r7
  41e2b2:	b2b6      	uxth	r6, r6
  41e2b4:	b2a3      	uxth	r3, r4
  41e2b6:	9312      	str	r3, [sp, #72]	; 0x48
  41e2b8:	1af6      	subs	r6, r6, r3
  41e2ba:	b2b6      	uxth	r6, r6
    for(li = 0; strlen(map[li]) != 0; li++) {
  41e2bc:	2500      	movs	r5, #0
    uint8_t line_cnt = 1;
  41e2be:	2401      	movs	r4, #1
    for(li = 0; strlen(map[li]) != 0; li++) {
  41e2c0:	e001      	b.n	41e2c6 <lv_btnmatrix_set_map+0xc2>
  41e2c2:	3501      	adds	r5, #1
  41e2c4:	b2ed      	uxtb	r5, r5
  41e2c6:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
  41e2ca:	7803      	ldrb	r3, [r0, #0]
  41e2cc:	b13b      	cbz	r3, 41e2de <lv_btnmatrix_set_map+0xda>
        if(strcmp(map[li], "\n") == 0) line_cnt++;
  41e2ce:	4981      	ldr	r1, [pc, #516]	; (41e4d4 <lv_btnmatrix_set_map+0x2d0>)
  41e2d0:	4b81      	ldr	r3, [pc, #516]	; (41e4d8 <lv_btnmatrix_set_map+0x2d4>)
  41e2d2:	4798      	blx	r3
  41e2d4:	2800      	cmp	r0, #0
  41e2d6:	d1f4      	bne.n	41e2c2 <lv_btnmatrix_set_map+0xbe>
  41e2d8:	3401      	adds	r4, #1
  41e2da:	b2e4      	uxtb	r4, r4
  41e2dc:	e7f1      	b.n	41e2c2 <lv_btnmatrix_set_map+0xbe>
    lv_coord_t btn_h = max_h - ((line_cnt - 1) * inner);
  41e2de:	1e63      	subs	r3, r4, #1
  41e2e0:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  41e2e4:	9203      	str	r2, [sp, #12]
  41e2e6:	fb13 f302 	smulbb	r3, r3, r2
  41e2ea:	1af3      	subs	r3, r6, r3
    btn_h            = (btn_h + line_cnt / 2) / line_cnt;
  41e2ec:	0862      	lsrs	r2, r4, #1
  41e2ee:	fa02 f383 	sxtah	r3, r2, r3
  41e2f2:	fb93 f3f4 	sdiv	r3, r3, r4
    btn_h--; /*-1 because e.g. height = 100 means 101 pixels (0..100)*/
  41e2f6:	3b01      	subs	r3, #1
  41e2f8:	b21b      	sxth	r3, r3
  41e2fa:	9305      	str	r3, [sp, #20]
    uint16_t btn_i          = 0; /*Act. index of button areas*/
  41e2fc:	f04f 0b00 	mov.w	fp, #0
  41e300:	46d9      	mov	r9, fp
  41e302:	e104      	b.n	41e50e <lv_btnmatrix_set_map+0x30a>
            unit_cnt += get_button_width(ext->ctrl_bits[btn_i + btn_cnt]);
  41e304:	f8da 3008 	ldr.w	r3, [sl, #8]
  41e308:	eb09 0206 	add.w	r2, r9, r6
  41e30c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
  41e310:	4b72      	ldr	r3, [pc, #456]	; (41e4dc <lv_btnmatrix_set_map+0x2d8>)
  41e312:	4798      	blx	r3
  41e314:	fa14 f480 	uxtah	r4, r4, r0
  41e318:	b2a4      	uxth	r4, r4
            btn_cnt++;
  41e31a:	3601      	adds	r6, #1
  41e31c:	b2b6      	uxth	r6, r6
        while(strcmp(map_p_tmp[btn_cnt], "\n") != 0 && strlen(map_p_tmp[btn_cnt]) != 0) { /*Check a line*/
  41e31e:	9604      	str	r6, [sp, #16]
  41e320:	eb08 0786 	add.w	r7, r8, r6, lsl #2
  41e324:	f858 5026 	ldr.w	r5, [r8, r6, lsl #2]
  41e328:	496a      	ldr	r1, [pc, #424]	; (41e4d4 <lv_btnmatrix_set_map+0x2d0>)
  41e32a:	4628      	mov	r0, r5
  41e32c:	4b6a      	ldr	r3, [pc, #424]	; (41e4d8 <lv_btnmatrix_set_map+0x2d4>)
  41e32e:	4798      	blx	r3
  41e330:	b110      	cbz	r0, 41e338 <lv_btnmatrix_set_map+0x134>
  41e332:	782b      	ldrb	r3, [r5, #0]
  41e334:	2b00      	cmp	r3, #0
  41e336:	d1e5      	bne.n	41e304 <lv_btnmatrix_set_map+0x100>
  41e338:	9713      	str	r7, [sp, #76]	; 0x4c
        if(map_p_tmp[btn_cnt][0] == '\0') { /*Last row?*/
  41e33a:	782b      	ldrb	r3, [r5, #0]
  41e33c:	b1bb      	cbz	r3, 41e36e <lv_btnmatrix_set_map+0x16a>
        lv_bidi_dir_t base_dir = lv_obj_get_base_dir(btnm);
  41e33e:	9809      	ldr	r0, [sp, #36]	; 0x24
  41e340:	4b67      	ldr	r3, [pc, #412]	; (41e4e0 <lv_btnmatrix_set_map+0x2dc>)
  41e342:	4798      	blx	r3
  41e344:	9006      	str	r0, [sp, #24]
        if(btn_cnt != 0) {
  41e346:	2e00      	cmp	r6, #0
  41e348:	f000 80d0 	beq.w	41e4ec <lv_btnmatrix_set_map+0x2e8>
            lv_coord_t all_unit_w = max_w - ((unit_cnt - 1) * inner);
  41e34c:	9407      	str	r4, [sp, #28]
  41e34e:	1e63      	subs	r3, r4, #1
  41e350:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  41e354:	fb13 f302 	smulbb	r3, r3, r2
  41e358:	9a10      	ldr	r2, [sp, #64]	; 0x40
  41e35a:	1ad3      	subs	r3, r2, r3
  41e35c:	b21b      	sxth	r3, r3
  41e35e:	9308      	str	r3, [sp, #32]
            for(i = 0; i < btn_cnt; i++) {
  41e360:	f04f 0b00 	mov.w	fp, #0
            unit_act_cnt = 0;
  41e364:	465f      	mov	r7, fp
  41e366:	960c      	str	r6, [sp, #48]	; 0x30
  41e368:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
            for(i = 0; i < btn_cnt; i++) {
  41e36c:	e042      	b.n	41e3f4 <lv_btnmatrix_set_map+0x1f0>
            btn_h = lv_obj_get_height(btnm) - act_y - bottom - 1;
  41e36e:	9809      	ldr	r0, [sp, #36]	; 0x24
  41e370:	4b57      	ldr	r3, [pc, #348]	; (41e4d0 <lv_btnmatrix_set_map+0x2cc>)
  41e372:	4798      	blx	r3
  41e374:	b283      	uxth	r3, r0
  41e376:	9a02      	ldr	r2, [sp, #8]
  41e378:	1a9b      	subs	r3, r3, r2
  41e37a:	b29b      	uxth	r3, r3
  41e37c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  41e37e:	1a9b      	subs	r3, r3, r2
  41e380:	b29b      	uxth	r3, r3
  41e382:	3b01      	subs	r3, #1
  41e384:	b21b      	sxth	r3, r3
  41e386:	9305      	str	r3, [sp, #20]
  41e388:	e7d9      	b.n	41e33e <lv_btnmatrix_set_map+0x13a>
                    act_x = (unit_act_cnt * all_unit_w) / unit_cnt + unit_act_cnt * inner;
  41e38a:	9b08      	ldr	r3, [sp, #32]
  41e38c:	fb03 f807 	mul.w	r8, r3, r7
  41e390:	9b07      	ldr	r3, [sp, #28]
  41e392:	fb98 f8f3 	sdiv	r8, r8, r3
  41e396:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  41e39a:	fb17 8803 	smlabb	r8, r7, r3, r8
  41e39e:	fa1f f888 	uxth.w	r8, r8
                    act_x = lv_obj_get_width(btnm) - right - act_x - act_unit_w - 1;
  41e3a2:	9809      	ldr	r0, [sp, #36]	; 0x24
  41e3a4:	4b49      	ldr	r3, [pc, #292]	; (41e4cc <lv_btnmatrix_set_map+0x2c8>)
  41e3a6:	4798      	blx	r3
  41e3a8:	b281      	uxth	r1, r0
  41e3aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  41e3ac:	1ac9      	subs	r1, r1, r3
  41e3ae:	b289      	uxth	r1, r1
  41e3b0:	eba1 0108 	sub.w	r1, r1, r8
  41e3b4:	b289      	uxth	r1, r1
  41e3b6:	1b09      	subs	r1, r1, r4
  41e3b8:	b289      	uxth	r1, r1
  41e3ba:	3901      	subs	r1, #1
  41e3bc:	b209      	sxth	r1, r1
  41e3be:	e046      	b.n	41e44e <lv_btnmatrix_set_map+0x24a>
                    lv_area_set(&ext->button_areas[btn_i], act_x, act_y, act_x + act_unit_w, act_y + btn_h);
  41e3c0:	f8da 0004 	ldr.w	r0, [sl, #4]
  41e3c4:	1863      	adds	r3, r4, r1
  41e3c6:	9c02      	ldr	r4, [sp, #8]
  41e3c8:	4622      	mov	r2, r4
  41e3ca:	9e05      	ldr	r6, [sp, #20]
  41e3cc:	4432      	add	r2, r6
  41e3ce:	b212      	sxth	r2, r2
  41e3d0:	9200      	str	r2, [sp, #0]
  41e3d2:	b21b      	sxth	r3, r3
  41e3d4:	4622      	mov	r2, r4
  41e3d6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  41e3d8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
  41e3dc:	4c41      	ldr	r4, [pc, #260]	; (41e4e4 <lv_btnmatrix_set_map+0x2e0>)
  41e3de:	47a0      	blx	r4
                unit_act_cnt += btn_unit_w;
  41e3e0:	442f      	add	r7, r5
  41e3e2:	b2bf      	uxth	r7, r7
                btn_i++;
  41e3e4:	f109 0901 	add.w	r9, r9, #1
  41e3e8:	fa1f f989 	uxth.w	r9, r9
            for(i = 0; i < btn_cnt; i++) {
  41e3ec:	f10b 0b01 	add.w	fp, fp, #1
  41e3f0:	fa1f fb8b 	uxth.w	fp, fp
  41e3f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  41e3f6:	455b      	cmp	r3, fp
  41e3f8:	d976      	bls.n	41e4e8 <lv_btnmatrix_set_map+0x2e4>
                uint8_t btn_unit_w = get_button_width(ext->ctrl_bits[btn_i]);
  41e3fa:	f8da 3008 	ldr.w	r3, [sl, #8]
  41e3fe:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  41e402:	f833 0019 	ldrh.w	r0, [r3, r9, lsl #1]
  41e406:	4b35      	ldr	r3, [pc, #212]	; (41e4dc <lv_btnmatrix_set_map+0x2d8>)
  41e408:	4798      	blx	r3
  41e40a:	4605      	mov	r5, r0
                lv_coord_t act_unit_w = (all_unit_w * btn_unit_w) / unit_cnt + inner * (btn_unit_w - 1);
  41e40c:	9b08      	ldr	r3, [sp, #32]
  41e40e:	fb00 f303 	mul.w	r3, r0, r3
  41e412:	9a07      	ldr	r2, [sp, #28]
  41e414:	fb93 f3f2 	sdiv	r3, r3, r2
  41e418:	1e44      	subs	r4, r0, #1
  41e41a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  41e41e:	fb14 3402 	smlabb	r4, r4, r2, r3
  41e422:	b2a4      	uxth	r4, r4
                act_unit_w--; /*-1 because e.g. width = 100 means 101 pixels (0..100)*/
  41e424:	3c01      	subs	r4, #1
  41e426:	b2a4      	uxth	r4, r4
  41e428:	b223      	sxth	r3, r4
  41e42a:	461e      	mov	r6, r3
                if(base_dir == LV_BIDI_DIR_RTL)  {
  41e42c:	9b06      	ldr	r3, [sp, #24]
  41e42e:	2b01      	cmp	r3, #1
  41e430:	d0ab      	beq.n	41e38a <lv_btnmatrix_set_map+0x186>
                    act_x = (unit_act_cnt * all_unit_w) / unit_cnt + unit_act_cnt * inner +
  41e432:	9b08      	ldr	r3, [sp, #32]
  41e434:	fb03 f107 	mul.w	r1, r3, r7
  41e438:	9b07      	ldr	r3, [sp, #28]
  41e43a:	fb91 f1f3 	sdiv	r1, r1, r3
  41e43e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  41e442:	fb17 1103 	smlabb	r1, r7, r3, r1
  41e446:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  41e448:	fa13 f181 	uxtah	r1, r3, r1
  41e44c:	b209      	sxth	r1, r1
                if(btn_i != 0 && inner == 0 && ((act_x != left && base_dir != LV_BIDI_DIR_RTL) ||
  41e44e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  41e450:	461a      	mov	r2, r3
  41e452:	f119 0300 	adds.w	r3, r9, #0
  41e456:	bf18      	it	ne
  41e458:	2301      	movne	r3, #1
  41e45a:	2a00      	cmp	r2, #0
  41e45c:	bf18      	it	ne
  41e45e:	2300      	movne	r3, #0
  41e460:	2b00      	cmp	r3, #0
  41e462:	d0ad      	beq.n	41e3c0 <lv_btnmatrix_set_map+0x1bc>
  41e464:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  41e466:	9a06      	ldr	r2, [sp, #24]
  41e468:	4299      	cmp	r1, r3
  41e46a:	bf18      	it	ne
  41e46c:	2a01      	cmpne	r2, #1
  41e46e:	d109      	bne.n	41e484 <lv_btnmatrix_set_map+0x280>
                                                (act_x + act_unit_w == max_w - right && base_dir == LV_BIDI_DIR_RTL))) {
  41e470:	4633      	mov	r3, r6
  41e472:	440b      	add	r3, r1
  41e474:	9a11      	ldr	r2, [sp, #68]	; 0x44
  41e476:	9814      	ldr	r0, [sp, #80]	; 0x50
  41e478:	1a12      	subs	r2, r2, r0
                if(btn_i != 0 && inner == 0 && ((act_x != left && base_dir != LV_BIDI_DIR_RTL) ||
  41e47a:	4293      	cmp	r3, r2
  41e47c:	d1a0      	bne.n	41e3c0 <lv_btnmatrix_set_map+0x1bc>
                                                (act_x + act_unit_w == max_w - right && base_dir == LV_BIDI_DIR_RTL))) {
  41e47e:	9b06      	ldr	r3, [sp, #24]
  41e480:	2b01      	cmp	r3, #1
  41e482:	d19d      	bne.n	41e3c0 <lv_btnmatrix_set_map+0x1bc>
                    lv_area_set(&ext->button_areas[btn_i], ext->button_areas[btn_i - 1].x2, act_y, act_x + act_unit_w,
  41e484:	f8da 0004 	ldr.w	r0, [sl, #4]
  41e488:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
  41e48c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  41e48e:	4433      	add	r3, r6
  41e490:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  41e494:	440c      	add	r4, r1
                                act_y + btn_h);
  41e496:	9a02      	ldr	r2, [sp, #8]
  41e498:	9905      	ldr	r1, [sp, #20]
  41e49a:	440a      	add	r2, r1
                    lv_area_set(&ext->button_areas[btn_i], ext->button_areas[btn_i - 1].x2, act_y, act_x + act_unit_w,
  41e49c:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
  41e4a0:	b212      	sxth	r2, r2
  41e4a2:	9200      	str	r2, [sp, #0]
  41e4a4:	b223      	sxth	r3, r4
  41e4a6:	9a02      	ldr	r2, [sp, #8]
  41e4a8:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
  41e4ac:	4c0d      	ldr	r4, [pc, #52]	; (41e4e4 <lv_btnmatrix_set_map+0x2e0>)
  41e4ae:	47a0      	blx	r4
  41e4b0:	e796      	b.n	41e3e0 <lv_btnmatrix_set_map+0x1dc>
  41e4b2:	bf00      	nop
  41e4b4:	00415f95 	.word	0x00415f95
  41e4b8:	0042c728 	.word	0x0042c728
  41e4bc:	00415fa1 	.word	0x00415fa1
  41e4c0:	00408115 	.word	0x00408115
  41e4c4:	0041e149 	.word	0x0041e149
  41e4c8:	00407485 	.word	0x00407485
  41e4cc:	00405bc1 	.word	0x00405bc1
  41e4d0:	00405bf1 	.word	0x00405bf1
  41e4d4:	0042fe44 	.word	0x0042fe44
  41e4d8:	00428229 	.word	0x00428229
  41e4dc:	0041de8d 	.word	0x0041de8d
  41e4e0:	0040682d 	.word	0x0040682d
  41e4e4:	0041562d 	.word	0x0041562d
  41e4e8:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
        act_y += btn_h + inner + 1;
  41e4ec:	9b03      	ldr	r3, [sp, #12]
  41e4ee:	9a05      	ldr	r2, [sp, #20]
  41e4f0:	4413      	add	r3, r2
  41e4f2:	9a02      	ldr	r2, [sp, #8]
  41e4f4:	fa12 f383 	uxtah	r3, r2, r3
  41e4f8:	3301      	adds	r3, #1
  41e4fa:	b21b      	sxth	r3, r3
  41e4fc:	9302      	str	r3, [sp, #8]
        if(strlen(map_p_tmp[btn_cnt]) == 0) break; /*Break on end of map*/
  41e4fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  41e500:	681b      	ldr	r3, [r3, #0]
  41e502:	781b      	ldrb	r3, [r3, #0]
  41e504:	b133      	cbz	r3, 41e514 <lv_btnmatrix_set_map+0x310>
        map_p_tmp = &map_p_tmp[btn_cnt + 1];       /*Set the map to the next line*/
  41e506:	9b04      	ldr	r3, [sp, #16]
  41e508:	3301      	adds	r3, #1
  41e50a:	eb08 0883 	add.w	r8, r8, r3, lsl #2
        uint16_t btn_cnt = 0;            /*Number of buttons in a row*/
  41e50e:	2600      	movs	r6, #0
        uint16_t unit_cnt = 0;           /*Number of units in a row*/
  41e510:	4634      	mov	r4, r6
        while(strcmp(map_p_tmp[btn_cnt], "\n") != 0 && strlen(map_p_tmp[btn_cnt]) != 0) { /*Check a line*/
  41e512:	e704      	b.n	41e31e <lv_btnmatrix_set_map+0x11a>
    lv_obj_invalidate(btnm);
  41e514:	9809      	ldr	r0, [sp, #36]	; 0x24
  41e516:	4b02      	ldr	r3, [pc, #8]	; (41e520 <lv_btnmatrix_set_map+0x31c>)
  41e518:	4798      	blx	r3
}
  41e51a:	b017      	add	sp, #92	; 0x5c
  41e51c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41e520:	00405f99 	.word	0x00405f99

0041e524 <lv_btnmatrix_set_ctrl_map>:
{
  41e524:	b570      	push	{r4, r5, r6, lr}
  41e526:	4604      	mov	r4, r0
  41e528:	460e      	mov	r6, r1
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
  41e52a:	4b0c      	ldr	r3, [pc, #48]	; (41e55c <lv_btnmatrix_set_ctrl_map+0x38>)
  41e52c:	4798      	blx	r3
  41e52e:	b928      	cbnz	r0, 41e53c <lv_btnmatrix_set_ctrl_map+0x18>
  41e530:	4622      	mov	r2, r4
  41e532:	2300      	movs	r3, #0
  41e534:	480a      	ldr	r0, [pc, #40]	; (41e560 <lv_btnmatrix_set_ctrl_map+0x3c>)
  41e536:	490b      	ldr	r1, [pc, #44]	; (41e564 <lv_btnmatrix_set_ctrl_map+0x40>)
  41e538:	4788      	blx	r1
  41e53a:	e7fe      	b.n	41e53a <lv_btnmatrix_set_ctrl_map+0x16>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41e53c:	4620      	mov	r0, r4
  41e53e:	4b0a      	ldr	r3, [pc, #40]	; (41e568 <lv_btnmatrix_set_ctrl_map+0x44>)
  41e540:	4798      	blx	r3
  41e542:	4605      	mov	r5, r0
    _lv_memcpy(ext->ctrl_bits, ctrl_map, sizeof(lv_btnmatrix_ctrl_t) * ext->btn_cnt);
  41e544:	8a82      	ldrh	r2, [r0, #20]
  41e546:	0052      	lsls	r2, r2, #1
  41e548:	4631      	mov	r1, r6
  41e54a:	6880      	ldr	r0, [r0, #8]
  41e54c:	4b07      	ldr	r3, [pc, #28]	; (41e56c <lv_btnmatrix_set_ctrl_map+0x48>)
  41e54e:	4798      	blx	r3
    lv_btnmatrix_set_map(btnm, ext->map_p);
  41e550:	6829      	ldr	r1, [r5, #0]
  41e552:	4620      	mov	r0, r4
  41e554:	4b06      	ldr	r3, [pc, #24]	; (41e570 <lv_btnmatrix_set_ctrl_map+0x4c>)
  41e556:	4798      	blx	r3
  41e558:	bd70      	pop	{r4, r5, r6, pc}
  41e55a:	bf00      	nop
  41e55c:	00415f95 	.word	0x00415f95
  41e560:	0042c728 	.word	0x0042c728
  41e564:	00415fa1 	.word	0x00415fa1
  41e568:	00408115 	.word	0x00408115
  41e56c:	004168e9 	.word	0x004168e9
  41e570:	0041e205 	.word	0x0041e205

0041e574 <lv_btnmatrix_create>:
{
  41e574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41e576:	460e      	mov	r6, r1
    lv_obj_t * btnm = lv_obj_create(par, copy);
  41e578:	4b3c      	ldr	r3, [pc, #240]	; (41e66c <lv_btnmatrix_create+0xf8>)
  41e57a:	4798      	blx	r3
  41e57c:	4604      	mov	r4, r0
    LV_ASSERT_MEM(btnm);
  41e57e:	4b3c      	ldr	r3, [pc, #240]	; (41e670 <lv_btnmatrix_create+0xfc>)
  41e580:	4798      	blx	r3
  41e582:	b190      	cbz	r0, 41e5aa <lv_btnmatrix_create+0x36>
    if(btnm == NULL) return NULL;
  41e584:	2c00      	cmp	r4, #0
  41e586:	d054      	beq.n	41e632 <lv_btnmatrix_create+0xbe>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(btnm);
  41e588:	4b3a      	ldr	r3, [pc, #232]	; (41e674 <lv_btnmatrix_create+0x100>)
  41e58a:	681b      	ldr	r3, [r3, #0]
  41e58c:	b19b      	cbz	r3, 41e5b6 <lv_btnmatrix_create+0x42>
    lv_btnmatrix_ext_t * ext = lv_obj_allocate_ext_attr(btnm, sizeof(lv_btnmatrix_ext_t));
  41e58e:	2120      	movs	r1, #32
  41e590:	4620      	mov	r0, r4
  41e592:	4b39      	ldr	r3, [pc, #228]	; (41e678 <lv_btnmatrix_create+0x104>)
  41e594:	4798      	blx	r3
  41e596:	4605      	mov	r5, r0
    LV_ASSERT_MEM(ext);
  41e598:	4b35      	ldr	r3, [pc, #212]	; (41e670 <lv_btnmatrix_create+0xfc>)
  41e59a:	4798      	blx	r3
  41e59c:	b988      	cbnz	r0, 41e5c2 <lv_btnmatrix_create+0x4e>
  41e59e:	462a      	mov	r2, r5
  41e5a0:	2300      	movs	r3, #0
  41e5a2:	4836      	ldr	r0, [pc, #216]	; (41e67c <lv_btnmatrix_create+0x108>)
  41e5a4:	4936      	ldr	r1, [pc, #216]	; (41e680 <lv_btnmatrix_create+0x10c>)
  41e5a6:	4788      	blx	r1
  41e5a8:	e7fe      	b.n	41e5a8 <lv_btnmatrix_create+0x34>
    LV_ASSERT_MEM(btnm);
  41e5aa:	4622      	mov	r2, r4
  41e5ac:	2300      	movs	r3, #0
  41e5ae:	4833      	ldr	r0, [pc, #204]	; (41e67c <lv_btnmatrix_create+0x108>)
  41e5b0:	4933      	ldr	r1, [pc, #204]	; (41e680 <lv_btnmatrix_create+0x10c>)
  41e5b2:	4788      	blx	r1
  41e5b4:	e7fe      	b.n	41e5b4 <lv_btnmatrix_create+0x40>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(btnm);
  41e5b6:	4620      	mov	r0, r4
  41e5b8:	4b32      	ldr	r3, [pc, #200]	; (41e684 <lv_btnmatrix_create+0x110>)
  41e5ba:	4798      	blx	r3
  41e5bc:	4b2d      	ldr	r3, [pc, #180]	; (41e674 <lv_btnmatrix_create+0x100>)
  41e5be:	6018      	str	r0, [r3, #0]
  41e5c0:	e7e5      	b.n	41e58e <lv_btnmatrix_create+0x1a>
    if(ext == NULL) {
  41e5c2:	2d00      	cmp	r5, #0
  41e5c4:	d037      	beq.n	41e636 <lv_btnmatrix_create+0xc2>
    ext->btn_cnt        = 0;
  41e5c6:	2300      	movs	r3, #0
  41e5c8:	82ab      	strh	r3, [r5, #20]
    ext->btn_id_pr      = LV_BTNMATRIX_BTN_NONE;
  41e5ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
  41e5ce:	82ea      	strh	r2, [r5, #22]
    ext->btn_id_focused = LV_BTNMATRIX_BTN_NONE;
  41e5d0:	832a      	strh	r2, [r5, #24]
    ext->btn_id_act     = LV_BTNMATRIX_BTN_NONE;
  41e5d2:	836a      	strh	r2, [r5, #26]
    ext->button_areas   = NULL;
  41e5d4:	606b      	str	r3, [r5, #4]
    ext->ctrl_bits      = NULL;
  41e5d6:	60ab      	str	r3, [r5, #8]
    ext->map_p          = NULL;
  41e5d8:	602b      	str	r3, [r5, #0]
    ext->recolor        = 0;
  41e5da:	7f2a      	ldrb	r2, [r5, #28]
    ext->one_check      = 0;
  41e5dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
  41e5e0:	f363 0241 	bfi	r2, r3, #1, #1
  41e5e4:	772a      	strb	r2, [r5, #28]
    lv_style_list_init(&ext->style_btn);
  41e5e6:	f105 070c 	add.w	r7, r5, #12
  41e5ea:	4638      	mov	r0, r7
  41e5ec:	4b26      	ldr	r3, [pc, #152]	; (41e688 <lv_btnmatrix_create+0x114>)
  41e5ee:	4798      	blx	r3
    ext->style_btn.ignore_trans = 1;
  41e5f0:	7c6b      	ldrb	r3, [r5, #17]
  41e5f2:	f043 0302 	orr.w	r3, r3, #2
  41e5f6:	746b      	strb	r3, [r5, #17]
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_cb(btnm);
  41e5f8:	4b24      	ldr	r3, [pc, #144]	; (41e68c <lv_btnmatrix_create+0x118>)
  41e5fa:	681b      	ldr	r3, [r3, #0]
  41e5fc:	b303      	cbz	r3, 41e640 <lv_btnmatrix_create+0xcc>
    lv_obj_set_signal_cb(btnm, lv_btnmatrix_signal);
  41e5fe:	4924      	ldr	r1, [pc, #144]	; (41e690 <lv_btnmatrix_create+0x11c>)
  41e600:	4620      	mov	r0, r4
  41e602:	4b24      	ldr	r3, [pc, #144]	; (41e694 <lv_btnmatrix_create+0x120>)
  41e604:	4798      	blx	r3
    lv_obj_set_design_cb(btnm, lv_btnmatrix_design);
  41e606:	4924      	ldr	r1, [pc, #144]	; (41e698 <lv_btnmatrix_create+0x124>)
  41e608:	4620      	mov	r0, r4
  41e60a:	4b24      	ldr	r3, [pc, #144]	; (41e69c <lv_btnmatrix_create+0x128>)
  41e60c:	4798      	blx	r3
    if(copy == NULL) {
  41e60e:	b1ee      	cbz	r6, 41e64c <lv_btnmatrix_create+0xd8>
        lv_btnmatrix_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
  41e610:	4630      	mov	r0, r6
  41e612:	4b23      	ldr	r3, [pc, #140]	; (41e6a0 <lv_btnmatrix_create+0x12c>)
  41e614:	4798      	blx	r3
  41e616:	4605      	mov	r5, r0
        lv_btnmatrix_set_map(btnm, copy_ext->map_p);
  41e618:	6801      	ldr	r1, [r0, #0]
  41e61a:	4620      	mov	r0, r4
  41e61c:	4b21      	ldr	r3, [pc, #132]	; (41e6a4 <lv_btnmatrix_create+0x130>)
  41e61e:	4798      	blx	r3
        lv_btnmatrix_set_ctrl_map(btnm, copy_ext->ctrl_bits);
  41e620:	68a9      	ldr	r1, [r5, #8]
  41e622:	4620      	mov	r0, r4
  41e624:	4b20      	ldr	r3, [pc, #128]	; (41e6a8 <lv_btnmatrix_create+0x134>)
  41e626:	4798      	blx	r3
        lv_style_list_copy(&ext->style_btn, &copy_ext->style_btn);
  41e628:	f105 010c 	add.w	r1, r5, #12
  41e62c:	4638      	mov	r0, r7
  41e62e:	4b1f      	ldr	r3, [pc, #124]	; (41e6ac <lv_btnmatrix_create+0x138>)
  41e630:	4798      	blx	r3
}
  41e632:	4620      	mov	r0, r4
  41e634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_obj_del(btnm);
  41e636:	4620      	mov	r0, r4
  41e638:	4b1d      	ldr	r3, [pc, #116]	; (41e6b0 <lv_btnmatrix_create+0x13c>)
  41e63a:	4798      	blx	r3
        return NULL;
  41e63c:	2400      	movs	r4, #0
  41e63e:	e7f8      	b.n	41e632 <lv_btnmatrix_create+0xbe>
    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_cb(btnm);
  41e640:	4620      	mov	r0, r4
  41e642:	4b1c      	ldr	r3, [pc, #112]	; (41e6b4 <lv_btnmatrix_create+0x140>)
  41e644:	4798      	blx	r3
  41e646:	4b11      	ldr	r3, [pc, #68]	; (41e68c <lv_btnmatrix_create+0x118>)
  41e648:	6018      	str	r0, [r3, #0]
  41e64a:	e7d8      	b.n	41e5fe <lv_btnmatrix_create+0x8a>
        lv_btnmatrix_set_map(btnm, lv_btnmatrix_def_map);
  41e64c:	491a      	ldr	r1, [pc, #104]	; (41e6b8 <lv_btnmatrix_create+0x144>)
  41e64e:	4620      	mov	r0, r4
  41e650:	4b14      	ldr	r3, [pc, #80]	; (41e6a4 <lv_btnmatrix_create+0x130>)
  41e652:	4798      	blx	r3
        lv_obj_set_size(btnm, LV_DPI * 2, LV_DPI * 1);
  41e654:	2294      	movs	r2, #148	; 0x94
  41e656:	f44f 7194 	mov.w	r1, #296	; 0x128
  41e65a:	4620      	mov	r0, r4
  41e65c:	4b17      	ldr	r3, [pc, #92]	; (41e6bc <lv_btnmatrix_create+0x148>)
  41e65e:	4798      	blx	r3
        lv_theme_apply(btnm, LV_THEME_BTNMATRIX);
  41e660:	2106      	movs	r1, #6
  41e662:	4620      	mov	r0, r4
  41e664:	4b16      	ldr	r3, [pc, #88]	; (41e6c0 <lv_btnmatrix_create+0x14c>)
  41e666:	4798      	blx	r3
  41e668:	e7e3      	b.n	41e632 <lv_btnmatrix_create+0xbe>
  41e66a:	bf00      	nop
  41e66c:	00406855 	.word	0x00406855
  41e670:	00415f95 	.word	0x00415f95
  41e674:	2041486c 	.word	0x2041486c
  41e678:	00405981 	.word	0x00405981
  41e67c:	0042c714 	.word	0x0042c714
  41e680:	00415fa1 	.word	0x00415fa1
  41e684:	004080c5 	.word	0x004080c5
  41e688:	00409e91 	.word	0x00409e91
  41e68c:	20414868 	.word	0x20414868
  41e690:	0041e999 	.word	0x0041e999
  41e694:	0040591d 	.word	0x0040591d
  41e698:	0041f009 	.word	0x0041f009
  41e69c:	00405959 	.word	0x00405959
  41e6a0:	00408115 	.word	0x00408115
  41e6a4:	0041e205 	.word	0x0041e205
  41e6a8:	0041e525 	.word	0x0041e525
  41e6ac:	0040ad6d 	.word	0x0040ad6d
  41e6b0:	00408275 	.word	0x00408275
  41e6b4:	004080ed 	.word	0x004080ed
  41e6b8:	204000c8 	.word	0x204000c8
  41e6bc:	00406c79 	.word	0x00406c79
  41e6c0:	00418419 	.word	0x00418419

0041e6c4 <lv_btnmatrix_set_focused_btn>:
{
  41e6c4:	b538      	push	{r3, r4, r5, lr}
  41e6c6:	4605      	mov	r5, r0
  41e6c8:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
  41e6ca:	4b11      	ldr	r3, [pc, #68]	; (41e710 <lv_btnmatrix_set_focused_btn+0x4c>)
  41e6cc:	4798      	blx	r3
  41e6ce:	b928      	cbnz	r0, 41e6dc <lv_btnmatrix_set_focused_btn+0x18>
  41e6d0:	462a      	mov	r2, r5
  41e6d2:	2300      	movs	r3, #0
  41e6d4:	480f      	ldr	r0, [pc, #60]	; (41e714 <lv_btnmatrix_set_focused_btn+0x50>)
  41e6d6:	4910      	ldr	r1, [pc, #64]	; (41e718 <lv_btnmatrix_set_focused_btn+0x54>)
  41e6d8:	4788      	blx	r1
  41e6da:	e7fe      	b.n	41e6da <lv_btnmatrix_set_focused_btn+0x16>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41e6dc:	4628      	mov	r0, r5
  41e6de:	4b0f      	ldr	r3, [pc, #60]	; (41e71c <lv_btnmatrix_set_focused_btn+0x58>)
  41e6e0:	4798      	blx	r3
    if(id >= ext->btn_cnt && id != LV_BTNMATRIX_BTN_NONE) return;
  41e6e2:	8a83      	ldrh	r3, [r0, #20]
  41e6e4:	42a3      	cmp	r3, r4
  41e6e6:	d803      	bhi.n	41e6f0 <lv_btnmatrix_set_focused_btn+0x2c>
  41e6e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41e6ec:	429c      	cmp	r4, r3
  41e6ee:	d10b      	bne.n	41e708 <lv_btnmatrix_set_focused_btn+0x44>
    if(ext->btn_id_act == LV_BTNMATRIX_BTN_NONE) ext->btn_id_act = id;
  41e6f0:	8b42      	ldrh	r2, [r0, #26]
  41e6f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41e6f6:	429a      	cmp	r2, r3
  41e6f8:	d007      	beq.n	41e70a <lv_btnmatrix_set_focused_btn+0x46>
    if(id == ext->btn_id_focused) return;
  41e6fa:	8b03      	ldrh	r3, [r0, #24]
  41e6fc:	429c      	cmp	r4, r3
  41e6fe:	d003      	beq.n	41e708 <lv_btnmatrix_set_focused_btn+0x44>
    ext->btn_id_focused = id;
  41e700:	8304      	strh	r4, [r0, #24]
    lv_obj_invalidate(btnm);
  41e702:	4628      	mov	r0, r5
  41e704:	4b06      	ldr	r3, [pc, #24]	; (41e720 <lv_btnmatrix_set_focused_btn+0x5c>)
  41e706:	4798      	blx	r3
  41e708:	bd38      	pop	{r3, r4, r5, pc}
    if(ext->btn_id_act == LV_BTNMATRIX_BTN_NONE) ext->btn_id_act = id;
  41e70a:	8344      	strh	r4, [r0, #26]
  41e70c:	e7f5      	b.n	41e6fa <lv_btnmatrix_set_focused_btn+0x36>
  41e70e:	bf00      	nop
  41e710:	00415f95 	.word	0x00415f95
  41e714:	0042c728 	.word	0x0042c728
  41e718:	00415fa1 	.word	0x00415fa1
  41e71c:	00408115 	.word	0x00408115
  41e720:	00405f99 	.word	0x00405f99

0041e724 <lv_btnmatrix_clear_btn_ctrl>:
{
  41e724:	b570      	push	{r4, r5, r6, lr}
  41e726:	4605      	mov	r5, r0
  41e728:	460c      	mov	r4, r1
  41e72a:	4616      	mov	r6, r2
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
  41e72c:	4b0d      	ldr	r3, [pc, #52]	; (41e764 <lv_btnmatrix_clear_btn_ctrl+0x40>)
  41e72e:	4798      	blx	r3
  41e730:	b928      	cbnz	r0, 41e73e <lv_btnmatrix_clear_btn_ctrl+0x1a>
  41e732:	462a      	mov	r2, r5
  41e734:	2300      	movs	r3, #0
  41e736:	480c      	ldr	r0, [pc, #48]	; (41e768 <lv_btnmatrix_clear_btn_ctrl+0x44>)
  41e738:	490c      	ldr	r1, [pc, #48]	; (41e76c <lv_btnmatrix_clear_btn_ctrl+0x48>)
  41e73a:	4788      	blx	r1
  41e73c:	e7fe      	b.n	41e73c <lv_btnmatrix_clear_btn_ctrl+0x18>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41e73e:	4628      	mov	r0, r5
  41e740:	4b0b      	ldr	r3, [pc, #44]	; (41e770 <lv_btnmatrix_clear_btn_ctrl+0x4c>)
  41e742:	4798      	blx	r3
    if(btn_id >= ext->btn_cnt) return;
  41e744:	8a83      	ldrh	r3, [r0, #20]
  41e746:	42a3      	cmp	r3, r4
  41e748:	d800      	bhi.n	41e74c <lv_btnmatrix_clear_btn_ctrl+0x28>
  41e74a:	bd70      	pop	{r4, r5, r6, pc}
    ext->ctrl_bits[btn_id] &= (~ctrl);
  41e74c:	6882      	ldr	r2, [r0, #8]
  41e74e:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
  41e752:	ea23 0306 	bic.w	r3, r3, r6
  41e756:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    invalidate_button_area(btnm, btn_id);
  41e75a:	4621      	mov	r1, r4
  41e75c:	4628      	mov	r0, r5
  41e75e:	4b05      	ldr	r3, [pc, #20]	; (41e774 <lv_btnmatrix_clear_btn_ctrl+0x50>)
  41e760:	4798      	blx	r3
  41e762:	e7f2      	b.n	41e74a <lv_btnmatrix_clear_btn_ctrl+0x26>
  41e764:	00415f95 	.word	0x00415f95
  41e768:	0042c728 	.word	0x0042c728
  41e76c:	00415fa1 	.word	0x00415fa1
  41e770:	00408115 	.word	0x00408115
  41e774:	0041e0c9 	.word	0x0041e0c9

0041e778 <lv_btnmatrix_clear_btn_ctrl_all>:
{
  41e778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41e77a:	4605      	mov	r5, r0
  41e77c:	460f      	mov	r7, r1
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
  41e77e:	4b0d      	ldr	r3, [pc, #52]	; (41e7b4 <lv_btnmatrix_clear_btn_ctrl_all+0x3c>)
  41e780:	4798      	blx	r3
  41e782:	b928      	cbnz	r0, 41e790 <lv_btnmatrix_clear_btn_ctrl_all+0x18>
  41e784:	462a      	mov	r2, r5
  41e786:	2300      	movs	r3, #0
  41e788:	480b      	ldr	r0, [pc, #44]	; (41e7b8 <lv_btnmatrix_clear_btn_ctrl_all+0x40>)
  41e78a:	490c      	ldr	r1, [pc, #48]	; (41e7bc <lv_btnmatrix_clear_btn_ctrl_all+0x44>)
  41e78c:	4788      	blx	r1
  41e78e:	e7fe      	b.n	41e78e <lv_btnmatrix_clear_btn_ctrl_all+0x16>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41e790:	4628      	mov	r0, r5
  41e792:	4b0b      	ldr	r3, [pc, #44]	; (41e7c0 <lv_btnmatrix_clear_btn_ctrl_all+0x48>)
  41e794:	4798      	blx	r3
  41e796:	4606      	mov	r6, r0
    for(i = 0; i < ext->btn_cnt; i++) {
  41e798:	2400      	movs	r4, #0
  41e79a:	e006      	b.n	41e7aa <lv_btnmatrix_clear_btn_ctrl_all+0x32>
        lv_btnmatrix_clear_btn_ctrl(btnm, i, ctrl);
  41e79c:	463a      	mov	r2, r7
  41e79e:	4621      	mov	r1, r4
  41e7a0:	4628      	mov	r0, r5
  41e7a2:	4b08      	ldr	r3, [pc, #32]	; (41e7c4 <lv_btnmatrix_clear_btn_ctrl_all+0x4c>)
  41e7a4:	4798      	blx	r3
    for(i = 0; i < ext->btn_cnt; i++) {
  41e7a6:	3401      	adds	r4, #1
  41e7a8:	b2a4      	uxth	r4, r4
  41e7aa:	8ab3      	ldrh	r3, [r6, #20]
  41e7ac:	429c      	cmp	r4, r3
  41e7ae:	d3f5      	bcc.n	41e79c <lv_btnmatrix_clear_btn_ctrl_all+0x24>
}
  41e7b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41e7b2:	bf00      	nop
  41e7b4:	00415f95 	.word	0x00415f95
  41e7b8:	0042c728 	.word	0x0042c728
  41e7bc:	00415fa1 	.word	0x00415fa1
  41e7c0:	00408115 	.word	0x00408115
  41e7c4:	0041e725 	.word	0x0041e725

0041e7c8 <lv_btnmatrix_set_btn_ctrl>:
{
  41e7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41e7ca:	4605      	mov	r5, r0
  41e7cc:	460c      	mov	r4, r1
  41e7ce:	4616      	mov	r6, r2
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
  41e7d0:	4b13      	ldr	r3, [pc, #76]	; (41e820 <lv_btnmatrix_set_btn_ctrl+0x58>)
  41e7d2:	4798      	blx	r3
  41e7d4:	b928      	cbnz	r0, 41e7e2 <lv_btnmatrix_set_btn_ctrl+0x1a>
  41e7d6:	462a      	mov	r2, r5
  41e7d8:	2300      	movs	r3, #0
  41e7da:	4812      	ldr	r0, [pc, #72]	; (41e824 <lv_btnmatrix_set_btn_ctrl+0x5c>)
  41e7dc:	4912      	ldr	r1, [pc, #72]	; (41e828 <lv_btnmatrix_set_btn_ctrl+0x60>)
  41e7de:	4788      	blx	r1
  41e7e0:	e7fe      	b.n	41e7e0 <lv_btnmatrix_set_btn_ctrl+0x18>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41e7e2:	4628      	mov	r0, r5
  41e7e4:	4b11      	ldr	r3, [pc, #68]	; (41e82c <lv_btnmatrix_set_btn_ctrl+0x64>)
  41e7e6:	4798      	blx	r3
  41e7e8:	4607      	mov	r7, r0
    if(btn_id >= ext->btn_cnt) return;
  41e7ea:	8a83      	ldrh	r3, [r0, #20]
  41e7ec:	42a3      	cmp	r3, r4
  41e7ee:	d915      	bls.n	41e81c <lv_btnmatrix_set_btn_ctrl+0x54>
    if(ext->one_check && (ctrl & LV_BTNMATRIX_CTRL_CHECK_STATE)) {
  41e7f0:	7f03      	ldrb	r3, [r0, #28]
  41e7f2:	f013 0f02 	tst.w	r3, #2
  41e7f6:	d007      	beq.n	41e808 <lv_btnmatrix_set_btn_ctrl+0x40>
  41e7f8:	f016 0f80 	tst.w	r6, #128	; 0x80
  41e7fc:	d004      	beq.n	41e808 <lv_btnmatrix_set_btn_ctrl+0x40>
        lv_btnmatrix_clear_btn_ctrl_all(btnm, LV_BTNMATRIX_CTRL_CHECK_STATE);
  41e7fe:	2180      	movs	r1, #128	; 0x80
  41e800:	4628      	mov	r0, r5
  41e802:	4b0b      	ldr	r3, [pc, #44]	; (41e830 <lv_btnmatrix_set_btn_ctrl+0x68>)
  41e804:	4798      	blx	r3
        ext->btn_id_act = btn_id;
  41e806:	837c      	strh	r4, [r7, #26]
    ext->ctrl_bits[btn_id] |= ctrl;
  41e808:	68bb      	ldr	r3, [r7, #8]
  41e80a:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
  41e80e:	4316      	orrs	r6, r2
  41e810:	f823 6014 	strh.w	r6, [r3, r4, lsl #1]
    invalidate_button_area(btnm, btn_id);
  41e814:	4621      	mov	r1, r4
  41e816:	4628      	mov	r0, r5
  41e818:	4b06      	ldr	r3, [pc, #24]	; (41e834 <lv_btnmatrix_set_btn_ctrl+0x6c>)
  41e81a:	4798      	blx	r3
  41e81c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41e81e:	bf00      	nop
  41e820:	00415f95 	.word	0x00415f95
  41e824:	0042c728 	.word	0x0042c728
  41e828:	00415fa1 	.word	0x00415fa1
  41e82c:	00408115 	.word	0x00408115
  41e830:	0041e779 	.word	0x0041e779
  41e834:	0041e0c9 	.word	0x0041e0c9

0041e838 <lv_btnmatrix_set_btn_ctrl_all>:
{
  41e838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41e83a:	4605      	mov	r5, r0
  41e83c:	460f      	mov	r7, r1
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
  41e83e:	4b0d      	ldr	r3, [pc, #52]	; (41e874 <lv_btnmatrix_set_btn_ctrl_all+0x3c>)
  41e840:	4798      	blx	r3
  41e842:	b928      	cbnz	r0, 41e850 <lv_btnmatrix_set_btn_ctrl_all+0x18>
  41e844:	462a      	mov	r2, r5
  41e846:	2300      	movs	r3, #0
  41e848:	480b      	ldr	r0, [pc, #44]	; (41e878 <lv_btnmatrix_set_btn_ctrl_all+0x40>)
  41e84a:	490c      	ldr	r1, [pc, #48]	; (41e87c <lv_btnmatrix_set_btn_ctrl_all+0x44>)
  41e84c:	4788      	blx	r1
  41e84e:	e7fe      	b.n	41e84e <lv_btnmatrix_set_btn_ctrl_all+0x16>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41e850:	4628      	mov	r0, r5
  41e852:	4b0b      	ldr	r3, [pc, #44]	; (41e880 <lv_btnmatrix_set_btn_ctrl_all+0x48>)
  41e854:	4798      	blx	r3
  41e856:	4606      	mov	r6, r0
    for(i = 0; i < ext->btn_cnt; i++) {
  41e858:	2400      	movs	r4, #0
  41e85a:	e006      	b.n	41e86a <lv_btnmatrix_set_btn_ctrl_all+0x32>
        lv_btnmatrix_set_btn_ctrl(btnm, i, ctrl);
  41e85c:	463a      	mov	r2, r7
  41e85e:	4621      	mov	r1, r4
  41e860:	4628      	mov	r0, r5
  41e862:	4b08      	ldr	r3, [pc, #32]	; (41e884 <lv_btnmatrix_set_btn_ctrl_all+0x4c>)
  41e864:	4798      	blx	r3
    for(i = 0; i < ext->btn_cnt; i++) {
  41e866:	3401      	adds	r4, #1
  41e868:	b2a4      	uxth	r4, r4
  41e86a:	8ab3      	ldrh	r3, [r6, #20]
  41e86c:	429c      	cmp	r4, r3
  41e86e:	d3f5      	bcc.n	41e85c <lv_btnmatrix_set_btn_ctrl_all+0x24>
}
  41e870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41e872:	bf00      	nop
  41e874:	00415f95 	.word	0x00415f95
  41e878:	0042c728 	.word	0x0042c728
  41e87c:	00415fa1 	.word	0x00415fa1
  41e880:	00408115 	.word	0x00408115
  41e884:	0041e7c9 	.word	0x0041e7c9

0041e888 <lv_btnmatrix_get_map_array>:
{
  41e888:	b510      	push	{r4, lr}
  41e88a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
  41e88c:	4b06      	ldr	r3, [pc, #24]	; (41e8a8 <lv_btnmatrix_get_map_array+0x20>)
  41e88e:	4798      	blx	r3
  41e890:	b928      	cbnz	r0, 41e89e <lv_btnmatrix_get_map_array+0x16>
  41e892:	4622      	mov	r2, r4
  41e894:	2300      	movs	r3, #0
  41e896:	4805      	ldr	r0, [pc, #20]	; (41e8ac <lv_btnmatrix_get_map_array+0x24>)
  41e898:	4905      	ldr	r1, [pc, #20]	; (41e8b0 <lv_btnmatrix_get_map_array+0x28>)
  41e89a:	4788      	blx	r1
  41e89c:	e7fe      	b.n	41e89c <lv_btnmatrix_get_map_array+0x14>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41e89e:	4620      	mov	r0, r4
  41e8a0:	4b04      	ldr	r3, [pc, #16]	; (41e8b4 <lv_btnmatrix_get_map_array+0x2c>)
  41e8a2:	4798      	blx	r3
}
  41e8a4:	6800      	ldr	r0, [r0, #0]
  41e8a6:	bd10      	pop	{r4, pc}
  41e8a8:	00415f95 	.word	0x00415f95
  41e8ac:	0042c728 	.word	0x0042c728
  41e8b0:	00415fa1 	.word	0x00415fa1
  41e8b4:	00408115 	.word	0x00408115

0041e8b8 <lv_btnmatrix_get_active_btn>:
{
  41e8b8:	b510      	push	{r4, lr}
  41e8ba:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
  41e8bc:	4b06      	ldr	r3, [pc, #24]	; (41e8d8 <lv_btnmatrix_get_active_btn+0x20>)
  41e8be:	4798      	blx	r3
  41e8c0:	b928      	cbnz	r0, 41e8ce <lv_btnmatrix_get_active_btn+0x16>
  41e8c2:	4622      	mov	r2, r4
  41e8c4:	2300      	movs	r3, #0
  41e8c6:	4805      	ldr	r0, [pc, #20]	; (41e8dc <lv_btnmatrix_get_active_btn+0x24>)
  41e8c8:	4905      	ldr	r1, [pc, #20]	; (41e8e0 <lv_btnmatrix_get_active_btn+0x28>)
  41e8ca:	4788      	blx	r1
  41e8cc:	e7fe      	b.n	41e8cc <lv_btnmatrix_get_active_btn+0x14>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41e8ce:	4620      	mov	r0, r4
  41e8d0:	4b04      	ldr	r3, [pc, #16]	; (41e8e4 <lv_btnmatrix_get_active_btn+0x2c>)
  41e8d2:	4798      	blx	r3
}
  41e8d4:	8b40      	ldrh	r0, [r0, #26]
  41e8d6:	bd10      	pop	{r4, pc}
  41e8d8:	00415f95 	.word	0x00415f95
  41e8dc:	0042c728 	.word	0x0042c728
  41e8e0:	00415fa1 	.word	0x00415fa1
  41e8e4:	00408115 	.word	0x00408115

0041e8e8 <lv_btnmatrix_get_focused_btn>:
{
  41e8e8:	b510      	push	{r4, lr}
  41e8ea:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
  41e8ec:	4b06      	ldr	r3, [pc, #24]	; (41e908 <lv_btnmatrix_get_focused_btn+0x20>)
  41e8ee:	4798      	blx	r3
  41e8f0:	b928      	cbnz	r0, 41e8fe <lv_btnmatrix_get_focused_btn+0x16>
  41e8f2:	4622      	mov	r2, r4
  41e8f4:	2300      	movs	r3, #0
  41e8f6:	4805      	ldr	r0, [pc, #20]	; (41e90c <lv_btnmatrix_get_focused_btn+0x24>)
  41e8f8:	4905      	ldr	r1, [pc, #20]	; (41e910 <lv_btnmatrix_get_focused_btn+0x28>)
  41e8fa:	4788      	blx	r1
  41e8fc:	e7fe      	b.n	41e8fc <lv_btnmatrix_get_focused_btn+0x14>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41e8fe:	4620      	mov	r0, r4
  41e900:	4b04      	ldr	r3, [pc, #16]	; (41e914 <lv_btnmatrix_get_focused_btn+0x2c>)
  41e902:	4798      	blx	r3
}
  41e904:	8b00      	ldrh	r0, [r0, #24]
  41e906:	bd10      	pop	{r4, pc}
  41e908:	00415f95 	.word	0x00415f95
  41e90c:	0042c728 	.word	0x0042c728
  41e910:	00415fa1 	.word	0x00415fa1
  41e914:	00408115 	.word	0x00408115

0041e918 <lv_btnmatrix_get_btn_ctrl>:
{
  41e918:	b570      	push	{r4, r5, r6, lr}
  41e91a:	4605      	mov	r5, r0
  41e91c:	460c      	mov	r4, r1
  41e91e:	4616      	mov	r6, r2
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
  41e920:	4b0c      	ldr	r3, [pc, #48]	; (41e954 <lv_btnmatrix_get_btn_ctrl+0x3c>)
  41e922:	4798      	blx	r3
  41e924:	b928      	cbnz	r0, 41e932 <lv_btnmatrix_get_btn_ctrl+0x1a>
  41e926:	462a      	mov	r2, r5
  41e928:	2300      	movs	r3, #0
  41e92a:	480b      	ldr	r0, [pc, #44]	; (41e958 <lv_btnmatrix_get_btn_ctrl+0x40>)
  41e92c:	490b      	ldr	r1, [pc, #44]	; (41e95c <lv_btnmatrix_get_btn_ctrl+0x44>)
  41e92e:	4788      	blx	r1
  41e930:	e7fe      	b.n	41e930 <lv_btnmatrix_get_btn_ctrl+0x18>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41e932:	4628      	mov	r0, r5
  41e934:	4b0a      	ldr	r3, [pc, #40]	; (41e960 <lv_btnmatrix_get_btn_ctrl+0x48>)
  41e936:	4798      	blx	r3
    if(btn_id >= ext->btn_cnt) return false;
  41e938:	8a83      	ldrh	r3, [r0, #20]
  41e93a:	42a3      	cmp	r3, r4
  41e93c:	d907      	bls.n	41e94e <lv_btnmatrix_get_btn_ctrl+0x36>
    return (ext->ctrl_bits[btn_id] & ctrl) ? true : false;
  41e93e:	6883      	ldr	r3, [r0, #8]
  41e940:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
  41e944:	4233      	tst	r3, r6
  41e946:	bf14      	ite	ne
  41e948:	2001      	movne	r0, #1
  41e94a:	2000      	moveq	r0, #0
  41e94c:	bd70      	pop	{r4, r5, r6, pc}
    if(btn_id >= ext->btn_cnt) return false;
  41e94e:	2000      	movs	r0, #0
}
  41e950:	bd70      	pop	{r4, r5, r6, pc}
  41e952:	bf00      	nop
  41e954:	00415f95 	.word	0x00415f95
  41e958:	0042c728 	.word	0x0042c728
  41e95c:	00415fa1 	.word	0x00415fa1
  41e960:	00408115 	.word	0x00408115

0041e964 <make_one_button_toggled>:
 * It simply clears the toggle flag on other buttons.
 * @param btnm Button matrix object
 * @param btn_idx Button that should remain toggled
 */
static void make_one_button_toggled(lv_obj_t * btnm, uint16_t btn_idx)
{
  41e964:	b570      	push	{r4, r5, r6, lr}
  41e966:	4604      	mov	r4, r0
  41e968:	460e      	mov	r6, r1
    /*Save whether the button was toggled*/
    bool was_toggled = lv_btnmatrix_get_btn_ctrl(btnm, btn_idx, LV_BTNMATRIX_CTRL_CHECK_STATE);
  41e96a:	2280      	movs	r2, #128	; 0x80
  41e96c:	4b07      	ldr	r3, [pc, #28]	; (41e98c <make_one_button_toggled+0x28>)
  41e96e:	4798      	blx	r3
  41e970:	4605      	mov	r5, r0

    lv_btnmatrix_clear_btn_ctrl_all(btnm, LV_BTNMATRIX_CTRL_CHECK_STATE);
  41e972:	2180      	movs	r1, #128	; 0x80
  41e974:	4620      	mov	r0, r4
  41e976:	4b06      	ldr	r3, [pc, #24]	; (41e990 <make_one_button_toggled+0x2c>)
  41e978:	4798      	blx	r3

    if(was_toggled) lv_btnmatrix_set_btn_ctrl(btnm, btn_idx, LV_BTNMATRIX_CTRL_CHECK_STATE);
  41e97a:	b905      	cbnz	r5, 41e97e <make_one_button_toggled+0x1a>
  41e97c:	bd70      	pop	{r4, r5, r6, pc}
  41e97e:	2280      	movs	r2, #128	; 0x80
  41e980:	4631      	mov	r1, r6
  41e982:	4620      	mov	r0, r4
  41e984:	4b03      	ldr	r3, [pc, #12]	; (41e994 <make_one_button_toggled+0x30>)
  41e986:	4798      	blx	r3
}
  41e988:	e7f8      	b.n	41e97c <make_one_button_toggled+0x18>
  41e98a:	bf00      	nop
  41e98c:	0041e919 	.word	0x0041e919
  41e990:	0041e779 	.word	0x0041e779
  41e994:	0041e7c9 	.word	0x0041e7c9

0041e998 <lv_btnmatrix_signal>:
{
  41e998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41e99c:	b085      	sub	sp, #20
  41e99e:	4605      	mov	r5, r0
  41e9a0:	460f      	mov	r7, r1
  41e9a2:	4690      	mov	r8, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
  41e9a4:	2908      	cmp	r1, #8
  41e9a6:	d009      	beq.n	41e9bc <lv_btnmatrix_signal+0x24>
    res = ancestor_signal(btnm, sign, param);
  41e9a8:	4b9b      	ldr	r3, [pc, #620]	; (41ec18 <lv_btnmatrix_signal+0x280>)
  41e9aa:	681b      	ldr	r3, [r3, #0]
  41e9ac:	4798      	blx	r3
  41e9ae:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
  41e9b0:	2801      	cmp	r0, #1
  41e9b2:	d013      	beq.n	41e9dc <lv_btnmatrix_signal+0x44>
}
  41e9b4:	4620      	mov	r0, r4
  41e9b6:	b005      	add	sp, #20
  41e9b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        info->result = lv_btnmatrix_get_style(btnm, info->part);
  41e9bc:	7811      	ldrb	r1, [r2, #0]
  41e9be:	4b97      	ldr	r3, [pc, #604]	; (41ec1c <lv_btnmatrix_signal+0x284>)
  41e9c0:	4798      	blx	r3
  41e9c2:	f8c8 0004 	str.w	r0, [r8, #4]
        if(info->result != NULL) return LV_RES_OK;
  41e9c6:	b108      	cbz	r0, 41e9cc <lv_btnmatrix_signal+0x34>
  41e9c8:	2401      	movs	r4, #1
  41e9ca:	e7f3      	b.n	41e9b4 <lv_btnmatrix_signal+0x1c>
        else return ancestor_signal(btnm, sign, param);
  41e9cc:	4b92      	ldr	r3, [pc, #584]	; (41ec18 <lv_btnmatrix_signal+0x280>)
  41e9ce:	681b      	ldr	r3, [r3, #0]
  41e9d0:	4642      	mov	r2, r8
  41e9d2:	4639      	mov	r1, r7
  41e9d4:	4628      	mov	r0, r5
  41e9d6:	4798      	blx	r3
  41e9d8:	4604      	mov	r4, r0
  41e9da:	e7eb      	b.n	41e9b4 <lv_btnmatrix_signal+0x1c>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  41e9dc:	2f07      	cmp	r7, #7
  41e9de:	d035      	beq.n	41ea4c <lv_btnmatrix_signal+0xb4>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41e9e0:	4628      	mov	r0, r5
  41e9e2:	4b8f      	ldr	r3, [pc, #572]	; (41ec20 <lv_btnmatrix_signal+0x288>)
  41e9e4:	4798      	blx	r3
  41e9e6:	4606      	mov	r6, r0
    if(sign == LV_SIGNAL_CLEANUP) {
  41e9e8:	2f00      	cmp	r7, #0
  41e9ea:	d035      	beq.n	41ea58 <lv_btnmatrix_signal+0xc0>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
  41e9ec:	2f04      	cmp	r7, #4
  41e9ee:	d03d      	beq.n	41ea6c <lv_btnmatrix_signal+0xd4>
    else if(sign == LV_SIGNAL_COORD_CHG) {
  41e9f0:	2f02      	cmp	r7, #2
  41e9f2:	d040      	beq.n	41ea76 <lv_btnmatrix_signal+0xde>
    else if(sign == LV_SIGNAL_PRESSED) {
  41e9f4:	2f0b      	cmp	r7, #11
  41e9f6:	d05e      	beq.n	41eab6 <lv_btnmatrix_signal+0x11e>
    else if(sign == LV_SIGNAL_PRESSING) {
  41e9f8:	2f0c      	cmp	r7, #12
  41e9fa:	f000 80c2 	beq.w	41eb82 <lv_btnmatrix_signal+0x1ea>
    else if(sign == LV_SIGNAL_RELEASED) {
  41e9fe:	2f0e      	cmp	r7, #14
  41ea00:	f000 8136 	beq.w	41ec70 <lv_btnmatrix_signal+0x2d8>
    else if(sign == LV_SIGNAL_LONG_PRESS_REP) {
  41ea04:	2f10      	cmp	r7, #16
  41ea06:	f000 8192 	beq.w	41ed2e <lv_btnmatrix_signal+0x396>
    else if(sign == LV_SIGNAL_PRESS_LOST) {
  41ea0a:	2f0d      	cmp	r7, #13
  41ea0c:	f000 81b3 	beq.w	41ed76 <lv_btnmatrix_signal+0x3de>
    else if(sign == LV_SIGNAL_FOCUS) {
  41ea10:	2f16      	cmp	r7, #22
  41ea12:	f000 81b8 	beq.w	41ed86 <lv_btnmatrix_signal+0x3ee>
    else if(sign == LV_SIGNAL_DEFOCUS || sign == LV_SIGNAL_LEAVE) {
  41ea16:	2f15      	cmp	r7, #21
  41ea18:	bf18      	it	ne
  41ea1a:	2f17      	cmpne	r7, #23
  41ea1c:	f040 81d6 	bne.w	41edcc <lv_btnmatrix_signal+0x434>
        if(ext->btn_id_focused != LV_BTNMATRIX_BTN_NONE) invalidate_button_area(btnm, ext->btn_id_focused);
  41ea20:	8b01      	ldrh	r1, [r0, #24]
  41ea22:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41ea26:	4299      	cmp	r1, r3
  41ea28:	d002      	beq.n	41ea30 <lv_btnmatrix_signal+0x98>
  41ea2a:	4628      	mov	r0, r5
  41ea2c:	4b7d      	ldr	r3, [pc, #500]	; (41ec24 <lv_btnmatrix_signal+0x28c>)
  41ea2e:	4798      	blx	r3
        if(ext->btn_id_pr != LV_BTNMATRIX_BTN_NONE) invalidate_button_area(btnm, ext->btn_id_pr);
  41ea30:	8af1      	ldrh	r1, [r6, #22]
  41ea32:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41ea36:	4299      	cmp	r1, r3
  41ea38:	d002      	beq.n	41ea40 <lv_btnmatrix_signal+0xa8>
  41ea3a:	4628      	mov	r0, r5
  41ea3c:	4b79      	ldr	r3, [pc, #484]	; (41ec24 <lv_btnmatrix_signal+0x28c>)
  41ea3e:	4798      	blx	r3
        ext->btn_id_focused = LV_BTNMATRIX_BTN_NONE;
  41ea40:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41ea44:	8333      	strh	r3, [r6, #24]
        ext->btn_id_pr = LV_BTNMATRIX_BTN_NONE;
  41ea46:	82f3      	strh	r3, [r6, #22]
        ext->btn_id_act = LV_BTNMATRIX_BTN_NONE;
  41ea48:	8373      	strh	r3, [r6, #26]
  41ea4a:	e7b3      	b.n	41e9b4 <lv_btnmatrix_signal+0x1c>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  41ea4c:	4976      	ldr	r1, [pc, #472]	; (41ec28 <lv_btnmatrix_signal+0x290>)
  41ea4e:	4640      	mov	r0, r8
  41ea50:	4b76      	ldr	r3, [pc, #472]	; (41ec2c <lv_btnmatrix_signal+0x294>)
  41ea52:	4798      	blx	r3
  41ea54:	4604      	mov	r4, r0
  41ea56:	e7ad      	b.n	41e9b4 <lv_btnmatrix_signal+0x1c>
        lv_obj_clean_style_list(btnm, LV_BTNMATRIX_PART_BTN);
  41ea58:	2101      	movs	r1, #1
  41ea5a:	4628      	mov	r0, r5
  41ea5c:	4b74      	ldr	r3, [pc, #464]	; (41ec30 <lv_btnmatrix_signal+0x298>)
  41ea5e:	4798      	blx	r3
        lv_mem_free(ext->button_areas);
  41ea60:	6870      	ldr	r0, [r6, #4]
  41ea62:	4d74      	ldr	r5, [pc, #464]	; (41ec34 <lv_btnmatrix_signal+0x29c>)
  41ea64:	47a8      	blx	r5
        lv_mem_free(ext->ctrl_bits);
  41ea66:	68b0      	ldr	r0, [r6, #8]
  41ea68:	47a8      	blx	r5
  41ea6a:	e7a3      	b.n	41e9b4 <lv_btnmatrix_signal+0x1c>
        lv_btnmatrix_set_map(btnm, ext->map_p);
  41ea6c:	6801      	ldr	r1, [r0, #0]
  41ea6e:	4628      	mov	r0, r5
  41ea70:	4b71      	ldr	r3, [pc, #452]	; (41ec38 <lv_btnmatrix_signal+0x2a0>)
  41ea72:	4798      	blx	r3
  41ea74:	e79e      	b.n	41e9b4 <lv_btnmatrix_signal+0x1c>
        if(lv_obj_get_width(btnm) != lv_area_get_width(param) || lv_obj_get_height(btnm) != lv_area_get_height(param)) {
  41ea76:	4628      	mov	r0, r5
  41ea78:	4b70      	ldr	r3, [pc, #448]	; (41ec3c <lv_btnmatrix_signal+0x2a4>)
  41ea7a:	4798      	blx	r3
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41ea7c:	f8b8 3004 	ldrh.w	r3, [r8, #4]
  41ea80:	f8b8 2000 	ldrh.w	r2, [r8]
  41ea84:	1a9b      	subs	r3, r3, r2
  41ea86:	b29b      	uxth	r3, r3
  41ea88:	3301      	adds	r3, #1
  41ea8a:	b21b      	sxth	r3, r3
  41ea8c:	4283      	cmp	r3, r0
  41ea8e:	d004      	beq.n	41ea9a <lv_btnmatrix_signal+0x102>
            lv_btnmatrix_set_map(btnm, ext->map_p);
  41ea90:	6831      	ldr	r1, [r6, #0]
  41ea92:	4628      	mov	r0, r5
  41ea94:	4b68      	ldr	r3, [pc, #416]	; (41ec38 <lv_btnmatrix_signal+0x2a0>)
  41ea96:	4798      	blx	r3
  41ea98:	e78c      	b.n	41e9b4 <lv_btnmatrix_signal+0x1c>
        if(lv_obj_get_width(btnm) != lv_area_get_width(param) || lv_obj_get_height(btnm) != lv_area_get_height(param)) {
  41ea9a:	4628      	mov	r0, r5
  41ea9c:	4b68      	ldr	r3, [pc, #416]	; (41ec40 <lv_btnmatrix_signal+0x2a8>)
  41ea9e:	4798      	blx	r3
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41eaa0:	f8b8 3006 	ldrh.w	r3, [r8, #6]
  41eaa4:	f8b8 2002 	ldrh.w	r2, [r8, #2]
  41eaa8:	1a9b      	subs	r3, r3, r2
  41eaaa:	b29b      	uxth	r3, r3
  41eaac:	3301      	adds	r3, #1
  41eaae:	b21b      	sxth	r3, r3
  41eab0:	4283      	cmp	r3, r0
  41eab2:	d1ed      	bne.n	41ea90 <lv_btnmatrix_signal+0xf8>
  41eab4:	e77e      	b.n	41e9b4 <lv_btnmatrix_signal+0x1c>
        invalidate_button_area(btnm, ext->btn_id_pr);
  41eab6:	8ac1      	ldrh	r1, [r0, #22]
  41eab8:	4628      	mov	r0, r5
  41eaba:	4b5a      	ldr	r3, [pc, #360]	; (41ec24 <lv_btnmatrix_signal+0x28c>)
  41eabc:	4798      	blx	r3
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
  41eabe:	4b61      	ldr	r3, [pc, #388]	; (41ec44 <lv_btnmatrix_signal+0x2ac>)
  41eac0:	4798      	blx	r3
  41eac2:	4b61      	ldr	r3, [pc, #388]	; (41ec48 <lv_btnmatrix_signal+0x2b0>)
  41eac4:	4798      	blx	r3
        if(indev_type == LV_INDEV_TYPE_POINTER || indev_type == LV_INDEV_TYPE_BUTTON) {
  41eac6:	2803      	cmp	r0, #3
  41eac8:	bf18      	it	ne
  41eaca:	2801      	cmpne	r0, #1
  41eacc:	d027      	beq.n	41eb1e <lv_btnmatrix_signal+0x186>
        else if(indev_type == LV_INDEV_TYPE_KEYPAD || (indev_type == LV_INDEV_TYPE_ENCODER &&
  41eace:	2802      	cmp	r0, #2
  41ead0:	d051      	beq.n	41eb76 <lv_btnmatrix_signal+0x1de>
  41ead2:	2804      	cmp	r0, #4
  41ead4:	d048      	beq.n	41eb68 <lv_btnmatrix_signal+0x1d0>
        if(ext->btn_id_pr != LV_BTNMATRIX_BTN_NONE) {
  41ead6:	8af7      	ldrh	r7, [r6, #22]
  41ead8:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41eadc:	429f      	cmp	r7, r3
  41eade:	f43f af69 	beq.w	41e9b4 <lv_btnmatrix_signal+0x1c>
            if(button_is_click_trig(ext->ctrl_bits[ext->btn_id_pr]) == false &&
  41eae2:	68b3      	ldr	r3, [r6, #8]
  41eae4:	f833 6017 	ldrh.w	r6, [r3, r7, lsl #1]
  41eae8:	4630      	mov	r0, r6
  41eaea:	4b58      	ldr	r3, [pc, #352]	; (41ec4c <lv_btnmatrix_signal+0x2b4>)
  41eaec:	4798      	blx	r3
  41eaee:	2800      	cmp	r0, #0
  41eaf0:	f47f af60 	bne.w	41e9b4 <lv_btnmatrix_signal+0x1c>
               button_is_inactive(ext->ctrl_bits[ext->btn_id_pr]) == false &&
  41eaf4:	4630      	mov	r0, r6
  41eaf6:	4b56      	ldr	r3, [pc, #344]	; (41ec50 <lv_btnmatrix_signal+0x2b8>)
  41eaf8:	4798      	blx	r3
            if(button_is_click_trig(ext->ctrl_bits[ext->btn_id_pr]) == false &&
  41eafa:	2800      	cmp	r0, #0
  41eafc:	f47f af5a 	bne.w	41e9b4 <lv_btnmatrix_signal+0x1c>
               button_is_hidden(ext->ctrl_bits[ext->btn_id_pr]) == false) {
  41eb00:	4630      	mov	r0, r6
  41eb02:	4b54      	ldr	r3, [pc, #336]	; (41ec54 <lv_btnmatrix_signal+0x2bc>)
  41eb04:	4798      	blx	r3
               button_is_inactive(ext->ctrl_bits[ext->btn_id_pr]) == false &&
  41eb06:	2800      	cmp	r0, #0
  41eb08:	f47f af54 	bne.w	41e9b4 <lv_btnmatrix_signal+0x1c>
                uint32_t b = ext->btn_id_pr;
  41eb0c:	aa04      	add	r2, sp, #16
  41eb0e:	f842 7d08 	str.w	r7, [r2, #-8]!
                res        = lv_event_send(btnm, LV_EVENT_VALUE_CHANGED, &b);
  41eb12:	2110      	movs	r1, #16
  41eb14:	4628      	mov	r0, r5
  41eb16:	4b50      	ldr	r3, [pc, #320]	; (41ec58 <lv_btnmatrix_signal+0x2c0>)
  41eb18:	4798      	blx	r3
  41eb1a:	4604      	mov	r4, r0
  41eb1c:	e74a      	b.n	41e9b4 <lv_btnmatrix_signal+0x1c>
            lv_indev_get_point(param, &p);
  41eb1e:	a903      	add	r1, sp, #12
  41eb20:	4640      	mov	r0, r8
  41eb22:	4b4e      	ldr	r3, [pc, #312]	; (41ec5c <lv_btnmatrix_signal+0x2c4>)
  41eb24:	4798      	blx	r3
            btn_pr = get_button_from_point(btnm, &p);
  41eb26:	a903      	add	r1, sp, #12
  41eb28:	4628      	mov	r0, r5
  41eb2a:	4b4d      	ldr	r3, [pc, #308]	; (41ec60 <lv_btnmatrix_signal+0x2c8>)
  41eb2c:	4798      	blx	r3
  41eb2e:	4607      	mov	r7, r0
            if(btn_pr != LV_BTNMATRIX_BTN_NONE) {
  41eb30:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41eb34:	4298      	cmp	r0, r3
  41eb36:	d0ce      	beq.n	41ead6 <lv_btnmatrix_signal+0x13e>
                if(button_is_inactive(ext->ctrl_bits[btn_pr]) == false &&
  41eb38:	68b3      	ldr	r3, [r6, #8]
  41eb3a:	f833 8010 	ldrh.w	r8, [r3, r0, lsl #1]
  41eb3e:	4640      	mov	r0, r8
  41eb40:	4b43      	ldr	r3, [pc, #268]	; (41ec50 <lv_btnmatrix_signal+0x2b8>)
  41eb42:	4798      	blx	r3
  41eb44:	2800      	cmp	r0, #0
  41eb46:	d1c6      	bne.n	41ead6 <lv_btnmatrix_signal+0x13e>
                   button_is_hidden(ext->ctrl_bits[btn_pr]) == false) {
  41eb48:	4640      	mov	r0, r8
  41eb4a:	4b42      	ldr	r3, [pc, #264]	; (41ec54 <lv_btnmatrix_signal+0x2bc>)
  41eb4c:	4798      	blx	r3
                if(button_is_inactive(ext->ctrl_bits[btn_pr]) == false &&
  41eb4e:	2800      	cmp	r0, #0
  41eb50:	d1c1      	bne.n	41ead6 <lv_btnmatrix_signal+0x13e>
                    invalidate_button_area(btnm, ext->btn_id_pr) /*Invalidate the old area*/;
  41eb52:	8af1      	ldrh	r1, [r6, #22]
  41eb54:	4628      	mov	r0, r5
  41eb56:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 41ec24 <lv_btnmatrix_signal+0x28c>
  41eb5a:	47c0      	blx	r8
                    ext->btn_id_pr = btn_pr;
  41eb5c:	82f7      	strh	r7, [r6, #22]
                    ext->btn_id_act = btn_pr;
  41eb5e:	8377      	strh	r7, [r6, #26]
                    invalidate_button_area(btnm, ext->btn_id_pr); /*Invalidate the new area*/
  41eb60:	4639      	mov	r1, r7
  41eb62:	4628      	mov	r0, r5
  41eb64:	47c0      	blx	r8
  41eb66:	e7b6      	b.n	41ead6 <lv_btnmatrix_signal+0x13e>
                                                       lv_group_get_editing(lv_obj_get_group(btnm)))) {
  41eb68:	4628      	mov	r0, r5
  41eb6a:	4b3e      	ldr	r3, [pc, #248]	; (41ec64 <lv_btnmatrix_signal+0x2cc>)
  41eb6c:	4798      	blx	r3
  41eb6e:	4b3e      	ldr	r3, [pc, #248]	; (41ec68 <lv_btnmatrix_signal+0x2d0>)
  41eb70:	4798      	blx	r3
        else if(indev_type == LV_INDEV_TYPE_KEYPAD || (indev_type == LV_INDEV_TYPE_ENCODER &&
  41eb72:	2800      	cmp	r0, #0
  41eb74:	d0af      	beq.n	41ead6 <lv_btnmatrix_signal+0x13e>
            ext->btn_id_pr = ext->btn_id_focused;
  41eb76:	8b31      	ldrh	r1, [r6, #24]
  41eb78:	82f1      	strh	r1, [r6, #22]
            invalidate_button_area(btnm, ext->btn_id_focused);
  41eb7a:	4628      	mov	r0, r5
  41eb7c:	4b29      	ldr	r3, [pc, #164]	; (41ec24 <lv_btnmatrix_signal+0x28c>)
  41eb7e:	4798      	blx	r3
  41eb80:	e7a9      	b.n	41ead6 <lv_btnmatrix_signal+0x13e>
        lv_indev_t * indev = lv_indev_get_act();
  41eb82:	4b30      	ldr	r3, [pc, #192]	; (41ec44 <lv_btnmatrix_signal+0x2ac>)
  41eb84:	4798      	blx	r3
  41eb86:	4607      	mov	r7, r0
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
  41eb88:	4b2f      	ldr	r3, [pc, #188]	; (41ec48 <lv_btnmatrix_signal+0x2b0>)
  41eb8a:	4798      	blx	r3
        if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) return LV_RES_OK;
  41eb8c:	2802      	cmp	r0, #2
  41eb8e:	bf18      	it	ne
  41eb90:	2804      	cmpne	r0, #4
  41eb92:	f43f af0f 	beq.w	41e9b4 <lv_btnmatrix_signal+0x1c>
        lv_indev_get_point(indev, &p);
  41eb96:	a903      	add	r1, sp, #12
  41eb98:	4638      	mov	r0, r7
  41eb9a:	4b30      	ldr	r3, [pc, #192]	; (41ec5c <lv_btnmatrix_signal+0x2c4>)
  41eb9c:	4798      	blx	r3
        btn_pr = get_button_from_point(btnm, &p);
  41eb9e:	a903      	add	r1, sp, #12
  41eba0:	4628      	mov	r0, r5
  41eba2:	4b2f      	ldr	r3, [pc, #188]	; (41ec60 <lv_btnmatrix_signal+0x2c8>)
  41eba4:	4798      	blx	r3
  41eba6:	4607      	mov	r7, r0
        if(btn_pr != ext->btn_id_pr) {
  41eba8:	8af1      	ldrh	r1, [r6, #22]
  41ebaa:	4288      	cmp	r0, r1
  41ebac:	f43f af02 	beq.w	41e9b4 <lv_btnmatrix_signal+0x1c>
            if(ext->btn_id_pr != LV_BTNMATRIX_BTN_NONE) {
  41ebb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41ebb4:	4299      	cmp	r1, r3
  41ebb6:	d002      	beq.n	41ebbe <lv_btnmatrix_signal+0x226>
                invalidate_button_area(btnm, ext->btn_id_pr);
  41ebb8:	4628      	mov	r0, r5
  41ebba:	4b1a      	ldr	r3, [pc, #104]	; (41ec24 <lv_btnmatrix_signal+0x28c>)
  41ebbc:	4798      	blx	r3
            ext->btn_id_pr  = btn_pr;
  41ebbe:	82f7      	strh	r7, [r6, #22]
            ext->btn_id_act = btn_pr;
  41ebc0:	8377      	strh	r7, [r6, #26]
            lv_indev_reset_long_press(param); /*Start the log press time again on the new button*/
  41ebc2:	4640      	mov	r0, r8
  41ebc4:	4b29      	ldr	r3, [pc, #164]	; (41ec6c <lv_btnmatrix_signal+0x2d4>)
  41ebc6:	4798      	blx	r3
            if(btn_pr != LV_BTNMATRIX_BTN_NONE &&
  41ebc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41ebcc:	429f      	cmp	r7, r3
  41ebce:	f43f aef1 	beq.w	41e9b4 <lv_btnmatrix_signal+0x1c>
               button_is_inactive(ext->ctrl_bits[btn_pr]) == false &&
  41ebd2:	68b3      	ldr	r3, [r6, #8]
  41ebd4:	f833 8017 	ldrh.w	r8, [r3, r7, lsl #1]
  41ebd8:	4640      	mov	r0, r8
  41ebda:	4b1d      	ldr	r3, [pc, #116]	; (41ec50 <lv_btnmatrix_signal+0x2b8>)
  41ebdc:	4798      	blx	r3
            if(btn_pr != LV_BTNMATRIX_BTN_NONE &&
  41ebde:	2800      	cmp	r0, #0
  41ebe0:	f47f aee8 	bne.w	41e9b4 <lv_btnmatrix_signal+0x1c>
               button_is_hidden(ext->ctrl_bits[btn_pr]) == false) {
  41ebe4:	4640      	mov	r0, r8
  41ebe6:	4b1b      	ldr	r3, [pc, #108]	; (41ec54 <lv_btnmatrix_signal+0x2bc>)
  41ebe8:	4798      	blx	r3
               button_is_inactive(ext->ctrl_bits[btn_pr]) == false &&
  41ebea:	2800      	cmp	r0, #0
  41ebec:	f47f aee2 	bne.w	41e9b4 <lv_btnmatrix_signal+0x1c>
                invalidate_button_area(btnm, btn_pr);
  41ebf0:	4639      	mov	r1, r7
  41ebf2:	4628      	mov	r0, r5
  41ebf4:	4b0b      	ldr	r3, [pc, #44]	; (41ec24 <lv_btnmatrix_signal+0x28c>)
  41ebf6:	4798      	blx	r3
                if(button_is_click_trig(ext->ctrl_bits[btn_pr]) == false) {
  41ebf8:	68b3      	ldr	r3, [r6, #8]
  41ebfa:	f833 0017 	ldrh.w	r0, [r3, r7, lsl #1]
  41ebfe:	4b13      	ldr	r3, [pc, #76]	; (41ec4c <lv_btnmatrix_signal+0x2b4>)
  41ec00:	4798      	blx	r3
  41ec02:	2800      	cmp	r0, #0
  41ec04:	f47f aed6 	bne.w	41e9b4 <lv_btnmatrix_signal+0x1c>
                    uint32_t b = btn_pr;
  41ec08:	aa04      	add	r2, sp, #16
  41ec0a:	f842 7d08 	str.w	r7, [r2, #-8]!
                    lv_event_send(btnm, LV_EVENT_VALUE_CHANGED, &b);
  41ec0e:	2110      	movs	r1, #16
  41ec10:	4628      	mov	r0, r5
  41ec12:	4b11      	ldr	r3, [pc, #68]	; (41ec58 <lv_btnmatrix_signal+0x2c0>)
  41ec14:	4798      	blx	r3
  41ec16:	e6cd      	b.n	41e9b4 <lv_btnmatrix_signal+0x1c>
  41ec18:	2041486c 	.word	0x2041486c
  41ec1c:	0041debd 	.word	0x0041debd
  41ec20:	00408115 	.word	0x00408115
  41ec24:	0041e0c9 	.word	0x0041e0c9
  41ec28:	0042fe48 	.word	0x0042fe48
  41ec2c:	004083d1 	.word	0x004083d1
  41ec30:	00405d15 	.word	0x00405d15
  41ec34:	0041679d 	.word	0x0041679d
  41ec38:	0041e205 	.word	0x0041e205
  41ec3c:	00405bc1 	.word	0x00405bc1
  41ec40:	00405bf1 	.word	0x00405bf1
  41ec44:	00404c51 	.word	0x00404c51
  41ec48:	00404c5d 	.word	0x00404c5d
  41ec4c:	0041dea9 	.word	0x0041dea9
  41ec50:	0041dea3 	.word	0x0041dea3
  41ec54:	0041de97 	.word	0x0041de97
  41ec58:	004058d1 	.word	0x004058d1
  41ec5c:	00404d15 	.word	0x00404d15
  41ec60:	0041df01 	.word	0x0041df01
  41ec64:	0040813d 	.word	0x0040813d
  41ec68:	00403ae1 	.word	0x00403ae1
  41ec6c:	00404cf5 	.word	0x00404cf5
        if(ext->btn_id_pr != LV_BTNMATRIX_BTN_NONE) {
  41ec70:	8ac7      	ldrh	r7, [r0, #22]
  41ec72:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41ec76:	429f      	cmp	r7, r3
  41ec78:	f43f ae9c 	beq.w	41e9b4 <lv_btnmatrix_signal+0x1c>
            if(button_is_tgl_enabled(ext->ctrl_bits[ext->btn_id_pr]) &&
  41ec7c:	f8d0 9008 	ldr.w	r9, [r0, #8]
  41ec80:	f839 8017 	ldrh.w	r8, [r9, r7, lsl #1]
  41ec84:	4640      	mov	r0, r8
  41ec86:	4ba7      	ldr	r3, [pc, #668]	; (41ef24 <lv_btnmatrix_signal+0x58c>)
  41ec88:	4798      	blx	r3
  41ec8a:	b1c0      	cbz	r0, 41ecbe <lv_btnmatrix_signal+0x326>
               !button_is_inactive(ext->ctrl_bits[ext->btn_id_pr])) {
  41ec8c:	4640      	mov	r0, r8
  41ec8e:	4ba6      	ldr	r3, [pc, #664]	; (41ef28 <lv_btnmatrix_signal+0x590>)
  41ec90:	4798      	blx	r3
            if(button_is_tgl_enabled(ext->ctrl_bits[ext->btn_id_pr]) &&
  41ec92:	b9a0      	cbnz	r0, 41ecbe <lv_btnmatrix_signal+0x326>
                if(button_get_tgl_state(ext->ctrl_bits[ext->btn_id_pr]) && !ext->one_check) {
  41ec94:	4640      	mov	r0, r8
  41ec96:	4ba5      	ldr	r3, [pc, #660]	; (41ef2c <lv_btnmatrix_signal+0x594>)
  41ec98:	4798      	blx	r3
  41ec9a:	b140      	cbz	r0, 41ecae <lv_btnmatrix_signal+0x316>
  41ec9c:	7f33      	ldrb	r3, [r6, #28]
  41ec9e:	f013 0f02 	tst.w	r3, #2
  41eca2:	d104      	bne.n	41ecae <lv_btnmatrix_signal+0x316>
                    ext->ctrl_bits[ext->btn_id_pr] &= (~LV_BTNMATRIX_CTRL_CHECK_STATE);
  41eca4:	f028 0880 	bic.w	r8, r8, #128	; 0x80
  41eca8:	f829 8017 	strh.w	r8, [r9, r7, lsl #1]
  41ecac:	e003      	b.n	41ecb6 <lv_btnmatrix_signal+0x31e>
                    ext->ctrl_bits[ext->btn_id_pr] |= LV_BTNMATRIX_CTRL_CHECK_STATE;
  41ecae:	f048 0880 	orr.w	r8, r8, #128	; 0x80
  41ecb2:	f829 8017 	strh.w	r8, [r9, r7, lsl #1]
                if(ext->one_check) make_one_button_toggled(btnm, ext->btn_id_pr);
  41ecb6:	7f33      	ldrb	r3, [r6, #28]
  41ecb8:	f013 0f02 	tst.w	r3, #2
  41ecbc:	d132      	bne.n	41ed24 <lv_btnmatrix_signal+0x38c>
            invalidate_button_area(btnm, ext->btn_id_pr);
  41ecbe:	8af1      	ldrh	r1, [r6, #22]
  41ecc0:	4628      	mov	r0, r5
  41ecc2:	4f9b      	ldr	r7, [pc, #620]	; (41ef30 <lv_btnmatrix_signal+0x598>)
  41ecc4:	47b8      	blx	r7
            invalidate_button_area(btnm, ext->btn_id_focused);
  41ecc6:	8b31      	ldrh	r1, [r6, #24]
  41ecc8:	4628      	mov	r0, r5
  41ecca:	47b8      	blx	r7
            lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
  41eccc:	4b99      	ldr	r3, [pc, #612]	; (41ef34 <lv_btnmatrix_signal+0x59c>)
  41ecce:	4798      	blx	r3
  41ecd0:	4b99      	ldr	r3, [pc, #612]	; (41ef38 <lv_btnmatrix_signal+0x5a0>)
  41ecd2:	4798      	blx	r3
            if(indev_type == LV_INDEV_TYPE_KEYPAD || indev_type == LV_INDEV_TYPE_ENCODER) {
  41ecd4:	2804      	cmp	r0, #4
  41ecd6:	bf18      	it	ne
  41ecd8:	2802      	cmpne	r0, #2
  41ecda:	d101      	bne.n	41ece0 <lv_btnmatrix_signal+0x348>
                ext->btn_id_focused = ext->btn_id_pr;
  41ecdc:	8af3      	ldrh	r3, [r6, #22]
  41ecde:	8333      	strh	r3, [r6, #24]
            ext->btn_id_pr = LV_BTNMATRIX_BTN_NONE;
  41ece0:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41ece4:	82f3      	strh	r3, [r6, #22]
            if(button_is_click_trig(ext->ctrl_bits[ext->btn_id_act]) == true &&
  41ece6:	68b3      	ldr	r3, [r6, #8]
  41ece8:	8b77      	ldrh	r7, [r6, #26]
  41ecea:	f833 6017 	ldrh.w	r6, [r3, r7, lsl #1]
  41ecee:	4630      	mov	r0, r6
  41ecf0:	4b92      	ldr	r3, [pc, #584]	; (41ef3c <lv_btnmatrix_signal+0x5a4>)
  41ecf2:	4798      	blx	r3
  41ecf4:	2800      	cmp	r0, #0
  41ecf6:	f43f ae5d 	beq.w	41e9b4 <lv_btnmatrix_signal+0x1c>
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
  41ecfa:	4630      	mov	r0, r6
  41ecfc:	4b8a      	ldr	r3, [pc, #552]	; (41ef28 <lv_btnmatrix_signal+0x590>)
  41ecfe:	4798      	blx	r3
            if(button_is_click_trig(ext->ctrl_bits[ext->btn_id_act]) == true &&
  41ed00:	2800      	cmp	r0, #0
  41ed02:	f47f ae57 	bne.w	41e9b4 <lv_btnmatrix_signal+0x1c>
               button_is_hidden(ext->ctrl_bits[ext->btn_id_act]) == false) {
  41ed06:	4630      	mov	r0, r6
  41ed08:	4b8d      	ldr	r3, [pc, #564]	; (41ef40 <lv_btnmatrix_signal+0x5a8>)
  41ed0a:	4798      	blx	r3
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
  41ed0c:	2800      	cmp	r0, #0
  41ed0e:	f47f ae51 	bne.w	41e9b4 <lv_btnmatrix_signal+0x1c>
                uint32_t b = ext->btn_id_act;
  41ed12:	aa04      	add	r2, sp, #16
  41ed14:	f842 7d08 	str.w	r7, [r2, #-8]!
                res        = lv_event_send(btnm, LV_EVENT_VALUE_CHANGED, &b);
  41ed18:	2110      	movs	r1, #16
  41ed1a:	4628      	mov	r0, r5
  41ed1c:	4b89      	ldr	r3, [pc, #548]	; (41ef44 <lv_btnmatrix_signal+0x5ac>)
  41ed1e:	4798      	blx	r3
  41ed20:	4604      	mov	r4, r0
  41ed22:	e647      	b.n	41e9b4 <lv_btnmatrix_signal+0x1c>
                if(ext->one_check) make_one_button_toggled(btnm, ext->btn_id_pr);
  41ed24:	8af1      	ldrh	r1, [r6, #22]
  41ed26:	4628      	mov	r0, r5
  41ed28:	4b87      	ldr	r3, [pc, #540]	; (41ef48 <lv_btnmatrix_signal+0x5b0>)
  41ed2a:	4798      	blx	r3
  41ed2c:	e7c7      	b.n	41ecbe <lv_btnmatrix_signal+0x326>
        if(ext->btn_id_act != LV_BTNMATRIX_BTN_NONE) {
  41ed2e:	8b47      	ldrh	r7, [r0, #26]
  41ed30:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41ed34:	429f      	cmp	r7, r3
  41ed36:	f43f ae3d 	beq.w	41e9b4 <lv_btnmatrix_signal+0x1c>
            if(button_is_repeat_disabled(ext->ctrl_bits[ext->btn_id_act]) == false &&
  41ed3a:	6883      	ldr	r3, [r0, #8]
  41ed3c:	f833 6017 	ldrh.w	r6, [r3, r7, lsl #1]
  41ed40:	4630      	mov	r0, r6
  41ed42:	4b82      	ldr	r3, [pc, #520]	; (41ef4c <lv_btnmatrix_signal+0x5b4>)
  41ed44:	4798      	blx	r3
  41ed46:	2800      	cmp	r0, #0
  41ed48:	f47f ae34 	bne.w	41e9b4 <lv_btnmatrix_signal+0x1c>
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
  41ed4c:	4630      	mov	r0, r6
  41ed4e:	4b76      	ldr	r3, [pc, #472]	; (41ef28 <lv_btnmatrix_signal+0x590>)
  41ed50:	4798      	blx	r3
            if(button_is_repeat_disabled(ext->ctrl_bits[ext->btn_id_act]) == false &&
  41ed52:	2800      	cmp	r0, #0
  41ed54:	f47f ae2e 	bne.w	41e9b4 <lv_btnmatrix_signal+0x1c>
               button_is_hidden(ext->ctrl_bits[ext->btn_id_act]) == false) {
  41ed58:	4630      	mov	r0, r6
  41ed5a:	4b79      	ldr	r3, [pc, #484]	; (41ef40 <lv_btnmatrix_signal+0x5a8>)
  41ed5c:	4798      	blx	r3
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
  41ed5e:	2800      	cmp	r0, #0
  41ed60:	f47f ae28 	bne.w	41e9b4 <lv_btnmatrix_signal+0x1c>
                uint32_t b = ext->btn_id_act;
  41ed64:	aa04      	add	r2, sp, #16
  41ed66:	f842 7d08 	str.w	r7, [r2, #-8]!
                res        = lv_event_send(btnm, LV_EVENT_VALUE_CHANGED, &b);
  41ed6a:	2110      	movs	r1, #16
  41ed6c:	4628      	mov	r0, r5
  41ed6e:	4b75      	ldr	r3, [pc, #468]	; (41ef44 <lv_btnmatrix_signal+0x5ac>)
  41ed70:	4798      	blx	r3
  41ed72:	4604      	mov	r4, r0
  41ed74:	e61e      	b.n	41e9b4 <lv_btnmatrix_signal+0x1c>
        ext->btn_id_pr  = LV_BTNMATRIX_BTN_NONE;
  41ed76:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41ed7a:	82c3      	strh	r3, [r0, #22]
        ext->btn_id_act = LV_BTNMATRIX_BTN_NONE;
  41ed7c:	8343      	strh	r3, [r0, #26]
        lv_obj_invalidate(btnm);
  41ed7e:	4628      	mov	r0, r5
  41ed80:	4b73      	ldr	r3, [pc, #460]	; (41ef50 <lv_btnmatrix_signal+0x5b8>)
  41ed82:	4798      	blx	r3
  41ed84:	e616      	b.n	41e9b4 <lv_btnmatrix_signal+0x1c>
        lv_indev_t * indev         = lv_indev_get_act();
  41ed86:	4b6b      	ldr	r3, [pc, #428]	; (41ef34 <lv_btnmatrix_signal+0x59c>)
  41ed88:	4798      	blx	r3
  41ed8a:	4607      	mov	r7, r0
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
  41ed8c:	4b6a      	ldr	r3, [pc, #424]	; (41ef38 <lv_btnmatrix_signal+0x5a0>)
  41ed8e:	4798      	blx	r3
        if(indev == NULL) {
  41ed90:	b147      	cbz	r7, 41eda4 <lv_btnmatrix_signal+0x40c>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
  41ed92:	2804      	cmp	r0, #4
  41ed94:	d00c      	beq.n	41edb0 <lv_btnmatrix_signal+0x418>
        else if(indev_type == LV_INDEV_TYPE_KEYPAD) {
  41ed96:	2802      	cmp	r0, #2
  41ed98:	f47f ae0c 	bne.w	41e9b4 <lv_btnmatrix_signal+0x1c>
            ext->btn_id_focused = 0;
  41ed9c:	2300      	movs	r3, #0
  41ed9e:	8333      	strh	r3, [r6, #24]
            ext->btn_id_act = ext->btn_id_focused;
  41eda0:	8373      	strh	r3, [r6, #26]
  41eda2:	e607      	b.n	41e9b4 <lv_btnmatrix_signal+0x1c>
            indev = lv_indev_get_next(NULL);
  41eda4:	2000      	movs	r0, #0
  41eda6:	4b6b      	ldr	r3, [pc, #428]	; (41ef54 <lv_btnmatrix_signal+0x5bc>)
  41eda8:	4798      	blx	r3
            indev_type = lv_indev_get_type(indev);
  41edaa:	4b63      	ldr	r3, [pc, #396]	; (41ef38 <lv_btnmatrix_signal+0x5a0>)
  41edac:	4798      	blx	r3
  41edae:	e7f0      	b.n	41ed92 <lv_btnmatrix_signal+0x3fa>
            if(lv_group_get_editing(lv_obj_get_group(btnm))) {
  41edb0:	4628      	mov	r0, r5
  41edb2:	4b69      	ldr	r3, [pc, #420]	; (41ef58 <lv_btnmatrix_signal+0x5c0>)
  41edb4:	4798      	blx	r3
  41edb6:	4b69      	ldr	r3, [pc, #420]	; (41ef5c <lv_btnmatrix_signal+0x5c4>)
  41edb8:	4798      	blx	r3
  41edba:	b118      	cbz	r0, 41edc4 <lv_btnmatrix_signal+0x42c>
                ext->btn_id_focused = 0;
  41edbc:	2300      	movs	r3, #0
  41edbe:	8333      	strh	r3, [r6, #24]
                ext->btn_id_act = ext->btn_id_focused;
  41edc0:	8373      	strh	r3, [r6, #26]
  41edc2:	e5f7      	b.n	41e9b4 <lv_btnmatrix_signal+0x1c>
                ext->btn_id_focused = LV_BTNMATRIX_BTN_NONE;
  41edc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41edc8:	8333      	strh	r3, [r6, #24]
  41edca:	e5f3      	b.n	41e9b4 <lv_btnmatrix_signal+0x1c>
    else if(sign == LV_SIGNAL_CONTROL) {
  41edcc:	2f18      	cmp	r7, #24
  41edce:	d006      	beq.n	41edde <lv_btnmatrix_signal+0x446>
    else if(sign == LV_SIGNAL_GET_EDITABLE) {
  41edd0:	2f19      	cmp	r7, #25
  41edd2:	f47f adef 	bne.w	41e9b4 <lv_btnmatrix_signal+0x1c>
        *editable       = true;
  41edd6:	2301      	movs	r3, #1
  41edd8:	f888 3000 	strb.w	r3, [r8]
  41eddc:	e5ea      	b.n	41e9b4 <lv_btnmatrix_signal+0x1c>
        char c = *((char *)param);
  41edde:	f898 3000 	ldrb.w	r3, [r8]
        if(c == LV_KEY_RIGHT) {
  41ede2:	2b13      	cmp	r3, #19
  41ede4:	d024      	beq.n	41ee30 <lv_btnmatrix_signal+0x498>
        else if(c == LV_KEY_LEFT) {
  41ede6:	2b14      	cmp	r3, #20
  41ede8:	d038      	beq.n	41ee5c <lv_btnmatrix_signal+0x4c4>
        else if(c == LV_KEY_DOWN) {
  41edea:	2b12      	cmp	r3, #18
  41edec:	d048      	beq.n	41ee80 <lv_btnmatrix_signal+0x4e8>
        else if(c == LV_KEY_UP) {
  41edee:	2b11      	cmp	r3, #17
  41edf0:	f47f ade0 	bne.w	41e9b4 <lv_btnmatrix_signal+0x1c>
  41edf4:	2214      	movs	r2, #20
  41edf6:	2100      	movs	r1, #0
  41edf8:	4628      	mov	r0, r5
  41edfa:	4b59      	ldr	r3, [pc, #356]	; (41ef60 <lv_btnmatrix_signal+0x5c8>)
  41edfc:	4798      	blx	r3
  41edfe:	4683      	mov	fp, r0
            if(ext->btn_id_focused == LV_BTNMATRIX_BTN_NONE) {
  41ee00:	8b37      	ldrh	r7, [r6, #24]
  41ee02:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41ee06:	429f      	cmp	r7, r3
  41ee08:	f000 8088 	beq.w	41ef1c <lv_btnmatrix_signal+0x584>
                    ext->button_areas[ext->btn_id_focused].x1 + (lv_area_get_width(&ext->button_areas[ext->btn_id_focused]) >> 1);
  41ee0c:	f8d6 8004 	ldr.w	r8, [r6, #4]
  41ee10:	eb08 0ac7 	add.w	sl, r8, r7, lsl #3
  41ee14:	f838 2037 	ldrh.w	r2, [r8, r7, lsl #3]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41ee18:	f8ba 3004 	ldrh.w	r3, [sl, #4]
  41ee1c:	1a9b      	subs	r3, r3, r2
  41ee1e:	b29b      	uxth	r3, r3
  41ee20:	3301      	adds	r3, #1
  41ee22:	f343 034e 	sbfx	r3, r3, #1, #15
  41ee26:	4413      	add	r3, r2
                lv_coord_t pr_center =
  41ee28:	fa0f f983 	sxth.w	r9, r3
                for(area_above = ext->btn_id_focused; area_above >= 0; area_above--) {
  41ee2c:	b23f      	sxth	r7, r7
  41ee2e:	e09b      	b.n	41ef68 <lv_btnmatrix_signal+0x5d0>
            if(ext->btn_id_focused == LV_BTNMATRIX_BTN_NONE)
  41ee30:	8b03      	ldrh	r3, [r0, #24]
  41ee32:	f64f 72ff 	movw	r2, #65535	; 0xffff
  41ee36:	4293      	cmp	r3, r2
  41ee38:	d00d      	beq.n	41ee56 <lv_btnmatrix_signal+0x4be>
                ext->btn_id_focused++;
  41ee3a:	3301      	adds	r3, #1
  41ee3c:	8303      	strh	r3, [r0, #24]
            if(ext->btn_id_focused >= ext->btn_cnt - 1) ext->btn_id_focused = ext->btn_cnt - 1;
  41ee3e:	8b31      	ldrh	r1, [r6, #24]
  41ee40:	8ab3      	ldrh	r3, [r6, #20]
  41ee42:	1e5a      	subs	r2, r3, #1
  41ee44:	4291      	cmp	r1, r2
  41ee46:	db00      	blt.n	41ee4a <lv_btnmatrix_signal+0x4b2>
  41ee48:	8332      	strh	r2, [r6, #24]
            ext->btn_id_act = ext->btn_id_focused;
  41ee4a:	8b33      	ldrh	r3, [r6, #24]
  41ee4c:	8373      	strh	r3, [r6, #26]
            lv_obj_invalidate(btnm);
  41ee4e:	4628      	mov	r0, r5
  41ee50:	4b3f      	ldr	r3, [pc, #252]	; (41ef50 <lv_btnmatrix_signal+0x5b8>)
  41ee52:	4798      	blx	r3
  41ee54:	e5ae      	b.n	41e9b4 <lv_btnmatrix_signal+0x1c>
                ext->btn_id_focused = 0;
  41ee56:	2300      	movs	r3, #0
  41ee58:	8303      	strh	r3, [r0, #24]
  41ee5a:	e7f0      	b.n	41ee3e <lv_btnmatrix_signal+0x4a6>
            if(ext->btn_id_focused == LV_BTNMATRIX_BTN_NONE) ext->btn_id_focused = 0;
  41ee5c:	8b02      	ldrh	r2, [r0, #24]
  41ee5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41ee62:	429a      	cmp	r2, r3
  41ee64:	d009      	beq.n	41ee7a <lv_btnmatrix_signal+0x4e2>
            if(ext->btn_id_focused > 0) ext->btn_id_focused--;
  41ee66:	8b33      	ldrh	r3, [r6, #24]
  41ee68:	b10b      	cbz	r3, 41ee6e <lv_btnmatrix_signal+0x4d6>
  41ee6a:	3b01      	subs	r3, #1
  41ee6c:	8333      	strh	r3, [r6, #24]
            ext->btn_id_act = ext->btn_id_focused;
  41ee6e:	8b33      	ldrh	r3, [r6, #24]
  41ee70:	8373      	strh	r3, [r6, #26]
            lv_obj_invalidate(btnm);
  41ee72:	4628      	mov	r0, r5
  41ee74:	4b36      	ldr	r3, [pc, #216]	; (41ef50 <lv_btnmatrix_signal+0x5b8>)
  41ee76:	4798      	blx	r3
  41ee78:	e59c      	b.n	41e9b4 <lv_btnmatrix_signal+0x1c>
            if(ext->btn_id_focused == LV_BTNMATRIX_BTN_NONE) ext->btn_id_focused = 0;
  41ee7a:	2300      	movs	r3, #0
  41ee7c:	8303      	strh	r3, [r0, #24]
  41ee7e:	e7f2      	b.n	41ee66 <lv_btnmatrix_signal+0x4ce>
  41ee80:	2214      	movs	r2, #20
  41ee82:	2100      	movs	r1, #0
  41ee84:	4628      	mov	r0, r5
  41ee86:	4b36      	ldr	r3, [pc, #216]	; (41ef60 <lv_btnmatrix_signal+0x5c8>)
  41ee88:	4798      	blx	r3
  41ee8a:	9000      	str	r0, [sp, #0]
            if(ext->btn_id_focused == LV_BTNMATRIX_BTN_NONE) {
  41ee8c:	8b37      	ldrh	r7, [r6, #24]
  41ee8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41ee92:	429f      	cmp	r7, r3
  41ee94:	d010      	beq.n	41eeb8 <lv_btnmatrix_signal+0x520>
                    ext->button_areas[ext->btn_id_focused].x1 + (lv_area_get_width(&ext->button_areas[ext->btn_id_focused]) >> 1);
  41ee96:	f8d6 9004 	ldr.w	r9, [r6, #4]
  41ee9a:	eb09 0ac7 	add.w	sl, r9, r7, lsl #3
  41ee9e:	f839 2037 	ldrh.w	r2, [r9, r7, lsl #3]
  41eea2:	f8ba 3004 	ldrh.w	r3, [sl, #4]
  41eea6:	1a9b      	subs	r3, r3, r2
  41eea8:	b29b      	uxth	r3, r3
  41eeaa:	3301      	adds	r3, #1
  41eeac:	f343 034e 	sbfx	r3, r3, #1, #15
  41eeb0:	4413      	add	r3, r2
                lv_coord_t pr_center =
  41eeb2:	fa0f fb83 	sxth.w	fp, r3
                for(area_below = ext->btn_id_focused; area_below < ext->btn_cnt; area_below++) {
  41eeb6:	e004      	b.n	41eec2 <lv_btnmatrix_signal+0x52a>
                ext->btn_id_focused = 0;
  41eeb8:	2300      	movs	r3, #0
  41eeba:	8333      	strh	r3, [r6, #24]
  41eebc:	e028      	b.n	41ef10 <lv_btnmatrix_signal+0x578>
                for(area_below = ext->btn_id_focused; area_below < ext->btn_cnt; area_below++) {
  41eebe:	3701      	adds	r7, #1
  41eec0:	b2bf      	uxth	r7, r7
  41eec2:	f8b6 8014 	ldrh.w	r8, [r6, #20]
  41eec6:	4547      	cmp	r7, r8
  41eec8:	d21f      	bcs.n	41ef0a <lv_btnmatrix_signal+0x572>
                    if(ext->button_areas[area_below].y1 > ext->button_areas[ext->btn_id_focused].y1 &&
  41eeca:	eb09 03c7 	add.w	r3, r9, r7, lsl #3
  41eece:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
  41eed2:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
  41eed6:	4291      	cmp	r1, r2
  41eed8:	ddf1      	ble.n	41eebe <lv_btnmatrix_signal+0x526>
                       pr_center >= ext->button_areas[area_below].x1 &&
  41eeda:	f939 2037 	ldrsh.w	r2, [r9, r7, lsl #3]
                    if(ext->button_areas[area_below].y1 > ext->button_areas[ext->btn_id_focused].y1 &&
  41eede:	4593      	cmp	fp, r2
  41eee0:	dbed      	blt.n	41eebe <lv_btnmatrix_signal+0x526>
                       pr_center <= ext->button_areas[area_below].x2 + pad_inner &&
  41eee2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
  41eee6:	9a00      	ldr	r2, [sp, #0]
  41eee8:	4413      	add	r3, r2
                       pr_center >= ext->button_areas[area_below].x1 &&
  41eeea:	459b      	cmp	fp, r3
  41eeec:	dce7      	bgt.n	41eebe <lv_btnmatrix_signal+0x526>
                       button_is_inactive(ext->ctrl_bits[area_below]) == false &&
  41eeee:	68b3      	ldr	r3, [r6, #8]
  41eef0:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
  41eef4:	9301      	str	r3, [sp, #4]
  41eef6:	4618      	mov	r0, r3
  41eef8:	4b0b      	ldr	r3, [pc, #44]	; (41ef28 <lv_btnmatrix_signal+0x590>)
  41eefa:	4798      	blx	r3
                       pr_center <= ext->button_areas[area_below].x2 + pad_inner &&
  41eefc:	2800      	cmp	r0, #0
  41eefe:	d1de      	bne.n	41eebe <lv_btnmatrix_signal+0x526>
                       button_is_hidden(ext->ctrl_bits[area_below]) == false) {
  41ef00:	9801      	ldr	r0, [sp, #4]
  41ef02:	4b0f      	ldr	r3, [pc, #60]	; (41ef40 <lv_btnmatrix_signal+0x5a8>)
  41ef04:	4798      	blx	r3
                       button_is_inactive(ext->ctrl_bits[area_below]) == false &&
  41ef06:	2800      	cmp	r0, #0
  41ef08:	d1d9      	bne.n	41eebe <lv_btnmatrix_signal+0x526>
                if(area_below < ext->btn_cnt) ext->btn_id_focused = area_below;
  41ef0a:	4547      	cmp	r7, r8
  41ef0c:	d200      	bcs.n	41ef10 <lv_btnmatrix_signal+0x578>
  41ef0e:	8337      	strh	r7, [r6, #24]
            ext->btn_id_act = ext->btn_id_focused;
  41ef10:	8b33      	ldrh	r3, [r6, #24]
  41ef12:	8373      	strh	r3, [r6, #26]
            lv_obj_invalidate(btnm);
  41ef14:	4628      	mov	r0, r5
  41ef16:	4b0e      	ldr	r3, [pc, #56]	; (41ef50 <lv_btnmatrix_signal+0x5b8>)
  41ef18:	4798      	blx	r3
  41ef1a:	e54b      	b.n	41e9b4 <lv_btnmatrix_signal+0x1c>
                ext->btn_id_focused = 0;
  41ef1c:	2300      	movs	r3, #0
  41ef1e:	8333      	strh	r3, [r6, #24]
  41ef20:	e047      	b.n	41efb2 <lv_btnmatrix_signal+0x61a>
  41ef22:	bf00      	nop
  41ef24:	0041deaf 	.word	0x0041deaf
  41ef28:	0041dea3 	.word	0x0041dea3
  41ef2c:	0041deb5 	.word	0x0041deb5
  41ef30:	0041e0c9 	.word	0x0041e0c9
  41ef34:	00404c51 	.word	0x00404c51
  41ef38:	00404c5d 	.word	0x00404c5d
  41ef3c:	0041dea9 	.word	0x0041dea9
  41ef40:	0041de97 	.word	0x0041de97
  41ef44:	004058d1 	.word	0x004058d1
  41ef48:	0041e965 	.word	0x0041e965
  41ef4c:	0041de9d 	.word	0x0041de9d
  41ef50:	00405f99 	.word	0x00405f99
  41ef54:	00415121 	.word	0x00415121
  41ef58:	0040813d 	.word	0x0040813d
  41ef5c:	00403ae1 	.word	0x00403ae1
  41ef60:	00407485 	.word	0x00407485
                for(area_above = ext->btn_id_focused; area_above >= 0; area_above--) {
  41ef64:	3f01      	subs	r7, #1
  41ef66:	b23f      	sxth	r7, r7
  41ef68:	2f00      	cmp	r7, #0
  41ef6a:	db1f      	blt.n	41efac <lv_btnmatrix_signal+0x614>
                    if(ext->button_areas[area_above].y1 < ext->button_areas[ext->btn_id_focused].y1 &&
  41ef6c:	eb08 03c7 	add.w	r3, r8, r7, lsl #3
  41ef70:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
  41ef74:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
  41ef78:	4291      	cmp	r1, r2
  41ef7a:	daf3      	bge.n	41ef64 <lv_btnmatrix_signal+0x5cc>
                       pr_center >= ext->button_areas[area_above].x1 - pad_inner &&
  41ef7c:	f938 2037 	ldrsh.w	r2, [r8, r7, lsl #3]
  41ef80:	eba2 020b 	sub.w	r2, r2, fp
                    if(ext->button_areas[area_above].y1 < ext->button_areas[ext->btn_id_focused].y1 &&
  41ef84:	4591      	cmp	r9, r2
  41ef86:	dbed      	blt.n	41ef64 <lv_btnmatrix_signal+0x5cc>
                       pr_center <= ext->button_areas[area_above].x2 &&
  41ef88:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
                       pr_center >= ext->button_areas[area_above].x1 - pad_inner &&
  41ef8c:	4599      	cmp	r9, r3
  41ef8e:	dce9      	bgt.n	41ef64 <lv_btnmatrix_signal+0x5cc>
                       button_is_inactive(ext->ctrl_bits[area_above]) == false &&
  41ef90:	68b3      	ldr	r3, [r6, #8]
  41ef92:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
  41ef96:	9300      	str	r3, [sp, #0]
  41ef98:	4618      	mov	r0, r3
  41ef9a:	4b09      	ldr	r3, [pc, #36]	; (41efc0 <lv_btnmatrix_signal+0x628>)
  41ef9c:	4798      	blx	r3
                       pr_center <= ext->button_areas[area_above].x2 &&
  41ef9e:	2800      	cmp	r0, #0
  41efa0:	d1e0      	bne.n	41ef64 <lv_btnmatrix_signal+0x5cc>
                       button_is_hidden(ext->ctrl_bits[area_above]) == false) {
  41efa2:	9800      	ldr	r0, [sp, #0]
  41efa4:	4b07      	ldr	r3, [pc, #28]	; (41efc4 <lv_btnmatrix_signal+0x62c>)
  41efa6:	4798      	blx	r3
                       button_is_inactive(ext->ctrl_bits[area_above]) == false &&
  41efa8:	2800      	cmp	r0, #0
  41efaa:	d1db      	bne.n	41ef64 <lv_btnmatrix_signal+0x5cc>
                if(area_above >= 0) ext->btn_id_focused = area_above;
  41efac:	2f00      	cmp	r7, #0
  41efae:	db00      	blt.n	41efb2 <lv_btnmatrix_signal+0x61a>
  41efb0:	8337      	strh	r7, [r6, #24]
            ext->btn_id_act = ext->btn_id_focused;
  41efb2:	8b33      	ldrh	r3, [r6, #24]
  41efb4:	8373      	strh	r3, [r6, #26]
            lv_obj_invalidate(btnm);
  41efb6:	4628      	mov	r0, r5
  41efb8:	4b03      	ldr	r3, [pc, #12]	; (41efc8 <lv_btnmatrix_signal+0x630>)
  41efba:	4798      	blx	r3
  41efbc:	e4fa      	b.n	41e9b4 <lv_btnmatrix_signal+0x1c>
  41efbe:	bf00      	nop
  41efc0:	0041dea3 	.word	0x0041dea3
  41efc4:	0041de97 	.word	0x0041de97
  41efc8:	00405f99 	.word	0x00405f99

0041efcc <lv_btnmatrix_get_align>:
{
  41efcc:	b510      	push	{r4, lr}
  41efce:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(btnm, LV_OBJX_NAME);
  41efd0:	4b09      	ldr	r3, [pc, #36]	; (41eff8 <lv_btnmatrix_get_align+0x2c>)
  41efd2:	4798      	blx	r3
  41efd4:	b928      	cbnz	r0, 41efe2 <lv_btnmatrix_get_align+0x16>
  41efd6:	4622      	mov	r2, r4
  41efd8:	2300      	movs	r3, #0
  41efda:	4808      	ldr	r0, [pc, #32]	; (41effc <lv_btnmatrix_get_align+0x30>)
  41efdc:	4908      	ldr	r1, [pc, #32]	; (41f000 <lv_btnmatrix_get_align+0x34>)
  41efde:	4788      	blx	r1
  41efe0:	e7fe      	b.n	41efe0 <lv_btnmatrix_get_align+0x14>
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
  41efe2:	4620      	mov	r0, r4
  41efe4:	4b07      	ldr	r3, [pc, #28]	; (41f004 <lv_btnmatrix_get_align+0x38>)
  41efe6:	4798      	blx	r3
    lv_label_align_t align = ext->align;
  41efe8:	7f00      	ldrb	r0, [r0, #28]
  41efea:	f3c0 0081 	ubfx	r0, r0, #2, #2
    if(align == LV_LABEL_ALIGN_AUTO) {
  41efee:	2803      	cmp	r0, #3
  41eff0:	d000      	beq.n	41eff4 <lv_btnmatrix_get_align+0x28>
}
  41eff2:	bd10      	pop	{r4, pc}
        align = LV_LABEL_ALIGN_LEFT;
  41eff4:	2000      	movs	r0, #0
  41eff6:	e7fc      	b.n	41eff2 <lv_btnmatrix_get_align+0x26>
  41eff8:	00415f95 	.word	0x00415f95
  41effc:	0042c728 	.word	0x0042c728
  41f000:	00415fa1 	.word	0x00415fa1
  41f004:	00408115 	.word	0x00408115

0041f008 <lv_btnmatrix_design>:
{
  41f008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41f00c:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
  41f010:	9005      	str	r0, [sp, #20]
  41f012:	9104      	str	r1, [sp, #16]
    if(mode == LV_DESIGN_COVER_CHK) {
  41f014:	2a02      	cmp	r2, #2
  41f016:	d008      	beq.n	41f02a <lv_btnmatrix_design+0x22>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
  41f018:	b15a      	cbz	r2, 41f032 <lv_btnmatrix_design+0x2a>
    else if(mode == LV_DESIGN_DRAW_POST) {
  41f01a:	2a01      	cmp	r2, #1
  41f01c:	f000 823d 	beq.w	41f49a <lv_btnmatrix_design+0x492>
    return LV_DESIGN_RES_OK;
  41f020:	2000      	movs	r0, #0
}
  41f022:	f50d 7d0d 	add.w	sp, sp, #564	; 0x234
  41f026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return ancestor_design_f(btnm, clip_area, mode);
  41f02a:	4ba3      	ldr	r3, [pc, #652]	; (41f2b8 <lv_btnmatrix_design+0x2b0>)
  41f02c:	681b      	ldr	r3, [r3, #0]
  41f02e:	4798      	blx	r3
  41f030:	e7f7      	b.n	41f022 <lv_btnmatrix_design+0x1a>
        ancestor_design_f(btnm, clip_area, mode);
  41f032:	4ba1      	ldr	r3, [pc, #644]	; (41f2b8 <lv_btnmatrix_design+0x2b0>)
  41f034:	681b      	ldr	r3, [r3, #0]
  41f036:	9904      	ldr	r1, [sp, #16]
  41f038:	9c05      	ldr	r4, [sp, #20]
  41f03a:	4620      	mov	r0, r4
  41f03c:	4798      	blx	r3
        lv_btnmatrix_ext_t * ext         = lv_obj_get_ext_attr(btnm);
  41f03e:	4620      	mov	r0, r4
  41f040:	4b9e      	ldr	r3, [pc, #632]	; (41f2bc <lv_btnmatrix_design+0x2b4>)
  41f042:	4798      	blx	r3
  41f044:	4607      	mov	r7, r0
        if(ext->btn_cnt == 0) return LV_DESIGN_RES_OK;
  41f046:	8a83      	ldrh	r3, [r0, #20]
  41f048:	b90b      	cbnz	r3, 41f04e <lv_btnmatrix_design+0x46>
  41f04a:	2000      	movs	r0, #0
  41f04c:	e7e9      	b.n	41f022 <lv_btnmatrix_design+0x1a>
        lv_obj_get_coords(btnm, &area_btnm);
  41f04e:	a910      	add	r1, sp, #64	; 0x40
  41f050:	9805      	ldr	r0, [sp, #20]
  41f052:	4b9b      	ldr	r3, [pc, #620]	; (41f2c0 <lv_btnmatrix_design+0x2b8>)
  41f054:	4798      	blx	r3
        if(ext->recolor) txt_flag |= LV_TXT_FLAG_RECOLOR;
  41f056:	7f3b      	ldrb	r3, [r7, #28]
  41f058:	f013 0f01 	tst.w	r3, #1
  41f05c:	d140      	bne.n	41f0e0 <lv_btnmatrix_design+0xd8>
        lv_txt_flag_t txt_flag = LV_TXT_FLAG_NONE;
  41f05e:	2300      	movs	r3, #0
  41f060:	9308      	str	r3, [sp, #32]
        lv_label_align_t align = lv_btnmatrix_get_align(btnm);
  41f062:	9805      	ldr	r0, [sp, #20]
  41f064:	4b97      	ldr	r3, [pc, #604]	; (41f2c4 <lv_btnmatrix_design+0x2bc>)
  41f066:	4798      	blx	r3
        if(align == LV_LABEL_ALIGN_CENTER) txt_flag |= LV_TXT_FLAG_CENTER;
  41f068:	2801      	cmp	r0, #1
  41f06a:	d03c      	beq.n	41f0e6 <lv_btnmatrix_design+0xde>
        if(align == LV_LABEL_ALIGN_RIGHT) txt_flag |= LV_TXT_FLAG_RIGHT;
  41f06c:	2802      	cmp	r0, #2
  41f06e:	d03f      	beq.n	41f0f0 <lv_btnmatrix_design+0xe8>
        lv_state_t state_ori = btnm->state;
  41f070:	9e05      	ldr	r6, [sp, #20]
  41f072:	f896 303d 	ldrb.w	r3, [r6, #61]	; 0x3d
  41f076:	461d      	mov	r5, r3
  41f078:	9309      	str	r3, [sp, #36]	; 0x24
        _lv_obj_disable_style_caching(btnm, true);
  41f07a:	2101      	movs	r1, #1
  41f07c:	4630      	mov	r0, r6
  41f07e:	4c92      	ldr	r4, [pc, #584]	; (41f2c8 <lv_btnmatrix_design+0x2c0>)
  41f080:	47a0      	blx	r4
        btnm->state = LV_STATE_DEFAULT;
  41f082:	f04f 0b00 	mov.w	fp, #0
  41f086:	f886 b03d 	strb.w	fp, [r6, #61]	; 0x3d
        lv_draw_rect_dsc_init(&draw_rect_rel_dsc);
  41f08a:	a838      	add	r0, sp, #224	; 0xe0
  41f08c:	4b8f      	ldr	r3, [pc, #572]	; (41f2cc <lv_btnmatrix_design+0x2c4>)
  41f08e:	4798      	blx	r3
        lv_draw_label_dsc_init(&draw_label_rel_dsc);
  41f090:	a814      	add	r0, sp, #80	; 0x50
  41f092:	4b8f      	ldr	r3, [pc, #572]	; (41f2d0 <lv_btnmatrix_design+0x2c8>)
  41f094:	4798      	blx	r3
        lv_obj_init_draw_rect_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_rect_rel_dsc);
  41f096:	aa38      	add	r2, sp, #224	; 0xe0
  41f098:	2101      	movs	r1, #1
  41f09a:	4630      	mov	r0, r6
  41f09c:	4b8d      	ldr	r3, [pc, #564]	; (41f2d4 <lv_btnmatrix_design+0x2cc>)
  41f09e:	4798      	blx	r3
        lv_obj_init_draw_label_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_label_rel_dsc);
  41f0a0:	aa14      	add	r2, sp, #80	; 0x50
  41f0a2:	2101      	movs	r1, #1
  41f0a4:	4630      	mov	r0, r6
  41f0a6:	4b8c      	ldr	r3, [pc, #560]	; (41f2d8 <lv_btnmatrix_design+0x2d0>)
  41f0a8:	4798      	blx	r3
        draw_label_rel_dsc.flag = txt_flag;
  41f0aa:	f89d 3020 	ldrb.w	r3, [sp, #32]
  41f0ae:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
        btnm->state = state_ori;
  41f0b2:	4632      	mov	r2, r6
  41f0b4:	f882 503d 	strb.w	r5, [r2, #61]	; 0x3d
        _lv_obj_disable_style_caching(btnm, false);
  41f0b8:	4659      	mov	r1, fp
  41f0ba:	4630      	mov	r0, r6
  41f0bc:	47a0      	blx	r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41f0be:	2210      	movs	r2, #16
  41f0c0:	4659      	mov	r1, fp
  41f0c2:	4630      	mov	r0, r6
  41f0c4:	4c85      	ldr	r4, [pc, #532]	; (41f2dc <lv_btnmatrix_design+0x2d4>)
  41f0c6:	47a0      	blx	r4
  41f0c8:	900a      	str	r0, [sp, #40]	; 0x28
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41f0ca:	2211      	movs	r2, #17
  41f0cc:	4659      	mov	r1, fp
  41f0ce:	4630      	mov	r0, r6
  41f0d0:	47a0      	blx	r4
  41f0d2:	900b      	str	r0, [sp, #44]	; 0x2c
        bool disabled_inited = false;
  41f0d4:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
        bool chk_inited = false;
  41f0d8:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
        uint16_t txt_i = 0;
  41f0dc:	465c      	mov	r4, fp
        for(btn_i = 0; btn_i < ext->btn_cnt; btn_i++, txt_i++) {
  41f0de:	e1b4      	b.n	41f44a <lv_btnmatrix_design+0x442>
        if(ext->recolor) txt_flag |= LV_TXT_FLAG_RECOLOR;
  41f0e0:	2301      	movs	r3, #1
  41f0e2:	9308      	str	r3, [sp, #32]
  41f0e4:	e7bd      	b.n	41f062 <lv_btnmatrix_design+0x5a>
        if(align == LV_LABEL_ALIGN_CENTER) txt_flag |= LV_TXT_FLAG_CENTER;
  41f0e6:	9b08      	ldr	r3, [sp, #32]
  41f0e8:	f043 0304 	orr.w	r3, r3, #4
  41f0ec:	9308      	str	r3, [sp, #32]
  41f0ee:	e7bd      	b.n	41f06c <lv_btnmatrix_design+0x64>
        if(align == LV_LABEL_ALIGN_RIGHT) txt_flag |= LV_TXT_FLAG_RIGHT;
  41f0f0:	9b08      	ldr	r3, [sp, #32]
  41f0f2:	f043 0308 	orr.w	r3, r3, #8
  41f0f6:	9308      	str	r3, [sp, #32]
  41f0f8:	e7ba      	b.n	41f070 <lv_btnmatrix_design+0x68>
                txt_i++;
  41f0fa:	3401      	adds	r4, #1
  41f0fc:	b2a4      	uxth	r4, r4
            while(strcmp(ext->map_p[txt_i], "\n") == 0) {
  41f0fe:	683b      	ldr	r3, [r7, #0]
  41f100:	4625      	mov	r5, r4
  41f102:	00a6      	lsls	r6, r4, #2
  41f104:	4976      	ldr	r1, [pc, #472]	; (41f2e0 <lv_btnmatrix_design+0x2d8>)
  41f106:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  41f10a:	4b76      	ldr	r3, [pc, #472]	; (41f2e4 <lv_btnmatrix_design+0x2dc>)
  41f10c:	4798      	blx	r3
  41f10e:	2800      	cmp	r0, #0
  41f110:	d0f3      	beq.n	41f0fa <lv_btnmatrix_design+0xf2>
            if(button_is_hidden(ext->ctrl_bits[btn_i])) continue;
  41f112:	68bb      	ldr	r3, [r7, #8]
  41f114:	ea4f 084b 	mov.w	r8, fp, lsl #1
  41f118:	f833 001b 	ldrh.w	r0, [r3, fp, lsl #1]
  41f11c:	4b72      	ldr	r3, [pc, #456]	; (41f2e8 <lv_btnmatrix_design+0x2e0>)
  41f11e:	4798      	blx	r3
  41f120:	2800      	cmp	r0, #0
  41f122:	f040 818c 	bne.w	41f43e <lv_btnmatrix_design+0x436>
            lv_area_copy(&area_tmp, &ext->button_areas[btn_i]);
  41f126:	687a      	ldr	r2, [r7, #4]
  41f128:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
    uint8_t * d8 = (uint8_t *)dst;
  41f12c:	a912      	add	r1, sp, #72	; 0x48
  41f12e:	2308      	movs	r3, #8
  41f130:	e004      	b.n	41f13c <lv_btnmatrix_design+0x134>
        *d8 = *s8;
  41f132:	f812 0b01 	ldrb.w	r0, [r2], #1
  41f136:	f801 0b01 	strb.w	r0, [r1], #1
        len--;
  41f13a:	3b01      	subs	r3, #1
    while(len) {
  41f13c:	2b00      	cmp	r3, #0
  41f13e:	d1f8      	bne.n	41f132 <lv_btnmatrix_design+0x12a>
            area_tmp.x1 += area_btnm.x1;
  41f140:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
  41f144:	f8bd 0048 	ldrh.w	r0, [sp, #72]	; 0x48
  41f148:	4410      	add	r0, r2
  41f14a:	b280      	uxth	r0, r0
  41f14c:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
            area_tmp.y1 += area_btnm.y1;
  41f150:	f8bd e042 	ldrh.w	lr, [sp, #66]	; 0x42
  41f154:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
  41f158:	4473      	add	r3, lr
  41f15a:	b299      	uxth	r1, r3
  41f15c:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
            area_tmp.x2 += area_btnm.x1;
  41f160:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
  41f164:	441a      	add	r2, r3
  41f166:	b292      	uxth	r2, r2
  41f168:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
            area_tmp.y2 += area_btnm.y1;
  41f16c:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
  41f170:	4473      	add	r3, lr
  41f172:	b29b      	uxth	r3, r3
  41f174:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
  41f178:	1a12      	subs	r2, r2, r0
  41f17a:	b292      	uxth	r2, r2
  41f17c:	3201      	adds	r2, #1
  41f17e:	b212      	sxth	r2, r2
  41f180:	9207      	str	r2, [sp, #28]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41f182:	1a5b      	subs	r3, r3, r1
  41f184:	b29b      	uxth	r3, r3
  41f186:	3301      	adds	r3, #1
  41f188:	b21b      	sxth	r3, r3
  41f18a:	9306      	str	r3, [sp, #24]
            if(button_get_tgl_state(ext->ctrl_bits[btn_i])) btn_state |= LV_STATE_CHECKED;
  41f18c:	68bb      	ldr	r3, [r7, #8]
  41f18e:	f833 9008 	ldrh.w	r9, [r3, r8]
  41f192:	4648      	mov	r0, r9
  41f194:	4b55      	ldr	r3, [pc, #340]	; (41f2ec <lv_btnmatrix_design+0x2e4>)
  41f196:	4798      	blx	r3
  41f198:	2800      	cmp	r0, #0
  41f19a:	d140      	bne.n	41f21e <lv_btnmatrix_design+0x216>
            lv_state_t btn_state = LV_STATE_DEFAULT;
  41f19c:	f04f 0800 	mov.w	r8, #0
            if(button_is_inactive(ext->ctrl_bits[btn_i])) btn_state |= LV_STATE_DISABLED;
  41f1a0:	4648      	mov	r0, r9
  41f1a2:	4b53      	ldr	r3, [pc, #332]	; (41f2f0 <lv_btnmatrix_design+0x2e8>)
  41f1a4:	4798      	blx	r3
  41f1a6:	b108      	cbz	r0, 41f1ac <lv_btnmatrix_design+0x1a4>
  41f1a8:	f048 0820 	orr.w	r8, r8, #32
            if(btn_i == ext->btn_id_pr) btn_state |= LV_STATE_PRESSED;
  41f1ac:	8afb      	ldrh	r3, [r7, #22]
  41f1ae:	459b      	cmp	fp, r3
  41f1b0:	d038      	beq.n	41f224 <lv_btnmatrix_design+0x21c>
            if(btn_i == ext->btn_id_focused) {
  41f1b2:	8b3b      	ldrh	r3, [r7, #24]
  41f1b4:	459b      	cmp	fp, r3
  41f1b6:	d038      	beq.n	41f22a <lv_btnmatrix_design+0x222>
            if(btn_state == LV_STATE_DEFAULT) {
  41f1b8:	f1b8 0f00 	cmp.w	r8, #0
  41f1bc:	f000 80c5 	beq.w	41f34a <lv_btnmatrix_design+0x342>
            else if(btn_state == LV_STATE_CHECKED) {
  41f1c0:	f1b8 0f01 	cmp.w	r8, #1
  41f1c4:	d03c      	beq.n	41f240 <lv_btnmatrix_design+0x238>
            else if(btn_state == LV_STATE_DISABLED) {
  41f1c6:	f1b8 0f20 	cmp.w	r8, #32
  41f1ca:	d06d      	beq.n	41f2a8 <lv_btnmatrix_design+0x2a0>
                btnm->state = btn_state;
  41f1cc:	9a05      	ldr	r2, [sp, #20]
  41f1ce:	f882 803d 	strb.w	r8, [r2, #61]	; 0x3d
                _lv_obj_disable_style_caching(btnm, true);
  41f1d2:	2101      	movs	r1, #1
  41f1d4:	4691      	mov	r9, r2
  41f1d6:	4610      	mov	r0, r2
  41f1d8:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 41f2c8 <lv_btnmatrix_design+0x2c0>
  41f1dc:	47c0      	blx	r8
                lv_draw_rect_dsc_init(&draw_rect_tmp_dsc);
  41f1de:	a877      	add	r0, sp, #476	; 0x1dc
  41f1e0:	4b3a      	ldr	r3, [pc, #232]	; (41f2cc <lv_btnmatrix_design+0x2c4>)
  41f1e2:	4798      	blx	r3
                lv_draw_label_dsc_init(&draw_label_tmp_dsc);
  41f1e4:	a82f      	add	r0, sp, #188	; 0xbc
  41f1e6:	4b3a      	ldr	r3, [pc, #232]	; (41f2d0 <lv_btnmatrix_design+0x2c8>)
  41f1e8:	4798      	blx	r3
                lv_obj_init_draw_rect_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_rect_tmp_dsc);
  41f1ea:	aa77      	add	r2, sp, #476	; 0x1dc
  41f1ec:	2101      	movs	r1, #1
  41f1ee:	4648      	mov	r0, r9
  41f1f0:	4b38      	ldr	r3, [pc, #224]	; (41f2d4 <lv_btnmatrix_design+0x2cc>)
  41f1f2:	4798      	blx	r3
                lv_obj_init_draw_label_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_label_tmp_dsc);
  41f1f4:	aa2f      	add	r2, sp, #188	; 0xbc
  41f1f6:	2101      	movs	r1, #1
  41f1f8:	4648      	mov	r0, r9
  41f1fa:	4b37      	ldr	r3, [pc, #220]	; (41f2d8 <lv_btnmatrix_design+0x2d0>)
  41f1fc:	4798      	blx	r3
                draw_label_tmp_dsc.flag = txt_flag;
  41f1fe:	f89d 3020 	ldrb.w	r3, [sp, #32]
  41f202:	f88d 30dd 	strb.w	r3, [sp, #221]	; 0xdd
                btnm->state = state_ori;
  41f206:	4648      	mov	r0, r9
  41f208:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
  41f20c:	f889 303d 	strb.w	r3, [r9, #61]	; 0x3d
                _lv_obj_disable_style_caching(btnm, false);
  41f210:	2100      	movs	r1, #0
  41f212:	47c0      	blx	r8
                draw_label_dsc_act = &draw_label_tmp_dsc;
  41f214:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
                draw_rect_dsc_act = &draw_rect_tmp_dsc;
  41f218:	f50d 78ee 	add.w	r8, sp, #476	; 0x1dc
  41f21c:	e099      	b.n	41f352 <lv_btnmatrix_design+0x34a>
            if(button_get_tgl_state(ext->ctrl_bits[btn_i])) btn_state |= LV_STATE_CHECKED;
  41f21e:	f04f 0801 	mov.w	r8, #1
  41f222:	e7bd      	b.n	41f1a0 <lv_btnmatrix_design+0x198>
            if(btn_i == ext->btn_id_pr) btn_state |= LV_STATE_PRESSED;
  41f224:	f048 0810 	orr.w	r8, r8, #16
  41f228:	e7c3      	b.n	41f1b2 <lv_btnmatrix_design+0x1aa>
                btn_state |= LV_STATE_FOCUSED;
  41f22a:	f048 0302 	orr.w	r3, r8, #2
                if(state_ori & LV_STATE_EDITED) btn_state |= LV_STATE_EDITED;
  41f22e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  41f230:	f012 0f04 	tst.w	r2, #4
  41f234:	d002      	beq.n	41f23c <lv_btnmatrix_design+0x234>
  41f236:	f048 0806 	orr.w	r8, r8, #6
  41f23a:	e7bd      	b.n	41f1b8 <lv_btnmatrix_design+0x1b0>
                btn_state |= LV_STATE_FOCUSED;
  41f23c:	4698      	mov	r8, r3
  41f23e:	e7bb      	b.n	41f1b8 <lv_btnmatrix_design+0x1b0>
                if(!chk_inited) {
  41f240:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  41f242:	b123      	cbz	r3, 41f24e <lv_btnmatrix_design+0x246>
                draw_label_dsc_act = &draw_label_chk_dsc;
  41f244:	f10d 0974 	add.w	r9, sp, #116	; 0x74
                draw_rect_dsc_act = &draw_rect_chk_dsc;
  41f248:	f50d 789a 	add.w	r8, sp, #308	; 0x134
  41f24c:	e081      	b.n	41f352 <lv_btnmatrix_design+0x34a>
                    btnm->state = LV_STATE_CHECKED;
  41f24e:	f04f 0a01 	mov.w	sl, #1
  41f252:	9a05      	ldr	r2, [sp, #20]
  41f254:	f882 a03d 	strb.w	sl, [r2, #61]	; 0x3d
                    _lv_obj_disable_style_caching(btnm, true);
  41f258:	4651      	mov	r1, sl
  41f25a:	4691      	mov	r9, r2
  41f25c:	4610      	mov	r0, r2
  41f25e:	f8df 8068 	ldr.w	r8, [pc, #104]	; 41f2c8 <lv_btnmatrix_design+0x2c0>
  41f262:	47c0      	blx	r8
                    lv_draw_rect_dsc_init(&draw_rect_chk_dsc);
  41f264:	a84d      	add	r0, sp, #308	; 0x134
  41f266:	4b19      	ldr	r3, [pc, #100]	; (41f2cc <lv_btnmatrix_design+0x2c4>)
  41f268:	4798      	blx	r3
                    lv_draw_label_dsc_init(&draw_label_chk_dsc);
  41f26a:	a81d      	add	r0, sp, #116	; 0x74
  41f26c:	4b18      	ldr	r3, [pc, #96]	; (41f2d0 <lv_btnmatrix_design+0x2c8>)
  41f26e:	4798      	blx	r3
                    lv_obj_init_draw_rect_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_rect_chk_dsc);
  41f270:	aa4d      	add	r2, sp, #308	; 0x134
  41f272:	4651      	mov	r1, sl
  41f274:	4648      	mov	r0, r9
  41f276:	4b17      	ldr	r3, [pc, #92]	; (41f2d4 <lv_btnmatrix_design+0x2cc>)
  41f278:	4798      	blx	r3
                    lv_obj_init_draw_label_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_label_chk_dsc);
  41f27a:	aa1d      	add	r2, sp, #116	; 0x74
  41f27c:	4651      	mov	r1, sl
  41f27e:	4648      	mov	r0, r9
  41f280:	4b15      	ldr	r3, [pc, #84]	; (41f2d8 <lv_btnmatrix_design+0x2d0>)
  41f282:	4798      	blx	r3
                    draw_label_chk_dsc.flag = txt_flag;
  41f284:	f89d 3020 	ldrb.w	r3, [sp, #32]
  41f288:	f88d 3095 	strb.w	r3, [sp, #149]	; 0x95
                    btnm->state = state_ori;
  41f28c:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
  41f290:	f889 103d 	strb.w	r1, [r9, #61]	; 0x3d
                    _lv_obj_disable_style_caching(btnm, false);
  41f294:	2100      	movs	r1, #0
  41f296:	4648      	mov	r0, r9
  41f298:	47c0      	blx	r8
                draw_label_dsc_act = &draw_label_chk_dsc;
  41f29a:	f10d 0974 	add.w	r9, sp, #116	; 0x74
                draw_rect_dsc_act = &draw_rect_chk_dsc;
  41f29e:	f50d 789a 	add.w	r8, sp, #308	; 0x134
                    chk_inited = true;
  41f2a2:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  41f2a6:	e054      	b.n	41f352 <lv_btnmatrix_design+0x34a>
                if(!disabled_inited) {
  41f2a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  41f2aa:	b31b      	cbz	r3, 41f2f4 <lv_btnmatrix_design+0x2ec>
                draw_label_dsc_act = &draw_label_ina_dsc;
  41f2ac:	f10d 0998 	add.w	r9, sp, #152	; 0x98
                draw_rect_dsc_act = &draw_rect_ina_dsc;
  41f2b0:	f50d 78c4 	add.w	r8, sp, #392	; 0x188
  41f2b4:	e04d      	b.n	41f352 <lv_btnmatrix_design+0x34a>
  41f2b6:	bf00      	nop
  41f2b8:	20414868 	.word	0x20414868
  41f2bc:	00408115 	.word	0x00408115
  41f2c0:	00405b01 	.word	0x00405b01
  41f2c4:	0041efcd 	.word	0x0041efcd
  41f2c8:	00405d41 	.word	0x00405d41
  41f2cc:	0041250d 	.word	0x0041250d
  41f2d0:	0040df85 	.word	0x0040df85
  41f2d4:	004083ed 	.word	0x004083ed
  41f2d8:	00408a1d 	.word	0x00408a1d
  41f2dc:	00407485 	.word	0x00407485
  41f2e0:	0042fe44 	.word	0x0042fe44
  41f2e4:	00428229 	.word	0x00428229
  41f2e8:	0041de97 	.word	0x0041de97
  41f2ec:	0041deb5 	.word	0x0041deb5
  41f2f0:	0041dea3 	.word	0x0041dea3
                    btnm->state = LV_STATE_DISABLED;
  41f2f4:	2320      	movs	r3, #32
  41f2f6:	9805      	ldr	r0, [sp, #20]
  41f2f8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
                    _lv_obj_disable_style_caching(btnm, true);
  41f2fc:	2101      	movs	r1, #1
  41f2fe:	4681      	mov	r9, r0
  41f300:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 41f4d0 <lv_btnmatrix_design+0x4c8>
  41f304:	47c0      	blx	r8
                    lv_draw_rect_dsc_init(&draw_rect_ina_dsc);
  41f306:	a862      	add	r0, sp, #392	; 0x188
  41f308:	4b67      	ldr	r3, [pc, #412]	; (41f4a8 <lv_btnmatrix_design+0x4a0>)
  41f30a:	4798      	blx	r3
                    lv_draw_label_dsc_init(&draw_label_ina_dsc);
  41f30c:	a826      	add	r0, sp, #152	; 0x98
  41f30e:	4b67      	ldr	r3, [pc, #412]	; (41f4ac <lv_btnmatrix_design+0x4a4>)
  41f310:	4798      	blx	r3
                    lv_obj_init_draw_rect_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_rect_ina_dsc);
  41f312:	aa62      	add	r2, sp, #392	; 0x188
  41f314:	2101      	movs	r1, #1
  41f316:	4648      	mov	r0, r9
  41f318:	4b65      	ldr	r3, [pc, #404]	; (41f4b0 <lv_btnmatrix_design+0x4a8>)
  41f31a:	4798      	blx	r3
                    lv_obj_init_draw_label_dsc(btnm, LV_BTNMATRIX_PART_BTN, &draw_label_ina_dsc);
  41f31c:	aa26      	add	r2, sp, #152	; 0x98
  41f31e:	2101      	movs	r1, #1
  41f320:	4648      	mov	r0, r9
  41f322:	4b64      	ldr	r3, [pc, #400]	; (41f4b4 <lv_btnmatrix_design+0x4ac>)
  41f324:	4798      	blx	r3
                    draw_label_ina_dsc.flag = txt_flag;
  41f326:	f89d 3020 	ldrb.w	r3, [sp, #32]
  41f32a:	f88d 30b9 	strb.w	r3, [sp, #185]	; 0xb9
                    btnm->state = state_ori;
  41f32e:	4648      	mov	r0, r9
  41f330:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
  41f334:	f889 203d 	strb.w	r2, [r9, #61]	; 0x3d
                    _lv_obj_disable_style_caching(btnm, false);
  41f338:	2100      	movs	r1, #0
  41f33a:	47c0      	blx	r8
                draw_label_dsc_act = &draw_label_ina_dsc;
  41f33c:	f10d 0998 	add.w	r9, sp, #152	; 0x98
                draw_rect_dsc_act = &draw_rect_ina_dsc;
  41f340:	f50d 78c4 	add.w	r8, sp, #392	; 0x188
                    disabled_inited = true;
  41f344:	2301      	movs	r3, #1
  41f346:	930c      	str	r3, [sp, #48]	; 0x30
  41f348:	e003      	b.n	41f352 <lv_btnmatrix_design+0x34a>
                draw_label_dsc_act = &draw_label_rel_dsc;
  41f34a:	f10d 0950 	add.w	r9, sp, #80	; 0x50
                draw_rect_dsc_act = &draw_rect_rel_dsc;
  41f34e:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
            lv_style_int_t border_part_ori = draw_rect_dsc_act->border_side;
  41f352:	f9b8 a012 	ldrsh.w	sl, [r8, #18]
            if(border_part_ori & LV_BORDER_SIDE_INTERNAL) {
  41f356:	f01a 0f10 	tst.w	sl, #16
  41f35a:	d029      	beq.n	41f3b0 <lv_btnmatrix_design+0x3a8>
                if(area_tmp.y1 == btnm->coords.y1 + padding_top) {
  41f35c:	f9bd 204a 	ldrsh.w	r2, [sp, #74]	; 0x4a
  41f360:	9b05      	ldr	r3, [sp, #20]
  41f362:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
  41f366:	990a      	ldr	r1, [sp, #40]	; 0x28
  41f368:	440b      	add	r3, r1
  41f36a:	429a      	cmp	r2, r3
  41f36c:	d073      	beq.n	41f456 <lv_btnmatrix_design+0x44e>
                if(area_tmp.y2 == btnm->coords.y2 - padding_bottom) {
  41f36e:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
  41f372:	9b05      	ldr	r3, [sp, #20]
  41f374:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
  41f378:	990b      	ldr	r1, [sp, #44]	; 0x2c
  41f37a:	1a5b      	subs	r3, r3, r1
  41f37c:	429a      	cmp	r2, r3
  41f37e:	d06f      	beq.n	41f460 <lv_btnmatrix_design+0x458>
                if(txt_i == 0) { /*First button*/
  41f380:	2c00      	cmp	r4, #0
  41f382:	d174      	bne.n	41f46e <lv_btnmatrix_design+0x466>
                    draw_rect_dsc_act->border_side &= ~LV_BORDER_SIDE_LEFT;
  41f384:	f8b8 3012 	ldrh.w	r3, [r8, #18]
  41f388:	f023 0304 	bic.w	r3, r3, #4
  41f38c:	f8a8 3012 	strh.w	r3, [r8, #18]
                if(ext->map_p[txt_i + 1][0] == '\0' || strcmp(ext->map_p[txt_i + 1], "\n") == 0) {
  41f390:	683b      	ldr	r3, [r7, #0]
  41f392:	3501      	adds	r5, #1
  41f394:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
  41f398:	7803      	ldrb	r3, [r0, #0]
  41f39a:	b11b      	cbz	r3, 41f3a4 <lv_btnmatrix_design+0x39c>
  41f39c:	4946      	ldr	r1, [pc, #280]	; (41f4b8 <lv_btnmatrix_design+0x4b0>)
  41f39e:	4b47      	ldr	r3, [pc, #284]	; (41f4bc <lv_btnmatrix_design+0x4b4>)
  41f3a0:	4798      	blx	r3
  41f3a2:	b928      	cbnz	r0, 41f3b0 <lv_btnmatrix_design+0x3a8>
                    draw_rect_dsc_act->border_side &= ~LV_BORDER_SIDE_RIGHT;
  41f3a4:	f8b8 3012 	ldrh.w	r3, [r8, #18]
  41f3a8:	f023 0308 	bic.w	r3, r3, #8
  41f3ac:	f8a8 3012 	strh.w	r3, [r8, #18]
            lv_draw_rect(&area_tmp, clip_area, draw_rect_dsc_act);
  41f3b0:	4642      	mov	r2, r8
  41f3b2:	9904      	ldr	r1, [sp, #16]
  41f3b4:	a812      	add	r0, sp, #72	; 0x48
  41f3b6:	4b42      	ldr	r3, [pc, #264]	; (41f4c0 <lv_btnmatrix_design+0x4b8>)
  41f3b8:	4798      	blx	r3
            draw_rect_dsc_act->border_side = border_part_ori;
  41f3ba:	f8a8 a012 	strh.w	sl, [r8, #18]
            lv_style_int_t letter_space = draw_label_dsc_act->letter_space;
  41f3be:	f9b9 3010 	ldrsh.w	r3, [r9, #16]
            lv_style_int_t line_space = draw_label_dsc_act->line_space;
  41f3c2:	f9b9 100e 	ldrsh.w	r1, [r9, #14]
            const char * txt = ext->map_p[txt_i];
  41f3c6:	683a      	ldr	r2, [r7, #0]
  41f3c8:	5995      	ldr	r5, [r2, r6]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41f3ca:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
  41f3ce:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
  41f3d2:	1a12      	subs	r2, r2, r0
  41f3d4:	b292      	uxth	r2, r2
  41f3d6:	3201      	adds	r2, #1
  41f3d8:	b212      	sxth	r2, r2
            _lv_txt_get_size(&txt_size, txt, font, letter_space,
  41f3da:	9808      	ldr	r0, [sp, #32]
  41f3dc:	9002      	str	r0, [sp, #8]
  41f3de:	9201      	str	r2, [sp, #4]
  41f3e0:	9100      	str	r1, [sp, #0]
  41f3e2:	f8d9 2008 	ldr.w	r2, [r9, #8]
  41f3e6:	4629      	mov	r1, r5
  41f3e8:	a80f      	add	r0, sp, #60	; 0x3c
  41f3ea:	4e36      	ldr	r6, [pc, #216]	; (41f4c4 <lv_btnmatrix_design+0x4bc>)
  41f3ec:	47b0      	blx	r6
            area_tmp.x1 += (btn_w - txt_size.x) / 2;
  41f3ee:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
  41f3f2:	9b07      	ldr	r3, [sp, #28]
  41f3f4:	1a1b      	subs	r3, r3, r0
  41f3f6:	d44c      	bmi.n	41f492 <lv_btnmatrix_design+0x48a>
  41f3f8:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
  41f3fc:	eb02 0263 	add.w	r2, r2, r3, asr #1
  41f400:	b292      	uxth	r2, r2
  41f402:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
  41f406:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
  41f40a:	9b06      	ldr	r3, [sp, #24]
  41f40c:	1a5e      	subs	r6, r3, r1
  41f40e:	d442      	bmi.n	41f496 <lv_btnmatrix_design+0x48e>
  41f410:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
  41f414:	eb03 0366 	add.w	r3, r3, r6, asr #1
  41f418:	b29b      	uxth	r3, r3
  41f41a:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            area_tmp.x2 = area_tmp.x1 + txt_size.x;
  41f41e:	fa12 f280 	uxtah	r2, r2, r0
  41f422:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
            area_tmp.y2 = area_tmp.y1 + txt_size.y;
  41f426:	fa13 f381 	uxtah	r3, r3, r1
  41f42a:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
            lv_draw_label(&area_tmp, clip_area, draw_label_dsc_act, txt, NULL);
  41f42e:	2300      	movs	r3, #0
  41f430:	9300      	str	r3, [sp, #0]
  41f432:	462b      	mov	r3, r5
  41f434:	464a      	mov	r2, r9
  41f436:	9904      	ldr	r1, [sp, #16]
  41f438:	a812      	add	r0, sp, #72	; 0x48
  41f43a:	4d23      	ldr	r5, [pc, #140]	; (41f4c8 <lv_btnmatrix_design+0x4c0>)
  41f43c:	47a8      	blx	r5
        for(btn_i = 0; btn_i < ext->btn_cnt; btn_i++, txt_i++) {
  41f43e:	f10b 0b01 	add.w	fp, fp, #1
  41f442:	fa1f fb8b 	uxth.w	fp, fp
  41f446:	3401      	adds	r4, #1
  41f448:	b2a4      	uxth	r4, r4
  41f44a:	8abb      	ldrh	r3, [r7, #20]
  41f44c:	459b      	cmp	fp, r3
  41f44e:	f4ff ae56 	bcc.w	41f0fe <lv_btnmatrix_design+0xf6>
    return LV_DESIGN_RES_OK;
  41f452:	2000      	movs	r0, #0
  41f454:	e5e5      	b.n	41f022 <lv_btnmatrix_design+0x1a>
                    draw_rect_dsc_act->border_side &= ~LV_BORDER_SIDE_TOP;
  41f456:	f02a 0302 	bic.w	r3, sl, #2
  41f45a:	f8a8 3012 	strh.w	r3, [r8, #18]
  41f45e:	e786      	b.n	41f36e <lv_btnmatrix_design+0x366>
                    draw_rect_dsc_act->border_side &= ~LV_BORDER_SIDE_BOTTOM;
  41f460:	f8b8 3012 	ldrh.w	r3, [r8, #18]
  41f464:	f023 0301 	bic.w	r3, r3, #1
  41f468:	f8a8 3012 	strh.w	r3, [r8, #18]
  41f46c:	e788      	b.n	41f380 <lv_btnmatrix_design+0x378>
                else if(strcmp(ext->map_p[txt_i - 1], "\n") == 0) {
  41f46e:	683a      	ldr	r2, [r7, #0]
  41f470:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
  41f474:	442b      	add	r3, r5
  41f476:	4910      	ldr	r1, [pc, #64]	; (41f4b8 <lv_btnmatrix_design+0x4b0>)
  41f478:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
  41f47c:	4b0f      	ldr	r3, [pc, #60]	; (41f4bc <lv_btnmatrix_design+0x4b4>)
  41f47e:	4798      	blx	r3
  41f480:	2800      	cmp	r0, #0
  41f482:	d185      	bne.n	41f390 <lv_btnmatrix_design+0x388>
                    draw_rect_dsc_act->border_side &= ~LV_BORDER_SIDE_LEFT;
  41f484:	f8b8 3012 	ldrh.w	r3, [r8, #18]
  41f488:	f023 0304 	bic.w	r3, r3, #4
  41f48c:	f8a8 3012 	strh.w	r3, [r8, #18]
  41f490:	e77e      	b.n	41f390 <lv_btnmatrix_design+0x388>
            area_tmp.x1 += (btn_w - txt_size.x) / 2;
  41f492:	3301      	adds	r3, #1
  41f494:	e7b0      	b.n	41f3f8 <lv_btnmatrix_design+0x3f0>
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
  41f496:	3601      	adds	r6, #1
  41f498:	e7ba      	b.n	41f410 <lv_btnmatrix_design+0x408>
        ancestor_design_f(btnm, clip_area, mode);
  41f49a:	4b0c      	ldr	r3, [pc, #48]	; (41f4cc <lv_btnmatrix_design+0x4c4>)
  41f49c:	681b      	ldr	r3, [r3, #0]
  41f49e:	9904      	ldr	r1, [sp, #16]
  41f4a0:	9805      	ldr	r0, [sp, #20]
  41f4a2:	4798      	blx	r3
    return LV_DESIGN_RES_OK;
  41f4a4:	2000      	movs	r0, #0
  41f4a6:	e5bc      	b.n	41f022 <lv_btnmatrix_design+0x1a>
  41f4a8:	0041250d 	.word	0x0041250d
  41f4ac:	0040df85 	.word	0x0040df85
  41f4b0:	004083ed 	.word	0x004083ed
  41f4b4:	00408a1d 	.word	0x00408a1d
  41f4b8:	0042fe44 	.word	0x0042fe44
  41f4bc:	00428229 	.word	0x00428229
  41f4c0:	00412559 	.word	0x00412559
  41f4c4:	00417fa5 	.word	0x00417fa5
  41f4c8:	0040dfcd 	.word	0x0040dfcd
  41f4cc:	20414868 	.word	0x20414868
  41f4d0:	00405d41 	.word	0x00405d41

0041f4d4 <create_axis_label_iter>:
 * @param list pointer to newline-separated labels list
 * @param iterator_dir LV_CHART_ITERATOR_FORWARD or LV_CHART_LABEL_ITERATOR_REVERSE
 * @return lv_chart_label_iterator_t
 */
static lv_chart_label_iterator_t create_axis_label_iter(const char * list, uint8_t iterator_dir)
{
  41f4d4:	b430      	push	{r4, r5}
    lv_chart_label_iterator_t iterator = {0};
  41f4d6:	2300      	movs	r3, #0
  41f4d8:	6043      	str	r3, [r0, #4]
  41f4da:	6083      	str	r3, [r0, #8]
    uint8_t j;

    iterator.list_start = list;
  41f4dc:	6001      	str	r1, [r0, #0]

    /* count number of list items */
    for(j = 0; list[j] != '\0'; j++) {
  41f4de:	e001      	b.n	41f4e4 <create_axis_label_iter+0x10>
  41f4e0:	3301      	adds	r3, #1
  41f4e2:	b2db      	uxtb	r3, r3
  41f4e4:	461d      	mov	r5, r3
  41f4e6:	5ccc      	ldrb	r4, [r1, r3]
  41f4e8:	b12c      	cbz	r4, 41f4f6 <create_axis_label_iter+0x22>
        if(list[j] == '\n')
  41f4ea:	2c0a      	cmp	r4, #10
  41f4ec:	d1f8      	bne.n	41f4e0 <create_axis_label_iter+0xc>
            iterator.items_left++;
  41f4ee:	7a04      	ldrb	r4, [r0, #8]
  41f4f0:	3401      	adds	r4, #1
  41f4f2:	7204      	strb	r4, [r0, #8]
  41f4f4:	e7f4      	b.n	41f4e0 <create_axis_label_iter+0xc>
    }

    if(iterator_dir == LV_CHART_LABEL_ITERATOR_FORWARD) {
  41f4f6:	2a01      	cmp	r2, #1
  41f4f8:	d009      	beq.n	41f50e <create_axis_label_iter+0x3a>
        iterator.is_reverse_iter = 0;
        iterator.current_pos = list;
    }
    else {
        iterator.is_reverse_iter = 1;
  41f4fa:	2301      	movs	r3, #1
  41f4fc:	7243      	strb	r3, [r0, #9]
        // -1 to skip '\0' at the end of the string
        iterator.current_pos = list + j - 1;
  41f4fe:	3d01      	subs	r5, #1
  41f500:	4429      	add	r1, r5
  41f502:	6041      	str	r1, [r0, #4]
    }
    iterator.items_left++;
  41f504:	7a03      	ldrb	r3, [r0, #8]
  41f506:	3301      	adds	r3, #1
  41f508:	7203      	strb	r3, [r0, #8]
    return iterator;
}
  41f50a:	bc30      	pop	{r4, r5}
  41f50c:	4770      	bx	lr
        iterator.current_pos = list;
  41f50e:	6041      	str	r1, [r0, #4]
  41f510:	e7f8      	b.n	41f504 <create_axis_label_iter+0x30>
	...

0041f514 <lv_chart_get_style>:
{
  41f514:	b538      	push	{r3, r4, r5, lr}
  41f516:	4604      	mov	r4, r0
  41f518:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(chart, LV_OBJX_NAME);
  41f51a:	4b0e      	ldr	r3, [pc, #56]	; (41f554 <lv_chart_get_style+0x40>)
  41f51c:	4798      	blx	r3
  41f51e:	b928      	cbnz	r0, 41f52c <lv_chart_get_style+0x18>
  41f520:	4622      	mov	r2, r4
  41f522:	2300      	movs	r3, #0
  41f524:	480c      	ldr	r0, [pc, #48]	; (41f558 <lv_chart_get_style+0x44>)
  41f526:	490d      	ldr	r1, [pc, #52]	; (41f55c <lv_chart_get_style+0x48>)
  41f528:	4788      	blx	r1
  41f52a:	e7fe      	b.n	41f52a <lv_chart_get_style+0x16>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  41f52c:	4620      	mov	r0, r4
  41f52e:	4b0c      	ldr	r3, [pc, #48]	; (41f560 <lv_chart_get_style+0x4c>)
  41f530:	4798      	blx	r3
    switch(part) {
  41f532:	2d03      	cmp	r5, #3
  41f534:	d80c      	bhi.n	41f550 <lv_chart_get_style+0x3c>
  41f536:	e8df f005 	tbb	[pc, r5]
  41f53a:	0502      	.short	0x0502
  41f53c:	0907      	.short	0x0907
            style_dsc_p = &chart->style_list;
  41f53e:	f104 0028 	add.w	r0, r4, #40	; 0x28
            break;
  41f542:	bd38      	pop	{r3, r4, r5, pc}
            style_dsc_p = &ext->style_series_bg;
  41f544:	3024      	adds	r0, #36	; 0x24
            break;
  41f546:	bd38      	pop	{r3, r4, r5, pc}
            style_dsc_p = &ext->style_series;
  41f548:	302c      	adds	r0, #44	; 0x2c
            break;
  41f54a:	bd38      	pop	{r3, r4, r5, pc}
            style_dsc_p = &ext->style_cursors;
  41f54c:	3034      	adds	r0, #52	; 0x34
            break;
  41f54e:	bd38      	pop	{r3, r4, r5, pc}
            style_dsc_p = NULL;
  41f550:	2000      	movs	r0, #0
}
  41f552:	bd38      	pop	{r3, r4, r5, pc}
  41f554:	00415f95 	.word	0x00415f95
  41f558:	0042c728 	.word	0x0042c728
  41f55c:	00415fa1 	.word	0x00415fa1
  41f560:	00408115 	.word	0x00408115

0041f564 <draw_series_bg>:
{
  41f564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41f568:	b09f      	sub	sp, #124	; 0x7c
  41f56a:	4604      	mov	r4, r0
  41f56c:	460e      	mov	r6, r1
  41f56e:	4615      	mov	r5, r2
  41f570:	9200      	str	r2, [sp, #0]
    lv_draw_rect_dsc_init(&bg_dsc);
  41f572:	a809      	add	r0, sp, #36	; 0x24
  41f574:	4b4d      	ldr	r3, [pc, #308]	; (41f6ac <draw_series_bg+0x148>)
  41f576:	4798      	blx	r3
    lv_obj_init_draw_rect_dsc(chart, LV_CHART_PART_SERIES_BG, &bg_dsc);
  41f578:	aa09      	add	r2, sp, #36	; 0x24
  41f57a:	2101      	movs	r1, #1
  41f57c:	4620      	mov	r0, r4
  41f57e:	4b4c      	ldr	r3, [pc, #304]	; (41f6b0 <draw_series_bg+0x14c>)
  41f580:	4798      	blx	r3
    lv_draw_rect(series_area, clip_area, &bg_dsc);
  41f582:	aa09      	add	r2, sp, #36	; 0x24
  41f584:	4629      	mov	r1, r5
  41f586:	4630      	mov	r0, r6
  41f588:	4b4a      	ldr	r3, [pc, #296]	; (41f6b4 <draw_series_bg+0x150>)
  41f58a:	4798      	blx	r3
    lv_chart_ext_t * ext     = lv_obj_get_ext_attr(chart);
  41f58c:	4620      	mov	r0, r4
  41f58e:	4b4a      	ldr	r3, [pc, #296]	; (41f6b8 <draw_series_bg+0x154>)
  41f590:	4798      	blx	r3
  41f592:	4605      	mov	r5, r0
  41f594:	88b3      	ldrh	r3, [r6, #4]
  41f596:	f9b6 7000 	ldrsh.w	r7, [r6]
  41f59a:	fa1f f887 	uxth.w	r8, r7
  41f59e:	eba3 0308 	sub.w	r3, r3, r8
  41f5a2:	b29b      	uxth	r3, r3
  41f5a4:	3301      	adds	r3, #1
  41f5a6:	b29b      	uxth	r3, r3
  41f5a8:	9303      	str	r3, [sp, #12]
  41f5aa:	fa0f fa83 	sxth.w	sl, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41f5ae:	88f3      	ldrh	r3, [r6, #6]
  41f5b0:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
  41f5b4:	9201      	str	r2, [sp, #4]
  41f5b6:	b296      	uxth	r6, r2
  41f5b8:	1b9b      	subs	r3, r3, r6
  41f5ba:	b29b      	uxth	r3, r3
  41f5bc:	3301      	adds	r3, #1
  41f5be:	b29b      	uxth	r3, r3
  41f5c0:	9302      	str	r3, [sp, #8]
  41f5c2:	fa0f fb83 	sxth.w	fp, r3
    lv_draw_line_dsc_init(&line_dsc);
  41f5c6:	a804      	add	r0, sp, #16
  41f5c8:	4b3c      	ldr	r3, [pc, #240]	; (41f6bc <draw_series_bg+0x158>)
  41f5ca:	4798      	blx	r3
    lv_obj_init_draw_line_dsc(chart, LV_CHART_PART_SERIES_BG, &line_dsc);
  41f5cc:	aa04      	add	r2, sp, #16
  41f5ce:	2101      	movs	r1, #1
  41f5d0:	4620      	mov	r0, r4
  41f5d2:	4b3b      	ldr	r3, [pc, #236]	; (41f6c0 <draw_series_bg+0x15c>)
  41f5d4:	4798      	blx	r3
    if(ext->hdiv_cnt != 0) {
  41f5d6:	f895 9020 	ldrb.w	r9, [r5, #32]
  41f5da:	f1b9 0f00 	cmp.w	r9, #0
  41f5de:	d02d      	beq.n	41f63c <draw_series_bg+0xd8>
        if(bg_dsc.border_width != 0) {
  41f5e0:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
  41f5e4:	b963      	cbnz	r3, 41f600 <draw_series_bg+0x9c>
            div_i_end   = ext->hdiv_cnt + 1;
  41f5e6:	f109 0901 	add.w	r9, r9, #1
  41f5ea:	fa5f f989 	uxtb.w	r9, r9
            div_i_start = 0;
  41f5ee:	2400      	movs	r4, #0
        p1.x = 0 + x_ofs;
  41f5f0:	f8ad 7020 	strh.w	r7, [sp, #32]
        p2.x = w - 1 + x_ofs;
  41f5f4:	9b03      	ldr	r3, [sp, #12]
  41f5f6:	4443      	add	r3, r8
  41f5f8:	3b01      	subs	r3, #1
  41f5fa:	f8ad 301c 	strh.w	r3, [sp, #28]
        for(div_i = div_i_start; div_i <= div_i_end; div_i++) {
  41f5fe:	e01b      	b.n	41f638 <draw_series_bg+0xd4>
            div_i_start = 1;
  41f600:	2401      	movs	r4, #1
  41f602:	e7f5      	b.n	41f5f0 <draw_series_bg+0x8c>
            p1.y = (int32_t)((int32_t)(h - line_dsc.width) * div_i) / (ext->hdiv_cnt + 1);
  41f604:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
  41f608:	ebab 0303 	sub.w	r3, fp, r3
  41f60c:	fb03 f304 	mul.w	r3, r3, r4
  41f610:	f895 2020 	ldrb.w	r2, [r5, #32]
  41f614:	3201      	adds	r2, #1
  41f616:	fb93 f3f2 	sdiv	r3, r3, r2
            p1.y += y_ofs;
  41f61a:	fa06 f383 	sxtah	r3, r6, r3
  41f61e:	b21b      	sxth	r3, r3
  41f620:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            p2.y = p1.y;
  41f624:	f8ad 301e 	strh.w	r3, [sp, #30]
            lv_draw_line(&p1, &p2, clip_area, &line_dsc);
  41f628:	ab04      	add	r3, sp, #16
  41f62a:	9a00      	ldr	r2, [sp, #0]
  41f62c:	a907      	add	r1, sp, #28
  41f62e:	a808      	add	r0, sp, #32
  41f630:	4f24      	ldr	r7, [pc, #144]	; (41f6c4 <draw_series_bg+0x160>)
  41f632:	47b8      	blx	r7
        for(div_i = div_i_start; div_i <= div_i_end; div_i++) {
  41f634:	3401      	adds	r4, #1
  41f636:	b2e4      	uxtb	r4, r4
  41f638:	454c      	cmp	r4, r9
  41f63a:	d9e3      	bls.n	41f604 <draw_series_bg+0xa0>
    if(ext->vdiv_cnt != 0) {
  41f63c:	f895 7021 	ldrb.w	r7, [r5, #33]	; 0x21
  41f640:	b387      	cbz	r7, 41f6a4 <draw_series_bg+0x140>
        if(bg_dsc.border_width != 0) {
  41f642:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
  41f646:	b97b      	cbnz	r3, 41f668 <draw_series_bg+0x104>
            div_i_end   = ext->vdiv_cnt + 1;
  41f648:	3701      	adds	r7, #1
  41f64a:	b2ff      	uxtb	r7, r7
            div_i_start = 0;
  41f64c:	2400      	movs	r4, #0
        p1.y = 0 + y_ofs;
  41f64e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  41f652:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
        p2.y = h + y_ofs - 1;
  41f656:	9b02      	ldr	r3, [sp, #8]
  41f658:	441e      	add	r6, r3
  41f65a:	b2b6      	uxth	r6, r6
  41f65c:	3e01      	subs	r6, #1
  41f65e:	f8ad 601e 	strh.w	r6, [sp, #30]
  41f662:	f8dd 9000 	ldr.w	r9, [sp]
        for(div_i = div_i_start; div_i <= div_i_end; div_i++) {
  41f666:	e01b      	b.n	41f6a0 <draw_series_bg+0x13c>
            div_i_start = 1;
  41f668:	2401      	movs	r4, #1
  41f66a:	e7f0      	b.n	41f64e <draw_series_bg+0xea>
            p1.x = (int32_t)((int32_t)(w - line_dsc.width) * div_i) / (ext->vdiv_cnt + 1);
  41f66c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
  41f670:	ebaa 0303 	sub.w	r3, sl, r3
  41f674:	fb03 f304 	mul.w	r3, r3, r4
  41f678:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
  41f67c:	3201      	adds	r2, #1
  41f67e:	fb93 f3f2 	sdiv	r3, r3, r2
            p1.x += x_ofs;
  41f682:	fa08 f383 	sxtah	r3, r8, r3
  41f686:	b21b      	sxth	r3, r3
  41f688:	f8ad 3020 	strh.w	r3, [sp, #32]
            p2.x = p1.x;
  41f68c:	f8ad 301c 	strh.w	r3, [sp, #28]
            lv_draw_line(&p1, &p2, clip_area, &line_dsc);
  41f690:	ab04      	add	r3, sp, #16
  41f692:	464a      	mov	r2, r9
  41f694:	a907      	add	r1, sp, #28
  41f696:	a808      	add	r0, sp, #32
  41f698:	4e0a      	ldr	r6, [pc, #40]	; (41f6c4 <draw_series_bg+0x160>)
  41f69a:	47b0      	blx	r6
        for(div_i = div_i_start; div_i <= div_i_end; div_i++) {
  41f69c:	3401      	adds	r4, #1
  41f69e:	b2e4      	uxtb	r4, r4
  41f6a0:	42bc      	cmp	r4, r7
  41f6a2:	d9e3      	bls.n	41f66c <draw_series_bg+0x108>
}
  41f6a4:	b01f      	add	sp, #124	; 0x7c
  41f6a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41f6aa:	bf00      	nop
  41f6ac:	0041250d 	.word	0x0041250d
  41f6b0:	004083ed 	.word	0x004083ed
  41f6b4:	00412559 	.word	0x00412559
  41f6b8:	00408115 	.word	0x00408115
  41f6bc:	0040edd5 	.word	0x0040edd5
  41f6c0:	00408b95 	.word	0x00408b95
  41f6c4:	0040edf1 	.word	0x0040edf1

0041f6c8 <get_next_axis_label>:
 * Get next label from iterator created by lv_chart_create_label_iter()
 * @param iterator iterator to get label from
 * @param[out] buf buffer to point next label to
 */
static void get_next_axis_label(lv_chart_label_iterator_t * iterator, char * buf)
{
  41f6c8:	b538      	push	{r3, r4, r5, lr}
  41f6ca:	460d      	mov	r5, r1
    uint32_t label_len = 0;
    if(iterator->is_reverse_iter) {
  41f6cc:	7a43      	ldrb	r3, [r0, #9]
  41f6ce:	b9d3      	cbnz	r3, 41f706 <get_next_axis_label+0x3e>
  41f6d0:	2400      	movs	r4, #0
  41f6d2:	e01f      	b.n	41f714 <get_next_axis_label+0x4c>
        const char * label_start;
        /* count the length of the current label*/
        while((*iterator->current_pos != '\n') &&
              (iterator->current_pos != iterator->list_start)) {
            iterator->current_pos--;
  41f6d4:	3901      	subs	r1, #1
  41f6d6:	6041      	str	r1, [r0, #4]
            label_len++;
  41f6d8:	3401      	adds	r4, #1
        while((*iterator->current_pos != '\n') &&
  41f6da:	6841      	ldr	r1, [r0, #4]
  41f6dc:	780b      	ldrb	r3, [r1, #0]
  41f6de:	2b0a      	cmp	r3, #10
  41f6e0:	d002      	beq.n	41f6e8 <get_next_axis_label+0x20>
              (iterator->current_pos != iterator->list_start)) {
  41f6e2:	6802      	ldr	r2, [r0, #0]
        while((*iterator->current_pos != '\n') &&
  41f6e4:	4291      	cmp	r1, r2
  41f6e6:	d1f5      	bne.n	41f6d4 <get_next_axis_label+0xc>
        }

        label_start = iterator->current_pos;

        if(*iterator->current_pos == '\n') {
  41f6e8:	2b0a      	cmp	r3, #10
  41f6ea:	d00e      	beq.n	41f70a <get_next_axis_label+0x42>
            /* skip newline*/
            iterator->current_pos--;
        }
        else {
            /* it is last label in list (first one from the beginning )*/
            label_len++;
  41f6ec:	3401      	adds	r4, #1
        }

        /* do not allow output buffer overflow */
        if(label_len > LV_CHART_AXIS_TICK_LABEL_MAX_LEN) {
  41f6ee:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
  41f6f2:	d901      	bls.n	41f6f8 <get_next_axis_label+0x30>
            label_len = LV_CHART_AXIS_TICK_LABEL_MAX_LEN;
  41f6f4:	f44f 7480 	mov.w	r4, #256	; 0x100
        }

        strncpy(buf, label_start, label_len);
  41f6f8:	4622      	mov	r2, r4
  41f6fa:	4628      	mov	r0, r5
  41f6fc:	4b11      	ldr	r3, [pc, #68]	; (41f744 <get_next_axis_label+0x7c>)
  41f6fe:	4798      	blx	r3

        if(*iterator->current_pos == '\n') iterator->current_pos++;
    }

    /* terminate the string */
    buf[label_len] = '\0';
  41f700:	2300      	movs	r3, #0
  41f702:	552b      	strb	r3, [r5, r4]
  41f704:	bd38      	pop	{r3, r4, r5, pc}
  41f706:	2400      	movs	r4, #0
  41f708:	e7e7      	b.n	41f6da <get_next_axis_label+0x12>
            iterator->current_pos--;
  41f70a:	1e4b      	subs	r3, r1, #1
  41f70c:	6043      	str	r3, [r0, #4]
            label_start++;
  41f70e:	3101      	adds	r1, #1
  41f710:	e7ed      	b.n	41f6ee <get_next_axis_label+0x26>
                label_len++;
  41f712:	3401      	adds	r4, #1
        while(iterator->current_pos[label_len] != '\n' &&
  41f714:	6843      	ldr	r3, [r0, #4]
  41f716:	191a      	adds	r2, r3, r4
  41f718:	5d1b      	ldrb	r3, [r3, r4]
  41f71a:	2b0a      	cmp	r3, #10
  41f71c:	bf18      	it	ne
  41f71e:	2b00      	cmpne	r3, #0
  41f720:	d004      	beq.n	41f72c <get_next_axis_label+0x64>
            if(label_len < LV_CHART_AXIS_TICK_LABEL_MAX_LEN) {
  41f722:	2cff      	cmp	r4, #255	; 0xff
  41f724:	d8f5      	bhi.n	41f712 <get_next_axis_label+0x4a>
                buf[label_len] = iterator->current_pos[label_len];
  41f726:	552b      	strb	r3, [r5, r4]
                label_len++;
  41f728:	3401      	adds	r4, #1
  41f72a:	e7f3      	b.n	41f714 <get_next_axis_label+0x4c>
        iterator->current_pos += label_len;
  41f72c:	6042      	str	r2, [r0, #4]
        if(label_len > LV_CHART_AXIS_TICK_LABEL_MAX_LEN) {
  41f72e:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
  41f732:	d901      	bls.n	41f738 <get_next_axis_label+0x70>
            label_len = LV_CHART_AXIS_TICK_LABEL_MAX_LEN;
  41f734:	f44f 7480 	mov.w	r4, #256	; 0x100
        if(*iterator->current_pos == '\n') iterator->current_pos++;
  41f738:	7813      	ldrb	r3, [r2, #0]
  41f73a:	2b0a      	cmp	r3, #10
  41f73c:	d1e0      	bne.n	41f700 <get_next_axis_label+0x38>
  41f73e:	3201      	adds	r2, #1
  41f740:	6042      	str	r2, [r0, #4]
  41f742:	e7dd      	b.n	41f700 <get_next_axis_label+0x38>
  41f744:	0042869d 	.word	0x0042869d

0041f748 <draw_y_ticks>:
{
    return ((tick_num == 0) || ((tick_num % axis->num_tick_marks) == 0));
}

static void draw_y_ticks(lv_obj_t * chart, const lv_area_t * series_area, const lv_area_t * mask, uint8_t which_axis)
{
  41f748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41f74c:	b0e5      	sub	sp, #404	; 0x194
  41f74e:	4604      	mov	r4, r0
  41f750:	460d      	mov	r5, r1
  41f752:	4616      	mov	r6, r2
  41f754:	469b      	mov	fp, r3
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  41f756:	4b97      	ldr	r3, [pc, #604]	; (41f9b4 <draw_y_ticks+0x26c>)
  41f758:	4798      	blx	r3
    lv_chart_axis_cfg_t * y_axis = (which_axis == LV_CHART_AXIS_PRIMARY_Y) ?
                                   &ext->y_axis : &ext->secondary_y_axis;
  41f75a:	f1bb 0f00 	cmp.w	fp, #0
  41f75e:	d167      	bne.n	41f830 <draw_y_ticks+0xe8>
  41f760:	f100 0740 	add.w	r7, r0, #64	; 0x40

    if(y_axis->list_of_values == NULL && y_axis->num_tick_marks == 0)  return;
  41f764:	6839      	ldr	r1, [r7, #0]
  41f766:	2900      	cmp	r1, #0
  41f768:	d065      	beq.n	41f836 <draw_y_ticks+0xee>
  41f76a:	f8b5 8006 	ldrh.w	r8, [r5, #6]
  41f76e:	f8b5 a002 	ldrh.w	sl, [r5, #2]
  41f772:	eba8 080a 	sub.w	r8, r8, sl
  41f776:	fa1f f888 	uxth.w	r8, r8
  41f77a:	f108 0801 	add.w	r8, r8, #1
  41f77e:	fa0f f888 	sxth.w	r8, r8
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41f782:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  41f786:	9306      	str	r3, [sp, #24]
  41f788:	b29b      	uxth	r3, r3
  41f78a:	f9b5 2000 	ldrsh.w	r2, [r5]
  41f78e:	b290      	uxth	r0, r2
  41f790:	1a1b      	subs	r3, r3, r0
  41f792:	b29b      	uxth	r3, r3
  41f794:	3301      	adds	r3, #1
  41f796:	b21b      	sxth	r3, r3
    lv_coord_t h     = lv_area_get_height(series_area);
    lv_coord_t w     = lv_area_get_width(series_area);
    char buf[LV_CHART_AXIS_TICK_LABEL_MAX_LEN + 1]; /* up to N symbols per label + null terminator */

    /* chose correct side of the chart */
    if(which_axis == LV_CHART_AXIS_PRIMARY_Y)
  41f798:	f1bb 0f00 	cmp.w	fp, #0
  41f79c:	d100      	bne.n	41f7a0 <draw_y_ticks+0x58>
        x_ofs = series_area->x1;
  41f79e:	9206      	str	r2, [sp, #24]
    else
        x_ofs = series_area->x2;

    /* calculate the size of tick marks */
    if(y_axis->major_tick_len == LV_CHART_TICK_LENGTH_AUTO)
  41f7a0:	79ba      	ldrb	r2, [r7, #6]
  41f7a2:	2aff      	cmp	r2, #255	; 0xff
  41f7a4:	d04d      	beq.n	41f842 <draw_y_ticks+0xfa>
        major_tick_len = (int32_t)w * LV_CHART_AXIS_MAJOR_TICK_LEN_COE;
    else
        major_tick_len = y_axis->major_tick_len;
  41f7a6:	b253      	sxtb	r3, r2
  41f7a8:	9308      	str	r3, [sp, #32]

    if(y_axis->minor_tick_len == LV_CHART_TICK_LENGTH_AUTO)
  41f7aa:	79fb      	ldrb	r3, [r7, #7]
  41f7ac:	2bff      	cmp	r3, #255	; 0xff
  41f7ae:	d052      	beq.n	41f856 <draw_y_ticks+0x10e>
        minor_tick_len = major_tick_len * LV_CHART_AXIS_MINOR_TICK_LEN_COE;
    else
        minor_tick_len = y_axis->minor_tick_len;
  41f7b0:	b25b      	sxtb	r3, r3
  41f7b2:	9307      	str	r3, [sp, #28]

    /* tick lines on secondary y axis are drawn in other direction*/
    if(which_axis == LV_CHART_AXIS_SECONDARY_Y) {
  41f7b4:	f1bb 0f01 	cmp.w	fp, #1
  41f7b8:	d057      	beq.n	41f86a <draw_y_ticks+0x122>
        major_tick_len *= -1;
        minor_tick_len *= -1;
    }

    iter_dir = (y_axis->options & LV_CHART_AXIS_INVERSE_LABELS_ORDER) ? LV_CHART_LABEL_ITERATOR_REVERSE :
  41f7ba:	793a      	ldrb	r2, [r7, #4]
  41f7bc:	0852      	lsrs	r2, r2, #1
  41f7be:	f082 0201 	eor.w	r2, r2, #1
               LV_CHART_LABEL_ITERATOR_FORWARD;
    iter = create_axis_label_iter(y_axis->list_of_values, iter_dir);
  41f7c2:	ad0a      	add	r5, sp, #40	; 0x28
  41f7c4:	f002 0201 	and.w	r2, r2, #1
  41f7c8:	4628      	mov	r0, r5
  41f7ca:	4b7b      	ldr	r3, [pc, #492]	; (41f9b8 <draw_y_ticks+0x270>)
  41f7cc:	4798      	blx	r3
  41f7ce:	ab5f      	add	r3, sp, #380	; 0x17c
  41f7d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  41f7d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    /*determine the number of options */
    num_of_labels = iter.items_left;
  41f7d8:	f89d 9184 	ldrb.w	r9, [sp, #388]	; 0x184

    /* we can't have string labels without ticks step, set to 1 if not specified */
    if(y_axis->num_tick_marks == 0) y_axis->num_tick_marks = 1;
  41f7dc:	797b      	ldrb	r3, [r7, #5]
  41f7de:	b90b      	cbnz	r3, 41f7e4 <draw_y_ticks+0x9c>
  41f7e0:	2301      	movs	r3, #1
  41f7e2:	717b      	strb	r3, [r7, #5]

    /* calculate total number of ticks */
    if(num_of_labels < 2)
  41f7e4:	f1b9 0f01 	cmp.w	r9, #1
  41f7e8:	d948      	bls.n	41f87c <draw_y_ticks+0x134>
        num_scale_ticks = y_axis->num_tick_marks;
    else
        num_scale_ticks = (y_axis->num_tick_marks * (num_of_labels - 1));
  41f7ea:	797b      	ldrb	r3, [r7, #5]
  41f7ec:	f109 35ff 	add.w	r5, r9, #4294967295
  41f7f0:	fb15 f503 	smulbb	r5, r5, r3
  41f7f4:	b2ed      	uxtb	r5, r5

    lv_style_int_t label_dist  = which_axis == LV_CHART_AXIS_PRIMARY_Y ?
  41f7f6:	f1bb 0f00 	cmp.w	fp, #0
  41f7fa:	d141      	bne.n	41f880 <draw_y_ticks+0x138>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41f7fc:	2212      	movs	r2, #18
  41f7fe:	2101      	movs	r1, #1
  41f800:	4620      	mov	r0, r4
  41f802:	4b6e      	ldr	r3, [pc, #440]	; (41f9bc <draw_y_ticks+0x274>)
  41f804:	4798      	blx	r3
  41f806:	9009      	str	r0, [sp, #36]	; 0x24
                                 lv_obj_get_style_pad_left(chart, LV_CHART_PART_SERIES_BG)  : lv_obj_get_style_pad_right(chart, LV_CHART_PART_SERIES_BG);

    lv_draw_line_dsc_t line_dsc;
    lv_draw_line_dsc_init(&line_dsc);
  41f808:	a81b      	add	r0, sp, #108	; 0x6c
  41f80a:	4b6d      	ldr	r3, [pc, #436]	; (41f9c0 <draw_y_ticks+0x278>)
  41f80c:	4798      	blx	r3
    lv_obj_init_draw_line_dsc(chart, LV_CHART_PART_BG, &line_dsc);
  41f80e:	aa1b      	add	r2, sp, #108	; 0x6c
  41f810:	2100      	movs	r1, #0
  41f812:	4620      	mov	r0, r4
  41f814:	4b6b      	ldr	r3, [pc, #428]	; (41f9c4 <draw_y_ticks+0x27c>)
  41f816:	4798      	blx	r3

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
  41f818:	a812      	add	r0, sp, #72	; 0x48
  41f81a:	4b6b      	ldr	r3, [pc, #428]	; (41f9c8 <draw_y_ticks+0x280>)
  41f81c:	4798      	blx	r3
    lv_obj_init_draw_label_dsc(chart, LV_CHART_PART_BG, &label_dsc);
  41f81e:	aa12      	add	r2, sp, #72	; 0x48
  41f820:	2100      	movs	r1, #0
  41f822:	4620      	mov	r0, r4
  41f824:	4b69      	ldr	r3, [pc, #420]	; (41f9cc <draw_y_ticks+0x284>)
  41f826:	4798      	blx	r3

    for(i = 0; i < (num_scale_ticks + 1); i++) { /* one extra loop - it may not exist in the list, empty label */
  41f828:	2400      	movs	r4, #0
  41f82a:	f8cd b014 	str.w	fp, [sp, #20]
  41f82e:	e032      	b.n	41f896 <draw_y_ticks+0x14e>
                                   &ext->y_axis : &ext->secondary_y_axis;
  41f830:	f100 0750 	add.w	r7, r0, #80	; 0x50
  41f834:	e796      	b.n	41f764 <draw_y_ticks+0x1c>
    if(y_axis->list_of_values == NULL && y_axis->num_tick_marks == 0)  return;
  41f836:	797b      	ldrb	r3, [r7, #5]
  41f838:	2b00      	cmp	r3, #0
  41f83a:	d196      	bne.n	41f76a <draw_y_ticks+0x22>

                lv_draw_label(&a, mask, &label_dsc, buf, NULL);
            }
        }
    }
}
  41f83c:	b065      	add	sp, #404	; 0x194
  41f83e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        major_tick_len = (int32_t)w * LV_CHART_AXIS_MAJOR_TICK_LEN_COE;
  41f842:	4a63      	ldr	r2, [pc, #396]	; (41f9d0 <draw_y_ticks+0x288>)
  41f844:	fb82 0203 	smull	r0, r2, r2, r3
  41f848:	441a      	add	r2, r3
  41f84a:	17db      	asrs	r3, r3, #31
  41f84c:	ebc3 03e2 	rsb	r3, r3, r2, asr #3
  41f850:	b25b      	sxtb	r3, r3
  41f852:	9308      	str	r3, [sp, #32]
  41f854:	e7a9      	b.n	41f7aa <draw_y_ticks+0x62>
        minor_tick_len = major_tick_len * LV_CHART_AXIS_MINOR_TICK_LEN_COE;
  41f856:	9b08      	ldr	r3, [sp, #32]
  41f858:	005a      	lsls	r2, r3, #1
  41f85a:	4b5e      	ldr	r3, [pc, #376]	; (41f9d4 <draw_y_ticks+0x28c>)
  41f85c:	fb83 0302 	smull	r0, r3, r3, r2
  41f860:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
  41f864:	b25b      	sxtb	r3, r3
  41f866:	9307      	str	r3, [sp, #28]
  41f868:	e7a4      	b.n	41f7b4 <draw_y_ticks+0x6c>
        major_tick_len *= -1;
  41f86a:	9b08      	ldr	r3, [sp, #32]
  41f86c:	425b      	negs	r3, r3
  41f86e:	b25b      	sxtb	r3, r3
  41f870:	9308      	str	r3, [sp, #32]
        minor_tick_len *= -1;
  41f872:	9b07      	ldr	r3, [sp, #28]
  41f874:	425b      	negs	r3, r3
  41f876:	b25b      	sxtb	r3, r3
  41f878:	9307      	str	r3, [sp, #28]
  41f87a:	e79e      	b.n	41f7ba <draw_y_ticks+0x72>
        num_scale_ticks = y_axis->num_tick_marks;
  41f87c:	797d      	ldrb	r5, [r7, #5]
  41f87e:	e7ba      	b.n	41f7f6 <draw_y_ticks+0xae>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41f880:	2213      	movs	r2, #19
  41f882:	2101      	movs	r1, #1
  41f884:	4620      	mov	r0, r4
  41f886:	4b4d      	ldr	r3, [pc, #308]	; (41f9bc <draw_y_ticks+0x274>)
  41f888:	4798      	blx	r3
  41f88a:	9009      	str	r0, [sp, #36]	; 0x24
  41f88c:	e7bc      	b.n	41f808 <draw_y_ticks+0xc0>
    return ((tick_num == 0) || ((tick_num % axis->num_tick_marks) == 0));
  41f88e:	2301      	movs	r3, #1
            if(is_tick_with_label(i, y_axis)) {
  41f890:	bb6b      	cbnz	r3, 41f8ee <draw_y_ticks+0x1a6>
    for(i = 0; i < (num_scale_ticks + 1); i++) { /* one extra loop - it may not exist in the list, empty label */
  41f892:	3401      	adds	r4, #1
  41f894:	b2e4      	uxtb	r4, r4
  41f896:	1c6b      	adds	r3, r5, #1
  41f898:	429c      	cmp	r4, r3
  41f89a:	dacf      	bge.n	41f83c <draw_y_ticks+0xf4>
                   y_ofs + (int32_t)((int32_t)(h - line_dsc.width) * i) / num_scale_ticks;
  41f89c:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
  41f8a0:	eba8 0303 	sub.w	r3, r8, r3
  41f8a4:	fb03 f304 	mul.w	r3, r3, r4
  41f8a8:	fb93 f3f5 	sdiv	r3, r3, r5
  41f8ac:	4453      	add	r3, sl
  41f8ae:	b21b      	sxth	r3, r3
        p2.y = p1.y =
  41f8b0:	f8ad 318e 	strh.w	r3, [sp, #398]	; 0x18e
  41f8b4:	f8ad 318a 	strh.w	r3, [sp, #394]	; 0x18a
        if(p2.y - label_dsc.font->line_height > mask->y2) return;
  41f8b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
  41f8ba:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
  41f8be:	1a98      	subs	r0, r3, r2
  41f8c0:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
  41f8c4:	4288      	cmp	r0, r1
  41f8c6:	dcb9      	bgt.n	41f83c <draw_y_ticks+0xf4>
        if(p2.y + label_dsc.font->line_height < mask->y1) {
  41f8c8:	4413      	add	r3, r2
  41f8ca:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
  41f8ce:	4293      	cmp	r3, r2
  41f8d0:	da12      	bge.n	41f8f8 <draw_y_ticks+0x1b0>
    return ((tick_num == 0) || ((tick_num % axis->num_tick_marks) == 0));
  41f8d2:	2c00      	cmp	r4, #0
  41f8d4:	d0db      	beq.n	41f88e <draw_y_ticks+0x146>
  41f8d6:	797a      	ldrb	r2, [r7, #5]
  41f8d8:	fbb4 f3f2 	udiv	r3, r4, r2
  41f8dc:	fb02 4313 	mls	r3, r2, r3, r4
  41f8e0:	f013 0fff 	tst.w	r3, #255	; 0xff
  41f8e4:	d101      	bne.n	41f8ea <draw_y_ticks+0x1a2>
  41f8e6:	2301      	movs	r3, #1
  41f8e8:	e7d2      	b.n	41f890 <draw_y_ticks+0x148>
  41f8ea:	2300      	movs	r3, #0
  41f8ec:	e7d0      	b.n	41f890 <draw_y_ticks+0x148>
                get_next_axis_label(&iter, buf);
  41f8ee:	a91e      	add	r1, sp, #120	; 0x78
  41f8f0:	a85f      	add	r0, sp, #380	; 0x17c
  41f8f2:	4b39      	ldr	r3, [pc, #228]	; (41f9d8 <draw_y_ticks+0x290>)
  41f8f4:	4798      	blx	r3
            continue;
  41f8f6:	e7cc      	b.n	41f892 <draw_y_ticks+0x14a>
        if(which_axis == LV_CHART_AXIS_PRIMARY_Y)
  41f8f8:	9b05      	ldr	r3, [sp, #20]
  41f8fa:	b9b3      	cbnz	r3, 41f92a <draw_y_ticks+0x1e2>
            p1.x--;
  41f8fc:	9b06      	ldr	r3, [sp, #24]
  41f8fe:	3b01      	subs	r3, #1
  41f900:	f8ad 318c 	strh.w	r3, [sp, #396]	; 0x18c
        if((num_of_labels != 0) && (i == 0 || i % y_axis->num_tick_marks == 0))
  41f904:	f1b9 0f00 	cmp.w	r9, #0
  41f908:	d014      	beq.n	41f934 <draw_y_ticks+0x1ec>
  41f90a:	b13c      	cbz	r4, 41f91c <draw_y_ticks+0x1d4>
  41f90c:	797a      	ldrb	r2, [r7, #5]
  41f90e:	fbb4 f3f2 	udiv	r3, r4, r2
  41f912:	fb02 4313 	mls	r3, r2, r3, r4
  41f916:	f013 0fff 	tst.w	r3, #255	; 0xff
  41f91a:	d10b      	bne.n	41f934 <draw_y_ticks+0x1ec>
            p2.x = p1.x - major_tick_len; /* major tick */
  41f91c:	f8bd 318c 	ldrh.w	r3, [sp, #396]	; 0x18c
  41f920:	9a08      	ldr	r2, [sp, #32]
  41f922:	1a9b      	subs	r3, r3, r2
  41f924:	f8ad 3188 	strh.w	r3, [sp, #392]	; 0x188
  41f928:	e00a      	b.n	41f940 <draw_y_ticks+0x1f8>
            p1.x++;
  41f92a:	9b06      	ldr	r3, [sp, #24]
  41f92c:	3301      	adds	r3, #1
  41f92e:	f8ad 318c 	strh.w	r3, [sp, #396]	; 0x18c
  41f932:	e7e7      	b.n	41f904 <draw_y_ticks+0x1bc>
            p2.x = p1.x - minor_tick_len; /* minor tick */
  41f934:	f8bd 318c 	ldrh.w	r3, [sp, #396]	; 0x18c
  41f938:	9a07      	ldr	r2, [sp, #28]
  41f93a:	1a9b      	subs	r3, r3, r2
  41f93c:	f8ad 3188 	strh.w	r3, [sp, #392]	; 0x188
        if(y_axis->options & LV_CHART_AXIS_INVERSE_LABELS_ORDER) {
  41f940:	793b      	ldrb	r3, [r7, #4]
  41f942:	f013 0f02 	tst.w	r3, #2
  41f946:	d013      	beq.n	41f970 <draw_y_ticks+0x228>
            if(i != 0)
  41f948:	b954      	cbnz	r4, 41f960 <draw_y_ticks+0x218>
            else if((y_axis->options & LV_CHART_AXIS_DRAW_LAST_TICK) != 0)
  41f94a:	f013 0f01 	tst.w	r3, #1
  41f94e:	d018      	beq.n	41f982 <draw_y_ticks+0x23a>
                lv_draw_line(&p1, &p2, mask, &line_dsc);
  41f950:	ab1b      	add	r3, sp, #108	; 0x6c
  41f952:	4632      	mov	r2, r6
  41f954:	a962      	add	r1, sp, #392	; 0x188
  41f956:	a863      	add	r0, sp, #396	; 0x18c
  41f958:	f8df b080 	ldr.w	fp, [pc, #128]	; 41f9dc <draw_y_ticks+0x294>
  41f95c:	47d8      	blx	fp
  41f95e:	e010      	b.n	41f982 <draw_y_ticks+0x23a>
                lv_draw_line(&p1, &p2, mask, &line_dsc);
  41f960:	ab1b      	add	r3, sp, #108	; 0x6c
  41f962:	4632      	mov	r2, r6
  41f964:	a962      	add	r1, sp, #392	; 0x188
  41f966:	a863      	add	r0, sp, #396	; 0x18c
  41f968:	f8df b070 	ldr.w	fp, [pc, #112]	; 41f9dc <draw_y_ticks+0x294>
  41f96c:	47d8      	blx	fp
  41f96e:	e008      	b.n	41f982 <draw_y_ticks+0x23a>
            if(i != num_scale_ticks)
  41f970:	42ac      	cmp	r4, r5
  41f972:	d014      	beq.n	41f99e <draw_y_ticks+0x256>
                lv_draw_line(&p1, &p2, mask, &line_dsc);
  41f974:	ab1b      	add	r3, sp, #108	; 0x6c
  41f976:	4632      	mov	r2, r6
  41f978:	a962      	add	r1, sp, #392	; 0x188
  41f97a:	a863      	add	r0, sp, #396	; 0x18c
  41f97c:	f8df b05c 	ldr.w	fp, [pc, #92]	; 41f9dc <draw_y_ticks+0x294>
  41f980:	47d8      	blx	fp
        if(num_of_labels != 0) {
  41f982:	f1b9 0f00 	cmp.w	r9, #0
  41f986:	d084      	beq.n	41f892 <draw_y_ticks+0x14a>
    return ((tick_num == 0) || ((tick_num % axis->num_tick_marks) == 0));
  41f988:	b354      	cbz	r4, 41f9e0 <draw_y_ticks+0x298>
  41f98a:	797a      	ldrb	r2, [r7, #5]
  41f98c:	fbb4 f3f2 	udiv	r3, r4, r2
  41f990:	fb02 4313 	mls	r3, r2, r3, r4
  41f994:	f013 0fff 	tst.w	r3, #255	; 0xff
  41f998:	d162      	bne.n	41fa60 <draw_y_ticks+0x318>
  41f99a:	2301      	movs	r3, #1
  41f99c:	e021      	b.n	41f9e2 <draw_y_ticks+0x29a>
            else if((y_axis->options & LV_CHART_AXIS_DRAW_LAST_TICK) != 0)
  41f99e:	f013 0f01 	tst.w	r3, #1
  41f9a2:	d0ee      	beq.n	41f982 <draw_y_ticks+0x23a>
                lv_draw_line(&p1, &p2, mask, &line_dsc);
  41f9a4:	ab1b      	add	r3, sp, #108	; 0x6c
  41f9a6:	4632      	mov	r2, r6
  41f9a8:	a962      	add	r1, sp, #392	; 0x188
  41f9aa:	a863      	add	r0, sp, #396	; 0x18c
  41f9ac:	f8df b02c 	ldr.w	fp, [pc, #44]	; 41f9dc <draw_y_ticks+0x294>
  41f9b0:	47d8      	blx	fp
  41f9b2:	e7e6      	b.n	41f982 <draw_y_ticks+0x23a>
  41f9b4:	00408115 	.word	0x00408115
  41f9b8:	0041f4d5 	.word	0x0041f4d5
  41f9bc:	00407485 	.word	0x00407485
  41f9c0:	0040edd5 	.word	0x0040edd5
  41f9c4:	00408b95 	.word	0x00408b95
  41f9c8:	0040df85 	.word	0x0040df85
  41f9cc:	00408a1d 	.word	0x00408a1d
  41f9d0:	88888889 	.word	0x88888889
  41f9d4:	55555556 	.word	0x55555556
  41f9d8:	0041f6c9 	.word	0x0041f6c9
  41f9dc:	0040edf1 	.word	0x0040edf1
    return ((tick_num == 0) || ((tick_num % axis->num_tick_marks) == 0));
  41f9e0:	2301      	movs	r3, #1
            if(is_tick_with_label(i, y_axis)) {
  41f9e2:	2b00      	cmp	r3, #0
  41f9e4:	f43f af55 	beq.w	41f892 <draw_y_ticks+0x14a>
                get_next_axis_label(&iter, buf);
  41f9e8:	a91e      	add	r1, sp, #120	; 0x78
  41f9ea:	a85f      	add	r0, sp, #380	; 0x17c
  41f9ec:	4b26      	ldr	r3, [pc, #152]	; (41fa88 <draw_y_ticks+0x340>)
  41f9ee:	4798      	blx	r3
                _lv_txt_get_size(&size, buf, label_dsc.font, label_dsc.letter_space, label_dsc.line_space,
  41f9f0:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
  41f9f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
  41f9f6:	2104      	movs	r1, #4
  41f9f8:	9102      	str	r1, [sp, #8]
  41f9fa:	f647 4118 	movw	r1, #31768	; 0x7c18
  41f9fe:	9101      	str	r1, [sp, #4]
  41fa00:	f9bd 1056 	ldrsh.w	r1, [sp, #86]	; 0x56
  41fa04:	9100      	str	r1, [sp, #0]
  41fa06:	a91e      	add	r1, sp, #120	; 0x78
  41fa08:	a80f      	add	r0, sp, #60	; 0x3c
  41fa0a:	f8df b080 	ldr.w	fp, [pc, #128]	; 41fa8c <draw_y_ticks+0x344>
  41fa0e:	47d8      	blx	fp
                a.y1 = p2.y - size.y / 2;
  41fa10:	f8bd 218a 	ldrh.w	r2, [sp, #394]	; 0x18a
  41fa14:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
  41fa18:	2b00      	cmp	r3, #0
  41fa1a:	db23      	blt.n	41fa64 <draw_y_ticks+0x31c>
  41fa1c:	f3c3 034f 	ubfx	r3, r3, #1, #16
  41fa20:	1ad1      	subs	r1, r2, r3
  41fa22:	f8ad 1042 	strh.w	r1, [sp, #66]	; 0x42
                a.y2 = p2.y + size.y / 2;
  41fa26:	4413      	add	r3, r2
  41fa28:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                if(which_axis == LV_CHART_AXIS_PRIMARY_Y) {
  41fa2c:	9b05      	ldr	r3, [sp, #20]
  41fa2e:	b9db      	cbnz	r3, 41fa68 <draw_y_ticks+0x320>
                    a.x1 = p2.x - size.x - label_dist;
  41fa30:	f8bd 2188 	ldrh.w	r2, [sp, #392]	; 0x188
  41fa34:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  41fa38:	1ad3      	subs	r3, r2, r3
  41fa3a:	b29b      	uxth	r3, r3
  41fa3c:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
  41fa40:	1a5b      	subs	r3, r3, r1
  41fa42:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
                    a.x2 = p2.x - label_dist;
  41fa46:	1a52      	subs	r2, r2, r1
  41fa48:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
                lv_draw_label(&a, mask, &label_dsc, buf, NULL);
  41fa4c:	2300      	movs	r3, #0
  41fa4e:	9300      	str	r3, [sp, #0]
  41fa50:	ab1e      	add	r3, sp, #120	; 0x78
  41fa52:	aa12      	add	r2, sp, #72	; 0x48
  41fa54:	4631      	mov	r1, r6
  41fa56:	a810      	add	r0, sp, #64	; 0x40
  41fa58:	f8df b034 	ldr.w	fp, [pc, #52]	; 41fa90 <draw_y_ticks+0x348>
  41fa5c:	47d8      	blx	fp
  41fa5e:	e718      	b.n	41f892 <draw_y_ticks+0x14a>
    return ((tick_num == 0) || ((tick_num % axis->num_tick_marks) == 0));
  41fa60:	2300      	movs	r3, #0
  41fa62:	e7be      	b.n	41f9e2 <draw_y_ticks+0x29a>
                a.y1 = p2.y - size.y / 2;
  41fa64:	3301      	adds	r3, #1
  41fa66:	e7d9      	b.n	41fa1c <draw_y_ticks+0x2d4>
                    a.x1 = p2.x + label_dist;
  41fa68:	f8bd 3188 	ldrh.w	r3, [sp, #392]	; 0x188
  41fa6c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  41fa70:	1899      	adds	r1, r3, r2
  41fa72:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
                    a.x2 = p2.x + size.x + label_dist;
  41fa76:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
  41fa7a:	440b      	add	r3, r1
  41fa7c:	fa12 f383 	uxtah	r3, r2, r3
  41fa80:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
  41fa84:	e7e2      	b.n	41fa4c <draw_y_ticks+0x304>
  41fa86:	bf00      	nop
  41fa88:	0041f6c9 	.word	0x0041f6c9
  41fa8c:	00417fa5 	.word	0x00417fa5
  41fa90:	0040dfcd 	.word	0x0040dfcd

0041fa94 <draw_x_ticks>:

static void draw_x_ticks(lv_obj_t * chart, const lv_area_t * series_area, const lv_area_t * mask)
{
  41fa94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41fa98:	b0e5      	sub	sp, #404	; 0x194
  41fa9a:	9006      	str	r0, [sp, #24]
  41fa9c:	460c      	mov	r4, r1
  41fa9e:	9204      	str	r2, [sp, #16]
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  41faa0:	4ba3      	ldr	r3, [pc, #652]	; (41fd30 <draw_x_ticks+0x29c>)
  41faa2:	4798      	blx	r3
  41faa4:	4606      	mov	r6, r0

    if(ext->x_axis.list_of_values == NULL && ext->x_axis.num_tick_marks == 0) return;
  41faa6:	6c83      	ldr	r3, [r0, #72]	; 0x48
  41faa8:	2b00      	cmp	r3, #0
  41faaa:	d044      	beq.n	41fb36 <draw_x_ticks+0xa2>
    uint8_t num_scale_ticks;
    uint8_t major_tick_len, minor_tick_len;
    lv_chart_label_iterator_t iter;
    lv_point_t p1;
    lv_point_t p2;
    lv_coord_t x_ofs = series_area->x1;
  41faac:	f9b4 3000 	ldrsh.w	r3, [r4]
  41fab0:	461a      	mov	r2, r3
  41fab2:	9308      	str	r3, [sp, #32]
    lv_coord_t y_ofs = series_area->y1;
  41fab4:	f9b4 a002 	ldrsh.w	sl, [r4, #2]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41fab8:	88e3      	ldrh	r3, [r4, #6]
  41faba:	fa1f f98a 	uxth.w	r9, sl
  41fabe:	eba3 0309 	sub.w	r3, r3, r9
  41fac2:	b29b      	uxth	r3, r3
  41fac4:	3301      	adds	r3, #1
  41fac6:	b29b      	uxth	r3, r3
  41fac8:	9305      	str	r3, [sp, #20]
  41faca:	b21d      	sxth	r5, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41facc:	88a4      	ldrh	r4, [r4, #4]
  41face:	b293      	uxth	r3, r2
  41fad0:	9309      	str	r3, [sp, #36]	; 0x24
  41fad2:	1ae4      	subs	r4, r4, r3
  41fad4:	b2a4      	uxth	r4, r4
  41fad6:	3401      	adds	r4, #1
  41fad8:	b2a4      	uxth	r4, r4
  41fada:	fa0f fb84 	sxth.w	fp, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41fade:	2211      	movs	r2, #17
  41fae0:	2101      	movs	r1, #1
  41fae2:	9f06      	ldr	r7, [sp, #24]
  41fae4:	4638      	mov	r0, r7
  41fae6:	4b93      	ldr	r3, [pc, #588]	; (41fd34 <draw_x_ticks+0x2a0>)
  41fae8:	4798      	blx	r3
  41faea:	9007      	str	r0, [sp, #28]
    lv_coord_t h     = lv_area_get_height(series_area);
    lv_coord_t w     = lv_area_get_width(series_area);
    lv_style_int_t label_dist  = lv_obj_get_style_pad_bottom(chart, LV_CHART_PART_SERIES_BG);

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
  41faec:	a856      	add	r0, sp, #344	; 0x158
  41faee:	4b92      	ldr	r3, [pc, #584]	; (41fd38 <draw_x_ticks+0x2a4>)
  41faf0:	4798      	blx	r3
    lv_obj_init_draw_label_dsc(chart, LV_CHART_PART_BG, &label_dsc);
  41faf2:	aa56      	add	r2, sp, #344	; 0x158
  41faf4:	2100      	movs	r1, #0
  41faf6:	4638      	mov	r0, r7
  41faf8:	4b90      	ldr	r3, [pc, #576]	; (41fd3c <draw_x_ticks+0x2a8>)
  41fafa:	4798      	blx	r3

    /* calculate the size of tick marks */
    if(ext->x_axis.major_tick_len == LV_CHART_TICK_LENGTH_AUTO)
  41fafc:	f896 804e 	ldrb.w	r8, [r6, #78]	; 0x4e
  41fb00:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
  41fb04:	d01c      	beq.n	41fb40 <draw_x_ticks+0xac>
        major_tick_len = (int32_t)w * LV_CHART_AXIS_MAJOR_TICK_LEN_COE;
    else
        major_tick_len = ext->x_axis.major_tick_len;

    if(ext->x_axis.minor_tick_len == LV_CHART_TICK_LENGTH_AUTO)
  41fb06:	f896 704f 	ldrb.w	r7, [r6, #79]	; 0x4f
  41fb0a:	2fff      	cmp	r7, #255	; 0xff
  41fb0c:	d023      	beq.n	41fb56 <draw_x_ticks+0xc2>
        minor_tick_len = major_tick_len * LV_CHART_AXIS_MINOR_TICK_LEN_COE;
    else
        minor_tick_len = ext->x_axis.minor_tick_len;

    if(h + y_ofs > mask->y2) return;
  41fb0e:	4455      	add	r5, sl
  41fb10:	9a04      	ldr	r2, [sp, #16]
  41fb12:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
  41fb16:	429d      	cmp	r5, r3
  41fb18:	dc0a      	bgt.n	41fb30 <draw_x_ticks+0x9c>
    if(h + y_ofs + label_dist  + label_dsc.font->line_height + major_tick_len < mask->y1) return;
  41fb1a:	9b07      	ldr	r3, [sp, #28]
  41fb1c:	441d      	add	r5, r3
  41fb1e:	9b58      	ldr	r3, [sp, #352]	; 0x160
  41fb20:	f9b3 a008 	ldrsh.w	sl, [r3, #8]
  41fb24:	4455      	add	r5, sl
  41fb26:	4445      	add	r5, r8
  41fb28:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
  41fb2c:	429d      	cmp	r5, r3
  41fb2e:	da1b      	bge.n	41fb68 <draw_x_ticks+0xd4>
                              };
                lv_draw_label(&a, mask, &label_dsc, buf, NULL);
            }
        }
    }
}
  41fb30:	b065      	add	sp, #404	; 0x194
  41fb32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(ext->x_axis.list_of_values == NULL && ext->x_axis.num_tick_marks == 0) return;
  41fb36:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
  41fb3a:	2b00      	cmp	r3, #0
  41fb3c:	d0f8      	beq.n	41fb30 <draw_x_ticks+0x9c>
  41fb3e:	e7b5      	b.n	41faac <draw_x_ticks+0x18>
        major_tick_len = (int32_t)w * LV_CHART_AXIS_MAJOR_TICK_LEN_COE;
  41fb40:	4b7f      	ldr	r3, [pc, #508]	; (41fd40 <draw_x_ticks+0x2ac>)
  41fb42:	fb83 230b 	smull	r2, r3, r3, fp
  41fb46:	445b      	add	r3, fp
  41fb48:	ea4f 78eb 	mov.w	r8, fp, asr #31
  41fb4c:	ebc8 08e3 	rsb	r8, r8, r3, asr #3
  41fb50:	fa5f f888 	uxtb.w	r8, r8
  41fb54:	e7d7      	b.n	41fb06 <draw_x_ticks+0x72>
        minor_tick_len = major_tick_len * LV_CHART_AXIS_MINOR_TICK_LEN_COE;
  41fb56:	ea4f 0348 	mov.w	r3, r8, lsl #1
  41fb5a:	4f7a      	ldr	r7, [pc, #488]	; (41fd44 <draw_x_ticks+0x2b0>)
  41fb5c:	fb87 2703 	smull	r2, r7, r7, r3
  41fb60:	eba7 77e3 	sub.w	r7, r7, r3, asr #31
  41fb64:	b2ff      	uxtb	r7, r7
  41fb66:	e7d2      	b.n	41fb0e <draw_x_ticks+0x7a>
    lv_draw_line_dsc_init(&line_dsc);
  41fb68:	a853      	add	r0, sp, #332	; 0x14c
  41fb6a:	4b77      	ldr	r3, [pc, #476]	; (41fd48 <draw_x_ticks+0x2b4>)
  41fb6c:	4798      	blx	r3
    lv_obj_init_draw_line_dsc(chart, LV_CHART_PART_BG, &line_dsc);
  41fb6e:	aa53      	add	r2, sp, #332	; 0x14c
  41fb70:	2100      	movs	r1, #0
  41fb72:	9806      	ldr	r0, [sp, #24]
  41fb74:	4b75      	ldr	r3, [pc, #468]	; (41fd4c <draw_x_ticks+0x2b8>)
  41fb76:	4798      	blx	r3
    if(ext->type == LV_CHART_TYPE_COLUMN) {
  41fb78:	f896 303c 	ldrb.w	r3, [r6, #60]	; 0x3c
  41fb7c:	2b02      	cmp	r3, #2
  41fb7e:	d024      	beq.n	41fbca <draw_x_ticks+0x136>
    iter = create_axis_label_iter(ext->x_axis.list_of_values, LV_CHART_LABEL_ITERATOR_FORWARD);
  41fb80:	ac0a      	add	r4, sp, #40	; 0x28
  41fb82:	2201      	movs	r2, #1
  41fb84:	6cb1      	ldr	r1, [r6, #72]	; 0x48
  41fb86:	4620      	mov	r0, r4
  41fb88:	4b71      	ldr	r3, [pc, #452]	; (41fd50 <draw_x_ticks+0x2bc>)
  41fb8a:	4798      	blx	r3
  41fb8c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
  41fb90:	ab64      	add	r3, sp, #400	; 0x190
  41fb92:	e903 0007 	stmdb	r3, {r0, r1, r2}
    num_of_labels = iter.items_left;
  41fb96:	f89d 318c 	ldrb.w	r3, [sp, #396]	; 0x18c
  41fb9a:	4619      	mov	r1, r3
    if(ext->x_axis.num_tick_marks == 0) ext->x_axis.num_tick_marks = 1;
  41fb9c:	f896 304d 	ldrb.w	r3, [r6, #77]	; 0x4d
  41fba0:	b913      	cbnz	r3, 41fba8 <draw_x_ticks+0x114>
  41fba2:	2301      	movs	r3, #1
  41fba4:	f886 304d 	strb.w	r3, [r6, #77]	; 0x4d
    if(num_of_labels < 2)
  41fba8:	2901      	cmp	r1, #1
  41fbaa:	d92e      	bls.n	41fc0a <draw_x_ticks+0x176>
        num_scale_ticks = (ext->x_axis.num_tick_marks * (num_of_labels - 1));
  41fbac:	f896 304d 	ldrb.w	r3, [r6, #77]	; 0x4d
  41fbb0:	1e4d      	subs	r5, r1, #1
  41fbb2:	fb15 f503 	smulbb	r5, r5, r3
  41fbb6:	b2ed      	uxtb	r5, r5
    for(i = 0; i < (num_scale_ticks + 1); i++) { /* one extra loop - it may not exist in the list, empty label */
  41fbb8:	2400      	movs	r4, #0
  41fbba:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  41fbbe:	9706      	str	r7, [sp, #24]
  41fbc0:	f8dd a020 	ldr.w	sl, [sp, #32]
  41fbc4:	46b0      	mov	r8, r6
  41fbc6:	460e      	mov	r6, r1
  41fbc8:	e059      	b.n	41fc7e <draw_x_ticks+0x1ea>
        uint32_t ser_num = _lv_ll_get_len(&ext->series_ll);
  41fbca:	4630      	mov	r0, r6
  41fbcc:	4b61      	ldr	r3, [pc, #388]	; (41fd54 <draw_x_ticks+0x2c0>)
  41fbce:	4798      	blx	r3
        lv_coord_t col_w = w / ((ser_num + 1) * ext->point_cnt); /* Suppose + 1 series as separator*/
  41fbd0:	1c41      	adds	r1, r0, #1
  41fbd2:	8c73      	ldrh	r3, [r6, #34]	; 0x22
  41fbd4:	fb03 f301 	mul.w	r3, r3, r1
  41fbd8:	fbbb f3f3 	udiv	r3, fp, r3
  41fbdc:	b21b      	sxth	r3, r3
        x_ofs += col_w / 2 + (col_w * (ser_num) / 2);
  41fbde:	fb03 f200 	mul.w	r2, r3, r0
  41fbe2:	0852      	lsrs	r2, r2, #1
  41fbe4:	4618      	mov	r0, r3
  41fbe6:	2b00      	cmp	r3, #0
  41fbe8:	db0d      	blt.n	41fc06 <draw_x_ticks+0x172>
  41fbea:	eb02 0260 	add.w	r2, r2, r0, asr #1
  41fbee:	9809      	ldr	r0, [sp, #36]	; 0x24
  41fbf0:	fa10 fb82 	uxtah	fp, r0, r2
  41fbf4:	fa0f f28b 	sxth.w	r2, fp
  41fbf8:	9208      	str	r2, [sp, #32]
        w -= col_w * ser_num + col_w;
  41fbfa:	fb11 f303 	smulbb	r3, r1, r3
  41fbfe:	1ae4      	subs	r4, r4, r3
  41fc00:	fa0f fb84 	sxth.w	fp, r4
  41fc04:	e7bc      	b.n	41fb80 <draw_x_ticks+0xec>
        x_ofs += col_w / 2 + (col_w * (ser_num) / 2);
  41fc06:	1c58      	adds	r0, r3, #1
  41fc08:	e7ef      	b.n	41fbea <draw_x_ticks+0x156>
        num_scale_ticks = ext->x_axis.num_tick_marks;
  41fc0a:	f896 504d 	ldrb.w	r5, [r6, #77]	; 0x4d
  41fc0e:	e7d3      	b.n	41fbb8 <draw_x_ticks+0x124>
            p2.y = p1.y + minor_tick_len; /* minor tick */
  41fc10:	9b06      	ldr	r3, [sp, #24]
  41fc12:	441a      	add	r2, r3
  41fc14:	f8ad 217e 	strh.w	r2, [sp, #382]	; 0x17e
        p2.x = p1.x = x_ofs + (int32_t)((int32_t)(w - line_dsc.width) * i) / num_scale_ticks;
  41fc18:	f9bd 314e 	ldrsh.w	r3, [sp, #334]	; 0x14e
  41fc1c:	ebab 0303 	sub.w	r3, fp, r3
  41fc20:	fb03 f300 	mul.w	r3, r3, r0
  41fc24:	fb93 f3f1 	sdiv	r3, r3, r1
  41fc28:	4453      	add	r3, sl
  41fc2a:	b21b      	sxth	r3, r3
  41fc2c:	f8ad 3180 	strh.w	r3, [sp, #384]	; 0x180
  41fc30:	f8ad 317c 	strh.w	r3, [sp, #380]	; 0x17c
        if(i != num_scale_ticks)
  41fc34:	42ac      	cmp	r4, r5
  41fc36:	d012      	beq.n	41fc5e <draw_x_ticks+0x1ca>
            lv_draw_line(&p1, &p2, mask, &line_dsc);
  41fc38:	ab53      	add	r3, sp, #332	; 0x14c
  41fc3a:	9a04      	ldr	r2, [sp, #16]
  41fc3c:	a95f      	add	r1, sp, #380	; 0x17c
  41fc3e:	a860      	add	r0, sp, #384	; 0x180
  41fc40:	4f45      	ldr	r7, [pc, #276]	; (41fd58 <draw_x_ticks+0x2c4>)
  41fc42:	47b8      	blx	r7
        if(num_of_labels != 0) {
  41fc44:	b1ce      	cbz	r6, 41fc7a <draw_x_ticks+0x1e6>
    return ((tick_num == 0) || ((tick_num % axis->num_tick_marks) == 0));
  41fc46:	b1b4      	cbz	r4, 41fc76 <draw_x_ticks+0x1e2>
  41fc48:	f898 204d 	ldrb.w	r2, [r8, #77]	; 0x4d
  41fc4c:	fbb4 f3f2 	udiv	r3, r4, r2
  41fc50:	fb02 4313 	mls	r3, r2, r3, r4
  41fc54:	f013 0fff 	tst.w	r3, #255	; 0xff
  41fc58:	d12e      	bne.n	41fcb8 <draw_x_ticks+0x224>
  41fc5a:	2301      	movs	r3, #1
  41fc5c:	e00c      	b.n	41fc78 <draw_x_ticks+0x1e4>
        else if((ext->x_axis.options & LV_CHART_AXIS_DRAW_LAST_TICK) != 0)
  41fc5e:	f898 304c 	ldrb.w	r3, [r8, #76]	; 0x4c
  41fc62:	f013 0f01 	tst.w	r3, #1
  41fc66:	d0ed      	beq.n	41fc44 <draw_x_ticks+0x1b0>
            lv_draw_line(&p1, &p2, mask, &line_dsc);
  41fc68:	ab53      	add	r3, sp, #332	; 0x14c
  41fc6a:	9a04      	ldr	r2, [sp, #16]
  41fc6c:	a95f      	add	r1, sp, #380	; 0x17c
  41fc6e:	a860      	add	r0, sp, #384	; 0x180
  41fc70:	4f39      	ldr	r7, [pc, #228]	; (41fd58 <draw_x_ticks+0x2c4>)
  41fc72:	47b8      	blx	r7
  41fc74:	e7e6      	b.n	41fc44 <draw_x_ticks+0x1b0>
    return ((tick_num == 0) || ((tick_num % axis->num_tick_marks) == 0));
  41fc76:	2301      	movs	r3, #1
            if(is_tick_with_label(i, &(ext->x_axis))) {
  41fc78:	bb03      	cbnz	r3, 41fcbc <draw_x_ticks+0x228>
    for(i = 0; i < (num_scale_ticks + 1); i++) { /* one extra loop - it may not exist in the list, empty label */
  41fc7a:	3401      	adds	r4, #1
  41fc7c:	b2e4      	uxtb	r4, r4
  41fc7e:	4620      	mov	r0, r4
  41fc80:	4629      	mov	r1, r5
  41fc82:	1c6b      	adds	r3, r5, #1
  41fc84:	429c      	cmp	r4, r3
  41fc86:	f6bf af53 	bge.w	41fb30 <draw_x_ticks+0x9c>
        p1.y = h + y_ofs;
  41fc8a:	9b05      	ldr	r3, [sp, #20]
  41fc8c:	eb09 0203 	add.w	r2, r9, r3
  41fc90:	b292      	uxth	r2, r2
  41fc92:	f8ad 2182 	strh.w	r2, [sp, #386]	; 0x182
        if((num_of_labels != 0) && (i == 0 || i % ext->x_axis.num_tick_marks == 0))
  41fc96:	2e00      	cmp	r6, #0
  41fc98:	d0ba      	beq.n	41fc10 <draw_x_ticks+0x17c>
  41fc9a:	b144      	cbz	r4, 41fcae <draw_x_ticks+0x21a>
  41fc9c:	f898 704d 	ldrb.w	r7, [r8, #77]	; 0x4d
  41fca0:	fbb4 f3f7 	udiv	r3, r4, r7
  41fca4:	fb07 4313 	mls	r3, r7, r3, r4
  41fca8:	f013 0fff 	tst.w	r3, #255	; 0xff
  41fcac:	d1b0      	bne.n	41fc10 <draw_x_ticks+0x17c>
            p2.y = p1.y + major_tick_len; /* major tick */
  41fcae:	9b09      	ldr	r3, [sp, #36]	; 0x24
  41fcb0:	441a      	add	r2, r3
  41fcb2:	f8ad 217e 	strh.w	r2, [sp, #382]	; 0x17e
  41fcb6:	e7af      	b.n	41fc18 <draw_x_ticks+0x184>
    return ((tick_num == 0) || ((tick_num % axis->num_tick_marks) == 0));
  41fcb8:	2300      	movs	r3, #0
  41fcba:	e7dd      	b.n	41fc78 <draw_x_ticks+0x1e4>
                get_next_axis_label(&iter, buf);
  41fcbc:	a912      	add	r1, sp, #72	; 0x48
  41fcbe:	a861      	add	r0, sp, #388	; 0x184
  41fcc0:	4b26      	ldr	r3, [pc, #152]	; (41fd5c <draw_x_ticks+0x2c8>)
  41fcc2:	4798      	blx	r3
                _lv_txt_get_size(&size, buf, label_dsc.font, label_dsc.letter_space, label_dsc.line_space,
  41fcc4:	f9bd 3168 	ldrsh.w	r3, [sp, #360]	; 0x168
  41fcc8:	2204      	movs	r2, #4
  41fcca:	9202      	str	r2, [sp, #8]
  41fccc:	f647 4218 	movw	r2, #31768	; 0x7c18
  41fcd0:	9201      	str	r2, [sp, #4]
  41fcd2:	f9bd 2166 	ldrsh.w	r2, [sp, #358]	; 0x166
  41fcd6:	9200      	str	r2, [sp, #0]
  41fcd8:	9a58      	ldr	r2, [sp, #352]	; 0x160
  41fcda:	a912      	add	r1, sp, #72	; 0x48
  41fcdc:	a80f      	add	r0, sp, #60	; 0x3c
  41fcde:	4f20      	ldr	r7, [pc, #128]	; (41fd60 <draw_x_ticks+0x2cc>)
  41fce0:	47b8      	blx	r7
                lv_area_t a = {(p2.x - size.x / 2), (p2.y + label_dist), (p2.x + size.x / 2),
  41fce2:	f8bd 117c 	ldrh.w	r1, [sp, #380]	; 0x17c
  41fce6:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
  41fcea:	2b00      	cmp	r3, #0
  41fcec:	db1e      	blt.n	41fd2c <draw_x_ticks+0x298>
  41fcee:	f3c3 024f 	ubfx	r2, r3, #1, #16
  41fcf2:	1a8b      	subs	r3, r1, r2
  41fcf4:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
  41fcf8:	f8bd 317e 	ldrh.w	r3, [sp, #382]	; 0x17e
  41fcfc:	f8bd 001c 	ldrh.w	r0, [sp, #28]
  41fd00:	181f      	adds	r7, r3, r0
  41fd02:	f8ad 7042 	strh.w	r7, [sp, #66]	; 0x42
  41fd06:	440a      	add	r2, r1
  41fd08:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
                               (p2.y + size.y + label_dist)
  41fd0c:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
  41fd10:	4413      	add	r3, r2
  41fd12:	fa10 f383 	uxtah	r3, r0, r3
                lv_area_t a = {(p2.x - size.x / 2), (p2.y + label_dist), (p2.x + size.x / 2),
  41fd16:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                lv_draw_label(&a, mask, &label_dsc, buf, NULL);
  41fd1a:	2300      	movs	r3, #0
  41fd1c:	9300      	str	r3, [sp, #0]
  41fd1e:	ab12      	add	r3, sp, #72	; 0x48
  41fd20:	aa56      	add	r2, sp, #344	; 0x158
  41fd22:	9904      	ldr	r1, [sp, #16]
  41fd24:	a810      	add	r0, sp, #64	; 0x40
  41fd26:	4f0f      	ldr	r7, [pc, #60]	; (41fd64 <draw_x_ticks+0x2d0>)
  41fd28:	47b8      	blx	r7
  41fd2a:	e7a6      	b.n	41fc7a <draw_x_ticks+0x1e6>
                lv_area_t a = {(p2.x - size.x / 2), (p2.y + label_dist), (p2.x + size.x / 2),
  41fd2c:	3301      	adds	r3, #1
  41fd2e:	e7de      	b.n	41fcee <draw_x_ticks+0x25a>
  41fd30:	00408115 	.word	0x00408115
  41fd34:	00407485 	.word	0x00407485
  41fd38:	0040df85 	.word	0x0040df85
  41fd3c:	00408a1d 	.word	0x00408a1d
  41fd40:	88888889 	.word	0x88888889
  41fd44:	55555556 	.word	0x55555556
  41fd48:	0040edd5 	.word	0x0040edd5
  41fd4c:	00408b95 	.word	0x00408b95
  41fd50:	0041f4d5 	.word	0x0041f4d5
  41fd54:	004164a9 	.word	0x004164a9
  41fd58:	0040edf1 	.word	0x0040edf1
  41fd5c:	0041f6c9 	.word	0x0041f6c9
  41fd60:	00417fa5 	.word	0x00417fa5
  41fd64:	0040dfcd 	.word	0x0040dfcd

0041fd68 <draw_axes>:

static void draw_axes(lv_obj_t * chart, const lv_area_t * series_area, const lv_area_t * mask)
{
  41fd68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41fd6a:	4604      	mov	r4, r0
  41fd6c:	460d      	mov	r5, r1
  41fd6e:	4616      	mov	r6, r2
    draw_y_ticks(chart, series_area, mask, LV_CHART_AXIS_PRIMARY_Y);
  41fd70:	2300      	movs	r3, #0
  41fd72:	4f06      	ldr	r7, [pc, #24]	; (41fd8c <draw_axes+0x24>)
  41fd74:	47b8      	blx	r7
    draw_y_ticks(chart, series_area, mask, LV_CHART_AXIS_SECONDARY_Y);
  41fd76:	2301      	movs	r3, #1
  41fd78:	4632      	mov	r2, r6
  41fd7a:	4629      	mov	r1, r5
  41fd7c:	4620      	mov	r0, r4
  41fd7e:	47b8      	blx	r7
    draw_x_ticks(chart, series_area, mask);
  41fd80:	4632      	mov	r2, r6
  41fd82:	4629      	mov	r1, r5
  41fd84:	4620      	mov	r0, r4
  41fd86:	4b02      	ldr	r3, [pc, #8]	; (41fd90 <draw_axes+0x28>)
  41fd88:	4798      	blx	r3
  41fd8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41fd8c:	0041f749 	.word	0x0041f749
  41fd90:	0041fa95 	.word	0x0041fa95

0041fd94 <draw_series_column>:
{
  41fd94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41fd98:	b0a3      	sub	sp, #140	; 0x8c
  41fd9a:	4604      	mov	r4, r0
  41fd9c:	468a      	mov	sl, r1
  41fd9e:	4615      	mov	r5, r2
    if(_lv_area_intersect(&com_area, series_area, clip_area) == false) return;
  41fda0:	a820      	add	r0, sp, #128	; 0x80
  41fda2:	4b68      	ldr	r3, [pc, #416]	; (41ff44 <draw_series_column+0x1b0>)
  41fda4:	4798      	blx	r3
  41fda6:	b910      	cbnz	r0, 41fdae <draw_series_column+0x1a>
}
  41fda8:	b023      	add	sp, #140	; 0x8c
  41fdaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  41fdae:	4620      	mov	r0, r4
  41fdb0:	4b65      	ldr	r3, [pc, #404]	; (41ff48 <draw_series_column+0x1b4>)
  41fdb2:	4798      	blx	r3
  41fdb4:	4607      	mov	r7, r0
  41fdb6:	f8ba 3004 	ldrh.w	r3, [sl, #4]
  41fdba:	f8ba 2000 	ldrh.w	r2, [sl]
  41fdbe:	1a9b      	subs	r3, r3, r2
  41fdc0:	b29b      	uxth	r3, r3
  41fdc2:	3301      	adds	r3, #1
  41fdc4:	b21b      	sxth	r3, r3
  41fdc6:	461e      	mov	r6, r3
  41fdc8:	9305      	str	r3, [sp, #20]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41fdca:	f8ba 3006 	ldrh.w	r3, [sl, #6]
  41fdce:	f8ba 2002 	ldrh.w	r2, [sl, #2]
  41fdd2:	1a9b      	subs	r3, r3, r2
  41fdd4:	b29b      	uxth	r3, r3
  41fdd6:	3301      	adds	r3, #1
  41fdd8:	fa1f fb83 	uxth.w	fp, r3
  41fddc:	fa0f f38b 	sxth.w	r3, fp
  41fde0:	9302      	str	r3, [sp, #8]
    lv_coord_t col_w = w / ((_lv_ll_get_len(&ext->series_ll) + 1) * ext->point_cnt); /* Suppose + 1 series as separator*/
  41fde2:	9000      	str	r0, [sp, #0]
  41fde4:	4b59      	ldr	r3, [pc, #356]	; (41ff4c <draw_series_column+0x1b8>)
  41fde6:	4798      	blx	r3
  41fde8:	f8b7 8022 	ldrh.w	r8, [r7, #34]	; 0x22
  41fdec:	fb00 8808 	mla	r8, r0, r8, r8
  41fdf0:	fbb6 f8f8 	udiv	r8, r6, r8
  41fdf4:	fa0f f388 	sxth.w	r3, r8
    lv_coord_t x_ofs = col_w / 2;                                    /*Shift with a half col.*/
  41fdf8:	2b00      	cmp	r3, #0
  41fdfa:	db26      	blt.n	41fe4a <draw_series_column+0xb6>
  41fdfc:	105b      	asrs	r3, r3, #1
  41fdfe:	9304      	str	r3, [sp, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41fe00:	2214      	movs	r2, #20
  41fe02:	2102      	movs	r1, #2
  41fe04:	4620      	mov	r0, r4
  41fe06:	4b52      	ldr	r3, [pc, #328]	; (41ff50 <draw_series_column+0x1bc>)
  41fe08:	4798      	blx	r3
  41fe0a:	4681      	mov	r9, r0
    lv_draw_rect_dsc_init(&col_dsc);
  41fe0c:	a809      	add	r0, sp, #36	; 0x24
  41fe0e:	4b51      	ldr	r3, [pc, #324]	; (41ff54 <draw_series_column+0x1c0>)
  41fe10:	4798      	blx	r3
    lv_obj_init_draw_rect_dsc(chart, LV_CHART_PART_SERIES, &col_dsc);
  41fe12:	aa09      	add	r2, sp, #36	; 0x24
  41fe14:	2102      	movs	r1, #2
  41fe16:	4620      	mov	r0, r4
  41fe18:	4b4f      	ldr	r3, [pc, #316]	; (41ff58 <draw_series_column+0x1c4>)
  41fe1a:	4798      	blx	r3
    col_dsc.bg_grad_dir = LV_GRAD_DIR_NONE;
  41fe1c:	2300      	movs	r3, #0
  41fe1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    col_dsc.bg_opa = LV_OPA_COVER;
  41fe22:	23ff      	movs	r3, #255	; 0xff
  41fe24:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    col_a.y2 = series_area->y2 + col_dsc.radius;
  41fe28:	f8ba 3006 	ldrh.w	r3, [sl, #6]
  41fe2c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  41fe30:	4413      	add	r3, r2
  41fe32:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
    bool mask_ret = _lv_area_intersect(&series_mask, series_area, clip_area);
  41fe36:	462a      	mov	r2, r5
  41fe38:	4651      	mov	r1, sl
  41fe3a:	a807      	add	r0, sp, #28
  41fe3c:	4b41      	ldr	r3, [pc, #260]	; (41ff44 <draw_series_column+0x1b0>)
  41fe3e:	4798      	blx	r3
    if(mask_ret == false) return;
  41fe40:	2800      	cmp	r0, #0
  41fe42:	d0b1      	beq.n	41fda8 <draw_series_column+0x14>
  41fe44:	2300      	movs	r3, #0
  41fe46:	9303      	str	r3, [sp, #12]
  41fe48:	e063      	b.n	41ff12 <draw_series_column+0x17e>
    lv_coord_t x_ofs = col_w / 2;                                    /*Shift with a half col.*/
  41fe4a:	3301      	adds	r3, #1
  41fe4c:	e7d6      	b.n	41fdfc <draw_series_column+0x68>
            lv_coord_t start_point = ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
  41fe4e:	2200      	movs	r2, #0
  41fe50:	e012      	b.n	41fe78 <draw_series_column+0xe4>
            x_act += col_w;
  41fe52:	462e      	mov	r6, r5
        _LV_LL_READ_BACK(ext->series_ll, ser) {
  41fe54:	4621      	mov	r1, r4
  41fe56:	9800      	ldr	r0, [sp, #0]
  41fe58:	4b40      	ldr	r3, [pc, #256]	; (41ff5c <draw_series_column+0x1c8>)
  41fe5a:	4798      	blx	r3
  41fe5c:	4604      	mov	r4, r0
  41fe5e:	2c00      	cmp	r4, #0
  41fe60:	d053      	beq.n	41ff0a <draw_series_column+0x176>
            if(ser->hidden) continue;
  41fe62:	7a23      	ldrb	r3, [r4, #8]
  41fe64:	f013 0f02 	tst.w	r3, #2
  41fe68:	d1f4      	bne.n	41fe54 <draw_series_column+0xc0>
            lv_coord_t start_point = ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
  41fe6a:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
  41fe6e:	f013 0f01 	tst.w	r3, #1
  41fe72:	d1ec      	bne.n	41fe4e <draw_series_column+0xba>
  41fe74:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
            col_a.x1 = x_act;
  41fe78:	f8ad 6078 	strh.w	r6, [sp, #120]	; 0x78
            col_a.x2 = col_a.x1 + col_w - col_space;
  41fe7c:	fa18 f586 	uxtah	r5, r8, r6
  41fe80:	b2ad      	uxth	r5, r5
  41fe82:	eba5 0309 	sub.w	r3, r5, r9
  41fe86:	b21b      	sxth	r3, r3
  41fe88:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            x_act += col_w;
  41fe8c:	b22d      	sxth	r5, r5
            if(col_a.x2 < series_mask.x1) continue;
  41fe8e:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
  41fe92:	428b      	cmp	r3, r1
  41fe94:	dbdd      	blt.n	41fe52 <draw_series_column+0xbe>
            if(col_a.x1 > series_mask.x2) break;
  41fe96:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
  41fe9a:	429e      	cmp	r6, r3
  41fe9c:	dc35      	bgt.n	41ff0a <draw_series_column+0x176>
            col_dsc.bg_color = ser->color;
  41fe9e:	88a3      	ldrh	r3, [r4, #4]
  41fea0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
            lv_coord_t p_act = (start_point + i) % ext->point_cnt;
  41fea4:	9b01      	ldr	r3, [sp, #4]
  41fea6:	441a      	add	r2, r3
  41fea8:	8c79      	ldrh	r1, [r7, #34]	; 0x22
  41feaa:	fb92 f3f1 	sdiv	r3, r2, r1
  41feae:	fb01 2213 	mls	r2, r1, r3, r2
  41feb2:	b212      	sxth	r2, r2
            y_tmp            = (int32_t)((int32_t)ser->points[p_act] - ext->ymin[ser->y_axis]) * h;
  41feb4:	6823      	ldr	r3, [r4, #0]
  41feb6:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
  41feba:	7a23      	ldrb	r3, [r4, #8]
  41febc:	f3c3 0380 	ubfx	r3, r3, #2, #1
  41fec0:	330c      	adds	r3, #12
  41fec2:	f937 0013 	ldrsh.w	r0, [r7, r3, lsl #1]
  41fec6:	1a09      	subs	r1, r1, r0
  41fec8:	9e02      	ldr	r6, [sp, #8]
  41feca:	fb06 f101 	mul.w	r1, r6, r1
            y_tmp            = y_tmp / (ext->ymax[ser->y_axis] - ext->ymin[ser->y_axis]);
  41fece:	eb07 0343 	add.w	r3, r7, r3, lsl #1
  41fed2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
  41fed6:	1a1b      	subs	r3, r3, r0
  41fed8:	fb91 f3f3 	sdiv	r3, r1, r3
            col_a.y1         = h - y_tmp + series_area->y1;
  41fedc:	ebab 0303 	sub.w	r3, fp, r3
  41fee0:	f8ba 1002 	ldrh.w	r1, [sl, #2]
  41fee4:	fa11 f383 	uxtah	r3, r1, r3
  41fee8:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            if(ser->points[p_act] != LV_CHART_POINT_DEF) {
  41feec:	6823      	ldr	r3, [r4, #0]
  41feee:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
  41fef2:	4b1b      	ldr	r3, [pc, #108]	; (41ff60 <draw_series_column+0x1cc>)
  41fef4:	429a      	cmp	r2, r3
  41fef6:	d006      	beq.n	41ff06 <draw_series_column+0x172>
                lv_draw_rect(&col_a, &series_mask, &col_dsc);
  41fef8:	aa09      	add	r2, sp, #36	; 0x24
  41fefa:	a907      	add	r1, sp, #28
  41fefc:	a81e      	add	r0, sp, #120	; 0x78
  41fefe:	4b19      	ldr	r3, [pc, #100]	; (41ff64 <draw_series_column+0x1d0>)
  41ff00:	4798      	blx	r3
            x_act += col_w;
  41ff02:	462e      	mov	r6, r5
  41ff04:	e7a6      	b.n	41fe54 <draw_series_column+0xc0>
  41ff06:	462e      	mov	r6, r5
  41ff08:	e7a4      	b.n	41fe54 <draw_series_column+0xc0>
    for(i = 0; i < ext->point_cnt; i++) {
  41ff0a:	9b03      	ldr	r3, [sp, #12]
  41ff0c:	3301      	adds	r3, #1
  41ff0e:	b29b      	uxth	r3, r3
  41ff10:	9303      	str	r3, [sp, #12]
  41ff12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
  41ff14:	9a03      	ldr	r2, [sp, #12]
  41ff16:	429a      	cmp	r2, r3
  41ff18:	f4bf af46 	bcs.w	41fda8 <draw_series_column+0x14>
        lv_coord_t x_act = (int32_t)((int32_t)w * i) / ext->point_cnt;
  41ff1c:	9a03      	ldr	r2, [sp, #12]
  41ff1e:	9201      	str	r2, [sp, #4]
  41ff20:	9905      	ldr	r1, [sp, #20]
  41ff22:	fb02 f601 	mul.w	r6, r2, r1
  41ff26:	fb96 f3f3 	sdiv	r3, r6, r3
        x_act += series_area->x1 + x_ofs;
  41ff2a:	f8ba 6000 	ldrh.w	r6, [sl]
  41ff2e:	9a04      	ldr	r2, [sp, #16]
  41ff30:	4416      	add	r6, r2
  41ff32:	fa13 f686 	uxtah	r6, r3, r6
  41ff36:	b236      	sxth	r6, r6
        _LV_LL_READ_BACK(ext->series_ll, ser) {
  41ff38:	9800      	ldr	r0, [sp, #0]
  41ff3a:	4b0b      	ldr	r3, [pc, #44]	; (41ff68 <draw_series_column+0x1d4>)
  41ff3c:	4798      	blx	r3
  41ff3e:	4604      	mov	r4, r0
  41ff40:	e78d      	b.n	41fe5e <draw_series_column+0xca>
  41ff42:	bf00      	nop
  41ff44:	00415663 	.word	0x00415663
  41ff48:	00408115 	.word	0x00408115
  41ff4c:	004164a9 	.word	0x004164a9
  41ff50:	00407485 	.word	0x00407485
  41ff54:	0041250d 	.word	0x0041250d
  41ff58:	004083ed 	.word	0x004083ed
  41ff5c:	004162c7 	.word	0x004162c7
  41ff60:	ffff83e8 	.word	0xffff83e8
  41ff64:	00412559 	.word	0x00412559
  41ff68:	004162af 	.word	0x004162af

0041ff6c <draw_series_line>:
{
  41ff6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41ff70:	b0d7      	sub	sp, #348	; 0x15c
  41ff72:	4604      	mov	r4, r0
  41ff74:	9108      	str	r1, [sp, #32]
  41ff76:	9207      	str	r2, [sp, #28]
    if(_lv_area_intersect(&com_area, series_area, clip_area) == false) return;
  41ff78:	a854      	add	r0, sp, #336	; 0x150
  41ff7a:	4ba1      	ldr	r3, [pc, #644]	; (420200 <draw_series_line+0x294>)
  41ff7c:	4798      	blx	r3
  41ff7e:	b910      	cbnz	r0, 41ff86 <draw_series_line+0x1a>
}
  41ff80:	b057      	add	sp, #348	; 0x15c
  41ff82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  41ff86:	4620      	mov	r0, r4
  41ff88:	4b9e      	ldr	r3, [pc, #632]	; (420204 <draw_series_line+0x298>)
  41ff8a:	4798      	blx	r3
  41ff8c:	4607      	mov	r7, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41ff8e:	9908      	ldr	r1, [sp, #32]
  41ff90:	888b      	ldrh	r3, [r1, #4]
  41ff92:	f9b1 2000 	ldrsh.w	r2, [r1]
  41ff96:	920d      	str	r2, [sp, #52]	; 0x34
  41ff98:	fa1f f982 	uxth.w	r9, r2
  41ff9c:	eba3 0309 	sub.w	r3, r3, r9
  41ffa0:	b29b      	uxth	r3, r3
  41ffa2:	3301      	adds	r3, #1
  41ffa4:	b21b      	sxth	r3, r3
  41ffa6:	9306      	str	r3, [sp, #24]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41ffa8:	88cb      	ldrh	r3, [r1, #6]
  41ffaa:	f8b1 b002 	ldrh.w	fp, [r1, #2]
  41ffae:	eba3 030b 	sub.w	r3, r3, fp
  41ffb2:	b29b      	uxth	r3, r3
  41ffb4:	3301      	adds	r3, #1
  41ffb6:	fa1f fa83 	uxth.w	sl, r3
  41ffba:	fa0f f38a 	sxth.w	r3, sl
  41ffbe:	930c      	str	r3, [sp, #48]	; 0x30
    bool mask_ret = _lv_area_intersect(&series_mask, series_area, clip_area);
  41ffc0:	9a07      	ldr	r2, [sp, #28]
  41ffc2:	a850      	add	r0, sp, #320	; 0x140
  41ffc4:	4b8e      	ldr	r3, [pc, #568]	; (420200 <draw_series_line+0x294>)
  41ffc6:	4798      	blx	r3
    if(mask_ret == false) return;
  41ffc8:	2800      	cmp	r0, #0
  41ffca:	d0d9      	beq.n	41ff80 <draw_series_line+0x14>
    lv_draw_line_dsc_init(&line_dsc);
  41ffcc:	a84d      	add	r0, sp, #308	; 0x134
  41ffce:	4b8e      	ldr	r3, [pc, #568]	; (420208 <draw_series_line+0x29c>)
  41ffd0:	4798      	blx	r3
    lv_obj_init_draw_line_dsc(chart, LV_CHART_PART_SERIES, &line_dsc);
  41ffd2:	aa4d      	add	r2, sp, #308	; 0x134
  41ffd4:	2102      	movs	r1, #2
  41ffd6:	4620      	mov	r0, r4
  41ffd8:	4b8c      	ldr	r3, [pc, #560]	; (42020c <draw_series_line+0x2a0>)
  41ffda:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41ffdc:	222c      	movs	r2, #44	; 0x2c
  41ffde:	2102      	movs	r1, #2
  41ffe0:	4620      	mov	r0, r4
  41ffe2:	4b8b      	ldr	r3, [pc, #556]	; (420210 <draw_series_line+0x2a4>)
  41ffe4:	4798      	blx	r3
  41ffe6:	900b      	str	r0, [sp, #44]	; 0x2c
    if(has_area) {
  41ffe8:	2802      	cmp	r0, #2
  41ffea:	d829      	bhi.n	420040 <draw_series_line+0xd4>
    bool has_fade = false;
  41ffec:	2300      	movs	r3, #0
  41ffee:	930f      	str	r3, [sp, #60]	; 0x3c
    lv_draw_rect_dsc_init(&point_dsc);
  41fff0:	a81d      	add	r0, sp, #116	; 0x74
  41fff2:	4b88      	ldr	r3, [pc, #544]	; (420214 <draw_series_line+0x2a8>)
  41fff4:	4798      	blx	r3
    point_dsc.bg_opa = line_dsc.opa;
  41fff6:	f89d 313c 	ldrb.w	r3, [sp, #316]	; 0x13c
  41fffa:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
    point_dsc.radius = LV_RADIUS_CIRCLE;
  41fffe:	f647 73ff 	movw	r3, #32767	; 0x7fff
  420002:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  420006:	2203      	movs	r2, #3
  420008:	2102      	movs	r1, #2
  42000a:	4620      	mov	r0, r4
  42000c:	4b82      	ldr	r3, [pc, #520]	; (420218 <draw_series_line+0x2ac>)
  42000e:	4798      	blx	r3
  420010:	9004      	str	r0, [sp, #16]
    if(point_radius > line_dsc.width / 2) line_dsc.raw_end = 1;
  420012:	f9bd 3136 	ldrsh.w	r3, [sp, #310]	; 0x136
  420016:	2b00      	cmp	r3, #0
  420018:	db36      	blt.n	420088 <draw_series_line+0x11c>
  42001a:	9a04      	ldr	r2, [sp, #16]
  42001c:	ebb2 0f63 	cmp.w	r2, r3, asr #1
  420020:	dd05      	ble.n	42002e <draw_series_line+0xc2>
  420022:	f89d 313d 	ldrb.w	r3, [sp, #317]	; 0x13d
  420026:	f043 0310 	orr.w	r3, r3, #16
  42002a:	f88d 313d 	strb.w	r3, [sp, #317]	; 0x13d
    _LV_LL_READ_BACK(ext->series_ll, ser) {
  42002e:	9709      	str	r7, [sp, #36]	; 0x24
  420030:	4638      	mov	r0, r7
  420032:	4b7a      	ldr	r3, [pc, #488]	; (42021c <draw_series_line+0x2b0>)
  420034:	4798      	blx	r3
  420036:	4606      	mov	r6, r0
    int16_t mask_fade_id = LV_MASK_ID_INV;
  420038:	f04f 33ff 	mov.w	r3, #4294967295
  42003c:	930e      	str	r3, [sp, #56]	; 0x38
    _LV_LL_READ_BACK(ext->series_ll, ser) {
  42003e:	e123      	b.n	420288 <draw_series_line+0x31c>
        lv_draw_rect_dsc_init(&area_dsc);
  420040:	a832      	add	r0, sp, #200	; 0xc8
  420042:	4b74      	ldr	r3, [pc, #464]	; (420214 <draw_series_line+0x2a8>)
  420044:	4798      	blx	r3
        lv_obj_init_draw_rect_dsc(chart, LV_CHART_PART_SERIES, &area_dsc);
  420046:	aa32      	add	r2, sp, #200	; 0xc8
  420048:	2102      	movs	r1, #2
  42004a:	4620      	mov	r0, r4
  42004c:	4b74      	ldr	r3, [pc, #464]	; (420220 <draw_series_line+0x2b4>)
  42004e:	4798      	blx	r3
        area_dsc.border_width = 0;
  420050:	2300      	movs	r3, #0
  420052:	f8ad 30d8 	strh.w	r3, [sp, #216]	; 0xd8
        has_fade = area_dsc.bg_grad_dir == LV_GRAD_DIR_VER ? true : false;
  420056:	f89d 30ce 	ldrb.w	r3, [sp, #206]	; 0xce
  42005a:	2b01      	cmp	r3, #1
  42005c:	bf0c      	ite	eq
  42005e:	2301      	moveq	r3, #1
  420060:	2300      	movne	r3, #0
  420062:	930f      	str	r3, [sp, #60]	; 0x3c
        if(has_fade) {
  420064:	d1c4      	bne.n	41fff0 <draw_series_line+0x84>
                                   area_dsc.bg_grad_color_stop, series_area->y2);
  420066:	f9bd 10d2 	ldrsh.w	r1, [sp, #210]	; 0xd2
            lv_draw_mask_fade_init(&mask_fade_p, series_area, area_dsc.bg_main_color_stop, series_area->y1,
  42006a:	9d08      	ldr	r5, [sp, #32]
  42006c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  420070:	f89d 20d0 	ldrb.w	r2, [sp, #208]	; 0xd0
  420074:	f9b5 0006 	ldrsh.w	r0, [r5, #6]
  420078:	9001      	str	r0, [sp, #4]
  42007a:	b2c9      	uxtb	r1, r1
  42007c:	9100      	str	r1, [sp, #0]
  42007e:	4629      	mov	r1, r5
  420080:	a847      	add	r0, sp, #284	; 0x11c
  420082:	4d68      	ldr	r5, [pc, #416]	; (420224 <draw_series_line+0x2b8>)
  420084:	47a8      	blx	r5
  420086:	e7b3      	b.n	41fff0 <draw_series_line+0x84>
    if(point_radius > line_dsc.width / 2) line_dsc.raw_end = 1;
  420088:	3301      	adds	r3, #1
  42008a:	e7c6      	b.n	42001a <draw_series_line+0xae>
        lv_coord_t start_point = ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
  42008c:	f04f 0800 	mov.w	r8, #0
  420090:	e112      	b.n	4202b8 <draw_series_line+0x34c>
                    if(has_fade) mask_fade_id = lv_draw_mask_add(&mask_fade_p, NULL);
  420092:	2100      	movs	r1, #0
  420094:	a847      	add	r0, sp, #284	; 0x11c
  420096:	4b64      	ldr	r3, [pc, #400]	; (420228 <draw_series_line+0x2bc>)
  420098:	4798      	blx	r3
  42009a:	900e      	str	r0, [sp, #56]	; 0x38
                    lv_draw_rect(&a, &series_mask, &area_dsc);
  42009c:	aa32      	add	r2, sp, #200	; 0xc8
  42009e:	a950      	add	r1, sp, #320	; 0x140
  4200a0:	a810      	add	r0, sp, #64	; 0x40
  4200a2:	4b62      	ldr	r3, [pc, #392]	; (42022c <draw_series_line+0x2c0>)
  4200a4:	4798      	blx	r3
                    lv_draw_mask_remove_id(mask_line_id);
  4200a6:	4630      	mov	r0, r6
  4200a8:	4b61      	ldr	r3, [pc, #388]	; (420230 <draw_series_line+0x2c4>)
  4200aa:	4798      	blx	r3
                    lv_draw_mask_remove_id(mask_fade_id);
  4200ac:	980e      	ldr	r0, [sp, #56]	; 0x38
  4200ae:	4b60      	ldr	r3, [pc, #384]	; (420230 <draw_series_line+0x2c4>)
  4200b0:	4798      	blx	r3
            if(point_radius) {
  4200b2:	9a04      	ldr	r2, [sp, #16]
  4200b4:	b1e2      	cbz	r2, 4200f0 <draw_series_line+0x184>
                point_area.x2 = point_area.x1 + point_radius;
  4200b6:	f8bd 314c 	ldrh.w	r3, [sp, #332]	; 0x14c
  4200ba:	b292      	uxth	r2, r2
  4200bc:	1899      	adds	r1, r3, r2
  4200be:	f8ad 104c 	strh.w	r1, [sp, #76]	; 0x4c
                point_area.x1 -= point_radius;
  4200c2:	1a9b      	subs	r3, r3, r2
  4200c4:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
                point_area.y2 = point_area.y1 + point_radius;
  4200c8:	f8bd 314e 	ldrh.w	r3, [sp, #334]	; 0x14e
  4200cc:	18d1      	adds	r1, r2, r3
  4200ce:	f8ad 104e 	strh.w	r1, [sp, #78]	; 0x4e
                point_area.y1 -= point_radius;
  4200d2:	1a9b      	subs	r3, r3, r2
  4200d4:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
                if(ser->points[p_act] != LV_CHART_POINT_DEF) {
  4200d8:	9b03      	ldr	r3, [sp, #12]
  4200da:	681b      	ldr	r3, [r3, #0]
  4200dc:	f933 2014 	ldrsh.w	r2, [r3, r4, lsl #1]
  4200e0:	4b54      	ldr	r3, [pc, #336]	; (420234 <draw_series_line+0x2c8>)
  4200e2:	429a      	cmp	r2, r3
  4200e4:	d004      	beq.n	4200f0 <draw_series_line+0x184>
                    lv_draw_rect(&point_area, clip_area, &point_dsc);
  4200e6:	aa1d      	add	r2, sp, #116	; 0x74
  4200e8:	9907      	ldr	r1, [sp, #28]
  4200ea:	a812      	add	r0, sp, #72	; 0x48
  4200ec:	4b4f      	ldr	r3, [pc, #316]	; (42022c <draw_series_line+0x2c0>)
  4200ee:	4798      	blx	r3
        for(i = 0; i < ext->point_cnt; i++) {
  4200f0:	3501      	adds	r5, #1
  4200f2:	b2ad      	uxth	r5, r5
            p_act = (start_point + i) % ext->point_cnt;
  4200f4:	46a6      	mov	lr, r4
        for(i = 0; i < ext->point_cnt; i++) {
  4200f6:	8c79      	ldrh	r1, [r7, #34]	; 0x22
  4200f8:	428d      	cmp	r5, r1
  4200fa:	f080 80a1 	bcs.w	420240 <draw_series_line+0x2d4>
            p1.x = p2.x;
  4200fe:	f9bd 3148 	ldrsh.w	r3, [sp, #328]	; 0x148
  420102:	f8ad 314c 	strh.w	r3, [sp, #332]	; 0x14c
            p1.y = p2.y;
  420106:	f9bd 314a 	ldrsh.w	r3, [sp, #330]	; 0x14a
  42010a:	f8ad 314e 	strh.w	r3, [sp, #334]	; 0x14e
            p2.x = ((w * i) / (ext->point_cnt - 1)) + x_ofs;
  42010e:	9b06      	ldr	r3, [sp, #24]
  420110:	fb05 f303 	mul.w	r3, r5, r3
  420114:	1e48      	subs	r0, r1, #1
  420116:	fb93 f3f0 	sdiv	r3, r3, r0
  42011a:	444b      	add	r3, r9
  42011c:	f8ad 3148 	strh.w	r3, [sp, #328]	; 0x148
            p_act = (start_point + i) % ext->point_cnt;
  420120:	eb08 0305 	add.w	r3, r8, r5
  420124:	fb93 f4f1 	sdiv	r4, r3, r1
  420128:	fb01 3414 	mls	r4, r1, r4, r3
  42012c:	b224      	sxth	r4, r4
            y_tmp = (int32_t)((int32_t)ser->points[p_act] - ext->ymin[ser->y_axis]) * h;
  42012e:	9e03      	ldr	r6, [sp, #12]
  420130:	6833      	ldr	r3, [r6, #0]
  420132:	f933 1014 	ldrsh.w	r1, [r3, r4, lsl #1]
  420136:	7a33      	ldrb	r3, [r6, #8]
  420138:	f3c3 0380 	ubfx	r3, r3, #2, #1
  42013c:	330c      	adds	r3, #12
  42013e:	f937 0013 	ldrsh.w	r0, [r7, r3, lsl #1]
  420142:	1a09      	subs	r1, r1, r0
  420144:	9a05      	ldr	r2, [sp, #20]
  420146:	fb01 f102 	mul.w	r1, r1, r2
            y_tmp = y_tmp / (ext->ymax[ser->y_axis] - ext->ymin[ser->y_axis]);
  42014a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
  42014e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
  420152:	1a1b      	subs	r3, r3, r0
  420154:	fb91 f3f3 	sdiv	r3, r1, r3
            p2.y  = h - y_tmp + y_ofs;
  420158:	ebaa 0303 	sub.w	r3, sl, r3
  42015c:	fa1b f383 	uxtah	r3, fp, r3
  420160:	f8ad 314a 	strh.w	r3, [sp, #330]	; 0x14a
            if(i != 0 && ser->points[p_prev] != LV_CHART_POINT_DEF && ser->points[p_act] != LV_CHART_POINT_DEF) {
  420164:	2d00      	cmp	r5, #0
  420166:	d0a4      	beq.n	4200b2 <draw_series_line+0x146>
  420168:	6833      	ldr	r3, [r6, #0]
  42016a:	f933 101e 	ldrsh.w	r1, [r3, lr, lsl #1]
  42016e:	4a31      	ldr	r2, [pc, #196]	; (420234 <draw_series_line+0x2c8>)
  420170:	4291      	cmp	r1, r2
  420172:	d09e      	beq.n	4200b2 <draw_series_line+0x146>
  420174:	f933 2014 	ldrsh.w	r2, [r3, r4, lsl #1]
  420178:	4b2e      	ldr	r3, [pc, #184]	; (420234 <draw_series_line+0x2c8>)
  42017a:	429a      	cmp	r2, r3
  42017c:	d099      	beq.n	4200b2 <draw_series_line+0x146>
                lv_draw_line(&p1, &p2, &series_mask, &line_dsc);
  42017e:	ab4d      	add	r3, sp, #308	; 0x134
  420180:	aa50      	add	r2, sp, #320	; 0x140
  420182:	a952      	add	r1, sp, #328	; 0x148
  420184:	a853      	add	r0, sp, #332	; 0x14c
  420186:	4e2c      	ldr	r6, [pc, #176]	; (420238 <draw_series_line+0x2cc>)
  420188:	47b0      	blx	r6
                lv_coord_t y_top = LV_MATH_MIN(p1.y, p2.y);
  42018a:	f9bd 014a 	ldrsh.w	r0, [sp, #330]	; 0x14a
  42018e:	f9bd 214e 	ldrsh.w	r2, [sp, #334]	; 0x14e
  420192:	4603      	mov	r3, r0
  420194:	4290      	cmp	r0, r2
  420196:	bfa8      	it	ge
  420198:	4613      	movge	r3, r2
  42019a:	4619      	mov	r1, r3
  42019c:	930a      	str	r3, [sp, #40]	; 0x28
                if(has_area && y_top <= clip_area->y2) {
  42019e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4201a0:	2b02      	cmp	r3, #2
  4201a2:	d986      	bls.n	4200b2 <draw_series_line+0x146>
  4201a4:	9b07      	ldr	r3, [sp, #28]
  4201a6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
  4201aa:	4299      	cmp	r1, r3
  4201ac:	dc81      	bgt.n	4200b2 <draw_series_line+0x146>
                    lv_draw_mask_line_points_init(&mask_line_p, p1.x, p1.y, p2.x, p2.y, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
  4201ae:	f9bd 3148 	ldrsh.w	r3, [sp, #328]	; 0x148
  4201b2:	f9bd 114c 	ldrsh.w	r1, [sp, #332]	; 0x14c
  4201b6:	f04f 0e03 	mov.w	lr, #3
  4201ba:	f8cd e004 	str.w	lr, [sp, #4]
  4201be:	9000      	str	r0, [sp, #0]
  4201c0:	a812      	add	r0, sp, #72	; 0x48
  4201c2:	4e1e      	ldr	r6, [pc, #120]	; (42023c <draw_series_line+0x2d0>)
  4201c4:	47b0      	blx	r6
                    mask_line_id = lv_draw_mask_add(&mask_line_p, NULL);
  4201c6:	2100      	movs	r1, #0
  4201c8:	a812      	add	r0, sp, #72	; 0x48
  4201ca:	4b17      	ldr	r3, [pc, #92]	; (420228 <draw_series_line+0x2bc>)
  4201cc:	4798      	blx	r3
  4201ce:	4606      	mov	r6, r0
                    a.x1 = p1.x;
  4201d0:	f9bd 314c 	ldrsh.w	r3, [sp, #332]	; 0x14c
  4201d4:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
                    a.x2 = p2.x - 1;
  4201d8:	f8bd 3148 	ldrh.w	r3, [sp, #328]	; 0x148
  4201dc:	3b01      	subs	r3, #1
  4201de:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
                    a.y1 = y_top;
  4201e2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
  4201e6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
                    a.y2 = series_area->y2;
  4201ea:	9b08      	ldr	r3, [sp, #32]
  4201ec:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
  4201f0:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                    if(has_fade) mask_fade_id = lv_draw_mask_add(&mask_fade_p, NULL);
  4201f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4201f6:	2b00      	cmp	r3, #0
  4201f8:	f43f af50 	beq.w	42009c <draw_series_line+0x130>
  4201fc:	e749      	b.n	420092 <draw_series_line+0x126>
  4201fe:	bf00      	nop
  420200:	00415663 	.word	0x00415663
  420204:	00408115 	.word	0x00408115
  420208:	0040edd5 	.word	0x0040edd5
  42020c:	00408b95 	.word	0x00408b95
  420210:	00406ef9 	.word	0x00406ef9
  420214:	0041250d 	.word	0x0041250d
  420218:	00407485 	.word	0x00407485
  42021c:	004162af 	.word	0x004162af
  420220:	004083ed 	.word	0x004083ed
  420224:	0040ff41 	.word	0x0040ff41
  420228:	0040fc61 	.word	0x0040fc61
  42022c:	00412559 	.word	0x00412559
  420230:	0040fce5 	.word	0x0040fce5
  420234:	ffff83e8 	.word	0xffff83e8
  420238:	0040edf1 	.word	0x0040edf1
  42023c:	0040fd81 	.word	0x0040fd81
  420240:	9e03      	ldr	r6, [sp, #12]
        if(point_radius) {
  420242:	9904      	ldr	r1, [sp, #16]
  420244:	b1d9      	cbz	r1, 42027e <draw_series_line+0x312>
            point_area.x2 = point_area.x1 + point_radius;
  420246:	f8bd 3148 	ldrh.w	r3, [sp, #328]	; 0x148
  42024a:	b289      	uxth	r1, r1
  42024c:	1858      	adds	r0, r3, r1
  42024e:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
            point_area.x1 -= point_radius;
  420252:	1a5b      	subs	r3, r3, r1
  420254:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
            point_area.y2 = point_area.y1 + point_radius;
  420258:	f8bd 314a 	ldrh.w	r3, [sp, #330]	; 0x14a
  42025c:	18c8      	adds	r0, r1, r3
  42025e:	f8ad 004e 	strh.w	r0, [sp, #78]	; 0x4e
            point_area.y1 -= point_radius;
  420262:	1a5b      	subs	r3, r3, r1
  420264:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            if(ser->points[p_act] != LV_CHART_POINT_DEF) {
  420268:	6833      	ldr	r3, [r6, #0]
  42026a:	f933 201e 	ldrsh.w	r2, [r3, lr, lsl #1]
  42026e:	4b24      	ldr	r3, [pc, #144]	; (420300 <draw_series_line+0x394>)
  420270:	429a      	cmp	r2, r3
  420272:	d004      	beq.n	42027e <draw_series_line+0x312>
                lv_draw_rect(&point_area, clip_area, &point_dsc);
  420274:	aa1d      	add	r2, sp, #116	; 0x74
  420276:	9907      	ldr	r1, [sp, #28]
  420278:	a812      	add	r0, sp, #72	; 0x48
  42027a:	4b22      	ldr	r3, [pc, #136]	; (420304 <draw_series_line+0x398>)
  42027c:	4798      	blx	r3
    _LV_LL_READ_BACK(ext->series_ll, ser) {
  42027e:	4631      	mov	r1, r6
  420280:	9809      	ldr	r0, [sp, #36]	; 0x24
  420282:	4b21      	ldr	r3, [pc, #132]	; (420308 <draw_series_line+0x39c>)
  420284:	4798      	blx	r3
  420286:	4606      	mov	r6, r0
  420288:	2e00      	cmp	r6, #0
  42028a:	f43f ae79 	beq.w	41ff80 <draw_series_line+0x14>
        if(ser->hidden) continue;
  42028e:	7a33      	ldrb	r3, [r6, #8]
  420290:	f013 0f02 	tst.w	r3, #2
  420294:	d1f3      	bne.n	42027e <draw_series_line+0x312>
        line_dsc.color = ser->color;
  420296:	88b3      	ldrh	r3, [r6, #4]
  420298:	f8ad 3134 	strh.w	r3, [sp, #308]	; 0x134
        point_dsc.bg_color = ser->color;
  42029c:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        area_dsc.bg_color = ser->color;
  4202a0:	f8ad 30ca 	strh.w	r3, [sp, #202]	; 0xca
        area_dsc.bg_grad_color = ser->color;
  4202a4:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
        lv_coord_t start_point = ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
  4202a8:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
  4202ac:	f013 0f01 	tst.w	r3, #1
  4202b0:	f47f aeec 	bne.w	42008c <draw_series_line+0x120>
  4202b4:	f9b6 8006 	ldrsh.w	r8, [r6, #6]
        p1.x = 0 + x_ofs;
  4202b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4202ba:	f8ad 314c 	strh.w	r3, [sp, #332]	; 0x14c
        p2.x = 0 + x_ofs;
  4202be:	f8ad 3148 	strh.w	r3, [sp, #328]	; 0x148
        int32_t y_tmp = (int32_t)((int32_t)ser->points[p_prev] - ext->ymin[ser->y_axis]) * h;
  4202c2:	6833      	ldr	r3, [r6, #0]
  4202c4:	f933 3018 	ldrsh.w	r3, [r3, r8, lsl #1]
  4202c8:	7a32      	ldrb	r2, [r6, #8]
  4202ca:	f3c2 0280 	ubfx	r2, r2, #2, #1
  4202ce:	320c      	adds	r2, #12
  4202d0:	f937 1012 	ldrsh.w	r1, [r7, r2, lsl #1]
  4202d4:	1a5b      	subs	r3, r3, r1
  4202d6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4202d8:	9005      	str	r0, [sp, #20]
  4202da:	fb00 f303 	mul.w	r3, r0, r3
        y_tmp = y_tmp / (ext->ymax[ser->y_axis] - ext->ymin[ser->y_axis]);
  4202de:	eb07 0242 	add.w	r2, r7, r2, lsl #1
  4202e2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
  4202e6:	1a52      	subs	r2, r2, r1
  4202e8:	fb93 f3f2 	sdiv	r3, r3, r2
        p2.y   = h - y_tmp + y_ofs;
  4202ec:	ebaa 0303 	sub.w	r3, sl, r3
  4202f0:	fa1b f383 	uxtah	r3, fp, r3
  4202f4:	f8ad 314a 	strh.w	r3, [sp, #330]	; 0x14a
        for(i = 0; i < ext->point_cnt; i++) {
  4202f8:	2500      	movs	r5, #0
  4202fa:	9603      	str	r6, [sp, #12]
  4202fc:	46c6      	mov	lr, r8
  4202fe:	e6fa      	b.n	4200f6 <draw_series_line+0x18a>
  420300:	ffff83e8 	.word	0xffff83e8
  420304:	00412559 	.word	0x00412559
  420308:	004162c7 	.word	0x004162c7

0042030c <draw_cursors>:
{
  42030c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  420310:	b09f      	sub	sp, #124	; 0x7c
  420312:	4604      	mov	r4, r0
  420314:	460d      	mov	r5, r1
  420316:	4690      	mov	r8, r2
    bool mask_ret = _lv_area_intersect(&series_mask, series_area, clip_area);
  420318:	a81c      	add	r0, sp, #112	; 0x70
  42031a:	4b70      	ldr	r3, [pc, #448]	; (4204dc <draw_cursors+0x1d0>)
  42031c:	4798      	blx	r3
    if(mask_ret == false) return;
  42031e:	b910      	cbnz	r0, 420326 <draw_cursors+0x1a>
}
  420320:	b01f      	add	sp, #124	; 0x7c
  420322:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  420326:	4620      	mov	r0, r4
  420328:	4b6d      	ldr	r3, [pc, #436]	; (4204e0 <draw_cursors+0x1d4>)
  42032a:	4798      	blx	r3
    if(_lv_ll_is_empty(&ext->cursors_ll)) return;
  42032c:	f100 060c 	add.w	r6, r0, #12
  420330:	4630      	mov	r0, r6
  420332:	4b6c      	ldr	r3, [pc, #432]	; (4204e4 <draw_cursors+0x1d8>)
  420334:	4798      	blx	r3
  420336:	2800      	cmp	r0, #0
  420338:	d1f2      	bne.n	420320 <draw_cursors+0x14>
    lv_draw_line_dsc_init(&line_dsc);
  42033a:	a817      	add	r0, sp, #92	; 0x5c
  42033c:	4b6a      	ldr	r3, [pc, #424]	; (4204e8 <draw_cursors+0x1dc>)
  42033e:	4798      	blx	r3
    lv_obj_init_draw_line_dsc(chart, LV_CHART_PART_CURSOR, &line_dsc);
  420340:	aa17      	add	r2, sp, #92	; 0x5c
  420342:	2103      	movs	r1, #3
  420344:	4620      	mov	r0, r4
  420346:	4b69      	ldr	r3, [pc, #420]	; (4204ec <draw_cursors+0x1e0>)
  420348:	4798      	blx	r3
    lv_draw_rect_dsc_init(&point_dsc);
  42034a:	a802      	add	r0, sp, #8
  42034c:	4b68      	ldr	r3, [pc, #416]	; (4204f0 <draw_cursors+0x1e4>)
  42034e:	4798      	blx	r3
    point_dsc.bg_opa = line_dsc.opa;
  420350:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
  420354:	f88d 3014 	strb.w	r3, [sp, #20]
    point_dsc.radius = LV_RADIUS_CIRCLE;
  420358:	f647 73ff 	movw	r3, #32767	; 0x7fff
  42035c:	f8ad 3008 	strh.w	r3, [sp, #8]
  420360:	2203      	movs	r2, #3
  420362:	4611      	mov	r1, r2
  420364:	4620      	mov	r0, r4
  420366:	4b63      	ldr	r3, [pc, #396]	; (4204f4 <draw_cursors+0x1e8>)
  420368:	4798      	blx	r3
  42036a:	4607      	mov	r7, r0
    if(point_radius > line_dsc.width / 2) line_dsc.raw_end = 1;
  42036c:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
  420370:	2b00      	cmp	r3, #0
  420372:	db0d      	blt.n	420390 <draw_cursors+0x84>
  420374:	ebb7 0f63 	cmp.w	r7, r3, asr #1
  420378:	dd05      	ble.n	420386 <draw_cursors+0x7a>
  42037a:	f89d 3065 	ldrb.w	r3, [sp, #101]	; 0x65
  42037e:	f043 0310 	orr.w	r3, r3, #16
  420382:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
    _LV_LL_READ_BACK(ext->cursors_ll, cursor) {
  420386:	4630      	mov	r0, r6
  420388:	4b5b      	ldr	r3, [pc, #364]	; (4204f8 <draw_cursors+0x1ec>)
  42038a:	4798      	blx	r3
  42038c:	4604      	mov	r4, r0
  42038e:	e06a      	b.n	420466 <draw_cursors+0x15a>
    if(point_radius > line_dsc.width / 2) line_dsc.raw_end = 1;
  420390:	3301      	adds	r3, #1
  420392:	e7ef      	b.n	420374 <draw_cursors+0x68>
            p1.x = series_area->x1 + cursor->point.x;
  420394:	882b      	ldrh	r3, [r5, #0]
  420396:	8822      	ldrh	r2, [r4, #0]
  420398:	4413      	add	r3, r2
  42039a:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            p1.y = series_area->y1 + cursor->point.y;
  42039e:	886b      	ldrh	r3, [r5, #2]
  4203a0:	8862      	ldrh	r2, [r4, #2]
  4203a2:	4413      	add	r3, r2
  4203a4:	b21b      	sxth	r3, r3
  4203a6:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            p2.x = series_area->x2;
  4203aa:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
  4203ae:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
            p2.y = p1.y;
  4203b2:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            lv_draw_line(&p1, &p2, &series_mask, &line_dsc);
  4203b6:	ab17      	add	r3, sp, #92	; 0x5c
  4203b8:	aa1c      	add	r2, sp, #112	; 0x70
  4203ba:	a91a      	add	r1, sp, #104	; 0x68
  4203bc:	a81b      	add	r0, sp, #108	; 0x6c
  4203be:	f8df 9144 	ldr.w	r9, [pc, #324]	; 420504 <draw_cursors+0x1f8>
  4203c2:	47c8      	blx	r9
  4203c4:	e05b      	b.n	42047e <draw_cursors+0x172>
            p1.x = series_area->x1 + cursor->point.x;
  4203c6:	882b      	ldrh	r3, [r5, #0]
  4203c8:	8822      	ldrh	r2, [r4, #0]
  4203ca:	4413      	add	r3, r2
  4203cc:	b21b      	sxth	r3, r3
  4203ce:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            p1.y = series_area->y1;
  4203d2:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
  4203d6:	f8ad 206e 	strh.w	r2, [sp, #110]	; 0x6e
            p2.x = p1.x;
  4203da:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            p2.y = series_area->y1 + cursor->point.y;
  4203de:	886b      	ldrh	r3, [r5, #2]
  4203e0:	8862      	ldrh	r2, [r4, #2]
  4203e2:	4413      	add	r3, r2
  4203e4:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            lv_draw_line(&p1, &p2, &series_mask, &line_dsc);
  4203e8:	ab17      	add	r3, sp, #92	; 0x5c
  4203ea:	aa1c      	add	r2, sp, #112	; 0x70
  4203ec:	a91a      	add	r1, sp, #104	; 0x68
  4203ee:	a81b      	add	r0, sp, #108	; 0x6c
  4203f0:	f8df 9110 	ldr.w	r9, [pc, #272]	; 420504 <draw_cursors+0x1f8>
  4203f4:	47c8      	blx	r9
  4203f6:	e046      	b.n	420486 <draw_cursors+0x17a>
            p1.x = series_area->x1;
  4203f8:	f9b5 2000 	ldrsh.w	r2, [r5]
  4203fc:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
            p1.y = series_area->y1 + cursor->point.y;
  420400:	886b      	ldrh	r3, [r5, #2]
  420402:	8861      	ldrh	r1, [r4, #2]
  420404:	440b      	add	r3, r1
  420406:	b21b      	sxth	r3, r3
  420408:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            p2.x = p1.x + cursor->point.x;
  42040c:	8821      	ldrh	r1, [r4, #0]
  42040e:	fa11 f282 	uxtah	r2, r1, r2
  420412:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
            p2.y = p1.y;
  420416:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            lv_draw_line(&p1, &p2, &series_mask, &line_dsc);
  42041a:	ab17      	add	r3, sp, #92	; 0x5c
  42041c:	aa1c      	add	r2, sp, #112	; 0x70
  42041e:	a91a      	add	r1, sp, #104	; 0x68
  420420:	a81b      	add	r0, sp, #108	; 0x6c
  420422:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 420504 <draw_cursors+0x1f8>
  420426:	47c8      	blx	r9
  420428:	e031      	b.n	42048e <draw_cursors+0x182>
            p1.x = series_area->x1 + cursor->point.x;
  42042a:	882b      	ldrh	r3, [r5, #0]
  42042c:	8822      	ldrh	r2, [r4, #0]
  42042e:	4413      	add	r3, r2
  420430:	b21b      	sxth	r3, r3
  420432:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            p1.y = series_area->y1 + cursor->point.y;
  420436:	886a      	ldrh	r2, [r5, #2]
  420438:	8861      	ldrh	r1, [r4, #2]
  42043a:	440a      	add	r2, r1
  42043c:	f8ad 206e 	strh.w	r2, [sp, #110]	; 0x6e
            p2.x = p1.x;
  420440:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            p2.y = series_area->y2;
  420444:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  420448:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            lv_draw_line(&p1, &p2, &series_mask, &line_dsc);
  42044c:	ab17      	add	r3, sp, #92	; 0x5c
  42044e:	aa1c      	add	r2, sp, #112	; 0x70
  420450:	a91a      	add	r1, sp, #104	; 0x68
  420452:	a81b      	add	r0, sp, #108	; 0x6c
  420454:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 420504 <draw_cursors+0x1f8>
  420458:	47c8      	blx	r9
  42045a:	e01c      	b.n	420496 <draw_cursors+0x18a>
    _LV_LL_READ_BACK(ext->cursors_ll, cursor) {
  42045c:	4621      	mov	r1, r4
  42045e:	4630      	mov	r0, r6
  420460:	4b26      	ldr	r3, [pc, #152]	; (4204fc <draw_cursors+0x1f0>)
  420462:	4798      	blx	r3
  420464:	4604      	mov	r4, r0
  420466:	2c00      	cmp	r4, #0
  420468:	f43f af5a 	beq.w	420320 <draw_cursors+0x14>
        line_dsc.color = cursor->color;
  42046c:	88a3      	ldrh	r3, [r4, #4]
  42046e:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
        point_dsc.bg_color = cursor->color;
  420472:	f8ad 300a 	strh.w	r3, [sp, #10]
        if(cursor->axes & LV_CHART_CURSOR_RIGHT) {
  420476:	79a3      	ldrb	r3, [r4, #6]
  420478:	f013 0f01 	tst.w	r3, #1
  42047c:	d18a      	bne.n	420394 <draw_cursors+0x88>
        if(cursor->axes & LV_CHART_CURSOR_UP) {
  42047e:	79a3      	ldrb	r3, [r4, #6]
  420480:	f013 0f02 	tst.w	r3, #2
  420484:	d19f      	bne.n	4203c6 <draw_cursors+0xba>
        if(cursor->axes & LV_CHART_CURSOR_LEFT) {
  420486:	79a3      	ldrb	r3, [r4, #6]
  420488:	f013 0f04 	tst.w	r3, #4
  42048c:	d1b4      	bne.n	4203f8 <draw_cursors+0xec>
        if(cursor->axes & LV_CHART_CURSOR_DOWN) {
  42048e:	79a3      	ldrb	r3, [r4, #6]
  420490:	f013 0f08 	tst.w	r3, #8
  420494:	d1c9      	bne.n	42042a <draw_cursors+0x11e>
        if(point_radius) {
  420496:	2f00      	cmp	r7, #0
  420498:	d0e0      	beq.n	42045c <draw_cursors+0x150>
            point_area.x1 = series_area->x1 + cursor->point.x - point_radius;
  42049a:	882a      	ldrh	r2, [r5, #0]
  42049c:	8823      	ldrh	r3, [r4, #0]
  42049e:	4413      	add	r3, r2
  4204a0:	b29b      	uxth	r3, r3
  4204a2:	b2b9      	uxth	r1, r7
  4204a4:	1a5b      	subs	r3, r3, r1
  4204a6:	f8ad 3000 	strh.w	r3, [sp]
            point_area.x2 = series_area->x1 + cursor->point.x + point_radius;
  4204aa:	8823      	ldrh	r3, [r4, #0]
  4204ac:	441a      	add	r2, r3
  4204ae:	fa11 f282 	uxtah	r2, r1, r2
  4204b2:	f8ad 2004 	strh.w	r2, [sp, #4]
            point_area.y1 = series_area->y1 + cursor->point.y - point_radius;
  4204b6:	886a      	ldrh	r2, [r5, #2]
  4204b8:	8863      	ldrh	r3, [r4, #2]
  4204ba:	4413      	add	r3, r2
  4204bc:	b29b      	uxth	r3, r3
  4204be:	1a5b      	subs	r3, r3, r1
  4204c0:	f8ad 3002 	strh.w	r3, [sp, #2]
            point_area.y2 = series_area->y1 + cursor->point.y + point_radius;
  4204c4:	8863      	ldrh	r3, [r4, #2]
  4204c6:	441a      	add	r2, r3
  4204c8:	fa11 f282 	uxtah	r2, r1, r2
  4204cc:	f8ad 2006 	strh.w	r2, [sp, #6]
            lv_draw_rect(&point_area, clip_area, &point_dsc);
  4204d0:	aa02      	add	r2, sp, #8
  4204d2:	4641      	mov	r1, r8
  4204d4:	4668      	mov	r0, sp
  4204d6:	4b0a      	ldr	r3, [pc, #40]	; (420500 <draw_cursors+0x1f4>)
  4204d8:	4798      	blx	r3
  4204da:	e7bf      	b.n	42045c <draw_cursors+0x150>
  4204dc:	00415663 	.word	0x00415663
  4204e0:	00408115 	.word	0x00408115
  4204e4:	0041654d 	.word	0x0041654d
  4204e8:	0040edd5 	.word	0x0040edd5
  4204ec:	00408b95 	.word	0x00408b95
  4204f0:	0041250d 	.word	0x0041250d
  4204f4:	00407485 	.word	0x00407485
  4204f8:	004162af 	.word	0x004162af
  4204fc:	004162c7 	.word	0x004162c7
  420500:	00412559 	.word	0x00412559
  420504:	0040edf1 	.word	0x0040edf1

00420508 <lv_chart_signal>:
{
  420508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  42050a:	4607      	mov	r7, r0
  42050c:	460c      	mov	r4, r1
  42050e:	4615      	mov	r5, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
  420510:	2908      	cmp	r1, #8
  420512:	d007      	beq.n	420524 <lv_chart_signal+0x1c>
    res = ancestor_signal(chart, sign, param);
  420514:	4b23      	ldr	r3, [pc, #140]	; (4205a4 <lv_chart_signal+0x9c>)
  420516:	681b      	ldr	r3, [r3, #0]
  420518:	4798      	blx	r3
  42051a:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
  42051c:	2801      	cmp	r0, #1
  42051e:	d010      	beq.n	420542 <lv_chart_signal+0x3a>
}
  420520:	4630      	mov	r0, r6
  420522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        info->result = lv_chart_get_style(chart, info->part);
  420524:	7811      	ldrb	r1, [r2, #0]
  420526:	4b20      	ldr	r3, [pc, #128]	; (4205a8 <lv_chart_signal+0xa0>)
  420528:	4798      	blx	r3
  42052a:	6068      	str	r0, [r5, #4]
        if(info->result != NULL) return LV_RES_OK;
  42052c:	b108      	cbz	r0, 420532 <lv_chart_signal+0x2a>
  42052e:	2601      	movs	r6, #1
  420530:	e7f6      	b.n	420520 <lv_chart_signal+0x18>
        else return ancestor_signal(chart, sign, param);
  420532:	4b1c      	ldr	r3, [pc, #112]	; (4205a4 <lv_chart_signal+0x9c>)
  420534:	681b      	ldr	r3, [r3, #0]
  420536:	462a      	mov	r2, r5
  420538:	4621      	mov	r1, r4
  42053a:	4638      	mov	r0, r7
  42053c:	4798      	blx	r3
  42053e:	4606      	mov	r6, r0
  420540:	e7ee      	b.n	420520 <lv_chart_signal+0x18>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  420542:	2c07      	cmp	r4, #7
  420544:	d005      	beq.n	420552 <lv_chart_signal+0x4a>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  420546:	4638      	mov	r0, r7
  420548:	4b18      	ldr	r3, [pc, #96]	; (4205ac <lv_chart_signal+0xa4>)
  42054a:	4798      	blx	r3
  42054c:	4605      	mov	r5, r0
    if(sign == LV_SIGNAL_CLEANUP) {
  42054e:	b16c      	cbz	r4, 42056c <lv_chart_signal+0x64>
  420550:	e7e6      	b.n	420520 <lv_chart_signal+0x18>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  420552:	4917      	ldr	r1, [pc, #92]	; (4205b0 <lv_chart_signal+0xa8>)
  420554:	4628      	mov	r0, r5
  420556:	4b17      	ldr	r3, [pc, #92]	; (4205b4 <lv_chart_signal+0xac>)
  420558:	4798      	blx	r3
  42055a:	4606      	mov	r6, r0
  42055c:	e7e0      	b.n	420520 <lv_chart_signal+0x18>
            _lv_ll_remove(&ext->series_ll, ser);
  42055e:	4621      	mov	r1, r4
  420560:	4628      	mov	r0, r5
  420562:	4b15      	ldr	r3, [pc, #84]	; (4205b8 <lv_chart_signal+0xb0>)
  420564:	4798      	blx	r3
            lv_mem_free(ser);
  420566:	4620      	mov	r0, r4
  420568:	4b14      	ldr	r3, [pc, #80]	; (4205bc <lv_chart_signal+0xb4>)
  42056a:	4798      	blx	r3
        while(ext->series_ll.head != NULL) {
  42056c:	686b      	ldr	r3, [r5, #4]
  42056e:	b15b      	cbz	r3, 420588 <lv_chart_signal+0x80>
            ser = _lv_ll_get_head(&ext->series_ll);
  420570:	4628      	mov	r0, r5
  420572:	4b13      	ldr	r3, [pc, #76]	; (4205c0 <lv_chart_signal+0xb8>)
  420574:	4798      	blx	r3
  420576:	4604      	mov	r4, r0
            if(!ser->ext_buf_assigned) lv_mem_free(ser->points);
  420578:	7a03      	ldrb	r3, [r0, #8]
  42057a:	f013 0f01 	tst.w	r3, #1
  42057e:	d1ee      	bne.n	42055e <lv_chart_signal+0x56>
  420580:	6800      	ldr	r0, [r0, #0]
  420582:	4b0e      	ldr	r3, [pc, #56]	; (4205bc <lv_chart_signal+0xb4>)
  420584:	4798      	blx	r3
  420586:	e7ea      	b.n	42055e <lv_chart_signal+0x56>
        _lv_ll_clear(&ext->series_ll);
  420588:	4628      	mov	r0, r5
  42058a:	4b0e      	ldr	r3, [pc, #56]	; (4205c4 <lv_chart_signal+0xbc>)
  42058c:	4798      	blx	r3
        lv_obj_clean_style_list(chart, LV_CHART_PART_SERIES);
  42058e:	2102      	movs	r1, #2
  420590:	4638      	mov	r0, r7
  420592:	4c0d      	ldr	r4, [pc, #52]	; (4205c8 <lv_chart_signal+0xc0>)
  420594:	47a0      	blx	r4
        lv_obj_clean_style_list(chart, LV_CHART_PART_CURSOR);
  420596:	2103      	movs	r1, #3
  420598:	4638      	mov	r0, r7
  42059a:	47a0      	blx	r4
        lv_obj_clean_style_list(chart, LV_CHART_PART_SERIES_BG);
  42059c:	2101      	movs	r1, #1
  42059e:	4638      	mov	r0, r7
  4205a0:	47a0      	blx	r4
  4205a2:	e7bd      	b.n	420520 <lv_chart_signal+0x18>
  4205a4:	20414874 	.word	0x20414874
  4205a8:	0041f515 	.word	0x0041f515
  4205ac:	00408115 	.word	0x00408115
  4205b0:	0042fe80 	.word	0x0042fe80
  4205b4:	004083d1 	.word	0x004083d1
  4205b8:	00416361 	.word	0x00416361
  4205bc:	0041679d 	.word	0x0041679d
  4205c0:	004162a5 	.word	0x004162a5
  4205c4:	004163f9 	.word	0x004163f9
  4205c8:	00405d15 	.word	0x00405d15

004205cc <lv_chart_create>:
{
  4205cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4205d0:	b083      	sub	sp, #12
  4205d2:	9100      	str	r1, [sp, #0]
    lv_obj_t * chart = lv_obj_create(par, copy);
  4205d4:	4b78      	ldr	r3, [pc, #480]	; (4207b8 <lv_chart_create+0x1ec>)
  4205d6:	4798      	blx	r3
  4205d8:	4605      	mov	r5, r0
    LV_ASSERT_MEM(chart);
  4205da:	4b78      	ldr	r3, [pc, #480]	; (4207bc <lv_chart_create+0x1f0>)
  4205dc:	4798      	blx	r3
  4205de:	b180      	cbz	r0, 420602 <lv_chart_create+0x36>
    if(chart == NULL) return NULL;
  4205e0:	2d00      	cmp	r5, #0
  4205e2:	f000 80e5 	beq.w	4207b0 <lv_chart_create+0x1e4>
    lv_chart_ext_t * ext = lv_obj_allocate_ext_attr(chart, sizeof(lv_chart_ext_t));
  4205e6:	215c      	movs	r1, #92	; 0x5c
  4205e8:	4628      	mov	r0, r5
  4205ea:	4b75      	ldr	r3, [pc, #468]	; (4207c0 <lv_chart_create+0x1f4>)
  4205ec:	4798      	blx	r3
  4205ee:	4604      	mov	r4, r0
    LV_ASSERT_MEM(ext);
  4205f0:	4b72      	ldr	r3, [pc, #456]	; (4207bc <lv_chart_create+0x1f0>)
  4205f2:	4798      	blx	r3
  4205f4:	b958      	cbnz	r0, 42060e <lv_chart_create+0x42>
  4205f6:	4622      	mov	r2, r4
  4205f8:	2300      	movs	r3, #0
  4205fa:	4872      	ldr	r0, [pc, #456]	; (4207c4 <lv_chart_create+0x1f8>)
  4205fc:	4972      	ldr	r1, [pc, #456]	; (4207c8 <lv_chart_create+0x1fc>)
  4205fe:	4788      	blx	r1
  420600:	e7fe      	b.n	420600 <lv_chart_create+0x34>
    LV_ASSERT_MEM(chart);
  420602:	462a      	mov	r2, r5
  420604:	2300      	movs	r3, #0
  420606:	486f      	ldr	r0, [pc, #444]	; (4207c4 <lv_chart_create+0x1f8>)
  420608:	496f      	ldr	r1, [pc, #444]	; (4207c8 <lv_chart_create+0x1fc>)
  42060a:	4788      	blx	r1
  42060c:	e7fe      	b.n	42060c <lv_chart_create+0x40>
    if(ext == NULL) {
  42060e:	b14c      	cbz	r4, 420624 <lv_chart_create+0x58>
    _lv_ll_init(&ext->series_ll, sizeof(lv_chart_series_t));
  420610:	210c      	movs	r1, #12
  420612:	4620      	mov	r0, r4
  420614:	4e6d      	ldr	r6, [pc, #436]	; (4207cc <lv_chart_create+0x200>)
  420616:	47b0      	blx	r6
    _lv_ll_init(&ext->cursors_ll, sizeof(lv_chart_cursor_t));
  420618:	2108      	movs	r1, #8
  42061a:	f104 000c 	add.w	r0, r4, #12
  42061e:	47b0      	blx	r6
    for(i = 0; i < _LV_CHART_AXIS_LAST; i++) {
  420620:	2300      	movs	r3, #0
  420622:	e00f      	b.n	420644 <lv_chart_create+0x78>
        lv_obj_del(chart);
  420624:	4628      	mov	r0, r5
  420626:	4b6a      	ldr	r3, [pc, #424]	; (4207d0 <lv_chart_create+0x204>)
  420628:	4798      	blx	r3
        return NULL;
  42062a:	2500      	movs	r5, #0
  42062c:	e0c0      	b.n	4207b0 <lv_chart_create+0x1e4>
        ext->ymin[i]                  = LV_CHART_YMIN_DEF;
  42062e:	f103 020c 	add.w	r2, r3, #12
  420632:	2100      	movs	r1, #0
  420634:	f824 1012 	strh.w	r1, [r4, r2, lsl #1]
        ext->ymax[i]                  = LV_CHART_YMAX_DEF;
  420638:	eb04 0242 	add.w	r2, r4, r2, lsl #1
  42063c:	2164      	movs	r1, #100	; 0x64
  42063e:	8091      	strh	r1, [r2, #4]
    for(i = 0; i < _LV_CHART_AXIS_LAST; i++) {
  420640:	3301      	adds	r3, #1
  420642:	b2db      	uxtb	r3, r3
  420644:	2b01      	cmp	r3, #1
  420646:	d9f2      	bls.n	42062e <lv_chart_create+0x62>
    ext->hdiv_cnt              = LV_CHART_HDIV_DEF;
  420648:	2303      	movs	r3, #3
  42064a:	f884 3020 	strb.w	r3, [r4, #32]
    ext->vdiv_cnt              = LV_CHART_VDIV_DEF;
  42064e:	2305      	movs	r3, #5
  420650:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    ext->point_cnt             = LV_CHART_PNUM_DEF;
  420654:	230a      	movs	r3, #10
  420656:	8463      	strh	r3, [r4, #34]	; 0x22
    ext->type                  = LV_CHART_TYPE_LINE;
  420658:	2301      	movs	r3, #1
  42065a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    ext->update_mode           = LV_CHART_UPDATE_MODE_SHIFT;
  42065e:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
  420662:	f36f 0300 	bfc	r3, #0, #1
  420666:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    _lv_memset_00(&ext->x_axis, sizeof(ext->x_axis));
  42066a:	f104 0948 	add.w	r9, r4, #72	; 0x48
  42066e:	2108      	movs	r1, #8
  420670:	4648      	mov	r0, r9
  420672:	4e58      	ldr	r6, [pc, #352]	; (4207d4 <lv_chart_create+0x208>)
  420674:	47b0      	blx	r6
    _lv_memset_00(&ext->y_axis, sizeof(ext->y_axis));
  420676:	f104 0840 	add.w	r8, r4, #64	; 0x40
  42067a:	2108      	movs	r1, #8
  42067c:	4640      	mov	r0, r8
  42067e:	47b0      	blx	r6
    _lv_memset_00(&ext->secondary_y_axis, sizeof(ext->secondary_y_axis));
  420680:	f104 0350 	add.w	r3, r4, #80	; 0x50
  420684:	9301      	str	r3, [sp, #4]
  420686:	2108      	movs	r1, #8
  420688:	4618      	mov	r0, r3
  42068a:	47b0      	blx	r6
    ext->x_axis.major_tick_len = LV_CHART_TICK_LENGTH_AUTO;
  42068c:	23ff      	movs	r3, #255	; 0xff
  42068e:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
    ext->x_axis.minor_tick_len = LV_CHART_TICK_LENGTH_AUTO;
  420692:	f884 304f 	strb.w	r3, [r4, #79]	; 0x4f
    ext->y_axis.major_tick_len = LV_CHART_TICK_LENGTH_AUTO;
  420696:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
    ext->y_axis.minor_tick_len = LV_CHART_TICK_LENGTH_AUTO;
  42069a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
    ext->secondary_y_axis.major_tick_len = LV_CHART_TICK_LENGTH_AUTO;
  42069e:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
    ext->secondary_y_axis.minor_tick_len = LV_CHART_TICK_LENGTH_AUTO;
  4206a2:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
    lv_style_list_init(&ext->style_series_bg);
  4206a6:	f104 0b24 	add.w	fp, r4, #36	; 0x24
  4206aa:	4658      	mov	r0, fp
  4206ac:	4e4a      	ldr	r6, [pc, #296]	; (4207d8 <lv_chart_create+0x20c>)
  4206ae:	47b0      	blx	r6
    lv_style_list_init(&ext->style_series);
  4206b0:	f104 072c 	add.w	r7, r4, #44	; 0x2c
  4206b4:	4638      	mov	r0, r7
  4206b6:	47b0      	blx	r6
    lv_style_list_init(&ext->style_cursors);
  4206b8:	f104 0a34 	add.w	sl, r4, #52	; 0x34
  4206bc:	4650      	mov	r0, sl
  4206be:	47b0      	blx	r6
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(chart);
  4206c0:	4b46      	ldr	r3, [pc, #280]	; (4207dc <lv_chart_create+0x210>)
  4206c2:	681b      	ldr	r3, [r3, #0]
  4206c4:	2b00      	cmp	r3, #0
  4206c6:	d033      	beq.n	420730 <lv_chart_create+0x164>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(chart);
  4206c8:	4b45      	ldr	r3, [pc, #276]	; (4207e0 <lv_chart_create+0x214>)
  4206ca:	681b      	ldr	r3, [r3, #0]
  4206cc:	2b00      	cmp	r3, #0
  4206ce:	d035      	beq.n	42073c <lv_chart_create+0x170>
    lv_obj_set_signal_cb(chart, lv_chart_signal);
  4206d0:	4944      	ldr	r1, [pc, #272]	; (4207e4 <lv_chart_create+0x218>)
  4206d2:	4628      	mov	r0, r5
  4206d4:	4b44      	ldr	r3, [pc, #272]	; (4207e8 <lv_chart_create+0x21c>)
  4206d6:	4798      	blx	r3
    lv_obj_set_design_cb(chart, lv_chart_design);
  4206d8:	4944      	ldr	r1, [pc, #272]	; (4207ec <lv_chart_create+0x220>)
  4206da:	4628      	mov	r0, r5
  4206dc:	4b44      	ldr	r3, [pc, #272]	; (4207f0 <lv_chart_create+0x224>)
  4206de:	4798      	blx	r3
    if(copy == NULL) {
  4206e0:	9b00      	ldr	r3, [sp, #0]
  4206e2:	2b00      	cmp	r3, #0
  4206e4:	d030      	beq.n	420748 <lv_chart_create+0x17c>
        lv_chart_ext_t * ext_copy = lv_obj_get_ext_attr(copy);
  4206e6:	9800      	ldr	r0, [sp, #0]
  4206e8:	4b42      	ldr	r3, [pc, #264]	; (4207f4 <lv_chart_create+0x228>)
  4206ea:	4798      	blx	r3
  4206ec:	4606      	mov	r6, r0
        lv_style_list_copy(&ext->style_series, &ext_copy->style_series);
  4206ee:	f100 012c 	add.w	r1, r0, #44	; 0x2c
  4206f2:	4638      	mov	r0, r7
  4206f4:	4f40      	ldr	r7, [pc, #256]	; (4207f8 <lv_chart_create+0x22c>)
  4206f6:	47b8      	blx	r7
        lv_style_list_copy(&ext->style_series_bg, &ext_copy->style_series_bg);
  4206f8:	f106 0124 	add.w	r1, r6, #36	; 0x24
  4206fc:	4658      	mov	r0, fp
  4206fe:	47b8      	blx	r7
        lv_style_list_copy(&ext->style_cursors, &ext_copy->style_cursors);
  420700:	f106 0134 	add.w	r1, r6, #52	; 0x34
  420704:	4650      	mov	r0, sl
  420706:	47b8      	blx	r7
        ext->type       = ext_copy->type;
  420708:	f896 303c 	ldrb.w	r3, [r6, #60]	; 0x3c
  42070c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        ext->hdiv_cnt   = ext_copy->hdiv_cnt;
  420710:	f896 3020 	ldrb.w	r3, [r6, #32]
  420714:	f884 3020 	strb.w	r3, [r4, #32]
        ext->vdiv_cnt   = ext_copy->vdiv_cnt;
  420718:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
  42071c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        ext->point_cnt  = ext_copy->point_cnt;
  420720:	8c73      	ldrh	r3, [r6, #34]	; 0x22
  420722:	8463      	strh	r3, [r4, #34]	; 0x22
        _lv_memcpy_small(ext->ymin, ext_copy->ymin, sizeof(ext->ymin));
  420724:	f106 0118 	add.w	r1, r6, #24
    uint8_t * d8 = (uint8_t *)dst;
  420728:	f104 0218 	add.w	r2, r4, #24
  42072c:	2304      	movs	r3, #4
  42072e:	e01c      	b.n	42076a <lv_chart_create+0x19e>
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(chart);
  420730:	4628      	mov	r0, r5
  420732:	4b32      	ldr	r3, [pc, #200]	; (4207fc <lv_chart_create+0x230>)
  420734:	4798      	blx	r3
  420736:	4b29      	ldr	r3, [pc, #164]	; (4207dc <lv_chart_create+0x210>)
  420738:	6018      	str	r0, [r3, #0]
  42073a:	e7c5      	b.n	4206c8 <lv_chart_create+0xfc>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(chart);
  42073c:	4628      	mov	r0, r5
  42073e:	4b30      	ldr	r3, [pc, #192]	; (420800 <lv_chart_create+0x234>)
  420740:	4798      	blx	r3
  420742:	4b27      	ldr	r3, [pc, #156]	; (4207e0 <lv_chart_create+0x214>)
  420744:	6018      	str	r0, [r3, #0]
  420746:	e7c3      	b.n	4206d0 <lv_chart_create+0x104>
        lv_obj_set_size(chart, LV_DPI * 3, LV_DPI * 2);
  420748:	f44f 7294 	mov.w	r2, #296	; 0x128
  42074c:	f44f 71de 	mov.w	r1, #444	; 0x1bc
  420750:	4628      	mov	r0, r5
  420752:	4b2c      	ldr	r3, [pc, #176]	; (420804 <lv_chart_create+0x238>)
  420754:	4798      	blx	r3
        lv_theme_apply(chart, LV_THEME_CHART);
  420756:	210a      	movs	r1, #10
  420758:	4628      	mov	r0, r5
  42075a:	4b2b      	ldr	r3, [pc, #172]	; (420808 <lv_chart_create+0x23c>)
  42075c:	4798      	blx	r3
  42075e:	e027      	b.n	4207b0 <lv_chart_create+0x1e4>
        *d8 = *s8;
  420760:	f811 0b01 	ldrb.w	r0, [r1], #1
  420764:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  420768:	3b01      	subs	r3, #1
    while(len) {
  42076a:	2b00      	cmp	r3, #0
  42076c:	d1f8      	bne.n	420760 <lv_chart_create+0x194>
        _lv_memcpy_small(ext->ymax, ext_copy->ymax, sizeof(ext->ymax));
  42076e:	f106 021c 	add.w	r2, r6, #28
    uint8_t * d8 = (uint8_t *)dst;
  420772:	341c      	adds	r4, #28
  420774:	2304      	movs	r3, #4
  420776:	e004      	b.n	420782 <lv_chart_create+0x1b6>
        *d8 = *s8;
  420778:	f812 1b01 	ldrb.w	r1, [r2], #1
  42077c:	f804 1b01 	strb.w	r1, [r4], #1
        len--;
  420780:	3b01      	subs	r3, #1
    while(len) {
  420782:	2b00      	cmp	r3, #0
  420784:	d1f8      	bne.n	420778 <lv_chart_create+0x1ac>
        _lv_memcpy(&ext->x_axis, &ext_copy->x_axis, sizeof(lv_chart_axis_cfg_t));
  420786:	2208      	movs	r2, #8
  420788:	f106 0148 	add.w	r1, r6, #72	; 0x48
  42078c:	4648      	mov	r0, r9
  42078e:	4c1f      	ldr	r4, [pc, #124]	; (42080c <lv_chart_create+0x240>)
  420790:	47a0      	blx	r4
        _lv_memcpy(&ext->y_axis, &ext_copy->y_axis, sizeof(lv_chart_axis_cfg_t));
  420792:	2208      	movs	r2, #8
  420794:	f106 0140 	add.w	r1, r6, #64	; 0x40
  420798:	4640      	mov	r0, r8
  42079a:	47a0      	blx	r4
        _lv_memcpy(&ext->secondary_y_axis, &ext_copy->secondary_y_axis, sizeof(lv_chart_axis_cfg_t));
  42079c:	2208      	movs	r2, #8
  42079e:	f106 0150 	add.w	r1, r6, #80	; 0x50
  4207a2:	9801      	ldr	r0, [sp, #4]
  4207a4:	47a0      	blx	r4
        lv_obj_refresh_style(chart, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
  4207a6:	22ff      	movs	r2, #255	; 0xff
  4207a8:	4611      	mov	r1, r2
  4207aa:	4628      	mov	r0, r5
  4207ac:	4b18      	ldr	r3, [pc, #96]	; (420810 <lv_chart_create+0x244>)
  4207ae:	4798      	blx	r3
}
  4207b0:	4628      	mov	r0, r5
  4207b2:	b003      	add	sp, #12
  4207b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4207b8:	00406855 	.word	0x00406855
  4207bc:	00415f95 	.word	0x00415f95
  4207c0:	00405981 	.word	0x00405981
  4207c4:	0042c714 	.word	0x0042c714
  4207c8:	00415fa1 	.word	0x00415fa1
  4207cc:	004161fb 	.word	0x004161fb
  4207d0:	00408275 	.word	0x00408275
  4207d4:	00416c0d 	.word	0x00416c0d
  4207d8:	00409e91 	.word	0x00409e91
  4207dc:	20414870 	.word	0x20414870
  4207e0:	20414874 	.word	0x20414874
  4207e4:	00420509 	.word	0x00420509
  4207e8:	0040591d 	.word	0x0040591d
  4207ec:	00420a59 	.word	0x00420a59
  4207f0:	00405959 	.word	0x00405959
  4207f4:	00408115 	.word	0x00408115
  4207f8:	0040ad6d 	.word	0x0040ad6d
  4207fc:	004080ed 	.word	0x004080ed
  420800:	004080c5 	.word	0x004080c5
  420804:	00406c79 	.word	0x00406c79
  420808:	00418419 	.word	0x00418419
  42080c:	004168e9 	.word	0x004168e9
  420810:	004078a1 	.word	0x004078a1

00420814 <lv_chart_add_series>:
{
  420814:	b570      	push	{r4, r5, r6, lr}
  420816:	4604      	mov	r4, r0
  420818:	460e      	mov	r6, r1
    LV_ASSERT_OBJ(chart, LV_OBJX_NAME);
  42081a:	4b24      	ldr	r3, [pc, #144]	; (4208ac <lv_chart_add_series+0x98>)
  42081c:	4798      	blx	r3
  42081e:	b928      	cbnz	r0, 42082c <lv_chart_add_series+0x18>
  420820:	4622      	mov	r2, r4
  420822:	2300      	movs	r3, #0
  420824:	4822      	ldr	r0, [pc, #136]	; (4208b0 <lv_chart_add_series+0x9c>)
  420826:	4923      	ldr	r1, [pc, #140]	; (4208b4 <lv_chart_add_series+0xa0>)
  420828:	4788      	blx	r1
  42082a:	e7fe      	b.n	42082a <lv_chart_add_series+0x16>
    lv_chart_ext_t * ext    = lv_obj_get_ext_attr(chart);
  42082c:	4620      	mov	r0, r4
  42082e:	4b22      	ldr	r3, [pc, #136]	; (4208b8 <lv_chart_add_series+0xa4>)
  420830:	4798      	blx	r3
  420832:	4605      	mov	r5, r0
    lv_chart_series_t * ser = _lv_ll_ins_head(&ext->series_ll);
  420834:	4b21      	ldr	r3, [pc, #132]	; (4208bc <lv_chart_add_series+0xa8>)
  420836:	4798      	blx	r3
  420838:	4604      	mov	r4, r0
    LV_ASSERT_MEM(ser);
  42083a:	4b1c      	ldr	r3, [pc, #112]	; (4208ac <lv_chart_add_series+0x98>)
  42083c:	4798      	blx	r3
  42083e:	b1a8      	cbz	r0, 42086c <lv_chart_add_series+0x58>
    if(ser == NULL) return NULL;
  420840:	b194      	cbz	r4, 420868 <lv_chart_add_series+0x54>
    ser->color  = color;
  420842:	80a6      	strh	r6, [r4, #4]
    ser->points = lv_mem_alloc(sizeof(lv_coord_t) * ext->point_cnt);
  420844:	8c68      	ldrh	r0, [r5, #34]	; 0x22
  420846:	0040      	lsls	r0, r0, #1
  420848:	4b1d      	ldr	r3, [pc, #116]	; (4208c0 <lv_chart_add_series+0xac>)
  42084a:	4798      	blx	r3
  42084c:	6020      	str	r0, [r4, #0]
    LV_ASSERT_MEM(ser->points);
  42084e:	4b17      	ldr	r3, [pc, #92]	; (4208ac <lv_chart_add_series+0x98>)
  420850:	4798      	blx	r3
  420852:	b188      	cbz	r0, 420878 <lv_chart_add_series+0x64>
    if(ser->points == NULL) {
  420854:	6821      	ldr	r1, [r4, #0]
  420856:	b9a9      	cbnz	r1, 420884 <lv_chart_add_series+0x70>
        _lv_ll_remove(&ext->series_ll, ser);
  420858:	4621      	mov	r1, r4
  42085a:	4628      	mov	r0, r5
  42085c:	4b19      	ldr	r3, [pc, #100]	; (4208c4 <lv_chart_add_series+0xb0>)
  42085e:	4798      	blx	r3
        lv_mem_free(ser);
  420860:	4620      	mov	r0, r4
  420862:	4b19      	ldr	r3, [pc, #100]	; (4208c8 <lv_chart_add_series+0xb4>)
  420864:	4798      	blx	r3
        return NULL;
  420866:	2400      	movs	r4, #0
}
  420868:	4620      	mov	r0, r4
  42086a:	bd70      	pop	{r4, r5, r6, pc}
    LV_ASSERT_MEM(ser);
  42086c:	4622      	mov	r2, r4
  42086e:	2300      	movs	r3, #0
  420870:	4816      	ldr	r0, [pc, #88]	; (4208cc <lv_chart_add_series+0xb8>)
  420872:	4910      	ldr	r1, [pc, #64]	; (4208b4 <lv_chart_add_series+0xa0>)
  420874:	4788      	blx	r1
  420876:	e7fe      	b.n	420876 <lv_chart_add_series+0x62>
    LV_ASSERT_MEM(ser->points);
  420878:	6822      	ldr	r2, [r4, #0]
  42087a:	2300      	movs	r3, #0
  42087c:	4813      	ldr	r0, [pc, #76]	; (4208cc <lv_chart_add_series+0xb8>)
  42087e:	490d      	ldr	r1, [pc, #52]	; (4208b4 <lv_chart_add_series+0xa0>)
  420880:	4788      	blx	r1
  420882:	e7fe      	b.n	420882 <lv_chart_add_series+0x6e>
    ser->start_point = 0;
  420884:	2300      	movs	r3, #0
  420886:	80e3      	strh	r3, [r4, #6]
    ser->ext_buf_assigned = false;
  420888:	7a22      	ldrb	r2, [r4, #8]
    ser->y_axis = LV_CHART_AXIS_PRIMARY_Y;
  42088a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
  42088e:	f363 0282 	bfi	r2, r3, #2, #1
  420892:	7222      	strb	r2, [r4, #8]
    for(i = 0; i < ext->point_cnt; i++) {
  420894:	e005      	b.n	4208a2 <lv_chart_add_series+0x8e>
        *p_tmp = def;
  420896:	f248 32e8 	movw	r2, #33768	; 0x83e8
  42089a:	f821 2b02 	strh.w	r2, [r1], #2
    for(i = 0; i < ext->point_cnt; i++) {
  42089e:	3301      	adds	r3, #1
  4208a0:	b29b      	uxth	r3, r3
  4208a2:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
  4208a4:	4293      	cmp	r3, r2
  4208a6:	d3f6      	bcc.n	420896 <lv_chart_add_series+0x82>
  4208a8:	e7de      	b.n	420868 <lv_chart_add_series+0x54>
  4208aa:	bf00      	nop
  4208ac:	00415f95 	.word	0x00415f95
  4208b0:	0042c728 	.word	0x0042c728
  4208b4:	00415fa1 	.word	0x00415fa1
  4208b8:	00408115 	.word	0x00408115
  4208bc:	0041620d 	.word	0x0041620d
  4208c0:	004166d9 	.word	0x004166d9
  4208c4:	00416361 	.word	0x00416361
  4208c8:	0041679d 	.word	0x0041679d
  4208cc:	0042c714 	.word	0x0042c714

004208d0 <lv_chart_set_div_line_count>:
{
  4208d0:	b570      	push	{r4, r5, r6, lr}
  4208d2:	4604      	mov	r4, r0
  4208d4:	460e      	mov	r6, r1
  4208d6:	4615      	mov	r5, r2
    LV_ASSERT_OBJ(chart, LV_OBJX_NAME);
  4208d8:	4b0e      	ldr	r3, [pc, #56]	; (420914 <lv_chart_set_div_line_count+0x44>)
  4208da:	4798      	blx	r3
  4208dc:	b928      	cbnz	r0, 4208ea <lv_chart_set_div_line_count+0x1a>
  4208de:	4622      	mov	r2, r4
  4208e0:	2300      	movs	r3, #0
  4208e2:	480d      	ldr	r0, [pc, #52]	; (420918 <lv_chart_set_div_line_count+0x48>)
  4208e4:	490d      	ldr	r1, [pc, #52]	; (42091c <lv_chart_set_div_line_count+0x4c>)
  4208e6:	4788      	blx	r1
  4208e8:	e7fe      	b.n	4208e8 <lv_chart_set_div_line_count+0x18>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  4208ea:	4620      	mov	r0, r4
  4208ec:	4b0c      	ldr	r3, [pc, #48]	; (420920 <lv_chart_set_div_line_count+0x50>)
  4208ee:	4798      	blx	r3
    if(ext->hdiv_cnt == hdiv && ext->vdiv_cnt == vdiv) return;
  4208f0:	f890 3020 	ldrb.w	r3, [r0, #32]
  4208f4:	42b3      	cmp	r3, r6
  4208f6:	d007      	beq.n	420908 <lv_chart_set_div_line_count+0x38>
    ext->hdiv_cnt = hdiv;
  4208f8:	f880 6020 	strb.w	r6, [r0, #32]
    ext->vdiv_cnt = vdiv;
  4208fc:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
    lv_obj_invalidate(chart);
  420900:	4620      	mov	r0, r4
  420902:	4b08      	ldr	r3, [pc, #32]	; (420924 <lv_chart_set_div_line_count+0x54>)
  420904:	4798      	blx	r3
  420906:	bd70      	pop	{r4, r5, r6, pc}
    if(ext->hdiv_cnt == hdiv && ext->vdiv_cnt == vdiv) return;
  420908:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
  42090c:	42ab      	cmp	r3, r5
  42090e:	d1f3      	bne.n	4208f8 <lv_chart_set_div_line_count+0x28>
  420910:	e7f9      	b.n	420906 <lv_chart_set_div_line_count+0x36>
  420912:	bf00      	nop
  420914:	00415f95 	.word	0x00415f95
  420918:	0042c728 	.word	0x0042c728
  42091c:	00415fa1 	.word	0x00415fa1
  420920:	00408115 	.word	0x00408115
  420924:	00405f99 	.word	0x00405f99

00420928 <lv_chart_set_update_mode>:
{
  420928:	b538      	push	{r3, r4, r5, lr}
  42092a:	4604      	mov	r4, r0
  42092c:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(chart, LV_OBJX_NAME);
  42092e:	4b0e      	ldr	r3, [pc, #56]	; (420968 <lv_chart_set_update_mode+0x40>)
  420930:	4798      	blx	r3
  420932:	b928      	cbnz	r0, 420940 <lv_chart_set_update_mode+0x18>
  420934:	4622      	mov	r2, r4
  420936:	2300      	movs	r3, #0
  420938:	480c      	ldr	r0, [pc, #48]	; (42096c <lv_chart_set_update_mode+0x44>)
  42093a:	490d      	ldr	r1, [pc, #52]	; (420970 <lv_chart_set_update_mode+0x48>)
  42093c:	4788      	blx	r1
  42093e:	e7fe      	b.n	42093e <lv_chart_set_update_mode+0x16>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  420940:	4620      	mov	r0, r4
  420942:	4b0c      	ldr	r3, [pc, #48]	; (420974 <lv_chart_set_update_mode+0x4c>)
  420944:	4798      	blx	r3
    if(ext->update_mode == update_mode) return;
  420946:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  42094a:	f003 0301 	and.w	r3, r3, #1
  42094e:	42ab      	cmp	r3, r5
  420950:	d008      	beq.n	420964 <lv_chart_set_update_mode+0x3c>
    ext->update_mode = update_mode;
  420952:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  420956:	f365 0300 	bfi	r3, r5, #0, #1
  42095a:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
    lv_obj_invalidate(chart);
  42095e:	4620      	mov	r0, r4
  420960:	4b05      	ldr	r3, [pc, #20]	; (420978 <lv_chart_set_update_mode+0x50>)
  420962:	4798      	blx	r3
  420964:	bd38      	pop	{r3, r4, r5, pc}
  420966:	bf00      	nop
  420968:	00415f95 	.word	0x00415f95
  42096c:	0042c728 	.word	0x0042c728
  420970:	00415fa1 	.word	0x00415fa1
  420974:	00408115 	.word	0x00408115
  420978:	00405f99 	.word	0x00405f99

0042097c <lv_chart_set_ext_array>:
{
  42097c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  42097e:	4605      	mov	r5, r0
  420980:	460c      	mov	r4, r1
  420982:	4617      	mov	r7, r2
  420984:	461e      	mov	r6, r3
    LV_ASSERT_OBJ(chart, LV_OBJX_NAME);
  420986:	4b15      	ldr	r3, [pc, #84]	; (4209dc <lv_chart_set_ext_array+0x60>)
  420988:	4798      	blx	r3
  42098a:	b928      	cbnz	r0, 420998 <lv_chart_set_ext_array+0x1c>
  42098c:	462a      	mov	r2, r5
  42098e:	2300      	movs	r3, #0
  420990:	4813      	ldr	r0, [pc, #76]	; (4209e0 <lv_chart_set_ext_array+0x64>)
  420992:	4914      	ldr	r1, [pc, #80]	; (4209e4 <lv_chart_set_ext_array+0x68>)
  420994:	4788      	blx	r1
  420996:	e7fe      	b.n	420996 <lv_chart_set_ext_array+0x1a>
    LV_ASSERT_NULL(ser);
  420998:	4620      	mov	r0, r4
  42099a:	4b10      	ldr	r3, [pc, #64]	; (4209dc <lv_chart_set_ext_array+0x60>)
  42099c:	4798      	blx	r3
  42099e:	b120      	cbz	r0, 4209aa <lv_chart_set_ext_array+0x2e>
    if(chart == NULL || ser == NULL) return;
  4209a0:	2c00      	cmp	r4, #0
  4209a2:	bf18      	it	ne
  4209a4:	2d00      	cmpne	r5, #0
  4209a6:	d106      	bne.n	4209b6 <lv_chart_set_ext_array+0x3a>
  4209a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LV_ASSERT_NULL(ser);
  4209aa:	4622      	mov	r2, r4
  4209ac:	2300      	movs	r3, #0
  4209ae:	480c      	ldr	r0, [pc, #48]	; (4209e0 <lv_chart_set_ext_array+0x64>)
  4209b0:	490c      	ldr	r1, [pc, #48]	; (4209e4 <lv_chart_set_ext_array+0x68>)
  4209b2:	4788      	blx	r1
  4209b4:	e7fe      	b.n	4209b4 <lv_chart_set_ext_array+0x38>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  4209b6:	4628      	mov	r0, r5
  4209b8:	4b0b      	ldr	r3, [pc, #44]	; (4209e8 <lv_chart_set_ext_array+0x6c>)
  4209ba:	4798      	blx	r3
  4209bc:	4605      	mov	r5, r0
    if(!ser->ext_buf_assigned && ser->points) lv_mem_free(ser->points);
  4209be:	7a23      	ldrb	r3, [r4, #8]
  4209c0:	f013 0f01 	tst.w	r3, #1
  4209c4:	d103      	bne.n	4209ce <lv_chart_set_ext_array+0x52>
  4209c6:	6820      	ldr	r0, [r4, #0]
  4209c8:	b108      	cbz	r0, 4209ce <lv_chart_set_ext_array+0x52>
  4209ca:	4b08      	ldr	r3, [pc, #32]	; (4209ec <lv_chart_set_ext_array+0x70>)
  4209cc:	4798      	blx	r3
    ser->ext_buf_assigned = true;
  4209ce:	7a23      	ldrb	r3, [r4, #8]
  4209d0:	f043 0301 	orr.w	r3, r3, #1
  4209d4:	7223      	strb	r3, [r4, #8]
    ser->points = array;
  4209d6:	6027      	str	r7, [r4, #0]
    ext->point_cnt = point_cnt;
  4209d8:	846e      	strh	r6, [r5, #34]	; 0x22
  4209da:	e7e5      	b.n	4209a8 <lv_chart_set_ext_array+0x2c>
  4209dc:	00415f95 	.word	0x00415f95
  4209e0:	0042c728 	.word	0x0042c728
  4209e4:	00415fa1 	.word	0x00415fa1
  4209e8:	00408115 	.word	0x00408115
  4209ec:	0041679d 	.word	0x0041679d

004209f0 <lv_chart_get_series_area>:
{
  4209f0:	b570      	push	{r4, r5, r6, lr}
  4209f2:	4605      	mov	r5, r0
  4209f4:	460c      	mov	r4, r1
    lv_area_copy(series_area, &chart->coords);
  4209f6:	f100 0110 	add.w	r1, r0, #16
    uint8_t * d8 = (uint8_t *)dst;
  4209fa:	4622      	mov	r2, r4
  4209fc:	2308      	movs	r3, #8
  4209fe:	e004      	b.n	420a0a <lv_chart_get_series_area+0x1a>
        *d8 = *s8;
  420a00:	f811 0b01 	ldrb.w	r0, [r1], #1
  420a04:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  420a08:	3b01      	subs	r3, #1
    while(len) {
  420a0a:	2b00      	cmp	r3, #0
  420a0c:	d1f8      	bne.n	420a00 <lv_chart_get_series_area+0x10>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  420a0e:	2212      	movs	r2, #18
  420a10:	2100      	movs	r1, #0
  420a12:	4628      	mov	r0, r5
  420a14:	4e0f      	ldr	r6, [pc, #60]	; (420a54 <lv_chart_get_series_area+0x64>)
  420a16:	47b0      	blx	r6
    series_area->x1 += lv_obj_get_style_pad_left(chart, LV_CHART_PART_BG);
  420a18:	8823      	ldrh	r3, [r4, #0]
  420a1a:	fa13 f080 	uxtah	r0, r3, r0
  420a1e:	8020      	strh	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  420a20:	2213      	movs	r2, #19
  420a22:	2100      	movs	r1, #0
  420a24:	4628      	mov	r0, r5
  420a26:	47b0      	blx	r6
    series_area->x2 -= lv_obj_get_style_pad_right(chart, LV_CHART_PART_BG);
  420a28:	b280      	uxth	r0, r0
  420a2a:	88a3      	ldrh	r3, [r4, #4]
  420a2c:	1a18      	subs	r0, r3, r0
  420a2e:	80a0      	strh	r0, [r4, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  420a30:	2210      	movs	r2, #16
  420a32:	2100      	movs	r1, #0
  420a34:	4628      	mov	r0, r5
  420a36:	47b0      	blx	r6
    series_area->y1 += lv_obj_get_style_pad_top(chart, LV_CHART_PART_BG);
  420a38:	8863      	ldrh	r3, [r4, #2]
  420a3a:	fa13 f080 	uxtah	r0, r3, r0
  420a3e:	8060      	strh	r0, [r4, #2]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  420a40:	2211      	movs	r2, #17
  420a42:	2100      	movs	r1, #0
  420a44:	4628      	mov	r0, r5
  420a46:	47b0      	blx	r6
    series_area->y2 -= lv_obj_get_style_pad_bottom(chart, LV_CHART_PART_BG);
  420a48:	b280      	uxth	r0, r0
  420a4a:	88e3      	ldrh	r3, [r4, #6]
  420a4c:	1a18      	subs	r0, r3, r0
  420a4e:	80e0      	strh	r0, [r4, #6]
  420a50:	bd70      	pop	{r4, r5, r6, pc}
  420a52:	bf00      	nop
  420a54:	00407485 	.word	0x00407485

00420a58 <lv_chart_design>:
{
  420a58:	b570      	push	{r4, r5, r6, lr}
  420a5a:	b098      	sub	sp, #96	; 0x60
  420a5c:	4604      	mov	r4, r0
  420a5e:	460d      	mov	r5, r1
    if(mode == LV_DESIGN_COVER_CHK) {
  420a60:	2a02      	cmp	r2, #2
  420a62:	d003      	beq.n	420a6c <lv_chart_design+0x14>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
  420a64:	b132      	cbz	r2, 420a74 <lv_chart_design+0x1c>
    return LV_DESIGN_RES_OK;
  420a66:	2000      	movs	r0, #0
}
  420a68:	b018      	add	sp, #96	; 0x60
  420a6a:	bd70      	pop	{r4, r5, r6, pc}
        return ancestor_design(chart, clip_area, mode);
  420a6c:	4b20      	ldr	r3, [pc, #128]	; (420af0 <lv_chart_design+0x98>)
  420a6e:	681b      	ldr	r3, [r3, #0]
  420a70:	4798      	blx	r3
  420a72:	e7f9      	b.n	420a68 <lv_chart_design+0x10>
        lv_draw_rect_dsc_init(&bg_dsc);
  420a74:	a803      	add	r0, sp, #12
  420a76:	4b1f      	ldr	r3, [pc, #124]	; (420af4 <lv_chart_design+0x9c>)
  420a78:	4798      	blx	r3
        lv_obj_init_draw_rect_dsc(chart, LV_CHART_PART_BG, &bg_dsc);
  420a7a:	aa03      	add	r2, sp, #12
  420a7c:	2100      	movs	r1, #0
  420a7e:	4620      	mov	r0, r4
  420a80:	4b1d      	ldr	r3, [pc, #116]	; (420af8 <lv_chart_design+0xa0>)
  420a82:	4798      	blx	r3
        lv_draw_rect(&chart->coords, clip_area, &bg_dsc);
  420a84:	aa03      	add	r2, sp, #12
  420a86:	4629      	mov	r1, r5
  420a88:	f104 0010 	add.w	r0, r4, #16
  420a8c:	4b1b      	ldr	r3, [pc, #108]	; (420afc <lv_chart_design+0xa4>)
  420a8e:	4798      	blx	r3
        lv_chart_get_series_area(chart, &series_area);
  420a90:	a901      	add	r1, sp, #4
  420a92:	4620      	mov	r0, r4
  420a94:	4b1a      	ldr	r3, [pc, #104]	; (420b00 <lv_chart_design+0xa8>)
  420a96:	4798      	blx	r3
        draw_series_bg(chart, &series_area, clip_area);
  420a98:	462a      	mov	r2, r5
  420a9a:	a901      	add	r1, sp, #4
  420a9c:	4620      	mov	r0, r4
  420a9e:	4b19      	ldr	r3, [pc, #100]	; (420b04 <lv_chart_design+0xac>)
  420aa0:	4798      	blx	r3
        draw_axes(chart, &series_area, clip_area);
  420aa2:	462a      	mov	r2, r5
  420aa4:	a901      	add	r1, sp, #4
  420aa6:	4620      	mov	r0, r4
  420aa8:	4b17      	ldr	r3, [pc, #92]	; (420b08 <lv_chart_design+0xb0>)
  420aaa:	4798      	blx	r3
        lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  420aac:	4620      	mov	r0, r4
  420aae:	4b17      	ldr	r3, [pc, #92]	; (420b0c <lv_chart_design+0xb4>)
  420ab0:	4798      	blx	r3
  420ab2:	4606      	mov	r6, r0
        if(ext->type & LV_CHART_TYPE_LINE) draw_series_line(chart, &series_area, clip_area);
  420ab4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  420ab8:	f013 0f01 	tst.w	r3, #1
  420abc:	d10b      	bne.n	420ad6 <lv_chart_design+0x7e>
        if(ext->type & LV_CHART_TYPE_COLUMN) draw_series_column(chart, &series_area, clip_area);
  420abe:	f896 303c 	ldrb.w	r3, [r6, #60]	; 0x3c
  420ac2:	f013 0f02 	tst.w	r3, #2
  420ac6:	d10c      	bne.n	420ae2 <lv_chart_design+0x8a>
        draw_cursors(chart, &series_area, clip_area);
  420ac8:	462a      	mov	r2, r5
  420aca:	a901      	add	r1, sp, #4
  420acc:	4620      	mov	r0, r4
  420ace:	4b10      	ldr	r3, [pc, #64]	; (420b10 <lv_chart_design+0xb8>)
  420ad0:	4798      	blx	r3
    return LV_DESIGN_RES_OK;
  420ad2:	2000      	movs	r0, #0
  420ad4:	e7c8      	b.n	420a68 <lv_chart_design+0x10>
        if(ext->type & LV_CHART_TYPE_LINE) draw_series_line(chart, &series_area, clip_area);
  420ad6:	462a      	mov	r2, r5
  420ad8:	a901      	add	r1, sp, #4
  420ada:	4620      	mov	r0, r4
  420adc:	4b0d      	ldr	r3, [pc, #52]	; (420b14 <lv_chart_design+0xbc>)
  420ade:	4798      	blx	r3
  420ae0:	e7ed      	b.n	420abe <lv_chart_design+0x66>
        if(ext->type & LV_CHART_TYPE_COLUMN) draw_series_column(chart, &series_area, clip_area);
  420ae2:	462a      	mov	r2, r5
  420ae4:	a901      	add	r1, sp, #4
  420ae6:	4620      	mov	r0, r4
  420ae8:	4b0b      	ldr	r3, [pc, #44]	; (420b18 <lv_chart_design+0xc0>)
  420aea:	4798      	blx	r3
  420aec:	e7ec      	b.n	420ac8 <lv_chart_design+0x70>
  420aee:	bf00      	nop
  420af0:	20414870 	.word	0x20414870
  420af4:	0041250d 	.word	0x0041250d
  420af8:	004083ed 	.word	0x004083ed
  420afc:	00412559 	.word	0x00412559
  420b00:	004209f1 	.word	0x004209f1
  420b04:	0041f565 	.word	0x0041f565
  420b08:	0041fd69 	.word	0x0041fd69
  420b0c:	00408115 	.word	0x00408115
  420b10:	0042030d 	.word	0x0042030d
  420b14:	0041ff6d 	.word	0x0041ff6d
  420b18:	0041fd95 	.word	0x0041fd95

00420b1c <invalidate_lines>:
/**
 * invalid area of the new line data lines on a chart
 * @param obj pointer to chart object
 */
static void invalidate_lines(lv_obj_t * chart, uint16_t i)
{
  420b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  420b20:	b084      	sub	sp, #16
  420b22:	4681      	mov	r9, r0
  420b24:	4688      	mov	r8, r1
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  420b26:	4b3c      	ldr	r3, [pc, #240]	; (420c18 <invalidate_lines+0xfc>)
  420b28:	4798      	blx	r3
    if(i >= ext->point_cnt) return;
  420b2a:	8c43      	ldrh	r3, [r0, #34]	; 0x22
  420b2c:	4543      	cmp	r3, r8
  420b2e:	d96a      	bls.n	420c06 <invalidate_lines+0xea>
  420b30:	4682      	mov	sl, r0

    lv_area_t series_area;
    lv_chart_get_series_area(chart, &series_area);
  420b32:	a902      	add	r1, sp, #8
  420b34:	4648      	mov	r0, r9
  420b36:	4b39      	ldr	r3, [pc, #228]	; (420c1c <invalidate_lines+0x100>)
  420b38:	4798      	blx	r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  420b3a:	f8bd 400c 	ldrh.w	r4, [sp, #12]
  420b3e:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  420b42:	1b64      	subs	r4, r4, r5
  420b44:	b2a4      	uxth	r4, r4
  420b46:	3401      	adds	r4, #1
  420b48:	b224      	sxth	r4, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  420b4a:	2290      	movs	r2, #144	; 0x90
  420b4c:	2102      	movs	r1, #2
  420b4e:	4648      	mov	r0, r9
  420b50:	4e33      	ldr	r6, [pc, #204]	; (420c20 <invalidate_lines+0x104>)
  420b52:	47b0      	blx	r6
  420b54:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  420b56:	2203      	movs	r2, #3
  420b58:	2102      	movs	r1, #2
  420b5a:	4648      	mov	r0, r9
  420b5c:	47b0      	blx	r6
    const uint8_t * s8 = (const uint8_t *)src;
  420b5e:	ab02      	add	r3, sp, #8
    uint8_t * d8 = (uint8_t *)dst;
  420b60:	4669      	mov	r1, sp
  420b62:	2208      	movs	r2, #8
    while(len) {
  420b64:	2a00      	cmp	r2, #0
  420b66:	d151      	bne.n	420c0c <invalidate_lines+0xf0>
    lv_style_int_t line_width = lv_obj_get_style_line_width(chart, LV_CHART_PART_SERIES);
    lv_style_int_t point_radius = lv_obj_get_style_size(chart, LV_CHART_PART_SERIES);

    lv_area_t coords;
    lv_area_copy(&coords, &series_area);
    coords.y1 -= line_width + point_radius;
  420b68:	b2bf      	uxth	r7, r7
  420b6a:	b286      	uxth	r6, r0
  420b6c:	19bb      	adds	r3, r7, r6
  420b6e:	b29b      	uxth	r3, r3
  420b70:	f8bd 2002 	ldrh.w	r2, [sp, #2]
  420b74:	1ad2      	subs	r2, r2, r3
  420b76:	f8ad 2002 	strh.w	r2, [sp, #2]
    coords.y2 += line_width + point_radius;
  420b7a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
  420b7e:	4413      	add	r3, r2
  420b80:	f8ad 3006 	strh.w	r3, [sp, #6]

    if(i < ext->point_cnt - 1) {
  420b84:	f8ba 2022 	ldrh.w	r2, [sl, #34]	; 0x22
  420b88:	3a01      	subs	r2, #1
  420b8a:	4590      	cmp	r8, r2
  420b8c:	da19      	bge.n	420bc2 <invalidate_lines+0xa6>
        coords.x1 = ((w * i) / (ext->point_cnt - 1)) + x_ofs - line_width - point_radius;
  420b8e:	fb04 f308 	mul.w	r3, r4, r8
  420b92:	fb93 f3f2 	sdiv	r3, r3, r2
  420b96:	442b      	add	r3, r5
  420b98:	b29b      	uxth	r3, r3
  420b9a:	1bdb      	subs	r3, r3, r7
  420b9c:	b29b      	uxth	r3, r3
  420b9e:	1b9b      	subs	r3, r3, r6
  420ba0:	f8ad 3000 	strh.w	r3, [sp]
        coords.x2 = ((w * (i + 1)) / (ext->point_cnt - 1)) + x_ofs + line_width + point_radius;
  420ba4:	fb08 4304 	mla	r3, r8, r4, r4
  420ba8:	fb93 f2f2 	sdiv	r2, r3, r2
  420bac:	442a      	add	r2, r5
  420bae:	fa17 f282 	uxtah	r2, r7, r2
  420bb2:	fa16 f282 	uxtah	r2, r6, r2
  420bb6:	f8ad 2004 	strh.w	r2, [sp, #4]
        lv_obj_invalidate_area(chart, &coords);
  420bba:	4669      	mov	r1, sp
  420bbc:	4648      	mov	r0, r9
  420bbe:	4b19      	ldr	r3, [pc, #100]	; (420c24 <invalidate_lines+0x108>)
  420bc0:	4798      	blx	r3
    }

    if(i > 0) {
  420bc2:	f1b8 0f00 	cmp.w	r8, #0
  420bc6:	d01e      	beq.n	420c06 <invalidate_lines+0xea>
        coords.x1 = ((w * (i - 1)) / (ext->point_cnt - 1)) + x_ofs - line_width - point_radius;
  420bc8:	f108 33ff 	add.w	r3, r8, #4294967295
  420bcc:	fb03 f304 	mul.w	r3, r3, r4
  420bd0:	f8ba 2022 	ldrh.w	r2, [sl, #34]	; 0x22
  420bd4:	3a01      	subs	r2, #1
  420bd6:	fb93 f3f2 	sdiv	r3, r3, r2
  420bda:	442b      	add	r3, r5
  420bdc:	b29b      	uxth	r3, r3
  420bde:	1bdb      	subs	r3, r3, r7
  420be0:	b29b      	uxth	r3, r3
  420be2:	1b9b      	subs	r3, r3, r6
  420be4:	f8ad 3000 	strh.w	r3, [sp]
        coords.x2 = ((w * i) / (ext->point_cnt - 1)) + x_ofs + line_width + point_radius;
  420be8:	fb04 f408 	mul.w	r4, r4, r8
  420bec:	fb94 f4f2 	sdiv	r4, r4, r2
  420bf0:	4425      	add	r5, r4
  420bf2:	fa17 f785 	uxtah	r7, r7, r5
  420bf6:	fa16 f687 	uxtah	r6, r6, r7
  420bfa:	f8ad 6004 	strh.w	r6, [sp, #4]
        lv_obj_invalidate_area(chart, &coords);
  420bfe:	4669      	mov	r1, sp
  420c00:	4648      	mov	r0, r9
  420c02:	4b08      	ldr	r3, [pc, #32]	; (420c24 <invalidate_lines+0x108>)
  420c04:	4798      	blx	r3
    }
}
  420c06:	b004      	add	sp, #16
  420c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        *d8 = *s8;
  420c0c:	f813 6b01 	ldrb.w	r6, [r3], #1
  420c10:	f801 6b01 	strb.w	r6, [r1], #1
        len--;
  420c14:	3a01      	subs	r2, #1
  420c16:	e7a5      	b.n	420b64 <invalidate_lines+0x48>
  420c18:	00408115 	.word	0x00408115
  420c1c:	004209f1 	.word	0x004209f1
  420c20:	00407485 	.word	0x00407485
  420c24:	00405f35 	.word	0x00405f35

00420c28 <invalidate_columns>:
 * invalid area of the new column data lines on a chart
 * @param chart pointer to chart object
 * @param mask mask, inherited from the design function
 */
static void invalidate_columns(lv_obj_t * chart, uint16_t i)
{
  420c28:	b5f0      	push	{r4, r5, r6, r7, lr}
  420c2a:	b085      	sub	sp, #20
  420c2c:	4605      	mov	r5, r0
  420c2e:	460f      	mov	r7, r1
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  420c30:	4b1b      	ldr	r3, [pc, #108]	; (420ca0 <invalidate_columns+0x78>)
  420c32:	4798      	blx	r3
  420c34:	4606      	mov	r6, r0

    lv_area_t series_area;
    lv_chart_get_series_area(chart, &series_area);
  420c36:	a902      	add	r1, sp, #8
  420c38:	4628      	mov	r0, r5
  420c3a:	4b1a      	ldr	r3, [pc, #104]	; (420ca4 <invalidate_columns+0x7c>)
  420c3c:	4798      	blx	r3
  420c3e:	f8bd 400c 	ldrh.w	r4, [sp, #12]
  420c42:	f8bd 3008 	ldrh.w	r3, [sp, #8]
  420c46:	1ae4      	subs	r4, r4, r3
  420c48:	b2a4      	uxth	r4, r4
  420c4a:	3401      	adds	r4, #1
  420c4c:	b224      	sxth	r4, r4

    lv_area_t col_a;
    lv_coord_t w     = lv_area_get_width(&series_area);
    lv_coord_t col_w = w / ((_lv_ll_get_len(&ext->series_ll) + 1) * ext->point_cnt); /* Suppose + 1 series as separator*/
  420c4e:	4630      	mov	r0, r6
  420c50:	4b15      	ldr	r3, [pc, #84]	; (420ca8 <invalidate_columns+0x80>)
  420c52:	4798      	blx	r3
  420c54:	8c71      	ldrh	r1, [r6, #34]	; 0x22
  420c56:	fb00 1001 	mla	r0, r0, r1, r1
  420c5a:	fbb4 f6f0 	udiv	r6, r4, r0
  420c5e:	b233      	sxth	r3, r6
    lv_coord_t x_ofs = col_w / 2;                                    /*Shift with a half col.*/
  420c60:	2202      	movs	r2, #2
  420c62:	fb93 f3f2 	sdiv	r3, r3, r2

    lv_coord_t x_act;
    x_act = (int32_t)((int32_t)w * i) / ext->point_cnt;
  420c66:	fb04 f407 	mul.w	r4, r4, r7
  420c6a:	fb94 f1f1 	sdiv	r1, r4, r1
    x_act += series_area.x1 + x_ofs;
  420c6e:	f8bd 4008 	ldrh.w	r4, [sp, #8]
  420c72:	441c      	add	r4, r3
  420c74:	fa11 f484 	uxtah	r4, r1, r4
  420c78:	b2a4      	uxth	r4, r4
  420c7a:	b227      	sxth	r7, r4

    lv_obj_get_coords(chart, &col_a);
  420c7c:	4669      	mov	r1, sp
  420c7e:	4628      	mov	r0, r5
  420c80:	4b0a      	ldr	r3, [pc, #40]	; (420cac <invalidate_columns+0x84>)
  420c82:	4798      	blx	r3
    col_a.x1 = x_act;
  420c84:	f8ad 7000 	strh.w	r7, [sp]
    col_a.x2 = col_a.x1 + col_w;
  420c88:	4434      	add	r4, r6
  420c8a:	f8ad 4004 	strh.w	r4, [sp, #4]

    _lv_inv_area(lv_obj_get_disp(chart), &col_a);
  420c8e:	4628      	mov	r0, r5
  420c90:	4b07      	ldr	r3, [pc, #28]	; (420cb0 <invalidate_columns+0x88>)
  420c92:	4798      	blx	r3
  420c94:	4669      	mov	r1, sp
  420c96:	4b07      	ldr	r3, [pc, #28]	; (420cb4 <invalidate_columns+0x8c>)
  420c98:	4798      	blx	r3
}
  420c9a:	b005      	add	sp, #20
  420c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  420c9e:	bf00      	nop
  420ca0:	00408115 	.word	0x00408115
  420ca4:	004209f1 	.word	0x004209f1
  420ca8:	004164a9 	.word	0x004164a9
  420cac:	00405b01 	.word	0x00405b01
  420cb0:	00405a4d 	.word	0x00405a4d
  420cb4:	00409745 	.word	0x00409745

00420cb8 <lv_chart_refresh>:
{
  420cb8:	b510      	push	{r4, lr}
  420cba:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(chart, LV_OBJX_NAME);
  420cbc:	4b06      	ldr	r3, [pc, #24]	; (420cd8 <lv_chart_refresh+0x20>)
  420cbe:	4798      	blx	r3
  420cc0:	b928      	cbnz	r0, 420cce <lv_chart_refresh+0x16>
  420cc2:	4622      	mov	r2, r4
  420cc4:	2300      	movs	r3, #0
  420cc6:	4805      	ldr	r0, [pc, #20]	; (420cdc <lv_chart_refresh+0x24>)
  420cc8:	4905      	ldr	r1, [pc, #20]	; (420ce0 <lv_chart_refresh+0x28>)
  420cca:	4788      	blx	r1
  420ccc:	e7fe      	b.n	420ccc <lv_chart_refresh+0x14>
    lv_obj_invalidate(chart);
  420cce:	4620      	mov	r0, r4
  420cd0:	4b04      	ldr	r3, [pc, #16]	; (420ce4 <lv_chart_refresh+0x2c>)
  420cd2:	4798      	blx	r3
  420cd4:	bd10      	pop	{r4, pc}
  420cd6:	bf00      	nop
  420cd8:	00415f95 	.word	0x00415f95
  420cdc:	0042c728 	.word	0x0042c728
  420ce0:	00415fa1 	.word	0x00415fa1
  420ce4:	00405f99 	.word	0x00405f99

00420ce8 <lv_chart_set_y_range>:
{
  420ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  420cea:	4606      	mov	r6, r0
  420cec:	460d      	mov	r5, r1
  420cee:	4617      	mov	r7, r2
  420cf0:	461c      	mov	r4, r3
    LV_ASSERT_OBJ(chart, LV_OBJX_NAME);
  420cf2:	4b16      	ldr	r3, [pc, #88]	; (420d4c <lv_chart_set_y_range+0x64>)
  420cf4:	4798      	blx	r3
  420cf6:	b110      	cbz	r0, 420cfe <lv_chart_set_y_range+0x16>
    if(axis >= _LV_CHART_AXIS_LAST) {
  420cf8:	2d01      	cmp	r5, #1
  420cfa:	d906      	bls.n	420d0a <lv_chart_set_y_range+0x22>
  420cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LV_ASSERT_OBJ(chart, LV_OBJX_NAME);
  420cfe:	4632      	mov	r2, r6
  420d00:	2300      	movs	r3, #0
  420d02:	4813      	ldr	r0, [pc, #76]	; (420d50 <lv_chart_set_y_range+0x68>)
  420d04:	4913      	ldr	r1, [pc, #76]	; (420d54 <lv_chart_set_y_range+0x6c>)
  420d06:	4788      	blx	r1
  420d08:	e7fe      	b.n	420d08 <lv_chart_set_y_range+0x20>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  420d0a:	4630      	mov	r0, r6
  420d0c:	4b12      	ldr	r3, [pc, #72]	; (420d58 <lv_chart_set_y_range+0x70>)
  420d0e:	4798      	blx	r3
    if(ext->ymin[axis] == ymin && ext->ymax[axis] == ymax) return;
  420d10:	f105 030c 	add.w	r3, r5, #12
  420d14:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
  420d18:	42bb      	cmp	r3, r7
  420d1a:	d107      	bne.n	420d2c <lv_chart_set_y_range+0x44>
  420d1c:	f105 030c 	add.w	r3, r5, #12
  420d20:	eb00 0343 	add.w	r3, r0, r3, lsl #1
  420d24:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
  420d28:	42a3      	cmp	r3, r4
  420d2a:	d0e7      	beq.n	420cfc <lv_chart_set_y_range+0x14>
    ext->ymin[axis] = ymin;
  420d2c:	f105 030c 	add.w	r3, r5, #12
  420d30:	f820 7013 	strh.w	r7, [r0, r3, lsl #1]
    ext->ymax[axis] = (ymax == ymin ? ymax + 1 : ymax);
  420d34:	42a7      	cmp	r7, r4
  420d36:	d101      	bne.n	420d3c <lv_chart_set_y_range+0x54>
  420d38:	3401      	adds	r4, #1
  420d3a:	b224      	sxth	r4, r4
  420d3c:	350c      	adds	r5, #12
  420d3e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
  420d42:	80ac      	strh	r4, [r5, #4]
    lv_chart_refresh(chart);
  420d44:	4630      	mov	r0, r6
  420d46:	4b05      	ldr	r3, [pc, #20]	; (420d5c <lv_chart_set_y_range+0x74>)
  420d48:	4798      	blx	r3
  420d4a:	e7d7      	b.n	420cfc <lv_chart_set_y_range+0x14>
  420d4c:	00415f95 	.word	0x00415f95
  420d50:	0042c728 	.word	0x0042c728
  420d54:	00415fa1 	.word	0x00415fa1
  420d58:	00408115 	.word	0x00408115
  420d5c:	00420cb9 	.word	0x00420cb9

00420d60 <lv_chart_set_type>:
{
  420d60:	b538      	push	{r3, r4, r5, lr}
  420d62:	4604      	mov	r4, r0
  420d64:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(chart, LV_OBJX_NAME);
  420d66:	4b0b      	ldr	r3, [pc, #44]	; (420d94 <lv_chart_set_type+0x34>)
  420d68:	4798      	blx	r3
  420d6a:	b928      	cbnz	r0, 420d78 <lv_chart_set_type+0x18>
  420d6c:	4622      	mov	r2, r4
  420d6e:	2300      	movs	r3, #0
  420d70:	4809      	ldr	r0, [pc, #36]	; (420d98 <lv_chart_set_type+0x38>)
  420d72:	490a      	ldr	r1, [pc, #40]	; (420d9c <lv_chart_set_type+0x3c>)
  420d74:	4788      	blx	r1
  420d76:	e7fe      	b.n	420d76 <lv_chart_set_type+0x16>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  420d78:	4620      	mov	r0, r4
  420d7a:	4b09      	ldr	r3, [pc, #36]	; (420da0 <lv_chart_set_type+0x40>)
  420d7c:	4798      	blx	r3
    if(ext->type == type) return;
  420d7e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  420d82:	42ab      	cmp	r3, r5
  420d84:	d004      	beq.n	420d90 <lv_chart_set_type+0x30>
    ext->type = type;
  420d86:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    lv_chart_refresh(chart);
  420d8a:	4620      	mov	r0, r4
  420d8c:	4b05      	ldr	r3, [pc, #20]	; (420da4 <lv_chart_set_type+0x44>)
  420d8e:	4798      	blx	r3
  420d90:	bd38      	pop	{r3, r4, r5, pc}
  420d92:	bf00      	nop
  420d94:	00415f95 	.word	0x00415f95
  420d98:	0042c728 	.word	0x0042c728
  420d9c:	00415fa1 	.word	0x00415fa1
  420da0:	00408115 	.word	0x00408115
  420da4:	00420cb9 	.word	0x00420cb9

00420da8 <lv_chart_set_point_count>:
{
  420da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  420dac:	4680      	mov	r8, r0
  420dae:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(chart, LV_OBJX_NAME);
  420db0:	4b48      	ldr	r3, [pc, #288]	; (420ed4 <lv_chart_set_point_count+0x12c>)
  420db2:	4798      	blx	r3
  420db4:	b928      	cbnz	r0, 420dc2 <lv_chart_set_point_count+0x1a>
  420db6:	4642      	mov	r2, r8
  420db8:	2300      	movs	r3, #0
  420dba:	4847      	ldr	r0, [pc, #284]	; (420ed8 <lv_chart_set_point_count+0x130>)
  420dbc:	4947      	ldr	r1, [pc, #284]	; (420edc <lv_chart_set_point_count+0x134>)
  420dbe:	4788      	blx	r1
  420dc0:	e7fe      	b.n	420dc0 <lv_chart_set_point_count+0x18>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  420dc2:	4640      	mov	r0, r8
  420dc4:	4b46      	ldr	r3, [pc, #280]	; (420ee0 <lv_chart_set_point_count+0x138>)
  420dc6:	4798      	blx	r3
  420dc8:	4607      	mov	r7, r0
    if(ext->point_cnt == point_cnt) return;
  420dca:	8c46      	ldrh	r6, [r0, #34]	; 0x22
  420dcc:	42ae      	cmp	r6, r5
  420dce:	d07e      	beq.n	420ece <lv_chart_set_point_count+0x126>
    if(point_cnt < 1) point_cnt = 1;
  420dd0:	b905      	cbnz	r5, 420dd4 <lv_chart_set_point_count+0x2c>
  420dd2:	2501      	movs	r5, #1
    _LV_LL_READ_BACK(ext->series_ll, ser) {
  420dd4:	46b9      	mov	r9, r7
  420dd6:	4638      	mov	r0, r7
  420dd8:	4b42      	ldr	r3, [pc, #264]	; (420ee4 <lv_chart_set_point_count+0x13c>)
  420dda:	4798      	blx	r3
  420ddc:	4604      	mov	r4, r0
  420dde:	e02c      	b.n	420e3a <lv_chart_set_point_count+0x92>
                LV_ASSERT_MEM(new_points);
  420de0:	4652      	mov	r2, sl
  420de2:	2300      	movs	r3, #0
  420de4:	4840      	ldr	r0, [pc, #256]	; (420ee8 <lv_chart_set_point_count+0x140>)
  420de6:	493d      	ldr	r1, [pc, #244]	; (420edc <lv_chart_set_point_count+0x134>)
  420de8:	4788      	blx	r1
  420dea:	e7fe      	b.n	420dea <lv_chart_set_point_count+0x42>
                            ser->points[(i + ser->start_point) % point_cnt_old]; /*Copy old contents to new array*/
  420dec:	6821      	ldr	r1, [r4, #0]
  420dee:	88e2      	ldrh	r2, [r4, #6]
  420df0:	441a      	add	r2, r3
  420df2:	fb92 f0f6 	sdiv	r0, r2, r6
  420df6:	fb06 2210 	mls	r2, r6, r0, r2
  420dfa:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
                        new_points[i] =
  420dfe:	f82a 2013 	strh.w	r2, [sl, r3, lsl #1]
                    for(i = 0; i < point_cnt_old; i++) {
  420e02:	3301      	adds	r3, #1
  420e04:	b29b      	uxth	r3, r3
  420e06:	42b3      	cmp	r3, r6
  420e08:	d3f0      	bcc.n	420dec <lv_chart_set_point_count+0x44>
  420e0a:	4633      	mov	r3, r6
  420e0c:	e007      	b.n	420e1e <lv_chart_set_point_count+0x76>
  420e0e:	2300      	movs	r3, #0
  420e10:	e7f9      	b.n	420e06 <lv_chart_set_point_count+0x5e>
                        new_points[i] = def; /*Fill up the rest with default value*/
  420e12:	f248 32e8 	movw	r2, #33768	; 0x83e8
  420e16:	f82a 2013 	strh.w	r2, [sl, r3, lsl #1]
                    for(i = point_cnt_old; i < point_cnt; i++) {
  420e1a:	3301      	adds	r3, #1
  420e1c:	b29b      	uxth	r3, r3
  420e1e:	429d      	cmp	r5, r3
  420e20:	d8f7      	bhi.n	420e12 <lv_chart_set_point_count+0x6a>
                lv_mem_free(ser->points);
  420e22:	6820      	ldr	r0, [r4, #0]
  420e24:	4b31      	ldr	r3, [pc, #196]	; (420eec <lv_chart_set_point_count+0x144>)
  420e26:	4798      	blx	r3
                ser->points = new_points;
  420e28:	f8c4 a000 	str.w	sl, [r4]
        ser->start_point = 0;
  420e2c:	2300      	movs	r3, #0
  420e2e:	80e3      	strh	r3, [r4, #6]
    _LV_LL_READ_BACK(ext->series_ll, ser) {
  420e30:	4621      	mov	r1, r4
  420e32:	4648      	mov	r0, r9
  420e34:	4b2e      	ldr	r3, [pc, #184]	; (420ef0 <lv_chart_set_point_count+0x148>)
  420e36:	4798      	blx	r3
  420e38:	4604      	mov	r4, r0
  420e3a:	2c00      	cmp	r4, #0
  420e3c:	d043      	beq.n	420ec6 <lv_chart_set_point_count+0x11e>
        if(!ser->ext_buf_assigned) {
  420e3e:	7a23      	ldrb	r3, [r4, #8]
  420e40:	f013 0f01 	tst.w	r3, #1
  420e44:	d1f2      	bne.n	420e2c <lv_chart_set_point_count+0x84>
            if(ser->start_point != 0) {
  420e46:	88e3      	ldrh	r3, [r4, #6]
  420e48:	b1f3      	cbz	r3, 420e88 <lv_chart_set_point_count+0xe0>
                lv_coord_t * new_points = lv_mem_alloc(sizeof(lv_coord_t) * point_cnt);
  420e4a:	0068      	lsls	r0, r5, #1
  420e4c:	4b29      	ldr	r3, [pc, #164]	; (420ef4 <lv_chart_set_point_count+0x14c>)
  420e4e:	4798      	blx	r3
  420e50:	4682      	mov	sl, r0
                LV_ASSERT_MEM(new_points);
  420e52:	4b20      	ldr	r3, [pc, #128]	; (420ed4 <lv_chart_set_point_count+0x12c>)
  420e54:	4798      	blx	r3
  420e56:	2800      	cmp	r0, #0
  420e58:	d0c2      	beq.n	420de0 <lv_chart_set_point_count+0x38>
                if(new_points == NULL) return;
  420e5a:	f1ba 0f00 	cmp.w	sl, #0
  420e5e:	d036      	beq.n	420ece <lv_chart_set_point_count+0x126>
                if(point_cnt >= point_cnt_old) {
  420e60:	42b5      	cmp	r5, r6
  420e62:	d2d4      	bcs.n	420e0e <lv_chart_set_point_count+0x66>
  420e64:	2300      	movs	r3, #0
  420e66:	e00c      	b.n	420e82 <lv_chart_set_point_count+0xda>
                            ser->points[(i + ser->start_point) % point_cnt_old]; /*Copy old contents to new array*/
  420e68:	6821      	ldr	r1, [r4, #0]
  420e6a:	88e2      	ldrh	r2, [r4, #6]
  420e6c:	441a      	add	r2, r3
  420e6e:	fb92 f0f6 	sdiv	r0, r2, r6
  420e72:	fb06 2210 	mls	r2, r6, r0, r2
  420e76:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
                        new_points[i] =
  420e7a:	f82a 2013 	strh.w	r2, [sl, r3, lsl #1]
                    for(i = 0; i < point_cnt; i++) {
  420e7e:	3301      	adds	r3, #1
  420e80:	b29b      	uxth	r3, r3
  420e82:	429d      	cmp	r5, r3
  420e84:	d8f0      	bhi.n	420e68 <lv_chart_set_point_count+0xc0>
  420e86:	e7cc      	b.n	420e22 <lv_chart_set_point_count+0x7a>
                ser->points = lv_mem_realloc(ser->points, sizeof(lv_coord_t) * point_cnt);
  420e88:	0069      	lsls	r1, r5, #1
  420e8a:	6820      	ldr	r0, [r4, #0]
  420e8c:	4b1a      	ldr	r3, [pc, #104]	; (420ef8 <lv_chart_set_point_count+0x150>)
  420e8e:	4798      	blx	r3
  420e90:	6020      	str	r0, [r4, #0]
                LV_ASSERT_MEM(ser->points);
  420e92:	4b10      	ldr	r3, [pc, #64]	; (420ed4 <lv_chart_set_point_count+0x12c>)
  420e94:	4798      	blx	r3
  420e96:	b130      	cbz	r0, 420ea6 <lv_chart_set_point_count+0xfe>
                if(ser->points == NULL) return;
  420e98:	6823      	ldr	r3, [r4, #0]
  420e9a:	b1c3      	cbz	r3, 420ece <lv_chart_set_point_count+0x126>
                if(point_cnt > point_cnt_old) {
  420e9c:	42b5      	cmp	r5, r6
  420e9e:	d9c5      	bls.n	420e2c <lv_chart_set_point_count+0x84>
                    for(i = point_cnt_old - 1; i < point_cnt; i++) {
  420ea0:	1e73      	subs	r3, r6, #1
  420ea2:	b29b      	uxth	r3, r3
  420ea4:	e00c      	b.n	420ec0 <lv_chart_set_point_count+0x118>
                LV_ASSERT_MEM(ser->points);
  420ea6:	6822      	ldr	r2, [r4, #0]
  420ea8:	2300      	movs	r3, #0
  420eaa:	480f      	ldr	r0, [pc, #60]	; (420ee8 <lv_chart_set_point_count+0x140>)
  420eac:	490b      	ldr	r1, [pc, #44]	; (420edc <lv_chart_set_point_count+0x134>)
  420eae:	4788      	blx	r1
  420eb0:	e7fe      	b.n	420eb0 <lv_chart_set_point_count+0x108>
                        ser->points[i] = def;
  420eb2:	6822      	ldr	r2, [r4, #0]
  420eb4:	f248 31e8 	movw	r1, #33768	; 0x83e8
  420eb8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                    for(i = point_cnt_old - 1; i < point_cnt; i++) {
  420ebc:	3301      	adds	r3, #1
  420ebe:	b29b      	uxth	r3, r3
  420ec0:	429d      	cmp	r5, r3
  420ec2:	d8f6      	bhi.n	420eb2 <lv_chart_set_point_count+0x10a>
  420ec4:	e7b2      	b.n	420e2c <lv_chart_set_point_count+0x84>
    ext->point_cnt = point_cnt;
  420ec6:	847d      	strh	r5, [r7, #34]	; 0x22
    lv_chart_refresh(chart);
  420ec8:	4640      	mov	r0, r8
  420eca:	4b0c      	ldr	r3, [pc, #48]	; (420efc <lv_chart_set_point_count+0x154>)
  420ecc:	4798      	blx	r3
  420ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  420ed2:	bf00      	nop
  420ed4:	00415f95 	.word	0x00415f95
  420ed8:	0042c728 	.word	0x0042c728
  420edc:	00415fa1 	.word	0x00415fa1
  420ee0:	00408115 	.word	0x00408115
  420ee4:	004162af 	.word	0x004162af
  420ee8:	0042c714 	.word	0x0042c714
  420eec:	0041679d 	.word	0x0041679d
  420ef0:	004162c7 	.word	0x004162c7
  420ef4:	004166d9 	.word	0x004166d9
  420ef8:	00416a09 	.word	0x00416a09
  420efc:	00420cb9 	.word	0x00420cb9

00420f00 <lv_chart_set_next>:
{
  420f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  420f02:	4606      	mov	r6, r0
  420f04:	460c      	mov	r4, r1
  420f06:	4617      	mov	r7, r2
    LV_ASSERT_OBJ(chart, LV_OBJX_NAME);
  420f08:	4b25      	ldr	r3, [pc, #148]	; (420fa0 <lv_chart_set_next+0xa0>)
  420f0a:	4798      	blx	r3
  420f0c:	b928      	cbnz	r0, 420f1a <lv_chart_set_next+0x1a>
  420f0e:	4632      	mov	r2, r6
  420f10:	2300      	movs	r3, #0
  420f12:	4824      	ldr	r0, [pc, #144]	; (420fa4 <lv_chart_set_next+0xa4>)
  420f14:	4924      	ldr	r1, [pc, #144]	; (420fa8 <lv_chart_set_next+0xa8>)
  420f16:	4788      	blx	r1
  420f18:	e7fe      	b.n	420f18 <lv_chart_set_next+0x18>
    LV_ASSERT_NULL(ser);
  420f1a:	4620      	mov	r0, r4
  420f1c:	4b20      	ldr	r3, [pc, #128]	; (420fa0 <lv_chart_set_next+0xa0>)
  420f1e:	4798      	blx	r3
  420f20:	b928      	cbnz	r0, 420f2e <lv_chart_set_next+0x2e>
  420f22:	4622      	mov	r2, r4
  420f24:	2300      	movs	r3, #0
  420f26:	481f      	ldr	r0, [pc, #124]	; (420fa4 <lv_chart_set_next+0xa4>)
  420f28:	491f      	ldr	r1, [pc, #124]	; (420fa8 <lv_chart_set_next+0xa8>)
  420f2a:	4788      	blx	r1
  420f2c:	e7fe      	b.n	420f2c <lv_chart_set_next+0x2c>
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
  420f2e:	4630      	mov	r0, r6
  420f30:	4b1e      	ldr	r3, [pc, #120]	; (420fac <lv_chart_set_next+0xac>)
  420f32:	4798      	blx	r3
  420f34:	4605      	mov	r5, r0
    if(ext->update_mode == LV_CHART_UPDATE_MODE_SHIFT) {
  420f36:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  420f3a:	f013 0f01 	tst.w	r3, #1
  420f3e:	d10f      	bne.n	420f60 <lv_chart_set_next+0x60>
        ser->points[ser->start_point] =
  420f40:	6823      	ldr	r3, [r4, #0]
  420f42:	88e2      	ldrh	r2, [r4, #6]
  420f44:	f823 7012 	strh.w	r7, [r3, r2, lsl #1]
        ser->start_point = (ser->start_point + 1) % ext->point_cnt;
  420f48:	88e3      	ldrh	r3, [r4, #6]
  420f4a:	3301      	adds	r3, #1
  420f4c:	8c41      	ldrh	r1, [r0, #34]	; 0x22
  420f4e:	fb93 f2f1 	sdiv	r2, r3, r1
  420f52:	fb01 3312 	mls	r3, r1, r2, r3
  420f56:	80e3      	strh	r3, [r4, #6]
        lv_chart_refresh(chart);
  420f58:	4630      	mov	r0, r6
  420f5a:	4b15      	ldr	r3, [pc, #84]	; (420fb0 <lv_chart_set_next+0xb0>)
  420f5c:	4798      	blx	r3
  420f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ser->points[ser->start_point] = y;
  420f60:	6823      	ldr	r3, [r4, #0]
  420f62:	88e2      	ldrh	r2, [r4, #6]
  420f64:	f823 7012 	strh.w	r7, [r3, r2, lsl #1]
        if(ext->type & LV_CHART_TYPE_LINE) invalidate_lines(chart, ser->start_point);
  420f68:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  420f6c:	f013 0f01 	tst.w	r3, #1
  420f70:	d003      	beq.n	420f7a <lv_chart_set_next+0x7a>
  420f72:	88e1      	ldrh	r1, [r4, #6]
  420f74:	4630      	mov	r0, r6
  420f76:	4b0f      	ldr	r3, [pc, #60]	; (420fb4 <lv_chart_set_next+0xb4>)
  420f78:	4798      	blx	r3
        if(ext->type & LV_CHART_TYPE_COLUMN) invalidate_columns(chart, ser->start_point);
  420f7a:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
  420f7e:	f013 0f02 	tst.w	r3, #2
  420f82:	d003      	beq.n	420f8c <lv_chart_set_next+0x8c>
  420f84:	88e1      	ldrh	r1, [r4, #6]
  420f86:	4630      	mov	r0, r6
  420f88:	4b0b      	ldr	r3, [pc, #44]	; (420fb8 <lv_chart_set_next+0xb8>)
  420f8a:	4798      	blx	r3
        ser->start_point = (ser->start_point + 1) % ext->point_cnt; /*update the x for next incoming y*/
  420f8c:	88e3      	ldrh	r3, [r4, #6]
  420f8e:	3301      	adds	r3, #1
  420f90:	8c69      	ldrh	r1, [r5, #34]	; 0x22
  420f92:	fb93 f2f1 	sdiv	r2, r3, r1
  420f96:	fb01 3312 	mls	r3, r1, r2, r3
  420f9a:	80e3      	strh	r3, [r4, #6]
  420f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  420f9e:	bf00      	nop
  420fa0:	00415f95 	.word	0x00415f95
  420fa4:	0042c728 	.word	0x0042c728
  420fa8:	00415fa1 	.word	0x00415fa1
  420fac:	00408115 	.word	0x00408115
  420fb0:	00420cb9 	.word	0x00420cb9
  420fb4:	00420b1d 	.word	0x00420b1d
  420fb8:	00420c29 	.word	0x00420c29

00420fbc <lv_cont_get_style>:
}

static lv_style_list_t * lv_cont_get_style(lv_obj_t * cont, uint8_t type)
{
    lv_style_list_t * style_dsc_p;
    switch(type) {
  420fbc:	b909      	cbnz	r1, 420fc2 <lv_cont_get_style+0x6>
        case LV_CONT_PART_MAIN:
            style_dsc_p = &cont->style_list;
  420fbe:	3028      	adds	r0, #40	; 0x28
            break;
  420fc0:	4770      	bx	lr
        default:
            style_dsc_p = NULL;
  420fc2:	2000      	movs	r0, #0
    }

    return style_dsc_p;
}
  420fc4:	4770      	bx	lr
	...

00420fc8 <lv_cont_layout_center>:
/**
 * Handle the center layout
 * @param cont pointer to an object which layout should be handled
 */
static void lv_cont_layout_center(lv_obj_t * cont)
{
  420fc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  420fcc:	b083      	sub	sp, #12
  420fce:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  420fd0:	2214      	movs	r2, #20
  420fd2:	2100      	movs	r1, #0
  420fd4:	4b3c      	ldr	r3, [pc, #240]	; (4210c8 <lv_cont_layout_center+0x100>)
  420fd6:	4798      	blx	r3
  420fd8:	4607      	mov	r7, r0
    lv_obj_t * child;
    uint32_t obj_num         = 0;
    lv_coord_t h_tot         = 0;

    lv_coord_t inner = lv_obj_get_style_pad_inner(cont, LV_CONT_PART_MAIN);
    _LV_LL_READ(cont->child_ll, child) {
  420fda:	1d35      	adds	r5, r6, #4
  420fdc:	4628      	mov	r0, r5
  420fde:	4b3b      	ldr	r3, [pc, #236]	; (4210cc <lv_cont_layout_center+0x104>)
  420fe0:	4798      	blx	r3
  420fe2:	4604      	mov	r4, r0
    lv_coord_t h_tot         = 0;
  420fe4:	f04f 0800 	mov.w	r8, #0
    uint32_t obj_num         = 0;
  420fe8:	46c1      	mov	r9, r8
    _LV_LL_READ(cont->child_ll, child) {
  420fea:	e004      	b.n	420ff6 <lv_cont_layout_center+0x2e>
  420fec:	4621      	mov	r1, r4
  420fee:	4628      	mov	r0, r5
  420ff0:	4b37      	ldr	r3, [pc, #220]	; (4210d0 <lv_cont_layout_center+0x108>)
  420ff2:	4798      	blx	r3
  420ff4:	4604      	mov	r4, r0
  420ff6:	b1a4      	cbz	r4, 421022 <lv_cont_layout_center+0x5a>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
  420ff8:	4620      	mov	r0, r4
  420ffa:	4b36      	ldr	r3, [pc, #216]	; (4210d4 <lv_cont_layout_center+0x10c>)
  420ffc:	4798      	blx	r3
  420ffe:	2800      	cmp	r0, #0
  421000:	d1f4      	bne.n	420fec <lv_cont_layout_center+0x24>
  421002:	2104      	movs	r1, #4
  421004:	4620      	mov	r0, r4
  421006:	4b34      	ldr	r3, [pc, #208]	; (4210d8 <lv_cont_layout_center+0x110>)
  421008:	4798      	blx	r3
  42100a:	2800      	cmp	r0, #0
  42100c:	d1ee      	bne.n	420fec <lv_cont_layout_center+0x24>
        h_tot += lv_obj_get_height(child) + inner;
  42100e:	4620      	mov	r0, r4
  421010:	4b32      	ldr	r3, [pc, #200]	; (4210dc <lv_cont_layout_center+0x114>)
  421012:	4798      	blx	r3
  421014:	4438      	add	r0, r7
  421016:	4480      	add	r8, r0
  421018:	fa0f f888 	sxth.w	r8, r8
        obj_num++;
  42101c:	f109 0901 	add.w	r9, r9, #1
  421020:	e7e4      	b.n	420fec <lv_cont_layout_center+0x24>
    }

    if(obj_num == 0) return;
  421022:	f1b9 0f00 	cmp.w	r9, #0
  421026:	d102      	bne.n	42102e <lv_cont_layout_center+0x66>
        lv_obj_align(child, cont, LV_ALIGN_CENTER, 0, last_cord + lv_obj_get_height(child) / 2);
        last_cord += lv_obj_get_height(child) + inner;
    }

    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
}
  421028:	b003      	add	sp, #12
  42102a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    h_tot -= inner;
  42102e:	eba8 0807 	sub.w	r8, r8, r7
  421032:	fa0f f888 	sxth.w	r8, r8
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
  421036:	2101      	movs	r1, #1
  421038:	4630      	mov	r0, r6
  42103a:	4b29      	ldr	r3, [pc, #164]	; (4210e0 <lv_cont_layout_center+0x118>)
  42103c:	4798      	blx	r3
    lv_coord_t last_cord = -(h_tot / 2);
  42103e:	4643      	mov	r3, r8
  421040:	f1b8 0f00 	cmp.w	r8, #0
  421044:	db0a      	blt.n	42105c <lv_cont_layout_center+0x94>
  421046:	ea4f 0863 	mov.w	r8, r3, asr #1
  42104a:	f1c8 0800 	rsb	r8, r8, #0
  42104e:	fa0f f888 	sxth.w	r8, r8
    _LV_LL_READ_BACK(cont->child_ll, child) {
  421052:	4628      	mov	r0, r5
  421054:	4b23      	ldr	r3, [pc, #140]	; (4210e4 <lv_cont_layout_center+0x11c>)
  421056:	4798      	blx	r3
  421058:	4604      	mov	r4, r0
  42105a:	e019      	b.n	421090 <lv_cont_layout_center+0xc8>
    lv_coord_t last_cord = -(h_tot / 2);
  42105c:	f108 0301 	add.w	r3, r8, #1
  421060:	e7f1      	b.n	421046 <lv_cont_layout_center+0x7e>
        lv_obj_align(child, cont, LV_ALIGN_CENTER, 0, last_cord + lv_obj_get_height(child) / 2);
  421062:	eb08 0363 	add.w	r3, r8, r3, asr #1
  421066:	b21b      	sxth	r3, r3
  421068:	9300      	str	r3, [sp, #0]
  42106a:	2300      	movs	r3, #0
  42106c:	461a      	mov	r2, r3
  42106e:	4631      	mov	r1, r6
  421070:	4620      	mov	r0, r4
  421072:	f8df 907c 	ldr.w	r9, [pc, #124]	; 4210f0 <lv_cont_layout_center+0x128>
  421076:	47c8      	blx	r9
        last_cord += lv_obj_get_height(child) + inner;
  421078:	4620      	mov	r0, r4
  42107a:	4b18      	ldr	r3, [pc, #96]	; (4210dc <lv_cont_layout_center+0x114>)
  42107c:	4798      	blx	r3
  42107e:	4438      	add	r0, r7
  421080:	4480      	add	r8, r0
  421082:	fa0f f888 	sxth.w	r8, r8
    _LV_LL_READ_BACK(cont->child_ll, child) {
  421086:	4621      	mov	r1, r4
  421088:	4628      	mov	r0, r5
  42108a:	4b17      	ldr	r3, [pc, #92]	; (4210e8 <lv_cont_layout_center+0x120>)
  42108c:	4798      	blx	r3
  42108e:	4604      	mov	r4, r0
  421090:	b1a4      	cbz	r4, 4210bc <lv_cont_layout_center+0xf4>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
  421092:	4620      	mov	r0, r4
  421094:	4b0f      	ldr	r3, [pc, #60]	; (4210d4 <lv_cont_layout_center+0x10c>)
  421096:	4798      	blx	r3
  421098:	2800      	cmp	r0, #0
  42109a:	d1f4      	bne.n	421086 <lv_cont_layout_center+0xbe>
  42109c:	2104      	movs	r1, #4
  42109e:	4620      	mov	r0, r4
  4210a0:	4b0d      	ldr	r3, [pc, #52]	; (4210d8 <lv_cont_layout_center+0x110>)
  4210a2:	4798      	blx	r3
  4210a4:	2800      	cmp	r0, #0
  4210a6:	d1ee      	bne.n	421086 <lv_cont_layout_center+0xbe>
        lv_obj_align(child, cont, LV_ALIGN_CENTER, 0, last_cord + lv_obj_get_height(child) / 2);
  4210a8:	4620      	mov	r0, r4
  4210aa:	4b0c      	ldr	r3, [pc, #48]	; (4210dc <lv_cont_layout_center+0x114>)
  4210ac:	4798      	blx	r3
  4210ae:	fa1f f888 	uxth.w	r8, r8
  4210b2:	4603      	mov	r3, r0
  4210b4:	2800      	cmp	r0, #0
  4210b6:	dad4      	bge.n	421062 <lv_cont_layout_center+0x9a>
  4210b8:	1c43      	adds	r3, r0, #1
  4210ba:	e7d2      	b.n	421062 <lv_cont_layout_center+0x9a>
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
  4210bc:	2101      	movs	r1, #1
  4210be:	4630      	mov	r0, r6
  4210c0:	4b0a      	ldr	r3, [pc, #40]	; (4210ec <lv_cont_layout_center+0x124>)
  4210c2:	4798      	blx	r3
  4210c4:	e7b0      	b.n	421028 <lv_cont_layout_center+0x60>
  4210c6:	bf00      	nop
  4210c8:	00407485 	.word	0x00407485
  4210cc:	004162a5 	.word	0x004162a5
  4210d0:	004162b9 	.word	0x004162b9
  4210d4:	00405e09 	.word	0x00405e09
  4210d8:	00406ded 	.word	0x00406ded
  4210dc:	00405bf1 	.word	0x00405bf1
  4210e0:	00405785 	.word	0x00405785
  4210e4:	004162af 	.word	0x004162af
  4210e8:	004162c7 	.word	0x004162c7
  4210ec:	004057b5 	.word	0x004057b5
  4210f0:	00406241 	.word	0x00406241

004210f4 <lv_cont_layout_grid>:
/**
 * Handle the grid layout. Align same-sized objects in a grid
 * @param cont pointer to an object which layout should be handled
 */
static void lv_cont_layout_grid(lv_obj_t * cont)
{
  4210f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4210f8:	b083      	sub	sp, #12
  4210fa:	4680      	mov	r8, r0
    lv_coord_t w_fit         =  lv_obj_get_width_fit(cont);
  4210fc:	4b2d      	ldr	r3, [pc, #180]	; (4211b4 <lv_cont_layout_grid+0xc0>)
  4210fe:	4798      	blx	r3
  421100:	9000      	str	r0, [sp, #0]
  421102:	2214      	movs	r2, #20
  421104:	2100      	movs	r1, #0
  421106:	4640      	mov	r0, r8
  421108:	4c2b      	ldr	r4, [pc, #172]	; (4211b8 <lv_cont_layout_grid+0xc4>)
  42110a:	47a0      	blx	r4
  42110c:	4681      	mov	r9, r0
    lv_coord_t inner = lv_obj_get_style_pad_inner(cont, LV_CONT_PART_MAIN);
    lv_coord_t y_ofs = inner + lv_obj_get_height(lv_obj_get_child(cont, NULL));
  42110e:	2100      	movs	r1, #0
  421110:	4640      	mov	r0, r8
  421112:	4b2a      	ldr	r3, [pc, #168]	; (4211bc <lv_cont_layout_grid+0xc8>)
  421114:	4798      	blx	r3
  421116:	4b2a      	ldr	r3, [pc, #168]	; (4211c0 <lv_cont_layout_grid+0xcc>)
  421118:	4798      	blx	r3
  42111a:	fa1f f989 	uxth.w	r9, r9
  42111e:	fa19 f080 	uxtah	r0, r9, r0
  421122:	fa1f fb80 	uxth.w	fp, r0

    /* Disable child change action because the children will be moved a lot
     * an unnecessary child change signals could be sent*/
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
  421126:	2101      	movs	r1, #1
  421128:	4640      	mov	r0, r8
  42112a:	4b26      	ldr	r3, [pc, #152]	; (4211c4 <lv_cont_layout_grid+0xd0>)
  42112c:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  42112e:	2212      	movs	r2, #18
  421130:	2100      	movs	r1, #0
  421132:	4640      	mov	r0, r8
  421134:	47a0      	blx	r4
  421136:	4606      	mov	r6, r0
  421138:	9001      	str	r0, [sp, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  42113a:	2210      	movs	r2, #16
  42113c:	2100      	movs	r1, #0
  42113e:	4640      	mov	r0, r8
  421140:	47a0      	blx	r4
  421142:	4682      	mov	sl, r0
    /* Align the children */
    lv_coord_t left = lv_obj_get_style_pad_left(cont, LV_CONT_PART_MAIN);
    lv_coord_t act_x = left;
    lv_coord_t act_y = lv_obj_get_style_pad_top(cont, LV_CONT_PART_MAIN);
    lv_obj_t * child;
    _LV_LL_READ_BACK(cont->child_ll, child) {
  421144:	f108 0504 	add.w	r5, r8, #4
  421148:	4628      	mov	r0, r5
  42114a:	4b1f      	ldr	r3, [pc, #124]	; (4211c8 <lv_cont_layout_grid+0xd4>)
  42114c:	4798      	blx	r3
  42114e:	4604      	mov	r4, r0
  421150:	e00d      	b.n	42116e <lv_cont_layout_grid+0x7a>
        if(act_x + obj_w > w_fit + left) {
            act_x = left;
            act_y += y_ofs;
        }

        lv_obj_set_pos(child, act_x, act_y);
  421152:	4652      	mov	r2, sl
  421154:	4631      	mov	r1, r6
  421156:	4620      	mov	r0, r4
  421158:	4b1c      	ldr	r3, [pc, #112]	; (4211cc <lv_cont_layout_grid+0xd8>)
  42115a:	4798      	blx	r3
        act_x += inner + obj_w;
  42115c:	444f      	add	r7, r9
  42115e:	fa16 f687 	uxtah	r6, r6, r7
  421162:	b236      	sxth	r6, r6
    _LV_LL_READ_BACK(cont->child_ll, child) {
  421164:	4621      	mov	r1, r4
  421166:	4628      	mov	r0, r5
  421168:	4b19      	ldr	r3, [pc, #100]	; (4211d0 <lv_cont_layout_grid+0xdc>)
  42116a:	4798      	blx	r3
  42116c:	4604      	mov	r4, r0
  42116e:	b1cc      	cbz	r4, 4211a4 <lv_cont_layout_grid+0xb0>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
  421170:	4620      	mov	r0, r4
  421172:	4b18      	ldr	r3, [pc, #96]	; (4211d4 <lv_cont_layout_grid+0xe0>)
  421174:	4798      	blx	r3
  421176:	2800      	cmp	r0, #0
  421178:	d1f4      	bne.n	421164 <lv_cont_layout_grid+0x70>
  42117a:	2104      	movs	r1, #4
  42117c:	4620      	mov	r0, r4
  42117e:	4b16      	ldr	r3, [pc, #88]	; (4211d8 <lv_cont_layout_grid+0xe4>)
  421180:	4798      	blx	r3
  421182:	2800      	cmp	r0, #0
  421184:	d1ee      	bne.n	421164 <lv_cont_layout_grid+0x70>
        lv_coord_t obj_w = lv_obj_get_width(child);
  421186:	4620      	mov	r0, r4
  421188:	4b14      	ldr	r3, [pc, #80]	; (4211dc <lv_cont_layout_grid+0xe8>)
  42118a:	4798      	blx	r3
  42118c:	4607      	mov	r7, r0
        if(act_x + obj_w > w_fit + left) {
  42118e:	1832      	adds	r2, r6, r0
  421190:	9800      	ldr	r0, [sp, #0]
  421192:	9901      	ldr	r1, [sp, #4]
  421194:	1843      	adds	r3, r0, r1
  421196:	429a      	cmp	r2, r3
  421198:	dddb      	ble.n	421152 <lv_cont_layout_grid+0x5e>
            act_y += y_ofs;
  42119a:	44da      	add	sl, fp
  42119c:	fa0f fa8a 	sxth.w	sl, sl
            act_x = left;
  4211a0:	460e      	mov	r6, r1
  4211a2:	e7d6      	b.n	421152 <lv_cont_layout_grid+0x5e>
    }

    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
  4211a4:	2101      	movs	r1, #1
  4211a6:	4640      	mov	r0, r8
  4211a8:	4b0d      	ldr	r3, [pc, #52]	; (4211e0 <lv_cont_layout_grid+0xec>)
  4211aa:	4798      	blx	r3
}
  4211ac:	b003      	add	sp, #12
  4211ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4211b2:	bf00      	nop
  4211b4:	004076c1 	.word	0x004076c1
  4211b8:	00407485 	.word	0x00407485
  4211bc:	00405ac1 	.word	0x00405ac1
  4211c0:	00405bf1 	.word	0x00405bf1
  4211c4:	00405785 	.word	0x00405785
  4211c8:	004162af 	.word	0x004162af
  4211cc:	0040607d 	.word	0x0040607d
  4211d0:	004162c7 	.word	0x004162c7
  4211d4:	00405e09 	.word	0x00405e09
  4211d8:	00406ded 	.word	0x00406ded
  4211dc:	00405bc1 	.word	0x00405bc1
  4211e0:	004057b5 	.word	0x004057b5

004211e4 <lv_cont_refr_autofit>:
/**
 * Handle auto fit. Set the size of the object to involve all children.
 * @param cont pointer to an object which size will be modified
 */
static void lv_cont_refr_autofit(lv_obj_t * cont)
{
  4211e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4211e8:	b089      	sub	sp, #36	; 0x24
  4211ea:	4604      	mov	r4, r0
    if(lv_obj_is_protected(cont, LV_PROTECT_CHILD_CHG)) return;
  4211ec:	2101      	movs	r1, #1
  4211ee:	4bc2      	ldr	r3, [pc, #776]	; (4214f8 <lv_cont_refr_autofit+0x314>)
  4211f0:	4798      	blx	r3
  4211f2:	b110      	cbz	r0, 4211fa <lv_cont_refr_autofit+0x16>
    else {
        LV_LOG_ERROR("LV_LAYOUT_MAX_RECURSION reached! You may have encountered issue #1539.");
    }

    recursion_level--;
}
  4211f4:	b009      	add	sp, #36	; 0x24
  4211f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
  4211fa:	4620      	mov	r0, r4
  4211fc:	4bbf      	ldr	r3, [pc, #764]	; (4214fc <lv_cont_refr_autofit+0x318>)
  4211fe:	4798      	blx	r3
  421200:	4605      	mov	r5, r0
    if(ext->fit_left == LV_FIT_NONE && ext->fit_right == LV_FIT_NONE && ext->fit_top == LV_FIT_NONE &&
  421202:	7803      	ldrb	r3, [r0, #0]
  421204:	f013 0ff0 	tst.w	r3, #240	; 0xf0
  421208:	d103      	bne.n	421212 <lv_cont_refr_autofit+0x2e>
  42120a:	7843      	ldrb	r3, [r0, #1]
  42120c:	f013 0f0f 	tst.w	r3, #15
  421210:	d0f0      	beq.n	4211f4 <lv_cont_refr_autofit+0x10>
    recursion_level++;
  421212:	4abb      	ldr	r2, [pc, #748]	; (421500 <lv_cont_refr_autofit+0x31c>)
  421214:	6813      	ldr	r3, [r2, #0]
  421216:	3301      	adds	r3, #1
  421218:	6013      	str	r3, [r2, #0]
    if(recursion_level <= LV_LAYOUT_MAX_RECURSION) {
  42121a:	2b0a      	cmp	r3, #10
  42121c:	dd04      	ble.n	421228 <lv_cont_refr_autofit+0x44>
    recursion_level--;
  42121e:	4ab8      	ldr	r2, [pc, #736]	; (421500 <lv_cont_refr_autofit+0x31c>)
  421220:	6813      	ldr	r3, [r2, #0]
  421222:	3b01      	subs	r3, #1
  421224:	6013      	str	r3, [r2, #0]
  421226:	e7e5      	b.n	4211f4 <lv_cont_refr_autofit+0x10>
        lv_obj_t * par               = lv_obj_get_parent(cont);
  421228:	4620      	mov	r0, r4
  42122a:	4bb6      	ldr	r3, [pc, #728]	; (421504 <lv_cont_refr_autofit+0x320>)
  42122c:	4798      	blx	r3
  42122e:	4680      	mov	r8, r0
        lv_area_copy(&parent_area, &par->coords);
  421230:	f100 0110 	add.w	r1, r0, #16
    uint8_t * d8 = (uint8_t *)dst;
  421234:	aa04      	add	r2, sp, #16
  421236:	2308      	movs	r3, #8
  421238:	e004      	b.n	421244 <lv_cont_refr_autofit+0x60>
        *d8 = *s8;
  42123a:	f811 0b01 	ldrb.w	r0, [r1], #1
  42123e:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  421242:	3b01      	subs	r3, #1
    while(len) {
  421244:	2b00      	cmp	r3, #0
  421246:	d1f8      	bne.n	42123a <lv_cont_refr_autofit+0x56>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  421248:	2212      	movs	r2, #18
  42124a:	2100      	movs	r1, #0
  42124c:	4640      	mov	r0, r8
  42124e:	4eae      	ldr	r6, [pc, #696]	; (421508 <lv_cont_refr_autofit+0x324>)
  421250:	47b0      	blx	r6
        parent_area.x1 += lv_obj_get_style_pad_left(par, LV_OBJ_PART_MAIN);
  421252:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  421256:	fa13 f080 	uxtah	r0, r3, r0
  42125a:	f8ad 0010 	strh.w	r0, [sp, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  42125e:	2213      	movs	r2, #19
  421260:	2100      	movs	r1, #0
  421262:	4640      	mov	r0, r8
  421264:	47b0      	blx	r6
        parent_area.x2 -= lv_obj_get_style_pad_right(par, LV_OBJ_PART_MAIN);
  421266:	b280      	uxth	r0, r0
  421268:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  42126c:	1a18      	subs	r0, r3, r0
  42126e:	f8ad 0014 	strh.w	r0, [sp, #20]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  421272:	2210      	movs	r2, #16
  421274:	2100      	movs	r1, #0
  421276:	4640      	mov	r0, r8
  421278:	47b0      	blx	r6
        parent_area.y1 += lv_obj_get_style_pad_top(par, LV_OBJ_PART_MAIN);
  42127a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  42127e:	fa13 f080 	uxtah	r0, r3, r0
  421282:	f8ad 0012 	strh.w	r0, [sp, #18]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  421286:	2211      	movs	r2, #17
  421288:	2100      	movs	r1, #0
  42128a:	4640      	mov	r0, r8
  42128c:	47b0      	blx	r6
        parent_area.y2 -= lv_obj_get_style_pad_bottom(par, LV_OBJ_PART_MAIN);
  42128e:	b280      	uxth	r0, r0
  421290:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  421294:	1a18      	subs	r0, r3, r0
  421296:	f8ad 0016 	strh.w	r0, [sp, #22]
        lv_obj_get_coords(cont, &ori);
  42129a:	a902      	add	r1, sp, #8
  42129c:	4620      	mov	r0, r4
  42129e:	4e9b      	ldr	r6, [pc, #620]	; (42150c <lv_cont_refr_autofit+0x328>)
  4212a0:	47b0      	blx	r6
        lv_obj_get_coords(cont, &tight_area);
  4212a2:	4669      	mov	r1, sp
  4212a4:	4620      	mov	r0, r4
  4212a6:	47b0      	blx	r6
        bool has_children = _lv_ll_is_empty(&cont->child_ll) ? false : true;
  4212a8:	1d26      	adds	r6, r4, #4
  4212aa:	4630      	mov	r0, r6
  4212ac:	4b98      	ldr	r3, [pc, #608]	; (421510 <lv_cont_refr_autofit+0x32c>)
  4212ae:	4798      	blx	r3
  4212b0:	f080 0001 	eor.w	r0, r0, #1
        if(has_children) {
  4212b4:	f010 09ff 	ands.w	r9, r0, #255	; 0xff
  4212b8:	d103      	bne.n	4212c2 <lv_cont_refr_autofit+0xde>
        lv_area_copy(&parent_area, &par->coords);
  4212ba:	a902      	add	r1, sp, #8
  4212bc:	aa06      	add	r2, sp, #24
  4212be:	2308      	movs	r3, #8
  4212c0:	e09c      	b.n	4213fc <lv_cont_refr_autofit+0x218>
            tight_area.x1 = LV_COORD_MAX;
  4212c2:	f647 4318 	movw	r3, #31768	; 0x7c18
  4212c6:	f8ad 3000 	strh.w	r3, [sp]
            tight_area.y1 = LV_COORD_MAX;
  4212ca:	f8ad 3002 	strh.w	r3, [sp, #2]
            tight_area.x2 = LV_COORD_MIN;
  4212ce:	f248 33e8 	movw	r3, #33768	; 0x83e8
  4212d2:	f8ad 3004 	strh.w	r3, [sp, #4]
            tight_area.y2 = LV_COORD_MIN;
  4212d6:	f8ad 3006 	strh.w	r3, [sp, #6]
            _LV_LL_READ(cont->child_ll, child_i) {
  4212da:	4630      	mov	r0, r6
  4212dc:	4b8d      	ldr	r3, [pc, #564]	; (421514 <lv_cont_refr_autofit+0x330>)
  4212de:	4798      	blx	r3
  4212e0:	4607      	mov	r7, r0
  4212e2:	e004      	b.n	4212ee <lv_cont_refr_autofit+0x10a>
  4212e4:	4639      	mov	r1, r7
  4212e6:	4630      	mov	r0, r6
  4212e8:	4b8b      	ldr	r3, [pc, #556]	; (421518 <lv_cont_refr_autofit+0x334>)
  4212ea:	4798      	blx	r3
  4212ec:	4607      	mov	r7, r0
  4212ee:	2f00      	cmp	r7, #0
  4212f0:	d055      	beq.n	42139e <lv_cont_refr_autofit+0x1ba>
                if(lv_obj_get_hidden(child_i) != false) continue;
  4212f2:	4638      	mov	r0, r7
  4212f4:	4b89      	ldr	r3, [pc, #548]	; (42151c <lv_cont_refr_autofit+0x338>)
  4212f6:	4798      	blx	r3
  4212f8:	2800      	cmp	r0, #0
  4212fa:	d1f3      	bne.n	4212e4 <lv_cont_refr_autofit+0x100>
                if(ext->fit_left != LV_FIT_PARENT) {
  4212fc:	782b      	ldrb	r3, [r5, #0]
  4212fe:	f003 0330 	and.w	r3, r3, #48	; 0x30
  421302:	2b20      	cmp	r3, #32
  421304:	d00e      	beq.n	421324 <lv_cont_refr_autofit+0x140>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  421306:	2217      	movs	r2, #23
  421308:	2100      	movs	r1, #0
  42130a:	4638      	mov	r0, r7
  42130c:	4b7e      	ldr	r3, [pc, #504]	; (421508 <lv_cont_refr_autofit+0x324>)
  42130e:	4798      	blx	r3
                    tight_area.x1 = LV_MATH_MIN(tight_area.x1, child_i->coords.x1 - mleft);
  421310:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
  421314:	1a18      	subs	r0, r3, r0
  421316:	f9bd 3000 	ldrsh.w	r3, [sp]
  42131a:	4298      	cmp	r0, r3
  42131c:	bfa8      	it	ge
  42131e:	4618      	movge	r0, r3
  421320:	f8ad 0000 	strh.w	r0, [sp]
                if(ext->fit_right != LV_FIT_PARENT) {
  421324:	782b      	ldrb	r3, [r5, #0]
  421326:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  42132a:	2b80      	cmp	r3, #128	; 0x80
  42132c:	d00e      	beq.n	42134c <lv_cont_refr_autofit+0x168>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
  42132e:	2218      	movs	r2, #24
  421330:	2100      	movs	r1, #0
  421332:	4638      	mov	r0, r7
  421334:	4b74      	ldr	r3, [pc, #464]	; (421508 <lv_cont_refr_autofit+0x324>)
  421336:	4798      	blx	r3
                    tight_area.x2 = LV_MATH_MAX(tight_area.x2, child_i->coords.x2 + mright);
  421338:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
  42133c:	4418      	add	r0, r3
  42133e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
  421342:	4298      	cmp	r0, r3
  421344:	bfb8      	it	lt
  421346:	4618      	movlt	r0, r3
  421348:	f8ad 0004 	strh.w	r0, [sp, #4]
                if(ext->fit_top != LV_FIT_PARENT) {
  42134c:	786b      	ldrb	r3, [r5, #1]
  42134e:	f003 0303 	and.w	r3, r3, #3
  421352:	2b02      	cmp	r3, #2
  421354:	d00e      	beq.n	421374 <lv_cont_refr_autofit+0x190>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  421356:	2215      	movs	r2, #21
  421358:	2100      	movs	r1, #0
  42135a:	4638      	mov	r0, r7
  42135c:	4b6a      	ldr	r3, [pc, #424]	; (421508 <lv_cont_refr_autofit+0x324>)
  42135e:	4798      	blx	r3
                    tight_area.y1 = LV_MATH_MIN(tight_area.y1, child_i->coords.y1 - mtop);
  421360:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
  421364:	1a18      	subs	r0, r3, r0
  421366:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
  42136a:	4298      	cmp	r0, r3
  42136c:	bfa8      	it	ge
  42136e:	4618      	movge	r0, r3
  421370:	f8ad 0002 	strh.w	r0, [sp, #2]
                if(ext->fit_bottom != LV_FIT_PARENT) {
  421374:	786b      	ldrb	r3, [r5, #1]
  421376:	f003 030c 	and.w	r3, r3, #12
  42137a:	2b08      	cmp	r3, #8
  42137c:	d0b2      	beq.n	4212e4 <lv_cont_refr_autofit+0x100>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  42137e:	2216      	movs	r2, #22
  421380:	2100      	movs	r1, #0
  421382:	4638      	mov	r0, r7
  421384:	4b60      	ldr	r3, [pc, #384]	; (421508 <lv_cont_refr_autofit+0x324>)
  421386:	4798      	blx	r3
                    tight_area.y2 = LV_MATH_MAX(tight_area.y2, child_i->coords.y2 + mbottom);
  421388:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
  42138c:	4418      	add	r0, r3
  42138e:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
  421392:	4298      	cmp	r0, r3
  421394:	bfb8      	it	lt
  421396:	4618      	movlt	r0, r3
  421398:	f8ad 0006 	strh.w	r0, [sp, #6]
  42139c:	e7a2      	b.n	4212e4 <lv_cont_refr_autofit+0x100>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  42139e:	2212      	movs	r2, #18
  4213a0:	2100      	movs	r1, #0
  4213a2:	4620      	mov	r0, r4
  4213a4:	4f58      	ldr	r7, [pc, #352]	; (421508 <lv_cont_refr_autofit+0x324>)
  4213a6:	47b8      	blx	r7
            tight_area.x1 -= lv_obj_get_style_pad_left(cont, LV_CONT_PART_MAIN);
  4213a8:	b280      	uxth	r0, r0
  4213aa:	f8bd 3000 	ldrh.w	r3, [sp]
  4213ae:	1a18      	subs	r0, r3, r0
  4213b0:	f8ad 0000 	strh.w	r0, [sp]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  4213b4:	2213      	movs	r2, #19
  4213b6:	2100      	movs	r1, #0
  4213b8:	4620      	mov	r0, r4
  4213ba:	47b8      	blx	r7
            tight_area.x2 += lv_obj_get_style_pad_right(cont, LV_CONT_PART_MAIN);
  4213bc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  4213c0:	fa13 f080 	uxtah	r0, r3, r0
  4213c4:	f8ad 0004 	strh.w	r0, [sp, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  4213c8:	2210      	movs	r2, #16
  4213ca:	2100      	movs	r1, #0
  4213cc:	4620      	mov	r0, r4
  4213ce:	47b8      	blx	r7
            tight_area.y1 -= lv_obj_get_style_pad_top(cont, LV_CONT_PART_MAIN);
  4213d0:	b280      	uxth	r0, r0
  4213d2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
  4213d6:	1a18      	subs	r0, r3, r0
  4213d8:	f8ad 0002 	strh.w	r0, [sp, #2]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  4213dc:	2211      	movs	r2, #17
  4213de:	2100      	movs	r1, #0
  4213e0:	4620      	mov	r0, r4
  4213e2:	47b8      	blx	r7
            tight_area.y2 += lv_obj_get_style_pad_bottom(cont, LV_CONT_PART_MAIN);
  4213e4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4213e8:	fa13 f080 	uxtah	r0, r3, r0
  4213ec:	f8ad 0006 	strh.w	r0, [sp, #6]
  4213f0:	e763      	b.n	4212ba <lv_cont_refr_autofit+0xd6>
        *d8 = *s8;
  4213f2:	f811 0b01 	ldrb.w	r0, [r1], #1
  4213f6:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  4213fa:	3b01      	subs	r3, #1
    while(len) {
  4213fc:	2b00      	cmp	r3, #0
  4213fe:	d1f8      	bne.n	4213f2 <lv_cont_refr_autofit+0x20e>
        switch(ext->fit_left) {
  421400:	782b      	ldrb	r3, [r5, #0]
  421402:	f3c3 1301 	ubfx	r3, r3, #4, #2
  421406:	2b02      	cmp	r3, #2
  421408:	d037      	beq.n	42147a <lv_cont_refr_autofit+0x296>
  42140a:	d83b      	bhi.n	421484 <lv_cont_refr_autofit+0x2a0>
  42140c:	2b01      	cmp	r3, #1
  42140e:	d103      	bne.n	421418 <lv_cont_refr_autofit+0x234>
                new_area.x1 = tight_area.x1;
  421410:	f9bd 3000 	ldrsh.w	r3, [sp]
  421414:	f8ad 3018 	strh.w	r3, [sp, #24]
        switch(ext->fit_right) {
  421418:	782b      	ldrb	r3, [r5, #0]
  42141a:	099b      	lsrs	r3, r3, #6
  42141c:	2b02      	cmp	r3, #2
  42141e:	d041      	beq.n	4214a4 <lv_cont_refr_autofit+0x2c0>
  421420:	d845      	bhi.n	4214ae <lv_cont_refr_autofit+0x2ca>
  421422:	2b01      	cmp	r3, #1
  421424:	d103      	bne.n	42142e <lv_cont_refr_autofit+0x24a>
                new_area.x2 = tight_area.x2;
  421426:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
  42142a:	f8ad 301c 	strh.w	r3, [sp, #28]
        switch(ext->fit_top) {
  42142e:	786b      	ldrb	r3, [r5, #1]
  421430:	f003 0303 	and.w	r3, r3, #3
  421434:	2b02      	cmp	r3, #2
  421436:	d04a      	beq.n	4214ce <lv_cont_refr_autofit+0x2ea>
  421438:	d84e      	bhi.n	4214d8 <lv_cont_refr_autofit+0x2f4>
  42143a:	2b01      	cmp	r3, #1
  42143c:	d103      	bne.n	421446 <lv_cont_refr_autofit+0x262>
                new_area.y1 = tight_area.y1;
  42143e:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
  421442:	f8ad 301a 	strh.w	r3, [sp, #26]
        switch(ext->fit_bottom) {
  421446:	786b      	ldrb	r3, [r5, #1]
  421448:	f3c3 0381 	ubfx	r3, r3, #2, #2
  42144c:	2b02      	cmp	r3, #2
  42144e:	d069      	beq.n	421524 <lv_cont_refr_autofit+0x340>
  421450:	d86d      	bhi.n	42152e <lv_cont_refr_autofit+0x34a>
  421452:	2b01      	cmp	r3, #1
  421454:	d103      	bne.n	42145e <lv_cont_refr_autofit+0x27a>
                new_area.y2 = tight_area.y2;
  421456:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
  42145a:	f8ad 301e 	strh.w	r3, [sp, #30]
        if(cont->coords.x1 != new_area.x1 || cont->coords.y1 != new_area.y1 || cont->coords.x2 != new_area.x2 ||
  42145e:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
  421462:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
  421466:	429a      	cmp	r2, r3
  421468:	d071      	beq.n	42154e <lv_cont_refr_autofit+0x36a>
            lv_obj_invalidate(cont);
  42146a:	4620      	mov	r0, r4
  42146c:	4b2c      	ldr	r3, [pc, #176]	; (421520 <lv_cont_refr_autofit+0x33c>)
  42146e:	4798      	blx	r3
            lv_area_copy(&cont->coords, &new_area);
  421470:	f104 0110 	add.w	r1, r4, #16
    const uint8_t * s8 = (const uint8_t *)src;
  421474:	aa06      	add	r2, sp, #24
  421476:	2308      	movs	r3, #8
  421478:	e082      	b.n	421580 <lv_cont_refr_autofit+0x39c>
                new_area.x1 = parent_area.x1;
  42147a:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
  42147e:	f8ad 3018 	strh.w	r3, [sp, #24]
                break;
  421482:	e7c9      	b.n	421418 <lv_cont_refr_autofit+0x234>
                new_area.x1 = has_children ? LV_MATH_MIN(tight_area.x1, parent_area.x1) : parent_area.x1;
  421484:	f1b9 0f00 	cmp.w	r9, #0
  421488:	d009      	beq.n	42149e <lv_cont_refr_autofit+0x2ba>
  42148a:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
  42148e:	f9bd 2000 	ldrsh.w	r2, [sp]
  421492:	4293      	cmp	r3, r2
  421494:	bfa8      	it	ge
  421496:	4613      	movge	r3, r2
  421498:	f8ad 3018 	strh.w	r3, [sp, #24]
                break;
  42149c:	e7bc      	b.n	421418 <lv_cont_refr_autofit+0x234>
                new_area.x1 = has_children ? LV_MATH_MIN(tight_area.x1, parent_area.x1) : parent_area.x1;
  42149e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
  4214a2:	e7f9      	b.n	421498 <lv_cont_refr_autofit+0x2b4>
                new_area.x2 = parent_area.x2;
  4214a4:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  4214a8:	f8ad 301c 	strh.w	r3, [sp, #28]
                break;
  4214ac:	e7bf      	b.n	42142e <lv_cont_refr_autofit+0x24a>
                new_area.x2 = has_children ? LV_MATH_MAX(tight_area.x2, parent_area.x2) : parent_area.x2;
  4214ae:	f1b9 0f00 	cmp.w	r9, #0
  4214b2:	d009      	beq.n	4214c8 <lv_cont_refr_autofit+0x2e4>
  4214b4:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  4214b8:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
  4214bc:	4293      	cmp	r3, r2
  4214be:	bfb8      	it	lt
  4214c0:	4613      	movlt	r3, r2
  4214c2:	f8ad 301c 	strh.w	r3, [sp, #28]
                break;
  4214c6:	e7b2      	b.n	42142e <lv_cont_refr_autofit+0x24a>
                new_area.x2 = has_children ? LV_MATH_MAX(tight_area.x2, parent_area.x2) : parent_area.x2;
  4214c8:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  4214cc:	e7f9      	b.n	4214c2 <lv_cont_refr_autofit+0x2de>
                new_area.y1 = parent_area.y1;
  4214ce:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
  4214d2:	f8ad 301a 	strh.w	r3, [sp, #26]
                break;
  4214d6:	e7b6      	b.n	421446 <lv_cont_refr_autofit+0x262>
                new_area.y1 = has_children ? LV_MATH_MIN(tight_area.y1, parent_area.y1) : parent_area.y1;
  4214d8:	f1b9 0f00 	cmp.w	r9, #0
  4214dc:	d009      	beq.n	4214f2 <lv_cont_refr_autofit+0x30e>
  4214de:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
  4214e2:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
  4214e6:	4293      	cmp	r3, r2
  4214e8:	bfa8      	it	ge
  4214ea:	4613      	movge	r3, r2
  4214ec:	f8ad 301a 	strh.w	r3, [sp, #26]
                break;
  4214f0:	e7a9      	b.n	421446 <lv_cont_refr_autofit+0x262>
                new_area.y1 = has_children ? LV_MATH_MIN(tight_area.y1, parent_area.y1) : parent_area.y1;
  4214f2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
  4214f6:	e7f9      	b.n	4214ec <lv_cont_refr_autofit+0x308>
  4214f8:	00406ded 	.word	0x00406ded
  4214fc:	00408115 	.word	0x00408115
  421500:	20414880 	.word	0x20414880
  421504:	004059ed 	.word	0x004059ed
  421508:	00407485 	.word	0x00407485
  42150c:	00405b01 	.word	0x00405b01
  421510:	0041654d 	.word	0x0041654d
  421514:	004162a5 	.word	0x004162a5
  421518:	004162b9 	.word	0x004162b9
  42151c:	00405e09 	.word	0x00405e09
  421520:	00405f99 	.word	0x00405f99
                new_area.y2 = parent_area.y2;
  421524:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
  421528:	f8ad 301e 	strh.w	r3, [sp, #30]
                break;
  42152c:	e797      	b.n	42145e <lv_cont_refr_autofit+0x27a>
                new_area.y2 = has_children ? LV_MATH_MAX(tight_area.y2, parent_area.y2) : parent_area.y2;
  42152e:	f1b9 0f00 	cmp.w	r9, #0
  421532:	d009      	beq.n	421548 <lv_cont_refr_autofit+0x364>
  421534:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
  421538:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
  42153c:	4293      	cmp	r3, r2
  42153e:	bfb8      	it	lt
  421540:	4613      	movlt	r3, r2
  421542:	f8ad 301e 	strh.w	r3, [sp, #30]
                break;
  421546:	e78a      	b.n	42145e <lv_cont_refr_autofit+0x27a>
                new_area.y2 = has_children ? LV_MATH_MAX(tight_area.y2, parent_area.y2) : parent_area.y2;
  421548:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
  42154c:	e7f9      	b.n	421542 <lv_cont_refr_autofit+0x35e>
        if(cont->coords.x1 != new_area.x1 || cont->coords.y1 != new_area.y1 || cont->coords.x2 != new_area.x2 ||
  42154e:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
  421552:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
  421556:	429a      	cmp	r2, r3
  421558:	d187      	bne.n	42146a <lv_cont_refr_autofit+0x286>
  42155a:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
  42155e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  421562:	429a      	cmp	r2, r3
  421564:	d181      	bne.n	42146a <lv_cont_refr_autofit+0x286>
           cont->coords.y2 != new_area.y2) {
  421566:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
  42156a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
        if(cont->coords.x1 != new_area.x1 || cont->coords.y1 != new_area.y1 || cont->coords.x2 != new_area.x2 ||
  42156e:	429a      	cmp	r2, r3
  421570:	f47f af7b 	bne.w	42146a <lv_cont_refr_autofit+0x286>
  421574:	e653      	b.n	42121e <lv_cont_refr_autofit+0x3a>
        *d8 = *s8;
  421576:	f812 0b01 	ldrb.w	r0, [r2], #1
  42157a:	f801 0b01 	strb.w	r0, [r1], #1
        len--;
  42157e:	3b01      	subs	r3, #1
    while(len) {
  421580:	2b00      	cmp	r3, #0
  421582:	d1f8      	bne.n	421576 <lv_cont_refr_autofit+0x392>
            lv_obj_invalidate(cont);
  421584:	4620      	mov	r0, r4
  421586:	4b13      	ldr	r3, [pc, #76]	; (4215d4 <lv_cont_refr_autofit+0x3f0>)
  421588:	4798      	blx	r3
            cont->signal_cb(cont, LV_SIGNAL_COORD_CHG, &ori);
  42158a:	69e3      	ldr	r3, [r4, #28]
  42158c:	aa02      	add	r2, sp, #8
  42158e:	2102      	movs	r1, #2
  421590:	4620      	mov	r0, r4
  421592:	4798      	blx	r3
            par->signal_cb(par, LV_SIGNAL_CHILD_CHG, cont);
  421594:	f8d8 301c 	ldr.w	r3, [r8, #28]
  421598:	4622      	mov	r2, r4
  42159a:	2101      	movs	r1, #1
  42159c:	4640      	mov	r0, r8
  42159e:	4798      	blx	r3
            if(lv_obj_get_auto_realign(cont)) {
  4215a0:	4620      	mov	r0, r4
  4215a2:	4b0d      	ldr	r3, [pc, #52]	; (4215d8 <lv_cont_refr_autofit+0x3f4>)
  4215a4:	4798      	blx	r3
  4215a6:	b920      	cbnz	r0, 4215b2 <lv_cont_refr_autofit+0x3ce>
            _LV_LL_READ(cont->child_ll, child_i) {
  4215a8:	4630      	mov	r0, r6
  4215aa:	4b0c      	ldr	r3, [pc, #48]	; (4215dc <lv_cont_refr_autofit+0x3f8>)
  4215ac:	4798      	blx	r3
  4215ae:	4604      	mov	r4, r0
  4215b0:	e00d      	b.n	4215ce <lv_cont_refr_autofit+0x3ea>
                lv_obj_realign(cont);
  4215b2:	4620      	mov	r0, r4
  4215b4:	4b0a      	ldr	r3, [pc, #40]	; (4215e0 <lv_cont_refr_autofit+0x3fc>)
  4215b6:	4798      	blx	r3
  4215b8:	e7f6      	b.n	4215a8 <lv_cont_refr_autofit+0x3c4>
                child_i->signal_cb(child_i, LV_SIGNAL_PARENT_SIZE_CHG, &ori);
  4215ba:	69e3      	ldr	r3, [r4, #28]
  4215bc:	aa02      	add	r2, sp, #8
  4215be:	2103      	movs	r1, #3
  4215c0:	4620      	mov	r0, r4
  4215c2:	4798      	blx	r3
            _LV_LL_READ(cont->child_ll, child_i) {
  4215c4:	4621      	mov	r1, r4
  4215c6:	4630      	mov	r0, r6
  4215c8:	4b06      	ldr	r3, [pc, #24]	; (4215e4 <lv_cont_refr_autofit+0x400>)
  4215ca:	4798      	blx	r3
  4215cc:	4604      	mov	r4, r0
  4215ce:	2c00      	cmp	r4, #0
  4215d0:	d1f3      	bne.n	4215ba <lv_cont_refr_autofit+0x3d6>
  4215d2:	e624      	b.n	42121e <lv_cont_refr_autofit+0x3a>
  4215d4:	00405f99 	.word	0x00405f99
  4215d8:	00405c21 	.word	0x00405c21
  4215dc:	004162a5 	.word	0x004162a5
  4215e0:	004066b5 	.word	0x004066b5
  4215e4:	004162b9 	.word	0x004162b9

004215e8 <lv_cont_create>:
{
  4215e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4215ea:	4607      	mov	r7, r0
  4215ec:	460e      	mov	r6, r1
    lv_obj_t * cont = lv_obj_create(par, copy);
  4215ee:	4b3b      	ldr	r3, [pc, #236]	; (4216dc <lv_cont_create+0xf4>)
  4215f0:	4798      	blx	r3
  4215f2:	4605      	mov	r5, r0
    LV_ASSERT_MEM(cont);
  4215f4:	4b3a      	ldr	r3, [pc, #232]	; (4216e0 <lv_cont_create+0xf8>)
  4215f6:	4798      	blx	r3
  4215f8:	b1c8      	cbz	r0, 42162e <lv_cont_create+0x46>
    if(cont == NULL) return NULL;
  4215fa:	2d00      	cmp	r5, #0
  4215fc:	d065      	beq.n	4216ca <lv_cont_create+0xe2>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(cont);
  4215fe:	4b39      	ldr	r3, [pc, #228]	; (4216e4 <lv_cont_create+0xfc>)
  421600:	681b      	ldr	r3, [r3, #0]
  421602:	b1d3      	cbz	r3, 42163a <lv_cont_create+0x52>
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(cont);
  421604:	4b38      	ldr	r3, [pc, #224]	; (4216e8 <lv_cont_create+0x100>)
  421606:	681b      	ldr	r3, [r3, #0]
  421608:	b1eb      	cbz	r3, 421646 <lv_cont_create+0x5e>
    lv_obj_allocate_ext_attr(cont, sizeof(lv_cont_ext_t));
  42160a:	2102      	movs	r1, #2
  42160c:	4628      	mov	r0, r5
  42160e:	4b37      	ldr	r3, [pc, #220]	; (4216ec <lv_cont_create+0x104>)
  421610:	4798      	blx	r3
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
  421612:	4628      	mov	r0, r5
  421614:	4b36      	ldr	r3, [pc, #216]	; (4216f0 <lv_cont_create+0x108>)
  421616:	4798      	blx	r3
    if(ext == NULL) {
  421618:	4604      	mov	r4, r0
  42161a:	b1d0      	cbz	r0, 421652 <lv_cont_create+0x6a>
    LV_ASSERT_MEM(ext);
  42161c:	4b30      	ldr	r3, [pc, #192]	; (4216e0 <lv_cont_create+0xf8>)
  42161e:	4798      	blx	r3
  421620:	b9e0      	cbnz	r0, 42165c <lv_cont_create+0x74>
  421622:	4622      	mov	r2, r4
  421624:	2300      	movs	r3, #0
  421626:	4833      	ldr	r0, [pc, #204]	; (4216f4 <lv_cont_create+0x10c>)
  421628:	4933      	ldr	r1, [pc, #204]	; (4216f8 <lv_cont_create+0x110>)
  42162a:	4788      	blx	r1
  42162c:	e7fe      	b.n	42162c <lv_cont_create+0x44>
    LV_ASSERT_MEM(cont);
  42162e:	462a      	mov	r2, r5
  421630:	2300      	movs	r3, #0
  421632:	4830      	ldr	r0, [pc, #192]	; (4216f4 <lv_cont_create+0x10c>)
  421634:	4930      	ldr	r1, [pc, #192]	; (4216f8 <lv_cont_create+0x110>)
  421636:	4788      	blx	r1
  421638:	e7fe      	b.n	421638 <lv_cont_create+0x50>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(cont);
  42163a:	4628      	mov	r0, r5
  42163c:	4b2f      	ldr	r3, [pc, #188]	; (4216fc <lv_cont_create+0x114>)
  42163e:	4798      	blx	r3
  421640:	4b28      	ldr	r3, [pc, #160]	; (4216e4 <lv_cont_create+0xfc>)
  421642:	6018      	str	r0, [r3, #0]
  421644:	e7de      	b.n	421604 <lv_cont_create+0x1c>
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(cont);
  421646:	4628      	mov	r0, r5
  421648:	4b2d      	ldr	r3, [pc, #180]	; (421700 <lv_cont_create+0x118>)
  42164a:	4798      	blx	r3
  42164c:	4b26      	ldr	r3, [pc, #152]	; (4216e8 <lv_cont_create+0x100>)
  42164e:	6018      	str	r0, [r3, #0]
  421650:	e7db      	b.n	42160a <lv_cont_create+0x22>
        lv_obj_del(cont);
  421652:	4628      	mov	r0, r5
  421654:	4b2b      	ldr	r3, [pc, #172]	; (421704 <lv_cont_create+0x11c>)
  421656:	4798      	blx	r3
        return NULL;
  421658:	2500      	movs	r5, #0
  42165a:	e036      	b.n	4216ca <lv_cont_create+0xe2>
    ext->fit_left   = LV_FIT_NONE;
  42165c:	7823      	ldrb	r3, [r4, #0]
    ext->fit_top    = LV_FIT_NONE;
  42165e:	7862      	ldrb	r2, [r4, #1]
    ext->fit_bottom = LV_FIT_NONE;
  421660:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
  421664:	f36f 0283 	bfc	r2, #2, #2
  421668:	7062      	strb	r2, [r4, #1]
    ext->layout     = LV_LAYOUT_OFF;
  42166a:	f003 030f 	and.w	r3, r3, #15
  42166e:	f36f 0303 	bfc	r3, #0, #4
  421672:	7023      	strb	r3, [r4, #0]
    lv_obj_set_signal_cb(cont, lv_cont_signal);
  421674:	4924      	ldr	r1, [pc, #144]	; (421708 <lv_cont_create+0x120>)
  421676:	4628      	mov	r0, r5
  421678:	4b24      	ldr	r3, [pc, #144]	; (42170c <lv_cont_create+0x124>)
  42167a:	4798      	blx	r3
    if(copy == NULL) {
  42167c:	b33e      	cbz	r6, 4216ce <lv_cont_create+0xe6>
        lv_cont_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
  42167e:	4630      	mov	r0, r6
  421680:	4b1b      	ldr	r3, [pc, #108]	; (4216f0 <lv_cont_create+0x108>)
  421682:	4798      	blx	r3
        ext->fit_left            = copy_ext->fit_left;
  421684:	7803      	ldrb	r3, [r0, #0]
  421686:	f3c3 1301 	ubfx	r3, r3, #4, #2
  42168a:	7822      	ldrb	r2, [r4, #0]
  42168c:	f363 1205 	bfi	r2, r3, #4, #2
  421690:	7022      	strb	r2, [r4, #0]
        ext->fit_right           = copy_ext->fit_right;
  421692:	7803      	ldrb	r3, [r0, #0]
  421694:	099b      	lsrs	r3, r3, #6
  421696:	b2d2      	uxtb	r2, r2
  421698:	f363 1287 	bfi	r2, r3, #6, #2
  42169c:	7022      	strb	r2, [r4, #0]
        ext->fit_top             = copy_ext->fit_top;
  42169e:	7842      	ldrb	r2, [r0, #1]
  4216a0:	7863      	ldrb	r3, [r4, #1]
  4216a2:	f362 0301 	bfi	r3, r2, #0, #2
  4216a6:	7063      	strb	r3, [r4, #1]
        ext->fit_bottom          = copy_ext->fit_bottom;
  4216a8:	7843      	ldrb	r3, [r0, #1]
  4216aa:	f3c3 0381 	ubfx	r3, r3, #2, #2
  4216ae:	7862      	ldrb	r2, [r4, #1]
  4216b0:	f363 0283 	bfi	r2, r3, #2, #2
  4216b4:	7062      	strb	r2, [r4, #1]
        ext->layout              = copy_ext->layout;
  4216b6:	7802      	ldrb	r2, [r0, #0]
  4216b8:	7823      	ldrb	r3, [r4, #0]
  4216ba:	f362 0303 	bfi	r3, r2, #0, #4
  4216be:	7023      	strb	r3, [r4, #0]
        lv_obj_refresh_style(cont, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
  4216c0:	22ff      	movs	r2, #255	; 0xff
  4216c2:	4611      	mov	r1, r2
  4216c4:	4628      	mov	r0, r5
  4216c6:	4b12      	ldr	r3, [pc, #72]	; (421710 <lv_cont_create+0x128>)
  4216c8:	4798      	blx	r3
}
  4216ca:	4628      	mov	r0, r5
  4216cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(par != NULL) {
  4216ce:	2f00      	cmp	r7, #0
  4216d0:	d0fb      	beq.n	4216ca <lv_cont_create+0xe2>
            lv_theme_apply(cont, LV_THEME_CONT);
  4216d2:	210b      	movs	r1, #11
  4216d4:	4628      	mov	r0, r5
  4216d6:	4b0f      	ldr	r3, [pc, #60]	; (421714 <lv_cont_create+0x12c>)
  4216d8:	4798      	blx	r3
  4216da:	e7f6      	b.n	4216ca <lv_cont_create+0xe2>
  4216dc:	00406855 	.word	0x00406855
  4216e0:	00415f95 	.word	0x00415f95
  4216e4:	2041487c 	.word	0x2041487c
  4216e8:	20414878 	.word	0x20414878
  4216ec:	00405981 	.word	0x00405981
  4216f0:	00408115 	.word	0x00408115
  4216f4:	0042c714 	.word	0x0042c714
  4216f8:	00415fa1 	.word	0x00415fa1
  4216fc:	004080c5 	.word	0x004080c5
  421700:	004080ed 	.word	0x004080ed
  421704:	00408275 	.word	0x00408275
  421708:	00421ea1 	.word	0x00421ea1
  42170c:	0040591d 	.word	0x0040591d
  421710:	004078a1 	.word	0x004078a1
  421714:	00418419 	.word	0x00418419

00421718 <lv_cont_set_layout>:
{
  421718:	b538      	push	{r3, r4, r5, lr}
  42171a:	4604      	mov	r4, r0
  42171c:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(cont, LV_OBJX_NAME);
  42171e:	4b0d      	ldr	r3, [pc, #52]	; (421754 <lv_cont_set_layout+0x3c>)
  421720:	4798      	blx	r3
  421722:	b928      	cbnz	r0, 421730 <lv_cont_set_layout+0x18>
  421724:	4622      	mov	r2, r4
  421726:	2300      	movs	r3, #0
  421728:	480b      	ldr	r0, [pc, #44]	; (421758 <lv_cont_set_layout+0x40>)
  42172a:	490c      	ldr	r1, [pc, #48]	; (42175c <lv_cont_set_layout+0x44>)
  42172c:	4788      	blx	r1
  42172e:	e7fe      	b.n	42172e <lv_cont_set_layout+0x16>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
  421730:	4620      	mov	r0, r4
  421732:	4b0b      	ldr	r3, [pc, #44]	; (421760 <lv_cont_set_layout+0x48>)
  421734:	4798      	blx	r3
    if(ext->layout == layout) return;
  421736:	7803      	ldrb	r3, [r0, #0]
  421738:	f003 030f 	and.w	r3, r3, #15
  42173c:	42ab      	cmp	r3, r5
  42173e:	d008      	beq.n	421752 <lv_cont_set_layout+0x3a>
    ext->layout = layout;
  421740:	7803      	ldrb	r3, [r0, #0]
  421742:	f365 0303 	bfi	r3, r5, #0, #4
  421746:	7003      	strb	r3, [r0, #0]
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
  421748:	69e3      	ldr	r3, [r4, #28]
  42174a:	2200      	movs	r2, #0
  42174c:	2101      	movs	r1, #1
  42174e:	4620      	mov	r0, r4
  421750:	4798      	blx	r3
  421752:	bd38      	pop	{r3, r4, r5, pc}
  421754:	00415f95 	.word	0x00415f95
  421758:	0042c728 	.word	0x0042c728
  42175c:	00415fa1 	.word	0x00415fa1
  421760:	00408115 	.word	0x00408115

00421764 <lv_cont_set_fit4>:
{
  421764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  421768:	4604      	mov	r4, r0
  42176a:	4688      	mov	r8, r1
  42176c:	4617      	mov	r7, r2
  42176e:	461e      	mov	r6, r3
  421770:	f89d 5018 	ldrb.w	r5, [sp, #24]
    LV_ASSERT_OBJ(cont, LV_OBJX_NAME);
  421774:	4b1a      	ldr	r3, [pc, #104]	; (4217e0 <lv_cont_set_fit4+0x7c>)
  421776:	4798      	blx	r3
  421778:	b928      	cbnz	r0, 421786 <lv_cont_set_fit4+0x22>
  42177a:	4622      	mov	r2, r4
  42177c:	2300      	movs	r3, #0
  42177e:	4819      	ldr	r0, [pc, #100]	; (4217e4 <lv_cont_set_fit4+0x80>)
  421780:	4919      	ldr	r1, [pc, #100]	; (4217e8 <lv_cont_set_fit4+0x84>)
  421782:	4788      	blx	r1
  421784:	e7fe      	b.n	421784 <lv_cont_set_fit4+0x20>
    lv_obj_invalidate(cont);
  421786:	4620      	mov	r0, r4
  421788:	4b18      	ldr	r3, [pc, #96]	; (4217ec <lv_cont_set_fit4+0x88>)
  42178a:	4798      	blx	r3
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
  42178c:	4620      	mov	r0, r4
  42178e:	4b18      	ldr	r3, [pc, #96]	; (4217f0 <lv_cont_set_fit4+0x8c>)
  421790:	4798      	blx	r3
    if(ext->fit_left == left && ext->fit_right == right && ext->fit_top == top && ext->fit_bottom == bottom) {
  421792:	7803      	ldrb	r3, [r0, #0]
  421794:	f3c3 1301 	ubfx	r3, r3, #4, #2
  421798:	4543      	cmp	r3, r8
  42179a:	d012      	beq.n	4217c2 <lv_cont_set_fit4+0x5e>
    ext->fit_left   = left;
  42179c:	7803      	ldrb	r3, [r0, #0]
  42179e:	f368 1305 	bfi	r3, r8, #4, #2
    ext->fit_right  = right;
  4217a2:	f367 1387 	bfi	r3, r7, #6, #2
  4217a6:	7003      	strb	r3, [r0, #0]
    ext->fit_top    = top;
  4217a8:	7843      	ldrb	r3, [r0, #1]
  4217aa:	f366 0301 	bfi	r3, r6, #0, #2
    ext->fit_bottom = bottom;
  4217ae:	f365 0383 	bfi	r3, r5, #2, #2
  4217b2:	7043      	strb	r3, [r0, #1]
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
  4217b4:	69e3      	ldr	r3, [r4, #28]
  4217b6:	2200      	movs	r2, #0
  4217b8:	2101      	movs	r1, #1
  4217ba:	4620      	mov	r0, r4
  4217bc:	4798      	blx	r3
  4217be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(ext->fit_left == left && ext->fit_right == right && ext->fit_top == top && ext->fit_bottom == bottom) {
  4217c2:	7803      	ldrb	r3, [r0, #0]
  4217c4:	ebb7 1f93 	cmp.w	r7, r3, lsr #6
  4217c8:	d1e8      	bne.n	42179c <lv_cont_set_fit4+0x38>
  4217ca:	7843      	ldrb	r3, [r0, #1]
  4217cc:	f003 0303 	and.w	r3, r3, #3
  4217d0:	42b3      	cmp	r3, r6
  4217d2:	d1e3      	bne.n	42179c <lv_cont_set_fit4+0x38>
  4217d4:	7843      	ldrb	r3, [r0, #1]
  4217d6:	f3c3 0381 	ubfx	r3, r3, #2, #2
  4217da:	42ab      	cmp	r3, r5
  4217dc:	d1de      	bne.n	42179c <lv_cont_set_fit4+0x38>
  4217de:	e7ee      	b.n	4217be <lv_cont_set_fit4+0x5a>
  4217e0:	00415f95 	.word	0x00415f95
  4217e4:	0042c728 	.word	0x0042c728
  4217e8:	00415fa1 	.word	0x00415fa1
  4217ec:	00405f99 	.word	0x00405f99
  4217f0:	00408115 	.word	0x00408115

004217f4 <lv_cont_get_layout>:
{
  4217f4:	b510      	push	{r4, lr}
  4217f6:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(cont, LV_OBJX_NAME);
  4217f8:	4b07      	ldr	r3, [pc, #28]	; (421818 <lv_cont_get_layout+0x24>)
  4217fa:	4798      	blx	r3
  4217fc:	b928      	cbnz	r0, 42180a <lv_cont_get_layout+0x16>
  4217fe:	4622      	mov	r2, r4
  421800:	2300      	movs	r3, #0
  421802:	4806      	ldr	r0, [pc, #24]	; (42181c <lv_cont_get_layout+0x28>)
  421804:	4906      	ldr	r1, [pc, #24]	; (421820 <lv_cont_get_layout+0x2c>)
  421806:	4788      	blx	r1
  421808:	e7fe      	b.n	421808 <lv_cont_get_layout+0x14>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
  42180a:	4620      	mov	r0, r4
  42180c:	4b05      	ldr	r3, [pc, #20]	; (421824 <lv_cont_get_layout+0x30>)
  42180e:	4798      	blx	r3
    return ext->layout;
  421810:	7800      	ldrb	r0, [r0, #0]
}
  421812:	f000 000f 	and.w	r0, r0, #15
  421816:	bd10      	pop	{r4, pc}
  421818:	00415f95 	.word	0x00415f95
  42181c:	0042c728 	.word	0x0042c728
  421820:	00415fa1 	.word	0x00415fa1
  421824:	00408115 	.word	0x00408115

00421828 <lv_cont_layout_col>:
{
  421828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  42182c:	b085      	sub	sp, #20
  42182e:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  421830:	2212      	movs	r2, #18
  421832:	2100      	movs	r1, #0
  421834:	4c3c      	ldr	r4, [pc, #240]	; (421928 <lv_cont_layout_col+0x100>)
  421836:	47a0      	blx	r4
  421838:	4682      	mov	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  42183a:	2213      	movs	r2, #19
  42183c:	2100      	movs	r1, #0
  42183e:	4648      	mov	r0, r9
  421840:	47a0      	blx	r4
  421842:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  421844:	2210      	movs	r2, #16
  421846:	2100      	movs	r1, #0
  421848:	4648      	mov	r0, r9
  42184a:	47a0      	blx	r4
  42184c:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  42184e:	2214      	movs	r2, #20
  421850:	2100      	movs	r1, #0
  421852:	4648      	mov	r0, r9
  421854:	47a0      	blx	r4
  421856:	9002      	str	r0, [sp, #8]
    lv_layout_t type = lv_cont_get_layout(cont);
  421858:	4648      	mov	r0, r9
  42185a:	4b34      	ldr	r3, [pc, #208]	; (42192c <lv_cont_layout_col+0x104>)
  42185c:	4798      	blx	r3
    switch(type) {
  42185e:	2803      	cmp	r0, #3
  421860:	d01c      	beq.n	42189c <lv_cont_layout_col+0x74>
  421862:	2804      	cmp	r0, #4
  421864:	d013      	beq.n	42188e <lv_cont_layout_col+0x66>
  421866:	2802      	cmp	r0, #2
  421868:	d004      	beq.n	421874 <lv_cont_layout_col+0x4c>
            hpad_corr = 0;
  42186a:	f04f 0a00 	mov.w	sl, #0
            align     = LV_ALIGN_IN_TOP_LEFT;
  42186e:	2301      	movs	r3, #1
  421870:	9303      	str	r3, [sp, #12]
            break;
  421872:	e001      	b.n	421878 <lv_cont_layout_col+0x50>
            align     = LV_ALIGN_IN_TOP_LEFT;
  421874:	2301      	movs	r3, #1
  421876:	9303      	str	r3, [sp, #12]
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
  421878:	2101      	movs	r1, #1
  42187a:	4648      	mov	r0, r9
  42187c:	4b2c      	ldr	r3, [pc, #176]	; (421930 <lv_cont_layout_col+0x108>)
  42187e:	4798      	blx	r3
    _LV_LL_READ_BACK(cont->child_ll, child) {
  421880:	f109 0804 	add.w	r8, r9, #4
  421884:	4640      	mov	r0, r8
  421886:	4b2b      	ldr	r3, [pc, #172]	; (421934 <lv_cont_layout_col+0x10c>)
  421888:	4798      	blx	r3
  42188a:	4604      	mov	r4, r0
  42188c:	e010      	b.n	4218b0 <lv_cont_layout_col+0x88>
            hpad_corr = -right;
  42188e:	f1c6 0a00 	rsb	sl, r6, #0
  421892:	fa0f fa8a 	sxth.w	sl, sl
            align     = LV_ALIGN_IN_TOP_RIGHT;
  421896:	2303      	movs	r3, #3
  421898:	9303      	str	r3, [sp, #12]
            break;
  42189a:	e7ed      	b.n	421878 <lv_cont_layout_col+0x50>
            hpad_corr = 0;
  42189c:	f04f 0a00 	mov.w	sl, #0
            align     = LV_ALIGN_IN_TOP_MID;
  4218a0:	2302      	movs	r3, #2
  4218a2:	9303      	str	r3, [sp, #12]
  4218a4:	e7e8      	b.n	421878 <lv_cont_layout_col+0x50>
    _LV_LL_READ_BACK(cont->child_ll, child) {
  4218a6:	4621      	mov	r1, r4
  4218a8:	4640      	mov	r0, r8
  4218aa:	4b23      	ldr	r3, [pc, #140]	; (421938 <lv_cont_layout_col+0x110>)
  4218ac:	4798      	blx	r3
  4218ae:	4604      	mov	r4, r0
  4218b0:	2c00      	cmp	r4, #0
  4218b2:	d031      	beq.n	421918 <lv_cont_layout_col+0xf0>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
  4218b4:	4620      	mov	r0, r4
  4218b6:	4b21      	ldr	r3, [pc, #132]	; (42193c <lv_cont_layout_col+0x114>)
  4218b8:	4798      	blx	r3
  4218ba:	2800      	cmp	r0, #0
  4218bc:	d1f3      	bne.n	4218a6 <lv_cont_layout_col+0x7e>
  4218be:	2104      	movs	r1, #4
  4218c0:	4620      	mov	r0, r4
  4218c2:	4b1f      	ldr	r3, [pc, #124]	; (421940 <lv_cont_layout_col+0x118>)
  4218c4:	4798      	blx	r3
  4218c6:	2800      	cmp	r0, #0
  4218c8:	d1ed      	bne.n	4218a6 <lv_cont_layout_col+0x7e>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  4218ca:	2215      	movs	r2, #21
  4218cc:	2100      	movs	r1, #0
  4218ce:	4620      	mov	r0, r4
  4218d0:	f8df b054 	ldr.w	fp, [pc, #84]	; 421928 <lv_cont_layout_col+0x100>
  4218d4:	47d8      	blx	fp
  4218d6:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  4218d8:	2216      	movs	r2, #22
  4218da:	2100      	movs	r1, #0
  4218dc:	4620      	mov	r0, r4
  4218de:	47d8      	blx	fp
  4218e0:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  4218e2:	2217      	movs	r2, #23
  4218e4:	2100      	movs	r1, #0
  4218e6:	4620      	mov	r0, r4
  4218e8:	47d8      	blx	fp
        lv_obj_align(child, cont, align, hpad_corr + mleft, last_cord + mtop);
  4218ea:	eb0a 0300 	add.w	r3, sl, r0
  4218ee:	b2ad      	uxth	r5, r5
  4218f0:	19aa      	adds	r2, r5, r6
  4218f2:	b212      	sxth	r2, r2
  4218f4:	9200      	str	r2, [sp, #0]
  4218f6:	b21b      	sxth	r3, r3
  4218f8:	9a03      	ldr	r2, [sp, #12]
  4218fa:	4649      	mov	r1, r9
  4218fc:	4620      	mov	r0, r4
  4218fe:	f8df b04c 	ldr.w	fp, [pc, #76]	; 42194c <lv_cont_layout_col+0x124>
  421902:	47d8      	blx	fp
        last_cord += lv_obj_get_height(child) + inner + mtop + mbottom;
  421904:	4620      	mov	r0, r4
  421906:	4b0f      	ldr	r3, [pc, #60]	; (421944 <lv_cont_layout_col+0x11c>)
  421908:	4798      	blx	r3
  42190a:	9b02      	ldr	r3, [sp, #8]
  42190c:	4418      	add	r0, r3
  42190e:	4406      	add	r6, r0
  421910:	443e      	add	r6, r7
  421912:	4435      	add	r5, r6
  421914:	b22d      	sxth	r5, r5
  421916:	e7c6      	b.n	4218a6 <lv_cont_layout_col+0x7e>
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
  421918:	2101      	movs	r1, #1
  42191a:	4648      	mov	r0, r9
  42191c:	4b0a      	ldr	r3, [pc, #40]	; (421948 <lv_cont_layout_col+0x120>)
  42191e:	4798      	blx	r3
}
  421920:	b005      	add	sp, #20
  421922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  421926:	bf00      	nop
  421928:	00407485 	.word	0x00407485
  42192c:	004217f5 	.word	0x004217f5
  421930:	00405785 	.word	0x00405785
  421934:	004162af 	.word	0x004162af
  421938:	004162c7 	.word	0x004162c7
  42193c:	00405e09 	.word	0x00405e09
  421940:	00406ded 	.word	0x00406ded
  421944:	00405bf1 	.word	0x00405bf1
  421948:	004057b5 	.word	0x004057b5
  42194c:	00406241 	.word	0x00406241

00421950 <lv_cont_layout_row>:
{
  421950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  421954:	b085      	sub	sp, #20
  421956:	4607      	mov	r7, r0
    lv_layout_t type = lv_cont_get_layout(cont);
  421958:	4b4d      	ldr	r3, [pc, #308]	; (421a90 <lv_cont_layout_row+0x140>)
  42195a:	4798      	blx	r3
  42195c:	4604      	mov	r4, r0
    lv_bidi_dir_t base_dir = lv_obj_get_base_dir(cont);
  42195e:	4638      	mov	r0, r7
  421960:	4b4c      	ldr	r3, [pc, #304]	; (421a94 <lv_cont_layout_row+0x144>)
  421962:	4798      	blx	r3
  421964:	4680      	mov	r8, r0
    switch(type) {
  421966:	2c06      	cmp	r4, #6
  421968:	d031      	beq.n	4219ce <lv_cont_layout_row+0x7e>
  42196a:	2c07      	cmp	r4, #7
  42196c:	d03b      	beq.n	4219e6 <lv_cont_layout_row+0x96>
  42196e:	2c05      	cmp	r4, #5
  421970:	d006      	beq.n	421980 <lv_cont_layout_row+0x30>
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_TOP_RIGHT : LV_ALIGN_IN_TOP_LEFT;
  421972:	2801      	cmp	r0, #1
  421974:	d04b      	beq.n	421a0e <lv_cont_layout_row+0xbe>
            vpad_corr = 0;
  421976:	f04f 0900 	mov.w	r9, #0
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_TOP_RIGHT : LV_ALIGN_IN_TOP_LEFT;
  42197a:	2301      	movs	r3, #1
  42197c:	9303      	str	r3, [sp, #12]
  42197e:	e00a      	b.n	421996 <lv_cont_layout_row+0x46>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  421980:	2210      	movs	r2, #16
  421982:	2100      	movs	r1, #0
  421984:	4638      	mov	r0, r7
  421986:	4b44      	ldr	r3, [pc, #272]	; (421a98 <lv_cont_layout_row+0x148>)
  421988:	4798      	blx	r3
  42198a:	4681      	mov	r9, r0
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_TOP_RIGHT : LV_ALIGN_IN_TOP_LEFT;
  42198c:	f1b8 0f01 	cmp.w	r8, #1
  421990:	d01a      	beq.n	4219c8 <lv_cont_layout_row+0x78>
  421992:	2301      	movs	r3, #1
  421994:	9303      	str	r3, [sp, #12]
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
  421996:	2101      	movs	r1, #1
  421998:	4638      	mov	r0, r7
  42199a:	4b40      	ldr	r3, [pc, #256]	; (421a9c <lv_cont_layout_row+0x14c>)
  42199c:	4798      	blx	r3
    if(base_dir == LV_BIDI_DIR_RTL) last_cord = lv_obj_get_style_pad_right(cont, LV_CONT_PART_MAIN);
  42199e:	f1b8 0f01 	cmp.w	r8, #1
  4219a2:	d039      	beq.n	421a18 <lv_cont_layout_row+0xc8>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  4219a4:	2212      	movs	r2, #18
  4219a6:	2100      	movs	r1, #0
  4219a8:	4638      	mov	r0, r7
  4219aa:	4b3b      	ldr	r3, [pc, #236]	; (421a98 <lv_cont_layout_row+0x148>)
  4219ac:	4798      	blx	r3
  4219ae:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  4219b0:	2214      	movs	r2, #20
  4219b2:	2100      	movs	r1, #0
  4219b4:	4638      	mov	r0, r7
  4219b6:	4b38      	ldr	r3, [pc, #224]	; (421a98 <lv_cont_layout_row+0x148>)
  4219b8:	4798      	blx	r3
  4219ba:	4682      	mov	sl, r0
    _LV_LL_READ_BACK(cont->child_ll, child) {
  4219bc:	1d3d      	adds	r5, r7, #4
  4219be:	4628      	mov	r0, r5
  4219c0:	4b37      	ldr	r3, [pc, #220]	; (421aa0 <lv_cont_layout_row+0x150>)
  4219c2:	4798      	blx	r3
  4219c4:	4604      	mov	r4, r0
  4219c6:	e043      	b.n	421a50 <lv_cont_layout_row+0x100>
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_TOP_RIGHT : LV_ALIGN_IN_TOP_LEFT;
  4219c8:	2303      	movs	r3, #3
  4219ca:	9303      	str	r3, [sp, #12]
  4219cc:	e7e3      	b.n	421996 <lv_cont_layout_row+0x46>
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_RIGHT_MID : LV_ALIGN_IN_LEFT_MID;
  4219ce:	2801      	cmp	r0, #1
  4219d0:	d004      	beq.n	4219dc <lv_cont_layout_row+0x8c>
            vpad_corr = 0;
  4219d2:	f04f 0900 	mov.w	r9, #0
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_RIGHT_MID : LV_ALIGN_IN_LEFT_MID;
  4219d6:	2307      	movs	r3, #7
  4219d8:	9303      	str	r3, [sp, #12]
  4219da:	e7dc      	b.n	421996 <lv_cont_layout_row+0x46>
            vpad_corr = 0;
  4219dc:	f04f 0900 	mov.w	r9, #0
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_RIGHT_MID : LV_ALIGN_IN_LEFT_MID;
  4219e0:	2308      	movs	r3, #8
  4219e2:	9303      	str	r3, [sp, #12]
  4219e4:	e7d7      	b.n	421996 <lv_cont_layout_row+0x46>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  4219e6:	2211      	movs	r2, #17
  4219e8:	2100      	movs	r1, #0
  4219ea:	4638      	mov	r0, r7
  4219ec:	4b2a      	ldr	r3, [pc, #168]	; (421a98 <lv_cont_layout_row+0x148>)
  4219ee:	4798      	blx	r3
            vpad_corr = -lv_obj_get_style_pad_bottom(cont, LV_CONT_PART_MAIN);
  4219f0:	fa1f f980 	uxth.w	r9, r0
  4219f4:	f1c9 0900 	rsb	r9, r9, #0
  4219f8:	fa0f f989 	sxth.w	r9, r9
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_BOTTOM_RIGHT : LV_ALIGN_IN_BOTTOM_LEFT;
  4219fc:	f1b8 0f01 	cmp.w	r8, #1
  421a00:	d002      	beq.n	421a08 <lv_cont_layout_row+0xb8>
  421a02:	2304      	movs	r3, #4
  421a04:	9303      	str	r3, [sp, #12]
  421a06:	e7c6      	b.n	421996 <lv_cont_layout_row+0x46>
  421a08:	2306      	movs	r3, #6
  421a0a:	9303      	str	r3, [sp, #12]
  421a0c:	e7c3      	b.n	421996 <lv_cont_layout_row+0x46>
            vpad_corr = 0;
  421a0e:	f04f 0900 	mov.w	r9, #0
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_TOP_RIGHT : LV_ALIGN_IN_TOP_LEFT;
  421a12:	2303      	movs	r3, #3
  421a14:	9303      	str	r3, [sp, #12]
  421a16:	e7be      	b.n	421996 <lv_cont_layout_row+0x46>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  421a18:	2213      	movs	r2, #19
  421a1a:	2100      	movs	r1, #0
  421a1c:	4638      	mov	r0, r7
  421a1e:	4b1e      	ldr	r3, [pc, #120]	; (421a98 <lv_cont_layout_row+0x148>)
  421a20:	4798      	blx	r3
  421a22:	4606      	mov	r6, r0
  421a24:	e7c4      	b.n	4219b0 <lv_cont_layout_row+0x60>
        if(base_dir == LV_BIDI_DIR_RTL) lv_obj_align(child, cont, align, -last_cord, vpad_corr);
  421a26:	4273      	negs	r3, r6
  421a28:	f8cd 9000 	str.w	r9, [sp]
  421a2c:	b21b      	sxth	r3, r3
  421a2e:	9a03      	ldr	r2, [sp, #12]
  421a30:	4639      	mov	r1, r7
  421a32:	4620      	mov	r0, r4
  421a34:	f8df b080 	ldr.w	fp, [pc, #128]	; 421ab8 <lv_cont_layout_row+0x168>
  421a38:	47d8      	blx	fp
        last_cord += lv_obj_get_width(child) + inner;
  421a3a:	4620      	mov	r0, r4
  421a3c:	4b19      	ldr	r3, [pc, #100]	; (421aa4 <lv_cont_layout_row+0x154>)
  421a3e:	4798      	blx	r3
  421a40:	4450      	add	r0, sl
  421a42:	4406      	add	r6, r0
  421a44:	b236      	sxth	r6, r6
    _LV_LL_READ_BACK(cont->child_ll, child) {
  421a46:	4621      	mov	r1, r4
  421a48:	4628      	mov	r0, r5
  421a4a:	4b17      	ldr	r3, [pc, #92]	; (421aa8 <lv_cont_layout_row+0x158>)
  421a4c:	4798      	blx	r3
  421a4e:	4604      	mov	r4, r0
  421a50:	b1bc      	cbz	r4, 421a82 <lv_cont_layout_row+0x132>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
  421a52:	4620      	mov	r0, r4
  421a54:	4b15      	ldr	r3, [pc, #84]	; (421aac <lv_cont_layout_row+0x15c>)
  421a56:	4798      	blx	r3
  421a58:	2800      	cmp	r0, #0
  421a5a:	d1f4      	bne.n	421a46 <lv_cont_layout_row+0xf6>
  421a5c:	2104      	movs	r1, #4
  421a5e:	4620      	mov	r0, r4
  421a60:	4b13      	ldr	r3, [pc, #76]	; (421ab0 <lv_cont_layout_row+0x160>)
  421a62:	4798      	blx	r3
  421a64:	2800      	cmp	r0, #0
  421a66:	d1ee      	bne.n	421a46 <lv_cont_layout_row+0xf6>
        if(base_dir == LV_BIDI_DIR_RTL) lv_obj_align(child, cont, align, -last_cord, vpad_corr);
  421a68:	f1b8 0f01 	cmp.w	r8, #1
  421a6c:	d0db      	beq.n	421a26 <lv_cont_layout_row+0xd6>
        else lv_obj_align(child, cont, align, last_cord, vpad_corr);
  421a6e:	f8cd 9000 	str.w	r9, [sp]
  421a72:	4633      	mov	r3, r6
  421a74:	9a03      	ldr	r2, [sp, #12]
  421a76:	4639      	mov	r1, r7
  421a78:	4620      	mov	r0, r4
  421a7a:	f8df b03c 	ldr.w	fp, [pc, #60]	; 421ab8 <lv_cont_layout_row+0x168>
  421a7e:	47d8      	blx	fp
  421a80:	e7db      	b.n	421a3a <lv_cont_layout_row+0xea>
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
  421a82:	2101      	movs	r1, #1
  421a84:	4638      	mov	r0, r7
  421a86:	4b0b      	ldr	r3, [pc, #44]	; (421ab4 <lv_cont_layout_row+0x164>)
  421a88:	4798      	blx	r3
}
  421a8a:	b005      	add	sp, #20
  421a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  421a90:	004217f5 	.word	0x004217f5
  421a94:	0040682d 	.word	0x0040682d
  421a98:	00407485 	.word	0x00407485
  421a9c:	00405785 	.word	0x00405785
  421aa0:	004162af 	.word	0x004162af
  421aa4:	00405bc1 	.word	0x00405bc1
  421aa8:	004162c7 	.word	0x004162c7
  421aac:	00405e09 	.word	0x00405e09
  421ab0:	00406ded 	.word	0x00406ded
  421ab4:	004057b5 	.word	0x004057b5
  421ab8:	00406241 	.word	0x00406241

00421abc <lv_cont_layout_pretty>:
{
  421abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  421ac0:	b08d      	sub	sp, #52	; 0x34
  421ac2:	4604      	mov	r4, r0
  421ac4:	9006      	str	r0, [sp, #24]
    lv_layout_t type = lv_cont_get_layout(cont);
  421ac6:	4bac      	ldr	r3, [pc, #688]	; (421d78 <lv_cont_layout_pretty+0x2bc>)
  421ac8:	4798      	blx	r3
  421aca:	900b      	str	r0, [sp, #44]	; 0x2c
    lv_coord_t w_obj         = lv_obj_get_width(cont);
  421acc:	4620      	mov	r0, r4
  421ace:	4bab      	ldr	r3, [pc, #684]	; (421d7c <lv_cont_layout_pretty+0x2c0>)
  421ad0:	4798      	blx	r3
  421ad2:	9003      	str	r0, [sp, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  421ad4:	2210      	movs	r2, #16
  421ad6:	2100      	movs	r1, #0
  421ad8:	4620      	mov	r0, r4
  421ada:	4ba9      	ldr	r3, [pc, #676]	; (421d80 <lv_cont_layout_pretty+0x2c4>)
  421adc:	4798      	blx	r3
  421ade:	9004      	str	r0, [sp, #16]
    child_rs = _lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
  421ae0:	4623      	mov	r3, r4
  421ae2:	3304      	adds	r3, #4
  421ae4:	9302      	str	r3, [sp, #8]
  421ae6:	4618      	mov	r0, r3
  421ae8:	4ba6      	ldr	r3, [pc, #664]	; (421d84 <lv_cont_layout_pretty+0x2c8>)
  421aea:	4798      	blx	r3
    if(child_rs == NULL) return;                /*Return if no child*/
  421aec:	2800      	cmp	r0, #0
  421aee:	f000 8184 	beq.w	421dfa <lv_cont_layout_pretty+0x33e>
  421af2:	4625      	mov	r5, r4
  421af4:	4682      	mov	sl, r0
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
  421af6:	2101      	movs	r1, #1
  421af8:	4620      	mov	r0, r4
  421afa:	4ba3      	ldr	r3, [pc, #652]	; (421d88 <lv_cont_layout_pretty+0x2cc>)
  421afc:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  421afe:	2212      	movs	r2, #18
  421b00:	2100      	movs	r1, #0
  421b02:	4620      	mov	r0, r4
  421b04:	4c9e      	ldr	r4, [pc, #632]	; (421d80 <lv_cont_layout_pretty+0x2c4>)
  421b06:	47a0      	blx	r4
  421b08:	9005      	str	r0, [sp, #20]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  421b0a:	2213      	movs	r2, #19
  421b0c:	2100      	movs	r1, #0
  421b0e:	4628      	mov	r0, r5
  421b10:	47a0      	blx	r4
  421b12:	9007      	str	r0, [sp, #28]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  421b14:	2214      	movs	r2, #20
  421b16:	2100      	movs	r1, #0
  421b18:	4628      	mov	r0, r5
  421b1a:	47a0      	blx	r4
  421b1c:	4683      	mov	fp, r0
    while(child_rs != NULL) {
  421b1e:	e08a      	b.n	421c36 <lv_cont_layout_pretty+0x17a>
  421b20:	464d      	mov	r5, r9
                    if(child_rc != NULL && obj_num != 0) {
  421b22:	2c00      	cmp	r4, #0
  421b24:	bf18      	it	ne
  421b26:	2f00      	cmpne	r7, #0
  421b28:	d056      	beq.n	421bd8 <lv_cont_layout_pretty+0x11c>
                        child_rc = _lv_ll_get_next(&cont->child_ll, child_rc);
  421b2a:	4621      	mov	r1, r4
  421b2c:	9802      	ldr	r0, [sp, #8]
  421b2e:	4b97      	ldr	r3, [pc, #604]	; (421d8c <lv_cont_layout_pretty+0x2d0>)
  421b30:	4798      	blx	r3
  421b32:	4604      	mov	r4, r0
  421b34:	e050      	b.n	421bd8 <lv_cont_layout_pretty+0x11c>
            child_rc = _lv_ll_get_prev(&cont->child_ll, child_rc); /*Load the next object*/
  421b36:	4621      	mov	r1, r4
  421b38:	9802      	ldr	r0, [sp, #8]
  421b3a:	4b95      	ldr	r3, [pc, #596]	; (421d90 <lv_cont_layout_pretty+0x2d4>)
  421b3c:	4798      	blx	r3
  421b3e:	4604      	mov	r4, r0
            if(obj_num == 0)
  421b40:	b907      	cbnz	r7, 421b44 <lv_cont_layout_pretty+0x88>
                child_rs = child_rc; /*If the first object was hidden (or too long) then set the
  421b42:	4682      	mov	sl, r0
        } while(child_rc != NULL);
  421b44:	2c00      	cmp	r4, #0
  421b46:	d046      	beq.n	421bd6 <lv_cont_layout_pretty+0x11a>
            if(lv_obj_get_hidden(child_rc) == false && lv_obj_is_protected(child_rc, LV_PROTECT_POS) == false) {
  421b48:	4620      	mov	r0, r4
  421b4a:	4b92      	ldr	r3, [pc, #584]	; (421d94 <lv_cont_layout_pretty+0x2d8>)
  421b4c:	4798      	blx	r3
  421b4e:	2800      	cmp	r0, #0
  421b50:	d1f1      	bne.n	421b36 <lv_cont_layout_pretty+0x7a>
  421b52:	2104      	movs	r1, #4
  421b54:	4620      	mov	r0, r4
  421b56:	4b90      	ldr	r3, [pc, #576]	; (421d98 <lv_cont_layout_pretty+0x2dc>)
  421b58:	4798      	blx	r3
  421b5a:	2800      	cmp	r0, #0
  421b5c:	d1eb      	bne.n	421b36 <lv_cont_layout_pretty+0x7a>
                lv_coord_t w = lv_obj_get_width(child_rc);
  421b5e:	4620      	mov	r0, r4
  421b60:	4b86      	ldr	r3, [pc, #536]	; (421d7c <lv_cont_layout_pretty+0x2c0>)
  421b62:	4798      	blx	r3
  421b64:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  421b66:	2217      	movs	r2, #23
  421b68:	2100      	movs	r1, #0
  421b6a:	4620      	mov	r0, r4
  421b6c:	4d84      	ldr	r5, [pc, #528]	; (421d80 <lv_cont_layout_pretty+0x2c4>)
  421b6e:	47a8      	blx	r5
                w += lv_obj_get_style_margin_left(child_rc, LV_OBJ_PART_MAIN);
  421b70:	fa16 f680 	uxtah	r6, r6, r0
  421b74:	b2b6      	uxth	r6, r6
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
  421b76:	2218      	movs	r2, #24
  421b78:	2100      	movs	r1, #0
  421b7a:	4620      	mov	r0, r4
  421b7c:	47a8      	blx	r5
                w += lv_obj_get_style_margin_right(child_rc, LV_OBJ_PART_MAIN);
  421b7e:	fa16 f080 	uxtah	r0, r6, r0
  421b82:	b280      	uxth	r0, r0
                if(w_row + w > w_obj) {
  421b84:	fa09 f380 	sxtah	r3, r9, r0
  421b88:	9a03      	ldr	r2, [sp, #12]
  421b8a:	4293      	cmp	r3, r2
  421b8c:	dcc8      	bgt.n	421b20 <lv_cont_layout_pretty+0x64>
                w_row += w + pinner; /*Add the object width + inner padding*/
  421b8e:	4458      	add	r0, fp
  421b90:	fa19 f980 	uxtah	r9, r9, r0
  421b94:	fa0f f989 	sxth.w	r9, r9
                lv_coord_t h = lv_obj_get_height(child_rc);
  421b98:	4620      	mov	r0, r4
  421b9a:	4b80      	ldr	r3, [pc, #512]	; (421d9c <lv_cont_layout_pretty+0x2e0>)
  421b9c:	4798      	blx	r3
  421b9e:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  421ba0:	2215      	movs	r2, #21
  421ba2:	2100      	movs	r1, #0
  421ba4:	4620      	mov	r0, r4
  421ba6:	4e76      	ldr	r6, [pc, #472]	; (421d80 <lv_cont_layout_pretty+0x2c4>)
  421ba8:	47b0      	blx	r6
                h += lv_obj_get_style_margin_top(child_rc, LV_OBJ_PART_MAIN);
  421baa:	fa15 f580 	uxtah	r5, r5, r0
  421bae:	b2ad      	uxth	r5, r5
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  421bb0:	2216      	movs	r2, #22
  421bb2:	2100      	movs	r1, #0
  421bb4:	4620      	mov	r0, r4
  421bb6:	47b0      	blx	r6
                h += lv_obj_get_style_margin_bottom(child_rc, LV_OBJ_PART_MAIN);
  421bb8:	fa15 f080 	uxtah	r0, r5, r0
  421bbc:	b200      	sxth	r0, r0
                h_row = LV_MATH_MAX(h_row, h);         /*Search the highest object*/
  421bbe:	4580      	cmp	r8, r0
  421bc0:	bfb8      	it	lt
  421bc2:	4680      	movlt	r8, r0
                obj_num++;
  421bc4:	3701      	adds	r7, #1
                if(lv_obj_is_protected(child_rc, LV_PROTECT_FOLLOW))
  421bc6:	2108      	movs	r1, #8
  421bc8:	4620      	mov	r0, r4
  421bca:	4b73      	ldr	r3, [pc, #460]	; (421d98 <lv_cont_layout_pretty+0x2dc>)
  421bcc:	4798      	blx	r3
  421bce:	2800      	cmp	r0, #0
  421bd0:	d0b1      	beq.n	421b36 <lv_cont_layout_pretty+0x7a>
  421bd2:	464d      	mov	r5, r9
  421bd4:	e000      	b.n	421bd8 <lv_cont_layout_pretty+0x11c>
  421bd6:	464d      	mov	r5, r9
        if(obj_num == 0) {
  421bd8:	2f00      	cmp	r7, #0
  421bda:	d139      	bne.n	421c50 <lv_cont_layout_pretty+0x194>
            if(child_rc != NULL) {
  421bdc:	b1e4      	cbz	r4, 421c18 <lv_cont_layout_pretty+0x15c>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  421bde:	2215      	movs	r2, #21
  421be0:	2100      	movs	r1, #0
  421be2:	4620      	mov	r0, r4
  421be4:	4e66      	ldr	r6, [pc, #408]	; (421d80 <lv_cont_layout_pretty+0x2c4>)
  421be6:	47b0      	blx	r6
                lv_obj_align(child_rc, cont, LV_ALIGN_IN_TOP_MID, 0, act_y + mtop);
  421be8:	b285      	uxth	r5, r0
  421bea:	9b04      	ldr	r3, [sp, #16]
  421bec:	18eb      	adds	r3, r5, r3
  421bee:	b21b      	sxth	r3, r3
  421bf0:	9300      	str	r3, [sp, #0]
  421bf2:	2300      	movs	r3, #0
  421bf4:	2202      	movs	r2, #2
  421bf6:	9906      	ldr	r1, [sp, #24]
  421bf8:	4620      	mov	r0, r4
  421bfa:	4f69      	ldr	r7, [pc, #420]	; (421da0 <lv_cont_layout_pretty+0x2e4>)
  421bfc:	47b8      	blx	r7
                h_row = lv_obj_get_height(child_rc); /*Not set previously because of the early break*/
  421bfe:	4620      	mov	r0, r4
  421c00:	4b66      	ldr	r3, [pc, #408]	; (421d9c <lv_cont_layout_pretty+0x2e0>)
  421c02:	4798      	blx	r3
                h_row += mtop;
  421c04:	4405      	add	r5, r0
  421c06:	b2ad      	uxth	r5, r5
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  421c08:	2216      	movs	r2, #22
  421c0a:	2100      	movs	r1, #0
  421c0c:	4620      	mov	r0, r4
  421c0e:	47b0      	blx	r6
                h_row += lv_obj_get_style_margin_bottom(child_rc, LV_OBJ_PART_MAIN);
  421c10:	fa15 f080 	uxtah	r0, r5, r0
  421c14:	fa0f f880 	sxth.w	r8, r0
        if(child_rc == NULL) break;
  421c18:	2c00      	cmp	r4, #0
  421c1a:	f000 80ea 	beq.w	421df2 <lv_cont_layout_pretty+0x336>
        act_y += pinner + h_row;           /*y increment*/
  421c1e:	44d8      	add	r8, fp
  421c20:	9b04      	ldr	r3, [sp, #16]
  421c22:	fa13 f888 	uxtah	r8, r3, r8
  421c26:	fa0f f388 	sxth.w	r3, r8
  421c2a:	9304      	str	r3, [sp, #16]
        child_rs = _lv_ll_get_prev(&cont->child_ll, child_rc); /*Go to the next object*/
  421c2c:	4621      	mov	r1, r4
  421c2e:	9802      	ldr	r0, [sp, #8]
  421c30:	4b57      	ldr	r3, [pc, #348]	; (421d90 <lv_cont_layout_pretty+0x2d4>)
  421c32:	4798      	blx	r3
  421c34:	4682      	mov	sl, r0
    while(child_rs != NULL) {
  421c36:	f1ba 0f00 	cmp.w	sl, #0
  421c3a:	f000 80da 	beq.w	421df2 <lv_cont_layout_pretty+0x336>
        lv_coord_t w_row = pleft + pright; /*The width is at least the left+right pad*/
  421c3e:	9b05      	ldr	r3, [sp, #20]
  421c40:	9a07      	ldr	r2, [sp, #28]
  421c42:	189d      	adds	r5, r3, r2
  421c44:	b22d      	sxth	r5, r5
  421c46:	4654      	mov	r4, sl
        uint32_t obj_num = 0;
  421c48:	2700      	movs	r7, #0
        lv_coord_t h_row = 0;
  421c4a:	46b8      	mov	r8, r7
  421c4c:	46a9      	mov	r9, r5
  421c4e:	e77b      	b.n	421b48 <lv_cont_layout_pretty+0x8c>
        else if(obj_num == 1) {
  421c50:	2f01      	cmp	r7, #1
  421c52:	d015      	beq.n	421c80 <lv_cont_layout_pretty+0x1c4>
            w_row -= pinner * obj_num;
  421c54:	fb1b f307 	smulbb	r3, fp, r7
  421c58:	1aeb      	subs	r3, r5, r3
  421c5a:	b21b      	sxth	r3, r3
            lv_coord_t new_pinner = (w_obj - w_row) / (obj_num - 1);
  421c5c:	9a03      	ldr	r2, [sp, #12]
  421c5e:	1ad3      	subs	r3, r2, r3
  421c60:	3f01      	subs	r7, #1
  421c62:	fbb3 f7f7 	udiv	r7, r3, r7
  421c66:	b23d      	sxth	r5, r7
            if(lv_obj_get_base_dir(cont) == LV_BIDI_DIR_RTL) {
  421c68:	9806      	ldr	r0, [sp, #24]
  421c6a:	4b4e      	ldr	r3, [pc, #312]	; (421da4 <lv_cont_layout_pretty+0x2e8>)
  421c6c:	4798      	blx	r3
  421c6e:	2801      	cmp	r0, #1
  421c70:	d017      	beq.n	421ca2 <lv_cont_layout_pretty+0x1e6>
                inv = 1;
  421c72:	2301      	movs	r3, #1
  421c74:	930a      	str	r3, [sp, #40]	; 0x28
                align = LV_ALIGN_IN_TOP_LEFT;
  421c76:	9309      	str	r3, [sp, #36]	; 0x24
                align = LV_ALIGN_IN_TOP_RIGHT;
  421c78:	f8dd 9014 	ldr.w	r9, [sp, #20]
  421c7c:	4656      	mov	r6, sl
  421c7e:	e03e      	b.n	421cfe <lv_cont_layout_pretty+0x242>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  421c80:	2215      	movs	r2, #21
  421c82:	2100      	movs	r1, #0
  421c84:	4650      	mov	r0, sl
  421c86:	4b3e      	ldr	r3, [pc, #248]	; (421d80 <lv_cont_layout_pretty+0x2c4>)
  421c88:	4798      	blx	r3
                         act_y + lv_obj_get_style_margin_top(child_rs, LV_OBJ_PART_MAIN));
  421c8a:	9b04      	ldr	r3, [sp, #16]
  421c8c:	fa13 f380 	uxtah	r3, r3, r0
            lv_obj_align(child_rs, cont, LV_ALIGN_IN_TOP_MID,
  421c90:	b21b      	sxth	r3, r3
  421c92:	9300      	str	r3, [sp, #0]
  421c94:	2300      	movs	r3, #0
  421c96:	2202      	movs	r2, #2
  421c98:	9906      	ldr	r1, [sp, #24]
  421c9a:	4650      	mov	r0, sl
  421c9c:	4d40      	ldr	r5, [pc, #256]	; (421da0 <lv_cont_layout_pretty+0x2e4>)
  421c9e:	47a8      	blx	r5
  421ca0:	e7ba      	b.n	421c18 <lv_cont_layout_pretty+0x15c>
                inv = -1;
  421ca2:	f04f 33ff 	mov.w	r3, #4294967295
  421ca6:	930a      	str	r3, [sp, #40]	; 0x28
                align = LV_ALIGN_IN_TOP_RIGHT;
  421ca8:	2303      	movs	r3, #3
  421caa:	9309      	str	r3, [sp, #36]	; 0x24
  421cac:	e7e4      	b.n	421c78 <lv_cont_layout_pretty+0x1bc>
                                         inv * (act_x + mleft),
  421cae:	eb09 0a07 	add.w	sl, r9, r7
  421cb2:	2215      	movs	r2, #21
  421cb4:	2100      	movs	r1, #0
  421cb6:	4630      	mov	r0, r6
  421cb8:	4b31      	ldr	r3, [pc, #196]	; (421d80 <lv_cont_layout_pretty+0x2c4>)
  421cba:	4798      	blx	r3
                                         act_y + lv_obj_get_style_margin_top(child_tmp, LV_OBJ_PART_MAIN));
  421cbc:	9b04      	ldr	r3, [sp, #16]
  421cbe:	fa13 f280 	uxtah	r2, r3, r0
                            lv_obj_align(child_tmp, cont, align,
  421cc2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
  421cc6:	fb1a f303 	smulbb	r3, sl, r3
  421cca:	b212      	sxth	r2, r2
  421ccc:	9200      	str	r2, [sp, #0]
  421cce:	b21b      	sxth	r3, r3
  421cd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  421cd2:	9906      	ldr	r1, [sp, #24]
  421cd4:	4630      	mov	r0, r6
  421cd6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 421da0 <lv_cont_layout_pretty+0x2e4>
  421cda:	47d0      	blx	sl
                    act_x += lv_obj_get_width(child_tmp) + new_pinner + mleft + mright;
  421cdc:	4630      	mov	r0, r6
  421cde:	4b27      	ldr	r3, [pc, #156]	; (421d7c <lv_cont_layout_pretty+0x2c0>)
  421ce0:	4798      	blx	r3
  421ce2:	182b      	adds	r3, r5, r0
  421ce4:	443b      	add	r3, r7
  421ce6:	9a08      	ldr	r2, [sp, #32]
  421ce8:	441a      	add	r2, r3
  421cea:	4491      	add	r9, r2
  421cec:	fa0f f989 	sxth.w	r9, r9
                if(child_tmp == child_rc) break;
  421cf0:	42b4      	cmp	r4, r6
  421cf2:	d091      	beq.n	421c18 <lv_cont_layout_pretty+0x15c>
                child_tmp = _lv_ll_get_prev(&cont->child_ll, child_tmp);
  421cf4:	4631      	mov	r1, r6
  421cf6:	9802      	ldr	r0, [sp, #8]
  421cf8:	4b25      	ldr	r3, [pc, #148]	; (421d90 <lv_cont_layout_pretty+0x2d4>)
  421cfa:	4798      	blx	r3
  421cfc:	4606      	mov	r6, r0
            while(child_tmp != NULL) {
  421cfe:	2e00      	cmp	r6, #0
  421d00:	d08a      	beq.n	421c18 <lv_cont_layout_pretty+0x15c>
                if(lv_obj_get_hidden(child_tmp) == false && lv_obj_is_protected(child_tmp, LV_PROTECT_POS) == false) {
  421d02:	4630      	mov	r0, r6
  421d04:	4b23      	ldr	r3, [pc, #140]	; (421d94 <lv_cont_layout_pretty+0x2d8>)
  421d06:	4798      	blx	r3
  421d08:	2800      	cmp	r0, #0
  421d0a:	d1f1      	bne.n	421cf0 <lv_cont_layout_pretty+0x234>
  421d0c:	2104      	movs	r1, #4
  421d0e:	4630      	mov	r0, r6
  421d10:	4b21      	ldr	r3, [pc, #132]	; (421d98 <lv_cont_layout_pretty+0x2dc>)
  421d12:	4798      	blx	r3
  421d14:	2800      	cmp	r0, #0
  421d16:	d1eb      	bne.n	421cf0 <lv_cont_layout_pretty+0x234>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  421d18:	2217      	movs	r2, #23
  421d1a:	2100      	movs	r1, #0
  421d1c:	4630      	mov	r0, r6
  421d1e:	f8df a060 	ldr.w	sl, [pc, #96]	; 421d80 <lv_cont_layout_pretty+0x2c4>
  421d22:	47d0      	blx	sl
  421d24:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
  421d26:	2218      	movs	r2, #24
  421d28:	2100      	movs	r1, #0
  421d2a:	4630      	mov	r0, r6
  421d2c:	47d0      	blx	sl
  421d2e:	9008      	str	r0, [sp, #32]
                    switch(type) {
  421d30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  421d32:	2b09      	cmp	r3, #9
  421d34:	d004      	beq.n	421d40 <lv_cont_layout_pretty+0x284>
  421d36:	2b0a      	cmp	r3, #10
  421d38:	d036      	beq.n	421da8 <lv_cont_layout_pretty+0x2ec>
  421d3a:	2b08      	cmp	r3, #8
  421d3c:	d1ce      	bne.n	421cdc <lv_cont_layout_pretty+0x220>
  421d3e:	e7b6      	b.n	421cae <lv_cont_layout_pretty+0x1f2>
                                         inv * (act_x + mleft),
  421d40:	eb09 0a07 	add.w	sl, r9, r7
                                         act_y + (h_row - lv_obj_get_height(child_tmp)) / 2);
  421d44:	4630      	mov	r0, r6
  421d46:	4b15      	ldr	r3, [pc, #84]	; (421d9c <lv_cont_layout_pretty+0x2e0>)
  421d48:	4798      	blx	r3
  421d4a:	ebb8 0000 	subs.w	r0, r8, r0
  421d4e:	d410      	bmi.n	421d72 <lv_cont_layout_pretty+0x2b6>
  421d50:	9b04      	ldr	r3, [sp, #16]
  421d52:	eb03 0260 	add.w	r2, r3, r0, asr #1
                            lv_obj_align(child_tmp, cont, align,
  421d56:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
  421d5a:	fb1a f303 	smulbb	r3, sl, r3
  421d5e:	b212      	sxth	r2, r2
  421d60:	9200      	str	r2, [sp, #0]
  421d62:	b21b      	sxth	r3, r3
  421d64:	9a09      	ldr	r2, [sp, #36]	; 0x24
  421d66:	9906      	ldr	r1, [sp, #24]
  421d68:	4630      	mov	r0, r6
  421d6a:	f8df a034 	ldr.w	sl, [pc, #52]	; 421da0 <lv_cont_layout_pretty+0x2e4>
  421d6e:	47d0      	blx	sl
                            break;
  421d70:	e7b4      	b.n	421cdc <lv_cont_layout_pretty+0x220>
                                         act_y + (h_row - lv_obj_get_height(child_tmp)) / 2);
  421d72:	3001      	adds	r0, #1
  421d74:	e7ec      	b.n	421d50 <lv_cont_layout_pretty+0x294>
  421d76:	bf00      	nop
  421d78:	004217f5 	.word	0x004217f5
  421d7c:	00405bc1 	.word	0x00405bc1
  421d80:	00407485 	.word	0x00407485
  421d84:	004162af 	.word	0x004162af
  421d88:	00405785 	.word	0x00405785
  421d8c:	004162b9 	.word	0x004162b9
  421d90:	004162c7 	.word	0x004162c7
  421d94:	00405e09 	.word	0x00405e09
  421d98:	00406ded 	.word	0x00406ded
  421d9c:	00405bf1 	.word	0x00405bf1
  421da0:	00406241 	.word	0x00406241
  421da4:	0040682d 	.word	0x0040682d
                                         act_y + h_row - lv_obj_get_height(child_tmp) - lv_obj_get_style_margin_bottom(child_tmp, LV_OBJ_PART_MAIN));
  421da8:	9b04      	ldr	r3, [sp, #16]
  421daa:	eb03 0a08 	add.w	sl, r3, r8
  421dae:	fa1f fa8a 	uxth.w	sl, sl
  421db2:	4630      	mov	r0, r6
  421db4:	4b12      	ldr	r3, [pc, #72]	; (421e00 <lv_cont_layout_pretty+0x344>)
  421db6:	4798      	blx	r3
  421db8:	b280      	uxth	r0, r0
  421dba:	ebaa 0a00 	sub.w	sl, sl, r0
  421dbe:	fa1f fa8a 	uxth.w	sl, sl
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  421dc2:	2216      	movs	r2, #22
  421dc4:	2100      	movs	r1, #0
  421dc6:	4630      	mov	r0, r6
  421dc8:	4b0e      	ldr	r3, [pc, #56]	; (421e04 <lv_cont_layout_pretty+0x348>)
  421dca:	4798      	blx	r3
  421dcc:	b282      	uxth	r2, r0
  421dce:	ebaa 0202 	sub.w	r2, sl, r2
                            lv_obj_align(child_tmp, cont, align,
  421dd2:	eb09 0307 	add.w	r3, r9, r7
  421dd6:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
  421dda:	fb13 f301 	smulbb	r3, r3, r1
  421dde:	b212      	sxth	r2, r2
  421de0:	9200      	str	r2, [sp, #0]
  421de2:	b21b      	sxth	r3, r3
  421de4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  421de6:	9906      	ldr	r1, [sp, #24]
  421de8:	4630      	mov	r0, r6
  421dea:	f8df a020 	ldr.w	sl, [pc, #32]	; 421e0c <lv_cont_layout_pretty+0x350>
  421dee:	47d0      	blx	sl
                            break;
  421df0:	e774      	b.n	421cdc <lv_cont_layout_pretty+0x220>
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
  421df2:	2101      	movs	r1, #1
  421df4:	9806      	ldr	r0, [sp, #24]
  421df6:	4b04      	ldr	r3, [pc, #16]	; (421e08 <lv_cont_layout_pretty+0x34c>)
  421df8:	4798      	blx	r3
}
  421dfa:	b00d      	add	sp, #52	; 0x34
  421dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  421e00:	00405bf1 	.word	0x00405bf1
  421e04:	00407485 	.word	0x00407485
  421e08:	004057b5 	.word	0x004057b5
  421e0c:	00406241 	.word	0x00406241

00421e10 <lv_cont_refr_layout>:
{
  421e10:	b538      	push	{r3, r4, r5, lr}
  421e12:	4604      	mov	r4, r0
    if(lv_obj_is_protected(cont, LV_PROTECT_CHILD_CHG)) return;
  421e14:	2101      	movs	r1, #1
  421e16:	4b1a      	ldr	r3, [pc, #104]	; (421e80 <lv_cont_refr_layout+0x70>)
  421e18:	4798      	blx	r3
  421e1a:	b100      	cbz	r0, 421e1e <lv_cont_refr_layout+0xe>
  421e1c:	bd38      	pop	{r3, r4, r5, pc}
    lv_layout_t type = lv_cont_get_layout(cont);
  421e1e:	4620      	mov	r0, r4
  421e20:	4b18      	ldr	r3, [pc, #96]	; (421e84 <lv_cont_refr_layout+0x74>)
  421e22:	4798      	blx	r3
  421e24:	4605      	mov	r5, r0
    if(lv_obj_get_child(cont, NULL) == NULL) return;
  421e26:	2100      	movs	r1, #0
  421e28:	4620      	mov	r0, r4
  421e2a:	4b17      	ldr	r3, [pc, #92]	; (421e88 <lv_cont_refr_layout+0x78>)
  421e2c:	4798      	blx	r3
  421e2e:	2800      	cmp	r0, #0
  421e30:	d0f4      	beq.n	421e1c <lv_cont_refr_layout+0xc>
    if(type == LV_LAYOUT_OFF) return;
  421e32:	2d00      	cmp	r5, #0
  421e34:	d0f2      	beq.n	421e1c <lv_cont_refr_layout+0xc>
    if(type == LV_LAYOUT_CENTER) {
  421e36:	2d01      	cmp	r5, #1
  421e38:	d012      	beq.n	421e60 <lv_cont_refr_layout+0x50>
    else if(type == LV_LAYOUT_COLUMN_LEFT || type == LV_LAYOUT_COLUMN_MID || type == LV_LAYOUT_COLUMN_RIGHT) {
  421e3a:	1eab      	subs	r3, r5, #2
  421e3c:	b2db      	uxtb	r3, r3
  421e3e:	2b02      	cmp	r3, #2
  421e40:	d912      	bls.n	421e68 <lv_cont_refr_layout+0x58>
    else if(type == LV_LAYOUT_ROW_TOP || type == LV_LAYOUT_ROW_MID || type == LV_LAYOUT_ROW_BOTTOM) {
  421e42:	1f6b      	subs	r3, r5, #5
  421e44:	b2db      	uxtb	r3, r3
  421e46:	2b02      	cmp	r3, #2
  421e48:	d912      	bls.n	421e70 <lv_cont_refr_layout+0x60>
    else if(type == LV_LAYOUT_PRETTY_MID || type == LV_LAYOUT_PRETTY_TOP || type == LV_LAYOUT_PRETTY_BOTTOM) {
  421e4a:	f1a5 0308 	sub.w	r3, r5, #8
  421e4e:	b2db      	uxtb	r3, r3
  421e50:	2b02      	cmp	r3, #2
  421e52:	d911      	bls.n	421e78 <lv_cont_refr_layout+0x68>
    else if(type == LV_LAYOUT_GRID) {
  421e54:	2d0b      	cmp	r5, #11
  421e56:	d1e1      	bne.n	421e1c <lv_cont_refr_layout+0xc>
        lv_cont_layout_grid(cont);
  421e58:	4620      	mov	r0, r4
  421e5a:	4b0c      	ldr	r3, [pc, #48]	; (421e8c <lv_cont_refr_layout+0x7c>)
  421e5c:	4798      	blx	r3
  421e5e:	e7dd      	b.n	421e1c <lv_cont_refr_layout+0xc>
        lv_cont_layout_center(cont);
  421e60:	4620      	mov	r0, r4
  421e62:	4b0b      	ldr	r3, [pc, #44]	; (421e90 <lv_cont_refr_layout+0x80>)
  421e64:	4798      	blx	r3
  421e66:	bd38      	pop	{r3, r4, r5, pc}
        lv_cont_layout_col(cont);
  421e68:	4620      	mov	r0, r4
  421e6a:	4b0a      	ldr	r3, [pc, #40]	; (421e94 <lv_cont_refr_layout+0x84>)
  421e6c:	4798      	blx	r3
  421e6e:	bd38      	pop	{r3, r4, r5, pc}
        lv_cont_layout_row(cont);
  421e70:	4620      	mov	r0, r4
  421e72:	4b09      	ldr	r3, [pc, #36]	; (421e98 <lv_cont_refr_layout+0x88>)
  421e74:	4798      	blx	r3
  421e76:	bd38      	pop	{r3, r4, r5, pc}
        lv_cont_layout_pretty(cont);
  421e78:	4620      	mov	r0, r4
  421e7a:	4b08      	ldr	r3, [pc, #32]	; (421e9c <lv_cont_refr_layout+0x8c>)
  421e7c:	4798      	blx	r3
  421e7e:	bd38      	pop	{r3, r4, r5, pc}
  421e80:	00406ded 	.word	0x00406ded
  421e84:	004217f5 	.word	0x004217f5
  421e88:	00405ac1 	.word	0x00405ac1
  421e8c:	004210f5 	.word	0x004210f5
  421e90:	00420fc9 	.word	0x00420fc9
  421e94:	00421829 	.word	0x00421829
  421e98:	00421951 	.word	0x00421951
  421e9c:	00421abd 	.word	0x00421abd

00421ea0 <lv_cont_signal>:
{
  421ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  421ea2:	4607      	mov	r7, r0
  421ea4:	460c      	mov	r4, r1
  421ea6:	4615      	mov	r5, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
  421ea8:	2908      	cmp	r1, #8
  421eaa:	d013      	beq.n	421ed4 <lv_cont_signal+0x34>
    res = ancestor_signal(cont, sign, param);
  421eac:	4b2a      	ldr	r3, [pc, #168]	; (421f58 <lv_cont_signal+0xb8>)
  421eae:	681b      	ldr	r3, [r3, #0]
  421eb0:	4798      	blx	r3
  421eb2:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
  421eb4:	2801      	cmp	r0, #1
  421eb6:	d113      	bne.n	421ee0 <lv_cont_signal+0x40>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  421eb8:	2c07      	cmp	r4, #7
  421eba:	d01b      	beq.n	421ef4 <lv_cont_signal+0x54>
    if(sign == LV_SIGNAL_STYLE_CHG) { /*Recalculate the padding if the style changed*/
  421ebc:	2c04      	cmp	r4, #4
  421ebe:	d01f      	beq.n	421f00 <lv_cont_signal+0x60>
    else if(sign == LV_SIGNAL_CHILD_CHG) {
  421ec0:	2c01      	cmp	r4, #1
  421ec2:	d024      	beq.n	421f0e <lv_cont_signal+0x6e>
    else if(sign == LV_SIGNAL_COORD_CHG) {
  421ec4:	2c02      	cmp	r4, #2
  421ec6:	d029      	beq.n	421f1c <lv_cont_signal+0x7c>
    else if(sign == LV_SIGNAL_PARENT_SIZE_CHG) {
  421ec8:	2c03      	cmp	r4, #3
  421eca:	d109      	bne.n	421ee0 <lv_cont_signal+0x40>
        lv_cont_refr_autofit(cont);
  421ecc:	4638      	mov	r0, r7
  421ece:	4b23      	ldr	r3, [pc, #140]	; (421f5c <lv_cont_signal+0xbc>)
  421ed0:	4798      	blx	r3
  421ed2:	e005      	b.n	421ee0 <lv_cont_signal+0x40>
        info->result = lv_cont_get_style(cont, info->part);
  421ed4:	7811      	ldrb	r1, [r2, #0]
  421ed6:	4b22      	ldr	r3, [pc, #136]	; (421f60 <lv_cont_signal+0xc0>)
  421ed8:	4798      	blx	r3
  421eda:	6068      	str	r0, [r5, #4]
        if(info->result != NULL) return LV_RES_OK;
  421edc:	b110      	cbz	r0, 421ee4 <lv_cont_signal+0x44>
  421ede:	2601      	movs	r6, #1
}
  421ee0:	4630      	mov	r0, r6
  421ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        else return ancestor_signal(cont, sign, param);
  421ee4:	4b1c      	ldr	r3, [pc, #112]	; (421f58 <lv_cont_signal+0xb8>)
  421ee6:	681b      	ldr	r3, [r3, #0]
  421ee8:	462a      	mov	r2, r5
  421eea:	4621      	mov	r1, r4
  421eec:	4638      	mov	r0, r7
  421eee:	4798      	blx	r3
  421ef0:	4606      	mov	r6, r0
  421ef2:	e7f5      	b.n	421ee0 <lv_cont_signal+0x40>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  421ef4:	491b      	ldr	r1, [pc, #108]	; (421f64 <lv_cont_signal+0xc4>)
  421ef6:	4628      	mov	r0, r5
  421ef8:	4b1b      	ldr	r3, [pc, #108]	; (421f68 <lv_cont_signal+0xc8>)
  421efa:	4798      	blx	r3
  421efc:	4606      	mov	r6, r0
  421efe:	e7ef      	b.n	421ee0 <lv_cont_signal+0x40>
        lv_cont_refr_layout(cont);
  421f00:	4638      	mov	r0, r7
  421f02:	4b1a      	ldr	r3, [pc, #104]	; (421f6c <lv_cont_signal+0xcc>)
  421f04:	4798      	blx	r3
        lv_cont_refr_autofit(cont);
  421f06:	4638      	mov	r0, r7
  421f08:	4b14      	ldr	r3, [pc, #80]	; (421f5c <lv_cont_signal+0xbc>)
  421f0a:	4798      	blx	r3
  421f0c:	e7e8      	b.n	421ee0 <lv_cont_signal+0x40>
        lv_cont_refr_layout(cont);
  421f0e:	4638      	mov	r0, r7
  421f10:	4b16      	ldr	r3, [pc, #88]	; (421f6c <lv_cont_signal+0xcc>)
  421f12:	4798      	blx	r3
        lv_cont_refr_autofit(cont);
  421f14:	4638      	mov	r0, r7
  421f16:	4b11      	ldr	r3, [pc, #68]	; (421f5c <lv_cont_signal+0xbc>)
  421f18:	4798      	blx	r3
  421f1a:	e7e1      	b.n	421ee0 <lv_cont_signal+0x40>
        if(lv_obj_get_width(cont) != lv_area_get_width(param) || lv_obj_get_height(cont) != lv_area_get_height(param)) {
  421f1c:	4638      	mov	r0, r7
  421f1e:	4b14      	ldr	r3, [pc, #80]	; (421f70 <lv_cont_signal+0xd0>)
  421f20:	4798      	blx	r3
  421f22:	88ab      	ldrh	r3, [r5, #4]
  421f24:	882a      	ldrh	r2, [r5, #0]
  421f26:	1a9b      	subs	r3, r3, r2
  421f28:	b29b      	uxth	r3, r3
  421f2a:	3301      	adds	r3, #1
  421f2c:	b21b      	sxth	r3, r3
  421f2e:	4298      	cmp	r0, r3
  421f30:	d006      	beq.n	421f40 <lv_cont_signal+0xa0>
            lv_cont_refr_layout(cont);
  421f32:	4638      	mov	r0, r7
  421f34:	4b0d      	ldr	r3, [pc, #52]	; (421f6c <lv_cont_signal+0xcc>)
  421f36:	4798      	blx	r3
            lv_cont_refr_autofit(cont);
  421f38:	4638      	mov	r0, r7
  421f3a:	4b08      	ldr	r3, [pc, #32]	; (421f5c <lv_cont_signal+0xbc>)
  421f3c:	4798      	blx	r3
  421f3e:	e7cf      	b.n	421ee0 <lv_cont_signal+0x40>
        if(lv_obj_get_width(cont) != lv_area_get_width(param) || lv_obj_get_height(cont) != lv_area_get_height(param)) {
  421f40:	4638      	mov	r0, r7
  421f42:	4b0c      	ldr	r3, [pc, #48]	; (421f74 <lv_cont_signal+0xd4>)
  421f44:	4798      	blx	r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  421f46:	88eb      	ldrh	r3, [r5, #6]
  421f48:	886a      	ldrh	r2, [r5, #2]
  421f4a:	1a9b      	subs	r3, r3, r2
  421f4c:	b29b      	uxth	r3, r3
  421f4e:	3301      	adds	r3, #1
  421f50:	b21b      	sxth	r3, r3
  421f52:	4298      	cmp	r0, r3
  421f54:	d1ed      	bne.n	421f32 <lv_cont_signal+0x92>
  421f56:	e7c3      	b.n	421ee0 <lv_cont_signal+0x40>
  421f58:	2041487c 	.word	0x2041487c
  421f5c:	004211e5 	.word	0x004211e5
  421f60:	00420fbd 	.word	0x00420fbd
  421f64:	0042fe8c 	.word	0x0042fe8c
  421f68:	004083d1 	.word	0x004083d1
  421f6c:	00421e11 	.word	0x00421e11
  421f70:	00405bc1 	.word	0x00405bc1
  421f74:	00405bf1 	.word	0x00405bf1

00421f78 <lv_img_get_style>:
}

static lv_style_list_t * lv_img_get_style(lv_obj_t * img, uint8_t type)
{
    lv_style_list_t * style_dsc_p;
    switch(type) {
  421f78:	b909      	cbnz	r1, 421f7e <lv_img_get_style+0x6>
        case LV_IMG_PART_MAIN:
            style_dsc_p = &img->style_list;
  421f7a:	3028      	adds	r0, #40	; 0x28
            break;
  421f7c:	4770      	bx	lr
        default:
            style_dsc_p = NULL;
  421f7e:	2000      	movs	r0, #0
    }

    return style_dsc_p;
}
  421f80:	4770      	bx	lr
	...

00421f84 <lv_img_design>:
{
  421f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  421f88:	b0af      	sub	sp, #188	; 0xbc
  421f8a:	4604      	mov	r4, r0
  421f8c:	9103      	str	r1, [sp, #12]
  421f8e:	4617      	mov	r7, r2
    lv_img_ext_t * ext       = lv_obj_get_ext_attr(img);
  421f90:	4ba2      	ldr	r3, [pc, #648]	; (42221c <lv_img_design+0x298>)
  421f92:	4798      	blx	r3
  421f94:	4605      	mov	r5, r0
    if(mode == LV_DESIGN_COVER_CHK) {
  421f96:	2f02      	cmp	r7, #2
  421f98:	d00e      	beq.n	421fb8 <lv_img_design+0x34>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
  421f9a:	2f00      	cmp	r7, #0
  421f9c:	f040 825d 	bne.w	42245a <lv_img_design+0x4d6>
        if(ext->h == 0 || ext->w == 0) return true;
  421fa0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
  421fa4:	2b00      	cmp	r3, #0
  421fa6:	f000 8256 	beq.w	422456 <lv_img_design+0x4d2>
  421faa:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
  421fae:	2b00      	cmp	r3, #0
  421fb0:	f040 8087 	bne.w	4220c2 <lv_img_design+0x13e>
  421fb4:	2001      	movs	r0, #1
  421fb6:	e253      	b.n	422460 <lv_img_design+0x4dc>
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  421fb8:	2202      	movs	r2, #2
  421fba:	2100      	movs	r1, #0
  421fbc:	4620      	mov	r0, r4
  421fbe:	4b98      	ldr	r3, [pc, #608]	; (422220 <lv_img_design+0x29c>)
  421fc0:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(img, LV_IMG_PART_MAIN)) return LV_DESIGN_RES_MASKED;
  421fc2:	b108      	cbz	r0, 421fc8 <lv_img_design+0x44>
  421fc4:	2003      	movs	r0, #3
  421fc6:	e24b      	b.n	422460 <lv_img_design+0x4dc>
        if(ext->src_type == LV_IMG_SRC_UNKNOWN || ext->src_type == LV_IMG_SRC_SYMBOL) return LV_DESIGN_RES_NOT_COVER;
  421fc8:	7d2a      	ldrb	r2, [r5, #20]
  421fca:	f002 0303 	and.w	r3, r2, #3
  421fce:	3b02      	subs	r3, #2
  421fd0:	b2db      	uxtb	r3, r3
  421fd2:	2b01      	cmp	r3, #1
  421fd4:	f240 82f6 	bls.w	4225c4 <lv_img_design+0x640>
        if(ext->cf != LV_IMG_CF_TRUE_COLOR && ext->cf != LV_IMG_CF_RAW) return LV_DESIGN_RES_NOT_COVER;
  421fd8:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
  421fdc:	2a20      	cmp	r2, #32
  421fde:	bf18      	it	ne
  421fe0:	2a08      	cmpne	r2, #8
  421fe2:	d001      	beq.n	421fe8 <lv_img_design+0x64>
  421fe4:	2002      	movs	r0, #2
  421fe6:	e23b      	b.n	422460 <lv_img_design+0x4dc>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
  421fe8:	f248 02ac 	movw	r2, #32940	; 0x80ac
  421fec:	2100      	movs	r1, #0
  421fee:	4620      	mov	r0, r4
  421ff0:	4b8c      	ldr	r3, [pc, #560]	; (422224 <lv_img_design+0x2a0>)
  421ff2:	4798      	blx	r3
        if(lv_obj_get_style_image_opa(img, LV_IMG_PART_MAIN) != LV_OPA_COVER) return LV_DESIGN_RES_NOT_COVER;
  421ff4:	28ff      	cmp	r0, #255	; 0xff
  421ff6:	d001      	beq.n	421ffc <lv_img_design+0x78>
  421ff8:	2002      	movs	r0, #2
  421ffa:	e231      	b.n	422460 <lv_img_design+0x4dc>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  421ffc:	2206      	movs	r2, #6
  421ffe:	2100      	movs	r1, #0
  422000:	4620      	mov	r0, r4
  422002:	4b87      	ldr	r3, [pc, #540]	; (422220 <lv_img_design+0x29c>)
  422004:	4798      	blx	r3
        angle_final += ext->angle;
  422006:	89ab      	ldrh	r3, [r5, #12]
        if(angle_final != 0) return LV_DESIGN_RES_NOT_COVER;
  422008:	42d8      	cmn	r0, r3
  42200a:	d001      	beq.n	422010 <lv_img_design+0x8c>
  42200c:	2002      	movs	r0, #2
  42200e:	e227      	b.n	422460 <lv_img_design+0x4dc>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  422010:	2207      	movs	r2, #7
  422012:	2100      	movs	r1, #0
  422014:	4620      	mov	r0, r4
  422016:	4b82      	ldr	r3, [pc, #520]	; (422220 <lv_img_design+0x29c>)
  422018:	4798      	blx	r3
        zoom_final = (zoom_final * ext->zoom) >> 8;
  42201a:	8a6b      	ldrh	r3, [r5, #18]
  42201c:	fb03 f300 	mul.w	r3, r3, r0
  422020:	121f      	asrs	r7, r3, #8
        if(zoom_final == LV_IMG_ZOOM_NONE) {
  422022:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
  422026:	d02e      	beq.n	422086 <lv_img_design+0x102>
            _lv_img_buf_get_transformed_area(&a, lv_obj_get_width(img), lv_obj_get_height(img), 0, zoom_final, &ext->pivot);
  422028:	4620      	mov	r0, r4
  42202a:	4b7f      	ldr	r3, [pc, #508]	; (422228 <lv_img_design+0x2a4>)
  42202c:	4798      	blx	r3
  42202e:	4680      	mov	r8, r0
  422030:	4620      	mov	r0, r4
  422032:	4b7e      	ldr	r3, [pc, #504]	; (42222c <lv_img_design+0x2a8>)
  422034:	4798      	blx	r3
  422036:	350e      	adds	r5, #14
  422038:	9501      	str	r5, [sp, #4]
  42203a:	b2bf      	uxth	r7, r7
  42203c:	9700      	str	r7, [sp, #0]
  42203e:	2300      	movs	r3, #0
  422040:	4602      	mov	r2, r0
  422042:	4641      	mov	r1, r8
  422044:	a819      	add	r0, sp, #100	; 0x64
  422046:	4d7a      	ldr	r5, [pc, #488]	; (422230 <lv_img_design+0x2ac>)
  422048:	47a8      	blx	r5
            a.x1 += img->coords.x1;
  42204a:	8a22      	ldrh	r2, [r4, #16]
  42204c:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
  422050:	4413      	add	r3, r2
  422052:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
            a.y1 += img->coords.y1;
  422056:	8a63      	ldrh	r3, [r4, #18]
  422058:	f8bd 1066 	ldrh.w	r1, [sp, #102]	; 0x66
  42205c:	4419      	add	r1, r3
  42205e:	f8ad 1066 	strh.w	r1, [sp, #102]	; 0x66
            a.x2 += img->coords.x1;
  422062:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
  422066:	440a      	add	r2, r1
  422068:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
            a.y2 += img->coords.y1;
  42206c:	f8bd 206a 	ldrh.w	r2, [sp, #106]	; 0x6a
  422070:	4413      	add	r3, r2
  422072:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            if(_lv_area_is_in(clip_area, &a, 0) == false) return LV_DESIGN_RES_NOT_COVER;
  422076:	2200      	movs	r2, #0
  422078:	a919      	add	r1, sp, #100	; 0x64
  42207a:	9803      	ldr	r0, [sp, #12]
  42207c:	4b6d      	ldr	r3, [pc, #436]	; (422234 <lv_img_design+0x2b0>)
  42207e:	4798      	blx	r3
  422080:	b950      	cbnz	r0, 422098 <lv_img_design+0x114>
  422082:	2002      	movs	r0, #2
  422084:	e1ec      	b.n	422460 <lv_img_design+0x4dc>
            if(_lv_area_is_in(clip_area, &img->coords, 0) == false) return LV_DESIGN_RES_NOT_COVER;
  422086:	2200      	movs	r2, #0
  422088:	f104 0110 	add.w	r1, r4, #16
  42208c:	9803      	ldr	r0, [sp, #12]
  42208e:	4b69      	ldr	r3, [pc, #420]	; (422234 <lv_img_design+0x2b0>)
  422090:	4798      	blx	r3
  422092:	b908      	cbnz	r0, 422098 <lv_img_design+0x114>
  422094:	2002      	movs	r0, #2
  422096:	e1e3      	b.n	422460 <lv_img_design+0x4dc>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
  422098:	2220      	movs	r2, #32
  42209a:	2100      	movs	r1, #0
  42209c:	4620      	mov	r0, r4
  42209e:	4b60      	ldr	r3, [pc, #384]	; (422220 <lv_img_design+0x29c>)
  4220a0:	4798      	blx	r3
  4220a2:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_bg_blend_mode(img, LV_IMG_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
  4220a4:	2800      	cmp	r0, #0
  4220a6:	f040 828f 	bne.w	4225c8 <lv_img_design+0x644>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
  4220aa:	f248 02a0 	movw	r2, #32928	; 0x80a0
  4220ae:	2100      	movs	r1, #0
  4220b0:	4620      	mov	r0, r4
  4220b2:	4b5b      	ldr	r3, [pc, #364]	; (422220 <lv_img_design+0x29c>)
  4220b4:	4798      	blx	r3
  4220b6:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_image_blend_mode(img, LV_IMG_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
  4220b8:	2800      	cmp	r0, #0
  4220ba:	f000 8287 	beq.w	4225cc <lv_img_design+0x648>
  4220be:	2002      	movs	r0, #2
  4220c0:	e1ce      	b.n	422460 <lv_img_design+0x4dc>
        lv_draw_rect_dsc_init(&bg_dsc);
  4220c2:	a819      	add	r0, sp, #100	; 0x64
  4220c4:	4b5c      	ldr	r3, [pc, #368]	; (422238 <lv_img_design+0x2b4>)
  4220c6:	4798      	blx	r3
        lv_obj_init_draw_rect_dsc(img, LV_IMG_PART_MAIN, &bg_dsc);
  4220c8:	aa19      	add	r2, sp, #100	; 0x64
  4220ca:	2100      	movs	r1, #0
  4220cc:	4620      	mov	r0, r4
  4220ce:	4b5b      	ldr	r3, [pc, #364]	; (42223c <lv_img_design+0x2b8>)
  4220d0:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  4220d2:	2233      	movs	r2, #51	; 0x33
  4220d4:	2100      	movs	r1, #0
  4220d6:	4620      	mov	r0, r4
  4220d8:	4b51      	ldr	r3, [pc, #324]	; (422220 <lv_img_design+0x29c>)
  4220da:	4798      	blx	r3
        if(lv_obj_get_style_border_post(img, LV_OBJ_PART_MAIN)) {
  4220dc:	b110      	cbz	r0, 4220e4 <lv_img_design+0x160>
            bg_dsc.border_opa = LV_OPA_TRANSP;
  4220de:	2300      	movs	r3, #0
  4220e0:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  4220e4:	2207      	movs	r2, #7
  4220e6:	2100      	movs	r1, #0
  4220e8:	4620      	mov	r0, r4
  4220ea:	4e4d      	ldr	r6, [pc, #308]	; (422220 <lv_img_design+0x29c>)
  4220ec:	47b0      	blx	r6
        zoom_final = (zoom_final * ext->zoom) >> 8;
  4220ee:	8a6f      	ldrh	r7, [r5, #18]
  4220f0:	fb07 f700 	mul.w	r7, r7, r0
  4220f4:	123f      	asrs	r7, r7, #8
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  4220f6:	2206      	movs	r2, #6
  4220f8:	2100      	movs	r1, #0
  4220fa:	4620      	mov	r0, r4
  4220fc:	47b0      	blx	r6
        angle_final += ext->angle;
  4220fe:	89ab      	ldrh	r3, [r5, #12]
  422100:	18c3      	adds	r3, r0, r3
  422102:	9304      	str	r3, [sp, #16]
        lv_coord_t obj_w = lv_obj_get_width(img);
  422104:	4620      	mov	r0, r4
  422106:	4b48      	ldr	r3, [pc, #288]	; (422228 <lv_img_design+0x2a4>)
  422108:	4798      	blx	r3
  42210a:	4680      	mov	r8, r0
  42210c:	9005      	str	r0, [sp, #20]
        lv_coord_t obj_h = lv_obj_get_height(img);
  42210e:	4620      	mov	r0, r4
  422110:	4b46      	ldr	r3, [pc, #280]	; (42222c <lv_img_design+0x2a8>)
  422112:	4798      	blx	r3
  422114:	4602      	mov	r2, r0
  422116:	9006      	str	r0, [sp, #24]
        _lv_img_buf_get_transformed_area(&bg_coords, obj_w, obj_h,
  422118:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
  42211c:	9307      	str	r3, [sp, #28]
  42211e:	fa1f f987 	uxth.w	r9, r7
                                         angle_final, zoom_final, &ext->pivot);
  422122:	f105 0a0e 	add.w	sl, r5, #14
        _lv_img_buf_get_transformed_area(&bg_coords, obj_w, obj_h,
  422126:	f8cd a004 	str.w	sl, [sp, #4]
  42212a:	f8cd 9000 	str.w	r9, [sp]
  42212e:	4641      	mov	r1, r8
  422130:	a808      	add	r0, sp, #32
  422132:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 422230 <lv_img_design+0x2ac>
  422136:	47d8      	blx	fp
        bg_coords.x1 += img->coords.x1;
  422138:	8a22      	ldrh	r2, [r4, #16]
  42213a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
  42213e:	4413      	add	r3, r2
  422140:	f8ad 3020 	strh.w	r3, [sp, #32]
        bg_coords.y1 += img->coords.y1;
  422144:	8a63      	ldrh	r3, [r4, #18]
  422146:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
  42214a:	4419      	add	r1, r3
  42214c:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
        bg_coords.x2 += img->coords.x1;
  422150:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
  422154:	440a      	add	r2, r1
  422156:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
        bg_coords.y2 += img->coords.y1;
  42215a:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
  42215e:	4413      	add	r3, r2
  422160:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  422164:	2212      	movs	r2, #18
  422166:	2100      	movs	r1, #0
  422168:	4620      	mov	r0, r4
  42216a:	47b0      	blx	r6
        bg_coords.x1 -= lv_obj_get_style_pad_left(img, LV_IMG_PART_MAIN);
  42216c:	b280      	uxth	r0, r0
  42216e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
  422172:	1a18      	subs	r0, r3, r0
  422174:	f8ad 0020 	strh.w	r0, [sp, #32]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  422178:	2213      	movs	r2, #19
  42217a:	2100      	movs	r1, #0
  42217c:	4620      	mov	r0, r4
  42217e:	47b0      	blx	r6
        bg_coords.x2 += lv_obj_get_style_pad_right(img, LV_IMG_PART_MAIN);
  422180:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  422184:	fa13 f080 	uxtah	r0, r3, r0
  422188:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  42218c:	2210      	movs	r2, #16
  42218e:	2100      	movs	r1, #0
  422190:	4620      	mov	r0, r4
  422192:	47b0      	blx	r6
        bg_coords.y1 -= lv_obj_get_style_pad_top(img, LV_IMG_PART_MAIN);
  422194:	b280      	uxth	r0, r0
  422196:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
  42219a:	1a18      	subs	r0, r3, r0
  42219c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  4221a0:	2211      	movs	r2, #17
  4221a2:	2100      	movs	r1, #0
  4221a4:	4620      	mov	r0, r4
  4221a6:	47b0      	blx	r6
        bg_coords.y2 += lv_obj_get_style_pad_bottom(img, LV_IMG_PART_MAIN);
  4221a8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
  4221ac:	fa13 f080 	uxtah	r0, r3, r0
  4221b0:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
        lv_draw_rect(&bg_coords, clip_area, &bg_dsc);
  4221b4:	aa19      	add	r2, sp, #100	; 0x64
  4221b6:	9903      	ldr	r1, [sp, #12]
  4221b8:	a808      	add	r0, sp, #32
  4221ba:	4b21      	ldr	r3, [pc, #132]	; (422240 <lv_img_design+0x2bc>)
  4221bc:	4798      	blx	r3
        if(zoom_final == 0) return LV_DESIGN_RES_OK;
  4221be:	b90f      	cbnz	r7, 4221c4 <lv_img_design+0x240>
  4221c0:	2000      	movs	r0, #0
  4221c2:	e14d      	b.n	422460 <lv_img_design+0x4dc>
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  4221c4:	2202      	movs	r2, #2
  4221c6:	2100      	movs	r1, #0
  4221c8:	4620      	mov	r0, r4
  4221ca:	47b0      	blx	r6
        if(lv_obj_get_style_clip_corner(img, LV_OBJ_PART_MAIN)) {
  4221cc:	b980      	cbnz	r0, 4221f0 <lv_img_design+0x26c>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_VARIABLE) {
  4221ce:	7d2b      	ldrb	r3, [r5, #20]
  4221d0:	f003 0303 	and.w	r3, r3, #3
  4221d4:	2b01      	cmp	r3, #1
  4221d6:	d93d      	bls.n	422254 <lv_img_design+0x2d0>
        else if(ext->src_type == LV_IMG_SRC_SYMBOL) {
  4221d8:	2b02      	cmp	r3, #2
  4221da:	f000 8122 	beq.w	422422 <lv_img_design+0x49e>
            lv_draw_img(&img->coords, clip_area, NULL, NULL);
  4221de:	2300      	movs	r3, #0
  4221e0:	461a      	mov	r2, r3
  4221e2:	9903      	ldr	r1, [sp, #12]
  4221e4:	f104 0010 	add.w	r0, r4, #16
  4221e8:	4c16      	ldr	r4, [pc, #88]	; (422244 <lv_img_design+0x2c0>)
  4221ea:	47a0      	blx	r4
    return LV_DESIGN_RES_OK;
  4221ec:	2000      	movs	r0, #0
  4221ee:	e137      	b.n	422460 <lv_img_design+0x4dc>
            lv_draw_mask_radius_param_t * mp = _lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
  4221f0:	201c      	movs	r0, #28
  4221f2:	4b15      	ldr	r3, [pc, #84]	; (422248 <lv_img_design+0x2c4>)
  4221f4:	4798      	blx	r3
  4221f6:	4683      	mov	fp, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  4221f8:	2201      	movs	r2, #1
  4221fa:	2100      	movs	r1, #0
  4221fc:	4620      	mov	r0, r4
  4221fe:	47b0      	blx	r6
            lv_draw_mask_radius_init(mp, &bg_coords, r, false);
  422200:	2300      	movs	r3, #0
  422202:	4602      	mov	r2, r0
  422204:	a908      	add	r1, sp, #32
  422206:	4658      	mov	r0, fp
  422208:	f8df 8044 	ldr.w	r8, [pc, #68]	; 422250 <lv_img_design+0x2cc>
  42220c:	47c0      	blx	r8
            lv_draw_mask_add(mp, img + 8);
  42220e:	f504 7118 	add.w	r1, r4, #608	; 0x260
  422212:	4658      	mov	r0, fp
  422214:	4b0d      	ldr	r3, [pc, #52]	; (42224c <lv_img_design+0x2c8>)
  422216:	4798      	blx	r3
  422218:	e7d9      	b.n	4221ce <lv_img_design+0x24a>
  42221a:	bf00      	nop
  42221c:	00408115 	.word	0x00408115
  422220:	00407485 	.word	0x00407485
  422224:	00406ef9 	.word	0x00406ef9
  422228:	00405bc1 	.word	0x00405bc1
  42222c:	00405bf1 	.word	0x00405bf1
  422230:	00412919 	.word	0x00412919
  422234:	004158d9 	.word	0x004158d9
  422238:	0041250d 	.word	0x0041250d
  42223c:	004083ed 	.word	0x004083ed
  422240:	00412559 	.word	0x00412559
  422244:	0040d69d 	.word	0x0040d69d
  422248:	00416a81 	.word	0x00416a81
  42224c:	0040fc61 	.word	0x0040fc61
  422250:	0040fedd 	.word	0x0040fedd
            lv_draw_img_dsc_init(&img_dsc);
  422254:	a810      	add	r0, sp, #64	; 0x40
  422256:	4b8e      	ldr	r3, [pc, #568]	; (422490 <lv_img_design+0x50c>)
  422258:	4798      	blx	r3
            lv_obj_init_draw_img_dsc(img, LV_IMG_PART_MAIN, &img_dsc);
  42225a:	aa10      	add	r2, sp, #64	; 0x40
  42225c:	2100      	movs	r1, #0
  42225e:	4620      	mov	r0, r4
  422260:	4b8c      	ldr	r3, [pc, #560]	; (422494 <lv_img_design+0x510>)
  422262:	4798      	blx	r3
            img_dsc.zoom = zoom_final;
  422264:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
            if(img_dsc.zoom == 0) return LV_DESIGN_RES_OK;
  422268:	f1b9 0f00 	cmp.w	r9, #0
  42226c:	f000 80d7 	beq.w	42241e <lv_img_design+0x49a>
            img_dsc.angle = angle_final;
  422270:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  422274:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            img_dsc.pivot.x = ext->pivot.x;
  422278:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  42227c:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            img_dsc.pivot.y = ext->pivot.y;
  422280:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
  422284:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            img_dsc.antialias = ext->antialias;
  422288:	7d6a      	ldrb	r2, [r5, #21]
  42228a:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
  42228e:	f362 0300 	bfi	r3, r2, #0, #1
  422292:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
            lv_coord_t zoomed_src_w = (int32_t)((int32_t)ext->w * zoom_final) >> 8;
  422296:	f9b5 8008 	ldrsh.w	r8, [r5, #8]
  42229a:	fb08 f807 	mul.w	r8, r8, r7
  42229e:	ea4f 2828 	mov.w	r8, r8, asr #8
  4222a2:	fa0f f388 	sxth.w	r3, r8
            if(zoomed_src_w <= 0) return LV_DESIGN_RES_OK;
  4222a6:	2b00      	cmp	r3, #0
  4222a8:	f340 80b9 	ble.w	42241e <lv_img_design+0x49a>
            lv_coord_t zoomed_src_h = (int32_t)((int32_t)ext->h * zoom_final) >> 8;
  4222ac:	f9b5 b00a 	ldrsh.w	fp, [r5, #10]
  4222b0:	fb0b fb07 	mul.w	fp, fp, r7
  4222b4:	ea4f 2b2b 	mov.w	fp, fp, asr #8
  4222b8:	fa0f f38b 	sxth.w	r3, fp
            if(zoomed_src_h <= 0) return LV_DESIGN_RES_OK;
  4222bc:	2b00      	cmp	r3, #0
  4222be:	f340 80ae 	ble.w	42241e <lv_img_design+0x49a>
            lv_obj_get_coords(img, &zoomed_coords);
  4222c2:	a90a      	add	r1, sp, #40	; 0x28
  4222c4:	4620      	mov	r0, r4
  4222c6:	4b74      	ldr	r3, [pc, #464]	; (422498 <lv_img_design+0x514>)
  4222c8:	4798      	blx	r3
            zoomed_coords.x1 += (int32_t)((int32_t)ext->offset.x * zoom_final) >> 8;
  4222ca:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  4222ce:	fb03 f307 	mul.w	r3, r3, r7
  4222d2:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
  4222d6:	eb01 2123 	add.w	r1, r1, r3, asr #8
  4222da:	b289      	uxth	r1, r1
  4222dc:	fa0f fe81 	sxth.w	lr, r1
  4222e0:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
            zoomed_coords.y1 += (int32_t)((int32_t)ext->offset.y * zoom_final) >> 8;
  4222e4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  4222e8:	fb03 f307 	mul.w	r3, r3, r7
  4222ec:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
  4222f0:	eb02 2223 	add.w	r2, r2, r3, asr #8
  4222f4:	b292      	uxth	r2, r2
  4222f6:	b210      	sxth	r0, r2
  4222f8:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
            zoomed_coords.x2 = zoomed_coords.x1 + ((int32_t)((int32_t)(obj_w - 1) * zoom_final) >> 8);
  4222fc:	9b05      	ldr	r3, [sp, #20]
  4222fe:	3b01      	subs	r3, #1
  422300:	fb03 f307 	mul.w	r3, r3, r7
  422304:	eb01 2323 	add.w	r3, r1, r3, asr #8
  422308:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            zoomed_coords.y2 = zoomed_coords.y1 + ((int32_t)((int32_t)(obj_h - 1) * zoom_final) >> 8);
  42230c:	9b06      	ldr	r3, [sp, #24]
  42230e:	3b01      	subs	r3, #1
  422310:	fb03 f307 	mul.w	r3, r3, r7
  422314:	eb02 2323 	add.w	r3, r2, r3, asr #8
  422318:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            if(zoomed_coords.x1 > img->coords.x1) zoomed_coords.x1 -= ext->w;
  42231c:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
  422320:	459e      	cmp	lr, r3
  422322:	dd03      	ble.n	42232c <lv_img_design+0x3a8>
  422324:	892b      	ldrh	r3, [r5, #8]
  422326:	1ac9      	subs	r1, r1, r3
  422328:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
            if(zoomed_coords.y1 > img->coords.y1) zoomed_coords.y1 -= ext->h;
  42232c:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
  422330:	4298      	cmp	r0, r3
  422332:	dd03      	ble.n	42233c <lv_img_design+0x3b8>
  422334:	896b      	ldrh	r3, [r5, #10]
  422336:	1ad2      	subs	r2, r2, r3
  422338:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
            _lv_img_buf_get_transformed_area(&clip_real, lv_obj_get_width(img), lv_obj_get_height(img), angle_final, zoom_final,
  42233c:	4620      	mov	r0, r4
  42233e:	4b57      	ldr	r3, [pc, #348]	; (42249c <lv_img_design+0x518>)
  422340:	4798      	blx	r3
  422342:	4607      	mov	r7, r0
  422344:	4620      	mov	r0, r4
  422346:	4b56      	ldr	r3, [pc, #344]	; (4224a0 <lv_img_design+0x51c>)
  422348:	4798      	blx	r3
  42234a:	f8cd a004 	str.w	sl, [sp, #4]
  42234e:	f8cd 9000 	str.w	r9, [sp]
  422352:	9b07      	ldr	r3, [sp, #28]
  422354:	4602      	mov	r2, r0
  422356:	4639      	mov	r1, r7
  422358:	a80c      	add	r0, sp, #48	; 0x30
  42235a:	4f52      	ldr	r7, [pc, #328]	; (4224a4 <lv_img_design+0x520>)
  42235c:	47b8      	blx	r7
            clip_real.x1 += img->coords.x1;
  42235e:	8a23      	ldrh	r3, [r4, #16]
  422360:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
  422364:	441a      	add	r2, r3
  422366:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
            clip_real.x2 += img->coords.x1;
  42236a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
  42236e:	4413      	add	r3, r2
  422370:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
            clip_real.y1 += img->coords.y1;
  422374:	8a63      	ldrh	r3, [r4, #18]
  422376:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
  42237a:	441a      	add	r2, r3
  42237c:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
            clip_real.y2 += img->coords.y1;
  422380:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
  422384:	4413      	add	r3, r2
  422386:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            if(_lv_area_intersect(&clip_real, &clip_real, clip_area) == false) return LV_DESIGN_RES_OK;
  42238a:	9a03      	ldr	r2, [sp, #12]
  42238c:	a90c      	add	r1, sp, #48	; 0x30
  42238e:	4608      	mov	r0, r1
  422390:	4b45      	ldr	r3, [pc, #276]	; (4224a8 <lv_img_design+0x524>)
  422392:	4798      	blx	r3
  422394:	2800      	cmp	r0, #0
  422396:	d042      	beq.n	42241e <lv_img_design+0x49a>
            coords_tmp.y1 = zoomed_coords.y1;
  422398:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
  42239c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
            coords_tmp.y2 = zoomed_coords.y1 + ext->h - 1;
  4223a0:	896a      	ldrh	r2, [r5, #10]
  4223a2:	fa12 f383 	uxtah	r3, r2, r3
  4223a6:	b29b      	uxth	r3, r3
  4223a8:	3b01      	subs	r3, #1
  4223aa:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
            for(; coords_tmp.y1 < zoomed_coords.y2; coords_tmp.y1 += zoomed_src_h, coords_tmp.y2 += zoomed_src_h) {
  4223ae:	e023      	b.n	4223f8 <lv_img_design+0x474>
                    lv_draw_img(&coords_tmp, &clip_real, ext->src, &img_dsc);
  4223b0:	ab10      	add	r3, sp, #64	; 0x40
  4223b2:	682a      	ldr	r2, [r5, #0]
  4223b4:	a90c      	add	r1, sp, #48	; 0x30
  4223b6:	a80e      	add	r0, sp, #56	; 0x38
  4223b8:	4c3c      	ldr	r4, [pc, #240]	; (4224ac <lv_img_design+0x528>)
  4223ba:	47a0      	blx	r4
                for(; coords_tmp.x1 < zoomed_coords.x2; coords_tmp.x1 += zoomed_src_w, coords_tmp.x2 += zoomed_src_w) {
  4223bc:	fa1f f388 	uxth.w	r3, r8
  4223c0:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
  4223c4:	441a      	add	r2, r3
  4223c6:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
  4223ca:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
  4223ce:	4413      	add	r3, r2
  4223d0:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
  4223d4:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
  4223d8:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
  4223dc:	429a      	cmp	r2, r3
  4223de:	dbe7      	blt.n	4223b0 <lv_img_design+0x42c>
            for(; coords_tmp.y1 < zoomed_coords.y2; coords_tmp.y1 += zoomed_src_h, coords_tmp.y2 += zoomed_src_h) {
  4223e0:	fa1f f38b 	uxth.w	r3, fp
  4223e4:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
  4223e8:	441a      	add	r2, r3
  4223ea:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
  4223ee:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
  4223f2:	4413      	add	r3, r2
  4223f4:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  4223f8:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	; 0x3a
  4223fc:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
  422400:	429a      	cmp	r2, r3
  422402:	f6bf aef3 	bge.w	4221ec <lv_img_design+0x268>
                coords_tmp.x1 = zoomed_coords.x1;
  422406:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
  42240a:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
                coords_tmp.x2 = zoomed_coords.x1 + ext->w - 1;
  42240e:	892a      	ldrh	r2, [r5, #8]
  422410:	fa12 f383 	uxtah	r3, r2, r3
  422414:	b29b      	uxth	r3, r3
  422416:	3b01      	subs	r3, #1
  422418:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
                for(; coords_tmp.x1 < zoomed_coords.x2; coords_tmp.x1 += zoomed_src_w, coords_tmp.x2 += zoomed_src_w) {
  42241c:	e7da      	b.n	4223d4 <lv_img_design+0x450>
            if(img_dsc.zoom == 0) return LV_DESIGN_RES_OK;
  42241e:	2000      	movs	r0, #0
  422420:	e01e      	b.n	422460 <lv_img_design+0x4dc>
            lv_draw_label_dsc_init(&label_dsc);
  422422:	a810      	add	r0, sp, #64	; 0x40
  422424:	4b22      	ldr	r3, [pc, #136]	; (4224b0 <lv_img_design+0x52c>)
  422426:	4798      	blx	r3
            lv_obj_init_draw_label_dsc(img, LV_IMG_PART_MAIN, &label_dsc);
  422428:	aa10      	add	r2, sp, #64	; 0x40
  42242a:	2100      	movs	r1, #0
  42242c:	4620      	mov	r0, r4
  42242e:	4b21      	ldr	r3, [pc, #132]	; (4224b4 <lv_img_design+0x530>)
  422430:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  422432:	f248 02a9 	movw	r2, #32937	; 0x80a9
  422436:	2100      	movs	r1, #0
  422438:	4620      	mov	r0, r4
  42243a:	4b1f      	ldr	r3, [pc, #124]	; (4224b8 <lv_img_design+0x534>)
  42243c:	4798      	blx	r3
            label_dsc.color = lv_obj_get_style_image_recolor(img, LV_IMG_PART_MAIN);
  42243e:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
            lv_draw_label(&img->coords, clip_area, &label_dsc, ext->src, NULL);
  422442:	682b      	ldr	r3, [r5, #0]
  422444:	2200      	movs	r2, #0
  422446:	9200      	str	r2, [sp, #0]
  422448:	aa10      	add	r2, sp, #64	; 0x40
  42244a:	9903      	ldr	r1, [sp, #12]
  42244c:	f104 0010 	add.w	r0, r4, #16
  422450:	4c1a      	ldr	r4, [pc, #104]	; (4224bc <lv_img_design+0x538>)
  422452:	47a0      	blx	r4
  422454:	e6ca      	b.n	4221ec <lv_img_design+0x268>
        if(ext->h == 0 || ext->w == 0) return true;
  422456:	2001      	movs	r0, #1
  422458:	e002      	b.n	422460 <lv_img_design+0x4dc>
    else if(mode == LV_DESIGN_DRAW_POST) {
  42245a:	2f01      	cmp	r7, #1
  42245c:	d003      	beq.n	422466 <lv_img_design+0x4e2>
    return LV_DESIGN_RES_OK;
  42245e:	2000      	movs	r0, #0
}
  422460:	b02f      	add	sp, #188	; 0xbc
  422462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  422466:	2202      	movs	r2, #2
  422468:	2100      	movs	r1, #0
  42246a:	4620      	mov	r0, r4
  42246c:	4b14      	ldr	r3, [pc, #80]	; (4224c0 <lv_img_design+0x53c>)
  42246e:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(img, LV_OBJ_PART_MAIN)) {
  422470:	b938      	cbnz	r0, 422482 <lv_img_design+0x4fe>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  422472:	2233      	movs	r2, #51	; 0x33
  422474:	2100      	movs	r1, #0
  422476:	4620      	mov	r0, r4
  422478:	4b11      	ldr	r3, [pc, #68]	; (4224c0 <lv_img_design+0x53c>)
  42247a:	4798      	blx	r3
        if(lv_obj_get_style_border_post(img, LV_OBJ_PART_MAIN)) {
  42247c:	bb30      	cbnz	r0, 4224cc <lv_img_design+0x548>
    return LV_DESIGN_RES_OK;
  42247e:	2000      	movs	r0, #0
  422480:	e7ee      	b.n	422460 <lv_img_design+0x4dc>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(img + 8);
  422482:	f504 7018 	add.w	r0, r4, #608	; 0x260
  422486:	4b0f      	ldr	r3, [pc, #60]	; (4224c4 <lv_img_design+0x540>)
  422488:	4798      	blx	r3
            _lv_mem_buf_release(param);
  42248a:	4b0f      	ldr	r3, [pc, #60]	; (4224c8 <lv_img_design+0x544>)
  42248c:	4798      	blx	r3
  42248e:	e7f0      	b.n	422472 <lv_img_design+0x4ee>
  422490:	0040d3f1 	.word	0x0040d3f1
  422494:	00408ae5 	.word	0x00408ae5
  422498:	00405b01 	.word	0x00405b01
  42249c:	00405bc1 	.word	0x00405bc1
  4224a0:	00405bf1 	.word	0x00405bf1
  4224a4:	00412919 	.word	0x00412919
  4224a8:	00415663 	.word	0x00415663
  4224ac:	0040d69d 	.word	0x0040d69d
  4224b0:	0040df85 	.word	0x0040df85
  4224b4:	00408a1d 	.word	0x00408a1d
  4224b8:	00406e71 	.word	0x00406e71
  4224bc:	0040dfcd 	.word	0x0040dfcd
  4224c0:	00407485 	.word	0x00407485
  4224c4:	0040fd09 	.word	0x0040fd09
  4224c8:	00416831 	.word	0x00416831
            lv_draw_rect_dsc_init(&draw_dsc);
  4224cc:	a819      	add	r0, sp, #100	; 0x64
  4224ce:	4b40      	ldr	r3, [pc, #256]	; (4225d0 <lv_img_design+0x64c>)
  4224d0:	4798      	blx	r3
            draw_dsc.bg_opa = LV_OPA_TRANSP;
  4224d2:	2700      	movs	r7, #0
  4224d4:	f88d 7070 	strb.w	r7, [sp, #112]	; 0x70
            draw_dsc.pattern_opa = LV_OPA_TRANSP;
  4224d8:	f88d 709a 	strb.w	r7, [sp, #154]	; 0x9a
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
  4224dc:	f88d 708e 	strb.w	r7, [sp, #142]	; 0x8e
            lv_obj_init_draw_rect_dsc(img, LV_OBJ_PART_MAIN, &draw_dsc);
  4224e0:	aa19      	add	r2, sp, #100	; 0x64
  4224e2:	4639      	mov	r1, r7
  4224e4:	4620      	mov	r0, r4
  4224e6:	4b3b      	ldr	r3, [pc, #236]	; (4225d4 <lv_img_design+0x650>)
  4224e8:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  4224ea:	2207      	movs	r2, #7
  4224ec:	4639      	mov	r1, r7
  4224ee:	4620      	mov	r0, r4
  4224f0:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 4225e0 <lv_img_design+0x65c>
  4224f4:	47c8      	blx	r9
            zoom_final = (zoom_final * ext->zoom) >> 8;
  4224f6:	f8b5 8012 	ldrh.w	r8, [r5, #18]
  4224fa:	fb08 f800 	mul.w	r8, r8, r0
  4224fe:	ea4f 2828 	mov.w	r8, r8, asr #8
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  422502:	2206      	movs	r2, #6
  422504:	4639      	mov	r1, r7
  422506:	4620      	mov	r0, r4
  422508:	47c8      	blx	r9
            angle_final += ext->angle;
  42250a:	89ab      	ldrh	r3, [r5, #12]
  42250c:	4403      	add	r3, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  42250e:	8aa1      	ldrh	r1, [r4, #20]
  422510:	8a22      	ldrh	r2, [r4, #16]
  422512:	1a89      	subs	r1, r1, r2
  422514:	b289      	uxth	r1, r1
  422516:	3101      	adds	r1, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  422518:	8ae2      	ldrh	r2, [r4, #22]
  42251a:	8a60      	ldrh	r0, [r4, #18]
  42251c:	1a12      	subs	r2, r2, r0
  42251e:	b292      	uxth	r2, r2
  422520:	3201      	adds	r2, #1
                                             angle_final, zoom_final, &ext->pivot);
  422522:	350e      	adds	r5, #14
            _lv_img_buf_get_transformed_area(&bg_coords, lv_area_get_width(&img->coords), lv_area_get_height(&img->coords),
  422524:	9501      	str	r5, [sp, #4]
  422526:	fa1f f088 	uxth.w	r0, r8
  42252a:	9000      	str	r0, [sp, #0]
  42252c:	b21b      	sxth	r3, r3
  42252e:	b212      	sxth	r2, r2
  422530:	b209      	sxth	r1, r1
  422532:	a810      	add	r0, sp, #64	; 0x40
  422534:	4d28      	ldr	r5, [pc, #160]	; (4225d8 <lv_img_design+0x654>)
  422536:	47a8      	blx	r5
            bg_coords.x1 += img->coords.x1;
  422538:	8a22      	ldrh	r2, [r4, #16]
  42253a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
  42253e:	4413      	add	r3, r2
  422540:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            bg_coords.y1 += img->coords.y1;
  422544:	8a63      	ldrh	r3, [r4, #18]
  422546:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
  42254a:	4419      	add	r1, r3
  42254c:	f8ad 1042 	strh.w	r1, [sp, #66]	; 0x42
            bg_coords.x2 += img->coords.x1;
  422550:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
  422554:	440a      	add	r2, r1
  422556:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
            bg_coords.y2 += img->coords.y1;
  42255a:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
  42255e:	4413      	add	r3, r2
  422560:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  422564:	2212      	movs	r2, #18
  422566:	4639      	mov	r1, r7
  422568:	4620      	mov	r0, r4
  42256a:	47c8      	blx	r9
            bg_coords.x1 -= lv_obj_get_style_pad_left(img, LV_IMG_PART_MAIN);
  42256c:	b280      	uxth	r0, r0
  42256e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
  422572:	1a18      	subs	r0, r3, r0
  422574:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  422578:	2213      	movs	r2, #19
  42257a:	4639      	mov	r1, r7
  42257c:	4620      	mov	r0, r4
  42257e:	47c8      	blx	r9
            bg_coords.x2 += lv_obj_get_style_pad_right(img, LV_IMG_PART_MAIN);
  422580:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
  422584:	fa13 f080 	uxtah	r0, r3, r0
  422588:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  42258c:	2210      	movs	r2, #16
  42258e:	4639      	mov	r1, r7
  422590:	4620      	mov	r0, r4
  422592:	47c8      	blx	r9
            bg_coords.y1 -= lv_obj_get_style_pad_top(img, LV_IMG_PART_MAIN);
  422594:	b280      	uxth	r0, r0
  422596:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
  42259a:	1a18      	subs	r0, r3, r0
  42259c:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  4225a0:	2211      	movs	r2, #17
  4225a2:	4639      	mov	r1, r7
  4225a4:	4620      	mov	r0, r4
  4225a6:	47c8      	blx	r9
            bg_coords.y2 += lv_obj_get_style_pad_bottom(img, LV_IMG_PART_MAIN);
  4225a8:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
  4225ac:	fa13 f080 	uxtah	r0, r3, r0
  4225b0:	f8ad 0046 	strh.w	r0, [sp, #70]	; 0x46
            lv_draw_rect(&img->coords, clip_area, &draw_dsc);
  4225b4:	aa19      	add	r2, sp, #100	; 0x64
  4225b6:	9903      	ldr	r1, [sp, #12]
  4225b8:	f104 0010 	add.w	r0, r4, #16
  4225bc:	4b07      	ldr	r3, [pc, #28]	; (4225dc <lv_img_design+0x658>)
  4225be:	4798      	blx	r3
    return LV_DESIGN_RES_OK;
  4225c0:	4638      	mov	r0, r7
  4225c2:	e74d      	b.n	422460 <lv_img_design+0x4dc>
        if(ext->src_type == LV_IMG_SRC_UNKNOWN || ext->src_type == LV_IMG_SRC_SYMBOL) return LV_DESIGN_RES_NOT_COVER;
  4225c4:	2002      	movs	r0, #2
  4225c6:	e74b      	b.n	422460 <lv_img_design+0x4dc>
        if(lv_obj_get_style_bg_blend_mode(img, LV_IMG_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
  4225c8:	2002      	movs	r0, #2
  4225ca:	e749      	b.n	422460 <lv_img_design+0x4dc>
        return LV_DESIGN_RES_COVER;
  4225cc:	2001      	movs	r0, #1
  4225ce:	e747      	b.n	422460 <lv_img_design+0x4dc>
  4225d0:	0041250d 	.word	0x0041250d
  4225d4:	004083ed 	.word	0x004083ed
  4225d8:	00412919 	.word	0x00412919
  4225dc:	00412559 	.word	0x00412559
  4225e0:	00407485 	.word	0x00407485

004225e4 <lv_img_get_auto_size>:
{
  4225e4:	b510      	push	{r4, lr}
  4225e6:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(img, LV_OBJX_NAME);
  4225e8:	4b07      	ldr	r3, [pc, #28]	; (422608 <lv_img_get_auto_size+0x24>)
  4225ea:	4798      	blx	r3
  4225ec:	b928      	cbnz	r0, 4225fa <lv_img_get_auto_size+0x16>
  4225ee:	4622      	mov	r2, r4
  4225f0:	2300      	movs	r3, #0
  4225f2:	4806      	ldr	r0, [pc, #24]	; (42260c <lv_img_get_auto_size+0x28>)
  4225f4:	4906      	ldr	r1, [pc, #24]	; (422610 <lv_img_get_auto_size+0x2c>)
  4225f6:	4788      	blx	r1
  4225f8:	e7fe      	b.n	4225f8 <lv_img_get_auto_size+0x14>
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
  4225fa:	4620      	mov	r0, r4
  4225fc:	4b05      	ldr	r3, [pc, #20]	; (422614 <lv_img_get_auto_size+0x30>)
  4225fe:	4798      	blx	r3
    return ext->auto_size == 0 ? false : true;
  422600:	7d00      	ldrb	r0, [r0, #20]
}
  422602:	f3c0 0080 	ubfx	r0, r0, #2, #1
  422606:	bd10      	pop	{r4, pc}
  422608:	00415f95 	.word	0x00415f95
  42260c:	0042c728 	.word	0x0042c728
  422610:	00415fa1 	.word	0x00415fa1
  422614:	00408115 	.word	0x00408115

00422618 <lv_img_set_src>:
{
  422618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  42261c:	b086      	sub	sp, #24
  42261e:	4605      	mov	r5, r0
  422620:	460e      	mov	r6, r1
    LV_ASSERT_OBJ(img, LV_OBJX_NAME);
  422622:	4b63      	ldr	r3, [pc, #396]	; (4227b0 <lv_img_set_src+0x198>)
  422624:	4798      	blx	r3
  422626:	b928      	cbnz	r0, 422634 <lv_img_set_src+0x1c>
  422628:	462a      	mov	r2, r5
  42262a:	2300      	movs	r3, #0
  42262c:	4861      	ldr	r0, [pc, #388]	; (4227b4 <lv_img_set_src+0x19c>)
  42262e:	4962      	ldr	r1, [pc, #392]	; (4227b8 <lv_img_set_src+0x1a0>)
  422630:	4788      	blx	r1
  422632:	e7fe      	b.n	422632 <lv_img_set_src+0x1a>
    lv_img_src_t src_type = lv_img_src_get_type(src_img);
  422634:	4630      	mov	r0, r6
  422636:	4b61      	ldr	r3, [pc, #388]	; (4227bc <lv_img_set_src+0x1a4>)
  422638:	4798      	blx	r3
  42263a:	4607      	mov	r7, r0
    lv_img_ext_t * ext    = lv_obj_get_ext_attr(img);
  42263c:	4628      	mov	r0, r5
  42263e:	4b60      	ldr	r3, [pc, #384]	; (4227c0 <lv_img_set_src+0x1a8>)
  422640:	4798      	blx	r3
  422642:	4604      	mov	r4, r0
    if(src_type == LV_IMG_SRC_UNKNOWN) {
  422644:	2f03      	cmp	r7, #3
  422646:	d06e      	beq.n	422726 <lv_img_set_src+0x10e>
    lv_img_decoder_get_info(src_img, &header);
  422648:	a905      	add	r1, sp, #20
  42264a:	4630      	mov	r0, r6
  42264c:	4b5d      	ldr	r3, [pc, #372]	; (4227c4 <lv_img_set_src+0x1ac>)
  42264e:	4798      	blx	r3
    if(src_type == LV_IMG_SRC_VARIABLE) {
  422650:	2f00      	cmp	r7, #0
  422652:	d17b      	bne.n	42274c <lv_img_set_src+0x134>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
  422654:	7d23      	ldrb	r3, [r4, #20]
  422656:	f003 0303 	and.w	r3, r3, #3
  42265a:	3b01      	subs	r3, #1
  42265c:	b2db      	uxtb	r3, r3
  42265e:	2b01      	cmp	r3, #1
  422660:	d802      	bhi.n	422668 <lv_img_set_src+0x50>
            lv_mem_free(ext->src);
  422662:	6820      	ldr	r0, [r4, #0]
  422664:	4b58      	ldr	r3, [pc, #352]	; (4227c8 <lv_img_set_src+0x1b0>)
  422666:	4798      	blx	r3
        ext->src = src_img;
  422668:	6026      	str	r6, [r4, #0]
    if(src_type == LV_IMG_SRC_SYMBOL) {
  42266a:	2f02      	cmp	r7, #2
  42266c:	d12c      	bne.n	4226c8 <lv_img_set_src+0xb0>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  42266e:	f248 028e 	movw	r2, #32910	; 0x808e
  422672:	2100      	movs	r1, #0
  422674:	4628      	mov	r0, r5
  422676:	4b55      	ldr	r3, [pc, #340]	; (4227cc <lv_img_set_src+0x1b4>)
  422678:	4798      	blx	r3
  42267a:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
  42267c:	f248 0280 	movw	r2, #32896	; 0x8080
  422680:	2100      	movs	r1, #0
  422682:	4628      	mov	r0, r5
  422684:	f8df 816c 	ldr.w	r8, [pc, #364]	; 4227f4 <lv_img_set_src+0x1dc>
  422688:	47c0      	blx	r8
  42268a:	4682      	mov	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  42268c:	f248 0281 	movw	r2, #32897	; 0x8081
  422690:	2100      	movs	r1, #0
  422692:	4628      	mov	r0, r5
  422694:	47c0      	blx	r8
        _lv_txt_get_size(&size, src_img, font, letter_space, line_space,
  422696:	2300      	movs	r3, #0
  422698:	9302      	str	r3, [sp, #8]
  42269a:	f647 4318 	movw	r3, #31768	; 0x7c18
  42269e:	9301      	str	r3, [sp, #4]
  4226a0:	9000      	str	r0, [sp, #0]
  4226a2:	4653      	mov	r3, sl
  4226a4:	464a      	mov	r2, r9
  4226a6:	4631      	mov	r1, r6
  4226a8:	a804      	add	r0, sp, #16
  4226aa:	4e49      	ldr	r6, [pc, #292]	; (4227d0 <lv_img_set_src+0x1b8>)
  4226ac:	47b0      	blx	r6
        header.w = size.x;
  4226ae:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  4226b2:	9b05      	ldr	r3, [sp, #20]
  4226b4:	f362 2394 	bfi	r3, r2, #10, #11
  4226b8:	9305      	str	r3, [sp, #20]
        header.h = size.y;
  4226ba:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  4226be:	0c1b      	lsrs	r3, r3, #16
  4226c0:	f362 134f 	bfi	r3, r2, #5, #11
  4226c4:	f8ad 3016 	strh.w	r3, [sp, #22]
    ext->src_type = src_type;
  4226c8:	7d21      	ldrb	r1, [r4, #20]
  4226ca:	f367 0101 	bfi	r1, r7, #0, #2
    ext->w        = header.w;
  4226ce:	9b05      	ldr	r3, [sp, #20]
  4226d0:	f3c3 238a 	ubfx	r3, r3, #10, #11
  4226d4:	8123      	strh	r3, [r4, #8]
    ext->h        = header.h;
  4226d6:	f8bd 0016 	ldrh.w	r0, [sp, #22]
  4226da:	f3c0 104a 	ubfx	r0, r0, #5, #11
  4226de:	b282      	uxth	r2, r0
  4226e0:	8160      	strh	r0, [r4, #10]
    ext->cf       = header.cf;
  4226e2:	f89d 0014 	ldrb.w	r0, [sp, #20]
  4226e6:	f360 01c7 	bfi	r1, r0, #3, #5
  4226ea:	7521      	strb	r1, [r4, #20]
    ext->pivot.x = header.w / 2;
  4226ec:	f3c3 0349 	ubfx	r3, r3, #1, #10
  4226f0:	81e3      	strh	r3, [r4, #14]
    ext->pivot.y = header.h / 2;
  4226f2:	1053      	asrs	r3, r2, #1
  4226f4:	8223      	strh	r3, [r4, #16]
    if(lv_img_get_auto_size(img) != false) {
  4226f6:	4628      	mov	r0, r5
  4226f8:	4b36      	ldr	r3, [pc, #216]	; (4227d4 <lv_img_set_src+0x1bc>)
  4226fa:	4798      	blx	r3
  4226fc:	b130      	cbz	r0, 42270c <lv_img_set_src+0xf4>
        lv_obj_set_size(img, ext->w, ext->h);
  4226fe:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
  422702:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
  422706:	4628      	mov	r0, r5
  422708:	4b33      	ldr	r3, [pc, #204]	; (4227d8 <lv_img_set_src+0x1c0>)
  42270a:	4798      	blx	r3
    if(ext->angle || ext->zoom != LV_IMG_ZOOM_NONE) lv_obj_refresh_ext_draw_pad(img);
  42270c:	89a3      	ldrh	r3, [r4, #12]
  42270e:	b91b      	cbnz	r3, 422718 <lv_img_set_src+0x100>
  422710:	8a63      	ldrh	r3, [r4, #18]
  422712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  422716:	d002      	beq.n	42271e <lv_img_set_src+0x106>
  422718:	4628      	mov	r0, r5
  42271a:	4b30      	ldr	r3, [pc, #192]	; (4227dc <lv_img_set_src+0x1c4>)
  42271c:	4798      	blx	r3
    lv_obj_invalidate(img);
  42271e:	4628      	mov	r0, r5
  422720:	4b2f      	ldr	r3, [pc, #188]	; (4227e0 <lv_img_set_src+0x1c8>)
  422722:	4798      	blx	r3
  422724:	e00f      	b.n	422746 <lv_img_set_src+0x12e>
        if(ext->src_type == LV_IMG_SRC_SYMBOL || ext->src_type == LV_IMG_SRC_FILE) {
  422726:	7d03      	ldrb	r3, [r0, #20]
  422728:	f003 0303 	and.w	r3, r3, #3
  42272c:	3b01      	subs	r3, #1
  42272e:	b2db      	uxtb	r3, r3
  422730:	2b01      	cmp	r3, #1
  422732:	d802      	bhi.n	42273a <lv_img_set_src+0x122>
            lv_mem_free(ext->src);
  422734:	6800      	ldr	r0, [r0, #0]
  422736:	4b24      	ldr	r3, [pc, #144]	; (4227c8 <lv_img_set_src+0x1b0>)
  422738:	4798      	blx	r3
        ext->src      = NULL;
  42273a:	2300      	movs	r3, #0
  42273c:	6023      	str	r3, [r4, #0]
        ext->src_type = LV_IMG_SRC_UNKNOWN;
  42273e:	7d23      	ldrb	r3, [r4, #20]
  422740:	f043 0303 	orr.w	r3, r3, #3
  422744:	7523      	strb	r3, [r4, #20]
}
  422746:	b006      	add	sp, #24
  422748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_SYMBOL) {
  42274c:	1e7b      	subs	r3, r7, #1
  42274e:	b2db      	uxtb	r3, r3
  422750:	2b01      	cmp	r3, #1
  422752:	d88a      	bhi.n	42266a <lv_img_set_src+0x52>
        if(ext->src != src_img) {
  422754:	f8d4 8000 	ldr.w	r8, [r4]
  422758:	4546      	cmp	r6, r8
  42275a:	d086      	beq.n	42266a <lv_img_set_src+0x52>
            if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
  42275c:	7d23      	ldrb	r3, [r4, #20]
  42275e:	f003 0303 	and.w	r3, r3, #3
  422762:	3b01      	subs	r3, #1
  422764:	b2db      	uxtb	r3, r3
  422766:	2b01      	cmp	r3, #1
  422768:	d901      	bls.n	42276e <lv_img_set_src+0x156>
            const void * old_src = NULL;
  42276a:	f04f 0800 	mov.w	r8, #0
            char * new_str = lv_mem_alloc(strlen(src_img) + 1);
  42276e:	4630      	mov	r0, r6
  422770:	4b1c      	ldr	r3, [pc, #112]	; (4227e4 <lv_img_set_src+0x1cc>)
  422772:	4798      	blx	r3
  422774:	3001      	adds	r0, #1
  422776:	4b1c      	ldr	r3, [pc, #112]	; (4227e8 <lv_img_set_src+0x1d0>)
  422778:	4798      	blx	r3
  42277a:	4681      	mov	r9, r0
            LV_ASSERT_MEM(new_str);
  42277c:	4b0c      	ldr	r3, [pc, #48]	; (4227b0 <lv_img_set_src+0x198>)
  42277e:	4798      	blx	r3
  422780:	b928      	cbnz	r0, 42278e <lv_img_set_src+0x176>
  422782:	464a      	mov	r2, r9
  422784:	2300      	movs	r3, #0
  422786:	4819      	ldr	r0, [pc, #100]	; (4227ec <lv_img_set_src+0x1d4>)
  422788:	490b      	ldr	r1, [pc, #44]	; (4227b8 <lv_img_set_src+0x1a0>)
  42278a:	4788      	blx	r1
  42278c:	e7fe      	b.n	42278c <lv_img_set_src+0x174>
            if(new_str == NULL) return;
  42278e:	f1b9 0f00 	cmp.w	r9, #0
  422792:	d0d8      	beq.n	422746 <lv_img_set_src+0x12e>
            strcpy(new_str, src_img);
  422794:	4631      	mov	r1, r6
  422796:	4648      	mov	r0, r9
  422798:	4b15      	ldr	r3, [pc, #84]	; (4227f0 <lv_img_set_src+0x1d8>)
  42279a:	4798      	blx	r3
            ext->src = new_str;
  42279c:	f8c4 9000 	str.w	r9, [r4]
            if(old_src) lv_mem_free(old_src);
  4227a0:	f1b8 0f00 	cmp.w	r8, #0
  4227a4:	f43f af61 	beq.w	42266a <lv_img_set_src+0x52>
  4227a8:	4640      	mov	r0, r8
  4227aa:	4b07      	ldr	r3, [pc, #28]	; (4227c8 <lv_img_set_src+0x1b0>)
  4227ac:	4798      	blx	r3
  4227ae:	e75c      	b.n	42266a <lv_img_set_src+0x52>
  4227b0:	00415f95 	.word	0x00415f95
  4227b4:	0042c728 	.word	0x0042c728
  4227b8:	00415fa1 	.word	0x00415fa1
  4227bc:	0040d6dd 	.word	0x0040d6dd
  4227c0:	00408115 	.word	0x00408115
  4227c4:	004139b9 	.word	0x004139b9
  4227c8:	0041679d 	.word	0x0041679d
  4227cc:	0040737d 	.word	0x0040737d
  4227d0:	00417fa5 	.word	0x00417fa5
  4227d4:	004225e5 	.word	0x004225e5
  4227d8:	00406c79 	.word	0x00406c79
  4227dc:	004059bd 	.word	0x004059bd
  4227e0:	00405f99 	.word	0x00405f99
  4227e4:	004285c1 	.word	0x004285c1
  4227e8:	004166d9 	.word	0x004166d9
  4227ec:	0042c714 	.word	0x0042c714
  4227f0:	004284fd 	.word	0x004284fd
  4227f4:	00407485 	.word	0x00407485

004227f8 <lv_img_create>:
{
  4227f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4227fc:	4680      	mov	r8, r0
  4227fe:	460f      	mov	r7, r1
    lv_obj_t * img = lv_obj_create(par, copy);
  422800:	4b4c      	ldr	r3, [pc, #304]	; (422934 <lv_img_create+0x13c>)
  422802:	4798      	blx	r3
  422804:	4605      	mov	r5, r0
    LV_ASSERT_MEM(img);
  422806:	4b4c      	ldr	r3, [pc, #304]	; (422938 <lv_img_create+0x140>)
  422808:	4798      	blx	r3
  42280a:	b190      	cbz	r0, 422832 <lv_img_create+0x3a>
    if(img == NULL) return NULL;
  42280c:	2d00      	cmp	r5, #0
  42280e:	d070      	beq.n	4228f2 <lv_img_create+0xfa>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(img);
  422810:	4b4a      	ldr	r3, [pc, #296]	; (42293c <lv_img_create+0x144>)
  422812:	681b      	ldr	r3, [r3, #0]
  422814:	b19b      	cbz	r3, 42283e <lv_img_create+0x46>
    lv_img_ext_t * ext = lv_obj_allocate_ext_attr(img, sizeof(lv_img_ext_t));
  422816:	2118      	movs	r1, #24
  422818:	4628      	mov	r0, r5
  42281a:	4b49      	ldr	r3, [pc, #292]	; (422940 <lv_img_create+0x148>)
  42281c:	4798      	blx	r3
  42281e:	4604      	mov	r4, r0
    LV_ASSERT_MEM(ext);
  422820:	4b45      	ldr	r3, [pc, #276]	; (422938 <lv_img_create+0x140>)
  422822:	4798      	blx	r3
  422824:	b988      	cbnz	r0, 42284a <lv_img_create+0x52>
  422826:	4622      	mov	r2, r4
  422828:	2300      	movs	r3, #0
  42282a:	4846      	ldr	r0, [pc, #280]	; (422944 <lv_img_create+0x14c>)
  42282c:	4946      	ldr	r1, [pc, #280]	; (422948 <lv_img_create+0x150>)
  42282e:	4788      	blx	r1
  422830:	e7fe      	b.n	422830 <lv_img_create+0x38>
    LV_ASSERT_MEM(img);
  422832:	462a      	mov	r2, r5
  422834:	2300      	movs	r3, #0
  422836:	4843      	ldr	r0, [pc, #268]	; (422944 <lv_img_create+0x14c>)
  422838:	4943      	ldr	r1, [pc, #268]	; (422948 <lv_img_create+0x150>)
  42283a:	4788      	blx	r1
  42283c:	e7fe      	b.n	42283c <lv_img_create+0x44>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(img);
  42283e:	4628      	mov	r0, r5
  422840:	4b42      	ldr	r3, [pc, #264]	; (42294c <lv_img_create+0x154>)
  422842:	4798      	blx	r3
  422844:	4b3d      	ldr	r3, [pc, #244]	; (42293c <lv_img_create+0x144>)
  422846:	6018      	str	r0, [r3, #0]
  422848:	e7e5      	b.n	422816 <lv_img_create+0x1e>
    if(ext == NULL) {
  42284a:	2c00      	cmp	r4, #0
  42284c:	d054      	beq.n	4228f8 <lv_img_create+0x100>
    ext->src       = NULL;
  42284e:	2600      	movs	r6, #0
  422850:	6026      	str	r6, [r4, #0]
    ext->src_type  = LV_IMG_SRC_UNKNOWN;
  422852:	7d23      	ldrb	r3, [r4, #20]
    ext->cf        = LV_IMG_CF_UNKNOWN;
  422854:	f043 0303 	orr.w	r3, r3, #3
  422858:	f366 03c7 	bfi	r3, r6, #3, #5
  42285c:	7523      	strb	r3, [r4, #20]
    ext->w         = lv_obj_get_width(img);
  42285e:	4628      	mov	r0, r5
  422860:	4b3b      	ldr	r3, [pc, #236]	; (422950 <lv_img_create+0x158>)
  422862:	4798      	blx	r3
  422864:	8120      	strh	r0, [r4, #8]
    ext->h         = lv_obj_get_height(img);
  422866:	4628      	mov	r0, r5
  422868:	4b3a      	ldr	r3, [pc, #232]	; (422954 <lv_img_create+0x15c>)
  42286a:	4798      	blx	r3
  42286c:	8160      	strh	r0, [r4, #10]
    ext->angle = 0;
  42286e:	81a6      	strh	r6, [r4, #12]
    ext->zoom = LV_IMG_ZOOM_NONE;
  422870:	f44f 7380 	mov.w	r3, #256	; 0x100
  422874:	8263      	strh	r3, [r4, #18]
    ext->antialias = LV_ANTIALIAS ? 1 : 0;
  422876:	7d63      	ldrb	r3, [r4, #21]
  422878:	f043 0301 	orr.w	r3, r3, #1
  42287c:	7563      	strb	r3, [r4, #21]
    ext->auto_size = 1;
  42287e:	7d23      	ldrb	r3, [r4, #20]
  422880:	f043 0304 	orr.w	r3, r3, #4
  422884:	7523      	strb	r3, [r4, #20]
    ext->offset.x  = 0;
  422886:	80a6      	strh	r6, [r4, #4]
    ext->offset.y  = 0;
  422888:	80e6      	strh	r6, [r4, #6]
    ext->pivot.x = 0;
  42288a:	81e6      	strh	r6, [r4, #14]
    ext->pivot.y = 0;
  42288c:	8226      	strh	r6, [r4, #16]
    lv_obj_set_signal_cb(img, lv_img_signal);
  42288e:	4932      	ldr	r1, [pc, #200]	; (422958 <lv_img_create+0x160>)
  422890:	4628      	mov	r0, r5
  422892:	4b32      	ldr	r3, [pc, #200]	; (42295c <lv_img_create+0x164>)
  422894:	4798      	blx	r3
    lv_obj_set_design_cb(img, lv_img_design);
  422896:	4932      	ldr	r1, [pc, #200]	; (422960 <lv_img_create+0x168>)
  422898:	4628      	mov	r0, r5
  42289a:	4b32      	ldr	r3, [pc, #200]	; (422964 <lv_img_create+0x16c>)
  42289c:	4798      	blx	r3
    if(copy == NULL) {
  42289e:	2f00      	cmp	r7, #0
  4228a0:	d02f      	beq.n	422902 <lv_img_create+0x10a>
        lv_img_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
  4228a2:	4638      	mov	r0, r7
  4228a4:	4b30      	ldr	r3, [pc, #192]	; (422968 <lv_img_create+0x170>)
  4228a6:	4798      	blx	r3
        ext->auto_size     = copy_ext->auto_size;
  4228a8:	7d03      	ldrb	r3, [r0, #20]
  4228aa:	f3c3 0380 	ubfx	r3, r3, #2, #1
  4228ae:	7d22      	ldrb	r2, [r4, #20]
  4228b0:	f363 0282 	bfi	r2, r3, #2, #1
  4228b4:	7522      	strb	r2, [r4, #20]
        ext->zoom          = copy_ext->zoom;
  4228b6:	8a43      	ldrh	r3, [r0, #18]
  4228b8:	8263      	strh	r3, [r4, #18]
        ext->angle         = copy_ext->angle;
  4228ba:	8983      	ldrh	r3, [r0, #12]
  4228bc:	81a3      	strh	r3, [r4, #12]
        ext->antialias     = copy_ext->antialias;
  4228be:	7d42      	ldrb	r2, [r0, #21]
  4228c0:	7d63      	ldrb	r3, [r4, #21]
  4228c2:	f362 0300 	bfi	r3, r2, #0, #1
  4228c6:	7563      	strb	r3, [r4, #21]
        ext->offset.x     = copy_ext->offset.x;
  4228c8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
  4228cc:	80a3      	strh	r3, [r4, #4]
        ext->offset.y     = copy_ext->offset.y;
  4228ce:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
  4228d2:	80e3      	strh	r3, [r4, #6]
        ext->pivot.x     = copy_ext->pivot.x;
  4228d4:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
  4228d8:	81e3      	strh	r3, [r4, #14]
        ext->pivot.y     = copy_ext->pivot.y;
  4228da:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
  4228de:	8223      	strh	r3, [r4, #16]
        lv_img_set_src(img, copy_ext->src);
  4228e0:	6801      	ldr	r1, [r0, #0]
  4228e2:	4628      	mov	r0, r5
  4228e4:	4b21      	ldr	r3, [pc, #132]	; (42296c <lv_img_create+0x174>)
  4228e6:	4798      	blx	r3
        lv_obj_refresh_style(img, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
  4228e8:	22ff      	movs	r2, #255	; 0xff
  4228ea:	4611      	mov	r1, r2
  4228ec:	4628      	mov	r0, r5
  4228ee:	4b20      	ldr	r3, [pc, #128]	; (422970 <lv_img_create+0x178>)
  4228f0:	4798      	blx	r3
}
  4228f2:	4628      	mov	r0, r5
  4228f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_obj_del(img);
  4228f8:	4628      	mov	r0, r5
  4228fa:	4b1e      	ldr	r3, [pc, #120]	; (422974 <lv_img_create+0x17c>)
  4228fc:	4798      	blx	r3
        return NULL;
  4228fe:	2500      	movs	r5, #0
  422900:	e7f7      	b.n	4228f2 <lv_img_create+0xfa>
        lv_theme_apply(img, LV_THEME_IMAGE);
  422902:	210f      	movs	r1, #15
  422904:	4628      	mov	r0, r5
  422906:	4b1c      	ldr	r3, [pc, #112]	; (422978 <lv_img_create+0x180>)
  422908:	4798      	blx	r3
        lv_obj_set_click(img, false);
  42290a:	4631      	mov	r1, r6
  42290c:	4628      	mov	r0, r5
  42290e:	4b1b      	ldr	r3, [pc, #108]	; (42297c <lv_img_create+0x184>)
  422910:	4798      	blx	r3
        lv_obj_set_adv_hittest(img, true); /*Images have fast hit-testing*/
  422912:	2101      	movs	r1, #1
  422914:	4628      	mov	r0, r5
  422916:	4b1a      	ldr	r3, [pc, #104]	; (422980 <lv_img_create+0x188>)
  422918:	4798      	blx	r3
        if(par != NULL) {
  42291a:	f1b8 0f00 	cmp.w	r8, #0
  42291e:	d004      	beq.n	42292a <lv_img_create+0x132>
            ext->auto_size = 1;
  422920:	7d23      	ldrb	r3, [r4, #20]
  422922:	f043 0304 	orr.w	r3, r3, #4
  422926:	7523      	strb	r3, [r4, #20]
  422928:	e7e3      	b.n	4228f2 <lv_img_create+0xfa>
            ext->auto_size = 0;
  42292a:	7d23      	ldrb	r3, [r4, #20]
  42292c:	f36f 0382 	bfc	r3, #2, #1
  422930:	7523      	strb	r3, [r4, #20]
  422932:	e7de      	b.n	4228f2 <lv_img_create+0xfa>
  422934:	00406855 	.word	0x00406855
  422938:	00415f95 	.word	0x00415f95
  42293c:	20414884 	.word	0x20414884
  422940:	00405981 	.word	0x00405981
  422944:	0042c714 	.word	0x0042c714
  422948:	00415fa1 	.word	0x00415fa1
  42294c:	004080c5 	.word	0x004080c5
  422950:	00405bc1 	.word	0x00405bc1
  422954:	00405bf1 	.word	0x00405bf1
  422958:	00422985 	.word	0x00422985
  42295c:	0040591d 	.word	0x0040591d
  422960:	00421f85 	.word	0x00421f85
  422964:	00405959 	.word	0x00405959
  422968:	00408115 	.word	0x00408115
  42296c:	00422619 	.word	0x00422619
  422970:	004078a1 	.word	0x004078a1
  422974:	00408275 	.word	0x00408275
  422978:	00418419 	.word	0x00418419
  42297c:	00405751 	.word	0x00405751
  422980:	00405715 	.word	0x00405715

00422984 <lv_img_signal>:
{
  422984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  422988:	b085      	sub	sp, #20
  42298a:	4607      	mov	r7, r0
  42298c:	460c      	mov	r4, r1
  42298e:	4615      	mov	r5, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
  422990:	2908      	cmp	r1, #8
  422992:	d020      	beq.n	4229d6 <lv_img_signal+0x52>
    res = ancestor_signal(img, sign, param);
  422994:	4b98      	ldr	r3, [pc, #608]	; (422bf8 <lv_img_signal+0x274>)
  422996:	681b      	ldr	r3, [r3, #0]
  422998:	4798      	blx	r3
  42299a:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
  42299c:	2801      	cmp	r0, #1
  42299e:	d120      	bne.n	4229e2 <lv_img_signal+0x5e>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  4229a0:	2c07      	cmp	r4, #7
  4229a2:	d02a      	beq.n	4229fa <lv_img_signal+0x76>
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
  4229a4:	4638      	mov	r0, r7
  4229a6:	4b95      	ldr	r3, [pc, #596]	; (422bfc <lv_img_signal+0x278>)
  4229a8:	4798      	blx	r3
  4229aa:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CLEANUP) {
  4229ac:	bb5c      	cbnz	r4, 422a06 <lv_img_signal+0x82>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
  4229ae:	7d03      	ldrb	r3, [r0, #20]
  4229b0:	f003 0303 	and.w	r3, r3, #3
  4229b4:	3b01      	subs	r3, #1
  4229b6:	b2db      	uxtb	r3, r3
  4229b8:	2b01      	cmp	r3, #1
  4229ba:	d812      	bhi.n	4229e2 <lv_img_signal+0x5e>
            lv_mem_free(ext->src);
  4229bc:	6800      	ldr	r0, [r0, #0]
  4229be:	4b90      	ldr	r3, [pc, #576]	; (422c00 <lv_img_signal+0x27c>)
  4229c0:	4798      	blx	r3
            ext->src      = NULL;
  4229c2:	2300      	movs	r3, #0
  4229c4:	f8c8 3000 	str.w	r3, [r8]
            ext->src_type = LV_IMG_SRC_UNKNOWN;
  4229c8:	f898 3014 	ldrb.w	r3, [r8, #20]
  4229cc:	f043 0303 	orr.w	r3, r3, #3
  4229d0:	f888 3014 	strb.w	r3, [r8, #20]
  4229d4:	e005      	b.n	4229e2 <lv_img_signal+0x5e>
        info->result = lv_img_get_style(img, info->part);
  4229d6:	7811      	ldrb	r1, [r2, #0]
  4229d8:	4b8a      	ldr	r3, [pc, #552]	; (422c04 <lv_img_signal+0x280>)
  4229da:	4798      	blx	r3
  4229dc:	6068      	str	r0, [r5, #4]
        if(info->result != NULL) return LV_RES_OK;
  4229de:	b120      	cbz	r0, 4229ea <lv_img_signal+0x66>
  4229e0:	2601      	movs	r6, #1
}
  4229e2:	4630      	mov	r0, r6
  4229e4:	b005      	add	sp, #20
  4229e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else return ancestor_signal(img, sign, param);
  4229ea:	4b83      	ldr	r3, [pc, #524]	; (422bf8 <lv_img_signal+0x274>)
  4229ec:	681b      	ldr	r3, [r3, #0]
  4229ee:	462a      	mov	r2, r5
  4229f0:	4621      	mov	r1, r4
  4229f2:	4638      	mov	r0, r7
  4229f4:	4798      	blx	r3
  4229f6:	4606      	mov	r6, r0
  4229f8:	e7f3      	b.n	4229e2 <lv_img_signal+0x5e>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  4229fa:	4983      	ldr	r1, [pc, #524]	; (422c08 <lv_img_signal+0x284>)
  4229fc:	4628      	mov	r0, r5
  4229fe:	4b83      	ldr	r3, [pc, #524]	; (422c0c <lv_img_signal+0x288>)
  422a00:	4798      	blx	r3
  422a02:	4606      	mov	r6, r0
  422a04:	e7ed      	b.n	4229e2 <lv_img_signal+0x5e>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
  422a06:	2c04      	cmp	r4, #4
  422a08:	d027      	beq.n	422a5a <lv_img_signal+0xd6>
    else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
  422a0a:	2c06      	cmp	r4, #6
  422a0c:	d02f      	beq.n	422a6e <lv_img_signal+0xea>
    else if(sign == LV_SIGNAL_HIT_TEST) {
  422a0e:	2c0a      	cmp	r4, #10
  422a10:	d1e7      	bne.n	4229e2 <lv_img_signal+0x5e>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  422a12:	2207      	movs	r2, #7
  422a14:	2100      	movs	r1, #0
  422a16:	4638      	mov	r0, r7
  422a18:	f8df a200 	ldr.w	sl, [pc, #512]	; 422c1c <lv_img_signal+0x298>
  422a1c:	47d0      	blx	sl
        zoom = (zoom * ext->zoom) >> 8;
  422a1e:	f8b8 3012 	ldrh.w	r3, [r8, #18]
  422a22:	fb03 f300 	mul.w	r3, r3, r0
  422a26:	121c      	asrs	r4, r3, #8
  422a28:	fa0f f984 	sxth.w	r9, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  422a2c:	2206      	movs	r2, #6
  422a2e:	2100      	movs	r1, #0
  422a30:	4638      	mov	r0, r7
  422a32:	47d0      	blx	sl
        angle += ext->angle;
  422a34:	f8b8 300c 	ldrh.w	r3, [r8, #12]
  422a38:	4403      	add	r3, r0
  422a3a:	fa0f fa83 	sxth.w	sl, r3
        if(ext->w == lv_obj_get_width(img) && ext->h == lv_obj_get_height(img) &&
  422a3e:	f9b8 b008 	ldrsh.w	fp, [r8, #8]
  422a42:	4638      	mov	r0, r7
  422a44:	4b72      	ldr	r3, [pc, #456]	; (422c10 <lv_img_signal+0x28c>)
  422a46:	4798      	blx	r3
  422a48:	4583      	cmp	fp, r0
  422a4a:	f000 8086 	beq.w	422b5a <lv_img_signal+0x1d6>
            info->result = lv_obj_is_point_on_coords(img, info->point);
  422a4e:	6829      	ldr	r1, [r5, #0]
  422a50:	4638      	mov	r0, r7
  422a52:	4b70      	ldr	r3, [pc, #448]	; (422c14 <lv_img_signal+0x290>)
  422a54:	4798      	blx	r3
  422a56:	7128      	strb	r0, [r5, #4]
  422a58:	e7c3      	b.n	4229e2 <lv_img_signal+0x5e>
        if(ext->src_type == LV_IMG_SRC_SYMBOL) {
  422a5a:	7d03      	ldrb	r3, [r0, #20]
  422a5c:	f003 0303 	and.w	r3, r3, #3
  422a60:	2b02      	cmp	r3, #2
  422a62:	d1be      	bne.n	4229e2 <lv_img_signal+0x5e>
            lv_img_set_src(img, ext->src);
  422a64:	6801      	ldr	r1, [r0, #0]
  422a66:	4638      	mov	r0, r7
  422a68:	4b6b      	ldr	r3, [pc, #428]	; (422c18 <lv_img_signal+0x294>)
  422a6a:	4798      	blx	r3
  422a6c:	e7b9      	b.n	4229e2 <lv_img_signal+0x5e>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  422a6e:	2207      	movs	r2, #7
  422a70:	2100      	movs	r1, #0
  422a72:	4638      	mov	r0, r7
  422a74:	4d69      	ldr	r5, [pc, #420]	; (422c1c <lv_img_signal+0x298>)
  422a76:	47a8      	blx	r5
        transf_zoom = (transf_zoom * ext->zoom) >> 8;
  422a78:	f8b8 3012 	ldrh.w	r3, [r8, #18]
  422a7c:	fb03 f300 	mul.w	r3, r3, r0
  422a80:	121c      	asrs	r4, r3, #8
  422a82:	fa0f f984 	sxth.w	r9, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  422a86:	2206      	movs	r2, #6
  422a88:	2100      	movs	r1, #0
  422a8a:	4638      	mov	r0, r7
  422a8c:	47a8      	blx	r5
        transf_angle += ext->angle;
  422a8e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
  422a92:	4403      	add	r3, r0
  422a94:	b21d      	sxth	r5, r3
        if(transf_angle || transf_zoom != LV_IMG_ZOOM_NONE) {
  422a96:	f5b9 7f80 	cmp.w	r9, #256	; 0x100
  422a9a:	bf08      	it	eq
  422a9c:	2d00      	cmpeq	r5, #0
  422a9e:	d126      	bne.n	422aee <lv_img_signal+0x16a>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  422aa0:	2212      	movs	r2, #18
  422aa2:	2100      	movs	r1, #0
  422aa4:	4638      	mov	r0, r7
  422aa6:	4d5d      	ldr	r5, [pc, #372]	; (422c1c <lv_img_signal+0x298>)
  422aa8:	47a8      	blx	r5
  422aaa:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  422aac:	2213      	movs	r2, #19
  422aae:	2100      	movs	r1, #0
  422ab0:	4638      	mov	r0, r7
  422ab2:	47a8      	blx	r5
  422ab4:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  422ab6:	2210      	movs	r2, #16
  422ab8:	2100      	movs	r1, #0
  422aba:	4638      	mov	r0, r7
  422abc:	47a8      	blx	r5
  422abe:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  422ac0:	2211      	movs	r2, #17
  422ac2:	2100      	movs	r1, #0
  422ac4:	4638      	mov	r0, r7
  422ac6:	47a8      	blx	r5
        img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, left);
  422ac8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
  422acc:	454b      	cmp	r3, r9
  422ace:	bfb8      	it	lt
  422ad0:	464b      	movlt	r3, r9
  422ad2:	b21b      	sxth	r3, r3
        img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, right);
  422ad4:	4543      	cmp	r3, r8
  422ad6:	bfb8      	it	lt
  422ad8:	4643      	movlt	r3, r8
  422ada:	b21b      	sxth	r3, r3
        img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, top);
  422adc:	42a3      	cmp	r3, r4
  422ade:	bfb8      	it	lt
  422ae0:	4623      	movlt	r3, r4
  422ae2:	b21b      	sxth	r3, r3
        img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, bottom);
  422ae4:	4298      	cmp	r0, r3
  422ae6:	bfb8      	it	lt
  422ae8:	4618      	movlt	r0, r3
  422aea:	8678      	strh	r0, [r7, #50]	; 0x32
  422aec:	e779      	b.n	4229e2 <lv_img_signal+0x5e>
            lv_coord_t w = lv_obj_get_width(img);
  422aee:	4638      	mov	r0, r7
  422af0:	4b47      	ldr	r3, [pc, #284]	; (422c10 <lv_img_signal+0x28c>)
  422af2:	4798      	blx	r3
  422af4:	4682      	mov	sl, r0
            lv_coord_t h = lv_obj_get_height(img);
  422af6:	4638      	mov	r0, r7
  422af8:	4b49      	ldr	r3, [pc, #292]	; (422c20 <lv_img_signal+0x29c>)
  422afa:	4798      	blx	r3
  422afc:	4681      	mov	r9, r0
            _lv_img_buf_get_transformed_area(&a, w, h, transf_angle, transf_zoom, &ext->pivot);
  422afe:	f108 030e 	add.w	r3, r8, #14
  422b02:	9301      	str	r3, [sp, #4]
  422b04:	b2a4      	uxth	r4, r4
  422b06:	9400      	str	r4, [sp, #0]
  422b08:	462b      	mov	r3, r5
  422b0a:	4602      	mov	r2, r0
  422b0c:	4651      	mov	r1, sl
  422b0e:	a802      	add	r0, sp, #8
  422b10:	4c44      	ldr	r4, [pc, #272]	; (422c24 <lv_img_signal+0x2a0>)
  422b12:	47a0      	blx	r4
            lv_coord_t pad_ori = img->ext_draw_pad;
  422b14:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori - a.x1);
  422b18:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
  422b1c:	1a9a      	subs	r2, r3, r2
  422b1e:	429a      	cmp	r2, r3
  422b20:	bfb8      	it	lt
  422b22:	461a      	movlt	r2, r3
  422b24:	b211      	sxth	r1, r2
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori - a.y1);
  422b26:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
  422b2a:	1a9a      	subs	r2, r3, r2
  422b2c:	428a      	cmp	r2, r1
  422b2e:	bfb8      	it	lt
  422b30:	460a      	movlt	r2, r1
  422b32:	b211      	sxth	r1, r2
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori + a.x2 - w);
  422b34:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
  422b38:	441a      	add	r2, r3
  422b3a:	eba2 020a 	sub.w	r2, r2, sl
  422b3e:	428a      	cmp	r2, r1
  422b40:	bfb8      	it	lt
  422b42:	460a      	movlt	r2, r1
  422b44:	b212      	sxth	r2, r2
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori + a.y2 - h);
  422b46:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
  422b4a:	440b      	add	r3, r1
  422b4c:	eba3 0309 	sub.w	r3, r3, r9
  422b50:	4293      	cmp	r3, r2
  422b52:	bfb8      	it	lt
  422b54:	4613      	movlt	r3, r2
  422b56:	867b      	strh	r3, [r7, #50]	; 0x32
  422b58:	e7a2      	b.n	422aa0 <lv_img_signal+0x11c>
        if(ext->w == lv_obj_get_width(img) && ext->h == lv_obj_get_height(img) &&
  422b5a:	f9b8 b00a 	ldrsh.w	fp, [r8, #10]
  422b5e:	4638      	mov	r0, r7
  422b60:	4b2f      	ldr	r3, [pc, #188]	; (422c20 <lv_img_signal+0x29c>)
  422b62:	4798      	blx	r3
  422b64:	4583      	cmp	fp, r0
  422b66:	f47f af72 	bne.w	422a4e <lv_img_signal+0xca>
  422b6a:	f1ba 0f00 	cmp.w	sl, #0
  422b6e:	bf08      	it	eq
  422b70:	f5b9 7f80 	cmpeq.w	r9, #256	; 0x100
  422b74:	d108      	bne.n	422b88 <lv_img_signal+0x204>
           (zoom != LV_IMG_ZOOM_NONE || angle != 0 || ext->pivot.x != ext->w / 2 || ext->pivot.y != ext->h / 2)) {
  422b76:	f9b8 200e 	ldrsh.w	r2, [r8, #14]
  422b7a:	f9b8 3008 	ldrsh.w	r3, [r8, #8]
  422b7e:	2102      	movs	r1, #2
  422b80:	fb93 f3f1 	sdiv	r3, r3, r1
  422b84:	429a      	cmp	r2, r3
  422b86:	d02e      	beq.n	422be6 <lv_img_signal+0x262>
            lv_coord_t w = lv_obj_get_width(img);
  422b88:	4638      	mov	r0, r7
  422b8a:	4b21      	ldr	r3, [pc, #132]	; (422c10 <lv_img_signal+0x28c>)
  422b8c:	4798      	blx	r3
  422b8e:	4681      	mov	r9, r0
            lv_coord_t h = lv_obj_get_height(img);
  422b90:	4638      	mov	r0, r7
  422b92:	4b23      	ldr	r3, [pc, #140]	; (422c20 <lv_img_signal+0x29c>)
  422b94:	4798      	blx	r3
            _lv_img_buf_get_transformed_area(&coords, w, h, angle, zoom, &ext->pivot);
  422b96:	f108 030e 	add.w	r3, r8, #14
  422b9a:	9301      	str	r3, [sp, #4]
  422b9c:	b2a4      	uxth	r4, r4
  422b9e:	9400      	str	r4, [sp, #0]
  422ba0:	4653      	mov	r3, sl
  422ba2:	4602      	mov	r2, r0
  422ba4:	4649      	mov	r1, r9
  422ba6:	a802      	add	r0, sp, #8
  422ba8:	4c1e      	ldr	r4, [pc, #120]	; (422c24 <lv_img_signal+0x2a0>)
  422baa:	47a0      	blx	r4
            coords.x1 += img->coords.x1;
  422bac:	8a3a      	ldrh	r2, [r7, #16]
  422bae:	f8bd 3008 	ldrh.w	r3, [sp, #8]
  422bb2:	4413      	add	r3, r2
  422bb4:	f8ad 3008 	strh.w	r3, [sp, #8]
            coords.y1 += img->coords.y1;
  422bb8:	8a7b      	ldrh	r3, [r7, #18]
  422bba:	f8bd 100a 	ldrh.w	r1, [sp, #10]
  422bbe:	4419      	add	r1, r3
  422bc0:	f8ad 100a 	strh.w	r1, [sp, #10]
            coords.x2 += img->coords.x1;
  422bc4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
  422bc8:	440a      	add	r2, r1
  422bca:	f8ad 200c 	strh.w	r2, [sp, #12]
            coords.y2 += img->coords.y1;
  422bce:	f8bd 200e 	ldrh.w	r2, [sp, #14]
  422bd2:	4413      	add	r3, r2
  422bd4:	f8ad 300e 	strh.w	r3, [sp, #14]
            info->result = _lv_area_is_point_on(&coords, info->point, 0);
  422bd8:	2200      	movs	r2, #0
  422bda:	6829      	ldr	r1, [r5, #0]
  422bdc:	a802      	add	r0, sp, #8
  422bde:	4b12      	ldr	r3, [pc, #72]	; (422c28 <lv_img_signal+0x2a4>)
  422be0:	4798      	blx	r3
  422be2:	7128      	strb	r0, [r5, #4]
           (zoom != LV_IMG_ZOOM_NONE || angle != 0 || ext->pivot.x != ext->w / 2 || ext->pivot.y != ext->h / 2)) {
  422be4:	e6fd      	b.n	4229e2 <lv_img_signal+0x5e>
  422be6:	f9b8 2010 	ldrsh.w	r2, [r8, #16]
  422bea:	f9b8 300a 	ldrsh.w	r3, [r8, #10]
  422bee:	fb93 f3f1 	sdiv	r3, r3, r1
  422bf2:	429a      	cmp	r2, r3
  422bf4:	d1c8      	bne.n	422b88 <lv_img_signal+0x204>
  422bf6:	e72a      	b.n	422a4e <lv_img_signal+0xca>
  422bf8:	20414884 	.word	0x20414884
  422bfc:	00408115 	.word	0x00408115
  422c00:	0041679d 	.word	0x0041679d
  422c04:	00421f79 	.word	0x00421f79
  422c08:	0042fe94 	.word	0x0042fe94
  422c0c:	004083d1 	.word	0x004083d1
  422c10:	00405bc1 	.word	0x00405bc1
  422c14:	00408361 	.word	0x00408361
  422c18:	00422619 	.word	0x00422619
  422c1c:	00407485 	.word	0x00407485
  422c20:	00405bf1 	.word	0x00405bf1
  422c24:	00412919 	.word	0x00412919
  422c28:	00415705 	.word	0x00415705

00422c2c <lv_label_get_dot_tmp>:
 * Get the stored dot_tmp characters
 * @param label pointer to label object
 * @return char pointer to a stored characters. Is *not* necessarily NULL-terminated.
 */
static char * lv_label_get_dot_tmp(lv_obj_t * label)
{
  422c2c:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  422c2e:	4b05      	ldr	r3, [pc, #20]	; (422c44 <lv_label_get_dot_tmp+0x18>)
  422c30:	4798      	blx	r3
    if(ext->dot_tmp_alloc) {
  422c32:	7cc3      	ldrb	r3, [r0, #19]
  422c34:	f013 0f01 	tst.w	r3, #1
  422c38:	d101      	bne.n	422c3e <lv_label_get_dot_tmp+0x12>
        return ext->dot.tmp_ptr;
    }
    else {
        return ext->dot.tmp;
  422c3a:	3004      	adds	r0, #4
    }
}
  422c3c:	bd08      	pop	{r3, pc}
        return ext->dot.tmp_ptr;
  422c3e:	6840      	ldr	r0, [r0, #4]
  422c40:	bd08      	pop	{r3, pc}
  422c42:	bf00      	nop
  422c44:	00408115 	.word	0x00408115

00422c48 <lv_label_dot_tmp_free>:
 * Free the dot_tmp_ptr field if it was previously allocated.
 * Always clears the field
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * label)
{
  422c48:	b510      	push	{r4, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  422c4a:	4b09      	ldr	r3, [pc, #36]	; (422c70 <lv_label_dot_tmp_free+0x28>)
  422c4c:	4798      	blx	r3
  422c4e:	4604      	mov	r4, r0
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
  422c50:	7cc3      	ldrb	r3, [r0, #19]
  422c52:	f013 0f01 	tst.w	r3, #1
  422c56:	d003      	beq.n	422c60 <lv_label_dot_tmp_free+0x18>
  422c58:	6840      	ldr	r0, [r0, #4]
  422c5a:	b108      	cbz	r0, 422c60 <lv_label_dot_tmp_free+0x18>
        lv_mem_free(ext->dot.tmp_ptr);
  422c5c:	4b05      	ldr	r3, [pc, #20]	; (422c74 <lv_label_dot_tmp_free+0x2c>)
  422c5e:	4798      	blx	r3
    }
    ext->dot_tmp_alloc = false;
  422c60:	7ce3      	ldrb	r3, [r4, #19]
  422c62:	f36f 0300 	bfc	r3, #0, #1
  422c66:	74e3      	strb	r3, [r4, #19]
    ext->dot.tmp_ptr   = NULL;
  422c68:	2300      	movs	r3, #0
  422c6a:	6063      	str	r3, [r4, #4]
  422c6c:	bd10      	pop	{r4, pc}
  422c6e:	bf00      	nop
  422c70:	00408115 	.word	0x00408115
  422c74:	0041679d 	.word	0x0041679d

00422c78 <lv_label_revert_dots>:
{
  422c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  422c7a:	4607      	mov	r7, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  422c7c:	4b16      	ldr	r3, [pc, #88]	; (422cd8 <lv_label_revert_dots+0x60>)
  422c7e:	4798      	blx	r3
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
  422c80:	7c83      	ldrb	r3, [r0, #18]
  422c82:	f003 0307 	and.w	r3, r3, #7
  422c86:	2b02      	cmp	r3, #2
  422c88:	d000      	beq.n	422c8c <lv_label_revert_dots+0x14>
  422c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  422c8c:	4604      	mov	r4, r0
    if(ext->dot_end == LV_LABEL_DOT_END_INV) return;
  422c8e:	6881      	ldr	r1, [r0, #8]
  422c90:	f64f 73ff 	movw	r3, #65535	; 0xffff
  422c94:	4299      	cmp	r1, r3
  422c96:	d0f8      	beq.n	422c8a <lv_label_revert_dots+0x12>
    uint32_t byte_i   = _lv_txt_encoded_get_byte_id(ext->text, letter_i);
  422c98:	4b10      	ldr	r3, [pc, #64]	; (422cdc <lv_label_revert_dots+0x64>)
  422c9a:	681b      	ldr	r3, [r3, #0]
  422c9c:	3903      	subs	r1, #3
  422c9e:	6800      	ldr	r0, [r0, #0]
  422ca0:	4798      	blx	r3
  422ca2:	4606      	mov	r6, r0
    char * dot_tmp = lv_label_get_dot_tmp(label);
  422ca4:	4638      	mov	r0, r7
  422ca6:	4b0e      	ldr	r3, [pc, #56]	; (422ce0 <lv_label_revert_dots+0x68>)
  422ca8:	4798      	blx	r3
    uint8_t i      = 0;
  422caa:	2300      	movs	r3, #0
    while(ext->text[byte_i + i] != '\0') {
  422cac:	e003      	b.n	422cb6 <lv_label_revert_dots+0x3e>
        ext->text[byte_i + i] = dot_tmp[i];
  422cae:	5cc5      	ldrb	r5, [r0, r3]
  422cb0:	548d      	strb	r5, [r1, r2]
        i++;
  422cb2:	3301      	adds	r3, #1
  422cb4:	b2db      	uxtb	r3, r3
    while(ext->text[byte_i + i] != '\0') {
  422cb6:	6821      	ldr	r1, [r4, #0]
  422cb8:	18f2      	adds	r2, r6, r3
  422cba:	eb01 0e02 	add.w	lr, r1, r2
  422cbe:	5c8d      	ldrb	r5, [r1, r2]
  422cc0:	2d00      	cmp	r5, #0
  422cc2:	d1f4      	bne.n	422cae <lv_label_revert_dots+0x36>
    ext->text[byte_i + i] = dot_tmp[i];
  422cc4:	5cc3      	ldrb	r3, [r0, r3]
  422cc6:	f88e 3000 	strb.w	r3, [lr]
    lv_label_dot_tmp_free(label);
  422cca:	4638      	mov	r0, r7
  422ccc:	4b05      	ldr	r3, [pc, #20]	; (422ce4 <lv_label_revert_dots+0x6c>)
  422cce:	4798      	blx	r3
    ext->dot_end = LV_LABEL_DOT_END_INV;
  422cd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
  422cd4:	60a3      	str	r3, [r4, #8]
  422cd6:	e7d8      	b.n	422c8a <lv_label_revert_dots+0x12>
  422cd8:	00408115 	.word	0x00408115
  422cdc:	204000b0 	.word	0x204000b0
  422ce0:	00422c2d 	.word	0x00422c2d
  422ce4:	00422c49 	.word	0x00422c49

00422ce8 <get_txt_coords>:
}

static void get_txt_coords(const lv_obj_t * label, lv_area_t * area)
{
  422ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  422cec:	4606      	mov	r6, r0
  422cee:	460c      	mov	r4, r1
    lv_obj_get_coords(label, area);
  422cf0:	4b12      	ldr	r3, [pc, #72]	; (422d3c <get_txt_coords+0x54>)
  422cf2:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  422cf4:	2212      	movs	r2, #18
  422cf6:	2100      	movs	r1, #0
  422cf8:	4630      	mov	r0, r6
  422cfa:	4d11      	ldr	r5, [pc, #68]	; (422d40 <get_txt_coords+0x58>)
  422cfc:	47a8      	blx	r5
  422cfe:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  422d00:	2213      	movs	r2, #19
  422d02:	2100      	movs	r1, #0
  422d04:	4630      	mov	r0, r6
  422d06:	47a8      	blx	r5
  422d08:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  422d0a:	2210      	movs	r2, #16
  422d0c:	2100      	movs	r1, #0
  422d0e:	4630      	mov	r0, r6
  422d10:	47a8      	blx	r5
  422d12:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  422d14:	2211      	movs	r2, #17
  422d16:	2100      	movs	r1, #0
  422d18:	4630      	mov	r0, r6
  422d1a:	47a8      	blx	r5

    lv_coord_t left   = lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN);
    lv_coord_t right  = lv_obj_get_style_pad_right(label, LV_LABEL_PART_MAIN);
    lv_coord_t top    = lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN);
    lv_coord_t bottom = lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
    area->x1 += left;
  422d1c:	8823      	ldrh	r3, [r4, #0]
  422d1e:	4498      	add	r8, r3
  422d20:	f8a4 8000 	strh.w	r8, [r4]
    area->x2 -= right;
  422d24:	88a3      	ldrh	r3, [r4, #4]
  422d26:	eba3 0309 	sub.w	r3, r3, r9
  422d2a:	80a3      	strh	r3, [r4, #4]
    area->y1 += top;
  422d2c:	8863      	ldrh	r3, [r4, #2]
  422d2e:	441f      	add	r7, r3
  422d30:	8067      	strh	r7, [r4, #2]
    area->y2 -= bottom;
  422d32:	88e3      	ldrh	r3, [r4, #6]
  422d34:	1a18      	subs	r0, r3, r0
  422d36:	80e0      	strh	r0, [r4, #6]
  422d38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  422d3c:	00405b01 	.word	0x00405b01
  422d40:	00407485 	.word	0x00407485

00422d44 <lv_label_set_dot_tmp>:
{
  422d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  422d46:	4606      	mov	r6, r0
  422d48:	460f      	mov	r7, r1
  422d4a:	4615      	mov	r5, r2
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  422d4c:	4b13      	ldr	r3, [pc, #76]	; (422d9c <lv_label_set_dot_tmp+0x58>)
  422d4e:	4798      	blx	r3
  422d50:	4604      	mov	r4, r0
    lv_label_dot_tmp_free(label); /* Deallocate any existing space */
  422d52:	4630      	mov	r0, r6
  422d54:	4b12      	ldr	r3, [pc, #72]	; (422da0 <lv_label_set_dot_tmp+0x5c>)
  422d56:	4798      	blx	r3
    if(len > sizeof(char *)) {
  422d58:	2d04      	cmp	r5, #4
  422d5a:	d911      	bls.n	422d80 <lv_label_set_dot_tmp+0x3c>
        ext->dot.tmp_ptr = lv_mem_alloc(len + 1);
  422d5c:	1c68      	adds	r0, r5, #1
  422d5e:	4b11      	ldr	r3, [pc, #68]	; (422da4 <lv_label_set_dot_tmp+0x60>)
  422d60:	4798      	blx	r3
  422d62:	6060      	str	r0, [r4, #4]
        if(ext->dot.tmp_ptr == NULL) {
  422d64:	b1b8      	cbz	r0, 422d96 <lv_label_set_dot_tmp+0x52>
        _lv_memcpy(ext->dot.tmp_ptr, data, len);
  422d66:	462a      	mov	r2, r5
  422d68:	4639      	mov	r1, r7
  422d6a:	4b0f      	ldr	r3, [pc, #60]	; (422da8 <lv_label_set_dot_tmp+0x64>)
  422d6c:	4798      	blx	r3
        ext->dot.tmp_ptr[len] = '\0';
  422d6e:	6863      	ldr	r3, [r4, #4]
  422d70:	2200      	movs	r2, #0
  422d72:	555a      	strb	r2, [r3, r5]
        ext->dot_tmp_alloc    = true;
  422d74:	7ce3      	ldrb	r3, [r4, #19]
  422d76:	f043 0301 	orr.w	r3, r3, #1
  422d7a:	74e3      	strb	r3, [r4, #19]
    return true;
  422d7c:	2001      	movs	r0, #1
  422d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ext->dot_tmp_alloc = false;
  422d80:	7ce3      	ldrb	r3, [r4, #19]
  422d82:	f36f 0300 	bfc	r3, #0, #1
  422d86:	74e3      	strb	r3, [r4, #19]
        _lv_memcpy(ext->dot.tmp, data, len);
  422d88:	462a      	mov	r2, r5
  422d8a:	4639      	mov	r1, r7
  422d8c:	1d20      	adds	r0, r4, #4
  422d8e:	4b06      	ldr	r3, [pc, #24]	; (422da8 <lv_label_set_dot_tmp+0x64>)
  422d90:	4798      	blx	r3
    return true;
  422d92:	2001      	movs	r0, #1
  422d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return false;
  422d96:	2000      	movs	r0, #0
}
  422d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  422d9a:	bf00      	nop
  422d9c:	00408115 	.word	0x00408115
  422da0:	00422c49 	.word	0x00422c49
  422da4:	004166d9 	.word	0x004166d9
  422da8:	004168e9 	.word	0x004168e9

00422dac <lv_label_set_offset_y>:
{
  422dac:	b538      	push	{r3, r4, r5, lr}
  422dae:	4604      	mov	r4, r0
  422db0:	460d      	mov	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  422db2:	4b03      	ldr	r3, [pc, #12]	; (422dc0 <lv_label_set_offset_y+0x14>)
  422db4:	4798      	blx	r3
    ext->offset.y        = y;
  422db6:	8205      	strh	r5, [r0, #16]
    lv_obj_invalidate(label);
  422db8:	4620      	mov	r0, r4
  422dba:	4b02      	ldr	r3, [pc, #8]	; (422dc4 <lv_label_set_offset_y+0x18>)
  422dbc:	4798      	blx	r3
  422dbe:	bd38      	pop	{r3, r4, r5, pc}
  422dc0:	00408115 	.word	0x00408115
  422dc4:	00405f99 	.word	0x00405f99

00422dc8 <lv_label_set_offset_x>:
{
  422dc8:	b538      	push	{r3, r4, r5, lr}
  422dca:	4604      	mov	r4, r0
  422dcc:	460d      	mov	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  422dce:	4b03      	ldr	r3, [pc, #12]	; (422ddc <lv_label_set_offset_x+0x14>)
  422dd0:	4798      	blx	r3
    ext->offset.x        = x;
  422dd2:	81c5      	strh	r5, [r0, #14]
    lv_obj_invalidate(label);
  422dd4:	4620      	mov	r0, r4
  422dd6:	4b02      	ldr	r3, [pc, #8]	; (422de0 <lv_label_set_offset_x+0x18>)
  422dd8:	4798      	blx	r3
  422dda:	bd38      	pop	{r3, r4, r5, pc}
  422ddc:	00408115 	.word	0x00408115
  422de0:	00405f99 	.word	0x00405f99

00422de4 <lv_label_set_align>:
{
  422de4:	b538      	push	{r3, r4, r5, lr}
  422de6:	4604      	mov	r4, r0
  422de8:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  422dea:	4b0c      	ldr	r3, [pc, #48]	; (422e1c <lv_label_set_align+0x38>)
  422dec:	4798      	blx	r3
  422dee:	b928      	cbnz	r0, 422dfc <lv_label_set_align+0x18>
  422df0:	4622      	mov	r2, r4
  422df2:	2300      	movs	r3, #0
  422df4:	480a      	ldr	r0, [pc, #40]	; (422e20 <lv_label_set_align+0x3c>)
  422df6:	490b      	ldr	r1, [pc, #44]	; (422e24 <lv_label_set_align+0x40>)
  422df8:	4788      	blx	r1
  422dfa:	e7fe      	b.n	422dfa <lv_label_set_align+0x16>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  422dfc:	4620      	mov	r0, r4
  422dfe:	4b0a      	ldr	r3, [pc, #40]	; (422e28 <lv_label_set_align+0x44>)
  422e00:	4798      	blx	r3
    if(ext->align == align) return;
  422e02:	7c83      	ldrb	r3, [r0, #18]
  422e04:	f3c3 1301 	ubfx	r3, r3, #4, #2
  422e08:	42ab      	cmp	r3, r5
  422e0a:	d006      	beq.n	422e1a <lv_label_set_align+0x36>
    ext->align = align;
  422e0c:	7c83      	ldrb	r3, [r0, #18]
  422e0e:	f365 1305 	bfi	r3, r5, #4, #2
  422e12:	7483      	strb	r3, [r0, #18]
    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
  422e14:	4620      	mov	r0, r4
  422e16:	4b05      	ldr	r3, [pc, #20]	; (422e2c <lv_label_set_align+0x48>)
  422e18:	4798      	blx	r3
  422e1a:	bd38      	pop	{r3, r4, r5, pc}
  422e1c:	00415f95 	.word	0x00415f95
  422e20:	0042c728 	.word	0x0042c728
  422e24:	00415fa1 	.word	0x00415fa1
  422e28:	00408115 	.word	0x00408115
  422e2c:	00405f99 	.word	0x00405f99

00422e30 <lv_label_get_text>:
{
  422e30:	b510      	push	{r4, lr}
  422e32:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  422e34:	4b06      	ldr	r3, [pc, #24]	; (422e50 <lv_label_get_text+0x20>)
  422e36:	4798      	blx	r3
  422e38:	b928      	cbnz	r0, 422e46 <lv_label_get_text+0x16>
  422e3a:	4622      	mov	r2, r4
  422e3c:	2300      	movs	r3, #0
  422e3e:	4805      	ldr	r0, [pc, #20]	; (422e54 <lv_label_get_text+0x24>)
  422e40:	4905      	ldr	r1, [pc, #20]	; (422e58 <lv_label_get_text+0x28>)
  422e42:	4788      	blx	r1
  422e44:	e7fe      	b.n	422e44 <lv_label_get_text+0x14>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  422e46:	4620      	mov	r0, r4
  422e48:	4b04      	ldr	r3, [pc, #16]	; (422e5c <lv_label_get_text+0x2c>)
  422e4a:	4798      	blx	r3
}
  422e4c:	6800      	ldr	r0, [r0, #0]
  422e4e:	bd10      	pop	{r4, pc}
  422e50:	00415f95 	.word	0x00415f95
  422e54:	0042c728 	.word	0x0042c728
  422e58:	00415fa1 	.word	0x00415fa1
  422e5c:	00408115 	.word	0x00408115

00422e60 <lv_label_get_long_mode>:
{
  422e60:	b510      	push	{r4, lr}
  422e62:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  422e64:	4b07      	ldr	r3, [pc, #28]	; (422e84 <lv_label_get_long_mode+0x24>)
  422e66:	4798      	blx	r3
  422e68:	b928      	cbnz	r0, 422e76 <lv_label_get_long_mode+0x16>
  422e6a:	4622      	mov	r2, r4
  422e6c:	2300      	movs	r3, #0
  422e6e:	4806      	ldr	r0, [pc, #24]	; (422e88 <lv_label_get_long_mode+0x28>)
  422e70:	4906      	ldr	r1, [pc, #24]	; (422e8c <lv_label_get_long_mode+0x2c>)
  422e72:	4788      	blx	r1
  422e74:	e7fe      	b.n	422e74 <lv_label_get_long_mode+0x14>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  422e76:	4620      	mov	r0, r4
  422e78:	4b05      	ldr	r3, [pc, #20]	; (422e90 <lv_label_get_long_mode+0x30>)
  422e7a:	4798      	blx	r3
    return ext->long_mode;
  422e7c:	7c80      	ldrb	r0, [r0, #18]
}
  422e7e:	f000 0007 	and.w	r0, r0, #7
  422e82:	bd10      	pop	{r4, pc}
  422e84:	00415f95 	.word	0x00415f95
  422e88:	0042c728 	.word	0x0042c728
  422e8c:	00415fa1 	.word	0x00415fa1
  422e90:	00408115 	.word	0x00408115

00422e94 <lv_label_get_align>:
{
  422e94:	b510      	push	{r4, lr}
  422e96:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  422e98:	4b09      	ldr	r3, [pc, #36]	; (422ec0 <lv_label_get_align+0x2c>)
  422e9a:	4798      	blx	r3
  422e9c:	b928      	cbnz	r0, 422eaa <lv_label_get_align+0x16>
  422e9e:	4622      	mov	r2, r4
  422ea0:	2300      	movs	r3, #0
  422ea2:	4808      	ldr	r0, [pc, #32]	; (422ec4 <lv_label_get_align+0x30>)
  422ea4:	4908      	ldr	r1, [pc, #32]	; (422ec8 <lv_label_get_align+0x34>)
  422ea6:	4788      	blx	r1
  422ea8:	e7fe      	b.n	422ea8 <lv_label_get_align+0x14>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  422eaa:	4620      	mov	r0, r4
  422eac:	4b07      	ldr	r3, [pc, #28]	; (422ecc <lv_label_get_align+0x38>)
  422eae:	4798      	blx	r3
    lv_label_align_t align = ext->align;
  422eb0:	7c80      	ldrb	r0, [r0, #18]
  422eb2:	f3c0 1001 	ubfx	r0, r0, #4, #2
    if(align == LV_LABEL_ALIGN_AUTO) {
  422eb6:	2803      	cmp	r0, #3
  422eb8:	d000      	beq.n	422ebc <lv_label_get_align+0x28>
}
  422eba:	bd10      	pop	{r4, pc}
        align = LV_LABEL_ALIGN_LEFT;
  422ebc:	2000      	movs	r0, #0
  422ebe:	e7fc      	b.n	422eba <lv_label_get_align+0x26>
  422ec0:	00415f95 	.word	0x00415f95
  422ec4:	0042c728 	.word	0x0042c728
  422ec8:	00415fa1 	.word	0x00415fa1
  422ecc:	00408115 	.word	0x00408115

00422ed0 <lv_label_get_recolor>:
{
  422ed0:	b510      	push	{r4, lr}
  422ed2:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  422ed4:	4b07      	ldr	r3, [pc, #28]	; (422ef4 <lv_label_get_recolor+0x24>)
  422ed6:	4798      	blx	r3
  422ed8:	b928      	cbnz	r0, 422ee6 <lv_label_get_recolor+0x16>
  422eda:	4622      	mov	r2, r4
  422edc:	2300      	movs	r3, #0
  422ede:	4806      	ldr	r0, [pc, #24]	; (422ef8 <lv_label_get_recolor+0x28>)
  422ee0:	4906      	ldr	r1, [pc, #24]	; (422efc <lv_label_get_recolor+0x2c>)
  422ee2:	4788      	blx	r1
  422ee4:	e7fe      	b.n	422ee4 <lv_label_get_recolor+0x14>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  422ee6:	4620      	mov	r0, r4
  422ee8:	4b05      	ldr	r3, [pc, #20]	; (422f00 <lv_label_get_recolor+0x30>)
  422eea:	4798      	blx	r3
    return ext->recolor == 0 ? false : true;
  422eec:	7c80      	ldrb	r0, [r0, #18]
}
  422eee:	f3c0 1080 	ubfx	r0, r0, #6, #1
  422ef2:	bd10      	pop	{r4, pc}
  422ef4:	00415f95 	.word	0x00415f95
  422ef8:	0042c728 	.word	0x0042c728
  422efc:	00415fa1 	.word	0x00415fa1
  422f00:	00408115 	.word	0x00408115

00422f04 <lv_label_get_letter_on>:
{
  422f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  422f08:	b08f      	sub	sp, #60	; 0x3c
  422f0a:	4604      	mov	r4, r0
  422f0c:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  422f0e:	4b91      	ldr	r3, [pc, #580]	; (423154 <lv_label_get_letter_on+0x250>)
  422f10:	4798      	blx	r3
  422f12:	b928      	cbnz	r0, 422f20 <lv_label_get_letter_on+0x1c>
  422f14:	4622      	mov	r2, r4
  422f16:	2300      	movs	r3, #0
  422f18:	488f      	ldr	r0, [pc, #572]	; (423158 <lv_label_get_letter_on+0x254>)
  422f1a:	4990      	ldr	r1, [pc, #576]	; (42315c <lv_label_get_letter_on+0x258>)
  422f1c:	4788      	blx	r1
  422f1e:	e7fe      	b.n	422f1e <lv_label_get_letter_on+0x1a>
    LV_ASSERT_NULL(pos_in);
  422f20:	4628      	mov	r0, r5
  422f22:	4b8c      	ldr	r3, [pc, #560]	; (423154 <lv_label_get_letter_on+0x250>)
  422f24:	4798      	blx	r3
  422f26:	b928      	cbnz	r0, 422f34 <lv_label_get_letter_on+0x30>
  422f28:	462a      	mov	r2, r5
  422f2a:	2300      	movs	r3, #0
  422f2c:	488a      	ldr	r0, [pc, #552]	; (423158 <lv_label_get_letter_on+0x254>)
  422f2e:	498b      	ldr	r1, [pc, #556]	; (42315c <lv_label_get_letter_on+0x258>)
  422f30:	4788      	blx	r1
  422f32:	e7fe      	b.n	422f32 <lv_label_get_letter_on+0x2e>
    pos.x = pos_in->x - lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN);
  422f34:	882f      	ldrh	r7, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  422f36:	2212      	movs	r2, #18
  422f38:	2100      	movs	r1, #0
  422f3a:	4620      	mov	r0, r4
  422f3c:	4e88      	ldr	r6, [pc, #544]	; (423160 <lv_label_get_letter_on+0x25c>)
  422f3e:	47b0      	blx	r6
  422f40:	b280      	uxth	r0, r0
  422f42:	1a3f      	subs	r7, r7, r0
  422f44:	b23b      	sxth	r3, r7
  422f46:	9304      	str	r3, [sp, #16]
    pos.y = pos_in->y - lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN);
  422f48:	886d      	ldrh	r5, [r5, #2]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  422f4a:	2210      	movs	r2, #16
  422f4c:	2100      	movs	r1, #0
  422f4e:	4620      	mov	r0, r4
  422f50:	47b0      	blx	r6
  422f52:	b280      	uxth	r0, r0
  422f54:	1a2d      	subs	r5, r5, r0
  422f56:	b22b      	sxth	r3, r5
  422f58:	9305      	str	r3, [sp, #20]
    get_txt_coords(label, &txt_coords);
  422f5a:	a90c      	add	r1, sp, #48	; 0x30
  422f5c:	4620      	mov	r0, r4
  422f5e:	4b81      	ldr	r3, [pc, #516]	; (423164 <lv_label_get_letter_on+0x260>)
  422f60:	4798      	blx	r3
    const char * txt         = lv_label_get_text(label);
  422f62:	4620      	mov	r0, r4
  422f64:	4b80      	ldr	r3, [pc, #512]	; (423168 <lv_label_get_letter_on+0x264>)
  422f66:	4798      	blx	r3
  422f68:	4680      	mov	r8, r0
    lv_label_ext_t * ext     = lv_obj_get_ext_attr(label);
  422f6a:	4620      	mov	r0, r4
  422f6c:	4b7f      	ldr	r3, [pc, #508]	; (42316c <lv_label_get_letter_on+0x268>)
  422f6e:	4798      	blx	r3
  422f70:	4605      	mov	r5, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  422f72:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
  422f76:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
  422f7a:	1a9b      	subs	r3, r3, r2
  422f7c:	b29b      	uxth	r3, r3
  422f7e:	3301      	adds	r3, #1
  422f80:	b21b      	sxth	r3, r3
  422f82:	9307      	str	r3, [sp, #28]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  422f84:	f248 028e 	movw	r2, #32910	; 0x808e
  422f88:	2100      	movs	r1, #0
  422f8a:	4620      	mov	r0, r4
  422f8c:	4b78      	ldr	r3, [pc, #480]	; (423170 <lv_label_get_letter_on+0x26c>)
  422f8e:	4798      	blx	r3
  422f90:	4607      	mov	r7, r0
  422f92:	9002      	str	r0, [sp, #8]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  422f94:	f248 0281 	movw	r2, #32897	; 0x8081
  422f98:	2100      	movs	r1, #0
  422f9a:	4620      	mov	r0, r4
  422f9c:	47b0      	blx	r6
  422f9e:	9006      	str	r0, [sp, #24]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
  422fa0:	f248 0280 	movw	r2, #32896	; 0x8080
  422fa4:	2100      	movs	r1, #0
  422fa6:	4620      	mov	r0, r4
  422fa8:	47b0      	blx	r6
  422faa:	9003      	str	r0, [sp, #12]
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
  422fac:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
  422fb0:	7cab      	ldrb	r3, [r5, #18]
  422fb2:	f013 0f40 	tst.w	r3, #64	; 0x40
  422fb6:	d133      	bne.n	423020 <lv_label_get_letter_on+0x11c>
    lv_txt_flag_t flag       = LV_TXT_FLAG_NONE;
  422fb8:	2500      	movs	r5, #0
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
  422fba:	f013 0f80 	tst.w	r3, #128	; 0x80
  422fbe:	d001      	beq.n	422fc4 <lv_label_get_letter_on+0xc0>
  422fc0:	f045 0502 	orr.w	r5, r5, #2
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
  422fc4:	f013 0f07 	tst.w	r3, #7
  422fc8:	d101      	bne.n	422fce <lv_label_get_letter_on+0xca>
  422fca:	f045 0510 	orr.w	r5, r5, #16
    lv_label_align_t align = lv_label_get_align(label);
  422fce:	4620      	mov	r0, r4
  422fd0:	4b68      	ldr	r3, [pc, #416]	; (423174 <lv_label_get_letter_on+0x270>)
  422fd2:	4798      	blx	r3
  422fd4:	4681      	mov	r9, r0
    if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
  422fd6:	2801      	cmp	r0, #1
  422fd8:	d101      	bne.n	422fde <lv_label_get_letter_on+0xda>
  422fda:	f045 0504 	orr.w	r5, r5, #4
    if(align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
  422fde:	f1b9 0f02 	cmp.w	r9, #2
  422fe2:	d101      	bne.n	422fe8 <lv_label_get_letter_on+0xe4>
  422fe4:	f045 0508 	orr.w	r5, r5, #8
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
  422fe8:	2400      	movs	r4, #0
  422fea:	4626      	mov	r6, r4
    while(txt[line_start] != '\0') {
  422fec:	eb08 0b06 	add.w	fp, r8, r6
  422ff0:	f818 3006 	ldrb.w	r3, [r8, r6]
  422ff4:	2b00      	cmp	r3, #0
  422ff6:	d055      	beq.n	4230a4 <lv_label_get_letter_on+0x1a0>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
  422ff8:	9500      	str	r5, [sp, #0]
  422ffa:	9b07      	ldr	r3, [sp, #28]
  422ffc:	9a03      	ldr	r2, [sp, #12]
  422ffe:	9902      	ldr	r1, [sp, #8]
  423000:	4658      	mov	r0, fp
  423002:	4f5d      	ldr	r7, [pc, #372]	; (423178 <lv_label_get_letter_on+0x274>)
  423004:	47b8      	blx	r7
  423006:	4430      	add	r0, r6
        if(pos.y <= y + letter_height) {
  423008:	eb04 030a 	add.w	r3, r4, sl
  42300c:	9a05      	ldr	r2, [sp, #20]
  42300e:	429a      	cmp	r2, r3
  423010:	dd08      	ble.n	423024 <lv_label_get_letter_on+0x120>
        y += letter_height + line_space;
  423012:	9b06      	ldr	r3, [sp, #24]
  423014:	4453      	add	r3, sl
  423016:	fa14 f383 	uxtah	r3, r4, r3
  42301a:	b21c      	sxth	r4, r3
        line_start = new_line_start;
  42301c:	4606      	mov	r6, r0
  42301e:	e7e5      	b.n	422fec <lv_label_get_letter_on+0xe8>
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
  423020:	2501      	movs	r5, #1
  423022:	e7ca      	b.n	422fba <lv_label_get_letter_on+0xb6>
  423024:	4607      	mov	r7, r0
            uint32_t tmp = new_line_start;
  423026:	a90e      	add	r1, sp, #56	; 0x38
  423028:	f841 0d14 	str.w	r0, [r1, #-20]!
            letter = _lv_txt_encoded_prev(txt, &tmp);
  42302c:	4b53      	ldr	r3, [pc, #332]	; (42317c <lv_label_get_letter_on+0x278>)
  42302e:	681b      	ldr	r3, [r3, #0]
  423030:	4640      	mov	r0, r8
  423032:	4798      	blx	r3
            if(letter != '\n' && txt[new_line_start] == '\0') new_line_start++;
  423034:	280a      	cmp	r0, #10
  423036:	d003      	beq.n	423040 <lv_label_get_letter_on+0x13c>
  423038:	f818 3007 	ldrb.w	r3, [r8, r7]
  42303c:	b903      	cbnz	r3, 423040 <lv_label_get_letter_on+0x13c>
  42303e:	3701      	adds	r7, #1
    if(align == LV_LABEL_ALIGN_CENTER) {
  423040:	f1b9 0f01 	cmp.w	r9, #1
  423044:	d130      	bne.n	4230a8 <lv_label_get_letter_on+0x1a4>
        line_w = _lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
  423046:	9500      	str	r5, [sp, #0]
  423048:	9b03      	ldr	r3, [sp, #12]
  42304a:	9a02      	ldr	r2, [sp, #8]
  42304c:	1bb9      	subs	r1, r7, r6
  42304e:	4658      	mov	r0, fp
  423050:	4c4b      	ldr	r4, [pc, #300]	; (423180 <lv_label_get_letter_on+0x27c>)
  423052:	47a0      	blx	r4
  423054:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
  423058:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
  42305c:	1a9b      	subs	r3, r3, r2
  42305e:	b29b      	uxth	r3, r3
  423060:	3301      	adds	r3, #1
  423062:	b21b      	sxth	r3, r3
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
  423064:	2b00      	cmp	r3, #0
  423066:	da00      	bge.n	42306a <lv_label_get_letter_on+0x166>
  423068:	3301      	adds	r3, #1
  42306a:	105c      	asrs	r4, r3, #1
  42306c:	4603      	mov	r3, r0
  42306e:	2800      	cmp	r0, #0
  423070:	da00      	bge.n	423074 <lv_label_get_letter_on+0x170>
  423072:	1c43      	adds	r3, r0, #1
  423074:	f343 034f 	sbfx	r3, r3, #1, #16
  423078:	1ae4      	subs	r4, r4, r3
  42307a:	b224      	sxth	r4, r4
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
  42307c:	2300      	movs	r3, #0
  42307e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    uint32_t i = 0;
  423082:	930a      	str	r3, [sp, #40]	; 0x28
    if(new_line_start > 0) {
  423084:	2f00      	cmp	r7, #0
  423086:	d162      	bne.n	42314e <lv_label_get_letter_on+0x24a>
    logical_pos = _lv_txt_encoded_get_char_id(bidi_txt, i);
  423088:	4c3e      	ldr	r4, [pc, #248]	; (423184 <lv_label_get_letter_on+0x280>)
  42308a:	6823      	ldr	r3, [r4, #0]
  42308c:	990a      	ldr	r1, [sp, #40]	; 0x28
  42308e:	4658      	mov	r0, fp
  423090:	4798      	blx	r3
  423092:	4605      	mov	r5, r0
    return logical_pos + _lv_txt_encoded_get_char_id(txt, line_start);
  423094:	6823      	ldr	r3, [r4, #0]
  423096:	4631      	mov	r1, r6
  423098:	4640      	mov	r0, r8
  42309a:	4798      	blx	r3
}
  42309c:	4428      	add	r0, r5
  42309e:	b00f      	add	sp, #60	; 0x3c
  4230a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4230a4:	4637      	mov	r7, r6
  4230a6:	e7cb      	b.n	423040 <lv_label_get_letter_on+0x13c>
    else if(align == LV_LABEL_ALIGN_RIGHT) {
  4230a8:	f1b9 0f02 	cmp.w	r9, #2
  4230ac:	d111      	bne.n	4230d2 <lv_label_get_letter_on+0x1ce>
        line_w = _lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
  4230ae:	9500      	str	r5, [sp, #0]
  4230b0:	9b03      	ldr	r3, [sp, #12]
  4230b2:	9a02      	ldr	r2, [sp, #8]
  4230b4:	1bb9      	subs	r1, r7, r6
  4230b6:	4658      	mov	r0, fp
  4230b8:	4c31      	ldr	r4, [pc, #196]	; (423180 <lv_label_get_letter_on+0x27c>)
  4230ba:	47a0      	blx	r4
  4230bc:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
  4230c0:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
  4230c4:	1a9b      	subs	r3, r3, r2
  4230c6:	b29b      	uxth	r3, r3
  4230c8:	3301      	adds	r3, #1
  4230ca:	b29b      	uxth	r3, r3
        x += lv_area_get_width(&txt_coords) - line_w;
  4230cc:	1a1b      	subs	r3, r3, r0
  4230ce:	b21c      	sxth	r4, r3
  4230d0:	e7d4      	b.n	42307c <lv_label_get_letter_on+0x178>
    lv_coord_t x = 0;
  4230d2:	2400      	movs	r4, #0
  4230d4:	e7d2      	b.n	42307c <lv_label_get_letter_on+0x178>
            lv_coord_t gw = lv_font_get_glyph_width(font, letter, letter_next);
  4230d6:	4652      	mov	r2, sl
  4230d8:	9905      	ldr	r1, [sp, #20]
  4230da:	9802      	ldr	r0, [sp, #8]
  4230dc:	4b2a      	ldr	r3, [pc, #168]	; (423188 <lv_label_get_letter_on+0x284>)
  4230de:	4798      	blx	r3
            if(pos.x < x + gw || i + line_start == new_line_start || txt[i_act + line_start] == '\0') {
  4230e0:	fa04 f380 	sxtah	r3, r4, r0
  4230e4:	9a04      	ldr	r2, [sp, #16]
  4230e6:	429a      	cmp	r2, r3
  4230e8:	db2e      	blt.n	423148 <lv_label_get_letter_on+0x244>
  4230ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4230ec:	18f2      	adds	r2, r6, r3
  4230ee:	4297      	cmp	r7, r2
  4230f0:	d02a      	beq.n	423148 <lv_label_get_letter_on+0x244>
  4230f2:	eb06 0209 	add.w	r2, r6, r9
  4230f6:	f818 2002 	ldrb.w	r2, [r8, r2]
  4230fa:	b32a      	cbz	r2, 423148 <lv_label_get_letter_on+0x244>
            x += gw;
  4230fc:	4404      	add	r4, r0
            x += letter_space;
  4230fe:	9a03      	ldr	r2, [sp, #12]
  423100:	fa12 f484 	uxtah	r4, r2, r4
  423104:	b224      	sxth	r4, r4
            i_act = i;
  423106:	4699      	mov	r9, r3
        while(i + line_start < new_line_start) {
  423108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  42310a:	4433      	add	r3, r6
  42310c:	429f      	cmp	r7, r3
  42310e:	d9bb      	bls.n	423088 <lv_label_get_letter_on+0x184>
            uint32_t letter = _lv_txt_encoded_next(bidi_txt, &i);
  423110:	f8df a07c 	ldr.w	sl, [pc, #124]	; 423190 <lv_label_get_letter_on+0x28c>
  423114:	f8da 3000 	ldr.w	r3, [sl]
  423118:	a90a      	add	r1, sp, #40	; 0x28
  42311a:	4658      	mov	r0, fp
  42311c:	4798      	blx	r3
  42311e:	9005      	str	r0, [sp, #20]
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
  423120:	f8da 3000 	ldr.w	r3, [sl]
  423124:	2100      	movs	r1, #0
  423126:	980a      	ldr	r0, [sp, #40]	; 0x28
  423128:	4458      	add	r0, fp
  42312a:	4798      	blx	r3
  42312c:	4682      	mov	sl, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
  42312e:	f015 0f01 	tst.w	r5, #1
  423132:	d0d0      	beq.n	4230d6 <lv_label_get_letter_on+0x1d2>
                if(_lv_txt_is_cmd(&cmd_state, bidi_txt[i]) != false) {
  423134:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  423136:	f81b 1003 	ldrb.w	r1, [fp, r3]
  42313a:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
  42313e:	4b13      	ldr	r3, [pc, #76]	; (42318c <lv_label_get_letter_on+0x288>)
  423140:	4798      	blx	r3
  423142:	2800      	cmp	r0, #0
  423144:	d1e0      	bne.n	423108 <lv_label_get_letter_on+0x204>
  423146:	e7c6      	b.n	4230d6 <lv_label_get_letter_on+0x1d2>
                i = i_act;
  423148:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
                break;
  42314c:	e79c      	b.n	423088 <lv_label_get_letter_on+0x184>
  42314e:	f04f 0900 	mov.w	r9, #0
  423152:	e7d9      	b.n	423108 <lv_label_get_letter_on+0x204>
  423154:	00415f95 	.word	0x00415f95
  423158:	0042c728 	.word	0x0042c728
  42315c:	00415fa1 	.word	0x00415fa1
  423160:	00407485 	.word	0x00407485
  423164:	00422ce9 	.word	0x00422ce9
  423168:	00422e31 	.word	0x00422e31
  42316c:	00408115 	.word	0x00408115
  423170:	0040737d 	.word	0x0040737d
  423174:	00422e95 	.word	0x00422e95
  423178:	00417e19 	.word	0x00417e19
  42317c:	204000bc 	.word	0x204000bc
  423180:	00417ef9 	.word	0x00417ef9
  423184:	204000b4 	.word	0x204000b4
  423188:	00413bed 	.word	0x00413bed
  42318c:	00417c65 	.word	0x00417c65
  423190:	204000b8 	.word	0x204000b8

00423194 <lv_label_get_text_sel_start>:
{
  423194:	b510      	push	{r4, lr}
  423196:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  423198:	4b05      	ldr	r3, [pc, #20]	; (4231b0 <lv_label_get_text_sel_start+0x1c>)
  42319a:	4798      	blx	r3
  42319c:	b110      	cbz	r0, 4231a4 <lv_label_get_text_sel_start+0x10>
}
  42319e:	f64f 70ff 	movw	r0, #65535	; 0xffff
  4231a2:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  4231a4:	4622      	mov	r2, r4
  4231a6:	2300      	movs	r3, #0
  4231a8:	4802      	ldr	r0, [pc, #8]	; (4231b4 <lv_label_get_text_sel_start+0x20>)
  4231aa:	4903      	ldr	r1, [pc, #12]	; (4231b8 <lv_label_get_text_sel_start+0x24>)
  4231ac:	4788      	blx	r1
  4231ae:	e7fe      	b.n	4231ae <lv_label_get_text_sel_start+0x1a>
  4231b0:	00415f95 	.word	0x00415f95
  4231b4:	0042c728 	.word	0x0042c728
  4231b8:	00415fa1 	.word	0x00415fa1

004231bc <lv_label_get_text_sel_end>:
{
  4231bc:	b510      	push	{r4, lr}
  4231be:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  4231c0:	4b05      	ldr	r3, [pc, #20]	; (4231d8 <lv_label_get_text_sel_end+0x1c>)
  4231c2:	4798      	blx	r3
  4231c4:	b110      	cbz	r0, 4231cc <lv_label_get_text_sel_end+0x10>
}
  4231c6:	f64f 70ff 	movw	r0, #65535	; 0xffff
  4231ca:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  4231cc:	4622      	mov	r2, r4
  4231ce:	2300      	movs	r3, #0
  4231d0:	4802      	ldr	r0, [pc, #8]	; (4231dc <lv_label_get_text_sel_end+0x20>)
  4231d2:	4903      	ldr	r1, [pc, #12]	; (4231e0 <lv_label_get_text_sel_end+0x24>)
  4231d4:	4788      	blx	r1
  4231d6:	e7fe      	b.n	4231d6 <lv_label_get_text_sel_end+0x1a>
  4231d8:	00415f95 	.word	0x00415f95
  4231dc:	0042c728 	.word	0x0042c728
  4231e0:	00415fa1 	.word	0x00415fa1

004231e4 <lv_label_design>:
    if(mode == LV_DESIGN_COVER_CHK)
  4231e4:	2a02      	cmp	r2, #2
  4231e6:	f000 812a 	beq.w	42343e <lv_label_design+0x25a>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
  4231ea:	b10a      	cbz	r2, 4231f0 <lv_label_design+0xc>
    return LV_DESIGN_RES_OK;
  4231ec:	2000      	movs	r0, #0
  4231ee:	4770      	bx	lr
{
  4231f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4231f4:	b0ab      	sub	sp, #172	; 0xac
  4231f6:	460f      	mov	r7, r1
  4231f8:	4606      	mov	r6, r0
        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  4231fa:	4b92      	ldr	r3, [pc, #584]	; (423444 <lv_label_design+0x260>)
  4231fc:	4798      	blx	r3
  4231fe:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  423200:	2204      	movs	r2, #4
  423202:	2100      	movs	r1, #0
  423204:	4630      	mov	r0, r6
  423206:	4c90      	ldr	r4, [pc, #576]	; (423448 <lv_label_design+0x264>)
  423208:	47a0      	blx	r4
  42320a:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  42320c:	2205      	movs	r2, #5
  42320e:	2100      	movs	r1, #0
  423210:	4630      	mov	r0, r6
  423212:	47a0      	blx	r4
        lv_area_copy(&bg_coords, &label->coords);
  423214:	f106 0410 	add.w	r4, r6, #16
    uint8_t * d8 = (uint8_t *)dst;
  423218:	aa06      	add	r2, sp, #24
  42321a:	2308      	movs	r3, #8
  42321c:	e004      	b.n	423228 <lv_label_design+0x44>
        *d8 = *s8;
  42321e:	f814 5b01 	ldrb.w	r5, [r4], #1
  423222:	f802 5b01 	strb.w	r5, [r2], #1
        len--;
  423226:	3b01      	subs	r3, #1
    while(len) {
  423228:	2b00      	cmp	r3, #0
  42322a:	d1f8      	bne.n	42321e <lv_label_design+0x3a>
        bg_coords.x1 -= w;
  42322c:	fa1f f989 	uxth.w	r9, r9
  423230:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  423234:	eba3 0309 	sub.w	r3, r3, r9
  423238:	f8ad 3018 	strh.w	r3, [sp, #24]
        bg_coords.x2 += w;
  42323c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
  423240:	4499      	add	r9, r3
  423242:	f8ad 901c 	strh.w	r9, [sp, #28]
        bg_coords.y1 -= h;
  423246:	b280      	uxth	r0, r0
  423248:	f8bd 301a 	ldrh.w	r3, [sp, #26]
  42324c:	1a1b      	subs	r3, r3, r0
  42324e:	f8ad 301a 	strh.w	r3, [sp, #26]
        bg_coords.y2 += h;
  423252:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  423256:	4418      	add	r0, r3
  423258:	f8ad 001e 	strh.w	r0, [sp, #30]
        lv_draw_rect_dsc_init(&draw_rect_dsc);
  42325c:	a815      	add	r0, sp, #84	; 0x54
  42325e:	4b7b      	ldr	r3, [pc, #492]	; (42344c <lv_label_design+0x268>)
  423260:	4798      	blx	r3
        lv_obj_init_draw_rect_dsc(label, LV_LABEL_PART_MAIN, &draw_rect_dsc);
  423262:	aa15      	add	r2, sp, #84	; 0x54
  423264:	2100      	movs	r1, #0
  423266:	4630      	mov	r0, r6
  423268:	4b79      	ldr	r3, [pc, #484]	; (423450 <lv_label_design+0x26c>)
  42326a:	4798      	blx	r3
        lv_draw_rect(&bg_coords, clip_area, &draw_rect_dsc);
  42326c:	aa15      	add	r2, sp, #84	; 0x54
  42326e:	4639      	mov	r1, r7
  423270:	a806      	add	r0, sp, #24
  423272:	4b78      	ldr	r3, [pc, #480]	; (423454 <lv_label_design+0x270>)
  423274:	4798      	blx	r3
        get_txt_coords(label, &txt_coords);
  423276:	a908      	add	r1, sp, #32
  423278:	4630      	mov	r0, r6
  42327a:	4b77      	ldr	r3, [pc, #476]	; (423458 <lv_label_design+0x274>)
  42327c:	4798      	blx	r3
        bool is_common = _lv_area_intersect(&txt_clip, clip_area, &txt_coords);
  42327e:	aa08      	add	r2, sp, #32
  423280:	4639      	mov	r1, r7
  423282:	a80a      	add	r0, sp, #40	; 0x28
  423284:	4b75      	ldr	r3, [pc, #468]	; (42345c <lv_label_design+0x278>)
  423286:	4798      	blx	r3
        if(!is_common) return LV_DESIGN_RES_OK;
  423288:	b910      	cbnz	r0, 423290 <lv_label_design+0xac>
}
  42328a:	b02b      	add	sp, #172	; 0xac
  42328c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        lv_label_align_t align = lv_label_get_align(label);
  423290:	4630      	mov	r0, r6
  423292:	4b73      	ldr	r3, [pc, #460]	; (423460 <lv_label_design+0x27c>)
  423294:	4798      	blx	r3
        if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
  423296:	f898 3012 	ldrb.w	r3, [r8, #18]
  42329a:	f013 0f40 	tst.w	r3, #64	; 0x40
  42329e:	d13f      	bne.n	423320 <lv_label_design+0x13c>
        lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
  4232a0:	2400      	movs	r4, #0
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
  4232a2:	f013 0f80 	tst.w	r3, #128	; 0x80
  4232a6:	d13d      	bne.n	423324 <lv_label_design+0x140>
        if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
  4232a8:	f013 0f07 	tst.w	r3, #7
  4232ac:	d101      	bne.n	4232b2 <lv_label_design+0xce>
  4232ae:	f044 0410 	orr.w	r4, r4, #16
        if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
  4232b2:	2801      	cmp	r0, #1
  4232b4:	d039      	beq.n	42332a <lv_label_design+0x146>
        if(align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
  4232b6:	2802      	cmp	r0, #2
  4232b8:	d03a      	beq.n	423330 <lv_label_design+0x14c>
        lv_draw_label_dsc_init(&label_draw_dsc);
  4232ba:	a80c      	add	r0, sp, #48	; 0x30
  4232bc:	4b69      	ldr	r3, [pc, #420]	; (423464 <lv_label_design+0x280>)
  4232be:	4798      	blx	r3
        label_draw_dsc.sel_start = lv_label_get_text_sel_start(label);
  4232c0:	4630      	mov	r0, r6
  4232c2:	4b69      	ldr	r3, [pc, #420]	; (423468 <lv_label_design+0x284>)
  4232c4:	4798      	blx	r3
  4232c6:	9011      	str	r0, [sp, #68]	; 0x44
        label_draw_dsc.sel_end = lv_label_get_text_sel_end(label);
  4232c8:	4630      	mov	r0, r6
  4232ca:	4b68      	ldr	r3, [pc, #416]	; (42346c <lv_label_design+0x288>)
  4232cc:	4798      	blx	r3
  4232ce:	9012      	str	r0, [sp, #72]	; 0x48
        label_draw_dsc.ofs_x = ext->offset.x;
  4232d0:	f9b8 300e 	ldrsh.w	r3, [r8, #14]
  4232d4:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        label_draw_dsc.ofs_y = ext->offset.y;
  4232d8:	f9b8 3010 	ldrsh.w	r3, [r8, #16]
  4232dc:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        label_draw_dsc.flag = flag;
  4232e0:	f88d 4051 	strb.w	r4, [sp, #81]	; 0x51
        lv_obj_init_draw_label_dsc(label, LV_LABEL_PART_MAIN, &label_draw_dsc);
  4232e4:	aa0c      	add	r2, sp, #48	; 0x30
  4232e6:	2100      	movs	r1, #0
  4232e8:	4630      	mov	r0, r6
  4232ea:	4b61      	ldr	r3, [pc, #388]	; (423470 <lv_label_design+0x28c>)
  4232ec:	4798      	blx	r3
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
  4232ee:	f898 2012 	ldrb.w	r2, [r8, #18]
  4232f2:	f002 0307 	and.w	r3, r2, #7
  4232f6:	3b03      	subs	r3, #3
  4232f8:	b2db      	uxtb	r3, r3
  4232fa:	2b01      	cmp	r3, #1
  4232fc:	d91b      	bls.n	423336 <lv_label_design+0x152>
        lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
  4232fe:	f8d8 3000 	ldr.w	r3, [r8]
  423302:	2200      	movs	r2, #0
  423304:	9200      	str	r2, [sp, #0]
  423306:	aa0c      	add	r2, sp, #48	; 0x30
  423308:	a90a      	add	r1, sp, #40	; 0x28
  42330a:	a808      	add	r0, sp, #32
  42330c:	4d59      	ldr	r5, [pc, #356]	; (423474 <lv_label_design+0x290>)
  42330e:	47a8      	blx	r5
        if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
  423310:	f898 3012 	ldrb.w	r3, [r8, #18]
  423314:	f003 0307 	and.w	r3, r3, #7
  423318:	2b04      	cmp	r3, #4
  42331a:	d034      	beq.n	423386 <lv_label_design+0x1a2>
    return LV_DESIGN_RES_OK;
  42331c:	2000      	movs	r0, #0
  42331e:	e7b4      	b.n	42328a <lv_label_design+0xa6>
        if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
  423320:	2401      	movs	r4, #1
  423322:	e7be      	b.n	4232a2 <lv_label_design+0xbe>
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
  423324:	f044 0402 	orr.w	r4, r4, #2
  423328:	e7be      	b.n	4232a8 <lv_label_design+0xc4>
        if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
  42332a:	f044 0404 	orr.w	r4, r4, #4
  42332e:	e7c2      	b.n	4232b6 <lv_label_design+0xd2>
        if(align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
  423330:	f044 0408 	orr.w	r4, r4, #8
  423334:	e7c1      	b.n	4232ba <lv_label_design+0xd6>
           (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
  423336:	f002 0230 	and.w	r2, r2, #48	; 0x30
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
  42333a:	2a20      	cmp	r2, #32
  42333c:	bf18      	it	ne
  42333e:	2a10      	cmpne	r2, #16
  423340:	d1dd      	bne.n	4232fe <lv_label_design+0x11a>
            _lv_txt_get_size(&size, ext->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
  423342:	f8d8 1000 	ldr.w	r1, [r8]
  423346:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
  42334a:	9402      	str	r4, [sp, #8]
  42334c:	f647 4218 	movw	r2, #31768	; 0x7c18
  423350:	9201      	str	r2, [sp, #4]
  423352:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
  423356:	9200      	str	r2, [sp, #0]
  423358:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  42335a:	a805      	add	r0, sp, #20
  42335c:	4d46      	ldr	r5, [pc, #280]	; (423478 <lv_label_design+0x294>)
  42335e:	47a8      	blx	r5
            if(size.x > lv_area_get_width(&txt_coords)) {
  423360:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
  423364:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  423368:	f8bd 1020 	ldrh.w	r1, [sp, #32]
  42336c:	1a5b      	subs	r3, r3, r1
  42336e:	b29b      	uxth	r3, r3
  423370:	3301      	adds	r3, #1
  423372:	b21b      	sxth	r3, r3
  423374:	429a      	cmp	r2, r3
  423376:	ddc2      	ble.n	4232fe <lv_label_design+0x11a>
                label_draw_dsc.flag &= ~LV_TXT_FLAG_RIGHT;
  423378:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
                label_draw_dsc.flag &= ~LV_TXT_FLAG_CENTER;
  42337c:	f003 03f3 	and.w	r3, r3, #243	; 0xf3
  423380:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
  423384:	e7bb      	b.n	4232fe <lv_label_design+0x11a>
            _lv_txt_get_size(&size, ext->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
  423386:	f8d8 1000 	ldr.w	r1, [r8]
  42338a:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
  42338e:	9402      	str	r4, [sp, #8]
  423390:	f647 4218 	movw	r2, #31768	; 0x7c18
  423394:	9201      	str	r2, [sp, #4]
  423396:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
  42339a:	9200      	str	r2, [sp, #0]
  42339c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  42339e:	a805      	add	r0, sp, #20
  4233a0:	4c35      	ldr	r4, [pc, #212]	; (423478 <lv_label_design+0x294>)
  4233a2:	47a0      	blx	r4
            if(size.x > lv_area_get_width(&txt_coords)) {
  4233a4:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
  4233a8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  4233ac:	f8bd 1020 	ldrh.w	r1, [sp, #32]
  4233b0:	1a5b      	subs	r3, r3, r1
  4233b2:	b29b      	uxth	r3, r3
  4233b4:	3301      	adds	r3, #1
  4233b6:	b21b      	sxth	r3, r3
  4233b8:	429a      	cmp	r2, r3
  4233ba:	dc23      	bgt.n	423404 <lv_label_design+0x220>
            if(size.y > lv_area_get_height(&txt_coords)) {
  4233bc:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4233c0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
  4233c4:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
  4233c8:	1a5b      	subs	r3, r3, r1
  4233ca:	b29b      	uxth	r3, r3
  4233cc:	3301      	adds	r3, #1
  4233ce:	b21b      	sxth	r3, r3
  4233d0:	429a      	cmp	r2, r3
  4233d2:	dda3      	ble.n	42331c <lv_label_design+0x138>
                label_draw_dsc.ofs_x = ext->offset.x;
  4233d4:	f9b8 300e 	ldrsh.w	r3, [r8, #14]
  4233d8:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
                label_draw_dsc.ofs_y = ext->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
  4233dc:	f8b8 3010 	ldrh.w	r3, [r8, #16]
  4233e0:	fa13 f382 	uxtah	r3, r3, r2
  4233e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4233e6:	8912      	ldrh	r2, [r2, #8]
  4233e8:	fa12 f383 	uxtah	r3, r2, r3
  4233ec:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
  4233f0:	f8d8 3000 	ldr.w	r3, [r8]
  4233f4:	2200      	movs	r2, #0
  4233f6:	9200      	str	r2, [sp, #0]
  4233f8:	aa0c      	add	r2, sp, #48	; 0x30
  4233fa:	a90a      	add	r1, sp, #40	; 0x28
  4233fc:	a808      	add	r0, sp, #32
  4233fe:	4c1d      	ldr	r4, [pc, #116]	; (423474 <lv_label_design+0x290>)
  423400:	47a0      	blx	r4
  423402:	e78b      	b.n	42331c <lv_label_design+0x138>
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
  423404:	f8b8 400e 	ldrh.w	r4, [r8, #14]
  423408:	fa14 f282 	uxtah	r2, r4, r2
  42340c:	b294      	uxth	r4, r2
                                       lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
  42340e:	2220      	movs	r2, #32
  423410:	4611      	mov	r1, r2
  423412:	980e      	ldr	r0, [sp, #56]	; 0x38
  423414:	4b19      	ldr	r3, [pc, #100]	; (42347c <lv_label_design+0x298>)
  423416:	4798      	blx	r3
  423418:	eb00 0040 	add.w	r0, r0, r0, lsl #1
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
  42341c:	fa14 f480 	uxtah	r4, r4, r0
  423420:	f8ad 404c 	strh.w	r4, [sp, #76]	; 0x4c
                label_draw_dsc.ofs_y = ext->offset.y;
  423424:	f9b8 3010 	ldrsh.w	r3, [r8, #16]
  423428:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
  42342c:	f8d8 3000 	ldr.w	r3, [r8]
  423430:	2200      	movs	r2, #0
  423432:	9200      	str	r2, [sp, #0]
  423434:	aa0c      	add	r2, sp, #48	; 0x30
  423436:	a90a      	add	r1, sp, #40	; 0x28
  423438:	a808      	add	r0, sp, #32
  42343a:	47a8      	blx	r5
  42343c:	e7be      	b.n	4233bc <lv_label_design+0x1d8>
        return LV_DESIGN_RES_NOT_COVER;
  42343e:	2002      	movs	r0, #2
  423440:	4770      	bx	lr
  423442:	bf00      	nop
  423444:	00408115 	.word	0x00408115
  423448:	00407485 	.word	0x00407485
  42344c:	0041250d 	.word	0x0041250d
  423450:	004083ed 	.word	0x004083ed
  423454:	00412559 	.word	0x00412559
  423458:	00422ce9 	.word	0x00422ce9
  42345c:	00415663 	.word	0x00415663
  423460:	00422e95 	.word	0x00422e95
  423464:	0040df85 	.word	0x0040df85
  423468:	00423195 	.word	0x00423195
  42346c:	004231bd 	.word	0x004231bd
  423470:	00408a1d 	.word	0x00408a1d
  423474:	0040dfcd 	.word	0x0040dfcd
  423478:	00417fa5 	.word	0x00417fa5
  42347c:	00413bed 	.word	0x00413bed

00423480 <lv_label_get_style>:
    switch(type) {
  423480:	b909      	cbnz	r1, 423486 <lv_label_get_style+0x6>
            style_dsc_p = &label->style_list;
  423482:	3028      	adds	r0, #40	; 0x28
            break;
  423484:	4770      	bx	lr
            style_dsc_p = NULL;
  423486:	2000      	movs	r0, #0
}
  423488:	4770      	bx	lr
	...

0042348c <lv_label_refr_text>:
{
  42348c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  423490:	b09b      	sub	sp, #108	; 0x6c
  423492:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  423494:	4b95      	ldr	r3, [pc, #596]	; (4236ec <lv_label_refr_text+0x260>)
  423496:	4798      	blx	r3
    if(ext->text == NULL) return;
  423498:	6803      	ldr	r3, [r0, #0]
  42349a:	2b00      	cmp	r3, #0
  42349c:	d049      	beq.n	423532 <lv_label_refr_text+0xa6>
  42349e:	4606      	mov	r6, r0
    get_txt_coords(label, &txt_coords);
  4234a0:	a918      	add	r1, sp, #96	; 0x60
  4234a2:	4628      	mov	r0, r5
  4234a4:	4b92      	ldr	r3, [pc, #584]	; (4236f0 <lv_label_refr_text+0x264>)
  4234a6:	4798      	blx	r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4234a8:	f8bd 4064 	ldrh.w	r4, [sp, #100]	; 0x64
  4234ac:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
  4234b0:	1ae4      	subs	r4, r4, r3
  4234b2:	b2a4      	uxth	r4, r4
  4234b4:	3401      	adds	r4, #1
  4234b6:	b224      	sxth	r4, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  4234b8:	f248 028e 	movw	r2, #32910	; 0x808e
  4234bc:	2100      	movs	r1, #0
  4234be:	4628      	mov	r0, r5
  4234c0:	4b8c      	ldr	r3, [pc, #560]	; (4236f4 <lv_label_refr_text+0x268>)
  4234c2:	4798      	blx	r3
  4234c4:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  4234c6:	f248 0281 	movw	r2, #32897	; 0x8081
  4234ca:	2100      	movs	r1, #0
  4234cc:	4628      	mov	r0, r5
  4234ce:	4f8a      	ldr	r7, [pc, #552]	; (4236f8 <lv_label_refr_text+0x26c>)
  4234d0:	47b8      	blx	r7
  4234d2:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
  4234d4:	f248 0280 	movw	r2, #32896	; 0x8080
  4234d8:	2100      	movs	r1, #0
  4234da:	4628      	mov	r0, r5
  4234dc:	47b8      	blx	r7
  4234de:	4607      	mov	r7, r0
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
  4234e0:	7cb3      	ldrb	r3, [r6, #18]
  4234e2:	f013 0f40 	tst.w	r3, #64	; 0x40
  4234e6:	d127      	bne.n	423538 <lv_label_refr_text+0xac>
    lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
  4234e8:	2200      	movs	r2, #0
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
  4234ea:	f013 0f80 	tst.w	r3, #128	; 0x80
  4234ee:	d125      	bne.n	42353c <lv_label_refr_text+0xb0>
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
  4234f0:	f013 0f07 	tst.w	r3, #7
  4234f4:	d101      	bne.n	4234fa <lv_label_refr_text+0x6e>
  4234f6:	f042 0210 	orr.w	r2, r2, #16
    _lv_txt_get_size(&size, ext->text, font, letter_space, line_space, max_w, flag);
  4234fa:	6831      	ldr	r1, [r6, #0]
  4234fc:	9202      	str	r2, [sp, #8]
  4234fe:	9401      	str	r4, [sp, #4]
  423500:	f8cd 9000 	str.w	r9, [sp]
  423504:	463b      	mov	r3, r7
  423506:	4642      	mov	r2, r8
  423508:	a817      	add	r0, sp, #92	; 0x5c
  42350a:	4c7c      	ldr	r4, [pc, #496]	; (4236fc <lv_label_refr_text+0x270>)
  42350c:	47a0      	blx	r4
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
  42350e:	7cb3      	ldrb	r3, [r6, #18]
  423510:	f013 0307 	ands.w	r3, r3, #7
  423514:	d015      	beq.n	423542 <lv_label_refr_text+0xb6>
    else if(ext->long_mode == LV_LABEL_LONG_SROLL) {
  423516:	2b03      	cmp	r3, #3
  423518:	d039      	beq.n	42358e <lv_label_refr_text+0x102>
    else if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
  42351a:	2b04      	cmp	r3, #4
  42351c:	f000 8104 	beq.w	423728 <lv_label_refr_text+0x29c>
    else if(ext->long_mode == LV_LABEL_LONG_DOT) {
  423520:	2b02      	cmp	r3, #2
  423522:	f000 8180 	beq.w	423826 <lv_label_refr_text+0x39a>
    else if(ext->long_mode == LV_LABEL_LONG_BREAK) {
  423526:	2b01      	cmp	r3, #1
  423528:	f000 821c 	beq.w	423964 <lv_label_refr_text+0x4d8>
    lv_obj_invalidate(label);
  42352c:	4628      	mov	r0, r5
  42352e:	4b74      	ldr	r3, [pc, #464]	; (423700 <lv_label_refr_text+0x274>)
  423530:	4798      	blx	r3
}
  423532:	b01b      	add	sp, #108	; 0x6c
  423534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
  423538:	2201      	movs	r2, #1
  42353a:	e7d6      	b.n	4234ea <lv_label_refr_text+0x5e>
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
  42353c:	f042 0202 	orr.w	r2, r2, #2
  423540:	e7d6      	b.n	4234f0 <lv_label_refr_text+0x64>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  423542:	2212      	movs	r2, #18
  423544:	2100      	movs	r1, #0
  423546:	4628      	mov	r0, r5
  423548:	4e6b      	ldr	r6, [pc, #428]	; (4236f8 <lv_label_refr_text+0x26c>)
  42354a:	47b0      	blx	r6
  42354c:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  42354e:	2213      	movs	r2, #19
  423550:	2100      	movs	r1, #0
  423552:	4628      	mov	r0, r5
  423554:	47b0      	blx	r6
        size.x += lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_right(label, LV_LABEL_PART_MAIN);
  423556:	4420      	add	r0, r4
  423558:	f8bd 405c 	ldrh.w	r4, [sp, #92]	; 0x5c
  42355c:	4420      	add	r0, r4
  42355e:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  423562:	2210      	movs	r2, #16
  423564:	2100      	movs	r1, #0
  423566:	4628      	mov	r0, r5
  423568:	47b0      	blx	r6
  42356a:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  42356c:	2211      	movs	r2, #17
  42356e:	2100      	movs	r1, #0
  423570:	4628      	mov	r0, r5
  423572:	47b0      	blx	r6
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
  423574:	1822      	adds	r2, r4, r0
  423576:	f8bd 005e 	ldrh.w	r0, [sp, #94]	; 0x5e
  42357a:	4402      	add	r2, r0
  42357c:	b212      	sxth	r2, r2
  42357e:	f8ad 205e 	strh.w	r2, [sp, #94]	; 0x5e
        lv_obj_set_size(label, size.x, size.y);
  423582:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
  423586:	4628      	mov	r0, r5
  423588:	4b5e      	ldr	r3, [pc, #376]	; (423704 <lv_label_refr_text+0x278>)
  42358a:	4798      	blx	r3
  42358c:	e7ce      	b.n	42352c <lv_label_refr_text+0xa0>
        lv_anim_init(&a);
  42358e:	a806      	add	r0, sp, #24
  423590:	4b5d      	ldr	r3, [pc, #372]	; (423708 <lv_label_refr_text+0x27c>)
  423592:	4798      	blx	r3
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param var pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
    a->var     = var;
  423594:	9506      	str	r5, [sp, #24]
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param cnt repeat count or `LV_ANIM_REPEAT_INFINITE` for infinite repetition. 0: to disable repetition.
 */
static inline void lv_anim_set_repeat_count(lv_anim_t * a, uint16_t cnt)
{
    a->repeat_cnt       = cnt;
  423596:	f64f 73ff 	movw	r3, #65535	; 0xffff
  42359a:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
        lv_anim_set_playback_delay(&a, (((lv_font_get_glyph_width(font, ' ', ' ') + letter_space) * 1000) /
  42359e:	2220      	movs	r2, #32
  4235a0:	4611      	mov	r1, r2
  4235a2:	4640      	mov	r0, r8
  4235a4:	4b59      	ldr	r3, [pc, #356]	; (42370c <lv_label_refr_text+0x280>)
  4235a6:	4798      	blx	r3
  4235a8:	4438      	add	r0, r7
  4235aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  4235ae:	fb03 f300 	mul.w	r3, r3, r0
                                        ext->anim_speed) *
  4235b2:	89b0      	ldrh	r0, [r6, #12]
        lv_anim_set_playback_delay(&a, (((lv_font_get_glyph_width(font, ' ', ' ') + letter_space) * 1000) /
  4235b4:	fb93 f3f0 	sdiv	r3, r3, r0
  4235b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4235bc:	b29b      	uxth	r3, r3
    a->playback_delay = delay;
  4235be:	9311      	str	r3, [sp, #68]	; 0x44
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param delay delay in milliseconds before repeating the animation.
 */
static inline void lv_anim_set_repeat_delay(lv_anim_t * a, uint16_t delay)
{
    a->repeat_delay = delay;
  4235c0:	9313      	str	r3, [sp, #76]	; 0x4c
        if(size.x > lv_area_get_width(&txt_coords)) {
  4235c2:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
  4235c6:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
  4235ca:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
  4235ce:	1a5b      	subs	r3, r3, r1
  4235d0:	b29b      	uxth	r3, r3
  4235d2:	3301      	adds	r3, #1
  4235d4:	b29b      	uxth	r3, r3
  4235d6:	b219      	sxth	r1, r3
  4235d8:	428a      	cmp	r2, r1
  4235da:	dd49      	ble.n	423670 <lv_label_refr_text+0x1e4>
            lv_anim_set_values(&a, 0, lv_area_get_width(&txt_coords) - size.x);
  4235dc:	b292      	uxth	r2, r2
  4235de:	1a9b      	subs	r3, r3, r2
  4235e0:	b21a      	sxth	r2, r3
    a->start = start;
  4235e2:	2100      	movs	r1, #0
  4235e4:	910c      	str	r1, [sp, #48]	; 0x30
    a->current = start;
  4235e6:	910d      	str	r1, [sp, #52]	; 0x34
    a->end   = end;
  4235e8:	920e      	str	r2, [sp, #56]	; 0x38
    a->exec_cb = exec_cb;
  4235ea:	4c49      	ldr	r4, [pc, #292]	; (423710 <lv_label_refr_text+0x284>)
  4235ec:	9407      	str	r4, [sp, #28]
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
  4235ee:	89b0      	ldrh	r0, [r6, #12]
  4235f0:	4b48      	ldr	r3, [pc, #288]	; (423714 <lv_label_refr_text+0x288>)
  4235f2:	4798      	blx	r3
    a->time     = duration;
  4235f4:	900f      	str	r0, [sp, #60]	; 0x3c
    a->playback_time = time;
  4235f6:	9012      	str	r0, [sp, #72]	; 0x48
            lv_anim_t * anim_cur = lv_anim_get(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
  4235f8:	4621      	mov	r1, r4
  4235fa:	4628      	mov	r0, r5
  4235fc:	4b46      	ldr	r3, [pc, #280]	; (423718 <lv_label_refr_text+0x28c>)
  4235fe:	4798      	blx	r3
            if(anim_cur) {
  423600:	2800      	cmp	r0, #0
  423602:	d032      	beq.n	42366a <lv_label_refr_text+0x1de>
                act_time = anim_cur->act_time;
  423604:	6a82      	ldr	r2, [r0, #40]	; 0x28
                playback_now = anim_cur->playback_now;
  423606:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  42360a:	f003 0301 	and.w	r3, r3, #1
            if(act_time < a.time) {
  42360e:	990f      	ldr	r1, [sp, #60]	; 0x3c
  423610:	428a      	cmp	r2, r1
  423612:	da11      	bge.n	423638 <lv_label_refr_text+0x1ac>
                a.act_time = act_time;      /*To keep the old position*/
  423614:	9210      	str	r2, [sp, #64]	; 0x40
                a.early_apply = 0;
  423616:	f89d 2052 	ldrb.w	r2, [sp, #82]	; 0x52
  42361a:	f36f 0200 	bfc	r2, #0, #1
  42361e:	f88d 2052 	strb.w	r2, [sp, #82]	; 0x52
                if(playback_now) {
  423622:	b14b      	cbz	r3, 423638 <lv_label_refr_text+0x1ac>
                    a.playback_now = 1;
  423624:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
  423628:	f043 0301 	orr.w	r3, r3, #1
  42362c:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
                    tmp      = a.start;
  423630:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                    a.start = a.end;
  423632:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  423634:	920c      	str	r2, [sp, #48]	; 0x30
                    a.end   = tmp;
  423636:	930e      	str	r3, [sp, #56]	; 0x38
            lv_anim_start(&a);
  423638:	a806      	add	r0, sp, #24
  42363a:	4b38      	ldr	r3, [pc, #224]	; (42371c <lv_label_refr_text+0x290>)
  42363c:	4798      	blx	r3
            hor_anim = true;
  42363e:	2401      	movs	r4, #1
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
  423640:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  423644:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
  423648:	f8bd 1062 	ldrh.w	r1, [sp, #98]	; 0x62
  42364c:	1a5b      	subs	r3, r3, r1
  42364e:	b29b      	uxth	r3, r3
  423650:	3301      	adds	r3, #1
  423652:	b29b      	uxth	r3, r3
  423654:	b219      	sxth	r1, r3
  423656:	428a      	cmp	r2, r1
  423658:	dd00      	ble.n	42365c <lv_label_refr_text+0x1d0>
  42365a:	b184      	cbz	r4, 42367e <lv_label_refr_text+0x1f2>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
  42365c:	4930      	ldr	r1, [pc, #192]	; (423720 <lv_label_refr_text+0x294>)
  42365e:	4628      	mov	r0, r5
  423660:	4b30      	ldr	r3, [pc, #192]	; (423724 <lv_label_refr_text+0x298>)
  423662:	4798      	blx	r3
            ext->offset.y = 0;
  423664:	2300      	movs	r3, #0
  423666:	8233      	strh	r3, [r6, #16]
  423668:	e760      	b.n	42352c <lv_label_refr_text+0xa0>
            bool playback_now = false;
  42366a:	2300      	movs	r3, #0
            int32_t act_time = 0;
  42366c:	461a      	mov	r2, r3
  42366e:	e7ce      	b.n	42360e <lv_label_refr_text+0x182>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
  423670:	4927      	ldr	r1, [pc, #156]	; (423710 <lv_label_refr_text+0x284>)
  423672:	4628      	mov	r0, r5
  423674:	4b2b      	ldr	r3, [pc, #172]	; (423724 <lv_label_refr_text+0x298>)
  423676:	4798      	blx	r3
            ext->offset.x = 0;
  423678:	2400      	movs	r4, #0
  42367a:	81f4      	strh	r4, [r6, #14]
  42367c:	e7e0      	b.n	423640 <lv_label_refr_text+0x1b4>
            lv_anim_set_values(&a, 0, lv_area_get_height(&txt_coords) - size.y - (lv_font_get_line_height(font)));
  42367e:	b292      	uxth	r2, r2
  423680:	1a9a      	subs	r2, r3, r2
  423682:	b292      	uxth	r2, r2
  423684:	f8b8 3008 	ldrh.w	r3, [r8, #8]
  423688:	1ad2      	subs	r2, r2, r3
  42368a:	b212      	sxth	r2, r2
    a->start = start;
  42368c:	2100      	movs	r1, #0
  42368e:	910c      	str	r1, [sp, #48]	; 0x30
    a->current = start;
  423690:	910d      	str	r1, [sp, #52]	; 0x34
    a->end   = end;
  423692:	920e      	str	r2, [sp, #56]	; 0x38
    a->exec_cb = exec_cb;
  423694:	4f22      	ldr	r7, [pc, #136]	; (423720 <lv_label_refr_text+0x294>)
  423696:	9707      	str	r7, [sp, #28]
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
  423698:	89b0      	ldrh	r0, [r6, #12]
  42369a:	4b1e      	ldr	r3, [pc, #120]	; (423714 <lv_label_refr_text+0x288>)
  42369c:	4798      	blx	r3
    a->time     = duration;
  42369e:	900f      	str	r0, [sp, #60]	; 0x3c
    a->playback_time = time;
  4236a0:	9012      	str	r0, [sp, #72]	; 0x48
            lv_anim_t * anim_cur = lv_anim_get(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
  4236a2:	4639      	mov	r1, r7
  4236a4:	4628      	mov	r0, r5
  4236a6:	4b1c      	ldr	r3, [pc, #112]	; (423718 <lv_label_refr_text+0x28c>)
  4236a8:	4798      	blx	r3
            if(anim_cur) {
  4236aa:	b1e8      	cbz	r0, 4236e8 <lv_label_refr_text+0x25c>
                act_time = anim_cur->act_time;
  4236ac:	6a82      	ldr	r2, [r0, #40]	; 0x28
                playback_now = anim_cur->playback_now;
  4236ae:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
  4236b2:	f004 0401 	and.w	r4, r4, #1
            if(act_time < a.time) {
  4236b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4236b8:	429a      	cmp	r2, r3
  4236ba:	da11      	bge.n	4236e0 <lv_label_refr_text+0x254>
                a.act_time = act_time;      /*To keep the old position*/
  4236bc:	9210      	str	r2, [sp, #64]	; 0x40
                a.early_apply = 0;
  4236be:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
  4236c2:	f36f 0300 	bfc	r3, #0, #1
  4236c6:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
                if(playback_now) {
  4236ca:	b14c      	cbz	r4, 4236e0 <lv_label_refr_text+0x254>
                    a.playback_now = 1;
  4236cc:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
  4236d0:	f043 0301 	orr.w	r3, r3, #1
  4236d4:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
                    tmp      = a.start;
  4236d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                    a.start = a.end;
  4236da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4236dc:	920c      	str	r2, [sp, #48]	; 0x30
                    a.end   = tmp;
  4236de:	930e      	str	r3, [sp, #56]	; 0x38
            lv_anim_start(&a);
  4236e0:	a806      	add	r0, sp, #24
  4236e2:	4b0e      	ldr	r3, [pc, #56]	; (42371c <lv_label_refr_text+0x290>)
  4236e4:	4798      	blx	r3
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
  4236e6:	e721      	b.n	42352c <lv_label_refr_text+0xa0>
            int32_t act_time = 0;
  4236e8:	2200      	movs	r2, #0
  4236ea:	e7e4      	b.n	4236b6 <lv_label_refr_text+0x22a>
  4236ec:	00408115 	.word	0x00408115
  4236f0:	00422ce9 	.word	0x00422ce9
  4236f4:	0040737d 	.word	0x0040737d
  4236f8:	00407485 	.word	0x00407485
  4236fc:	00417fa5 	.word	0x00417fa5
  423700:	00405f99 	.word	0x00405f99
  423704:	00406c79 	.word	0x00406c79
  423708:	0041543d 	.word	0x0041543d
  42370c:	00413bed 	.word	0x00413bed
  423710:	00422dc9 	.word	0x00422dc9
  423714:	004155c1 	.word	0x004155c1
  423718:	0041558d 	.word	0x0041558d
  42371c:	004154f5 	.word	0x004154f5
  423720:	00422dad 	.word	0x00422dad
  423724:	00415489 	.word	0x00415489
        lv_anim_init(&a);
  423728:	a806      	add	r0, sp, #24
  42372a:	4b99      	ldr	r3, [pc, #612]	; (423990 <lv_label_refr_text+0x504>)
  42372c:	4798      	blx	r3
    a->var     = var;
  42372e:	9506      	str	r5, [sp, #24]
    a->repeat_cnt       = cnt;
  423730:	f64f 73ff 	movw	r3, #65535	; 0xffff
  423734:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
        if(size.x > lv_area_get_width(&txt_coords)) {
  423738:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  42373c:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
  423740:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
  423744:	1a5b      	subs	r3, r3, r1
  423746:	b29b      	uxth	r3, r3
  423748:	3301      	adds	r3, #1
  42374a:	b21b      	sxth	r3, r3
  42374c:	429a      	cmp	r2, r3
  42374e:	dd3e      	ble.n	4237ce <lv_label_refr_text+0x342>
            lv_anim_set_values(&a, 0, -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT);
  423750:	2220      	movs	r2, #32
  423752:	4611      	mov	r1, r2
  423754:	4640      	mov	r0, r8
  423756:	4b8f      	ldr	r3, [pc, #572]	; (423994 <lv_label_refr_text+0x508>)
  423758:	4798      	blx	r3
  42375a:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
  42375e:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
  423762:	1a82      	subs	r2, r0, r2
  423764:	b212      	sxth	r2, r2
    a->start = start;
  423766:	2100      	movs	r1, #0
  423768:	910c      	str	r1, [sp, #48]	; 0x30
    a->current = start;
  42376a:	910d      	str	r1, [sp, #52]	; 0x34
    a->end   = end;
  42376c:	920e      	str	r2, [sp, #56]	; 0x38
    a->exec_cb = exec_cb;
  42376e:	4c8a      	ldr	r4, [pc, #552]	; (423998 <lv_label_refr_text+0x50c>)
  423770:	9407      	str	r4, [sp, #28]
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
  423772:	89b0      	ldrh	r0, [r6, #12]
  423774:	4b89      	ldr	r3, [pc, #548]	; (42399c <lv_label_refr_text+0x510>)
  423776:	4798      	blx	r3
    a->time     = duration;
  423778:	900f      	str	r0, [sp, #60]	; 0x3c
            lv_anim_t * anim_cur = lv_anim_get(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
  42377a:	4621      	mov	r1, r4
  42377c:	4628      	mov	r0, r5
  42377e:	4b88      	ldr	r3, [pc, #544]	; (4239a0 <lv_label_refr_text+0x514>)
  423780:	4798      	blx	r3
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
  423782:	b310      	cbz	r0, 4237ca <lv_label_refr_text+0x33e>
  423784:	6a83      	ldr	r3, [r0, #40]	; 0x28
            if(act_time < a.time) {
  423786:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  423788:	4293      	cmp	r3, r2
  42378a:	da06      	bge.n	42379a <lv_label_refr_text+0x30e>
                a.act_time = act_time;      /*To keep the old position*/
  42378c:	9310      	str	r3, [sp, #64]	; 0x40
                a.early_apply = 0;
  42378e:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
  423792:	f36f 0300 	bfc	r3, #0, #1
  423796:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
            lv_anim_start(&a);
  42379a:	a806      	add	r0, sp, #24
  42379c:	4b81      	ldr	r3, [pc, #516]	; (4239a4 <lv_label_refr_text+0x518>)
  42379e:	4798      	blx	r3
            hor_anim = true;
  4237a0:	2101      	movs	r1, #1
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
  4237a2:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4237a6:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
  4237aa:	f8bd 0062 	ldrh.w	r0, [sp, #98]	; 0x62
  4237ae:	1a1b      	subs	r3, r3, r0
  4237b0:	b29b      	uxth	r3, r3
  4237b2:	3301      	adds	r3, #1
  4237b4:	b21b      	sxth	r3, r3
  4237b6:	429a      	cmp	r2, r3
  4237b8:	dd00      	ble.n	4237bc <lv_label_refr_text+0x330>
  4237ba:	b179      	cbz	r1, 4237dc <lv_label_refr_text+0x350>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
  4237bc:	497a      	ldr	r1, [pc, #488]	; (4239a8 <lv_label_refr_text+0x51c>)
  4237be:	4628      	mov	r0, r5
  4237c0:	4b7a      	ldr	r3, [pc, #488]	; (4239ac <lv_label_refr_text+0x520>)
  4237c2:	4798      	blx	r3
            ext->offset.y = 0;
  4237c4:	2300      	movs	r3, #0
  4237c6:	8233      	strh	r3, [r6, #16]
  4237c8:	e6b0      	b.n	42352c <lv_label_refr_text+0xa0>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
  4237ca:	2300      	movs	r3, #0
  4237cc:	e7db      	b.n	423786 <lv_label_refr_text+0x2fa>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
  4237ce:	4972      	ldr	r1, [pc, #456]	; (423998 <lv_label_refr_text+0x50c>)
  4237d0:	4628      	mov	r0, r5
  4237d2:	4b76      	ldr	r3, [pc, #472]	; (4239ac <lv_label_refr_text+0x520>)
  4237d4:	4798      	blx	r3
            ext->offset.x = 0;
  4237d6:	2100      	movs	r1, #0
  4237d8:	81f1      	strh	r1, [r6, #14]
  4237da:	e7e2      	b.n	4237a2 <lv_label_refr_text+0x316>
            lv_anim_set_values(&a, 0, -size.y - (lv_font_get_line_height(font)));
  4237dc:	b292      	uxth	r2, r2
  4237de:	f8b8 3008 	ldrh.w	r3, [r8, #8]
  4237e2:	4252      	negs	r2, r2
  4237e4:	1ad2      	subs	r2, r2, r3
  4237e6:	b212      	sxth	r2, r2
    a->start = start;
  4237e8:	910c      	str	r1, [sp, #48]	; 0x30
    a->current = start;
  4237ea:	910d      	str	r1, [sp, #52]	; 0x34
    a->end   = end;
  4237ec:	920e      	str	r2, [sp, #56]	; 0x38
    a->exec_cb = exec_cb;
  4237ee:	4c6e      	ldr	r4, [pc, #440]	; (4239a8 <lv_label_refr_text+0x51c>)
  4237f0:	9407      	str	r4, [sp, #28]
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
  4237f2:	89b0      	ldrh	r0, [r6, #12]
  4237f4:	4b69      	ldr	r3, [pc, #420]	; (42399c <lv_label_refr_text+0x510>)
  4237f6:	4798      	blx	r3
    a->time     = duration;
  4237f8:	900f      	str	r0, [sp, #60]	; 0x3c
            lv_anim_t * anim_cur = lv_anim_get(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
  4237fa:	4621      	mov	r1, r4
  4237fc:	4628      	mov	r0, r5
  4237fe:	4b68      	ldr	r3, [pc, #416]	; (4239a0 <lv_label_refr_text+0x514>)
  423800:	4798      	blx	r3
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
  423802:	b170      	cbz	r0, 423822 <lv_label_refr_text+0x396>
  423804:	6a83      	ldr	r3, [r0, #40]	; 0x28
            if(act_time < a.time) {
  423806:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  423808:	4293      	cmp	r3, r2
  42380a:	da06      	bge.n	42381a <lv_label_refr_text+0x38e>
                a.act_time = act_time;      /*To keep the old position*/
  42380c:	9310      	str	r3, [sp, #64]	; 0x40
                a.early_apply = 0;
  42380e:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
  423812:	f36f 0300 	bfc	r3, #0, #1
  423816:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
            lv_anim_start(&a);
  42381a:	a806      	add	r0, sp, #24
  42381c:	4b61      	ldr	r3, [pc, #388]	; (4239a4 <lv_label_refr_text+0x518>)
  42381e:	4798      	blx	r3
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
  423820:	e684      	b.n	42352c <lv_label_refr_text+0xa0>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
  423822:	2300      	movs	r3, #0
  423824:	e7ef      	b.n	423806 <lv_label_refr_text+0x37a>
        if(size.y <= lv_area_get_height(&txt_coords)) { /*No dots are required, the text is short enough*/
  423826:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
  42382a:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
  42382e:	f8bd 1062 	ldrh.w	r1, [sp, #98]	; 0x62
  423832:	1a5b      	subs	r3, r3, r1
  423834:	b29b      	uxth	r3, r3
  423836:	3301      	adds	r3, #1
  423838:	b21b      	sxth	r3, r3
  42383a:	429a      	cmp	r2, r3
  42383c:	dc03      	bgt.n	423846 <lv_label_refr_text+0x3ba>
            ext->dot_end = LV_LABEL_DOT_END_INV;
  42383e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  423842:	60b3      	str	r3, [r6, #8]
  423844:	e672      	b.n	42352c <lv_label_refr_text+0xa0>
        else if(_lv_txt_get_encoded_length(ext->text) <= LV_LABEL_DOT_NUM) {   /*Don't turn to dots all the characters*/
  423846:	4b5a      	ldr	r3, [pc, #360]	; (4239b0 <lv_label_refr_text+0x524>)
  423848:	681b      	ldr	r3, [r3, #0]
  42384a:	6830      	ldr	r0, [r6, #0]
  42384c:	4798      	blx	r3
  42384e:	2803      	cmp	r0, #3
  423850:	d803      	bhi.n	42385a <lv_label_refr_text+0x3ce>
            ext->dot_end = LV_LABEL_DOT_END_INV;
  423852:	f64f 73ff 	movw	r3, #65535	; 0xffff
  423856:	60b3      	str	r3, [r6, #8]
  423858:	e668      	b.n	42352c <lv_label_refr_text+0xa0>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  42385a:	f8bd 4064 	ldrh.w	r4, [sp, #100]	; 0x64
  42385e:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
  423862:	1ae4      	subs	r4, r4, r3
  423864:	b2a4      	uxth	r4, r4
  423866:	3401      	adds	r4, #1
  423868:	b2a4      	uxth	r4, r4
                  (lv_font_get_glyph_width(font, '.', '.') + letter_space) *
  42386a:	222e      	movs	r2, #46	; 0x2e
  42386c:	4611      	mov	r1, r2
  42386e:	4640      	mov	r0, r8
  423870:	4b48      	ldr	r3, [pc, #288]	; (423994 <lv_label_refr_text+0x508>)
  423872:	4798      	blx	r3
  423874:	4438      	add	r0, r7
            p.x = lv_area_get_width(&txt_coords) -
  423876:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
  42387a:	4420      	add	r0, r4
  42387c:	f8ad 0014 	strh.w	r0, [sp, #20]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  423880:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
  423884:	f8bd 2062 	ldrh.w	r2, [sp, #98]	; 0x62
  423888:	1a9b      	subs	r3, r3, r2
  42388a:	b29b      	uxth	r3, r3
  42388c:	3301      	adds	r3, #1
  42388e:	b29b      	uxth	r3, r3
  423890:	b218      	sxth	r0, r3
            p.y = lv_area_get_height(&txt_coords);
  423892:	f8ad 0016 	strh.w	r0, [sp, #22]
  423896:	f9b8 1008 	ldrsh.w	r1, [r8, #8]
                       (lv_font_get_line_height(font) + line_space); /*Round down to the last line*/
  42389a:	eb09 0401 	add.w	r4, r9, r1
            y_overed = p.y %
  42389e:	fb90 f2f4 	sdiv	r2, r0, r4
  4238a2:	fb04 0212 	mls	r2, r4, r2, r0
  4238a6:	b210      	sxth	r0, r2
            if(y_overed >= lv_font_get_line_height(font)) {
  4238a8:	4288      	cmp	r0, r1
  4238aa:	db16      	blt.n	4238da <lv_label_refr_text+0x44e>
                p.y -= y_overed;
  4238ac:	1a9b      	subs	r3, r3, r2
                p.y += lv_font_get_line_height(font);
  4238ae:	b289      	uxth	r1, r1
  4238b0:	fa11 f383 	uxtah	r3, r1, r3
  4238b4:	f8ad 3016 	strh.w	r3, [sp, #22]
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
  4238b8:	a905      	add	r1, sp, #20
  4238ba:	4628      	mov	r0, r5
  4238bc:	4b3d      	ldr	r3, [pc, #244]	; (4239b4 <lv_label_refr_text+0x528>)
  4238be:	4798      	blx	r3
  4238c0:	4607      	mov	r7, r0
            size_t txt_len = strlen(ext->text);
  4238c2:	6834      	ldr	r4, [r6, #0]
  4238c4:	4620      	mov	r0, r4
  4238c6:	4b3c      	ldr	r3, [pc, #240]	; (4239b8 <lv_label_refr_text+0x52c>)
  4238c8:	4798      	blx	r3
  4238ca:	4681      	mov	r9, r0
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(ext->text, letter_id);
  4238cc:	4b3b      	ldr	r3, [pc, #236]	; (4239bc <lv_label_refr_text+0x530>)
  4238ce:	681b      	ldr	r3, [r3, #0]
  4238d0:	4639      	mov	r1, r7
  4238d2:	4620      	mov	r0, r4
  4238d4:	4798      	blx	r3
  4238d6:	9006      	str	r0, [sp, #24]
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
  4238d8:	e00c      	b.n	4238f4 <lv_label_refr_text+0x468>
                p.y -= y_overed;
  4238da:	1a9b      	subs	r3, r3, r2
  4238dc:	b29b      	uxth	r3, r3
                p.y -= line_space;
  4238de:	eba3 0909 	sub.w	r9, r3, r9
  4238e2:	f8ad 9016 	strh.w	r9, [sp, #22]
  4238e6:	e7e7      	b.n	4238b8 <lv_label_refr_text+0x42c>
                _lv_txt_encoded_prev(ext->text, &byte_id);
  4238e8:	4b35      	ldr	r3, [pc, #212]	; (4239c0 <lv_label_refr_text+0x534>)
  4238ea:	681b      	ldr	r3, [r3, #0]
  4238ec:	a906      	add	r1, sp, #24
  4238ee:	6830      	ldr	r0, [r6, #0]
  4238f0:	4798      	blx	r3
                letter_id--;
  4238f2:	3f01      	subs	r7, #1
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
  4238f4:	9c06      	ldr	r4, [sp, #24]
  4238f6:	f104 0803 	add.w	r8, r4, #3
  4238fa:	45c1      	cmp	r9, r8
  4238fc:	d3f4      	bcc.n	4238e8 <lv_label_refr_text+0x45c>
  4238fe:	f04f 0900 	mov.w	r9, #0
  423902:	46cb      	mov	fp, r9
  423904:	e012      	b.n	42392c <lv_label_refr_text+0x4a0>
                len += _lv_txt_encoded_size(&ext->text[byte_id]);
  423906:	6830      	ldr	r0, [r6, #0]
  423908:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
  42390c:	f85a 2d50 	ldr.w	r2, [sl, #-80]!
  423910:	4b2c      	ldr	r3, [pc, #176]	; (4239c4 <lv_label_refr_text+0x538>)
  423912:	681b      	ldr	r3, [r3, #0]
  423914:	4410      	add	r0, r2
  423916:	4798      	blx	r3
  423918:	4481      	add	r9, r0
  42391a:	fa5f f989 	uxtb.w	r9, r9
                _lv_txt_encoded_next(ext->text, &byte_id);
  42391e:	4b2a      	ldr	r3, [pc, #168]	; (4239c8 <lv_label_refr_text+0x53c>)
  423920:	681b      	ldr	r3, [r3, #0]
  423922:	4651      	mov	r1, sl
  423924:	6830      	ldr	r0, [r6, #0]
  423926:	4798      	blx	r3
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
  423928:	f10b 0b01 	add.w	fp, fp, #1
  42392c:	f1bb 0f03 	cmp.w	fp, #3
  423930:	d9e9      	bls.n	423906 <lv_label_refr_text+0x47a>
            if(lv_label_set_dot_tmp(label, &ext->text[byte_id_ori], len)) {
  423932:	6831      	ldr	r1, [r6, #0]
  423934:	464a      	mov	r2, r9
  423936:	4421      	add	r1, r4
  423938:	4628      	mov	r0, r5
  42393a:	4b24      	ldr	r3, [pc, #144]	; (4239cc <lv_label_refr_text+0x540>)
  42393c:	4798      	blx	r3
  42393e:	2800      	cmp	r0, #0
  423940:	f43f adf4 	beq.w	42352c <lv_label_refr_text+0xa0>
  423944:	2300      	movs	r3, #0
                for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
  423946:	2b02      	cmp	r3, #2
  423948:	d805      	bhi.n	423956 <lv_label_refr_text+0x4ca>
                    ext->text[byte_id_ori + i] = '.';
  42394a:	6831      	ldr	r1, [r6, #0]
  42394c:	191a      	adds	r2, r3, r4
  42394e:	202e      	movs	r0, #46	; 0x2e
  423950:	5488      	strb	r0, [r1, r2]
                for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
  423952:	3301      	adds	r3, #1
  423954:	e7f7      	b.n	423946 <lv_label_refr_text+0x4ba>
                ext->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
  423956:	6833      	ldr	r3, [r6, #0]
  423958:	2200      	movs	r2, #0
  42395a:	f803 2008 	strb.w	r2, [r3, r8]
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
  42395e:	3703      	adds	r7, #3
  423960:	60b7      	str	r7, [r6, #8]
  423962:	e5e3      	b.n	42352c <lv_label_refr_text+0xa0>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  423964:	2210      	movs	r2, #16
  423966:	2100      	movs	r1, #0
  423968:	4628      	mov	r0, r5
  42396a:	4e19      	ldr	r6, [pc, #100]	; (4239d0 <lv_label_refr_text+0x544>)
  42396c:	47b0      	blx	r6
  42396e:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  423970:	2211      	movs	r2, #17
  423972:	2100      	movs	r1, #0
  423974:	4628      	mov	r0, r5
  423976:	47b0      	blx	r6
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
  423978:	1821      	adds	r1, r4, r0
  42397a:	f8bd 005e 	ldrh.w	r0, [sp, #94]	; 0x5e
  42397e:	4401      	add	r1, r0
  423980:	b209      	sxth	r1, r1
  423982:	f8ad 105e 	strh.w	r1, [sp, #94]	; 0x5e
        lv_obj_set_height(label, size.y);
  423986:	4628      	mov	r0, r5
  423988:	4b12      	ldr	r3, [pc, #72]	; (4239d4 <lv_label_refr_text+0x548>)
  42398a:	4798      	blx	r3
  42398c:	e5ce      	b.n	42352c <lv_label_refr_text+0xa0>
  42398e:	bf00      	nop
  423990:	0041543d 	.word	0x0041543d
  423994:	00413bed 	.word	0x00413bed
  423998:	00422dc9 	.word	0x00422dc9
  42399c:	004155c1 	.word	0x004155c1
  4239a0:	0041558d 	.word	0x0041558d
  4239a4:	004154f5 	.word	0x004154f5
  4239a8:	00422dad 	.word	0x00422dad
  4239ac:	00415489 	.word	0x00415489
  4239b0:	204000c4 	.word	0x204000c4
  4239b4:	00422f05 	.word	0x00422f05
  4239b8:	004285c1 	.word	0x004285c1
  4239bc:	204000b0 	.word	0x204000b0
  4239c0:	204000bc 	.word	0x204000bc
  4239c4:	204000c0 	.word	0x204000c0
  4239c8:	204000b8 	.word	0x204000b8
  4239cc:	00422d45 	.word	0x00422d45
  4239d0:	00407485 	.word	0x00407485
  4239d4:	00406dad 	.word	0x00406dad

004239d8 <lv_label_signal>:
{
  4239d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4239dc:	4607      	mov	r7, r0
  4239de:	460c      	mov	r4, r1
  4239e0:	4615      	mov	r5, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
  4239e2:	2908      	cmp	r1, #8
  4239e4:	d014      	beq.n	423a10 <lv_label_signal+0x38>
    res = ancestor_signal(label, sign, param);
  4239e6:	4b31      	ldr	r3, [pc, #196]	; (423aac <lv_label_signal+0xd4>)
  4239e8:	681b      	ldr	r3, [r3, #0]
  4239ea:	4798      	blx	r3
  4239ec:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
  4239ee:	2801      	cmp	r0, #1
  4239f0:	d114      	bne.n	423a1c <lv_label_signal+0x44>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  4239f2:	2c07      	cmp	r4, #7
  4239f4:	d01d      	beq.n	423a32 <lv_label_signal+0x5a>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  4239f6:	4638      	mov	r0, r7
  4239f8:	4b2d      	ldr	r3, [pc, #180]	; (423ab0 <lv_label_signal+0xd8>)
  4239fa:	4798      	blx	r3
  4239fc:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CLEANUP) {
  4239fe:	bb2c      	cbnz	r4, 423a4c <lv_label_signal+0x74>
        if(ext->static_txt == 0) {
  423a00:	7c83      	ldrb	r3, [r0, #18]
  423a02:	f013 0f08 	tst.w	r3, #8
  423a06:	d01a      	beq.n	423a3e <lv_label_signal+0x66>
        lv_label_dot_tmp_free(label);
  423a08:	4638      	mov	r0, r7
  423a0a:	4b2a      	ldr	r3, [pc, #168]	; (423ab4 <lv_label_signal+0xdc>)
  423a0c:	4798      	blx	r3
  423a0e:	e005      	b.n	423a1c <lv_label_signal+0x44>
        info->result = lv_label_get_style(label, info->part);
  423a10:	7811      	ldrb	r1, [r2, #0]
  423a12:	4b29      	ldr	r3, [pc, #164]	; (423ab8 <lv_label_signal+0xe0>)
  423a14:	4798      	blx	r3
  423a16:	6068      	str	r0, [r5, #4]
        if(info->result != NULL) return LV_RES_OK;
  423a18:	b118      	cbz	r0, 423a22 <lv_label_signal+0x4a>
  423a1a:	2601      	movs	r6, #1
}
  423a1c:	4630      	mov	r0, r6
  423a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        else return ancestor_signal(label, sign, param);
  423a22:	4b22      	ldr	r3, [pc, #136]	; (423aac <lv_label_signal+0xd4>)
  423a24:	681b      	ldr	r3, [r3, #0]
  423a26:	462a      	mov	r2, r5
  423a28:	4621      	mov	r1, r4
  423a2a:	4638      	mov	r0, r7
  423a2c:	4798      	blx	r3
  423a2e:	4606      	mov	r6, r0
  423a30:	e7f4      	b.n	423a1c <lv_label_signal+0x44>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  423a32:	4922      	ldr	r1, [pc, #136]	; (423abc <lv_label_signal+0xe4>)
  423a34:	4628      	mov	r0, r5
  423a36:	4b22      	ldr	r3, [pc, #136]	; (423ac0 <lv_label_signal+0xe8>)
  423a38:	4798      	blx	r3
  423a3a:	4606      	mov	r6, r0
  423a3c:	e7ee      	b.n	423a1c <lv_label_signal+0x44>
            lv_mem_free(ext->text);
  423a3e:	6800      	ldr	r0, [r0, #0]
  423a40:	4b20      	ldr	r3, [pc, #128]	; (423ac4 <lv_label_signal+0xec>)
  423a42:	4798      	blx	r3
            ext->text = NULL;
  423a44:	2300      	movs	r3, #0
  423a46:	f8c8 3000 	str.w	r3, [r8]
  423a4a:	e7dd      	b.n	423a08 <lv_label_signal+0x30>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
  423a4c:	2c04      	cmp	r4, #4
  423a4e:	d016      	beq.n	423a7e <lv_label_signal+0xa6>
    else if(sign == LV_SIGNAL_COORD_CHG) {
  423a50:	2c02      	cmp	r4, #2
  423a52:	d1e3      	bne.n	423a1c <lv_label_signal+0x44>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  423a54:	8abb      	ldrh	r3, [r7, #20]
  423a56:	8a3a      	ldrh	r2, [r7, #16]
  423a58:	1a9b      	subs	r3, r3, r2
  423a5a:	b29b      	uxth	r3, r3
  423a5c:	3301      	adds	r3, #1
  423a5e:	b29b      	uxth	r3, r3
  423a60:	88aa      	ldrh	r2, [r5, #4]
  423a62:	8829      	ldrh	r1, [r5, #0]
  423a64:	1a52      	subs	r2, r2, r1
  423a66:	b292      	uxth	r2, r2
  423a68:	3201      	adds	r2, #1
  423a6a:	b292      	uxth	r2, r2
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
  423a6c:	429a      	cmp	r2, r3
  423a6e:	d00d      	beq.n	423a8c <lv_label_signal+0xb4>
            lv_label_revert_dots(label);
  423a70:	4638      	mov	r0, r7
  423a72:	4b15      	ldr	r3, [pc, #84]	; (423ac8 <lv_label_signal+0xf0>)
  423a74:	4798      	blx	r3
            lv_label_refr_text(label);
  423a76:	4638      	mov	r0, r7
  423a78:	4b14      	ldr	r3, [pc, #80]	; (423acc <lv_label_signal+0xf4>)
  423a7a:	4798      	blx	r3
  423a7c:	e7ce      	b.n	423a1c <lv_label_signal+0x44>
        lv_label_revert_dots(label);
  423a7e:	4638      	mov	r0, r7
  423a80:	4b11      	ldr	r3, [pc, #68]	; (423ac8 <lv_label_signal+0xf0>)
  423a82:	4798      	blx	r3
        lv_label_refr_text(label);
  423a84:	4638      	mov	r0, r7
  423a86:	4b11      	ldr	r3, [pc, #68]	; (423acc <lv_label_signal+0xf4>)
  423a88:	4798      	blx	r3
  423a8a:	e7c7      	b.n	423a1c <lv_label_signal+0x44>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  423a8c:	8afb      	ldrh	r3, [r7, #22]
  423a8e:	8a7a      	ldrh	r2, [r7, #18]
  423a90:	1a9b      	subs	r3, r3, r2
  423a92:	b29b      	uxth	r3, r3
  423a94:	3301      	adds	r3, #1
  423a96:	b29b      	uxth	r3, r3
  423a98:	88ea      	ldrh	r2, [r5, #6]
  423a9a:	8869      	ldrh	r1, [r5, #2]
  423a9c:	1a52      	subs	r2, r2, r1
  423a9e:	b292      	uxth	r2, r2
  423aa0:	3201      	adds	r2, #1
  423aa2:	b292      	uxth	r2, r2
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
  423aa4:	429a      	cmp	r2, r3
  423aa6:	d1e3      	bne.n	423a70 <lv_label_signal+0x98>
  423aa8:	e7b8      	b.n	423a1c <lv_label_signal+0x44>
  423aaa:	bf00      	nop
  423aac:	20414888 	.word	0x20414888
  423ab0:	00408115 	.word	0x00408115
  423ab4:	00422c49 	.word	0x00422c49
  423ab8:	00423481 	.word	0x00423481
  423abc:	0042fea4 	.word	0x0042fea4
  423ac0:	004083d1 	.word	0x004083d1
  423ac4:	0041679d 	.word	0x0041679d
  423ac8:	00422c79 	.word	0x00422c79
  423acc:	0042348d 	.word	0x0042348d

00423ad0 <lv_label_set_text>:
{
  423ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  423ad2:	4607      	mov	r7, r0
  423ad4:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  423ad6:	4b31      	ldr	r3, [pc, #196]	; (423b9c <lv_label_set_text+0xcc>)
  423ad8:	4798      	blx	r3
  423ada:	b928      	cbnz	r0, 423ae8 <lv_label_set_text+0x18>
  423adc:	463a      	mov	r2, r7
  423ade:	2300      	movs	r3, #0
  423ae0:	482f      	ldr	r0, [pc, #188]	; (423ba0 <lv_label_set_text+0xd0>)
  423ae2:	4930      	ldr	r1, [pc, #192]	; (423ba4 <lv_label_set_text+0xd4>)
  423ae4:	4788      	blx	r1
  423ae6:	e7fe      	b.n	423ae6 <lv_label_set_text+0x16>
    lv_obj_invalidate(label);
  423ae8:	4638      	mov	r0, r7
  423aea:	4b2f      	ldr	r3, [pc, #188]	; (423ba8 <lv_label_set_text+0xd8>)
  423aec:	4798      	blx	r3
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  423aee:	4638      	mov	r0, r7
  423af0:	4b2e      	ldr	r3, [pc, #184]	; (423bac <lv_label_set_text+0xdc>)
  423af2:	4798      	blx	r3
  423af4:	4604      	mov	r4, r0
    if(text == NULL) text = ext->text;
  423af6:	b31d      	cbz	r5, 423b40 <lv_label_set_text+0x70>
    LV_ASSERT_STR(text);
  423af8:	4628      	mov	r0, r5
  423afa:	4b28      	ldr	r3, [pc, #160]	; (423b9c <lv_label_set_text+0xcc>)
  423afc:	4798      	blx	r3
  423afe:	b308      	cbz	r0, 423b44 <lv_label_set_text+0x74>
    if(ext->text == text && ext->static_txt == 0) {
  423b00:	6826      	ldr	r6, [r4, #0]
  423b02:	42b5      	cmp	r5, r6
  423b04:	d024      	beq.n	423b50 <lv_label_set_text+0x80>
        if(ext->text != NULL && ext->static_txt == 0) {
  423b06:	b11e      	cbz	r6, 423b10 <lv_label_set_text+0x40>
  423b08:	7ca3      	ldrb	r3, [r4, #18]
  423b0a:	f013 0f08 	tst.w	r3, #8
  423b0e:	d038      	beq.n	423b82 <lv_label_set_text+0xb2>
        size_t len = strlen(text) + 1;
  423b10:	4628      	mov	r0, r5
  423b12:	4b27      	ldr	r3, [pc, #156]	; (423bb0 <lv_label_set_text+0xe0>)
  423b14:	4798      	blx	r3
        ext->text = lv_mem_alloc(len);
  423b16:	3001      	adds	r0, #1
  423b18:	4b26      	ldr	r3, [pc, #152]	; (423bb4 <lv_label_set_text+0xe4>)
  423b1a:	4798      	blx	r3
  423b1c:	6020      	str	r0, [r4, #0]
        LV_ASSERT_MEM(ext->text);
  423b1e:	4b1f      	ldr	r3, [pc, #124]	; (423b9c <lv_label_set_text+0xcc>)
  423b20:	4798      	blx	r3
  423b22:	2800      	cmp	r0, #0
  423b24:	d033      	beq.n	423b8e <lv_label_set_text+0xbe>
        if(ext->text == NULL) return;
  423b26:	6820      	ldr	r0, [r4, #0]
  423b28:	b148      	cbz	r0, 423b3e <lv_label_set_text+0x6e>
        strcpy(ext->text, text);
  423b2a:	4629      	mov	r1, r5
  423b2c:	4b22      	ldr	r3, [pc, #136]	; (423bb8 <lv_label_set_text+0xe8>)
  423b2e:	4798      	blx	r3
        ext->static_txt = 0;
  423b30:	7ca3      	ldrb	r3, [r4, #18]
  423b32:	f36f 03c3 	bfc	r3, #3, #1
  423b36:	74a3      	strb	r3, [r4, #18]
    lv_label_refr_text(label);
  423b38:	4638      	mov	r0, r7
  423b3a:	4b20      	ldr	r3, [pc, #128]	; (423bbc <lv_label_set_text+0xec>)
  423b3c:	4798      	blx	r3
  423b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(text == NULL) text = ext->text;
  423b40:	6805      	ldr	r5, [r0, #0]
  423b42:	e7d9      	b.n	423af8 <lv_label_set_text+0x28>
    LV_ASSERT_STR(text);
  423b44:	462a      	mov	r2, r5
  423b46:	2300      	movs	r3, #0
  423b48:	4815      	ldr	r0, [pc, #84]	; (423ba0 <lv_label_set_text+0xd0>)
  423b4a:	4916      	ldr	r1, [pc, #88]	; (423ba4 <lv_label_set_text+0xd4>)
  423b4c:	4788      	blx	r1
  423b4e:	e7fe      	b.n	423b4e <lv_label_set_text+0x7e>
    if(ext->text == text && ext->static_txt == 0) {
  423b50:	7ca3      	ldrb	r3, [r4, #18]
  423b52:	f013 0f08 	tst.w	r3, #8
  423b56:	d1d6      	bne.n	423b06 <lv_label_set_text+0x36>
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
  423b58:	4630      	mov	r0, r6
  423b5a:	4b15      	ldr	r3, [pc, #84]	; (423bb0 <lv_label_set_text+0xe0>)
  423b5c:	4798      	blx	r3
  423b5e:	1c41      	adds	r1, r0, #1
  423b60:	4630      	mov	r0, r6
  423b62:	4b17      	ldr	r3, [pc, #92]	; (423bc0 <lv_label_set_text+0xf0>)
  423b64:	4798      	blx	r3
  423b66:	6020      	str	r0, [r4, #0]
        LV_ASSERT_MEM(ext->text);
  423b68:	4b0c      	ldr	r3, [pc, #48]	; (423b9c <lv_label_set_text+0xcc>)
  423b6a:	4798      	blx	r3
  423b6c:	b928      	cbnz	r0, 423b7a <lv_label_set_text+0xaa>
  423b6e:	6822      	ldr	r2, [r4, #0]
  423b70:	2300      	movs	r3, #0
  423b72:	4814      	ldr	r0, [pc, #80]	; (423bc4 <lv_label_set_text+0xf4>)
  423b74:	490b      	ldr	r1, [pc, #44]	; (423ba4 <lv_label_set_text+0xd4>)
  423b76:	4788      	blx	r1
  423b78:	e7fe      	b.n	423b78 <lv_label_set_text+0xa8>
        if(ext->text == NULL) return;
  423b7a:	6823      	ldr	r3, [r4, #0]
  423b7c:	2b00      	cmp	r3, #0
  423b7e:	d1db      	bne.n	423b38 <lv_label_set_text+0x68>
  423b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_mem_free(ext->text);
  423b82:	4630      	mov	r0, r6
  423b84:	4b10      	ldr	r3, [pc, #64]	; (423bc8 <lv_label_set_text+0xf8>)
  423b86:	4798      	blx	r3
            ext->text = NULL;
  423b88:	2300      	movs	r3, #0
  423b8a:	6023      	str	r3, [r4, #0]
  423b8c:	e7c0      	b.n	423b10 <lv_label_set_text+0x40>
        LV_ASSERT_MEM(ext->text);
  423b8e:	6822      	ldr	r2, [r4, #0]
  423b90:	2300      	movs	r3, #0
  423b92:	480c      	ldr	r0, [pc, #48]	; (423bc4 <lv_label_set_text+0xf4>)
  423b94:	4903      	ldr	r1, [pc, #12]	; (423ba4 <lv_label_set_text+0xd4>)
  423b96:	4788      	blx	r1
  423b98:	e7fe      	b.n	423b98 <lv_label_set_text+0xc8>
  423b9a:	bf00      	nop
  423b9c:	00415f95 	.word	0x00415f95
  423ba0:	0042c728 	.word	0x0042c728
  423ba4:	00415fa1 	.word	0x00415fa1
  423ba8:	00405f99 	.word	0x00405f99
  423bac:	00408115 	.word	0x00408115
  423bb0:	004285c1 	.word	0x004285c1
  423bb4:	004166d9 	.word	0x004166d9
  423bb8:	004284fd 	.word	0x004284fd
  423bbc:	0042348d 	.word	0x0042348d
  423bc0:	00416a09 	.word	0x00416a09
  423bc4:	0042c714 	.word	0x0042c714
  423bc8:	0041679d 	.word	0x0041679d

00423bcc <lv_label_set_text_fmt>:
{
  423bcc:	b40e      	push	{r1, r2, r3}
  423bce:	b570      	push	{r4, r5, r6, lr}
  423bd0:	b083      	sub	sp, #12
  423bd2:	4605      	mov	r5, r0
  423bd4:	9e07      	ldr	r6, [sp, #28]
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  423bd6:	4b1d      	ldr	r3, [pc, #116]	; (423c4c <lv_label_set_text_fmt+0x80>)
  423bd8:	4798      	blx	r3
  423bda:	b928      	cbnz	r0, 423be8 <lv_label_set_text_fmt+0x1c>
  423bdc:	462a      	mov	r2, r5
  423bde:	2300      	movs	r3, #0
  423be0:	481b      	ldr	r0, [pc, #108]	; (423c50 <lv_label_set_text_fmt+0x84>)
  423be2:	491c      	ldr	r1, [pc, #112]	; (423c54 <lv_label_set_text_fmt+0x88>)
  423be4:	4788      	blx	r1
  423be6:	e7fe      	b.n	423be6 <lv_label_set_text_fmt+0x1a>
    LV_ASSERT_STR(fmt);
  423be8:	4630      	mov	r0, r6
  423bea:	4b18      	ldr	r3, [pc, #96]	; (423c4c <lv_label_set_text_fmt+0x80>)
  423bec:	4798      	blx	r3
  423bee:	b928      	cbnz	r0, 423bfc <lv_label_set_text_fmt+0x30>
  423bf0:	4632      	mov	r2, r6
  423bf2:	2300      	movs	r3, #0
  423bf4:	4816      	ldr	r0, [pc, #88]	; (423c50 <lv_label_set_text_fmt+0x84>)
  423bf6:	4917      	ldr	r1, [pc, #92]	; (423c54 <lv_label_set_text_fmt+0x88>)
  423bf8:	4788      	blx	r1
  423bfa:	e7fe      	b.n	423bfa <lv_label_set_text_fmt+0x2e>
    lv_obj_invalidate(label);
  423bfc:	4628      	mov	r0, r5
  423bfe:	4b16      	ldr	r3, [pc, #88]	; (423c58 <lv_label_set_text_fmt+0x8c>)
  423c00:	4798      	blx	r3
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  423c02:	4628      	mov	r0, r5
  423c04:	4b15      	ldr	r3, [pc, #84]	; (423c5c <lv_label_set_text_fmt+0x90>)
  423c06:	4798      	blx	r3
  423c08:	4604      	mov	r4, r0
    if(fmt == NULL) {
  423c0a:	b93e      	cbnz	r6, 423c1c <lv_label_set_text_fmt+0x50>
        lv_label_refr_text(label);
  423c0c:	4628      	mov	r0, r5
  423c0e:	4b14      	ldr	r3, [pc, #80]	; (423c60 <lv_label_set_text_fmt+0x94>)
  423c10:	4798      	blx	r3
}
  423c12:	b003      	add	sp, #12
  423c14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  423c18:	b003      	add	sp, #12
  423c1a:	4770      	bx	lr
    if(ext->text != NULL && ext->static_txt == 0) {
  423c1c:	6800      	ldr	r0, [r0, #0]
  423c1e:	b138      	cbz	r0, 423c30 <lv_label_set_text_fmt+0x64>
  423c20:	7ca3      	ldrb	r3, [r4, #18]
  423c22:	f013 0f08 	tst.w	r3, #8
  423c26:	d103      	bne.n	423c30 <lv_label_set_text_fmt+0x64>
        lv_mem_free(ext->text);
  423c28:	4b0e      	ldr	r3, [pc, #56]	; (423c64 <lv_label_set_text_fmt+0x98>)
  423c2a:	4798      	blx	r3
        ext->text = NULL;
  423c2c:	2300      	movs	r3, #0
  423c2e:	6023      	str	r3, [r4, #0]
    va_start(args, fmt);
  423c30:	a908      	add	r1, sp, #32
  423c32:	9101      	str	r1, [sp, #4]
    ext->text = _lv_txt_set_text_vfmt(fmt, args);
  423c34:	4630      	mov	r0, r6
  423c36:	4b0c      	ldr	r3, [pc, #48]	; (423c68 <lv_label_set_text_fmt+0x9c>)
  423c38:	4798      	blx	r3
  423c3a:	6020      	str	r0, [r4, #0]
    ext->static_txt = 0; /*Now the text is dynamically allocated*/
  423c3c:	7ca3      	ldrb	r3, [r4, #18]
  423c3e:	f36f 03c3 	bfc	r3, #3, #1
  423c42:	74a3      	strb	r3, [r4, #18]
    lv_label_refr_text(label);
  423c44:	4628      	mov	r0, r5
  423c46:	4b06      	ldr	r3, [pc, #24]	; (423c60 <lv_label_set_text_fmt+0x94>)
  423c48:	4798      	blx	r3
  423c4a:	e7e2      	b.n	423c12 <lv_label_set_text_fmt+0x46>
  423c4c:	00415f95 	.word	0x00415f95
  423c50:	0042c728 	.word	0x0042c728
  423c54:	00415fa1 	.word	0x00415fa1
  423c58:	00405f99 	.word	0x00405f99
  423c5c:	00408115 	.word	0x00408115
  423c60:	0042348d 	.word	0x0042348d
  423c64:	0041679d 	.word	0x0041679d
  423c68:	00418075 	.word	0x00418075

00423c6c <lv_label_set_text_static>:
{
  423c6c:	b570      	push	{r4, r5, r6, lr}
  423c6e:	4605      	mov	r5, r0
  423c70:	460e      	mov	r6, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  423c72:	4b10      	ldr	r3, [pc, #64]	; (423cb4 <lv_label_set_text_static+0x48>)
  423c74:	4798      	blx	r3
  423c76:	b928      	cbnz	r0, 423c84 <lv_label_set_text_static+0x18>
  423c78:	462a      	mov	r2, r5
  423c7a:	2300      	movs	r3, #0
  423c7c:	480e      	ldr	r0, [pc, #56]	; (423cb8 <lv_label_set_text_static+0x4c>)
  423c7e:	490f      	ldr	r1, [pc, #60]	; (423cbc <lv_label_set_text_static+0x50>)
  423c80:	4788      	blx	r1
  423c82:	e7fe      	b.n	423c82 <lv_label_set_text_static+0x16>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  423c84:	4628      	mov	r0, r5
  423c86:	4b0e      	ldr	r3, [pc, #56]	; (423cc0 <lv_label_set_text_static+0x54>)
  423c88:	4798      	blx	r3
  423c8a:	4604      	mov	r4, r0
    if(ext->static_txt == 0 && ext->text != NULL) {
  423c8c:	7c83      	ldrb	r3, [r0, #18]
  423c8e:	f013 0f08 	tst.w	r3, #8
  423c92:	d105      	bne.n	423ca0 <lv_label_set_text_static+0x34>
  423c94:	6800      	ldr	r0, [r0, #0]
  423c96:	b118      	cbz	r0, 423ca0 <lv_label_set_text_static+0x34>
        lv_mem_free(ext->text);
  423c98:	4b0a      	ldr	r3, [pc, #40]	; (423cc4 <lv_label_set_text_static+0x58>)
  423c9a:	4798      	blx	r3
        ext->text = NULL;
  423c9c:	2300      	movs	r3, #0
  423c9e:	6023      	str	r3, [r4, #0]
    if(text != NULL) {
  423ca0:	b126      	cbz	r6, 423cac <lv_label_set_text_static+0x40>
        ext->static_txt = 1;
  423ca2:	7ca3      	ldrb	r3, [r4, #18]
  423ca4:	f043 0308 	orr.w	r3, r3, #8
  423ca8:	74a3      	strb	r3, [r4, #18]
        ext->text       = (char *)text;
  423caa:	6026      	str	r6, [r4, #0]
    lv_label_refr_text(label);
  423cac:	4628      	mov	r0, r5
  423cae:	4b06      	ldr	r3, [pc, #24]	; (423cc8 <lv_label_set_text_static+0x5c>)
  423cb0:	4798      	blx	r3
  423cb2:	bd70      	pop	{r4, r5, r6, pc}
  423cb4:	00415f95 	.word	0x00415f95
  423cb8:	0042c728 	.word	0x0042c728
  423cbc:	00415fa1 	.word	0x00415fa1
  423cc0:	00408115 	.word	0x00408115
  423cc4:	0041679d 	.word	0x0041679d
  423cc8:	0042348d 	.word	0x0042348d

00423ccc <lv_label_set_long_mode>:
{
  423ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  423cce:	4605      	mov	r5, r0
  423cd0:	460f      	mov	r7, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  423cd2:	4b20      	ldr	r3, [pc, #128]	; (423d54 <lv_label_set_long_mode+0x88>)
  423cd4:	4798      	blx	r3
  423cd6:	b928      	cbnz	r0, 423ce4 <lv_label_set_long_mode+0x18>
  423cd8:	462a      	mov	r2, r5
  423cda:	2300      	movs	r3, #0
  423cdc:	481e      	ldr	r0, [pc, #120]	; (423d58 <lv_label_set_long_mode+0x8c>)
  423cde:	491f      	ldr	r1, [pc, #124]	; (423d5c <lv_label_set_long_mode+0x90>)
  423ce0:	4788      	blx	r1
  423ce2:	e7fe      	b.n	423ce2 <lv_label_set_long_mode+0x16>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  423ce4:	4628      	mov	r0, r5
  423ce6:	4b1e      	ldr	r3, [pc, #120]	; (423d60 <lv_label_set_long_mode+0x94>)
  423ce8:	4798      	blx	r3
  423cea:	4604      	mov	r4, r0
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_x);
  423cec:	491d      	ldr	r1, [pc, #116]	; (423d64 <lv_label_set_long_mode+0x98>)
  423cee:	4628      	mov	r0, r5
  423cf0:	4e1d      	ldr	r6, [pc, #116]	; (423d68 <lv_label_set_long_mode+0x9c>)
  423cf2:	47b0      	blx	r6
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_y);
  423cf4:	491d      	ldr	r1, [pc, #116]	; (423d6c <lv_label_set_long_mode+0xa0>)
  423cf6:	4628      	mov	r0, r5
  423cf8:	47b0      	blx	r6
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
  423cfa:	491d      	ldr	r1, [pc, #116]	; (423d70 <lv_label_set_long_mode+0xa4>)
  423cfc:	4628      	mov	r0, r5
  423cfe:	47b0      	blx	r6
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
  423d00:	491c      	ldr	r1, [pc, #112]	; (423d74 <lv_label_set_long_mode+0xa8>)
  423d02:	4628      	mov	r0, r5
  423d04:	47b0      	blx	r6
    ext->offset.x = 0;
  423d06:	2300      	movs	r3, #0
  423d08:	81e3      	strh	r3, [r4, #14]
    ext->offset.y = 0;
  423d0a:	8223      	strh	r3, [r4, #16]
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
  423d0c:	1efb      	subs	r3, r7, #3
  423d0e:	b2db      	uxtb	r3, r3
  423d10:	2b02      	cmp	r3, #2
  423d12:	d810      	bhi.n	423d36 <lv_label_set_long_mode+0x6a>
        ext->expand = 1;
  423d14:	7ca3      	ldrb	r3, [r4, #18]
  423d16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  423d1a:	74a3      	strb	r3, [r4, #18]
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
  423d1c:	7ca3      	ldrb	r3, [r4, #18]
  423d1e:	f003 0307 	and.w	r3, r3, #7
  423d22:	2b02      	cmp	r3, #2
  423d24:	d00c      	beq.n	423d40 <lv_label_set_long_mode+0x74>
    ext->long_mode = long_mode;
  423d26:	7ca3      	ldrb	r3, [r4, #18]
  423d28:	f367 0302 	bfi	r3, r7, #0, #3
  423d2c:	74a3      	strb	r3, [r4, #18]
    lv_label_refr_text(label);
  423d2e:	4628      	mov	r0, r5
  423d30:	4b11      	ldr	r3, [pc, #68]	; (423d78 <lv_label_set_long_mode+0xac>)
  423d32:	4798      	blx	r3
  423d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ext->expand = 0;
  423d36:	7ca3      	ldrb	r3, [r4, #18]
  423d38:	f36f 13c7 	bfc	r3, #7, #1
  423d3c:	74a3      	strb	r3, [r4, #18]
  423d3e:	e7ed      	b.n	423d1c <lv_label_set_long_mode+0x50>
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
  423d40:	68a2      	ldr	r2, [r4, #8]
  423d42:	f64f 73ff 	movw	r3, #65535	; 0xffff
  423d46:	429a      	cmp	r2, r3
  423d48:	d0ed      	beq.n	423d26 <lv_label_set_long_mode+0x5a>
        lv_label_revert_dots(label);
  423d4a:	4628      	mov	r0, r5
  423d4c:	4b0b      	ldr	r3, [pc, #44]	; (423d7c <lv_label_set_long_mode+0xb0>)
  423d4e:	4798      	blx	r3
  423d50:	e7e9      	b.n	423d26 <lv_label_set_long_mode+0x5a>
  423d52:	bf00      	nop
  423d54:	00415f95 	.word	0x00415f95
  423d58:	0042c728 	.word	0x0042c728
  423d5c:	00415fa1 	.word	0x00415fa1
  423d60:	00408115 	.word	0x00408115
  423d64:	00406135 	.word	0x00406135
  423d68:	00415489 	.word	0x00415489
  423d6c:	00406175 	.word	0x00406175
  423d70:	00422dc9 	.word	0x00422dc9
  423d74:	00422dad 	.word	0x00422dad
  423d78:	0042348d 	.word	0x0042348d
  423d7c:	00422c79 	.word	0x00422c79

00423d80 <lv_label_set_recolor>:
{
  423d80:	b538      	push	{r3, r4, r5, lr}
  423d82:	4604      	mov	r4, r0
  423d84:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  423d86:	4b0e      	ldr	r3, [pc, #56]	; (423dc0 <lv_label_set_recolor+0x40>)
  423d88:	4798      	blx	r3
  423d8a:	b928      	cbnz	r0, 423d98 <lv_label_set_recolor+0x18>
  423d8c:	4622      	mov	r2, r4
  423d8e:	2300      	movs	r3, #0
  423d90:	480c      	ldr	r0, [pc, #48]	; (423dc4 <lv_label_set_recolor+0x44>)
  423d92:	490d      	ldr	r1, [pc, #52]	; (423dc8 <lv_label_set_recolor+0x48>)
  423d94:	4788      	blx	r1
  423d96:	e7fe      	b.n	423d96 <lv_label_set_recolor+0x16>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  423d98:	4620      	mov	r0, r4
  423d9a:	4b0c      	ldr	r3, [pc, #48]	; (423dcc <lv_label_set_recolor+0x4c>)
  423d9c:	4798      	blx	r3
    if(ext->recolor == en) return;
  423d9e:	7c83      	ldrb	r3, [r0, #18]
  423da0:	f3c3 1380 	ubfx	r3, r3, #6, #1
  423da4:	42ab      	cmp	r3, r5
  423da6:	d008      	beq.n	423dba <lv_label_set_recolor+0x3a>
    ext->recolor = en == false ? 0 : 1;
  423da8:	b945      	cbnz	r5, 423dbc <lv_label_set_recolor+0x3c>
  423daa:	2200      	movs	r2, #0
  423dac:	7c83      	ldrb	r3, [r0, #18]
  423dae:	f362 1386 	bfi	r3, r2, #6, #1
  423db2:	7483      	strb	r3, [r0, #18]
    lv_label_refr_text(label); /*Refresh the text because the potential color codes in text needs to
  423db4:	4620      	mov	r0, r4
  423db6:	4b06      	ldr	r3, [pc, #24]	; (423dd0 <lv_label_set_recolor+0x50>)
  423db8:	4798      	blx	r3
  423dba:	bd38      	pop	{r3, r4, r5, pc}
    ext->recolor = en == false ? 0 : 1;
  423dbc:	2201      	movs	r2, #1
  423dbe:	e7f5      	b.n	423dac <lv_label_set_recolor+0x2c>
  423dc0:	00415f95 	.word	0x00415f95
  423dc4:	0042c728 	.word	0x0042c728
  423dc8:	00415fa1 	.word	0x00415fa1
  423dcc:	00408115 	.word	0x00408115
  423dd0:	0042348d 	.word	0x0042348d

00423dd4 <lv_label_create>:
{
  423dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  423dd8:	460f      	mov	r7, r1
    lv_obj_t * new_label = lv_obj_create(par, copy);
  423dda:	4b6b      	ldr	r3, [pc, #428]	; (423f88 <lv_label_create+0x1b4>)
  423ddc:	4798      	blx	r3
  423dde:	4604      	mov	r4, r0
    LV_ASSERT_MEM(new_label);
  423de0:	4b6a      	ldr	r3, [pc, #424]	; (423f8c <lv_label_create+0x1b8>)
  423de2:	4798      	blx	r3
  423de4:	b1b0      	cbz	r0, 423e14 <lv_label_create+0x40>
    if(new_label == NULL) return NULL;
  423de6:	2c00      	cmp	r4, #0
  423de8:	f000 8085 	beq.w	423ef6 <lv_label_create+0x122>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_label);
  423dec:	4b68      	ldr	r3, [pc, #416]	; (423f90 <lv_label_create+0x1bc>)
  423dee:	681b      	ldr	r3, [r3, #0]
  423df0:	b1b3      	cbz	r3, 423e20 <lv_label_create+0x4c>
    lv_obj_allocate_ext_attr(new_label, sizeof(lv_label_ext_t));
  423df2:	2114      	movs	r1, #20
  423df4:	4620      	mov	r0, r4
  423df6:	4b67      	ldr	r3, [pc, #412]	; (423f94 <lv_label_create+0x1c0>)
  423df8:	4798      	blx	r3
    lv_label_ext_t * ext = lv_obj_get_ext_attr(new_label);
  423dfa:	4620      	mov	r0, r4
  423dfc:	4b66      	ldr	r3, [pc, #408]	; (423f98 <lv_label_create+0x1c4>)
  423dfe:	4798      	blx	r3
  423e00:	4605      	mov	r5, r0
    LV_ASSERT_MEM(ext);
  423e02:	4b62      	ldr	r3, [pc, #392]	; (423f8c <lv_label_create+0x1b8>)
  423e04:	4798      	blx	r3
  423e06:	b988      	cbnz	r0, 423e2c <lv_label_create+0x58>
  423e08:	462a      	mov	r2, r5
  423e0a:	2300      	movs	r3, #0
  423e0c:	4863      	ldr	r0, [pc, #396]	; (423f9c <lv_label_create+0x1c8>)
  423e0e:	4964      	ldr	r1, [pc, #400]	; (423fa0 <lv_label_create+0x1cc>)
  423e10:	4788      	blx	r1
  423e12:	e7fe      	b.n	423e12 <lv_label_create+0x3e>
    LV_ASSERT_MEM(new_label);
  423e14:	4622      	mov	r2, r4
  423e16:	2300      	movs	r3, #0
  423e18:	4860      	ldr	r0, [pc, #384]	; (423f9c <lv_label_create+0x1c8>)
  423e1a:	4961      	ldr	r1, [pc, #388]	; (423fa0 <lv_label_create+0x1cc>)
  423e1c:	4788      	blx	r1
  423e1e:	e7fe      	b.n	423e1e <lv_label_create+0x4a>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_label);
  423e20:	4620      	mov	r0, r4
  423e22:	4b60      	ldr	r3, [pc, #384]	; (423fa4 <lv_label_create+0x1d0>)
  423e24:	4798      	blx	r3
  423e26:	4b5a      	ldr	r3, [pc, #360]	; (423f90 <lv_label_create+0x1bc>)
  423e28:	6018      	str	r0, [r3, #0]
  423e2a:	e7e2      	b.n	423df2 <lv_label_create+0x1e>
    if(ext == NULL) {
  423e2c:	2d00      	cmp	r5, #0
  423e2e:	d065      	beq.n	423efc <lv_label_create+0x128>
    ext->text       = NULL;
  423e30:	2300      	movs	r3, #0
  423e32:	602b      	str	r3, [r5, #0]
    ext->static_txt = 0;
  423e34:	7caa      	ldrb	r2, [r5, #18]
    ext->align      = LV_LABEL_ALIGN_AUTO;
  423e36:	f002 02b7 	and.w	r2, r2, #183	; 0xb7
    ext->dot_end    = LV_LABEL_DOT_END_INV;
  423e3a:	f64f 71ff 	movw	r1, #65535	; 0xffff
  423e3e:	60a9      	str	r1, [r5, #8]
    ext->long_mode  = LV_LABEL_LONG_EXPAND;
  423e40:	f042 0230 	orr.w	r2, r2, #48	; 0x30
  423e44:	f363 0202 	bfi	r2, r3, #0, #3
  423e48:	74aa      	strb	r2, [r5, #18]
    ext->anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
  423e4a:	2219      	movs	r2, #25
  423e4c:	81aa      	strh	r2, [r5, #12]
    ext->offset.x = 0;
  423e4e:	81eb      	strh	r3, [r5, #14]
    ext->offset.y = 0;
  423e50:	822b      	strh	r3, [r5, #16]
    ext->dot.tmp_ptr   = NULL;
  423e52:	606b      	str	r3, [r5, #4]
    ext->dot_tmp_alloc = 0;
  423e54:	7cea      	ldrb	r2, [r5, #19]
  423e56:	f363 0200 	bfi	r2, r3, #0, #1
  423e5a:	74ea      	strb	r2, [r5, #19]
    lv_obj_set_design_cb(new_label, lv_label_design);
  423e5c:	4952      	ldr	r1, [pc, #328]	; (423fa8 <lv_label_create+0x1d4>)
  423e5e:	4620      	mov	r0, r4
  423e60:	4b52      	ldr	r3, [pc, #328]	; (423fac <lv_label_create+0x1d8>)
  423e62:	4798      	blx	r3
    lv_obj_set_signal_cb(new_label, lv_label_signal);
  423e64:	4952      	ldr	r1, [pc, #328]	; (423fb0 <lv_label_create+0x1dc>)
  423e66:	4620      	mov	r0, r4
  423e68:	4b52      	ldr	r3, [pc, #328]	; (423fb4 <lv_label_create+0x1e0>)
  423e6a:	4798      	blx	r3
    if(copy == NULL) {
  423e6c:	2f00      	cmp	r7, #0
  423e6e:	d04a      	beq.n	423f06 <lv_label_create+0x132>
        lv_label_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
  423e70:	4638      	mov	r0, r7
  423e72:	4b49      	ldr	r3, [pc, #292]	; (423f98 <lv_label_create+0x1c4>)
  423e74:	4798      	blx	r3
  423e76:	4606      	mov	r6, r0
        lv_label_set_long_mode(new_label, lv_label_get_long_mode(copy));
  423e78:	4638      	mov	r0, r7
  423e7a:	4b4f      	ldr	r3, [pc, #316]	; (423fb8 <lv_label_create+0x1e4>)
  423e7c:	4798      	blx	r3
  423e7e:	4601      	mov	r1, r0
  423e80:	4620      	mov	r0, r4
  423e82:	4b4e      	ldr	r3, [pc, #312]	; (423fbc <lv_label_create+0x1e8>)
  423e84:	4798      	blx	r3
        lv_label_set_recolor(new_label, lv_label_get_recolor(copy));
  423e86:	4638      	mov	r0, r7
  423e88:	4b4d      	ldr	r3, [pc, #308]	; (423fc0 <lv_label_create+0x1ec>)
  423e8a:	4798      	blx	r3
  423e8c:	4601      	mov	r1, r0
  423e8e:	4620      	mov	r0, r4
  423e90:	4b4c      	ldr	r3, [pc, #304]	; (423fc4 <lv_label_create+0x1f0>)
  423e92:	4798      	blx	r3
        lv_label_set_align(new_label, lv_label_get_align(copy));
  423e94:	4638      	mov	r0, r7
  423e96:	4b4c      	ldr	r3, [pc, #304]	; (423fc8 <lv_label_create+0x1f4>)
  423e98:	4798      	blx	r3
  423e9a:	4601      	mov	r1, r0
  423e9c:	4620      	mov	r0, r4
  423e9e:	4b4b      	ldr	r3, [pc, #300]	; (423fcc <lv_label_create+0x1f8>)
  423ea0:	4798      	blx	r3
        if(copy_ext->static_txt == 0)
  423ea2:	7cb3      	ldrb	r3, [r6, #18]
  423ea4:	f013 0f08 	tst.w	r3, #8
  423ea8:	d13e      	bne.n	423f28 <lv_label_create+0x154>
            lv_label_set_text(new_label, lv_label_get_text(copy));
  423eaa:	4638      	mov	r0, r7
  423eac:	4b48      	ldr	r3, [pc, #288]	; (423fd0 <lv_label_create+0x1fc>)
  423eae:	4798      	blx	r3
  423eb0:	4601      	mov	r1, r0
  423eb2:	4620      	mov	r0, r4
  423eb4:	4b47      	ldr	r3, [pc, #284]	; (423fd4 <lv_label_create+0x200>)
  423eb6:	4798      	blx	r3
        if(copy_ext->long_mode == LV_LABEL_LONG_DOT) {
  423eb8:	7cb3      	ldrb	r3, [r6, #18]
  423eba:	f003 0307 	and.w	r3, r3, #7
  423ebe:	2b02      	cmp	r3, #2
  423ec0:	d03a      	beq.n	423f38 <lv_label_create+0x164>
        if(copy_ext->dot_tmp_alloc && copy_ext->dot.tmp_ptr) {
  423ec2:	7cf3      	ldrb	r3, [r6, #19]
  423ec4:	f013 0f01 	tst.w	r3, #1
  423ec8:	d055      	beq.n	423f76 <lv_label_create+0x1a2>
  423eca:	6870      	ldr	r0, [r6, #4]
  423ecc:	2800      	cmp	r0, #0
  423ece:	d052      	beq.n	423f76 <lv_label_create+0x1a2>
            uint32_t len = (uint32_t)strlen(copy_ext->dot.tmp_ptr);
  423ed0:	4b41      	ldr	r3, [pc, #260]	; (423fd8 <lv_label_create+0x204>)
  423ed2:	4798      	blx	r3
            lv_label_set_dot_tmp(new_label, ext->dot.tmp_ptr, len);
  423ed4:	4602      	mov	r2, r0
  423ed6:	6869      	ldr	r1, [r5, #4]
  423ed8:	4620      	mov	r0, r4
  423eda:	4b40      	ldr	r3, [pc, #256]	; (423fdc <lv_label_create+0x208>)
  423edc:	4798      	blx	r3
        ext->dot_tmp_alloc = copy_ext->dot_tmp_alloc;
  423ede:	7cf2      	ldrb	r2, [r6, #19]
  423ee0:	7ceb      	ldrb	r3, [r5, #19]
  423ee2:	f362 0300 	bfi	r3, r2, #0, #1
  423ee6:	74eb      	strb	r3, [r5, #19]
        ext->dot_end       = copy_ext->dot_end;
  423ee8:	68b3      	ldr	r3, [r6, #8]
  423eea:	60ab      	str	r3, [r5, #8]
        lv_obj_refresh_style(new_label, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
  423eec:	22ff      	movs	r2, #255	; 0xff
  423eee:	4611      	mov	r1, r2
  423ef0:	4620      	mov	r0, r4
  423ef2:	4b3b      	ldr	r3, [pc, #236]	; (423fe0 <lv_label_create+0x20c>)
  423ef4:	4798      	blx	r3
}
  423ef6:	4620      	mov	r0, r4
  423ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_obj_del(new_label);
  423efc:	4620      	mov	r0, r4
  423efe:	4b39      	ldr	r3, [pc, #228]	; (423fe4 <lv_label_create+0x210>)
  423f00:	4798      	blx	r3
        return NULL;
  423f02:	2400      	movs	r4, #0
  423f04:	e7f7      	b.n	423ef6 <lv_label_create+0x122>
        lv_theme_apply(new_label, LV_THEME_LABEL);
  423f06:	2112      	movs	r1, #18
  423f08:	4620      	mov	r0, r4
  423f0a:	4b37      	ldr	r3, [pc, #220]	; (423fe8 <lv_label_create+0x214>)
  423f0c:	4798      	blx	r3
        lv_obj_set_click(new_label, false);
  423f0e:	2100      	movs	r1, #0
  423f10:	4620      	mov	r0, r4
  423f12:	4b36      	ldr	r3, [pc, #216]	; (423fec <lv_label_create+0x218>)
  423f14:	4798      	blx	r3
        lv_label_set_long_mode(new_label, LV_LABEL_LONG_EXPAND);
  423f16:	2100      	movs	r1, #0
  423f18:	4620      	mov	r0, r4
  423f1a:	4b28      	ldr	r3, [pc, #160]	; (423fbc <lv_label_create+0x1e8>)
  423f1c:	4798      	blx	r3
        lv_label_set_text(new_label, "Text");
  423f1e:	4934      	ldr	r1, [pc, #208]	; (423ff0 <lv_label_create+0x21c>)
  423f20:	4620      	mov	r0, r4
  423f22:	4b2c      	ldr	r3, [pc, #176]	; (423fd4 <lv_label_create+0x200>)
  423f24:	4798      	blx	r3
  423f26:	e7e6      	b.n	423ef6 <lv_label_create+0x122>
            lv_label_set_text_static(new_label, lv_label_get_text(copy));
  423f28:	4638      	mov	r0, r7
  423f2a:	4b29      	ldr	r3, [pc, #164]	; (423fd0 <lv_label_create+0x1fc>)
  423f2c:	4798      	blx	r3
  423f2e:	4601      	mov	r1, r0
  423f30:	4620      	mov	r0, r4
  423f32:	4b30      	ldr	r3, [pc, #192]	; (423ff4 <lv_label_create+0x220>)
  423f34:	4798      	blx	r3
  423f36:	e7bf      	b.n	423eb8 <lv_label_create+0xe4>
            ext->text = lv_mem_realloc(ext->text, _lv_mem_get_size(copy_ext->text));
  423f38:	682f      	ldr	r7, [r5, #0]
  423f3a:	6830      	ldr	r0, [r6, #0]
  423f3c:	4b2e      	ldr	r3, [pc, #184]	; (423ff8 <lv_label_create+0x224>)
  423f3e:	4798      	blx	r3
  423f40:	4601      	mov	r1, r0
  423f42:	4638      	mov	r0, r7
  423f44:	4b2d      	ldr	r3, [pc, #180]	; (423ffc <lv_label_create+0x228>)
  423f46:	4798      	blx	r3
  423f48:	6028      	str	r0, [r5, #0]
            LV_ASSERT_MEM(ext->text);
  423f4a:	4b10      	ldr	r3, [pc, #64]	; (423f8c <lv_label_create+0x1b8>)
  423f4c:	4798      	blx	r3
  423f4e:	b928      	cbnz	r0, 423f5c <lv_label_create+0x188>
  423f50:	682a      	ldr	r2, [r5, #0]
  423f52:	2300      	movs	r3, #0
  423f54:	4811      	ldr	r0, [pc, #68]	; (423f9c <lv_label_create+0x1c8>)
  423f56:	4912      	ldr	r1, [pc, #72]	; (423fa0 <lv_label_create+0x1cc>)
  423f58:	4788      	blx	r1
  423f5a:	e7fe      	b.n	423f5a <lv_label_create+0x186>
            if(ext->text == NULL) return NULL;
  423f5c:	682f      	ldr	r7, [r5, #0]
  423f5e:	b187      	cbz	r7, 423f82 <lv_label_create+0x1ae>
            _lv_memcpy(ext->text, copy_ext->text, _lv_mem_get_size(copy_ext->text));
  423f60:	f8d6 8000 	ldr.w	r8, [r6]
  423f64:	4640      	mov	r0, r8
  423f66:	4b24      	ldr	r3, [pc, #144]	; (423ff8 <lv_label_create+0x224>)
  423f68:	4798      	blx	r3
  423f6a:	4602      	mov	r2, r0
  423f6c:	4641      	mov	r1, r8
  423f6e:	4638      	mov	r0, r7
  423f70:	4b23      	ldr	r3, [pc, #140]	; (424000 <lv_label_create+0x22c>)
  423f72:	4798      	blx	r3
  423f74:	e7a5      	b.n	423ec2 <lv_label_create+0xee>
            _lv_memcpy(ext->dot.tmp, copy_ext->dot.tmp, sizeof(ext->dot.tmp));
  423f76:	2204      	movs	r2, #4
  423f78:	18b1      	adds	r1, r6, r2
  423f7a:	18a8      	adds	r0, r5, r2
  423f7c:	4b20      	ldr	r3, [pc, #128]	; (424000 <lv_label_create+0x22c>)
  423f7e:	4798      	blx	r3
  423f80:	e7ad      	b.n	423ede <lv_label_create+0x10a>
            if(ext->text == NULL) return NULL;
  423f82:	2400      	movs	r4, #0
  423f84:	e7b7      	b.n	423ef6 <lv_label_create+0x122>
  423f86:	bf00      	nop
  423f88:	00406855 	.word	0x00406855
  423f8c:	00415f95 	.word	0x00415f95
  423f90:	20414888 	.word	0x20414888
  423f94:	00405981 	.word	0x00405981
  423f98:	00408115 	.word	0x00408115
  423f9c:	0042c714 	.word	0x0042c714
  423fa0:	00415fa1 	.word	0x00415fa1
  423fa4:	004080c5 	.word	0x004080c5
  423fa8:	004231e5 	.word	0x004231e5
  423fac:	00405959 	.word	0x00405959
  423fb0:	004239d9 	.word	0x004239d9
  423fb4:	0040591d 	.word	0x0040591d
  423fb8:	00422e61 	.word	0x00422e61
  423fbc:	00423ccd 	.word	0x00423ccd
  423fc0:	00422ed1 	.word	0x00422ed1
  423fc4:	00423d81 	.word	0x00423d81
  423fc8:	00422e95 	.word	0x00422e95
  423fcc:	00422de5 	.word	0x00422de5
  423fd0:	00422e31 	.word	0x00422e31
  423fd4:	00423ad1 	.word	0x00423ad1
  423fd8:	004285c1 	.word	0x004285c1
  423fdc:	00422d45 	.word	0x00422d45
  423fe0:	004078a1 	.word	0x004078a1
  423fe4:	00408275 	.word	0x00408275
  423fe8:	00418419 	.word	0x00418419
  423fec:	00405751 	.word	0x00405751
  423ff0:	0042fe9c 	.word	0x0042fe9c
  423ff4:	00423c6d 	.word	0x00423c6d
  423ff8:	00416811 	.word	0x00416811
  423ffc:	00416a09 	.word	0x00416a09
  424000:	004168e9 	.word	0x004168e9

00424004 <lv_msgbox_close_ready_cb>:
    }
}

#if LV_USE_ANIMATION
static void lv_msgbox_close_ready_cb(lv_anim_t * a)
{
  424004:	b508      	push	{r3, lr}
    lv_obj_del(a->var);
  424006:	6800      	ldr	r0, [r0, #0]
  424008:	4b01      	ldr	r3, [pc, #4]	; (424010 <lv_msgbox_close_ready_cb+0xc>)
  42400a:	4798      	blx	r3
  42400c:	bd08      	pop	{r3, pc}
  42400e:	bf00      	nop
  424010:	00408275 	.word	0x00408275

00424014 <lv_msgbox_get_style>:
{
  424014:	b538      	push	{r3, r4, r5, lr}
  424016:	4604      	mov	r4, r0
  424018:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(mbox, LV_OBJX_NAME);
  42401a:	4b13      	ldr	r3, [pc, #76]	; (424068 <lv_msgbox_get_style+0x54>)
  42401c:	4798      	blx	r3
  42401e:	b928      	cbnz	r0, 42402c <lv_msgbox_get_style+0x18>
  424020:	4622      	mov	r2, r4
  424022:	2300      	movs	r3, #0
  424024:	4811      	ldr	r0, [pc, #68]	; (42406c <lv_msgbox_get_style+0x58>)
  424026:	4912      	ldr	r1, [pc, #72]	; (424070 <lv_msgbox_get_style+0x5c>)
  424028:	4788      	blx	r1
  42402a:	e7fe      	b.n	42402a <lv_msgbox_get_style+0x16>
    lv_msgbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
  42402c:	4620      	mov	r0, r4
  42402e:	4b11      	ldr	r3, [pc, #68]	; (424074 <lv_msgbox_get_style+0x60>)
  424030:	4798      	blx	r3
    switch(part) {
  424032:	2d40      	cmp	r5, #64	; 0x40
  424034:	d007      	beq.n	424046 <lv_msgbox_get_style+0x32>
  424036:	2d41      	cmp	r5, #65	; 0x41
  424038:	d00b      	beq.n	424052 <lv_msgbox_get_style+0x3e>
  42403a:	b10d      	cbz	r5, 424040 <lv_msgbox_get_style+0x2c>
            style_dsc_p = NULL;
  42403c:	2000      	movs	r0, #0
  42403e:	bd38      	pop	{r3, r4, r5, pc}
            style_dsc_p = &mbox->style_list;
  424040:	f104 0028 	add.w	r0, r4, #40	; 0x28
            break;
  424044:	bd38      	pop	{r3, r4, r5, pc}
            style_dsc_p = ext->btnm ? lv_obj_get_style_list(ext->btnm, LV_BTNMATRIX_PART_BG) : NULL;
  424046:	6880      	ldr	r0, [r0, #8]
  424048:	b148      	cbz	r0, 42405e <lv_msgbox_get_style+0x4a>
  42404a:	2100      	movs	r1, #0
  42404c:	4b0a      	ldr	r3, [pc, #40]	; (424078 <lv_msgbox_get_style+0x64>)
  42404e:	4798      	blx	r3
  424050:	bd38      	pop	{r3, r4, r5, pc}
            style_dsc_p = ext->btnm ? lv_obj_get_style_list(ext->btnm, LV_BTNMATRIX_PART_BTN) : NULL;
  424052:	6880      	ldr	r0, [r0, #8]
  424054:	b128      	cbz	r0, 424062 <lv_msgbox_get_style+0x4e>
  424056:	2101      	movs	r1, #1
  424058:	4b07      	ldr	r3, [pc, #28]	; (424078 <lv_msgbox_get_style+0x64>)
  42405a:	4798      	blx	r3
  42405c:	bd38      	pop	{r3, r4, r5, pc}
            style_dsc_p = ext->btnm ? lv_obj_get_style_list(ext->btnm, LV_BTNMATRIX_PART_BG) : NULL;
  42405e:	2000      	movs	r0, #0
  424060:	bd38      	pop	{r3, r4, r5, pc}
            style_dsc_p = ext->btnm ? lv_obj_get_style_list(ext->btnm, LV_BTNMATRIX_PART_BTN) : NULL;
  424062:	2000      	movs	r0, #0
}
  424064:	bd38      	pop	{r3, r4, r5, pc}
  424066:	bf00      	nop
  424068:	00415f95 	.word	0x00415f95
  42406c:	0042c728 	.word	0x0042c728
  424070:	00415fa1 	.word	0x00415fa1
  424074:	00408115 	.word	0x00408115
  424078:	00405c4d 	.word	0x00405c4d

0042407c <mbox_realign>:
{
  42407c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  424080:	b083      	sub	sp, #12
  424082:	4683      	mov	fp, r0
    lv_msgbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
  424084:	4b2b      	ldr	r3, [pc, #172]	; (424134 <mbox_realign+0xb8>)
  424086:	4798      	blx	r3
  424088:	4604      	mov	r4, r0
    lv_coord_t w = lv_obj_get_width_fit(mbox);
  42408a:	4658      	mov	r0, fp
  42408c:	4b2a      	ldr	r3, [pc, #168]	; (424138 <mbox_realign+0xbc>)
  42408e:	4798      	blx	r3
  424090:	9001      	str	r0, [sp, #4]
    if(ext->text) {
  424092:	6860      	ldr	r0, [r4, #4]
  424094:	b110      	cbz	r0, 42409c <mbox_realign+0x20>
        lv_obj_set_width(ext->text, w);
  424096:	9901      	ldr	r1, [sp, #4]
  424098:	4b28      	ldr	r3, [pc, #160]	; (42413c <mbox_realign+0xc0>)
  42409a:	4798      	blx	r3
    if(ext->btnm) {
  42409c:	68a3      	ldr	r3, [r4, #8]
  42409e:	2b00      	cmp	r3, #0
  4240a0:	d045      	beq.n	42412e <mbox_realign+0xb2>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  4240a2:	2210      	movs	r2, #16
  4240a4:	2140      	movs	r1, #64	; 0x40
  4240a6:	4658      	mov	r0, fp
  4240a8:	4d25      	ldr	r5, [pc, #148]	; (424140 <mbox_realign+0xc4>)
  4240aa:	47a8      	blx	r5
  4240ac:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  4240ae:	2211      	movs	r2, #17
  4240b0:	2140      	movs	r1, #64	; 0x40
  4240b2:	4658      	mov	r0, fp
  4240b4:	47a8      	blx	r5
  4240b6:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  4240b8:	2214      	movs	r2, #20
  4240ba:	2140      	movs	r1, #64	; 0x40
  4240bc:	4658      	mov	r0, fp
  4240be:	47a8      	blx	r5
  4240c0:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  4240c2:	2210      	movs	r2, #16
  4240c4:	2141      	movs	r1, #65	; 0x41
  4240c6:	4658      	mov	r0, fp
  4240c8:	47a8      	blx	r5
  4240ca:	4682      	mov	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  4240cc:	2211      	movs	r2, #17
  4240ce:	2141      	movs	r1, #65	; 0x41
  4240d0:	4658      	mov	r0, fp
  4240d2:	47a8      	blx	r5
  4240d4:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  4240d6:	f248 028e 	movw	r2, #32910	; 0x808e
  4240da:	2141      	movs	r1, #65	; 0x41
  4240dc:	4658      	mov	r0, fp
  4240de:	4b19      	ldr	r3, [pc, #100]	; (424144 <mbox_realign+0xc8>)
  4240e0:	4798      	blx	r3
  4240e2:	4683      	mov	fp, r0
        const char ** btnm_map = lv_btnmatrix_get_map_array(ext->btnm);
  4240e4:	68a0      	ldr	r0, [r4, #8]
  4240e6:	4b18      	ldr	r3, [pc, #96]	; (424148 <mbox_realign+0xcc>)
  4240e8:	4798      	blx	r3
        for(i = 0; btnm_map[i][0] != '\0'; i++) {
  4240ea:	2300      	movs	r3, #0
        uint16_t btnm_lines = 1;
  4240ec:	2101      	movs	r1, #1
        for(i = 0; btnm_map[i][0] != '\0'; i++) {
  4240ee:	e001      	b.n	4240f4 <mbox_realign+0x78>
  4240f0:	3301      	adds	r3, #1
  4240f2:	b29b      	uxth	r3, r3
  4240f4:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
  4240f8:	7812      	ldrb	r2, [r2, #0]
  4240fa:	b122      	cbz	r2, 424106 <mbox_realign+0x8a>
            if(btnm_map[i][0] == '\n') btnm_lines++;
  4240fc:	2a0a      	cmp	r2, #10
  4240fe:	d1f7      	bne.n	4240f0 <mbox_realign+0x74>
  424100:	3101      	adds	r1, #1
  424102:	b289      	uxth	r1, r1
  424104:	e7f4      	b.n	4240f0 <mbox_realign+0x74>
  424106:	f9bb 2008 	ldrsh.w	r2, [fp, #8]
        lv_coord_t btn_h = font_h + btn_top + btn_bottom;
  42410a:	4452      	add	r2, sl
  42410c:	fa19 f282 	uxtah	r2, r9, r2
        lv_obj_set_size(ext->btnm, w, btn_h * btnm_lines + bg_inner * (btnm_lines - 1) + bg_top + bg_bottom);
  424110:	f101 39ff 	add.w	r9, r1, #4294967295
  424114:	fb19 f808 	smulbb	r8, r9, r8
  424118:	fb11 8202 	smlabb	r2, r1, r2, r8
  42411c:	fa17 f282 	uxtah	r2, r7, r2
  424120:	fa16 f282 	uxtah	r2, r6, r2
  424124:	b212      	sxth	r2, r2
  424126:	9901      	ldr	r1, [sp, #4]
  424128:	68a0      	ldr	r0, [r4, #8]
  42412a:	4b08      	ldr	r3, [pc, #32]	; (42414c <mbox_realign+0xd0>)
  42412c:	4798      	blx	r3
}
  42412e:	b003      	add	sp, #12
  424130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  424134:	00408115 	.word	0x00408115
  424138:	004076c1 	.word	0x004076c1
  42413c:	00406d6d 	.word	0x00406d6d
  424140:	00407485 	.word	0x00407485
  424144:	0040737d 	.word	0x0040737d
  424148:	0041e889 	.word	0x0041e889
  42414c:	00406c79 	.word	0x00406c79

00424150 <lv_msgbox_signal>:
{
  424150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  424154:	b082      	sub	sp, #8
  424156:	4607      	mov	r7, r0
  424158:	460c      	mov	r4, r1
  42415a:	4615      	mov	r5, r2
    char c_trans = 0;
  42415c:	2300      	movs	r3, #0
  42415e:	f88d 3007 	strb.w	r3, [sp, #7]
    if(sign == LV_SIGNAL_CONTROL) {
  424162:	2918      	cmp	r1, #24
  424164:	d010      	beq.n	424188 <lv_msgbox_signal+0x38>
    if(sign == LV_SIGNAL_GET_STYLE) {
  424166:	2c08      	cmp	r4, #8
  424168:	d023      	beq.n	4241b2 <lv_msgbox_signal+0x62>
    else if(sign == LV_SIGNAL_GET_STATE_DSC) {
  42416a:	2c09      	cmp	r4, #9
  42416c:	d031      	beq.n	4241d2 <lv_msgbox_signal+0x82>
    res = ancestor_signal(mbox, sign, param);
  42416e:	4b6e      	ldr	r3, [pc, #440]	; (424328 <lv_msgbox_signal+0x1d8>)
  424170:	681b      	ldr	r3, [r3, #0]
  424172:	462a      	mov	r2, r5
  424174:	4621      	mov	r1, r4
  424176:	4638      	mov	r0, r7
  424178:	4798      	blx	r3
  42417a:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
  42417c:	2801      	cmp	r0, #1
  42417e:	d044      	beq.n	42420a <lv_msgbox_signal+0xba>
}
  424180:	4630      	mov	r0, r6
  424182:	b002      	add	sp, #8
  424184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        c_trans = *((char *)param);
  424188:	7813      	ldrb	r3, [r2, #0]
  42418a:	f88d 3007 	strb.w	r3, [sp, #7]
        if(c_trans == LV_KEY_DOWN) c_trans = LV_KEY_LEFT;
  42418e:	2b12      	cmp	r3, #18
  424190:	d006      	beq.n	4241a0 <lv_msgbox_signal+0x50>
        if(c_trans == LV_KEY_UP) c_trans = LV_KEY_RIGHT;
  424192:	f89d 3007 	ldrb.w	r3, [sp, #7]
  424196:	2b11      	cmp	r3, #17
  424198:	d006      	beq.n	4241a8 <lv_msgbox_signal+0x58>
        param = &c_trans;
  42419a:	f10d 0507 	add.w	r5, sp, #7
  42419e:	e7e2      	b.n	424166 <lv_msgbox_signal+0x16>
        if(c_trans == LV_KEY_DOWN) c_trans = LV_KEY_LEFT;
  4241a0:	2314      	movs	r3, #20
  4241a2:	f88d 3007 	strb.w	r3, [sp, #7]
  4241a6:	e7f4      	b.n	424192 <lv_msgbox_signal+0x42>
        if(c_trans == LV_KEY_UP) c_trans = LV_KEY_RIGHT;
  4241a8:	ad02      	add	r5, sp, #8
  4241aa:	2313      	movs	r3, #19
  4241ac:	f805 3d01 	strb.w	r3, [r5, #-1]!
  4241b0:	e7d9      	b.n	424166 <lv_msgbox_signal+0x16>
        info->result = lv_msgbox_get_style(mbox, info->part);
  4241b2:	7829      	ldrb	r1, [r5, #0]
  4241b4:	4638      	mov	r0, r7
  4241b6:	4b5d      	ldr	r3, [pc, #372]	; (42432c <lv_msgbox_signal+0x1dc>)
  4241b8:	4798      	blx	r3
  4241ba:	6068      	str	r0, [r5, #4]
        if(info->result != NULL) return LV_RES_OK;
  4241bc:	b108      	cbz	r0, 4241c2 <lv_msgbox_signal+0x72>
  4241be:	2601      	movs	r6, #1
  4241c0:	e7de      	b.n	424180 <lv_msgbox_signal+0x30>
        else return ancestor_signal(mbox, sign, param);
  4241c2:	4b59      	ldr	r3, [pc, #356]	; (424328 <lv_msgbox_signal+0x1d8>)
  4241c4:	681b      	ldr	r3, [r3, #0]
  4241c6:	462a      	mov	r2, r5
  4241c8:	4621      	mov	r1, r4
  4241ca:	4638      	mov	r0, r7
  4241cc:	4798      	blx	r3
  4241ce:	4606      	mov	r6, r0
  4241d0:	e7d6      	b.n	424180 <lv_msgbox_signal+0x30>
        lv_msgbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
  4241d2:	4638      	mov	r0, r7
  4241d4:	4b56      	ldr	r3, [pc, #344]	; (424330 <lv_msgbox_signal+0x1e0>)
  4241d6:	4798      	blx	r3
        if(ext->btnm && info->part == LV_MSGBOX_PART_BTN_BG) {
  4241d8:	6880      	ldr	r0, [r0, #8]
  4241da:	b110      	cbz	r0, 4241e2 <lv_msgbox_signal+0x92>
  4241dc:	782b      	ldrb	r3, [r5, #0]
  4241de:	2b40      	cmp	r3, #64	; 0x40
  4241e0:	d007      	beq.n	4241f2 <lv_msgbox_signal+0xa2>
        else if(ext->btnm && info->part == LV_MSGBOX_PART_BTN) {
  4241e2:	2800      	cmp	r0, #0
  4241e4:	f000 809e 	beq.w	424324 <lv_msgbox_signal+0x1d4>
  4241e8:	782b      	ldrb	r3, [r5, #0]
  4241ea:	2b41      	cmp	r3, #65	; 0x41
  4241ec:	d007      	beq.n	4241fe <lv_msgbox_signal+0xae>
        return LV_RES_OK;
  4241ee:	2601      	movs	r6, #1
  4241f0:	e7c6      	b.n	424180 <lv_msgbox_signal+0x30>
            info->result = lv_obj_get_state(ext->btnm, LV_BTNMATRIX_PART_BG);
  4241f2:	2100      	movs	r1, #0
  4241f4:	4b4f      	ldr	r3, [pc, #316]	; (424334 <lv_msgbox_signal+0x1e4>)
  4241f6:	4798      	blx	r3
  4241f8:	7068      	strb	r0, [r5, #1]
        return LV_RES_OK;
  4241fa:	2601      	movs	r6, #1
            info->result = lv_obj_get_state(ext->btnm, LV_BTNMATRIX_PART_BG);
  4241fc:	e7c0      	b.n	424180 <lv_msgbox_signal+0x30>
            info->result = lv_obj_get_state(ext->btnm, LV_BTNMATRIX_PART_BTN);
  4241fe:	2101      	movs	r1, #1
  424200:	4b4c      	ldr	r3, [pc, #304]	; (424334 <lv_msgbox_signal+0x1e4>)
  424202:	4798      	blx	r3
  424204:	7068      	strb	r0, [r5, #1]
        return LV_RES_OK;
  424206:	2601      	movs	r6, #1
  424208:	e7ba      	b.n	424180 <lv_msgbox_signal+0x30>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  42420a:	2c07      	cmp	r4, #7
  42420c:	d039      	beq.n	424282 <lv_msgbox_signal+0x132>
    lv_msgbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
  42420e:	4638      	mov	r0, r7
  424210:	4b47      	ldr	r3, [pc, #284]	; (424330 <lv_msgbox_signal+0x1e0>)
  424212:	4798      	blx	r3
  424214:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_COORD_CHG) {
  424216:	2c02      	cmp	r4, #2
  424218:	d039      	beq.n	42428e <lv_msgbox_signal+0x13e>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
  42421a:	2c04      	cmp	r4, #4
  42421c:	d047      	beq.n	4242ae <lv_msgbox_signal+0x15e>
    else if(sign == LV_SIGNAL_RELEASED) {
  42421e:	2c0e      	cmp	r4, #14
  424220:	d049      	beq.n	4242b6 <lv_msgbox_signal+0x166>
        sign == LV_SIGNAL_CONTROL || sign == LV_SIGNAL_GET_EDITABLE ||
  424222:	f1a4 0318 	sub.w	r3, r4, #24
  424226:	b2db      	uxtb	r3, r3
    else if(
  424228:	2c16      	cmp	r4, #22
  42422a:	bf18      	it	ne
  42422c:	2b01      	cmpne	r3, #1
  42422e:	d901      	bls.n	424234 <lv_msgbox_signal+0xe4>
        sign == LV_SIGNAL_FOCUS || sign == LV_SIGNAL_DEFOCUS) {
  424230:	2c17      	cmp	r4, #23
  424232:	d1a5      	bne.n	424180 <lv_msgbox_signal+0x30>
        if(ext->btnm) {
  424234:	f8d8 0008 	ldr.w	r0, [r8, #8]
  424238:	b118      	cbz	r0, 424242 <lv_msgbox_signal+0xf2>
            ext->btnm->signal_cb(ext->btnm, sign, param);
  42423a:	69c3      	ldr	r3, [r0, #28]
  42423c:	462a      	mov	r2, r5
  42423e:	4621      	mov	r1, r4
  424240:	4798      	blx	r3
        if(sign == LV_SIGNAL_FOCUS) {
  424242:	2c16      	cmp	r4, #22
  424244:	d049      	beq.n	4242da <lv_msgbox_signal+0x18a>
        if(ext->btnm && (sign == LV_SIGNAL_FOCUS || sign == LV_SIGNAL_DEFOCUS)) {
  424246:	f8d8 3008 	ldr.w	r3, [r8, #8]
  42424a:	2b00      	cmp	r3, #0
  42424c:	d098      	beq.n	424180 <lv_msgbox_signal+0x30>
  42424e:	3c16      	subs	r4, #22
  424250:	b2e4      	uxtb	r4, r4
  424252:	2c01      	cmp	r4, #1
  424254:	d894      	bhi.n	424180 <lv_msgbox_signal+0x30>
            lv_state_t state = lv_obj_get_state(mbox, LV_MSGBOX_PART_BG);
  424256:	2100      	movs	r1, #0
  424258:	4638      	mov	r0, r7
  42425a:	4b36      	ldr	r3, [pc, #216]	; (424334 <lv_msgbox_signal+0x1e4>)
  42425c:	4798      	blx	r3
  42425e:	4604      	mov	r4, r0
            if(state & LV_STATE_FOCUSED) {
  424260:	f010 0f02 	tst.w	r0, #2
  424264:	d052      	beq.n	42430c <lv_msgbox_signal+0x1bc>
                lv_obj_set_state(ext->btnm, LV_STATE_FOCUSED);
  424266:	2102      	movs	r1, #2
  424268:	f8d8 0008 	ldr.w	r0, [r8, #8]
  42426c:	4b32      	ldr	r3, [pc, #200]	; (424338 <lv_msgbox_signal+0x1e8>)
  42426e:	4798      	blx	r3
            if(state & LV_STATE_EDITED) {
  424270:	f014 0f04 	tst.w	r4, #4
  424274:	d150      	bne.n	424318 <lv_msgbox_signal+0x1c8>
                lv_obj_clear_state(ext->btnm, LV_STATE_EDITED);
  424276:	2104      	movs	r1, #4
  424278:	f8d8 0008 	ldr.w	r0, [r8, #8]
  42427c:	4b2f      	ldr	r3, [pc, #188]	; (42433c <lv_msgbox_signal+0x1ec>)
  42427e:	4798      	blx	r3
  424280:	e77e      	b.n	424180 <lv_msgbox_signal+0x30>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  424282:	492f      	ldr	r1, [pc, #188]	; (424340 <lv_msgbox_signal+0x1f0>)
  424284:	4628      	mov	r0, r5
  424286:	4b2f      	ldr	r3, [pc, #188]	; (424344 <lv_msgbox_signal+0x1f4>)
  424288:	4798      	blx	r3
  42428a:	4606      	mov	r6, r0
  42428c:	e778      	b.n	424180 <lv_msgbox_signal+0x30>
        if(lv_obj_get_width(mbox) != lv_area_get_width(param)) {
  42428e:	4638      	mov	r0, r7
  424290:	4b2d      	ldr	r3, [pc, #180]	; (424348 <lv_msgbox_signal+0x1f8>)
  424292:	4798      	blx	r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  424294:	88ab      	ldrh	r3, [r5, #4]
  424296:	882a      	ldrh	r2, [r5, #0]
  424298:	1a9b      	subs	r3, r3, r2
  42429a:	b29b      	uxth	r3, r3
  42429c:	3301      	adds	r3, #1
  42429e:	b21b      	sxth	r3, r3
  4242a0:	4298      	cmp	r0, r3
  4242a2:	f43f af6d 	beq.w	424180 <lv_msgbox_signal+0x30>
            mbox_realign(mbox);
  4242a6:	4638      	mov	r0, r7
  4242a8:	4b28      	ldr	r3, [pc, #160]	; (42434c <lv_msgbox_signal+0x1fc>)
  4242aa:	4798      	blx	r3
  4242ac:	e768      	b.n	424180 <lv_msgbox_signal+0x30>
        mbox_realign(mbox);
  4242ae:	4638      	mov	r0, r7
  4242b0:	4b26      	ldr	r3, [pc, #152]	; (42434c <lv_msgbox_signal+0x1fc>)
  4242b2:	4798      	blx	r3
  4242b4:	e764      	b.n	424180 <lv_msgbox_signal+0x30>
        if(ext->btnm) {
  4242b6:	6880      	ldr	r0, [r0, #8]
  4242b8:	2800      	cmp	r0, #0
  4242ba:	f43f af61 	beq.w	424180 <lv_msgbox_signal+0x30>
            uint32_t btn_id = lv_btnmatrix_get_focused_btn(ext->btnm);
  4242be:	4b24      	ldr	r3, [pc, #144]	; (424350 <lv_msgbox_signal+0x200>)
  4242c0:	4798      	blx	r3
  4242c2:	9000      	str	r0, [sp, #0]
            if(btn_id != LV_BTNMATRIX_BTN_NONE) lv_event_send(mbox, LV_EVENT_VALUE_CHANGED, &btn_id);
  4242c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4242c8:	4298      	cmp	r0, r3
  4242ca:	f43f af59 	beq.w	424180 <lv_msgbox_signal+0x30>
  4242ce:	466a      	mov	r2, sp
  4242d0:	2110      	movs	r1, #16
  4242d2:	4638      	mov	r0, r7
  4242d4:	4b1f      	ldr	r3, [pc, #124]	; (424354 <lv_msgbox_signal+0x204>)
  4242d6:	4798      	blx	r3
  4242d8:	e752      	b.n	424180 <lv_msgbox_signal+0x30>
            lv_indev_t * indev         = lv_indev_get_act();
  4242da:	4b1f      	ldr	r3, [pc, #124]	; (424358 <lv_msgbox_signal+0x208>)
  4242dc:	4798      	blx	r3
            lv_indev_type_t indev_type = lv_indev_get_type(indev);
  4242de:	4b1f      	ldr	r3, [pc, #124]	; (42435c <lv_msgbox_signal+0x20c>)
  4242e0:	4798      	blx	r3
            if(indev_type == LV_INDEV_TYPE_ENCODER) {
  4242e2:	2804      	cmp	r0, #4
  4242e4:	d1af      	bne.n	424246 <lv_msgbox_signal+0xf6>
                if(lv_group_get_editing(lv_obj_get_group(mbox))) lv_btnmatrix_set_focused_btn(ext->btnm, 0);
  4242e6:	4638      	mov	r0, r7
  4242e8:	4b1d      	ldr	r3, [pc, #116]	; (424360 <lv_msgbox_signal+0x210>)
  4242ea:	4798      	blx	r3
  4242ec:	4b1d      	ldr	r3, [pc, #116]	; (424364 <lv_msgbox_signal+0x214>)
  4242ee:	4798      	blx	r3
  4242f0:	b128      	cbz	r0, 4242fe <lv_msgbox_signal+0x1ae>
  4242f2:	2100      	movs	r1, #0
  4242f4:	f8d8 0008 	ldr.w	r0, [r8, #8]
  4242f8:	4b1b      	ldr	r3, [pc, #108]	; (424368 <lv_msgbox_signal+0x218>)
  4242fa:	4798      	blx	r3
  4242fc:	e7a3      	b.n	424246 <lv_msgbox_signal+0xf6>
                else lv_btnmatrix_set_focused_btn(ext->btnm, LV_BTNMATRIX_BTN_NONE);
  4242fe:	f64f 71ff 	movw	r1, #65535	; 0xffff
  424302:	f8d8 0008 	ldr.w	r0, [r8, #8]
  424306:	4b18      	ldr	r3, [pc, #96]	; (424368 <lv_msgbox_signal+0x218>)
  424308:	4798      	blx	r3
  42430a:	e79c      	b.n	424246 <lv_msgbox_signal+0xf6>
                lv_obj_clear_state(ext->btnm, LV_STATE_FOCUSED);
  42430c:	2102      	movs	r1, #2
  42430e:	f8d8 0008 	ldr.w	r0, [r8, #8]
  424312:	4b0a      	ldr	r3, [pc, #40]	; (42433c <lv_msgbox_signal+0x1ec>)
  424314:	4798      	blx	r3
  424316:	e7ab      	b.n	424270 <lv_msgbox_signal+0x120>
                lv_obj_set_state(ext->btnm, LV_STATE_EDITED);
  424318:	2104      	movs	r1, #4
  42431a:	f8d8 0008 	ldr.w	r0, [r8, #8]
  42431e:	4b06      	ldr	r3, [pc, #24]	; (424338 <lv_msgbox_signal+0x1e8>)
  424320:	4798      	blx	r3
  424322:	e72d      	b.n	424180 <lv_msgbox_signal+0x30>
        return LV_RES_OK;
  424324:	2601      	movs	r6, #1
  424326:	e72b      	b.n	424180 <lv_msgbox_signal+0x30>
  424328:	2041488c 	.word	0x2041488c
  42432c:	00424015 	.word	0x00424015
  424330:	00408115 	.word	0x00408115
  424334:	00406e21 	.word	0x00406e21
  424338:	00408e45 	.word	0x00408e45
  42433c:	0040909d 	.word	0x0040909d
  424340:	0042feb8 	.word	0x0042feb8
  424344:	004083d1 	.word	0x004083d1
  424348:	00405bc1 	.word	0x00405bc1
  42434c:	0042407d 	.word	0x0042407d
  424350:	0041e8e9 	.word	0x0041e8e9
  424354:	004058d1 	.word	0x004058d1
  424358:	00404c51 	.word	0x00404c51
  42435c:	00404c5d 	.word	0x00404c5d
  424360:	0040813d 	.word	0x0040813d
  424364:	00403ae1 	.word	0x00403ae1
  424368:	0041e6c5 	.word	0x0041e6c5

0042436c <lv_msgbox_btnm_event_cb>:

    lv_msgbox_start_auto_close(mbox, 0);
}

static void lv_msgbox_btnm_event_cb(lv_obj_t * btnm, lv_event_t event)
{
  42436c:	b538      	push	{r3, r4, r5, lr}
  42436e:	460c      	mov	r4, r1
    lv_obj_t * mbox = lv_obj_get_parent(btnm);
  424370:	4b0d      	ldr	r3, [pc, #52]	; (4243a8 <lv_msgbox_btnm_event_cb+0x3c>)
  424372:	4798      	blx	r3
  424374:	4605      	mov	r5, r0

    /*clang-format off*/
    if(event == LV_EVENT_PRESSED || event == LV_EVENT_PRESSING || event == LV_EVENT_PRESS_LOST ||
  424376:	2c07      	cmp	r4, #7
  424378:	bf18      	it	ne
  42437a:	2c02      	cmpne	r4, #2
  42437c:	d90c      	bls.n	424398 <lv_msgbox_btnm_event_cb+0x2c>
       event == LV_EVENT_RELEASED || event == LV_EVENT_SHORT_CLICKED || event == LV_EVENT_CLICKED ||
  42437e:	2c06      	cmp	r4, #6
  424380:	bf14      	ite	ne
  424382:	2300      	movne	r3, #0
  424384:	2301      	moveq	r3, #1
  424386:	2c03      	cmp	r4, #3
  424388:	d006      	beq.n	424398 <lv_msgbox_btnm_event_cb+0x2c>
  42438a:	b92b      	cbnz	r3, 424398 <lv_msgbox_btnm_event_cb+0x2c>
       event == LV_EVENT_LONG_PRESSED || event == LV_EVENT_LONG_PRESSED_REPEAT ||
  42438c:	1f23      	subs	r3, r4, #4
  42438e:	b2db      	uxtb	r3, r3
  424390:	2b01      	cmp	r3, #1
  424392:	d901      	bls.n	424398 <lv_msgbox_btnm_event_cb+0x2c>
  424394:	2c10      	cmp	r4, #16
  424396:	d106      	bne.n	4243a6 <lv_msgbox_btnm_event_cb+0x3a>
       event == LV_EVENT_VALUE_CHANGED) {
        lv_event_send(mbox, event, lv_event_get_data());
  424398:	4b04      	ldr	r3, [pc, #16]	; (4243ac <lv_msgbox_btnm_event_cb+0x40>)
  42439a:	4798      	blx	r3
  42439c:	4602      	mov	r2, r0
  42439e:	4621      	mov	r1, r4
  4243a0:	4628      	mov	r0, r5
  4243a2:	4b03      	ldr	r3, [pc, #12]	; (4243b0 <lv_msgbox_btnm_event_cb+0x44>)
  4243a4:	4798      	blx	r3
  4243a6:	bd38      	pop	{r3, r4, r5, pc}
  4243a8:	004059ed 	.word	0x004059ed
  4243ac:	00405911 	.word	0x00405911
  4243b0:	004058d1 	.word	0x004058d1

004243b4 <lv_msgbox_create>:
{
  4243b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4243b6:	b083      	sub	sp, #12
  4243b8:	4607      	mov	r7, r0
  4243ba:	460e      	mov	r6, r1
    lv_obj_t * mbox = lv_cont_create(par, copy);
  4243bc:	4b60      	ldr	r3, [pc, #384]	; (424540 <lv_msgbox_create+0x18c>)
  4243be:	4798      	blx	r3
  4243c0:	4604      	mov	r4, r0
    LV_ASSERT_MEM(mbox);
  4243c2:	4b60      	ldr	r3, [pc, #384]	; (424544 <lv_msgbox_create+0x190>)
  4243c4:	4798      	blx	r3
  4243c6:	b190      	cbz	r0, 4243ee <lv_msgbox_create+0x3a>
    if(mbox == NULL) return NULL;
  4243c8:	2c00      	cmp	r4, #0
  4243ca:	d03b      	beq.n	424444 <lv_msgbox_create+0x90>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(mbox);
  4243cc:	4b5e      	ldr	r3, [pc, #376]	; (424548 <lv_msgbox_create+0x194>)
  4243ce:	681b      	ldr	r3, [r3, #0]
  4243d0:	b19b      	cbz	r3, 4243fa <lv_msgbox_create+0x46>
    lv_msgbox_ext_t * ext = lv_obj_allocate_ext_attr(mbox, sizeof(lv_msgbox_ext_t));
  4243d2:	2110      	movs	r1, #16
  4243d4:	4620      	mov	r0, r4
  4243d6:	4b5d      	ldr	r3, [pc, #372]	; (42454c <lv_msgbox_create+0x198>)
  4243d8:	4798      	blx	r3
  4243da:	4605      	mov	r5, r0
    LV_ASSERT_MEM(ext);
  4243dc:	4b59      	ldr	r3, [pc, #356]	; (424544 <lv_msgbox_create+0x190>)
  4243de:	4798      	blx	r3
  4243e0:	b988      	cbnz	r0, 424406 <lv_msgbox_create+0x52>
  4243e2:	462a      	mov	r2, r5
  4243e4:	2300      	movs	r3, #0
  4243e6:	485a      	ldr	r0, [pc, #360]	; (424550 <lv_msgbox_create+0x19c>)
  4243e8:	495a      	ldr	r1, [pc, #360]	; (424554 <lv_msgbox_create+0x1a0>)
  4243ea:	4788      	blx	r1
  4243ec:	e7fe      	b.n	4243ec <lv_msgbox_create+0x38>
    LV_ASSERT_MEM(mbox);
  4243ee:	4622      	mov	r2, r4
  4243f0:	2300      	movs	r3, #0
  4243f2:	4857      	ldr	r0, [pc, #348]	; (424550 <lv_msgbox_create+0x19c>)
  4243f4:	4957      	ldr	r1, [pc, #348]	; (424554 <lv_msgbox_create+0x1a0>)
  4243f6:	4788      	blx	r1
  4243f8:	e7fe      	b.n	4243f8 <lv_msgbox_create+0x44>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(mbox);
  4243fa:	4620      	mov	r0, r4
  4243fc:	4b56      	ldr	r3, [pc, #344]	; (424558 <lv_msgbox_create+0x1a4>)
  4243fe:	4798      	blx	r3
  424400:	4b51      	ldr	r3, [pc, #324]	; (424548 <lv_msgbox_create+0x194>)
  424402:	6018      	str	r0, [r3, #0]
  424404:	e7e5      	b.n	4243d2 <lv_msgbox_create+0x1e>
    if(ext == NULL) {
  424406:	b305      	cbz	r5, 42444a <lv_msgbox_create+0x96>
    ext->text = NULL;
  424408:	2300      	movs	r3, #0
  42440a:	606b      	str	r3, [r5, #4]
    ext->btnm = NULL;
  42440c:	60ab      	str	r3, [r5, #8]
    ext->anim_time = LV_MSGBOX_CLOSE_ANIM_TIME;
  42440e:	23c8      	movs	r3, #200	; 0xc8
  424410:	81ab      	strh	r3, [r5, #12]
    lv_obj_set_signal_cb(mbox, lv_msgbox_signal);
  424412:	4952      	ldr	r1, [pc, #328]	; (42455c <lv_msgbox_create+0x1a8>)
  424414:	4620      	mov	r0, r4
  424416:	4b52      	ldr	r3, [pc, #328]	; (424560 <lv_msgbox_create+0x1ac>)
  424418:	4798      	blx	r3
    if(copy == NULL) {
  42441a:	b1de      	cbz	r6, 424454 <lv_msgbox_create+0xa0>
        lv_msgbox_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
  42441c:	4630      	mov	r0, r6
  42441e:	4b51      	ldr	r3, [pc, #324]	; (424564 <lv_msgbox_create+0x1b0>)
  424420:	4798      	blx	r3
  424422:	4606      	mov	r6, r0
        ext->text = lv_label_create(mbox, copy_ext->text);
  424424:	6841      	ldr	r1, [r0, #4]
  424426:	4620      	mov	r0, r4
  424428:	4b4f      	ldr	r3, [pc, #316]	; (424568 <lv_msgbox_create+0x1b4>)
  42442a:	4798      	blx	r3
  42442c:	6068      	str	r0, [r5, #4]
        if(copy_ext->btnm) ext->btnm = lv_btnmatrix_create(mbox, copy_ext->btnm);
  42442e:	68b1      	ldr	r1, [r6, #8]
  424430:	b119      	cbz	r1, 42443a <lv_msgbox_create+0x86>
  424432:	4620      	mov	r0, r4
  424434:	4b4d      	ldr	r3, [pc, #308]	; (42456c <lv_msgbox_create+0x1b8>)
  424436:	4798      	blx	r3
  424438:	60a8      	str	r0, [r5, #8]
        lv_obj_refresh_style(mbox, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
  42443a:	22ff      	movs	r2, #255	; 0xff
  42443c:	4611      	mov	r1, r2
  42443e:	4620      	mov	r0, r4
  424440:	4b4b      	ldr	r3, [pc, #300]	; (424570 <lv_msgbox_create+0x1bc>)
  424442:	4798      	blx	r3
}
  424444:	4620      	mov	r0, r4
  424446:	b003      	add	sp, #12
  424448:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_obj_del(mbox);
  42444a:	4620      	mov	r0, r4
  42444c:	4b49      	ldr	r3, [pc, #292]	; (424574 <lv_msgbox_create+0x1c0>)
  42444e:	4798      	blx	r3
        return NULL;
  424450:	2400      	movs	r4, #0
  424452:	e7f7      	b.n	424444 <lv_msgbox_create+0x90>
        ext->text = lv_label_create(mbox, NULL);
  424454:	2100      	movs	r1, #0
  424456:	4620      	mov	r0, r4
  424458:	4b43      	ldr	r3, [pc, #268]	; (424568 <lv_msgbox_create+0x1b4>)
  42445a:	4798      	blx	r3
  42445c:	6068      	str	r0, [r5, #4]
        lv_label_set_align(ext->text, LV_LABEL_ALIGN_CENTER);
  42445e:	2101      	movs	r1, #1
  424460:	4b45      	ldr	r3, [pc, #276]	; (424578 <lv_msgbox_create+0x1c4>)
  424462:	4798      	blx	r3
        lv_label_set_long_mode(ext->text, LV_LABEL_LONG_BREAK);
  424464:	2101      	movs	r1, #1
  424466:	6868      	ldr	r0, [r5, #4]
  424468:	4b44      	ldr	r3, [pc, #272]	; (42457c <lv_msgbox_create+0x1c8>)
  42446a:	4798      	blx	r3
        lv_label_set_text(ext->text, "Message");
  42446c:	4944      	ldr	r1, [pc, #272]	; (424580 <lv_msgbox_create+0x1cc>)
  42446e:	6868      	ldr	r0, [r5, #4]
  424470:	4b44      	ldr	r3, [pc, #272]	; (424584 <lv_msgbox_create+0x1d0>)
  424472:	4798      	blx	r3
        lv_cont_set_layout(mbox, LV_LAYOUT_COLUMN_MID);
  424474:	2103      	movs	r1, #3
  424476:	4620      	mov	r0, r4
  424478:	4b43      	ldr	r3, [pc, #268]	; (424588 <lv_msgbox_create+0x1d4>)
  42447a:	4798      	blx	r3
 * @param hor horizontal fit policy from `lv_fit_t`
 * @param ver vertical fit policy from `lv_fit_t`
 */
static inline void lv_cont_set_fit2(lv_obj_t * cont, lv_fit_t hor, lv_fit_t ver)
{
    lv_cont_set_fit4(cont, hor, hor, ver, ver);
  42447c:	2301      	movs	r3, #1
  42447e:	9300      	str	r3, [sp, #0]
  424480:	2200      	movs	r2, #0
  424482:	4611      	mov	r1, r2
  424484:	4620      	mov	r0, r4
  424486:	4d41      	ldr	r5, [pc, #260]	; (42458c <lv_msgbox_create+0x1d8>)
  424488:	47a8      	blx	r5
        lv_coord_t fit_w = lv_obj_get_width_fit(par);
  42448a:	4638      	mov	r0, r7
  42448c:	4b40      	ldr	r3, [pc, #256]	; (424590 <lv_msgbox_create+0x1dc>)
  42448e:	4798      	blx	r3
  424490:	4605      	mov	r5, r0
        if(lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_SMALL) {
  424492:	2000      	movs	r0, #0
  424494:	4b3f      	ldr	r3, [pc, #252]	; (424594 <lv_msgbox_create+0x1e0>)
  424496:	4798      	blx	r3
  424498:	b998      	cbnz	r0, 4244c2 <lv_msgbox_create+0x10e>
            lv_obj_set_width(mbox, fit_w);
  42449a:	4629      	mov	r1, r5
  42449c:	4620      	mov	r0, r4
  42449e:	4b3e      	ldr	r3, [pc, #248]	; (424598 <lv_msgbox_create+0x1e4>)
  4244a0:	4798      	blx	r3
        lv_obj_align(mbox, NULL, LV_ALIGN_CENTER, 0, 0);
  4244a2:	2100      	movs	r1, #0
  4244a4:	9100      	str	r1, [sp, #0]
  4244a6:	460b      	mov	r3, r1
  4244a8:	460a      	mov	r2, r1
  4244aa:	4620      	mov	r0, r4
  4244ac:	4d3b      	ldr	r5, [pc, #236]	; (42459c <lv_msgbox_create+0x1e8>)
  4244ae:	47a8      	blx	r5
        lv_obj_set_event_cb(mbox, lv_msgbox_default_event_cb);
  4244b0:	493b      	ldr	r1, [pc, #236]	; (4245a0 <lv_msgbox_create+0x1ec>)
  4244b2:	4620      	mov	r0, r4
  4244b4:	4b3b      	ldr	r3, [pc, #236]	; (4245a4 <lv_msgbox_create+0x1f0>)
  4244b6:	4798      	blx	r3
        lv_theme_apply(mbox, LV_THEME_MSGBOX);
  4244b8:	2118      	movs	r1, #24
  4244ba:	4620      	mov	r0, r4
  4244bc:	4b3a      	ldr	r3, [pc, #232]	; (4245a8 <lv_msgbox_create+0x1f4>)
  4244be:	4798      	blx	r3
  4244c0:	e7c0      	b.n	424444 <lv_msgbox_create+0x90>
            lv_obj_set_width(mbox, LV_MATH_MIN(fit_w, LV_DPX(400)));
  4244c2:	462e      	mov	r6, r5
  4244c4:	2000      	movs	r0, #0
  4244c6:	4b39      	ldr	r3, [pc, #228]	; (4245ac <lv_msgbox_create+0x1f8>)
  4244c8:	4798      	blx	r3
  4244ca:	f44f 73c8 	mov.w	r3, #400	; 0x190
  4244ce:	fb03 f300 	mul.w	r3, r3, r0
  4244d2:	3350      	adds	r3, #80	; 0x50
  4244d4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  4244d8:	db2e      	blt.n	424538 <lv_msgbox_create+0x184>
  4244da:	2000      	movs	r0, #0
  4244dc:	4b33      	ldr	r3, [pc, #204]	; (4245ac <lv_msgbox_create+0x1f8>)
  4244de:	4798      	blx	r3
  4244e0:	f44f 73c8 	mov.w	r3, #400	; 0x190
  4244e4:	fb03 f300 	mul.w	r3, r3, r0
  4244e8:	3350      	adds	r3, #80	; 0x50
  4244ea:	4a31      	ldr	r2, [pc, #196]	; (4245b0 <lv_msgbox_create+0x1fc>)
  4244ec:	fb82 1203 	smull	r1, r2, r2, r3
  4244f0:	17db      	asrs	r3, r3, #31
  4244f2:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
  4244f6:	42b3      	cmp	r3, r6
  4244f8:	dc19      	bgt.n	42452e <lv_msgbox_create+0x17a>
  4244fa:	2000      	movs	r0, #0
  4244fc:	4b2b      	ldr	r3, [pc, #172]	; (4245ac <lv_msgbox_create+0x1f8>)
  4244fe:	4798      	blx	r3
  424500:	f44f 73c8 	mov.w	r3, #400	; 0x190
  424504:	fb03 f300 	mul.w	r3, r3, r0
  424508:	3350      	adds	r3, #80	; 0x50
  42450a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  42450e:	db15      	blt.n	42453c <lv_msgbox_create+0x188>
  424510:	2000      	movs	r0, #0
  424512:	4b26      	ldr	r3, [pc, #152]	; (4245ac <lv_msgbox_create+0x1f8>)
  424514:	4798      	blx	r3
  424516:	f44f 73c8 	mov.w	r3, #400	; 0x190
  42451a:	fb03 f300 	mul.w	r3, r3, r0
  42451e:	3350      	adds	r3, #80	; 0x50
  424520:	4a23      	ldr	r2, [pc, #140]	; (4245b0 <lv_msgbox_create+0x1fc>)
  424522:	fb82 1203 	smull	r1, r2, r2, r3
  424526:	17dd      	asrs	r5, r3, #31
  424528:	ebc5 15a2 	rsb	r5, r5, r2, asr #6
  42452c:	b22d      	sxth	r5, r5
  42452e:	4629      	mov	r1, r5
  424530:	4620      	mov	r0, r4
  424532:	4b19      	ldr	r3, [pc, #100]	; (424598 <lv_msgbox_create+0x1e4>)
  424534:	4798      	blx	r3
  424536:	e7b4      	b.n	4244a2 <lv_msgbox_create+0xee>
  424538:	2301      	movs	r3, #1
  42453a:	e7dc      	b.n	4244f6 <lv_msgbox_create+0x142>
  42453c:	2501      	movs	r5, #1
  42453e:	e7f6      	b.n	42452e <lv_msgbox_create+0x17a>
  424540:	004215e9 	.word	0x004215e9
  424544:	00415f95 	.word	0x00415f95
  424548:	2041488c 	.word	0x2041488c
  42454c:	00405981 	.word	0x00405981
  424550:	0042c714 	.word	0x0042c714
  424554:	00415fa1 	.word	0x00415fa1
  424558:	004080c5 	.word	0x004080c5
  42455c:	00424151 	.word	0x00424151
  424560:	0040591d 	.word	0x0040591d
  424564:	00408115 	.word	0x00408115
  424568:	00423dd5 	.word	0x00423dd5
  42456c:	0041e575 	.word	0x0041e575
  424570:	004078a1 	.word	0x004078a1
  424574:	00408275 	.word	0x00408275
  424578:	00422de5 	.word	0x00422de5
  42457c:	00423ccd 	.word	0x00423ccd
  424580:	0042feb0 	.word	0x0042feb0
  424584:	00423ad1 	.word	0x00423ad1
  424588:	00421719 	.word	0x00421719
  42458c:	00421765 	.word	0x00421765
  424590:	004076c1 	.word	0x004076c1
  424594:	00414e1d 	.word	0x00414e1d
  424598:	00406d6d 	.word	0x00406d6d
  42459c:	00406241 	.word	0x00406241
  4245a0:	004248dd 	.word	0x004248dd
  4245a4:	004057e9 	.word	0x004057e9
  4245a8:	00418419 	.word	0x00418419
  4245ac:	00414dfd 	.word	0x00414dfd
  4245b0:	66666667 	.word	0x66666667

004245b4 <lv_msgbox_add_btns>:
{
  4245b4:	b570      	push	{r4, r5, r6, lr}
  4245b6:	4605      	mov	r5, r0
  4245b8:	460e      	mov	r6, r1
    LV_ASSERT_OBJ(mbox, LV_OBJX_NAME);
  4245ba:	4b25      	ldr	r3, [pc, #148]	; (424650 <lv_msgbox_add_btns+0x9c>)
  4245bc:	4798      	blx	r3
  4245be:	b928      	cbnz	r0, 4245cc <lv_msgbox_add_btns+0x18>
  4245c0:	462a      	mov	r2, r5
  4245c2:	2300      	movs	r3, #0
  4245c4:	4823      	ldr	r0, [pc, #140]	; (424654 <lv_msgbox_add_btns+0xa0>)
  4245c6:	4924      	ldr	r1, [pc, #144]	; (424658 <lv_msgbox_add_btns+0xa4>)
  4245c8:	4788      	blx	r1
  4245ca:	e7fe      	b.n	4245ca <lv_msgbox_add_btns+0x16>
    LV_ASSERT_NULL(btn_map);
  4245cc:	4630      	mov	r0, r6
  4245ce:	4b20      	ldr	r3, [pc, #128]	; (424650 <lv_msgbox_add_btns+0x9c>)
  4245d0:	4798      	blx	r3
  4245d2:	b928      	cbnz	r0, 4245e0 <lv_msgbox_add_btns+0x2c>
  4245d4:	4632      	mov	r2, r6
  4245d6:	2300      	movs	r3, #0
  4245d8:	481e      	ldr	r0, [pc, #120]	; (424654 <lv_msgbox_add_btns+0xa0>)
  4245da:	491f      	ldr	r1, [pc, #124]	; (424658 <lv_msgbox_add_btns+0xa4>)
  4245dc:	4788      	blx	r1
  4245de:	e7fe      	b.n	4245de <lv_msgbox_add_btns+0x2a>
    lv_msgbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
  4245e0:	4628      	mov	r0, r5
  4245e2:	4b1e      	ldr	r3, [pc, #120]	; (42465c <lv_msgbox_add_btns+0xa8>)
  4245e4:	4798      	blx	r3
  4245e6:	4604      	mov	r4, r0
    if(ext->btnm == NULL) {
  4245e8:	6883      	ldr	r3, [r0, #8]
  4245ea:	b943      	cbnz	r3, 4245fe <lv_msgbox_add_btns+0x4a>
        ext->btnm = lv_btnmatrix_create(mbox, NULL);
  4245ec:	2100      	movs	r1, #0
  4245ee:	4628      	mov	r0, r5
  4245f0:	4b1b      	ldr	r3, [pc, #108]	; (424660 <lv_msgbox_add_btns+0xac>)
  4245f2:	4798      	blx	r3
  4245f4:	60a0      	str	r0, [r4, #8]
        lv_theme_apply(mbox, LV_THEME_MSGBOX_BTNS);
  4245f6:	2119      	movs	r1, #25
  4245f8:	4628      	mov	r0, r5
  4245fa:	4b1a      	ldr	r3, [pc, #104]	; (424664 <lv_msgbox_add_btns+0xb0>)
  4245fc:	4798      	blx	r3
    lv_btnmatrix_set_map(ext->btnm, btn_map);
  4245fe:	4631      	mov	r1, r6
  424600:	68a0      	ldr	r0, [r4, #8]
  424602:	4b19      	ldr	r3, [pc, #100]	; (424668 <lv_msgbox_add_btns+0xb4>)
  424604:	4798      	blx	r3
    lv_btnmatrix_set_btn_ctrl_all(ext->btnm, LV_BTNMATRIX_CTRL_CLICK_TRIG | LV_BTNMATRIX_CTRL_NO_REPEAT);
  424606:	f44f 7188 	mov.w	r1, #272	; 0x110
  42460a:	68a0      	ldr	r0, [r4, #8]
  42460c:	4b17      	ldr	r3, [pc, #92]	; (42466c <lv_msgbox_add_btns+0xb8>)
  42460e:	4798      	blx	r3
    lv_obj_set_event_cb(ext->btnm, lv_msgbox_btnm_event_cb);
  424610:	4917      	ldr	r1, [pc, #92]	; (424670 <lv_msgbox_add_btns+0xbc>)
  424612:	68a0      	ldr	r0, [r4, #8]
  424614:	4b17      	ldr	r3, [pc, #92]	; (424674 <lv_msgbox_add_btns+0xc0>)
  424616:	4798      	blx	r3
    if(lv_obj_is_focused(mbox)) {
  424618:	4628      	mov	r0, r5
  42461a:	4b17      	ldr	r3, [pc, #92]	; (424678 <lv_msgbox_add_btns+0xc4>)
  42461c:	4798      	blx	r3
  42461e:	b170      	cbz	r0, 42463e <lv_msgbox_add_btns+0x8a>
        lv_state_t state = lv_obj_get_state(mbox, LV_MSGBOX_PART_BG);
  424620:	2100      	movs	r1, #0
  424622:	4628      	mov	r0, r5
  424624:	4b15      	ldr	r3, [pc, #84]	; (42467c <lv_msgbox_add_btns+0xc8>)
  424626:	4798      	blx	r3
        if(state & LV_STATE_EDITED) {
  424628:	f010 0f04 	tst.w	r0, #4
  42462c:	d00b      	beq.n	424646 <lv_msgbox_add_btns+0x92>
            lv_obj_set_state(ext->btnm, LV_STATE_FOCUSED | LV_STATE_EDITED);
  42462e:	2106      	movs	r1, #6
  424630:	68a0      	ldr	r0, [r4, #8]
  424632:	4b13      	ldr	r3, [pc, #76]	; (424680 <lv_msgbox_add_btns+0xcc>)
  424634:	4798      	blx	r3
        lv_btnmatrix_set_focused_btn(ext->btnm, 0);
  424636:	2100      	movs	r1, #0
  424638:	68a0      	ldr	r0, [r4, #8]
  42463a:	4b12      	ldr	r3, [pc, #72]	; (424684 <lv_msgbox_add_btns+0xd0>)
  42463c:	4798      	blx	r3
    mbox_realign(mbox);
  42463e:	4628      	mov	r0, r5
  424640:	4b11      	ldr	r3, [pc, #68]	; (424688 <lv_msgbox_add_btns+0xd4>)
  424642:	4798      	blx	r3
  424644:	bd70      	pop	{r4, r5, r6, pc}
            lv_obj_set_state(ext->btnm, LV_STATE_FOCUSED);
  424646:	2102      	movs	r1, #2
  424648:	68a0      	ldr	r0, [r4, #8]
  42464a:	4b0d      	ldr	r3, [pc, #52]	; (424680 <lv_msgbox_add_btns+0xcc>)
  42464c:	4798      	blx	r3
  42464e:	e7f2      	b.n	424636 <lv_msgbox_add_btns+0x82>
  424650:	00415f95 	.word	0x00415f95
  424654:	0042c728 	.word	0x0042c728
  424658:	00415fa1 	.word	0x00415fa1
  42465c:	00408115 	.word	0x00408115
  424660:	0041e575 	.word	0x0041e575
  424664:	00418419 	.word	0x00418419
  424668:	0041e205 	.word	0x0041e205
  42466c:	0041e839 	.word	0x0041e839
  424670:	0042436d 	.word	0x0042436d
  424674:	004057e9 	.word	0x004057e9
  424678:	00408321 	.word	0x00408321
  42467c:	00406e21 	.word	0x00406e21
  424680:	00408e45 	.word	0x00408e45
  424684:	0041e6c5 	.word	0x0041e6c5
  424688:	0042407d 	.word	0x0042407d

0042468c <lv_msgbox_set_text>:
{
  42468c:	b538      	push	{r3, r4, r5, lr}
  42468e:	4604      	mov	r4, r0
  424690:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(mbox, LV_OBJX_NAME);
  424692:	4b0f      	ldr	r3, [pc, #60]	; (4246d0 <lv_msgbox_set_text+0x44>)
  424694:	4798      	blx	r3
  424696:	b928      	cbnz	r0, 4246a4 <lv_msgbox_set_text+0x18>
  424698:	4622      	mov	r2, r4
  42469a:	2300      	movs	r3, #0
  42469c:	480d      	ldr	r0, [pc, #52]	; (4246d4 <lv_msgbox_set_text+0x48>)
  42469e:	490e      	ldr	r1, [pc, #56]	; (4246d8 <lv_msgbox_set_text+0x4c>)
  4246a0:	4788      	blx	r1
  4246a2:	e7fe      	b.n	4246a2 <lv_msgbox_set_text+0x16>
    LV_ASSERT_STR(txt);
  4246a4:	4628      	mov	r0, r5
  4246a6:	4b0a      	ldr	r3, [pc, #40]	; (4246d0 <lv_msgbox_set_text+0x44>)
  4246a8:	4798      	blx	r3
  4246aa:	b928      	cbnz	r0, 4246b8 <lv_msgbox_set_text+0x2c>
  4246ac:	462a      	mov	r2, r5
  4246ae:	2300      	movs	r3, #0
  4246b0:	4808      	ldr	r0, [pc, #32]	; (4246d4 <lv_msgbox_set_text+0x48>)
  4246b2:	4909      	ldr	r1, [pc, #36]	; (4246d8 <lv_msgbox_set_text+0x4c>)
  4246b4:	4788      	blx	r1
  4246b6:	e7fe      	b.n	4246b6 <lv_msgbox_set_text+0x2a>
    lv_msgbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
  4246b8:	4620      	mov	r0, r4
  4246ba:	4b08      	ldr	r3, [pc, #32]	; (4246dc <lv_msgbox_set_text+0x50>)
  4246bc:	4798      	blx	r3
    lv_label_set_text(ext->text, txt);
  4246be:	4629      	mov	r1, r5
  4246c0:	6840      	ldr	r0, [r0, #4]
  4246c2:	4b07      	ldr	r3, [pc, #28]	; (4246e0 <lv_msgbox_set_text+0x54>)
  4246c4:	4798      	blx	r3
    mbox_realign(mbox);
  4246c6:	4620      	mov	r0, r4
  4246c8:	4b06      	ldr	r3, [pc, #24]	; (4246e4 <lv_msgbox_set_text+0x58>)
  4246ca:	4798      	blx	r3
  4246cc:	bd38      	pop	{r3, r4, r5, pc}
  4246ce:	bf00      	nop
  4246d0:	00415f95 	.word	0x00415f95
  4246d4:	0042c728 	.word	0x0042c728
  4246d8:	00415fa1 	.word	0x00415fa1
  4246dc:	00408115 	.word	0x00408115
  4246e0:	00423ad1 	.word	0x00423ad1
  4246e4:	0042407d 	.word	0x0042407d

004246e8 <lv_msgbox_set_text_fmt>:
{
  4246e8:	b40e      	push	{r1, r2, r3}
  4246ea:	b5f0      	push	{r4, r5, r6, r7, lr}
  4246ec:	b082      	sub	sp, #8
  4246ee:	4605      	mov	r5, r0
  4246f0:	9c07      	ldr	r4, [sp, #28]
    LV_ASSERT_OBJ(mbox, LV_OBJX_NAME);
  4246f2:	4b1b      	ldr	r3, [pc, #108]	; (424760 <lv_msgbox_set_text_fmt+0x78>)
  4246f4:	4798      	blx	r3
  4246f6:	b928      	cbnz	r0, 424704 <lv_msgbox_set_text_fmt+0x1c>
  4246f8:	462a      	mov	r2, r5
  4246fa:	2300      	movs	r3, #0
  4246fc:	4819      	ldr	r0, [pc, #100]	; (424764 <lv_msgbox_set_text_fmt+0x7c>)
  4246fe:	491a      	ldr	r1, [pc, #104]	; (424768 <lv_msgbox_set_text_fmt+0x80>)
  424700:	4788      	blx	r1
  424702:	e7fe      	b.n	424702 <lv_msgbox_set_text_fmt+0x1a>
    LV_ASSERT_STR(fmt);
  424704:	4620      	mov	r0, r4
  424706:	4b16      	ldr	r3, [pc, #88]	; (424760 <lv_msgbox_set_text_fmt+0x78>)
  424708:	4798      	blx	r3
  42470a:	b928      	cbnz	r0, 424718 <lv_msgbox_set_text_fmt+0x30>
  42470c:	4622      	mov	r2, r4
  42470e:	2300      	movs	r3, #0
  424710:	4814      	ldr	r0, [pc, #80]	; (424764 <lv_msgbox_set_text_fmt+0x7c>)
  424712:	4915      	ldr	r1, [pc, #84]	; (424768 <lv_msgbox_set_text_fmt+0x80>)
  424714:	4788      	blx	r1
  424716:	e7fe      	b.n	424716 <lv_msgbox_set_text_fmt+0x2e>
    lv_msgbox_ext_t * msgbox_ext = lv_obj_get_ext_attr(mbox);
  424718:	4628      	mov	r0, r5
  42471a:	4f14      	ldr	r7, [pc, #80]	; (42476c <lv_msgbox_set_text_fmt+0x84>)
  42471c:	47b8      	blx	r7
  42471e:	4606      	mov	r6, r0
    lv_label_ext_t * label_ext = lv_obj_get_ext_attr(msgbox_ext->text);
  424720:	6840      	ldr	r0, [r0, #4]
  424722:	47b8      	blx	r7
  424724:	4607      	mov	r7, r0
    if(fmt == NULL) {
  424726:	b93c      	cbnz	r4, 424738 <lv_msgbox_set_text_fmt+0x50>
        lv_label_refr_text(msgbox_ext->text);
  424728:	6870      	ldr	r0, [r6, #4]
  42472a:	4b11      	ldr	r3, [pc, #68]	; (424770 <lv_msgbox_set_text_fmt+0x88>)
  42472c:	4798      	blx	r3
}
  42472e:	b002      	add	sp, #8
  424730:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  424734:	b003      	add	sp, #12
  424736:	4770      	bx	lr
    if(label_ext->text != NULL) {
  424738:	6800      	ldr	r0, [r0, #0]
  42473a:	b118      	cbz	r0, 424744 <lv_msgbox_set_text_fmt+0x5c>
        lv_mem_free(label_ext->text);
  42473c:	4b0d      	ldr	r3, [pc, #52]	; (424774 <lv_msgbox_set_text_fmt+0x8c>)
  42473e:	4798      	blx	r3
        label_ext->text = NULL;
  424740:	2300      	movs	r3, #0
  424742:	603b      	str	r3, [r7, #0]
    va_start(args, fmt);
  424744:	a908      	add	r1, sp, #32
  424746:	9101      	str	r1, [sp, #4]
    label_ext->text = _lv_txt_set_text_vfmt(fmt, args);
  424748:	4620      	mov	r0, r4
  42474a:	4b0b      	ldr	r3, [pc, #44]	; (424778 <lv_msgbox_set_text_fmt+0x90>)
  42474c:	4798      	blx	r3
  42474e:	6038      	str	r0, [r7, #0]
    lv_label_refr_text(msgbox_ext->text);
  424750:	6870      	ldr	r0, [r6, #4]
  424752:	4b07      	ldr	r3, [pc, #28]	; (424770 <lv_msgbox_set_text_fmt+0x88>)
  424754:	4798      	blx	r3
    mbox_realign(mbox);
  424756:	4628      	mov	r0, r5
  424758:	4b08      	ldr	r3, [pc, #32]	; (42477c <lv_msgbox_set_text_fmt+0x94>)
  42475a:	4798      	blx	r3
  42475c:	e7e7      	b.n	42472e <lv_msgbox_set_text_fmt+0x46>
  42475e:	bf00      	nop
  424760:	00415f95 	.word	0x00415f95
  424764:	0042c728 	.word	0x0042c728
  424768:	00415fa1 	.word	0x00415fa1
  42476c:	00408115 	.word	0x00408115
  424770:	0042348d 	.word	0x0042348d
  424774:	0041679d 	.word	0x0041679d
  424778:	00418075 	.word	0x00418075
  42477c:	0042407d 	.word	0x0042407d

00424780 <lv_msgbox_get_active_btn>:
{
  424780:	b510      	push	{r4, lr}
  424782:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(mbox, LV_OBJX_NAME);
  424784:	4b0e      	ldr	r3, [pc, #56]	; (4247c0 <lv_msgbox_get_active_btn+0x40>)
  424786:	4798      	blx	r3
  424788:	b928      	cbnz	r0, 424796 <lv_msgbox_get_active_btn+0x16>
  42478a:	4622      	mov	r2, r4
  42478c:	2300      	movs	r3, #0
  42478e:	480d      	ldr	r0, [pc, #52]	; (4247c4 <lv_msgbox_get_active_btn+0x44>)
  424790:	490d      	ldr	r1, [pc, #52]	; (4247c8 <lv_msgbox_get_active_btn+0x48>)
  424792:	4788      	blx	r1
  424794:	e7fe      	b.n	424794 <lv_msgbox_get_active_btn+0x14>
    lv_msgbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
  424796:	4620      	mov	r0, r4
  424798:	4b0c      	ldr	r3, [pc, #48]	; (4247cc <lv_msgbox_get_active_btn+0x4c>)
  42479a:	4798      	blx	r3
  42479c:	4604      	mov	r4, r0
    if(ext->btnm == NULL) return LV_BTNMATRIX_BTN_NONE;
  42479e:	6880      	ldr	r0, [r0, #8]
  4247a0:	b150      	cbz	r0, 4247b8 <lv_msgbox_get_active_btn+0x38>
    uint16_t id = lv_btnmatrix_get_active_btn(ext->btnm);
  4247a2:	4b0b      	ldr	r3, [pc, #44]	; (4247d0 <lv_msgbox_get_active_btn+0x50>)
  4247a4:	4798      	blx	r3
    if(id == LV_BTNMATRIX_BTN_NONE) {
  4247a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4247aa:	4298      	cmp	r0, r3
  4247ac:	d000      	beq.n	4247b0 <lv_msgbox_get_active_btn+0x30>
}
  4247ae:	bd10      	pop	{r4, pc}
        id = lv_btnmatrix_get_focused_btn(ext->btnm);
  4247b0:	68a0      	ldr	r0, [r4, #8]
  4247b2:	4b08      	ldr	r3, [pc, #32]	; (4247d4 <lv_msgbox_get_active_btn+0x54>)
  4247b4:	4798      	blx	r3
  4247b6:	bd10      	pop	{r4, pc}
    if(ext->btnm == NULL) return LV_BTNMATRIX_BTN_NONE;
  4247b8:	f64f 70ff 	movw	r0, #65535	; 0xffff
  4247bc:	e7f7      	b.n	4247ae <lv_msgbox_get_active_btn+0x2e>
  4247be:	bf00      	nop
  4247c0:	00415f95 	.word	0x00415f95
  4247c4:	0042c728 	.word	0x0042c728
  4247c8:	00415fa1 	.word	0x00415fa1
  4247cc:	00408115 	.word	0x00408115
  4247d0:	0041e8b9 	.word	0x0041e8b9
  4247d4:	0041e8e9 	.word	0x0041e8e9

004247d8 <lv_msgbox_get_anim_time>:
{
  4247d8:	b510      	push	{r4, lr}
  4247da:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(mbox, LV_OBJX_NAME);
  4247dc:	4b06      	ldr	r3, [pc, #24]	; (4247f8 <lv_msgbox_get_anim_time+0x20>)
  4247de:	4798      	blx	r3
  4247e0:	b928      	cbnz	r0, 4247ee <lv_msgbox_get_anim_time+0x16>
  4247e2:	4622      	mov	r2, r4
  4247e4:	2300      	movs	r3, #0
  4247e6:	4805      	ldr	r0, [pc, #20]	; (4247fc <lv_msgbox_get_anim_time+0x24>)
  4247e8:	4905      	ldr	r1, [pc, #20]	; (424800 <lv_msgbox_get_anim_time+0x28>)
  4247ea:	4788      	blx	r1
  4247ec:	e7fe      	b.n	4247ec <lv_msgbox_get_anim_time+0x14>
    lv_msgbox_ext_t * ext = lv_obj_get_ext_attr(mbox);
  4247ee:	4620      	mov	r0, r4
  4247f0:	4b04      	ldr	r3, [pc, #16]	; (424804 <lv_msgbox_get_anim_time+0x2c>)
  4247f2:	4798      	blx	r3
}
  4247f4:	8980      	ldrh	r0, [r0, #12]
  4247f6:	bd10      	pop	{r4, pc}
  4247f8:	00415f95 	.word	0x00415f95
  4247fc:	0042c728 	.word	0x0042c728
  424800:	00415fa1 	.word	0x00415fa1
  424804:	00408115 	.word	0x00408115

00424808 <lv_msgbox_start_auto_close>:
{
  424808:	b570      	push	{r4, r5, r6, lr}
  42480a:	b094      	sub	sp, #80	; 0x50
  42480c:	4604      	mov	r4, r0
  42480e:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(mbox, LV_OBJX_NAME);
  424810:	4b26      	ldr	r3, [pc, #152]	; (4248ac <lv_msgbox_start_auto_close+0xa4>)
  424812:	4798      	blx	r3
  424814:	b928      	cbnz	r0, 424822 <lv_msgbox_start_auto_close+0x1a>
  424816:	4622      	mov	r2, r4
  424818:	2300      	movs	r3, #0
  42481a:	4825      	ldr	r0, [pc, #148]	; (4248b0 <lv_msgbox_start_auto_close+0xa8>)
  42481c:	4925      	ldr	r1, [pc, #148]	; (4248b4 <lv_msgbox_start_auto_close+0xac>)
  42481e:	4788      	blx	r1
  424820:	e7fe      	b.n	424820 <lv_msgbox_start_auto_close+0x18>
    if(lv_msgbox_get_anim_time(mbox) != 0) {
  424822:	4620      	mov	r0, r4
  424824:	4b24      	ldr	r3, [pc, #144]	; (4248b8 <lv_msgbox_start_auto_close+0xb0>)
  424826:	4798      	blx	r3
  424828:	b9b0      	cbnz	r0, 424858 <lv_msgbox_start_auto_close+0x50>
        lv_anim_init(&a);
  42482a:	a803      	add	r0, sp, #12
  42482c:	4b23      	ldr	r3, [pc, #140]	; (4248bc <lv_msgbox_start_auto_close+0xb4>)
  42482e:	4798      	blx	r3
    a->var     = var;
  424830:	9403      	str	r4, [sp, #12]
    a->exec_cb = exec_cb;
  424832:	2300      	movs	r3, #0
  424834:	9304      	str	r3, [sp, #16]
    a->start = start;
  424836:	9309      	str	r3, [sp, #36]	; 0x24
    a->current = start;
  424838:	930a      	str	r3, [sp, #40]	; 0x28
    a->end   = end;
  42483a:	2301      	movs	r3, #1
  42483c:	930b      	str	r3, [sp, #44]	; 0x2c
    a->ready_cb = ready_cb;
  42483e:	4b20      	ldr	r3, [pc, #128]	; (4248c0 <lv_msgbox_start_auto_close+0xb8>)
  424840:	9306      	str	r3, [sp, #24]
        lv_anim_set_time(&a, lv_msgbox_get_anim_time(mbox));
  424842:	4620      	mov	r0, r4
  424844:	4b1c      	ldr	r3, [pc, #112]	; (4248b8 <lv_msgbox_start_auto_close+0xb0>)
  424846:	4798      	blx	r3
    a->time     = duration;
  424848:	900c      	str	r0, [sp, #48]	; 0x30
    a->act_time = -(int32_t)(delay);
  42484a:	426d      	negs	r5, r5
  42484c:	950d      	str	r5, [sp, #52]	; 0x34
        lv_anim_start(&a);
  42484e:	a803      	add	r0, sp, #12
  424850:	4b1c      	ldr	r3, [pc, #112]	; (4248c4 <lv_msgbox_start_auto_close+0xbc>)
  424852:	4798      	blx	r3
}
  424854:	b014      	add	sp, #80	; 0x50
  424856:	bd70      	pop	{r4, r5, r6, pc}
        lv_anim_init(&a);
  424858:	a803      	add	r0, sp, #12
  42485a:	4b18      	ldr	r3, [pc, #96]	; (4248bc <lv_msgbox_start_auto_close+0xb4>)
  42485c:	4798      	blx	r3
    a->var     = var;
  42485e:	9403      	str	r4, [sp, #12]
    a->exec_cb = exec_cb;
  424860:	4b19      	ldr	r3, [pc, #100]	; (4248c8 <lv_msgbox_start_auto_close+0xc0>)
  424862:	9304      	str	r3, [sp, #16]
        lv_anim_set_values(&a, lv_obj_get_height(mbox), 0);
  424864:	4620      	mov	r0, r4
  424866:	4b19      	ldr	r3, [pc, #100]	; (4248cc <lv_msgbox_start_auto_close+0xc4>)
  424868:	4798      	blx	r3
    a->start = start;
  42486a:	9009      	str	r0, [sp, #36]	; 0x24
    a->current = start;
  42486c:	900a      	str	r0, [sp, #40]	; 0x28
    a->end   = end;
  42486e:	2600      	movs	r6, #0
  424870:	960b      	str	r6, [sp, #44]	; 0x2c
        lv_anim_set_time(&a, lv_msgbox_get_anim_time(mbox));
  424872:	4620      	mov	r0, r4
  424874:	4b10      	ldr	r3, [pc, #64]	; (4248b8 <lv_msgbox_start_auto_close+0xb0>)
  424876:	4798      	blx	r3
    a->time     = duration;
  424878:	900c      	str	r0, [sp, #48]	; 0x30
    a->act_time = -(int32_t)(delay);
  42487a:	426d      	negs	r5, r5
  42487c:	950d      	str	r5, [sp, #52]	; 0x34
        lv_anim_start(&a);
  42487e:	a803      	add	r0, sp, #12
  424880:	4d10      	ldr	r5, [pc, #64]	; (4248c4 <lv_msgbox_start_auto_close+0xbc>)
  424882:	47a8      	blx	r5
    a->exec_cb = exec_cb;
  424884:	4b12      	ldr	r3, [pc, #72]	; (4248d0 <lv_msgbox_start_auto_close+0xc8>)
  424886:	9304      	str	r3, [sp, #16]
        lv_anim_set_values(&a, lv_obj_get_width(mbox), 0);
  424888:	4620      	mov	r0, r4
  42488a:	4b12      	ldr	r3, [pc, #72]	; (4248d4 <lv_msgbox_start_auto_close+0xcc>)
  42488c:	4798      	blx	r3
    a->start = start;
  42488e:	9009      	str	r0, [sp, #36]	; 0x24
    a->current = start;
  424890:	900a      	str	r0, [sp, #40]	; 0x28
    a->end   = end;
  424892:	960b      	str	r6, [sp, #44]	; 0x2c
    a->ready_cb = ready_cb;
  424894:	4b0a      	ldr	r3, [pc, #40]	; (4248c0 <lv_msgbox_start_auto_close+0xb8>)
  424896:	9306      	str	r3, [sp, #24]
        lv_anim_start(&a);
  424898:	a803      	add	r0, sp, #12
  42489a:	47a8      	blx	r5
 * @param cont pointer to a container object
 * @param fit fit policy from `lv_fit_t`
 */
static inline void lv_cont_set_fit(lv_obj_t * cont, lv_fit_t fit)
{
    lv_cont_set_fit4(cont, fit, fit, fit, fit);
  42489c:	9600      	str	r6, [sp, #0]
  42489e:	4633      	mov	r3, r6
  4248a0:	4632      	mov	r2, r6
  4248a2:	4631      	mov	r1, r6
  4248a4:	4620      	mov	r0, r4
  4248a6:	4c0c      	ldr	r4, [pc, #48]	; (4248d8 <lv_msgbox_start_auto_close+0xd0>)
  4248a8:	47a0      	blx	r4
  4248aa:	e7d3      	b.n	424854 <lv_msgbox_start_auto_close+0x4c>
  4248ac:	00415f95 	.word	0x00415f95
  4248b0:	0042c728 	.word	0x0042c728
  4248b4:	00415fa1 	.word	0x00415fa1
  4248b8:	004247d9 	.word	0x004247d9
  4248bc:	0041543d 	.word	0x0041543d
  4248c0:	00424005 	.word	0x00424005
  4248c4:	004154f5 	.word	0x004154f5
  4248c8:	00406dad 	.word	0x00406dad
  4248cc:	00405bf1 	.word	0x00405bf1
  4248d0:	00406d6d 	.word	0x00406d6d
  4248d4:	00405bc1 	.word	0x00405bc1
  4248d8:	00421765 	.word	0x00421765

004248dc <lv_msgbox_default_event_cb>:
    if(event != LV_EVENT_VALUE_CHANGED) return;
  4248dc:	2910      	cmp	r1, #16
  4248de:	d000      	beq.n	4248e2 <lv_msgbox_default_event_cb+0x6>
  4248e0:	4770      	bx	lr
{
  4248e2:	b510      	push	{r4, lr}
  4248e4:	4604      	mov	r4, r0
    uint32_t btn_id = lv_msgbox_get_active_btn(mbox);
  4248e6:	4b05      	ldr	r3, [pc, #20]	; (4248fc <lv_msgbox_default_event_cb+0x20>)
  4248e8:	4798      	blx	r3
    if(btn_id == LV_BTNMATRIX_BTN_NONE) return;
  4248ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4248ee:	4298      	cmp	r0, r3
  4248f0:	d003      	beq.n	4248fa <lv_msgbox_default_event_cb+0x1e>
    lv_msgbox_start_auto_close(mbox, 0);
  4248f2:	2100      	movs	r1, #0
  4248f4:	4620      	mov	r0, r4
  4248f6:	4b02      	ldr	r3, [pc, #8]	; (424900 <lv_msgbox_default_event_cb+0x24>)
  4248f8:	4798      	blx	r3
  4248fa:	bd10      	pop	{r4, pc}
  4248fc:	00424781 	.word	0x00424781
  424900:	00424809 	.word	0x00424809

00424904 <lv_spinbox_get_value>:
 * Get the spinbox numeral value (user has to convert to float according to its digit format)
 * @param spinbox pointer to spinbox
 * @return value integer value of the spinbox
 */
int32_t lv_spinbox_get_value(lv_obj_t * spinbox)
{
  424904:	b510      	push	{r4, lr}
  424906:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(spinbox, LV_OBJX_NAME);
  424908:	4b07      	ldr	r3, [pc, #28]	; (424928 <lv_spinbox_get_value+0x24>)
  42490a:	4798      	blx	r3
  42490c:	b928      	cbnz	r0, 42491a <lv_spinbox_get_value+0x16>
  42490e:	4622      	mov	r2, r4
  424910:	2300      	movs	r3, #0
  424912:	4806      	ldr	r0, [pc, #24]	; (42492c <lv_spinbox_get_value+0x28>)
  424914:	4906      	ldr	r1, [pc, #24]	; (424930 <lv_spinbox_get_value+0x2c>)
  424916:	4788      	blx	r1
  424918:	e7fe      	b.n	424918 <lv_spinbox_get_value+0x14>

    lv_spinbox_ext_t * ext = lv_obj_get_ext_attr(spinbox);
  42491a:	4620      	mov	r0, r4
  42491c:	4b05      	ldr	r3, [pc, #20]	; (424934 <lv_spinbox_get_value+0x30>)
  42491e:	4798      	blx	r3

    return ext->value;
}
  424920:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
  424924:	bd10      	pop	{r4, pc}
  424926:	bf00      	nop
  424928:	00415f95 	.word	0x00415f95
  42492c:	0042c728 	.word	0x0042c728
  424930:	00415fa1 	.word	0x00415fa1
  424934:	00408115 	.word	0x00408115

00424938 <sysclk_init>:
  424938:	b508      	push	{r3, lr}
  42493a:	4810      	ldr	r0, [pc, #64]	; (42497c <sysclk_init+0x44>)
  42493c:	4b10      	ldr	r3, [pc, #64]	; (424980 <sysclk_init+0x48>)
  42493e:	4798      	blx	r3
  424940:	213e      	movs	r1, #62	; 0x3e
  424942:	2000      	movs	r0, #0
  424944:	4b0f      	ldr	r3, [pc, #60]	; (424984 <sysclk_init+0x4c>)
  424946:	4798      	blx	r3
  424948:	4b0f      	ldr	r3, [pc, #60]	; (424988 <sysclk_init+0x50>)
  42494a:	4798      	blx	r3
  42494c:	2800      	cmp	r0, #0
  42494e:	d0fb      	beq.n	424948 <sysclk_init+0x10>
  424950:	4b0e      	ldr	r3, [pc, #56]	; (42498c <sysclk_init+0x54>)
  424952:	4798      	blx	r3
  424954:	4a0e      	ldr	r2, [pc, #56]	; (424990 <sysclk_init+0x58>)
  424956:	4b0f      	ldr	r3, [pc, #60]	; (424994 <sysclk_init+0x5c>)
  424958:	629a      	str	r2, [r3, #40]	; 0x28
  42495a:	4b0f      	ldr	r3, [pc, #60]	; (424998 <sysclk_init+0x60>)
  42495c:	4798      	blx	r3
  42495e:	2800      	cmp	r0, #0
  424960:	d0fb      	beq.n	42495a <sysclk_init+0x22>
  424962:	2002      	movs	r0, #2
  424964:	4b0d      	ldr	r3, [pc, #52]	; (42499c <sysclk_init+0x64>)
  424966:	4798      	blx	r3
  424968:	2000      	movs	r0, #0
  42496a:	4b0d      	ldr	r3, [pc, #52]	; (4249a0 <sysclk_init+0x68>)
  42496c:	4798      	blx	r3
  42496e:	4b0d      	ldr	r3, [pc, #52]	; (4249a4 <sysclk_init+0x6c>)
  424970:	4798      	blx	r3
  424972:	480d      	ldr	r0, [pc, #52]	; (4249a8 <sysclk_init+0x70>)
  424974:	4b02      	ldr	r3, [pc, #8]	; (424980 <sysclk_init+0x48>)
  424976:	4798      	blx	r3
  424978:	bd08      	pop	{r3, pc}
  42497a:	bf00      	nop
  42497c:	07270e00 	.word	0x07270e00
  424980:	00425771 	.word	0x00425771
  424984:	00425231 	.word	0x00425231
  424988:	00425285 	.word	0x00425285
  42498c:	00425295 	.word	0x00425295
  424990:	20183f01 	.word	0x20183f01
  424994:	400e0600 	.word	0x400e0600
  424998:	004252a5 	.word	0x004252a5
  42499c:	004251a1 	.word	0x004251a1
  4249a0:	004251dd 	.word	0x004251dd
  4249a4:	00425661 	.word	0x00425661
  4249a8:	11e1a300 	.word	0x11e1a300

004249ac <spi_master_init>:
  4249ac:	b510      	push	{r4, lr}
  4249ae:	4604      	mov	r4, r0
  4249b0:	4b10      	ldr	r3, [pc, #64]	; (4249f4 <spi_master_init+0x48>)
  4249b2:	4798      	blx	r3
  4249b4:	2380      	movs	r3, #128	; 0x80
  4249b6:	6023      	str	r3, [r4, #0]
  4249b8:	6863      	ldr	r3, [r4, #4]
  4249ba:	f043 0301 	orr.w	r3, r3, #1
  4249be:	6063      	str	r3, [r4, #4]
  4249c0:	6863      	ldr	r3, [r4, #4]
  4249c2:	f043 0310 	orr.w	r3, r3, #16
  4249c6:	6063      	str	r3, [r4, #4]
  4249c8:	6863      	ldr	r3, [r4, #4]
  4249ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4249ce:	6063      	str	r3, [r4, #4]
  4249d0:	2100      	movs	r1, #0
  4249d2:	4620      	mov	r0, r4
  4249d4:	4b08      	ldr	r3, [pc, #32]	; (4249f8 <spi_master_init+0x4c>)
  4249d6:	4798      	blx	r3
  4249d8:	6863      	ldr	r3, [r4, #4]
  4249da:	f023 0302 	bic.w	r3, r3, #2
  4249de:	6063      	str	r3, [r4, #4]
  4249e0:	6863      	ldr	r3, [r4, #4]
  4249e2:	f023 0304 	bic.w	r3, r3, #4
  4249e6:	6063      	str	r3, [r4, #4]
  4249e8:	2100      	movs	r1, #0
  4249ea:	4620      	mov	r0, r4
  4249ec:	4b03      	ldr	r3, [pc, #12]	; (4249fc <spi_master_init+0x50>)
  4249ee:	4798      	blx	r3
  4249f0:	bd10      	pop	{r4, pc}
  4249f2:	bf00      	nop
  4249f4:	004252d5 	.word	0x004252d5
  4249f8:	00425301 	.word	0x00425301
  4249fc:	00425317 	.word	0x00425317

00424a00 <spi_master_setup_device>:
  424a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  424a04:	4604      	mov	r4, r0
  424a06:	460d      	mov	r5, r1
  424a08:	4616      	mov	r6, r2
  424a0a:	4915      	ldr	r1, [pc, #84]	; (424a60 <spi_master_setup_device+0x60>)
  424a0c:	4618      	mov	r0, r3
  424a0e:	4b15      	ldr	r3, [pc, #84]	; (424a64 <spi_master_setup_device+0x64>)
  424a10:	4798      	blx	r3
  424a12:	4607      	mov	r7, r0
  424a14:	2300      	movs	r3, #0
  424a16:	461a      	mov	r2, r3
  424a18:	6829      	ldr	r1, [r5, #0]
  424a1a:	4620      	mov	r0, r4
  424a1c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 424a7c <spi_master_setup_device+0x7c>
  424a20:	47c0      	blx	r8
  424a22:	2208      	movs	r2, #8
  424a24:	6829      	ldr	r1, [r5, #0]
  424a26:	4620      	mov	r0, r4
  424a28:	4b0f      	ldr	r3, [pc, #60]	; (424a68 <spi_master_setup_device+0x68>)
  424a2a:	4798      	blx	r3
  424a2c:	b2fa      	uxtb	r2, r7
  424a2e:	6829      	ldr	r1, [r5, #0]
  424a30:	4620      	mov	r0, r4
  424a32:	4b0e      	ldr	r3, [pc, #56]	; (424a6c <spi_master_setup_device+0x6c>)
  424a34:	4798      	blx	r3
  424a36:	2208      	movs	r2, #8
  424a38:	6829      	ldr	r1, [r5, #0]
  424a3a:	4620      	mov	r0, r4
  424a3c:	4b0c      	ldr	r3, [pc, #48]	; (424a70 <spi_master_setup_device+0x70>)
  424a3e:	4798      	blx	r3
  424a40:	0872      	lsrs	r2, r6, #1
  424a42:	6829      	ldr	r1, [r5, #0]
  424a44:	4620      	mov	r0, r4
  424a46:	4b0b      	ldr	r3, [pc, #44]	; (424a74 <spi_master_setup_device+0x74>)
  424a48:	4798      	blx	r3
  424a4a:	f086 0201 	eor.w	r2, r6, #1
  424a4e:	f002 0201 	and.w	r2, r2, #1
  424a52:	6829      	ldr	r1, [r5, #0]
  424a54:	4620      	mov	r0, r4
  424a56:	4b08      	ldr	r3, [pc, #32]	; (424a78 <spi_master_setup_device+0x78>)
  424a58:	4798      	blx	r3
  424a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  424a5e:	bf00      	nop
  424a60:	08f0d180 	.word	0x08f0d180
  424a64:	004253db 	.word	0x004253db
  424a68:	004253c1 	.word	0x004253c1
  424a6c:	004253f3 	.word	0x004253f3
  424a70:	0042536d 	.word	0x0042536d
  424a74:	00425329 	.word	0x00425329
  424a78:	0042534b 	.word	0x0042534b
  424a7c:	00425421 	.word	0x00425421

00424a80 <spi_select_device>:
  424a80:	b508      	push	{r3, lr}
  424a82:	6843      	ldr	r3, [r0, #4]
  424a84:	f013 0f04 	tst.w	r3, #4
  424a88:	d005      	beq.n	424a96 <spi_select_device+0x16>
  424a8a:	2301      	movs	r3, #1
  424a8c:	b143      	cbz	r3, 424aa0 <spi_select_device+0x20>
  424a8e:	6809      	ldr	r1, [r1, #0]
  424a90:	290f      	cmp	r1, #15
  424a92:	d902      	bls.n	424a9a <spi_select_device+0x1a>
  424a94:	bd08      	pop	{r3, pc}
  424a96:	2300      	movs	r3, #0
  424a98:	e7f8      	b.n	424a8c <spi_select_device+0xc>
  424a9a:	4b06      	ldr	r3, [pc, #24]	; (424ab4 <spi_select_device+0x34>)
  424a9c:	4798      	blx	r3
  424a9e:	bd08      	pop	{r3, pc}
  424aa0:	6809      	ldr	r1, [r1, #0]
  424aa2:	2903      	cmp	r1, #3
  424aa4:	d8f6      	bhi.n	424a94 <spi_select_device+0x14>
  424aa6:	2301      	movs	r3, #1
  424aa8:	fa03 f101 	lsl.w	r1, r3, r1
  424aac:	43c9      	mvns	r1, r1
  424aae:	4b01      	ldr	r3, [pc, #4]	; (424ab4 <spi_select_device+0x34>)
  424ab0:	4798      	blx	r3
  424ab2:	e7ef      	b.n	424a94 <spi_select_device+0x14>
  424ab4:	00425301 	.word	0x00425301

00424ab8 <_read>:
  424ab8:	b570      	push	{r4, r5, r6, lr}
  424aba:	460d      	mov	r5, r1
  424abc:	4614      	mov	r4, r2
  424abe:	4606      	mov	r6, r0
  424ac0:	b158      	cbz	r0, 424ada <_read+0x22>
  424ac2:	f04f 36ff 	mov.w	r6, #4294967295
  424ac6:	e00a      	b.n	424ade <_read+0x26>
  424ac8:	4b06      	ldr	r3, [pc, #24]	; (424ae4 <_read+0x2c>)
  424aca:	6818      	ldr	r0, [r3, #0]
  424acc:	4b06      	ldr	r3, [pc, #24]	; (424ae8 <_read+0x30>)
  424ace:	681b      	ldr	r3, [r3, #0]
  424ad0:	4629      	mov	r1, r5
  424ad2:	4798      	blx	r3
  424ad4:	3501      	adds	r5, #1
  424ad6:	3601      	adds	r6, #1
  424ad8:	3c01      	subs	r4, #1
  424ada:	2c00      	cmp	r4, #0
  424adc:	dcf4      	bgt.n	424ac8 <_read+0x10>
  424ade:	4630      	mov	r0, r6
  424ae0:	bd70      	pop	{r4, r5, r6, pc}
  424ae2:	bf00      	nop
  424ae4:	2043a404 	.word	0x2043a404
  424ae8:	2043a3fc 	.word	0x2043a3fc

00424aec <_write>:
  424aec:	b570      	push	{r4, r5, r6, lr}
  424aee:	3801      	subs	r0, #1
  424af0:	2802      	cmp	r0, #2
  424af2:	d80f      	bhi.n	424b14 <_write+0x28>
  424af4:	4614      	mov	r4, r2
  424af6:	2500      	movs	r5, #0
  424af8:	b18c      	cbz	r4, 424b1e <_write+0x32>
  424afa:	4b0a      	ldr	r3, [pc, #40]	; (424b24 <_write+0x38>)
  424afc:	6818      	ldr	r0, [r3, #0]
  424afe:	1c4e      	adds	r6, r1, #1
  424b00:	4b09      	ldr	r3, [pc, #36]	; (424b28 <_write+0x3c>)
  424b02:	681b      	ldr	r3, [r3, #0]
  424b04:	7809      	ldrb	r1, [r1, #0]
  424b06:	4798      	blx	r3
  424b08:	2800      	cmp	r0, #0
  424b0a:	db06      	blt.n	424b1a <_write+0x2e>
  424b0c:	3501      	adds	r5, #1
  424b0e:	3c01      	subs	r4, #1
  424b10:	4631      	mov	r1, r6
  424b12:	e7f1      	b.n	424af8 <_write+0xc>
  424b14:	f04f 35ff 	mov.w	r5, #4294967295
  424b18:	e001      	b.n	424b1e <_write+0x32>
  424b1a:	f04f 35ff 	mov.w	r5, #4294967295
  424b1e:	4628      	mov	r0, r5
  424b20:	bd70      	pop	{r4, r5, r6, pc}
  424b22:	bf00      	nop
  424b24:	2043a404 	.word	0x2043a404
  424b28:	2043a400 	.word	0x2043a400

00424b2c <board_init>:
  424b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  424b30:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  424b34:	4b9a      	ldr	r3, [pc, #616]	; (424da0 <board_init+0x274>)
  424b36:	605a      	str	r2, [r3, #4]
  424b38:	f3bf 8f4f 	dsb	sy
  424b3c:	f3bf 8f6f 	isb	sy
  424b40:	4b98      	ldr	r3, [pc, #608]	; (424da4 <board_init+0x278>)
  424b42:	2200      	movs	r2, #0
  424b44:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  424b48:	695a      	ldr	r2, [r3, #20]
  424b4a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  424b4e:	615a      	str	r2, [r3, #20]
  424b50:	f3bf 8f4f 	dsb	sy
  424b54:	f3bf 8f6f 	isb	sy
  424b58:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
  424b5c:	f3c6 304e 	ubfx	r0, r6, #13, #15
  424b60:	f006 0507 	and.w	r5, r6, #7
  424b64:	3504      	adds	r5, #4
  424b66:	f3c6 06c9 	ubfx	r6, r6, #3, #10
  424b6a:	fab6 f486 	clz	r4, r6
  424b6e:	f004 041f 	and.w	r4, r4, #31
  424b72:	f3bf 8f4f 	dsb	sy
  424b76:	e00e      	b.n	424b96 <board_init+0x6a>
  424b78:	4613      	mov	r3, r2
  424b7a:	fa03 f204 	lsl.w	r2, r3, r4
  424b7e:	fa00 f105 	lsl.w	r1, r0, r5
  424b82:	430a      	orrs	r2, r1
  424b84:	4987      	ldr	r1, [pc, #540]	; (424da4 <board_init+0x278>)
  424b86:	f8c1 2260 	str.w	r2, [r1, #608]	; 0x260
  424b8a:	1e5a      	subs	r2, r3, #1
  424b8c:	2b00      	cmp	r3, #0
  424b8e:	d1f3      	bne.n	424b78 <board_init+0x4c>
  424b90:	1e43      	subs	r3, r0, #1
  424b92:	b110      	cbz	r0, 424b9a <board_init+0x6e>
  424b94:	4618      	mov	r0, r3
  424b96:	4633      	mov	r3, r6
  424b98:	e7ef      	b.n	424b7a <board_init+0x4e>
  424b9a:	f3bf 8f4f 	dsb	sy
  424b9e:	460b      	mov	r3, r1
  424ba0:	694a      	ldr	r2, [r1, #20]
  424ba2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  424ba6:	614a      	str	r2, [r1, #20]
  424ba8:	f3bf 8f4f 	dsb	sy
  424bac:	f3bf 8f6f 	isb	sy
  424bb0:	4a7d      	ldr	r2, [pc, #500]	; (424da8 <board_init+0x27c>)
  424bb2:	497e      	ldr	r1, [pc, #504]	; (424dac <board_init+0x280>)
  424bb4:	6051      	str	r1, [r2, #4]
  424bb6:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  424bba:	6051      	str	r1, [r2, #4]
  424bbc:	f3bf 8f4f 	dsb	sy
  424bc0:	f3bf 8f6f 	isb	sy
  424bc4:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  424bc8:	f022 0201 	bic.w	r2, r2, #1
  424bcc:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  424bd0:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  424bd4:	f022 0201 	bic.w	r2, r2, #1
  424bd8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  424bdc:	f3bf 8f4f 	dsb	sy
  424be0:	f3bf 8f6f 	isb	sy
  424be4:	200a      	movs	r0, #10
  424be6:	4c72      	ldr	r4, [pc, #456]	; (424db0 <board_init+0x284>)
  424be8:	47a0      	blx	r4
  424bea:	200b      	movs	r0, #11
  424bec:	47a0      	blx	r4
  424bee:	200c      	movs	r0, #12
  424bf0:	47a0      	blx	r4
  424bf2:	2010      	movs	r0, #16
  424bf4:	47a0      	blx	r4
  424bf6:	2011      	movs	r0, #17
  424bf8:	47a0      	blx	r4
  424bfa:	4e6e      	ldr	r6, [pc, #440]	; (424db4 <board_init+0x288>)
  424bfc:	f44f 7880 	mov.w	r8, #256	; 0x100
  424c00:	f8c6 8010 	str.w	r8, [r6, #16]
  424c04:	f8c6 80a0 	str.w	r8, [r6, #160]	; 0xa0
  424c08:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
  424c0c:	4c6a      	ldr	r4, [pc, #424]	; (424db8 <board_init+0x28c>)
  424c0e:	f44f 6500 	mov.w	r5, #2048	; 0x800
  424c12:	6165      	str	r5, [r4, #20]
  424c14:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
  424c18:	6665      	str	r5, [r4, #100]	; 0x64
  424c1a:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
  424c1e:	6565      	str	r5, [r4, #84]	; 0x54
  424c20:	6225      	str	r5, [r4, #32]
  424c22:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  424c26:	6f23      	ldr	r3, [r4, #112]	; 0x70
  424c28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  424c2c:	6723      	str	r3, [r4, #112]	; 0x70
  424c2e:	6f63      	ldr	r3, [r4, #116]	; 0x74
  424c30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  424c34:	6763      	str	r3, [r4, #116]	; 0x74
  424c36:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
  424c3a:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
  424c3e:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
  424c42:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  424c46:	6623      	str	r3, [r4, #96]	; 0x60
  424c48:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  424c4c:	6563      	str	r3, [r4, #84]	; 0x54
  424c4e:	6263      	str	r3, [r4, #36]	; 0x24
  424c50:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  424c54:	6f22      	ldr	r2, [r4, #112]	; 0x70
  424c56:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  424c5a:	6722      	str	r2, [r4, #112]	; 0x70
  424c5c:	6f62      	ldr	r2, [r4, #116]	; 0x74
  424c5e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  424c62:	6762      	str	r2, [r4, #116]	; 0x74
  424c64:	6063      	str	r3, [r4, #4]
  424c66:	4a55      	ldr	r2, [pc, #340]	; (424dbc <board_init+0x290>)
  424c68:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  424c6c:	f043 0310 	orr.w	r3, r3, #16
  424c70:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
  424c74:	f502 22b2 	add.w	r2, r2, #364544	; 0x59000
  424c78:	2310      	movs	r3, #16
  424c7a:	6613      	str	r3, [r2, #96]	; 0x60
  424c7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  424c80:	6553      	str	r3, [r2, #84]	; 0x54
  424c82:	6253      	str	r3, [r2, #36]	; 0x24
  424c84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  424c88:	6f11      	ldr	r1, [r2, #112]	; 0x70
  424c8a:	4319      	orrs	r1, r3
  424c8c:	6711      	str	r1, [r2, #112]	; 0x70
  424c8e:	6f51      	ldr	r1, [r2, #116]	; 0x74
  424c90:	4319      	orrs	r1, r3
  424c92:	6751      	str	r1, [r2, #116]	; 0x74
  424c94:	6053      	str	r3, [r2, #4]
  424c96:	2208      	movs	r2, #8
  424c98:	6622      	str	r2, [r4, #96]	; 0x60
  424c9a:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
  424c9e:	6562      	str	r2, [r4, #84]	; 0x54
  424ca0:	6262      	str	r2, [r4, #36]	; 0x24
  424ca2:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  424ca6:	6f21      	ldr	r1, [r4, #112]	; 0x70
  424ca8:	f021 0108 	bic.w	r1, r1, #8
  424cac:	6721      	str	r1, [r4, #112]	; 0x70
  424cae:	6f61      	ldr	r1, [r4, #116]	; 0x74
  424cb0:	f021 0108 	bic.w	r1, r1, #8
  424cb4:	6761      	str	r1, [r4, #116]	; 0x74
  424cb6:	6062      	str	r2, [r4, #4]
  424cb8:	6623      	str	r3, [r4, #96]	; 0x60
  424cba:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  424cbe:	6563      	str	r3, [r4, #84]	; 0x54
  424cc0:	6263      	str	r3, [r4, #36]	; 0x24
  424cc2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  424cc6:	6f22      	ldr	r2, [r4, #112]	; 0x70
  424cc8:	f022 0210 	bic.w	r2, r2, #16
  424ccc:	6722      	str	r2, [r4, #112]	; 0x70
  424cce:	6f62      	ldr	r2, [r4, #116]	; 0x74
  424cd0:	f022 0210 	bic.w	r2, r2, #16
  424cd4:	6762      	str	r2, [r4, #116]	; 0x74
  424cd6:	6063      	str	r3, [r4, #4]
  424cd8:	2300      	movs	r3, #0
  424cda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  424cde:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  424ce2:	4630      	mov	r0, r6
  424ce4:	4f36      	ldr	r7, [pc, #216]	; (424dc0 <board_init+0x294>)
  424ce6:	47b8      	blx	r7
  424ce8:	2300      	movs	r3, #0
  424cea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  424cee:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  424cf2:	4630      	mov	r0, r6
  424cf4:	47b8      	blx	r7
  424cf6:	2301      	movs	r3, #1
  424cf8:	22ff      	movs	r2, #255	; 0xff
  424cfa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  424cfe:	4630      	mov	r0, r6
  424d00:	47b8      	blx	r7
  424d02:	2301      	movs	r3, #1
  424d04:	223f      	movs	r2, #63	; 0x3f
  424d06:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  424d0a:	482e      	ldr	r0, [pc, #184]	; (424dc4 <board_init+0x298>)
  424d0c:	47b8      	blx	r7
  424d0e:	2301      	movs	r3, #1
  424d10:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  424d14:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  424d18:	4620      	mov	r0, r4
  424d1a:	47b8      	blx	r7
  424d1c:	2301      	movs	r3, #1
  424d1e:	4642      	mov	r2, r8
  424d20:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  424d24:	4630      	mov	r0, r6
  424d26:	47b8      	blx	r7
  424d28:	2301      	movs	r3, #1
  424d2a:	462a      	mov	r2, r5
  424d2c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  424d30:	4630      	mov	r0, r6
  424d32:	47b8      	blx	r7
  424d34:	2301      	movs	r3, #1
  424d36:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  424d3a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  424d3e:	4822      	ldr	r0, [pc, #136]	; (424dc8 <board_init+0x29c>)
  424d40:	47b8      	blx	r7
  424d42:	2300      	movs	r3, #0
  424d44:	f44f 7200 	mov.w	r2, #512	; 0x200
  424d48:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  424d4c:	4630      	mov	r0, r6
  424d4e:	47b8      	blx	r7
  424d50:	f44f 7100 	mov.w	r1, #512	; 0x200
  424d54:	4630      	mov	r0, r6
  424d56:	4b1d      	ldr	r3, [pc, #116]	; (424dcc <board_init+0x2a0>)
  424d58:	4798      	blx	r3
  424d5a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  424d5e:	2074      	movs	r0, #116	; 0x74
  424d60:	4c1b      	ldr	r4, [pc, #108]	; (424dd0 <board_init+0x2a4>)
  424d62:	47a0      	blx	r4
  424d64:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  424d68:	2075      	movs	r0, #117	; 0x75
  424d6a:	47a0      	blx	r4
  424d6c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  424d70:	2076      	movs	r0, #118	; 0x76
  424d72:	47a0      	blx	r4
  424d74:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  424d78:	207b      	movs	r0, #123	; 0x7b
  424d7a:	47a0      	blx	r4
  424d7c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  424d80:	2018      	movs	r0, #24
  424d82:	47a0      	blx	r4
  424d84:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  424d88:	2006      	movs	r0, #6
  424d8a:	47a0      	blx	r4
  424d8c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  424d90:	2053      	movs	r0, #83	; 0x53
  424d92:	47a0      	blx	r4
  424d94:	2053      	movs	r0, #83	; 0x53
  424d96:	4b0f      	ldr	r3, [pc, #60]	; (424dd4 <board_init+0x2a8>)
  424d98:	4798      	blx	r3
  424d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  424d9e:	bf00      	nop
  424da0:	400e1850 	.word	0x400e1850
  424da4:	e000ed00 	.word	0xe000ed00
  424da8:	400e0c00 	.word	0x400e0c00
  424dac:	5a00080c 	.word	0x5a00080c
  424db0:	004252b5 	.word	0x004252b5
  424db4:	400e1200 	.word	0x400e1200
  424db8:	400e0e00 	.word	0x400e0e00
  424dbc:	40088000 	.word	0x40088000
  424dc0:	00424efd 	.word	0x00424efd
  424dc4:	400e1600 	.word	0x400e1600
  424dc8:	400e1400 	.word	0x400e1400
  424dcc:	00424de3 	.word	0x00424de3
  424dd0:	00424fbd 	.word	0x00424fbd
  424dd4:	00424fa5 	.word	0x00424fa5

00424dd8 <pio_pull_up>:
  424dd8:	b90a      	cbnz	r2, 424dde <pio_pull_up+0x6>
  424dda:	6601      	str	r1, [r0, #96]	; 0x60
  424ddc:	4770      	bx	lr
  424dde:	6641      	str	r1, [r0, #100]	; 0x64
  424de0:	4770      	bx	lr

00424de2 <pio_set>:
  424de2:	6301      	str	r1, [r0, #48]	; 0x30
  424de4:	4770      	bx	lr

00424de6 <pio_set_peripheral>:
  424de6:	6442      	str	r2, [r0, #68]	; 0x44
  424de8:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  424dec:	d039      	beq.n	424e62 <pio_set_peripheral+0x7c>
  424dee:	d813      	bhi.n	424e18 <pio_set_peripheral+0x32>
  424df0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  424df4:	d025      	beq.n	424e42 <pio_set_peripheral+0x5c>
  424df6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  424dfa:	d10a      	bne.n	424e12 <pio_set_peripheral+0x2c>
  424dfc:	6f03      	ldr	r3, [r0, #112]	; 0x70
  424dfe:	4313      	orrs	r3, r2
  424e00:	6703      	str	r3, [r0, #112]	; 0x70
  424e02:	6f41      	ldr	r1, [r0, #116]	; 0x74
  424e04:	6f43      	ldr	r3, [r0, #116]	; 0x74
  424e06:	ea21 0102 	bic.w	r1, r1, r2
  424e0a:	400b      	ands	r3, r1
  424e0c:	6743      	str	r3, [r0, #116]	; 0x74
  424e0e:	6042      	str	r2, [r0, #4]
  424e10:	4770      	bx	lr
  424e12:	2900      	cmp	r1, #0
  424e14:	d1fb      	bne.n	424e0e <pio_set_peripheral+0x28>
  424e16:	4770      	bx	lr
  424e18:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  424e1c:	d020      	beq.n	424e60 <pio_set_peripheral+0x7a>
  424e1e:	d809      	bhi.n	424e34 <pio_set_peripheral+0x4e>
  424e20:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  424e24:	d1f3      	bne.n	424e0e <pio_set_peripheral+0x28>
  424e26:	6f03      	ldr	r3, [r0, #112]	; 0x70
  424e28:	4313      	orrs	r3, r2
  424e2a:	6703      	str	r3, [r0, #112]	; 0x70
  424e2c:	6f43      	ldr	r3, [r0, #116]	; 0x74
  424e2e:	4313      	orrs	r3, r2
  424e30:	6743      	str	r3, [r0, #116]	; 0x74
  424e32:	e7ec      	b.n	424e0e <pio_set_peripheral+0x28>
  424e34:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  424e38:	d012      	beq.n	424e60 <pio_set_peripheral+0x7a>
  424e3a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  424e3e:	d00f      	beq.n	424e60 <pio_set_peripheral+0x7a>
  424e40:	e7e5      	b.n	424e0e <pio_set_peripheral+0x28>
  424e42:	b410      	push	{r4}
  424e44:	6f04      	ldr	r4, [r0, #112]	; 0x70
  424e46:	6f01      	ldr	r1, [r0, #112]	; 0x70
  424e48:	43d3      	mvns	r3, r2
  424e4a:	401c      	ands	r4, r3
  424e4c:	4021      	ands	r1, r4
  424e4e:	6701      	str	r1, [r0, #112]	; 0x70
  424e50:	6f44      	ldr	r4, [r0, #116]	; 0x74
  424e52:	6f41      	ldr	r1, [r0, #116]	; 0x74
  424e54:	4023      	ands	r3, r4
  424e56:	400b      	ands	r3, r1
  424e58:	6743      	str	r3, [r0, #116]	; 0x74
  424e5a:	6042      	str	r2, [r0, #4]
  424e5c:	f85d 4b04 	ldr.w	r4, [sp], #4
  424e60:	4770      	bx	lr
  424e62:	6f01      	ldr	r1, [r0, #112]	; 0x70
  424e64:	6f03      	ldr	r3, [r0, #112]	; 0x70
  424e66:	ea21 0102 	bic.w	r1, r1, r2
  424e6a:	400b      	ands	r3, r1
  424e6c:	6703      	str	r3, [r0, #112]	; 0x70
  424e6e:	6f43      	ldr	r3, [r0, #116]	; 0x74
  424e70:	4313      	orrs	r3, r2
  424e72:	6743      	str	r3, [r0, #116]	; 0x74
  424e74:	e7cb      	b.n	424e0e <pio_set_peripheral+0x28>

00424e76 <pio_disable_interrupt>:
  424e76:	6441      	str	r1, [r0, #68]	; 0x44
  424e78:	4770      	bx	lr
	...

00424e7c <pio_set_input>:
  424e7c:	b570      	push	{r4, r5, r6, lr}
  424e7e:	4604      	mov	r4, r0
  424e80:	460d      	mov	r5, r1
  424e82:	4616      	mov	r6, r2
  424e84:	4b0d      	ldr	r3, [pc, #52]	; (424ebc <pio_set_input+0x40>)
  424e86:	4798      	blx	r3
  424e88:	f006 0201 	and.w	r2, r6, #1
  424e8c:	4629      	mov	r1, r5
  424e8e:	4620      	mov	r0, r4
  424e90:	4b0b      	ldr	r3, [pc, #44]	; (424ec0 <pio_set_input+0x44>)
  424e92:	4798      	blx	r3
  424e94:	f016 0f0a 	tst.w	r6, #10
  424e98:	d009      	beq.n	424eae <pio_set_input+0x32>
  424e9a:	6225      	str	r5, [r4, #32]
  424e9c:	f016 0f02 	tst.w	r6, #2
  424ea0:	d107      	bne.n	424eb2 <pio_set_input+0x36>
  424ea2:	f016 0f08 	tst.w	r6, #8
  424ea6:	d006      	beq.n	424eb6 <pio_set_input+0x3a>
  424ea8:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  424eac:	e003      	b.n	424eb6 <pio_set_input+0x3a>
  424eae:	6265      	str	r5, [r4, #36]	; 0x24
  424eb0:	e7f4      	b.n	424e9c <pio_set_input+0x20>
  424eb2:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  424eb6:	6165      	str	r5, [r4, #20]
  424eb8:	6025      	str	r5, [r4, #0]
  424eba:	bd70      	pop	{r4, r5, r6, pc}
  424ebc:	00424e77 	.word	0x00424e77
  424ec0:	00424dd9 	.word	0x00424dd9

00424ec4 <pio_set_output>:
  424ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  424ec6:	4604      	mov	r4, r0
  424ec8:	460d      	mov	r5, r1
  424eca:	4616      	mov	r6, r2
  424ecc:	461f      	mov	r7, r3
  424ece:	4b09      	ldr	r3, [pc, #36]	; (424ef4 <pio_set_output+0x30>)
  424ed0:	4798      	blx	r3
  424ed2:	9a06      	ldr	r2, [sp, #24]
  424ed4:	4629      	mov	r1, r5
  424ed6:	4620      	mov	r0, r4
  424ed8:	4b07      	ldr	r3, [pc, #28]	; (424ef8 <pio_set_output+0x34>)
  424eda:	4798      	blx	r3
  424edc:	b12f      	cbz	r7, 424eea <pio_set_output+0x26>
  424ede:	6525      	str	r5, [r4, #80]	; 0x50
  424ee0:	b92e      	cbnz	r6, 424eee <pio_set_output+0x2a>
  424ee2:	6365      	str	r5, [r4, #52]	; 0x34
  424ee4:	6125      	str	r5, [r4, #16]
  424ee6:	6025      	str	r5, [r4, #0]
  424ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  424eea:	6565      	str	r5, [r4, #84]	; 0x54
  424eec:	e7f8      	b.n	424ee0 <pio_set_output+0x1c>
  424eee:	6325      	str	r5, [r4, #48]	; 0x30
  424ef0:	e7f8      	b.n	424ee4 <pio_set_output+0x20>
  424ef2:	bf00      	nop
  424ef4:	00424e77 	.word	0x00424e77
  424ef8:	00424dd9 	.word	0x00424dd9

00424efc <pio_configure>:
  424efc:	b570      	push	{r4, r5, r6, lr}
  424efe:	b082      	sub	sp, #8
  424f00:	4604      	mov	r4, r0
  424f02:	4615      	mov	r5, r2
  424f04:	461e      	mov	r6, r3
  424f06:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  424f0a:	d014      	beq.n	424f36 <pio_configure+0x3a>
  424f0c:	d90a      	bls.n	424f24 <pio_configure+0x28>
  424f0e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  424f12:	d023      	beq.n	424f5c <pio_configure+0x60>
  424f14:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  424f18:	d020      	beq.n	424f5c <pio_configure+0x60>
  424f1a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  424f1e:	d017      	beq.n	424f50 <pio_configure+0x54>
  424f20:	2000      	movs	r0, #0
  424f22:	e013      	b.n	424f4c <pio_configure+0x50>
  424f24:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  424f28:	d005      	beq.n	424f36 <pio_configure+0x3a>
  424f2a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  424f2e:	d002      	beq.n	424f36 <pio_configure+0x3a>
  424f30:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  424f34:	d1f4      	bne.n	424f20 <pio_configure+0x24>
  424f36:	462a      	mov	r2, r5
  424f38:	4620      	mov	r0, r4
  424f3a:	4b10      	ldr	r3, [pc, #64]	; (424f7c <pio_configure+0x80>)
  424f3c:	4798      	blx	r3
  424f3e:	f006 0201 	and.w	r2, r6, #1
  424f42:	4629      	mov	r1, r5
  424f44:	4620      	mov	r0, r4
  424f46:	4b0e      	ldr	r3, [pc, #56]	; (424f80 <pio_configure+0x84>)
  424f48:	4798      	blx	r3
  424f4a:	2001      	movs	r0, #1
  424f4c:	b002      	add	sp, #8
  424f4e:	bd70      	pop	{r4, r5, r6, pc}
  424f50:	461a      	mov	r2, r3
  424f52:	4629      	mov	r1, r5
  424f54:	4b0b      	ldr	r3, [pc, #44]	; (424f84 <pio_configure+0x88>)
  424f56:	4798      	blx	r3
  424f58:	2001      	movs	r0, #1
  424f5a:	e7f7      	b.n	424f4c <pio_configure+0x50>
  424f5c:	f006 0301 	and.w	r3, r6, #1
  424f60:	9300      	str	r3, [sp, #0]
  424f62:	f3c6 0380 	ubfx	r3, r6, #2, #1
  424f66:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  424f6a:	bf14      	ite	ne
  424f6c:	2200      	movne	r2, #0
  424f6e:	2201      	moveq	r2, #1
  424f70:	4629      	mov	r1, r5
  424f72:	4620      	mov	r0, r4
  424f74:	4c04      	ldr	r4, [pc, #16]	; (424f88 <pio_configure+0x8c>)
  424f76:	47a0      	blx	r4
  424f78:	2001      	movs	r0, #1
  424f7a:	e7e7      	b.n	424f4c <pio_configure+0x50>
  424f7c:	00424de7 	.word	0x00424de7
  424f80:	00424dd9 	.word	0x00424dd9
  424f84:	00424e7d 	.word	0x00424e7d
  424f88:	00424ec5 	.word	0x00424ec5

00424f8c <pio_get_interrupt_status>:
  424f8c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
  424f8e:	4770      	bx	lr

00424f90 <pio_get_interrupt_mask>:
  424f90:	6c80      	ldr	r0, [r0, #72]	; 0x48
  424f92:	4770      	bx	lr

00424f94 <pio_get_pin_group>:
  424f94:	4b02      	ldr	r3, [pc, #8]	; (424fa0 <pio_get_pin_group+0xc>)
  424f96:	eb03 1050 	add.w	r0, r3, r0, lsr #5
  424f9a:	0240      	lsls	r0, r0, #9
  424f9c:	4770      	bx	lr
  424f9e:	bf00      	nop
  424fa0:	00200707 	.word	0x00200707

00424fa4 <pio_set_pin_high>:
  424fa4:	b510      	push	{r4, lr}
  424fa6:	4604      	mov	r4, r0
  424fa8:	4b03      	ldr	r3, [pc, #12]	; (424fb8 <pio_set_pin_high+0x14>)
  424faa:	4798      	blx	r3
  424fac:	f004 041f 	and.w	r4, r4, #31
  424fb0:	2301      	movs	r3, #1
  424fb2:	40a3      	lsls	r3, r4
  424fb4:	6303      	str	r3, [r0, #48]	; 0x30
  424fb6:	bd10      	pop	{r4, pc}
  424fb8:	00424f95 	.word	0x00424f95

00424fbc <pio_configure_pin>:
  424fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
  424fbe:	b083      	sub	sp, #12
  424fc0:	4604      	mov	r4, r0
  424fc2:	460d      	mov	r5, r1
  424fc4:	4b42      	ldr	r3, [pc, #264]	; (4250d0 <pio_configure_pin+0x114>)
  424fc6:	4798      	blx	r3
  424fc8:	4606      	mov	r6, r0
  424fca:	f005 43f0 	and.w	r3, r5, #2013265920	; 0x78000000
  424fce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  424fd2:	d055      	beq.n	425080 <pio_configure_pin+0xc4>
  424fd4:	d80a      	bhi.n	424fec <pio_configure_pin+0x30>
  424fd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  424fda:	d02d      	beq.n	425038 <pio_configure_pin+0x7c>
  424fdc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  424fe0:	d03c      	beq.n	42505c <pio_configure_pin+0xa0>
  424fe2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  424fe6:	d014      	beq.n	425012 <pio_configure_pin+0x56>
  424fe8:	2000      	movs	r0, #0
  424fea:	e023      	b.n	425034 <pio_configure_pin+0x78>
  424fec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  424ff0:	d058      	beq.n	4250a4 <pio_configure_pin+0xe8>
  424ff2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  424ff6:	d055      	beq.n	4250a4 <pio_configure_pin+0xe8>
  424ff8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  424ffc:	d1f4      	bne.n	424fe8 <pio_configure_pin+0x2c>
  424ffe:	f004 011f 	and.w	r1, r4, #31
  425002:	2401      	movs	r4, #1
  425004:	462a      	mov	r2, r5
  425006:	fa04 f101 	lsl.w	r1, r4, r1
  42500a:	4b32      	ldr	r3, [pc, #200]	; (4250d4 <pio_configure_pin+0x118>)
  42500c:	4798      	blx	r3
  42500e:	4620      	mov	r0, r4
  425010:	e010      	b.n	425034 <pio_configure_pin+0x78>
  425012:	f004 041f 	and.w	r4, r4, #31
  425016:	2701      	movs	r7, #1
  425018:	fa07 f404 	lsl.w	r4, r7, r4
  42501c:	4622      	mov	r2, r4
  42501e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  425022:	4b2d      	ldr	r3, [pc, #180]	; (4250d8 <pio_configure_pin+0x11c>)
  425024:	4798      	blx	r3
  425026:	ea05 0207 	and.w	r2, r5, r7
  42502a:	4621      	mov	r1, r4
  42502c:	4630      	mov	r0, r6
  42502e:	4b2b      	ldr	r3, [pc, #172]	; (4250dc <pio_configure_pin+0x120>)
  425030:	4798      	blx	r3
  425032:	4638      	mov	r0, r7
  425034:	b003      	add	sp, #12
  425036:	bdf0      	pop	{r4, r5, r6, r7, pc}
  425038:	f004 041f 	and.w	r4, r4, #31
  42503c:	2701      	movs	r7, #1
  42503e:	fa07 f404 	lsl.w	r4, r7, r4
  425042:	4622      	mov	r2, r4
  425044:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  425048:	4b23      	ldr	r3, [pc, #140]	; (4250d8 <pio_configure_pin+0x11c>)
  42504a:	4798      	blx	r3
  42504c:	ea05 0207 	and.w	r2, r5, r7
  425050:	4621      	mov	r1, r4
  425052:	4630      	mov	r0, r6
  425054:	4b21      	ldr	r3, [pc, #132]	; (4250dc <pio_configure_pin+0x120>)
  425056:	4798      	blx	r3
  425058:	4638      	mov	r0, r7
  42505a:	e7eb      	b.n	425034 <pio_configure_pin+0x78>
  42505c:	f004 041f 	and.w	r4, r4, #31
  425060:	2701      	movs	r7, #1
  425062:	fa07 f404 	lsl.w	r4, r7, r4
  425066:	4622      	mov	r2, r4
  425068:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  42506c:	4b1a      	ldr	r3, [pc, #104]	; (4250d8 <pio_configure_pin+0x11c>)
  42506e:	4798      	blx	r3
  425070:	ea05 0207 	and.w	r2, r5, r7
  425074:	4621      	mov	r1, r4
  425076:	4630      	mov	r0, r6
  425078:	4b18      	ldr	r3, [pc, #96]	; (4250dc <pio_configure_pin+0x120>)
  42507a:	4798      	blx	r3
  42507c:	4638      	mov	r0, r7
  42507e:	e7d9      	b.n	425034 <pio_configure_pin+0x78>
  425080:	f004 041f 	and.w	r4, r4, #31
  425084:	2701      	movs	r7, #1
  425086:	fa07 f404 	lsl.w	r4, r7, r4
  42508a:	4622      	mov	r2, r4
  42508c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  425090:	4b11      	ldr	r3, [pc, #68]	; (4250d8 <pio_configure_pin+0x11c>)
  425092:	4798      	blx	r3
  425094:	ea05 0207 	and.w	r2, r5, r7
  425098:	4621      	mov	r1, r4
  42509a:	4630      	mov	r0, r6
  42509c:	4b0f      	ldr	r3, [pc, #60]	; (4250dc <pio_configure_pin+0x120>)
  42509e:	4798      	blx	r3
  4250a0:	4638      	mov	r0, r7
  4250a2:	e7c7      	b.n	425034 <pio_configure_pin+0x78>
  4250a4:	f004 011f 	and.w	r1, r4, #31
  4250a8:	2401      	movs	r4, #1
  4250aa:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
  4250ae:	ea05 0304 	and.w	r3, r5, r4
  4250b2:	9300      	str	r3, [sp, #0]
  4250b4:	f3c5 0380 	ubfx	r3, r5, #2, #1
  4250b8:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4250bc:	bf14      	ite	ne
  4250be:	2200      	movne	r2, #0
  4250c0:	2201      	moveq	r2, #1
  4250c2:	fa04 f101 	lsl.w	r1, r4, r1
  4250c6:	4630      	mov	r0, r6
  4250c8:	4d05      	ldr	r5, [pc, #20]	; (4250e0 <pio_configure_pin+0x124>)
  4250ca:	47a8      	blx	r5
  4250cc:	4620      	mov	r0, r4
  4250ce:	e7b1      	b.n	425034 <pio_configure_pin+0x78>
  4250d0:	00424f95 	.word	0x00424f95
  4250d4:	00424e7d 	.word	0x00424e7d
  4250d8:	00424de7 	.word	0x00424de7
  4250dc:	00424dd9 	.word	0x00424dd9
  4250e0:	00424ec5 	.word	0x00424ec5

004250e4 <pio_handler_process>:
  4250e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4250e6:	4604      	mov	r4, r0
  4250e8:	460e      	mov	r6, r1
  4250ea:	4b11      	ldr	r3, [pc, #68]	; (425130 <pio_handler_process+0x4c>)
  4250ec:	4798      	blx	r3
  4250ee:	4605      	mov	r5, r0
  4250f0:	4620      	mov	r0, r4
  4250f2:	4b10      	ldr	r3, [pc, #64]	; (425134 <pio_handler_process+0x50>)
  4250f4:	4798      	blx	r3
  4250f6:	4005      	ands	r5, r0
  4250f8:	d001      	beq.n	4250fe <pio_handler_process+0x1a>
  4250fa:	2400      	movs	r4, #0
  4250fc:	e003      	b.n	425106 <pio_handler_process+0x22>
  4250fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  425100:	3401      	adds	r4, #1
  425102:	2c06      	cmp	r4, #6
  425104:	d811      	bhi.n	42512a <pio_handler_process+0x46>
  425106:	b18d      	cbz	r5, 42512c <pio_handler_process+0x48>
  425108:	0123      	lsls	r3, r4, #4
  42510a:	4a0b      	ldr	r2, [pc, #44]	; (425138 <pio_handler_process+0x54>)
  42510c:	58d0      	ldr	r0, [r2, r3]
  42510e:	42b0      	cmp	r0, r6
  425110:	d1f6      	bne.n	425100 <pio_handler_process+0x1c>
  425112:	eb02 1304 	add.w	r3, r2, r4, lsl #4
  425116:	6859      	ldr	r1, [r3, #4]
  425118:	420d      	tst	r5, r1
  42511a:	d0f1      	beq.n	425100 <pio_handler_process+0x1c>
  42511c:	461f      	mov	r7, r3
  42511e:	68db      	ldr	r3, [r3, #12]
  425120:	4798      	blx	r3
  425122:	687b      	ldr	r3, [r7, #4]
  425124:	ea25 0503 	bic.w	r5, r5, r3
  425128:	e7ea      	b.n	425100 <pio_handler_process+0x1c>
  42512a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  42512c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  42512e:	bf00      	nop
  425130:	00424f8d 	.word	0x00424f8d
  425134:	00424f91 	.word	0x00424f91
  425138:	20414890 	.word	0x20414890

0042513c <PIOA_Handler>:
  42513c:	b508      	push	{r3, lr}
  42513e:	210a      	movs	r1, #10
  425140:	4801      	ldr	r0, [pc, #4]	; (425148 <PIOA_Handler+0xc>)
  425142:	4b02      	ldr	r3, [pc, #8]	; (42514c <PIOA_Handler+0x10>)
  425144:	4798      	blx	r3
  425146:	bd08      	pop	{r3, pc}
  425148:	400e0e00 	.word	0x400e0e00
  42514c:	004250e5 	.word	0x004250e5

00425150 <PIOB_Handler>:
  425150:	b508      	push	{r3, lr}
  425152:	210b      	movs	r1, #11
  425154:	4801      	ldr	r0, [pc, #4]	; (42515c <PIOB_Handler+0xc>)
  425156:	4b02      	ldr	r3, [pc, #8]	; (425160 <PIOB_Handler+0x10>)
  425158:	4798      	blx	r3
  42515a:	bd08      	pop	{r3, pc}
  42515c:	400e1000 	.word	0x400e1000
  425160:	004250e5 	.word	0x004250e5

00425164 <PIOC_Handler>:
  425164:	b508      	push	{r3, lr}
  425166:	210c      	movs	r1, #12
  425168:	4801      	ldr	r0, [pc, #4]	; (425170 <PIOC_Handler+0xc>)
  42516a:	4b02      	ldr	r3, [pc, #8]	; (425174 <PIOC_Handler+0x10>)
  42516c:	4798      	blx	r3
  42516e:	bd08      	pop	{r3, pc}
  425170:	400e1200 	.word	0x400e1200
  425174:	004250e5 	.word	0x004250e5

00425178 <PIOD_Handler>:
  425178:	b508      	push	{r3, lr}
  42517a:	2110      	movs	r1, #16
  42517c:	4801      	ldr	r0, [pc, #4]	; (425184 <PIOD_Handler+0xc>)
  42517e:	4b02      	ldr	r3, [pc, #8]	; (425188 <PIOD_Handler+0x10>)
  425180:	4798      	blx	r3
  425182:	bd08      	pop	{r3, pc}
  425184:	400e1400 	.word	0x400e1400
  425188:	004250e5 	.word	0x004250e5

0042518c <PIOE_Handler>:
  42518c:	b508      	push	{r3, lr}
  42518e:	2111      	movs	r1, #17
  425190:	4801      	ldr	r0, [pc, #4]	; (425198 <PIOE_Handler+0xc>)
  425192:	4b02      	ldr	r3, [pc, #8]	; (42519c <PIOE_Handler+0x10>)
  425194:	4798      	blx	r3
  425196:	bd08      	pop	{r3, pc}
  425198:	400e1600 	.word	0x400e1600
  42519c:	004250e5 	.word	0x004250e5

004251a0 <pmc_mck_set_division>:
  4251a0:	2803      	cmp	r0, #3
  4251a2:	d010      	beq.n	4251c6 <pmc_mck_set_division+0x26>
  4251a4:	2804      	cmp	r0, #4
  4251a6:	d011      	beq.n	4251cc <pmc_mck_set_division+0x2c>
  4251a8:	2802      	cmp	r0, #2
  4251aa:	d012      	beq.n	4251d2 <pmc_mck_set_division+0x32>
  4251ac:	2300      	movs	r3, #0
  4251ae:	490a      	ldr	r1, [pc, #40]	; (4251d8 <pmc_mck_set_division+0x38>)
  4251b0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4251b2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  4251b6:	4313      	orrs	r3, r2
  4251b8:	630b      	str	r3, [r1, #48]	; 0x30
  4251ba:	4b07      	ldr	r3, [pc, #28]	; (4251d8 <pmc_mck_set_division+0x38>)
  4251bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4251be:	f013 0f08 	tst.w	r3, #8
  4251c2:	d0fa      	beq.n	4251ba <pmc_mck_set_division+0x1a>
  4251c4:	4770      	bx	lr
  4251c6:	f44f 7340 	mov.w	r3, #768	; 0x300
  4251ca:	e7f0      	b.n	4251ae <pmc_mck_set_division+0xe>
  4251cc:	f44f 7300 	mov.w	r3, #512	; 0x200
  4251d0:	e7ed      	b.n	4251ae <pmc_mck_set_division+0xe>
  4251d2:	f44f 7380 	mov.w	r3, #256	; 0x100
  4251d6:	e7ea      	b.n	4251ae <pmc_mck_set_division+0xe>
  4251d8:	400e0600 	.word	0x400e0600

004251dc <pmc_switch_mck_to_pllack>:
  4251dc:	4a13      	ldr	r2, [pc, #76]	; (42522c <pmc_switch_mck_to_pllack+0x50>)
  4251de:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4251e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4251e4:	4318      	orrs	r0, r3
  4251e6:	6310      	str	r0, [r2, #48]	; 0x30
  4251e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4251ec:	4a0f      	ldr	r2, [pc, #60]	; (42522c <pmc_switch_mck_to_pllack+0x50>)
  4251ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
  4251f0:	f012 0f08 	tst.w	r2, #8
  4251f4:	d102      	bne.n	4251fc <pmc_switch_mck_to_pllack+0x20>
  4251f6:	b1a3      	cbz	r3, 425222 <pmc_switch_mck_to_pllack+0x46>
  4251f8:	3b01      	subs	r3, #1
  4251fa:	e7f7      	b.n	4251ec <pmc_switch_mck_to_pllack+0x10>
  4251fc:	4a0b      	ldr	r2, [pc, #44]	; (42522c <pmc_switch_mck_to_pllack+0x50>)
  4251fe:	6b13      	ldr	r3, [r2, #48]	; 0x30
  425200:	f023 0303 	bic.w	r3, r3, #3
  425204:	f043 0302 	orr.w	r3, r3, #2
  425208:	6313      	str	r3, [r2, #48]	; 0x30
  42520a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  42520e:	4a07      	ldr	r2, [pc, #28]	; (42522c <pmc_switch_mck_to_pllack+0x50>)
  425210:	6e92      	ldr	r2, [r2, #104]	; 0x68
  425212:	f012 0f08 	tst.w	r2, #8
  425216:	d102      	bne.n	42521e <pmc_switch_mck_to_pllack+0x42>
  425218:	b12b      	cbz	r3, 425226 <pmc_switch_mck_to_pllack+0x4a>
  42521a:	3b01      	subs	r3, #1
  42521c:	e7f7      	b.n	42520e <pmc_switch_mck_to_pllack+0x32>
  42521e:	2000      	movs	r0, #0
  425220:	4770      	bx	lr
  425222:	2001      	movs	r0, #1
  425224:	4770      	bx	lr
  425226:	2001      	movs	r0, #1
  425228:	4770      	bx	lr
  42522a:	bf00      	nop
  42522c:	400e0600 	.word	0x400e0600

00425230 <pmc_switch_mainck_to_xtal>:
  425230:	b9a0      	cbnz	r0, 42525c <pmc_switch_mainck_to_xtal+0x2c>
  425232:	4a0e      	ldr	r2, [pc, #56]	; (42526c <pmc_switch_mainck_to_xtal+0x3c>)
  425234:	6a10      	ldr	r0, [r2, #32]
  425236:	4b0e      	ldr	r3, [pc, #56]	; (425270 <pmc_switch_mainck_to_xtal+0x40>)
  425238:	4003      	ands	r3, r0
  42523a:	0209      	lsls	r1, r1, #8
  42523c:	b289      	uxth	r1, r1
  42523e:	4319      	orrs	r1, r3
  425240:	4b0c      	ldr	r3, [pc, #48]	; (425274 <pmc_switch_mainck_to_xtal+0x44>)
  425242:	430b      	orrs	r3, r1
  425244:	6213      	str	r3, [r2, #32]
  425246:	4b09      	ldr	r3, [pc, #36]	; (42526c <pmc_switch_mainck_to_xtal+0x3c>)
  425248:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  42524a:	f013 0f01 	tst.w	r3, #1
  42524e:	d0fa      	beq.n	425246 <pmc_switch_mainck_to_xtal+0x16>
  425250:	4a06      	ldr	r2, [pc, #24]	; (42526c <pmc_switch_mainck_to_xtal+0x3c>)
  425252:	6a11      	ldr	r1, [r2, #32]
  425254:	4b08      	ldr	r3, [pc, #32]	; (425278 <pmc_switch_mainck_to_xtal+0x48>)
  425256:	430b      	orrs	r3, r1
  425258:	6213      	str	r3, [r2, #32]
  42525a:	4770      	bx	lr
  42525c:	4903      	ldr	r1, [pc, #12]	; (42526c <pmc_switch_mainck_to_xtal+0x3c>)
  42525e:	6a0b      	ldr	r3, [r1, #32]
  425260:	4a06      	ldr	r2, [pc, #24]	; (42527c <pmc_switch_mainck_to_xtal+0x4c>)
  425262:	401a      	ands	r2, r3
  425264:	4b06      	ldr	r3, [pc, #24]	; (425280 <pmc_switch_mainck_to_xtal+0x50>)
  425266:	4313      	orrs	r3, r2
  425268:	620b      	str	r3, [r1, #32]
  42526a:	4770      	bx	lr
  42526c:	400e0600 	.word	0x400e0600
  425270:	ffc8fffc 	.word	0xffc8fffc
  425274:	00370001 	.word	0x00370001
  425278:	01370000 	.word	0x01370000
  42527c:	fec8fffc 	.word	0xfec8fffc
  425280:	01370002 	.word	0x01370002

00425284 <pmc_osc_is_ready_mainck>:
  425284:	4b02      	ldr	r3, [pc, #8]	; (425290 <pmc_osc_is_ready_mainck+0xc>)
  425286:	6e98      	ldr	r0, [r3, #104]	; 0x68
  425288:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  42528c:	4770      	bx	lr
  42528e:	bf00      	nop
  425290:	400e0600 	.word	0x400e0600

00425294 <pmc_disable_pllack>:
  425294:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  425298:	4b01      	ldr	r3, [pc, #4]	; (4252a0 <pmc_disable_pllack+0xc>)
  42529a:	629a      	str	r2, [r3, #40]	; 0x28
  42529c:	4770      	bx	lr
  42529e:	bf00      	nop
  4252a0:	400e0600 	.word	0x400e0600

004252a4 <pmc_is_locked_pllack>:
  4252a4:	4b02      	ldr	r3, [pc, #8]	; (4252b0 <pmc_is_locked_pllack+0xc>)
  4252a6:	6e98      	ldr	r0, [r3, #104]	; 0x68
  4252a8:	f000 0002 	and.w	r0, r0, #2
  4252ac:	4770      	bx	lr
  4252ae:	bf00      	nop
  4252b0:	400e0600 	.word	0x400e0600

004252b4 <pmc_enable_periph_clk>:
  4252b4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  4252b8:	4b05      	ldr	r3, [pc, #20]	; (4252d0 <pmc_enable_periph_clk+0x1c>)
  4252ba:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
  4252be:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  4252c2:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
  4252c6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  4252ca:	2000      	movs	r0, #0
  4252cc:	4770      	bx	lr
  4252ce:	bf00      	nop
  4252d0:	400e0600 	.word	0x400e0600

004252d4 <spi_enable_clock>:
  4252d4:	b508      	push	{r3, lr}
  4252d6:	4b07      	ldr	r3, [pc, #28]	; (4252f4 <spi_enable_clock+0x20>)
  4252d8:	4298      	cmp	r0, r3
  4252da:	d003      	beq.n	4252e4 <spi_enable_clock+0x10>
  4252dc:	4b06      	ldr	r3, [pc, #24]	; (4252f8 <spi_enable_clock+0x24>)
  4252de:	4298      	cmp	r0, r3
  4252e0:	d004      	beq.n	4252ec <spi_enable_clock+0x18>
  4252e2:	bd08      	pop	{r3, pc}
  4252e4:	2015      	movs	r0, #21
  4252e6:	4b05      	ldr	r3, [pc, #20]	; (4252fc <spi_enable_clock+0x28>)
  4252e8:	4798      	blx	r3
  4252ea:	bd08      	pop	{r3, pc}
  4252ec:	202a      	movs	r0, #42	; 0x2a
  4252ee:	4b03      	ldr	r3, [pc, #12]	; (4252fc <spi_enable_clock+0x28>)
  4252f0:	4798      	blx	r3
  4252f2:	e7f6      	b.n	4252e2 <spi_enable_clock+0xe>
  4252f4:	40008000 	.word	0x40008000
  4252f8:	40058000 	.word	0x40058000
  4252fc:	004252b5 	.word	0x004252b5

00425300 <spi_set_peripheral_chip_select_value>:
  425300:	6843      	ldr	r3, [r0, #4]
  425302:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  425306:	6043      	str	r3, [r0, #4]
  425308:	6843      	ldr	r3, [r0, #4]
  42530a:	0409      	lsls	r1, r1, #16
  42530c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  425310:	430b      	orrs	r3, r1
  425312:	6043      	str	r3, [r0, #4]
  425314:	4770      	bx	lr

00425316 <spi_set_delay_between_chip_select>:
  425316:	6843      	ldr	r3, [r0, #4]
  425318:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  42531c:	6043      	str	r3, [r0, #4]
  42531e:	6843      	ldr	r3, [r0, #4]
  425320:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  425324:	6041      	str	r1, [r0, #4]
  425326:	4770      	bx	lr

00425328 <spi_set_clock_polarity>:
  425328:	b93a      	cbnz	r2, 42533a <spi_set_clock_polarity+0x12>
  42532a:	310c      	adds	r1, #12
  42532c:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  425330:	f023 0301 	bic.w	r3, r3, #1
  425334:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  425338:	4770      	bx	lr
  42533a:	310c      	adds	r1, #12
  42533c:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  425340:	f043 0301 	orr.w	r3, r3, #1
  425344:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  425348:	4770      	bx	lr

0042534a <spi_set_clock_phase>:
  42534a:	b93a      	cbnz	r2, 42535c <spi_set_clock_phase+0x12>
  42534c:	310c      	adds	r1, #12
  42534e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  425352:	f023 0302 	bic.w	r3, r3, #2
  425356:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  42535a:	4770      	bx	lr
  42535c:	310c      	adds	r1, #12
  42535e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  425362:	f043 0302 	orr.w	r3, r3, #2
  425366:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  42536a:	4770      	bx	lr

0042536c <spi_configure_cs_behavior>:
  42536c:	2a04      	cmp	r2, #4
  42536e:	d003      	beq.n	425378 <spi_configure_cs_behavior+0xc>
  425370:	b182      	cbz	r2, 425394 <spi_configure_cs_behavior+0x28>
  425372:	2a08      	cmp	r2, #8
  425374:	d01c      	beq.n	4253b0 <spi_configure_cs_behavior+0x44>
  425376:	4770      	bx	lr
  425378:	310c      	adds	r1, #12
  42537a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  42537e:	f023 0308 	bic.w	r3, r3, #8
  425382:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  425386:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  42538a:	f043 0304 	orr.w	r3, r3, #4
  42538e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  425392:	4770      	bx	lr
  425394:	310c      	adds	r1, #12
  425396:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  42539a:	f023 0308 	bic.w	r3, r3, #8
  42539e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  4253a2:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  4253a6:	f023 0304 	bic.w	r3, r3, #4
  4253aa:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  4253ae:	4770      	bx	lr
  4253b0:	310c      	adds	r1, #12
  4253b2:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  4253b6:	f043 0308 	orr.w	r3, r3, #8
  4253ba:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  4253be:	e7da      	b.n	425376 <spi_configure_cs_behavior+0xa>

004253c0 <spi_set_bits_per_transfer>:
  4253c0:	310c      	adds	r1, #12
  4253c2:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  4253c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  4253ca:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  4253ce:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  4253d2:	431a      	orrs	r2, r3
  4253d4:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
  4253d8:	4770      	bx	lr

004253da <spi_calc_baudrate_div>:
  4253da:	4401      	add	r1, r0
  4253dc:	3901      	subs	r1, #1
  4253de:	fbb1 f0f0 	udiv	r0, r1, r0
  4253e2:	1e43      	subs	r3, r0, #1
  4253e4:	2bfe      	cmp	r3, #254	; 0xfe
  4253e6:	d801      	bhi.n	4253ec <spi_calc_baudrate_div+0x12>
  4253e8:	b200      	sxth	r0, r0
  4253ea:	4770      	bx	lr
  4253ec:	f04f 30ff 	mov.w	r0, #4294967295
  4253f0:	4770      	bx	lr

004253f2 <spi_set_baudrate_div>:
  4253f2:	b192      	cbz	r2, 42541a <spi_set_baudrate_div+0x28>
  4253f4:	b410      	push	{r4}
  4253f6:	4614      	mov	r4, r2
  4253f8:	310c      	adds	r1, #12
  4253fa:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  4253fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  425402:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  425406:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
  42540a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  42540e:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
  425412:	2000      	movs	r0, #0
  425414:	f85d 4b04 	ldr.w	r4, [sp], #4
  425418:	4770      	bx	lr
  42541a:	f04f 30ff 	mov.w	r0, #4294967295
  42541e:	4770      	bx	lr

00425420 <spi_set_transfer_delay>:
  425420:	b410      	push	{r4}
  425422:	310c      	adds	r1, #12
  425424:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  425428:	b2a4      	uxth	r4, r4
  42542a:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  42542e:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  425432:	061b      	lsls	r3, r3, #24
  425434:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  425438:	4314      	orrs	r4, r2
  42543a:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  42543e:	f85d 4b04 	ldr.w	r4, [sp], #4
  425442:	4770      	bx	lr

00425444 <uart_write>:
  425444:	6943      	ldr	r3, [r0, #20]
  425446:	f013 0f02 	tst.w	r3, #2
  42544a:	d002      	beq.n	425452 <uart_write+0xe>
  42544c:	61c1      	str	r1, [r0, #28]
  42544e:	2000      	movs	r0, #0
  425450:	4770      	bx	lr
  425452:	2001      	movs	r0, #1
  425454:	4770      	bx	lr

00425456 <uart_read>:
  425456:	6943      	ldr	r3, [r0, #20]
  425458:	f013 0f01 	tst.w	r3, #1
  42545c:	d003      	beq.n	425466 <uart_read+0x10>
  42545e:	6983      	ldr	r3, [r0, #24]
  425460:	700b      	strb	r3, [r1, #0]
  425462:	2000      	movs	r0, #0
  425464:	4770      	bx	lr
  425466:	2001      	movs	r0, #1
  425468:	4770      	bx	lr

0042546a <usart_set_async_baudrate>:
  42546a:	b430      	push	{r4, r5}
  42546c:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
  425470:	d317      	bcc.n	4254a2 <usart_set_async_baudrate+0x38>
  425472:	2410      	movs	r4, #16
  425474:	fb01 f104 	mul.w	r1, r1, r4
  425478:	084b      	lsrs	r3, r1, #1
  42547a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  42547e:	fbb2 f2f1 	udiv	r2, r2, r1
  425482:	08d3      	lsrs	r3, r2, #3
  425484:	1e5d      	subs	r5, r3, #1
  425486:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  42548a:	428d      	cmp	r5, r1
  42548c:	d810      	bhi.n	4254b0 <usart_set_async_baudrate+0x46>
  42548e:	2c08      	cmp	r4, #8
  425490:	d009      	beq.n	4254a6 <usart_set_async_baudrate+0x3c>
  425492:	0412      	lsls	r2, r2, #16
  425494:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  425498:	431a      	orrs	r2, r3
  42549a:	6202      	str	r2, [r0, #32]
  42549c:	2000      	movs	r0, #0
  42549e:	bc30      	pop	{r4, r5}
  4254a0:	4770      	bx	lr
  4254a2:	2408      	movs	r4, #8
  4254a4:	e7e6      	b.n	425474 <usart_set_async_baudrate+0xa>
  4254a6:	6841      	ldr	r1, [r0, #4]
  4254a8:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  4254ac:	6041      	str	r1, [r0, #4]
  4254ae:	e7f0      	b.n	425492 <usart_set_async_baudrate+0x28>
  4254b0:	2001      	movs	r0, #1
  4254b2:	e7f4      	b.n	42549e <usart_set_async_baudrate+0x34>

004254b4 <usart_enable_tx>:
  4254b4:	2340      	movs	r3, #64	; 0x40
  4254b6:	6003      	str	r3, [r0, #0]
  4254b8:	4770      	bx	lr

004254ba <usart_reset_tx>:
  4254ba:	2388      	movs	r3, #136	; 0x88
  4254bc:	6003      	str	r3, [r0, #0]
  4254be:	4770      	bx	lr

004254c0 <usart_enable_rx>:
  4254c0:	2310      	movs	r3, #16
  4254c2:	6003      	str	r3, [r0, #0]
  4254c4:	4770      	bx	lr

004254c6 <usart_reset_rx>:
  4254c6:	2324      	movs	r3, #36	; 0x24
  4254c8:	6003      	str	r3, [r0, #0]
  4254ca:	4770      	bx	lr

004254cc <usart_reset_status>:
  4254cc:	f44f 7380 	mov.w	r3, #256	; 0x100
  4254d0:	6003      	str	r3, [r0, #0]
  4254d2:	4770      	bx	lr

004254d4 <usart_drive_RTS_pin_high>:
  4254d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  4254d8:	6003      	str	r3, [r0, #0]
  4254da:	4770      	bx	lr

004254dc <usart_write>:
  4254dc:	6943      	ldr	r3, [r0, #20]
  4254de:	f013 0f02 	tst.w	r3, #2
  4254e2:	d004      	beq.n	4254ee <usart_write+0x12>
  4254e4:	f3c1 0108 	ubfx	r1, r1, #0, #9
  4254e8:	61c1      	str	r1, [r0, #28]
  4254ea:	2000      	movs	r0, #0
  4254ec:	4770      	bx	lr
  4254ee:	2001      	movs	r0, #1
  4254f0:	4770      	bx	lr

004254f2 <usart_read>:
  4254f2:	6943      	ldr	r3, [r0, #20]
  4254f4:	f013 0f01 	tst.w	r3, #1
  4254f8:	d005      	beq.n	425506 <usart_read+0x14>
  4254fa:	6983      	ldr	r3, [r0, #24]
  4254fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
  425500:	600b      	str	r3, [r1, #0]
  425502:	2000      	movs	r0, #0
  425504:	4770      	bx	lr
  425506:	2001      	movs	r0, #1
  425508:	4770      	bx	lr
	...

0042550c <usart_disable_writeprotect>:
  42550c:	4b01      	ldr	r3, [pc, #4]	; (425514 <usart_disable_writeprotect+0x8>)
  42550e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
  425512:	4770      	bx	lr
  425514:	55534100 	.word	0x55534100

00425518 <usart_reset>:
  425518:	b510      	push	{r4, lr}
  42551a:	4604      	mov	r4, r0
  42551c:	4b09      	ldr	r3, [pc, #36]	; (425544 <usart_reset+0x2c>)
  42551e:	4798      	blx	r3
  425520:	2300      	movs	r3, #0
  425522:	6063      	str	r3, [r4, #4]
  425524:	6263      	str	r3, [r4, #36]	; 0x24
  425526:	62a3      	str	r3, [r4, #40]	; 0x28
  425528:	4620      	mov	r0, r4
  42552a:	4b07      	ldr	r3, [pc, #28]	; (425548 <usart_reset+0x30>)
  42552c:	4798      	blx	r3
  42552e:	4620      	mov	r0, r4
  425530:	4b06      	ldr	r3, [pc, #24]	; (42554c <usart_reset+0x34>)
  425532:	4798      	blx	r3
  425534:	4620      	mov	r0, r4
  425536:	4b06      	ldr	r3, [pc, #24]	; (425550 <usart_reset+0x38>)
  425538:	4798      	blx	r3
  42553a:	4620      	mov	r0, r4
  42553c:	4b05      	ldr	r3, [pc, #20]	; (425554 <usart_reset+0x3c>)
  42553e:	4798      	blx	r3
  425540:	bd10      	pop	{r4, pc}
  425542:	bf00      	nop
  425544:	0042550d 	.word	0x0042550d
  425548:	004254bb 	.word	0x004254bb
  42554c:	004254c7 	.word	0x004254c7
  425550:	004254cd 	.word	0x004254cd
  425554:	004254d5 	.word	0x004254d5

00425558 <usart_init_rs232>:
  425558:	b570      	push	{r4, r5, r6, lr}
  42555a:	4605      	mov	r5, r0
  42555c:	460c      	mov	r4, r1
  42555e:	4616      	mov	r6, r2
  425560:	4b10      	ldr	r3, [pc, #64]	; (4255a4 <usart_init_rs232+0x4c>)
  425562:	4798      	blx	r3
  425564:	2200      	movs	r2, #0
  425566:	4b10      	ldr	r3, [pc, #64]	; (4255a8 <usart_init_rs232+0x50>)
  425568:	601a      	str	r2, [r3, #0]
  42556a:	b1b4      	cbz	r4, 42559a <usart_init_rs232+0x42>
  42556c:	4632      	mov	r2, r6
  42556e:	6821      	ldr	r1, [r4, #0]
  425570:	4628      	mov	r0, r5
  425572:	4b0e      	ldr	r3, [pc, #56]	; (4255ac <usart_init_rs232+0x54>)
  425574:	4798      	blx	r3
  425576:	4602      	mov	r2, r0
  425578:	b988      	cbnz	r0, 42559e <usart_init_rs232+0x46>
  42557a:	6863      	ldr	r3, [r4, #4]
  42557c:	68a1      	ldr	r1, [r4, #8]
  42557e:	430b      	orrs	r3, r1
  425580:	6921      	ldr	r1, [r4, #16]
  425582:	430b      	orrs	r3, r1
  425584:	68e1      	ldr	r1, [r4, #12]
  425586:	430b      	orrs	r3, r1
  425588:	4907      	ldr	r1, [pc, #28]	; (4255a8 <usart_init_rs232+0x50>)
  42558a:	6808      	ldr	r0, [r1, #0]
  42558c:	4303      	orrs	r3, r0
  42558e:	600b      	str	r3, [r1, #0]
  425590:	6869      	ldr	r1, [r5, #4]
  425592:	430b      	orrs	r3, r1
  425594:	606b      	str	r3, [r5, #4]
  425596:	4610      	mov	r0, r2
  425598:	bd70      	pop	{r4, r5, r6, pc}
  42559a:	2201      	movs	r2, #1
  42559c:	e7fb      	b.n	425596 <usart_init_rs232+0x3e>
  42559e:	2201      	movs	r2, #1
  4255a0:	e7f9      	b.n	425596 <usart_init_rs232+0x3e>
  4255a2:	bf00      	nop
  4255a4:	00425519 	.word	0x00425519
  4255a8:	20414900 	.word	0x20414900
  4255ac:	0042546b 	.word	0x0042546b

004255b0 <Dummy_Handler>:
  4255b0:	e7fe      	b.n	4255b0 <Dummy_Handler>
	...

004255b4 <Reset_Handler>:
  4255b4:	b500      	push	{lr}
  4255b6:	b083      	sub	sp, #12
  4255b8:	4b1e      	ldr	r3, [pc, #120]	; (425634 <Reset_Handler+0x80>)
  4255ba:	4a1f      	ldr	r2, [pc, #124]	; (425638 <Reset_Handler+0x84>)
  4255bc:	429a      	cmp	r2, r3
  4255be:	d009      	beq.n	4255d4 <Reset_Handler+0x20>
  4255c0:	4b1c      	ldr	r3, [pc, #112]	; (425634 <Reset_Handler+0x80>)
  4255c2:	4a1d      	ldr	r2, [pc, #116]	; (425638 <Reset_Handler+0x84>)
  4255c4:	e003      	b.n	4255ce <Reset_Handler+0x1a>
  4255c6:	6811      	ldr	r1, [r2, #0]
  4255c8:	6019      	str	r1, [r3, #0]
  4255ca:	3304      	adds	r3, #4
  4255cc:	3204      	adds	r2, #4
  4255ce:	491b      	ldr	r1, [pc, #108]	; (42563c <Reset_Handler+0x88>)
  4255d0:	428b      	cmp	r3, r1
  4255d2:	d3f8      	bcc.n	4255c6 <Reset_Handler+0x12>
  4255d4:	4b1a      	ldr	r3, [pc, #104]	; (425640 <Reset_Handler+0x8c>)
  4255d6:	e002      	b.n	4255de <Reset_Handler+0x2a>
  4255d8:	2200      	movs	r2, #0
  4255da:	601a      	str	r2, [r3, #0]
  4255dc:	3304      	adds	r3, #4
  4255de:	4a19      	ldr	r2, [pc, #100]	; (425644 <Reset_Handler+0x90>)
  4255e0:	4293      	cmp	r3, r2
  4255e2:	d3f9      	bcc.n	4255d8 <Reset_Handler+0x24>
  4255e4:	4a18      	ldr	r2, [pc, #96]	; (425648 <Reset_Handler+0x94>)
  4255e6:	4b19      	ldr	r3, [pc, #100]	; (42564c <Reset_Handler+0x98>)
  4255e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4255ec:	6093      	str	r3, [r2, #8]
  4255ee:	f3ef 8310 	mrs	r3, PRIMASK
  4255f2:	fab3 f383 	clz	r3, r3
  4255f6:	095b      	lsrs	r3, r3, #5
  4255f8:	9301      	str	r3, [sp, #4]
  4255fa:	b672      	cpsid	i
  4255fc:	f3bf 8f5f 	dmb	sy
  425600:	2200      	movs	r2, #0
  425602:	4b13      	ldr	r3, [pc, #76]	; (425650 <Reset_Handler+0x9c>)
  425604:	701a      	strb	r2, [r3, #0]
  425606:	9901      	ldr	r1, [sp, #4]
  425608:	4a12      	ldr	r2, [pc, #72]	; (425654 <Reset_Handler+0xa0>)
  42560a:	6813      	ldr	r3, [r2, #0]
  42560c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  425610:	6013      	str	r3, [r2, #0]
  425612:	f3bf 8f4f 	dsb	sy
  425616:	f3bf 8f6f 	isb	sy
  42561a:	b129      	cbz	r1, 425628 <Reset_Handler+0x74>
  42561c:	2201      	movs	r2, #1
  42561e:	4b0c      	ldr	r3, [pc, #48]	; (425650 <Reset_Handler+0x9c>)
  425620:	701a      	strb	r2, [r3, #0]
  425622:	f3bf 8f5f 	dmb	sy
  425626:	b662      	cpsie	i
  425628:	4b0b      	ldr	r3, [pc, #44]	; (425658 <Reset_Handler+0xa4>)
  42562a:	4798      	blx	r3
  42562c:	4b0b      	ldr	r3, [pc, #44]	; (42565c <Reset_Handler+0xa8>)
  42562e:	4798      	blx	r3
  425630:	e7fe      	b.n	425630 <Reset_Handler+0x7c>
  425632:	bf00      	nop
  425634:	20400000 	.word	0x20400000
  425638:	00432170 	.word	0x00432170
  42563c:	20400aa8 	.word	0x20400aa8
  425640:	20400aa8 	.word	0x20400aa8
  425644:	2043a844 	.word	0x2043a844
  425648:	e000ed00 	.word	0xe000ed00
  42564c:	00400000 	.word	0x00400000
  425650:	204000e4 	.word	0x204000e4
  425654:	e000ed88 	.word	0xe000ed88
  425658:	004277ed 	.word	0x004277ed
  42565c:	00426a21 	.word	0x00426a21

00425660 <SystemCoreClockUpdate>:
  425660:	4b3c      	ldr	r3, [pc, #240]	; (425754 <SystemCoreClockUpdate+0xf4>)
  425662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  425664:	f003 0303 	and.w	r3, r3, #3
  425668:	2b01      	cmp	r3, #1
  42566a:	d020      	beq.n	4256ae <SystemCoreClockUpdate+0x4e>
  42566c:	b183      	cbz	r3, 425690 <SystemCoreClockUpdate+0x30>
  42566e:	2b02      	cmp	r3, #2
  425670:	d039      	beq.n	4256e6 <SystemCoreClockUpdate+0x86>
  425672:	4b38      	ldr	r3, [pc, #224]	; (425754 <SystemCoreClockUpdate+0xf4>)
  425674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  425676:	f003 0370 	and.w	r3, r3, #112	; 0x70
  42567a:	2b70      	cmp	r3, #112	; 0x70
  42567c:	d062      	beq.n	425744 <SystemCoreClockUpdate+0xe4>
  42567e:	4b35      	ldr	r3, [pc, #212]	; (425754 <SystemCoreClockUpdate+0xf4>)
  425680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  425682:	f3c2 1202 	ubfx	r2, r2, #4, #3
  425686:	4934      	ldr	r1, [pc, #208]	; (425758 <SystemCoreClockUpdate+0xf8>)
  425688:	680b      	ldr	r3, [r1, #0]
  42568a:	40d3      	lsrs	r3, r2
  42568c:	600b      	str	r3, [r1, #0]
  42568e:	4770      	bx	lr
  425690:	4b32      	ldr	r3, [pc, #200]	; (42575c <SystemCoreClockUpdate+0xfc>)
  425692:	695b      	ldr	r3, [r3, #20]
  425694:	f013 0f80 	tst.w	r3, #128	; 0x80
  425698:	d004      	beq.n	4256a4 <SystemCoreClockUpdate+0x44>
  42569a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  42569e:	4b2e      	ldr	r3, [pc, #184]	; (425758 <SystemCoreClockUpdate+0xf8>)
  4256a0:	601a      	str	r2, [r3, #0]
  4256a2:	e7e6      	b.n	425672 <SystemCoreClockUpdate+0x12>
  4256a4:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  4256a8:	4b2b      	ldr	r3, [pc, #172]	; (425758 <SystemCoreClockUpdate+0xf8>)
  4256aa:	601a      	str	r2, [r3, #0]
  4256ac:	e7e1      	b.n	425672 <SystemCoreClockUpdate+0x12>
  4256ae:	4b29      	ldr	r3, [pc, #164]	; (425754 <SystemCoreClockUpdate+0xf4>)
  4256b0:	6a1b      	ldr	r3, [r3, #32]
  4256b2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4256b6:	d003      	beq.n	4256c0 <SystemCoreClockUpdate+0x60>
  4256b8:	4a29      	ldr	r2, [pc, #164]	; (425760 <SystemCoreClockUpdate+0x100>)
  4256ba:	4b27      	ldr	r3, [pc, #156]	; (425758 <SystemCoreClockUpdate+0xf8>)
  4256bc:	601a      	str	r2, [r3, #0]
  4256be:	e7d8      	b.n	425672 <SystemCoreClockUpdate+0x12>
  4256c0:	4a28      	ldr	r2, [pc, #160]	; (425764 <SystemCoreClockUpdate+0x104>)
  4256c2:	4b25      	ldr	r3, [pc, #148]	; (425758 <SystemCoreClockUpdate+0xf8>)
  4256c4:	601a      	str	r2, [r3, #0]
  4256c6:	4b23      	ldr	r3, [pc, #140]	; (425754 <SystemCoreClockUpdate+0xf4>)
  4256c8:	6a1b      	ldr	r3, [r3, #32]
  4256ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4256ce:	2b10      	cmp	r3, #16
  4256d0:	d005      	beq.n	4256de <SystemCoreClockUpdate+0x7e>
  4256d2:	2b20      	cmp	r3, #32
  4256d4:	d1cd      	bne.n	425672 <SystemCoreClockUpdate+0x12>
  4256d6:	4a22      	ldr	r2, [pc, #136]	; (425760 <SystemCoreClockUpdate+0x100>)
  4256d8:	4b1f      	ldr	r3, [pc, #124]	; (425758 <SystemCoreClockUpdate+0xf8>)
  4256da:	601a      	str	r2, [r3, #0]
  4256dc:	e7c9      	b.n	425672 <SystemCoreClockUpdate+0x12>
  4256de:	4a22      	ldr	r2, [pc, #136]	; (425768 <SystemCoreClockUpdate+0x108>)
  4256e0:	4b1d      	ldr	r3, [pc, #116]	; (425758 <SystemCoreClockUpdate+0xf8>)
  4256e2:	601a      	str	r2, [r3, #0]
  4256e4:	e7c5      	b.n	425672 <SystemCoreClockUpdate+0x12>
  4256e6:	4b1b      	ldr	r3, [pc, #108]	; (425754 <SystemCoreClockUpdate+0xf4>)
  4256e8:	6a1b      	ldr	r3, [r3, #32]
  4256ea:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4256ee:	d016      	beq.n	42571e <SystemCoreClockUpdate+0xbe>
  4256f0:	4a1b      	ldr	r2, [pc, #108]	; (425760 <SystemCoreClockUpdate+0x100>)
  4256f2:	4b19      	ldr	r3, [pc, #100]	; (425758 <SystemCoreClockUpdate+0xf8>)
  4256f4:	601a      	str	r2, [r3, #0]
  4256f6:	4b17      	ldr	r3, [pc, #92]	; (425754 <SystemCoreClockUpdate+0xf4>)
  4256f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4256fa:	f003 0303 	and.w	r3, r3, #3
  4256fe:	2b02      	cmp	r3, #2
  425700:	d1b7      	bne.n	425672 <SystemCoreClockUpdate+0x12>
  425702:	4814      	ldr	r0, [pc, #80]	; (425754 <SystemCoreClockUpdate+0xf4>)
  425704:	6a82      	ldr	r2, [r0, #40]	; 0x28
  425706:	f3c2 420a 	ubfx	r2, r2, #16, #11
  42570a:	4913      	ldr	r1, [pc, #76]	; (425758 <SystemCoreClockUpdate+0xf8>)
  42570c:	680b      	ldr	r3, [r1, #0]
  42570e:	fb02 3303 	mla	r3, r2, r3, r3
  425712:	6a82      	ldr	r2, [r0, #40]	; 0x28
  425714:	b2d2      	uxtb	r2, r2
  425716:	fbb3 f3f2 	udiv	r3, r3, r2
  42571a:	600b      	str	r3, [r1, #0]
  42571c:	e7a9      	b.n	425672 <SystemCoreClockUpdate+0x12>
  42571e:	4a11      	ldr	r2, [pc, #68]	; (425764 <SystemCoreClockUpdate+0x104>)
  425720:	4b0d      	ldr	r3, [pc, #52]	; (425758 <SystemCoreClockUpdate+0xf8>)
  425722:	601a      	str	r2, [r3, #0]
  425724:	4b0b      	ldr	r3, [pc, #44]	; (425754 <SystemCoreClockUpdate+0xf4>)
  425726:	6a1b      	ldr	r3, [r3, #32]
  425728:	f003 0370 	and.w	r3, r3, #112	; 0x70
  42572c:	2b10      	cmp	r3, #16
  42572e:	d005      	beq.n	42573c <SystemCoreClockUpdate+0xdc>
  425730:	2b20      	cmp	r3, #32
  425732:	d1e0      	bne.n	4256f6 <SystemCoreClockUpdate+0x96>
  425734:	4a0a      	ldr	r2, [pc, #40]	; (425760 <SystemCoreClockUpdate+0x100>)
  425736:	4b08      	ldr	r3, [pc, #32]	; (425758 <SystemCoreClockUpdate+0xf8>)
  425738:	601a      	str	r2, [r3, #0]
  42573a:	e7dc      	b.n	4256f6 <SystemCoreClockUpdate+0x96>
  42573c:	4a0a      	ldr	r2, [pc, #40]	; (425768 <SystemCoreClockUpdate+0x108>)
  42573e:	4b06      	ldr	r3, [pc, #24]	; (425758 <SystemCoreClockUpdate+0xf8>)
  425740:	601a      	str	r2, [r3, #0]
  425742:	e7d8      	b.n	4256f6 <SystemCoreClockUpdate+0x96>
  425744:	4a04      	ldr	r2, [pc, #16]	; (425758 <SystemCoreClockUpdate+0xf8>)
  425746:	6813      	ldr	r3, [r2, #0]
  425748:	4908      	ldr	r1, [pc, #32]	; (42576c <SystemCoreClockUpdate+0x10c>)
  42574a:	fba1 1303 	umull	r1, r3, r1, r3
  42574e:	085b      	lsrs	r3, r3, #1
  425750:	6013      	str	r3, [r2, #0]
  425752:	4770      	bx	lr
  425754:	400e0600 	.word	0x400e0600
  425758:	204000e8 	.word	0x204000e8
  42575c:	400e1810 	.word	0x400e1810
  425760:	00b71b00 	.word	0x00b71b00
  425764:	003d0900 	.word	0x003d0900
  425768:	007a1200 	.word	0x007a1200
  42576c:	aaaaaaab 	.word	0xaaaaaaab

00425770 <system_init_flash>:
  425770:	4b17      	ldr	r3, [pc, #92]	; (4257d0 <system_init_flash+0x60>)
  425772:	4298      	cmp	r0, r3
  425774:	d912      	bls.n	42579c <system_init_flash+0x2c>
  425776:	4b17      	ldr	r3, [pc, #92]	; (4257d4 <system_init_flash+0x64>)
  425778:	4298      	cmp	r0, r3
  42577a:	d914      	bls.n	4257a6 <system_init_flash+0x36>
  42577c:	4b16      	ldr	r3, [pc, #88]	; (4257d8 <system_init_flash+0x68>)
  42577e:	4298      	cmp	r0, r3
  425780:	d915      	bls.n	4257ae <system_init_flash+0x3e>
  425782:	4b16      	ldr	r3, [pc, #88]	; (4257dc <system_init_flash+0x6c>)
  425784:	4298      	cmp	r0, r3
  425786:	d916      	bls.n	4257b6 <system_init_flash+0x46>
  425788:	4b15      	ldr	r3, [pc, #84]	; (4257e0 <system_init_flash+0x70>)
  42578a:	4298      	cmp	r0, r3
  42578c:	d917      	bls.n	4257be <system_init_flash+0x4e>
  42578e:	4b15      	ldr	r3, [pc, #84]	; (4257e4 <system_init_flash+0x74>)
  425790:	4298      	cmp	r0, r3
  425792:	d919      	bls.n	4257c8 <system_init_flash+0x58>
  425794:	4a14      	ldr	r2, [pc, #80]	; (4257e8 <system_init_flash+0x78>)
  425796:	4b15      	ldr	r3, [pc, #84]	; (4257ec <system_init_flash+0x7c>)
  425798:	601a      	str	r2, [r3, #0]
  42579a:	4770      	bx	lr
  42579c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4257a0:	4b12      	ldr	r3, [pc, #72]	; (4257ec <system_init_flash+0x7c>)
  4257a2:	601a      	str	r2, [r3, #0]
  4257a4:	4770      	bx	lr
  4257a6:	4a12      	ldr	r2, [pc, #72]	; (4257f0 <system_init_flash+0x80>)
  4257a8:	4b10      	ldr	r3, [pc, #64]	; (4257ec <system_init_flash+0x7c>)
  4257aa:	601a      	str	r2, [r3, #0]
  4257ac:	4770      	bx	lr
  4257ae:	4a11      	ldr	r2, [pc, #68]	; (4257f4 <system_init_flash+0x84>)
  4257b0:	4b0e      	ldr	r3, [pc, #56]	; (4257ec <system_init_flash+0x7c>)
  4257b2:	601a      	str	r2, [r3, #0]
  4257b4:	4770      	bx	lr
  4257b6:	4a10      	ldr	r2, [pc, #64]	; (4257f8 <system_init_flash+0x88>)
  4257b8:	4b0c      	ldr	r3, [pc, #48]	; (4257ec <system_init_flash+0x7c>)
  4257ba:	601a      	str	r2, [r3, #0]
  4257bc:	4770      	bx	lr
  4257be:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4257c2:	4b0a      	ldr	r3, [pc, #40]	; (4257ec <system_init_flash+0x7c>)
  4257c4:	601a      	str	r2, [r3, #0]
  4257c6:	4770      	bx	lr
  4257c8:	4a0c      	ldr	r2, [pc, #48]	; (4257fc <system_init_flash+0x8c>)
  4257ca:	4b08      	ldr	r3, [pc, #32]	; (4257ec <system_init_flash+0x7c>)
  4257cc:	601a      	str	r2, [r3, #0]
  4257ce:	4770      	bx	lr
  4257d0:	015ef3bf 	.word	0x015ef3bf
  4257d4:	02bde77f 	.word	0x02bde77f
  4257d8:	041cdb3f 	.word	0x041cdb3f
  4257dc:	057bceff 	.word	0x057bceff
  4257e0:	06dac2bf 	.word	0x06dac2bf
  4257e4:	0839b67f 	.word	0x0839b67f
  4257e8:	04000600 	.word	0x04000600
  4257ec:	400e0c00 	.word	0x400e0c00
  4257f0:	04000100 	.word	0x04000100
  4257f4:	04000200 	.word	0x04000200
  4257f8:	04000300 	.word	0x04000300
  4257fc:	04000500 	.word	0x04000500

00425800 <_sbrk>:
  425800:	4b0a      	ldr	r3, [pc, #40]	; (42582c <_sbrk+0x2c>)
  425802:	681b      	ldr	r3, [r3, #0]
  425804:	b153      	cbz	r3, 42581c <_sbrk+0x1c>
  425806:	4b09      	ldr	r3, [pc, #36]	; (42582c <_sbrk+0x2c>)
  425808:	681b      	ldr	r3, [r3, #0]
  42580a:	181a      	adds	r2, r3, r0
  42580c:	4908      	ldr	r1, [pc, #32]	; (425830 <_sbrk+0x30>)
  42580e:	4291      	cmp	r1, r2
  425810:	db08      	blt.n	425824 <_sbrk+0x24>
  425812:	4610      	mov	r0, r2
  425814:	4a05      	ldr	r2, [pc, #20]	; (42582c <_sbrk+0x2c>)
  425816:	6010      	str	r0, [r2, #0]
  425818:	4618      	mov	r0, r3
  42581a:	4770      	bx	lr
  42581c:	4a05      	ldr	r2, [pc, #20]	; (425834 <_sbrk+0x34>)
  42581e:	4b03      	ldr	r3, [pc, #12]	; (42582c <_sbrk+0x2c>)
  425820:	601a      	str	r2, [r3, #0]
  425822:	e7f0      	b.n	425806 <_sbrk+0x6>
  425824:	f04f 30ff 	mov.w	r0, #4294967295
  425828:	4770      	bx	lr
  42582a:	bf00      	nop
  42582c:	20414904 	.word	0x20414904
  425830:	2045fffc 	.word	0x2045fffc
  425834:	2043ca48 	.word	0x2043ca48

00425838 <_close>:
  425838:	f04f 30ff 	mov.w	r0, #4294967295
  42583c:	4770      	bx	lr

0042583e <_fstat>:
  42583e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  425842:	604b      	str	r3, [r1, #4]
  425844:	2000      	movs	r0, #0
  425846:	4770      	bx	lr

00425848 <_isatty>:
  425848:	2001      	movs	r0, #1
  42584a:	4770      	bx	lr

0042584c <_lseek>:
  42584c:	2000      	movs	r0, #0
  42584e:	4770      	bx	lr

00425850 <event_handlerSalvar>:
		} else if(evt == LV_EVENT_VALUE_CHANGED) {
		/* A button was clicked */
		lv_msgbox_start_auto_close(mbox1, 0);
	}
}
static void event_handlerSalvar(lv_obj_t * obj, lv_event_t event) {
  425850:	b508      	push	{r3, lr}
	if(event == LV_EVENT_CLICKED) {
  425852:	2906      	cmp	r1, #6
  425854:	d002      	beq.n	42585c <event_handlerSalvar+0xc>
		printf("Clicked\n");
		salvar=1;
	}
	else if(event == LV_EVENT_VALUE_CHANGED) {
  425856:	2910      	cmp	r1, #16
  425858:	d007      	beq.n	42586a <event_handlerSalvar+0x1a>
  42585a:	bd08      	pop	{r3, pc}
		printf("Clicked\n");
  42585c:	4806      	ldr	r0, [pc, #24]	; (425878 <event_handlerSalvar+0x28>)
  42585e:	4b07      	ldr	r3, [pc, #28]	; (42587c <event_handlerSalvar+0x2c>)
  425860:	4798      	blx	r3
		salvar=1;
  425862:	2201      	movs	r2, #1
  425864:	4b06      	ldr	r3, [pc, #24]	; (425880 <event_handlerSalvar+0x30>)
  425866:	601a      	str	r2, [r3, #0]
  425868:	bd08      	pop	{r3, pc}
		printf("Toggled\n");
  42586a:	4806      	ldr	r0, [pc, #24]	; (425884 <event_handlerSalvar+0x34>)
  42586c:	4b03      	ldr	r3, [pc, #12]	; (42587c <event_handlerSalvar+0x2c>)
  42586e:	4798      	blx	r3
		salvar=1;
  425870:	2201      	movs	r2, #1
  425872:	4b03      	ldr	r3, [pc, #12]	; (425880 <event_handlerSalvar+0x30>)
  425874:	601a      	str	r2, [r3, #0]
	}
}
  425876:	e7f0      	b.n	42585a <event_handlerSalvar+0xa>
  425878:	004315e0 	.word	0x004315e0
  42587c:	0042783d 	.word	0x0042783d
  425880:	2043a168 	.word	0x2043a168
  425884:	004315ec 	.word	0x004315ec

00425888 <event_handler>:
static void event_handler(lv_obj_t * obj, lv_event_t event) {
  425888:	b570      	push	{r4, r5, r6, lr}
	if(event == LV_EVENT_CLICKED) {
  42588a:	2906      	cmp	r1, #6
  42588c:	d002      	beq.n	425894 <event_handler+0xc>
	else if(event == LV_EVENT_VALUE_CHANGED) {
  42588e:	2910      	cmp	r1, #16
  425890:	d015      	beq.n	4258be <event_handler+0x36>
  425892:	bd70      	pop	{r4, r5, r6, pc}
		printf("Clicked\n");
  425894:	480c      	ldr	r0, [pc, #48]	; (4258c8 <event_handler+0x40>)
  425896:	4c0d      	ldr	r4, [pc, #52]	; (4258cc <event_handler+0x44>)
  425898:	47a0      	blx	r4
		hora= lv_spinbox_get_value(spinbox);
  42589a:	4b0d      	ldr	r3, [pc, #52]	; (4258d0 <event_handler+0x48>)
  42589c:	6818      	ldr	r0, [r3, #0]
  42589e:	4d0d      	ldr	r5, [pc, #52]	; (4258d4 <event_handler+0x4c>)
  4258a0:	47a8      	blx	r5
  4258a2:	4e0d      	ldr	r6, [pc, #52]	; (4258d8 <event_handler+0x50>)
  4258a4:	6030      	str	r0, [r6, #0]
		minuto=  lv_spinbox_get_value(spinbox2);
  4258a6:	4b0d      	ldr	r3, [pc, #52]	; (4258dc <event_handler+0x54>)
  4258a8:	6818      	ldr	r0, [r3, #0]
  4258aa:	47a8      	blx	r5
  4258ac:	4d0c      	ldr	r5, [pc, #48]	; (4258e0 <event_handler+0x58>)
  4258ae:	6028      	str	r0, [r5, #0]
		printf("HORA %d", hora);
  4258b0:	6831      	ldr	r1, [r6, #0]
  4258b2:	480c      	ldr	r0, [pc, #48]	; (4258e4 <event_handler+0x5c>)
  4258b4:	47a0      	blx	r4
		printf("MINUTO %d", minuto);
  4258b6:	6829      	ldr	r1, [r5, #0]
  4258b8:	480b      	ldr	r0, [pc, #44]	; (4258e8 <event_handler+0x60>)
  4258ba:	47a0      	blx	r4
  4258bc:	bd70      	pop	{r4, r5, r6, pc}
		printf("Toggled\n");
  4258be:	480b      	ldr	r0, [pc, #44]	; (4258ec <event_handler+0x64>)
  4258c0:	4b02      	ldr	r3, [pc, #8]	; (4258cc <event_handler+0x44>)
  4258c2:	4798      	blx	r3
}
  4258c4:	e7e5      	b.n	425892 <event_handler+0xa>
  4258c6:	bf00      	nop
  4258c8:	004315e0 	.word	0x004315e0
  4258cc:	0042783d 	.word	0x0042783d
  4258d0:	2043a16c 	.word	0x2043a16c
  4258d4:	00424905 	.word	0x00424905
  4258d8:	2043a410 	.word	0x2043a410
  4258dc:	2043a170 	.word	0x2043a170
  4258e0:	2043a408 	.word	0x2043a408
  4258e4:	004315cc 	.word	0x004315cc
  4258e8:	004315d4 	.word	0x004315d4
  4258ec:	004315ec 	.word	0x004315ec

004258f0 <opa_anim>:
		lv_msgbox_start_auto_close(mbox, 0);
	}
}

static void opa_anim(void * bg, lv_anim_value_t v)
{
  4258f0:	b510      	push	{r4, lr}
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  4258f2:	b2cb      	uxtb	r3, r1
  4258f4:	222c      	movs	r2, #44	; 0x2c
  4258f6:	2100      	movs	r1, #0
  4258f8:	4c01      	ldr	r4, [pc, #4]	; (425900 <opa_anim+0x10>)
  4258fa:	47a0      	blx	r4
  4258fc:	bd10      	pop	{r4, pc}
  4258fe:	bf00      	nop
  425900:	00407a81 	.word	0x00407a81

00425904 <event_handler_alarm>:
{
  425904:	b508      	push	{r3, lr}
	if(evt == LV_EVENT_DELETE && obj == mbox1) {
  425906:	2915      	cmp	r1, #21
  425908:	d002      	beq.n	425910 <event_handler_alarm+0xc>
		} else if(evt == LV_EVENT_VALUE_CHANGED) {
  42590a:	2910      	cmp	r1, #16
  42590c:	d00c      	beq.n	425928 <event_handler_alarm+0x24>
  42590e:	bd08      	pop	{r3, pc}
	if(evt == LV_EVENT_DELETE && obj == mbox1) {
  425910:	4b08      	ldr	r3, [pc, #32]	; (425934 <event_handler_alarm+0x30>)
  425912:	681b      	ldr	r3, [r3, #0]
  425914:	4283      	cmp	r3, r0
  425916:	d1f8      	bne.n	42590a <event_handler_alarm+0x6>
		lv_msgbox_start_auto_close(mbox1, 0);
  425918:	2100      	movs	r1, #0
  42591a:	4618      	mov	r0, r3
  42591c:	4b06      	ldr	r3, [pc, #24]	; (425938 <event_handler_alarm+0x34>)
  42591e:	4798      	blx	r3
		mbox1 = NULL; /* happens before object is actually deleted! */
  425920:	2200      	movs	r2, #0
  425922:	4b04      	ldr	r3, [pc, #16]	; (425934 <event_handler_alarm+0x30>)
  425924:	601a      	str	r2, [r3, #0]
  425926:	bd08      	pop	{r3, pc}
		lv_msgbox_start_auto_close(mbox1, 0);
  425928:	2100      	movs	r1, #0
  42592a:	4b02      	ldr	r3, [pc, #8]	; (425934 <event_handler_alarm+0x30>)
  42592c:	6818      	ldr	r0, [r3, #0]
  42592e:	4b02      	ldr	r3, [pc, #8]	; (425938 <event_handler_alarm+0x34>)
  425930:	4798      	blx	r3
}
  425932:	e7ec      	b.n	42590e <event_handler_alarm+0xa>
  425934:	2043a164 	.word	0x2043a164
  425938:	00424809 	.word	0x00424809

0042593c <btn_event_cb>:
	if(evt == LV_EVENT_CLICKED) {
  42593c:	2906      	cmp	r1, #6
  42593e:	d000      	beq.n	425942 <btn_event_cb+0x6>
  425940:	4770      	bx	lr
{
  425942:	b5f0      	push	{r4, r5, r6, r7, lr}
  425944:	b095      	sub	sp, #84	; 0x54
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
    return lv_disp_get_scr_act(lv_disp_get_default());
  425946:	4c2d      	ldr	r4, [pc, #180]	; (4259fc <btn_event_cb+0xc0>)
  425948:	47a0      	blx	r4
  42594a:	4b2d      	ldr	r3, [pc, #180]	; (425a00 <btn_event_cb+0xc4>)
  42594c:	4798      	blx	r3
		lv_obj_t *obj = lv_obj_create(lv_scr_act(), NULL);
  42594e:	2100      	movs	r1, #0
  425950:	4b2c      	ldr	r3, [pc, #176]	; (425a04 <btn_event_cb+0xc8>)
  425952:	4798      	blx	r3
  425954:	4605      	mov	r5, r0
		lv_obj_reset_style_list(obj, LV_OBJ_PART_MAIN);
  425956:	2100      	movs	r1, #0
  425958:	4b2b      	ldr	r3, [pc, #172]	; (425a08 <btn_event_cb+0xcc>)
  42595a:	4798      	blx	r3
		lv_obj_add_style(obj, LV_OBJ_PART_MAIN, &style_modal);
  42595c:	4a2b      	ldr	r2, [pc, #172]	; (425a0c <btn_event_cb+0xd0>)
  42595e:	2100      	movs	r1, #0
  425960:	4628      	mov	r0, r5
  425962:	4b2b      	ldr	r3, [pc, #172]	; (425a10 <btn_event_cb+0xd4>)
  425964:	4798      	blx	r3
		lv_obj_set_pos(obj, 0, 0);
  425966:	2200      	movs	r2, #0
  425968:	4611      	mov	r1, r2
  42596a:	4628      	mov	r0, r5
  42596c:	4b29      	ldr	r3, [pc, #164]	; (425a14 <btn_event_cb+0xd8>)
  42596e:	4798      	blx	r3
		lv_obj_set_size(obj, LV_HOR_RES, LV_VER_RES);
  425970:	47a0      	blx	r4
  425972:	4b29      	ldr	r3, [pc, #164]	; (425a18 <btn_event_cb+0xdc>)
  425974:	4798      	blx	r3
  425976:	4606      	mov	r6, r0
  425978:	47a0      	blx	r4
  42597a:	4b28      	ldr	r3, [pc, #160]	; (425a1c <btn_event_cb+0xe0>)
  42597c:	4798      	blx	r3
  42597e:	4602      	mov	r2, r0
  425980:	4631      	mov	r1, r6
  425982:	4628      	mov	r0, r5
  425984:	4b26      	ldr	r3, [pc, #152]	; (425a20 <btn_event_cb+0xe4>)
  425986:	4798      	blx	r3
		mbox = lv_msgbox_create(obj, NULL);
  425988:	2100      	movs	r1, #0
  42598a:	4628      	mov	r0, r5
  42598c:	4b25      	ldr	r3, [pc, #148]	; (425a24 <btn_event_cb+0xe8>)
  42598e:	4798      	blx	r3
  425990:	4b25      	ldr	r3, [pc, #148]	; (425a28 <btn_event_cb+0xec>)
  425992:	6018      	str	r0, [r3, #0]
		lv_msgbox_add_btns(mbox, btns2);
  425994:	4925      	ldr	r1, [pc, #148]	; (425a2c <btn_event_cb+0xf0>)
  425996:	4b26      	ldr	r3, [pc, #152]	; (425a30 <btn_event_cb+0xf4>)
  425998:	4798      	blx	r3
		if(salvar==1){
  42599a:	4b26      	ldr	r3, [pc, #152]	; (425a34 <btn_event_cb+0xf8>)
  42599c:	681b      	ldr	r3, [r3, #0]
  42599e:	2b01      	cmp	r3, #1
  4259a0:	d01e      	beq.n	4259e0 <btn_event_cb+0xa4>
		lv_obj_align(mbox, NULL, LV_ALIGN_CENTER, 0, 0);
  4259a2:	4e21      	ldr	r6, [pc, #132]	; (425a28 <btn_event_cb+0xec>)
  4259a4:	2400      	movs	r4, #0
  4259a6:	9400      	str	r4, [sp, #0]
  4259a8:	4623      	mov	r3, r4
  4259aa:	4622      	mov	r2, r4
  4259ac:	4621      	mov	r1, r4
  4259ae:	6830      	ldr	r0, [r6, #0]
  4259b0:	4f21      	ldr	r7, [pc, #132]	; (425a38 <btn_event_cb+0xfc>)
  4259b2:	47b8      	blx	r7
		lv_obj_set_event_cb(mbox, mbox_event_cb);
  4259b4:	4921      	ldr	r1, [pc, #132]	; (425a3c <btn_event_cb+0x100>)
  4259b6:	6830      	ldr	r0, [r6, #0]
  4259b8:	4b21      	ldr	r3, [pc, #132]	; (425a40 <btn_event_cb+0x104>)
  4259ba:	4798      	blx	r3
		lv_anim_init(&a);
  4259bc:	a803      	add	r0, sp, #12
  4259be:	4b21      	ldr	r3, [pc, #132]	; (425a44 <btn_event_cb+0x108>)
  4259c0:	4798      	blx	r3
    a->var     = var;
  4259c2:	9503      	str	r5, [sp, #12]
    a->time     = duration;
  4259c4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  4259c8:	930c      	str	r3, [sp, #48]	; 0x30
    a->start = start;
  4259ca:	9409      	str	r4, [sp, #36]	; 0x24
    a->current = start;
  4259cc:	940a      	str	r4, [sp, #40]	; 0x28
    a->end   = end;
  4259ce:	237f      	movs	r3, #127	; 0x7f
  4259d0:	930b      	str	r3, [sp, #44]	; 0x2c
    a->exec_cb = exec_cb;
  4259d2:	4b1d      	ldr	r3, [pc, #116]	; (425a48 <btn_event_cb+0x10c>)
  4259d4:	9304      	str	r3, [sp, #16]
		lv_anim_start(&a);
  4259d6:	a803      	add	r0, sp, #12
  4259d8:	4b1c      	ldr	r3, [pc, #112]	; (425a4c <btn_event_cb+0x110>)
  4259da:	4798      	blx	r3
}
  4259dc:	b015      	add	sp, #84	; 0x54
  4259de:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printf("EU ENTREIII");
  4259e0:	481b      	ldr	r0, [pc, #108]	; (425a50 <btn_event_cb+0x114>)
  4259e2:	4b1c      	ldr	r3, [pc, #112]	; (425a54 <btn_event_cb+0x118>)
  4259e4:	4798      	blx	r3
			lv_msgbox_set_text_fmt(mbox, "Batimentos: %d Oxigenio: %d", valorBpm,oxi);
  4259e6:	4b1c      	ldr	r3, [pc, #112]	; (425a58 <btn_event_cb+0x11c>)
  4259e8:	681a      	ldr	r2, [r3, #0]
  4259ea:	4b1c      	ldr	r3, [pc, #112]	; (425a5c <btn_event_cb+0x120>)
  4259ec:	681b      	ldr	r3, [r3, #0]
  4259ee:	491c      	ldr	r1, [pc, #112]	; (425a60 <btn_event_cb+0x124>)
  4259f0:	480d      	ldr	r0, [pc, #52]	; (425a28 <btn_event_cb+0xec>)
  4259f2:	6800      	ldr	r0, [r0, #0]
  4259f4:	4c1b      	ldr	r4, [pc, #108]	; (425a64 <btn_event_cb+0x128>)
  4259f6:	47a0      	blx	r4
  4259f8:	e7d3      	b.n	4259a2 <btn_event_cb+0x66>
  4259fa:	bf00      	nop
  4259fc:	00414d95 	.word	0x00414d95
  425a00:	00403659 	.word	0x00403659
  425a04:	00406855 	.word	0x00406855
  425a08:	004079e1 	.word	0x004079e1
  425a0c:	2043a174 	.word	0x2043a174
  425a10:	004079a1 	.word	0x004079a1
  425a14:	0040607d 	.word	0x0040607d
  425a18:	00414da1 	.word	0x00414da1
  425a1c:	00414dd1 	.word	0x00414dd1
  425a20:	00406c79 	.word	0x00406c79
  425a24:	004243b5 	.word	0x004243b5
  425a28:	2043a160 	.word	0x2043a160
  425a2c:	204000f4 	.word	0x204000f4
  425a30:	004245b5 	.word	0x004245b5
  425a34:	2043a168 	.word	0x2043a168
  425a38:	00406241 	.word	0x00406241
  425a3c:	00425a69 	.word	0x00425a69
  425a40:	004057e9 	.word	0x004057e9
  425a44:	0041543d 	.word	0x0041543d
  425a48:	004258f1 	.word	0x004258f1
  425a4c:	004154f5 	.word	0x004154f5
  425a50:	0042fedc 	.word	0x0042fedc
  425a54:	0042783d 	.word	0x0042783d
  425a58:	2043a41c 	.word	0x2043a41c
  425a5c:	2043a818 	.word	0x2043a818
  425a60:	0042fee8 	.word	0x0042fee8
  425a64:	004246e9 	.word	0x004246e9

00425a68 <mbox_event_cb>:
{
  425a68:	b508      	push	{r3, lr}
	if(evt == LV_EVENT_DELETE && obj == mbox) {
  425a6a:	2915      	cmp	r1, #21
  425a6c:	d002      	beq.n	425a74 <mbox_event_cb+0xc>
		} else if(evt == LV_EVENT_VALUE_CHANGED) {
  425a6e:	2910      	cmp	r1, #16
  425a70:	d00d      	beq.n	425a8e <mbox_event_cb+0x26>
  425a72:	bd08      	pop	{r3, pc}
	if(evt == LV_EVENT_DELETE && obj == mbox) {
  425a74:	4b09      	ldr	r3, [pc, #36]	; (425a9c <mbox_event_cb+0x34>)
  425a76:	681b      	ldr	r3, [r3, #0]
  425a78:	4283      	cmp	r3, r0
  425a7a:	d1f8      	bne.n	425a6e <mbox_event_cb+0x6>
		lv_obj_del_async(lv_obj_get_parent(mbox));
  425a7c:	4618      	mov	r0, r3
  425a7e:	4b08      	ldr	r3, [pc, #32]	; (425aa0 <mbox_event_cb+0x38>)
  425a80:	4798      	blx	r3
  425a82:	4b08      	ldr	r3, [pc, #32]	; (425aa4 <mbox_event_cb+0x3c>)
  425a84:	4798      	blx	r3
		mbox = NULL; /* happens before object is actually deleted! */
  425a86:	2200      	movs	r2, #0
  425a88:	4b04      	ldr	r3, [pc, #16]	; (425a9c <mbox_event_cb+0x34>)
  425a8a:	601a      	str	r2, [r3, #0]
  425a8c:	bd08      	pop	{r3, pc}
		lv_msgbox_start_auto_close(mbox, 0);
  425a8e:	2100      	movs	r1, #0
  425a90:	4b02      	ldr	r3, [pc, #8]	; (425a9c <mbox_event_cb+0x34>)
  425a92:	6818      	ldr	r0, [r3, #0]
  425a94:	4b04      	ldr	r3, [pc, #16]	; (425aa8 <mbox_event_cb+0x40>)
  425a96:	4798      	blx	r3
}
  425a98:	e7eb      	b.n	425a72 <mbox_event_cb+0xa>
  425a9a:	bf00      	nop
  425a9c:	2043a160 	.word	0x2043a160
  425aa0:	004059ed 	.word	0x004059ed
  425aa4:	004056e1 	.word	0x004056e1
  425aa8:	00424809 	.word	0x00424809

00425aac <my_flush_cb>:

/************************************************************************/
/* port lvgl                                                            */
/************************************************************************/

void my_flush_cb(lv_disp_drv_t * disp_drv, const lv_area_t * area, lv_color_t * color_p) {
  425aac:	b570      	push	{r4, r5, r6, lr}
  425aae:	4605      	mov	r5, r0
  425ab0:	460c      	mov	r4, r1
  425ab2:	4616      	mov	r6, r2
	ili9341_set_top_left_limit(area->x1, area->y1);   ili9341_set_bottom_right_limit(area->x2, area->y2);
  425ab4:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
  425ab8:	f9b4 0000 	ldrsh.w	r0, [r4]
  425abc:	4b0d      	ldr	r3, [pc, #52]	; (425af4 <my_flush_cb+0x48>)
  425abe:	4798      	blx	r3
  425ac0:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
  425ac4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
  425ac8:	4b0b      	ldr	r3, [pc, #44]	; (425af8 <my_flush_cb+0x4c>)
  425aca:	4798      	blx	r3
	ili9341_copy_pixels_to_screen(color_p,  (area->x2 - area->x1) * (area->y2 - area->y1));
  425acc:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  425ad0:	f9b4 1000 	ldrsh.w	r1, [r4]
  425ad4:	1a5b      	subs	r3, r3, r1
  425ad6:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
  425ada:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
  425ade:	1a89      	subs	r1, r1, r2
  425ae0:	fb01 f103 	mul.w	r1, r1, r3
  425ae4:	4630      	mov	r0, r6
  425ae6:	4b05      	ldr	r3, [pc, #20]	; (425afc <my_flush_cb+0x50>)
  425ae8:	4798      	blx	r3
	
	/* IMPORTANT!!!
	* Inform the graphics library that you are ready with the flushing*/
	lv_disp_flush_ready(disp_drv);
  425aea:	4628      	mov	r0, r5
  425aec:	4b04      	ldr	r3, [pc, #16]	; (425b00 <my_flush_cb+0x54>)
  425aee:	4798      	blx	r3
  425af0:	bd70      	pop	{r4, r5, r6, pc}
  425af2:	bf00      	nop
  425af4:	00400ee9 	.word	0x00400ee9
  425af8:	00400f09 	.word	0x00400f09
  425afc:	00400f59 	.word	0x00400f59
  425b00:	00414e75 	.word	0x00414e75

00425b04 <my_input_read>:
}

bool my_input_read(lv_indev_drv_t * drv, lv_indev_data_t*data) {
  425b04:	b510      	push	{r4, lr}
  425b06:	b082      	sub	sp, #8
  425b08:	460c      	mov	r4, r1
	int px, py, pressed;
	
	if (readPoint(&px, &py)) {
  425b0a:	4669      	mov	r1, sp
  425b0c:	a801      	add	r0, sp, #4
  425b0e:	4b07      	ldr	r3, [pc, #28]	; (425b2c <my_input_read+0x28>)
  425b10:	4798      	blx	r3
  425b12:	b940      	cbnz	r0, 425b26 <my_input_read+0x22>
		data->state = LV_INDEV_STATE_PR;
	}
	else {
		data->state = LV_INDEV_STATE_REL;
  425b14:	2300      	movs	r3, #0
  425b16:	73a3      	strb	r3, [r4, #14]
	}
	
	data->point.x = px;
  425b18:	9b01      	ldr	r3, [sp, #4]
  425b1a:	8023      	strh	r3, [r4, #0]
	data->point.y = py;
  425b1c:	9b00      	ldr	r3, [sp, #0]
  425b1e:	8063      	strh	r3, [r4, #2]
	return false; /*No buffering now so no more data read*/
}
  425b20:	2000      	movs	r0, #0
  425b22:	b002      	add	sp, #8
  425b24:	bd10      	pop	{r4, pc}
		data->state = LV_INDEV_STATE_PR;
  425b26:	2301      	movs	r3, #1
  425b28:	73a3      	strb	r3, [r4, #14]
  425b2a:	e7f5      	b.n	425b18 <my_input_read+0x14>
  425b2c:	00400c45 	.word	0x00400c45

00425b30 <AFEC_pot_Callback>:
static void AFEC_pot_Callback(void){
  425b30:	b510      	push	{r4, lr}
  425b32:	b082      	sub	sp, #8
static inline uint32_t afec_channel_get_value(Afec *const afec,
		enum afec_channel_num afec_ch)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  425b34:	4b0a      	ldr	r3, [pc, #40]	; (425b60 <AFEC_pot_Callback+0x30>)
  425b36:	2206      	movs	r2, #6
  425b38:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  425b3a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
	g_ul_value = afec_channel_get_value(AFEC_POT, AFEC_POT_CHANNEL);
  425b3c:	4b09      	ldr	r3, [pc, #36]	; (425b64 <AFEC_pot_Callback+0x34>)
  425b3e:	601a      	str	r2, [r3, #0]
	g_is_conversion_done = true;
  425b40:	2101      	movs	r1, #1
  425b42:	4a09      	ldr	r2, [pc, #36]	; (425b68 <AFEC_pot_Callback+0x38>)
  425b44:	7011      	strb	r1, [r2, #0]
	ecg.value=g_ul_value;
  425b46:	681b      	ldr	r3, [r3, #0]
  425b48:	a902      	add	r1, sp, #8
  425b4a:	f841 3d04 	str.w	r3, [r1, #-4]!
	xQueueSendFromISR(xQueueECG,&ecg,0);
  425b4e:	2300      	movs	r3, #0
  425b50:	461a      	mov	r2, r3
  425b52:	4806      	ldr	r0, [pc, #24]	; (425b6c <AFEC_pot_Callback+0x3c>)
  425b54:	6800      	ldr	r0, [r0, #0]
  425b56:	4c06      	ldr	r4, [pc, #24]	; (425b70 <AFEC_pot_Callback+0x40>)
  425b58:	47a0      	blx	r4
}
  425b5a:	b002      	add	sp, #8
  425b5c:	bd10      	pop	{r4, pc}
  425b5e:	bf00      	nop
  425b60:	40064000 	.word	0x40064000
  425b64:	2043a148 	.word	0x2043a148
  425b68:	2043a144 	.word	0x2043a144
  425b6c:	2043a40c 	.word	0x2043a40c
  425b70:	004020c9 	.word	0x004020c9

00425b74 <RTT_init>:
{
  425b74:	b570      	push	{r4, r5, r6, lr}
  425b76:	4605      	mov	r5, r0
  425b78:	460e      	mov	r6, r1
	rtt_sel_source(RTT, false);
  425b7a:	4c13      	ldr	r4, [pc, #76]	; (425bc8 <RTT_init+0x54>)
  425b7c:	2100      	movs	r1, #0
  425b7e:	4620      	mov	r0, r4
  425b80:	4b12      	ldr	r3, [pc, #72]	; (425bcc <RTT_init+0x58>)
  425b82:	4798      	blx	r3
	rtt_init(RTT, pllPreScale);
  425b84:	4629      	mov	r1, r5
  425b86:	4620      	mov	r0, r4
  425b88:	4b11      	ldr	r3, [pc, #68]	; (425bd0 <RTT_init+0x5c>)
  425b8a:	4798      	blx	r3
	ul_previous_time = rtt_read_timer_value(RTT);
  425b8c:	4620      	mov	r0, r4
  425b8e:	4b11      	ldr	r3, [pc, #68]	; (425bd4 <RTT_init+0x60>)
  425b90:	4798      	blx	r3
  425b92:	4604      	mov	r4, r0
	while (ul_previous_time == rtt_read_timer_value(RTT));
  425b94:	480c      	ldr	r0, [pc, #48]	; (425bc8 <RTT_init+0x54>)
  425b96:	4b0f      	ldr	r3, [pc, #60]	; (425bd4 <RTT_init+0x60>)
  425b98:	4798      	blx	r3
  425b9a:	4284      	cmp	r4, r0
  425b9c:	d0fa      	beq.n	425b94 <RTT_init+0x20>
	rtt_write_alarm_time(RTT, IrqNPulses+ul_previous_time);
  425b9e:	4d0a      	ldr	r5, [pc, #40]	; (425bc8 <RTT_init+0x54>)
  425ba0:	19a1      	adds	r1, r4, r6
  425ba2:	4628      	mov	r0, r5
  425ba4:	4b0c      	ldr	r3, [pc, #48]	; (425bd8 <RTT_init+0x64>)
  425ba6:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  425ba8:	4b0c      	ldr	r3, [pc, #48]	; (425bdc <RTT_init+0x68>)
  425baa:	2208      	movs	r2, #8
  425bac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  425bb0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  425bb4:	2180      	movs	r1, #128	; 0x80
  425bb6:	f883 1303 	strb.w	r1, [r3, #771]	; 0x303
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  425bba:	601a      	str	r2, [r3, #0]
	rtt_enable_interrupt(RTT, RTT_MR_ALMIEN | RTT_MR_RTTINCIEN);
  425bbc:	f44f 3140 	mov.w	r1, #196608	; 0x30000
  425bc0:	4628      	mov	r0, r5
  425bc2:	4b07      	ldr	r3, [pc, #28]	; (425be0 <RTT_init+0x6c>)
  425bc4:	4798      	blx	r3
  425bc6:	bd70      	pop	{r4, r5, r6, pc}
  425bc8:	400e1830 	.word	0x400e1830
  425bcc:	00400711 	.word	0x00400711
  425bd0:	004006fd 	.word	0x004006fd
  425bd4:	00400765 	.word	0x00400765
  425bd8:	00400779 	.word	0x00400779
  425bdc:	e000e100 	.word	0xe000e100
  425be0:	0040073d 	.word	0x0040073d

00425be4 <config_AFEC_pot>:
static void config_AFEC_pot(Afec *afec, uint32_t afec_id, uint32_t afec_channel, afec_callback_t callback){
  425be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  425be8:	b08a      	sub	sp, #40	; 0x28
  425bea:	4604      	mov	r4, r0
  425bec:	460d      	mov	r5, r1
  425bee:	4616      	mov	r6, r2
  425bf0:	4698      	mov	r8, r3
	afec_enable(afec);
  425bf2:	4b21      	ldr	r3, [pc, #132]	; (425c78 <config_AFEC_pot+0x94>)
  425bf4:	4798      	blx	r3
	afec_get_config_defaults(&afec_cfg);
  425bf6:	a804      	add	r0, sp, #16
  425bf8:	4b20      	ldr	r3, [pc, #128]	; (425c7c <config_AFEC_pot+0x98>)
  425bfa:	4798      	blx	r3
	afec_init(afec, &afec_cfg);
  425bfc:	a904      	add	r1, sp, #16
  425bfe:	4620      	mov	r0, r4
  425c00:	4b1f      	ldr	r3, [pc, #124]	; (425c80 <config_AFEC_pot+0x9c>)
  425c02:	4798      	blx	r3
	reg = afec->AFEC_MR;
  425c04:	6863      	ldr	r3, [r4, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  425c06:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
	afec->AFEC_MR = reg;
  425c0a:	6063      	str	r3, [r4, #4]
	afec_ch_get_config_defaults(&afec_ch_cfg);
  425c0c:	a803      	add	r0, sp, #12
  425c0e:	4b1d      	ldr	r3, [pc, #116]	; (425c84 <config_AFEC_pot+0xa0>)
  425c10:	4798      	blx	r3
	afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  425c12:	2300      	movs	r3, #0
  425c14:	f88d 300d 	strb.w	r3, [sp, #13]
	afec_ch_set_config(afec, afec_channel, &afec_ch_cfg);
  425c18:	b2b7      	uxth	r7, r6
  425c1a:	aa03      	add	r2, sp, #12
  425c1c:	4639      	mov	r1, r7
  425c1e:	4620      	mov	r0, r4
  425c20:	4b19      	ldr	r3, [pc, #100]	; (425c88 <config_AFEC_pot+0xa4>)
  425c22:	4798      	blx	r3
static inline void afec_channel_set_analog_offset(Afec *const afec,
		enum afec_channel_num afec_ch, uint16_t aoffset)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  425c24:	6667      	str	r7, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  425c26:	f44f 7300 	mov.w	r3, #512	; 0x200
  425c2a:	66e3      	str	r3, [r4, #108]	; 0x6c
	afec_temp_sensor_get_config_defaults(&afec_temp_sensor_cfg);
  425c2c:	a801      	add	r0, sp, #4
  425c2e:	4b17      	ldr	r3, [pc, #92]	; (425c8c <config_AFEC_pot+0xa8>)
  425c30:	4798      	blx	r3
	afec_temp_sensor_set_config(afec, &afec_temp_sensor_cfg);
  425c32:	a901      	add	r1, sp, #4
  425c34:	4620      	mov	r0, r4
  425c36:	4b16      	ldr	r3, [pc, #88]	; (425c90 <config_AFEC_pot+0xac>)
  425c38:	4798      	blx	r3
	afec_set_callback(afec, afec_channel,	callback, 1);
  425c3a:	2301      	movs	r3, #1
  425c3c:	4642      	mov	r2, r8
  425c3e:	4631      	mov	r1, r6
  425c40:	4620      	mov	r0, r4
  425c42:	4c14      	ldr	r4, [pc, #80]	; (425c94 <config_AFEC_pot+0xb0>)
  425c44:	47a0      	blx	r4
	NVIC_SetPriority(afec_id, 4);
  425c46:	b26b      	sxtb	r3, r5
  if(IRQn < 0) {
  425c48:	2b00      	cmp	r3, #0
  425c4a:	db0e      	blt.n	425c6a <config_AFEC_pot+0x86>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  425c4c:	4a12      	ldr	r2, [pc, #72]	; (425c98 <config_AFEC_pot+0xb4>)
  425c4e:	2180      	movs	r1, #128	; 0x80
  425c50:	54d1      	strb	r1, [r2, r3]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  425c52:	095b      	lsrs	r3, r3, #5
  425c54:	f005 051f 	and.w	r5, r5, #31
  425c58:	2201      	movs	r2, #1
  425c5a:	fa02 f505 	lsl.w	r5, r2, r5
  425c5e:	4a0f      	ldr	r2, [pc, #60]	; (425c9c <config_AFEC_pot+0xb8>)
  425c60:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
}
  425c64:	b00a      	add	sp, #40	; 0x28
  425c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  425c6a:	f005 010f 	and.w	r1, r5, #15
  425c6e:	4a0c      	ldr	r2, [pc, #48]	; (425ca0 <config_AFEC_pot+0xbc>)
  425c70:	440a      	add	r2, r1
  425c72:	2180      	movs	r1, #128	; 0x80
  425c74:	7611      	strb	r1, [r2, #24]
  425c76:	e7ec      	b.n	425c52 <config_AFEC_pot+0x6e>
  425c78:	00401731 	.word	0x00401731
  425c7c:	004015a9 	.word	0x004015a9
  425c80:	004015f9 	.word	0x004015f9
  425c84:	004015d9 	.word	0x004015d9
  425c88:	00401559 	.word	0x00401559
  425c8c:	004015e3 	.word	0x004015e3
  425c90:	0040158b 	.word	0x0040158b
  425c94:	004016a5 	.word	0x004016a5
  425c98:	e000e400 	.word	0xe000e400
  425c9c:	e000e100 	.word	0xe000e100
  425ca0:	e000ecfc 	.word	0xe000ecfc

00425ca4 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  425ca4:	b530      	push	{r4, r5, lr}
  425ca6:	b083      	sub	sp, #12
  425ca8:	4604      	mov	r4, r0
  425caa:	460d      	mov	r5, r1
	uint32_t val = 0;
  425cac:	2300      	movs	r3, #0
  425cae:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  425cb0:	4b28      	ldr	r3, [pc, #160]	; (425d54 <usart_serial_getchar+0xb0>)
  425cb2:	4298      	cmp	r0, r3
  425cb4:	d013      	beq.n	425cde <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  425cb6:	4b28      	ldr	r3, [pc, #160]	; (425d58 <usart_serial_getchar+0xb4>)
  425cb8:	429c      	cmp	r4, r3
  425cba:	d017      	beq.n	425cec <usart_serial_getchar+0x48>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  425cbc:	4b27      	ldr	r3, [pc, #156]	; (425d5c <usart_serial_getchar+0xb8>)
  425cbe:	429c      	cmp	r4, r3
  425cc0:	d01b      	beq.n	425cfa <usart_serial_getchar+0x56>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  425cc2:	4b27      	ldr	r3, [pc, #156]	; (425d60 <usart_serial_getchar+0xbc>)
  425cc4:	429c      	cmp	r4, r3
  425cc6:	d01f      	beq.n	425d08 <usart_serial_getchar+0x64>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  425cc8:	4b26      	ldr	r3, [pc, #152]	; (425d64 <usart_serial_getchar+0xc0>)
  425cca:	429c      	cmp	r4, r3
  425ccc:	d023      	beq.n	425d16 <usart_serial_getchar+0x72>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  425cce:	4b26      	ldr	r3, [pc, #152]	; (425d68 <usart_serial_getchar+0xc4>)
  425cd0:	429c      	cmp	r4, r3
  425cd2:	d02a      	beq.n	425d2a <usart_serial_getchar+0x86>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  425cd4:	4b25      	ldr	r3, [pc, #148]	; (425d6c <usart_serial_getchar+0xc8>)
  425cd6:	429c      	cmp	r4, r3
  425cd8:	d031      	beq.n	425d3e <usart_serial_getchar+0x9a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  425cda:	b003      	add	sp, #12
  425cdc:	bd30      	pop	{r4, r5, pc}
		while (uart_read((Uart*)p_usart, data));
  425cde:	4629      	mov	r1, r5
  425ce0:	4620      	mov	r0, r4
  425ce2:	4b23      	ldr	r3, [pc, #140]	; (425d70 <usart_serial_getchar+0xcc>)
  425ce4:	4798      	blx	r3
  425ce6:	2800      	cmp	r0, #0
  425ce8:	d1f9      	bne.n	425cde <usart_serial_getchar+0x3a>
  425cea:	e7e4      	b.n	425cb6 <usart_serial_getchar+0x12>
		while (uart_read((Uart*)p_usart, data));
  425cec:	4629      	mov	r1, r5
  425cee:	4620      	mov	r0, r4
  425cf0:	4b1f      	ldr	r3, [pc, #124]	; (425d70 <usart_serial_getchar+0xcc>)
  425cf2:	4798      	blx	r3
  425cf4:	2800      	cmp	r0, #0
  425cf6:	d1f9      	bne.n	425cec <usart_serial_getchar+0x48>
  425cf8:	e7e0      	b.n	425cbc <usart_serial_getchar+0x18>
		while (uart_read((Uart*)p_usart, data));
  425cfa:	4629      	mov	r1, r5
  425cfc:	4620      	mov	r0, r4
  425cfe:	4b1c      	ldr	r3, [pc, #112]	; (425d70 <usart_serial_getchar+0xcc>)
  425d00:	4798      	blx	r3
  425d02:	2800      	cmp	r0, #0
  425d04:	d1f9      	bne.n	425cfa <usart_serial_getchar+0x56>
  425d06:	e7dc      	b.n	425cc2 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  425d08:	4629      	mov	r1, r5
  425d0a:	4620      	mov	r0, r4
  425d0c:	4b18      	ldr	r3, [pc, #96]	; (425d70 <usart_serial_getchar+0xcc>)
  425d0e:	4798      	blx	r3
  425d10:	2800      	cmp	r0, #0
  425d12:	d1f9      	bne.n	425d08 <usart_serial_getchar+0x64>
  425d14:	e7d8      	b.n	425cc8 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  425d16:	a901      	add	r1, sp, #4
  425d18:	4620      	mov	r0, r4
  425d1a:	4b16      	ldr	r3, [pc, #88]	; (425d74 <usart_serial_getchar+0xd0>)
  425d1c:	4798      	blx	r3
  425d1e:	2800      	cmp	r0, #0
  425d20:	d1f9      	bne.n	425d16 <usart_serial_getchar+0x72>
		*data = (uint8_t)(val & 0xFF);
  425d22:	f89d 3004 	ldrb.w	r3, [sp, #4]
  425d26:	702b      	strb	r3, [r5, #0]
  425d28:	e7d1      	b.n	425cce <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
  425d2a:	a901      	add	r1, sp, #4
  425d2c:	4620      	mov	r0, r4
  425d2e:	4b11      	ldr	r3, [pc, #68]	; (425d74 <usart_serial_getchar+0xd0>)
  425d30:	4798      	blx	r3
  425d32:	2800      	cmp	r0, #0
  425d34:	d1f9      	bne.n	425d2a <usart_serial_getchar+0x86>
		*data = (uint8_t)(val & 0xFF);
  425d36:	f89d 3004 	ldrb.w	r3, [sp, #4]
  425d3a:	702b      	strb	r3, [r5, #0]
  425d3c:	e7ca      	b.n	425cd4 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  425d3e:	a901      	add	r1, sp, #4
  425d40:	4620      	mov	r0, r4
  425d42:	4b0c      	ldr	r3, [pc, #48]	; (425d74 <usart_serial_getchar+0xd0>)
  425d44:	4798      	blx	r3
  425d46:	2800      	cmp	r0, #0
  425d48:	d1f9      	bne.n	425d3e <usart_serial_getchar+0x9a>
		*data = (uint8_t)(val & 0xFF);
  425d4a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  425d4e:	702b      	strb	r3, [r5, #0]
}
  425d50:	e7c3      	b.n	425cda <usart_serial_getchar+0x36>
  425d52:	bf00      	nop
  425d54:	400e0800 	.word	0x400e0800
  425d58:	400e0a00 	.word	0x400e0a00
  425d5c:	400e1a00 	.word	0x400e1a00
  425d60:	400e1c00 	.word	0x400e1c00
  425d64:	40024000 	.word	0x40024000
  425d68:	40028000 	.word	0x40028000
  425d6c:	4002c000 	.word	0x4002c000
  425d70:	00425457 	.word	0x00425457
  425d74:	004254f3 	.word	0x004254f3

00425d78 <usart_serial_putchar>:
{
  425d78:	b538      	push	{r3, r4, r5, lr}
  425d7a:	4604      	mov	r4, r0
  425d7c:	460d      	mov	r5, r1
	if (UART0 == (Uart*)p_usart) {
  425d7e:	4b27      	ldr	r3, [pc, #156]	; (425e1c <usart_serial_putchar+0xa4>)
  425d80:	4298      	cmp	r0, r3
  425d82:	d013      	beq.n	425dac <usart_serial_putchar+0x34>
	if (UART1 == (Uart*)p_usart) {
  425d84:	4b26      	ldr	r3, [pc, #152]	; (425e20 <usart_serial_putchar+0xa8>)
  425d86:	4298      	cmp	r0, r3
  425d88:	d018      	beq.n	425dbc <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  425d8a:	4b26      	ldr	r3, [pc, #152]	; (425e24 <usart_serial_putchar+0xac>)
  425d8c:	4298      	cmp	r0, r3
  425d8e:	d01d      	beq.n	425dcc <usart_serial_putchar+0x54>
	if (UART3 == (Uart*)p_usart) {
  425d90:	4b25      	ldr	r3, [pc, #148]	; (425e28 <usart_serial_putchar+0xb0>)
  425d92:	4298      	cmp	r0, r3
  425d94:	d022      	beq.n	425ddc <usart_serial_putchar+0x64>
	if (USART0 == p_usart) {
  425d96:	4b25      	ldr	r3, [pc, #148]	; (425e2c <usart_serial_putchar+0xb4>)
  425d98:	4298      	cmp	r0, r3
  425d9a:	d027      	beq.n	425dec <usart_serial_putchar+0x74>
	if (USART1 == p_usart) {
  425d9c:	4b24      	ldr	r3, [pc, #144]	; (425e30 <usart_serial_putchar+0xb8>)
  425d9e:	4298      	cmp	r0, r3
  425da0:	d02c      	beq.n	425dfc <usart_serial_putchar+0x84>
	if (USART2 == p_usart) {
  425da2:	4b24      	ldr	r3, [pc, #144]	; (425e34 <usart_serial_putchar+0xbc>)
  425da4:	4298      	cmp	r0, r3
  425da6:	d031      	beq.n	425e0c <usart_serial_putchar+0x94>
	return 0;
  425da8:	2000      	movs	r0, #0
}
  425daa:	bd38      	pop	{r3, r4, r5, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  425dac:	4629      	mov	r1, r5
  425dae:	4620      	mov	r0, r4
  425db0:	4b21      	ldr	r3, [pc, #132]	; (425e38 <usart_serial_putchar+0xc0>)
  425db2:	4798      	blx	r3
  425db4:	2800      	cmp	r0, #0
  425db6:	d1f9      	bne.n	425dac <usart_serial_putchar+0x34>
		return 1;
  425db8:	2001      	movs	r0, #1
  425dba:	bd38      	pop	{r3, r4, r5, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  425dbc:	4629      	mov	r1, r5
  425dbe:	4620      	mov	r0, r4
  425dc0:	4b1d      	ldr	r3, [pc, #116]	; (425e38 <usart_serial_putchar+0xc0>)
  425dc2:	4798      	blx	r3
  425dc4:	2800      	cmp	r0, #0
  425dc6:	d1f9      	bne.n	425dbc <usart_serial_putchar+0x44>
		return 1;
  425dc8:	2001      	movs	r0, #1
  425dca:	bd38      	pop	{r3, r4, r5, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  425dcc:	4629      	mov	r1, r5
  425dce:	4620      	mov	r0, r4
  425dd0:	4b19      	ldr	r3, [pc, #100]	; (425e38 <usart_serial_putchar+0xc0>)
  425dd2:	4798      	blx	r3
  425dd4:	2800      	cmp	r0, #0
  425dd6:	d1f9      	bne.n	425dcc <usart_serial_putchar+0x54>
		return 1;
  425dd8:	2001      	movs	r0, #1
  425dda:	bd38      	pop	{r3, r4, r5, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  425ddc:	4629      	mov	r1, r5
  425dde:	4620      	mov	r0, r4
  425de0:	4b15      	ldr	r3, [pc, #84]	; (425e38 <usart_serial_putchar+0xc0>)
  425de2:	4798      	blx	r3
  425de4:	2800      	cmp	r0, #0
  425de6:	d1f9      	bne.n	425ddc <usart_serial_putchar+0x64>
		return 1;
  425de8:	2001      	movs	r0, #1
  425dea:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
  425dec:	4629      	mov	r1, r5
  425dee:	4620      	mov	r0, r4
  425df0:	4b12      	ldr	r3, [pc, #72]	; (425e3c <usart_serial_putchar+0xc4>)
  425df2:	4798      	blx	r3
  425df4:	2800      	cmp	r0, #0
  425df6:	d1f9      	bne.n	425dec <usart_serial_putchar+0x74>
		return 1;
  425df8:	2001      	movs	r0, #1
  425dfa:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
  425dfc:	4629      	mov	r1, r5
  425dfe:	4620      	mov	r0, r4
  425e00:	4b0e      	ldr	r3, [pc, #56]	; (425e3c <usart_serial_putchar+0xc4>)
  425e02:	4798      	blx	r3
  425e04:	2800      	cmp	r0, #0
  425e06:	d1f9      	bne.n	425dfc <usart_serial_putchar+0x84>
		return 1;
  425e08:	2001      	movs	r0, #1
  425e0a:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
  425e0c:	4629      	mov	r1, r5
  425e0e:	4620      	mov	r0, r4
  425e10:	4b0a      	ldr	r3, [pc, #40]	; (425e3c <usart_serial_putchar+0xc4>)
  425e12:	4798      	blx	r3
  425e14:	2800      	cmp	r0, #0
  425e16:	d1f9      	bne.n	425e0c <usart_serial_putchar+0x94>
		return 1;
  425e18:	2001      	movs	r0, #1
  425e1a:	bd38      	pop	{r3, r4, r5, pc}
  425e1c:	400e0800 	.word	0x400e0800
  425e20:	400e0a00 	.word	0x400e0a00
  425e24:	400e1a00 	.word	0x400e1a00
  425e28:	400e1c00 	.word	0x400e1c00
  425e2c:	40024000 	.word	0x40024000
  425e30:	40028000 	.word	0x40028000
  425e34:	4002c000 	.word	0x4002c000
  425e38:	00425445 	.word	0x00425445
  425e3c:	004254dd 	.word	0x004254dd

00425e40 <configure_lcd>:
static void configure_lcd(void) {
  425e40:	b510      	push	{r4, lr}
	pio_configure_pin(LCD_SPI_MISO_PIO, LCD_SPI_MISO_FLAGS);  //
  425e42:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  425e46:	2074      	movs	r0, #116	; 0x74
  425e48:	4c0b      	ldr	r4, [pc, #44]	; (425e78 <configure_lcd+0x38>)
  425e4a:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_MOSI_PIO, LCD_SPI_MOSI_FLAGS);
  425e4c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  425e50:	2075      	movs	r0, #117	; 0x75
  425e52:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_SPCK_PIO, LCD_SPI_SPCK_FLAGS);
  425e54:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  425e58:	2076      	movs	r0, #118	; 0x76
  425e5a:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_NPCS_PIO, LCD_SPI_NPCS_FLAGS);
  425e5c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  425e60:	207b      	movs	r0, #123	; 0x7b
  425e62:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_RESET_PIO, LCD_SPI_RESET_FLAGS);
  425e64:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  425e68:	2018      	movs	r0, #24
  425e6a:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
  425e6c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  425e70:	2006      	movs	r0, #6
  425e72:	47a0      	blx	r4
  425e74:	bd10      	pop	{r4, pc}
  425e76:	bf00      	nop
  425e78:	00424fbd 	.word	0x00424fbd

00425e7c <configure_console>:
static void configure_console(void) {
  425e7c:	b570      	push	{r4, r5, r6, lr}
  425e7e:	b08a      	sub	sp, #40	; 0x28
	const usart_serial_options_t uart_serial_options = {
  425e80:	4b1a      	ldr	r3, [pc, #104]	; (425eec <configure_console+0x70>)
  425e82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  425e84:	ac0a      	add	r4, sp, #40	; 0x28
  425e86:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  425e8a:	4d19      	ldr	r5, [pc, #100]	; (425ef0 <configure_console+0x74>)
  425e8c:	4b19      	ldr	r3, [pc, #100]	; (425ef4 <configure_console+0x78>)
  425e8e:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  425e90:	4a19      	ldr	r2, [pc, #100]	; (425ef8 <configure_console+0x7c>)
  425e92:	4b1a      	ldr	r3, [pc, #104]	; (425efc <configure_console+0x80>)
  425e94:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  425e96:	4a1a      	ldr	r2, [pc, #104]	; (425f00 <configure_console+0x84>)
  425e98:	4b1a      	ldr	r3, [pc, #104]	; (425f04 <configure_console+0x88>)
  425e9a:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  425e9c:	9b06      	ldr	r3, [sp, #24]
  425e9e:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  425ea0:	9b07      	ldr	r3, [sp, #28]
  425ea2:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  425ea4:	9b08      	ldr	r3, [sp, #32]
  425ea6:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  425ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  425eaa:	9303      	str	r3, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  425eac:	2400      	movs	r4, #0
  425eae:	9404      	str	r4, [sp, #16]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  425eb0:	200e      	movs	r0, #14
  425eb2:	4b15      	ldr	r3, [pc, #84]	; (425f08 <configure_console+0x8c>)
  425eb4:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  425eb6:	4a15      	ldr	r2, [pc, #84]	; (425f0c <configure_console+0x90>)
  425eb8:	4669      	mov	r1, sp
  425eba:	4628      	mov	r0, r5
  425ebc:	4b14      	ldr	r3, [pc, #80]	; (425f10 <configure_console+0x94>)
  425ebe:	4798      	blx	r3
		usart_enable_tx(p_usart);
  425ec0:	4628      	mov	r0, r5
  425ec2:	4b14      	ldr	r3, [pc, #80]	; (425f14 <configure_console+0x98>)
  425ec4:	4798      	blx	r3
		usart_enable_rx(p_usart);
  425ec6:	4628      	mov	r0, r5
  425ec8:	4b13      	ldr	r3, [pc, #76]	; (425f18 <configure_console+0x9c>)
  425eca:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  425ecc:	4e13      	ldr	r6, [pc, #76]	; (425f1c <configure_console+0xa0>)
  425ece:	6833      	ldr	r3, [r6, #0]
  425ed0:	4621      	mov	r1, r4
  425ed2:	6898      	ldr	r0, [r3, #8]
  425ed4:	4d12      	ldr	r5, [pc, #72]	; (425f20 <configure_console+0xa4>)
  425ed6:	47a8      	blx	r5
	setbuf(stdin, NULL);
  425ed8:	6833      	ldr	r3, [r6, #0]
  425eda:	4621      	mov	r1, r4
  425edc:	6858      	ldr	r0, [r3, #4]
  425ede:	47a8      	blx	r5
	setbuf(stdout, NULL);
  425ee0:	6833      	ldr	r3, [r6, #0]
  425ee2:	4621      	mov	r1, r4
  425ee4:	6898      	ldr	r0, [r3, #8]
  425ee6:	47a8      	blx	r5
}
  425ee8:	b00a      	add	sp, #40	; 0x28
  425eea:	bd70      	pop	{r4, r5, r6, pc}
  425eec:	0042fec4 	.word	0x0042fec4
  425ef0:	40028000 	.word	0x40028000
  425ef4:	2043a404 	.word	0x2043a404
  425ef8:	00425d79 	.word	0x00425d79
  425efc:	2043a400 	.word	0x2043a400
  425f00:	00425ca5 	.word	0x00425ca5
  425f04:	2043a3fc 	.word	0x2043a3fc
  425f08:	004252b5 	.word	0x004252b5
  425f0c:	08f0d180 	.word	0x08f0d180
  425f10:	00425559 	.word	0x00425559
  425f14:	004254b5 	.word	0x004254b5
  425f18:	004254c1 	.word	0x004254c1
  425f1c:	204000fc 	.word	0x204000fc
  425f20:	00428081 	.word	0x00428081

00425f24 <vApplicationStackOverflowHook>:
extern void vApplicationStackOverflowHook(xTaskHandle *pxTask, signed char *pcTaskName) {
  425f24:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  425f26:	460a      	mov	r2, r1
  425f28:	4601      	mov	r1, r0
  425f2a:	4802      	ldr	r0, [pc, #8]	; (425f34 <vApplicationStackOverflowHook+0x10>)
  425f2c:	4b02      	ldr	r3, [pc, #8]	; (425f38 <vApplicationStackOverflowHook+0x14>)
  425f2e:	4798      	blx	r3
  425f30:	e7fe      	b.n	425f30 <vApplicationStackOverflowHook+0xc>
  425f32:	bf00      	nop
  425f34:	004317c0 	.word	0x004317c0
  425f38:	0042783d 	.word	0x0042783d

00425f3c <vApplicationTickHook>:
extern void vApplicationTickHook(void) { }
  425f3c:	4770      	bx	lr

00425f3e <vApplicationMallocFailedHook>:

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  425f3e:	f04f 0380 	mov.w	r3, #128	; 0x80
  425f42:	b672      	cpsid	i
  425f44:	f383 8811 	msr	BASEPRI, r3
  425f48:	f3bf 8f6f 	isb	sy
  425f4c:	f3bf 8f4f 	dsb	sy
  425f50:	b662      	cpsie	i
  425f52:	e7fe      	b.n	425f52 <vApplicationMallocFailedHook+0x14>

00425f54 <TC3_Handler>:
void TC3_Handler(void){
  425f54:	b500      	push	{lr}
  425f56:	b083      	sub	sp, #12
	ul_dummy = tc_get_status(TC1, 0);
  425f58:	2100      	movs	r1, #0
  425f5a:	4806      	ldr	r0, [pc, #24]	; (425f74 <TC3_Handler+0x20>)
  425f5c:	4b06      	ldr	r3, [pc, #24]	; (425f78 <TC3_Handler+0x24>)
  425f5e:	4798      	blx	r3
  425f60:	9001      	str	r0, [sp, #4]
	UNUSED(ul_dummy);
  425f62:	9b01      	ldr	r3, [sp, #4]
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  425f64:	4b05      	ldr	r3, [pc, #20]	; (425f7c <TC3_Handler+0x28>)
  425f66:	2240      	movs	r2, #64	; 0x40
  425f68:	615a      	str	r2, [r3, #20]
	afec->AFEC_CR = AFEC_CR_START;
  425f6a:	2202      	movs	r2, #2
  425f6c:	601a      	str	r2, [r3, #0]
}
  425f6e:	b003      	add	sp, #12
  425f70:	f85d fb04 	ldr.w	pc, [sp], #4
  425f74:	40010000 	.word	0x40010000
  425f78:	004007ef 	.word	0x004007ef
  425f7c:	40064000 	.word	0x40064000

00425f80 <TC_init>:
void TC_init(Tc * TC, int ID_TC, int TC_CHANNEL, int freq){
  425f80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  425f84:	b085      	sub	sp, #20
  425f86:	4606      	mov	r6, r0
  425f88:	460c      	mov	r4, r1
  425f8a:	4617      	mov	r7, r2
  425f8c:	4698      	mov	r8, r3
	pmc_enable_periph_clk(ID_TC);
  425f8e:	4608      	mov	r0, r1
  425f90:	4b1e      	ldr	r3, [pc, #120]	; (42600c <TC_init+0x8c>)
  425f92:	4798      	blx	r3
	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  425f94:	4d1e      	ldr	r5, [pc, #120]	; (426010 <TC_init+0x90>)
  425f96:	9500      	str	r5, [sp, #0]
  425f98:	ab02      	add	r3, sp, #8
  425f9a:	aa03      	add	r2, sp, #12
  425f9c:	4629      	mov	r1, r5
  425f9e:	4640      	mov	r0, r8
  425fa0:	f8df 908c 	ldr.w	r9, [pc, #140]	; 426030 <TC_init+0xb0>
  425fa4:	47c8      	blx	r9
	tc_init(TC, TC_CHANNEL, ul_tcclks | TC_CMR_CPCTRG);
  425fa6:	9a02      	ldr	r2, [sp, #8]
  425fa8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  425fac:	4639      	mov	r1, r7
  425fae:	4630      	mov	r0, r6
  425fb0:	4b18      	ldr	r3, [pc, #96]	; (426014 <TC_init+0x94>)
  425fb2:	4798      	blx	r3
	tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq);
  425fb4:	9a03      	ldr	r2, [sp, #12]
  425fb6:	fbb5 f2f2 	udiv	r2, r5, r2
  425fba:	fbb2 f2f8 	udiv	r2, r2, r8
  425fbe:	4639      	mov	r1, r7
  425fc0:	4630      	mov	r0, r6
  425fc2:	4b15      	ldr	r3, [pc, #84]	; (426018 <TC_init+0x98>)
  425fc4:	4798      	blx	r3
	NVIC_SetPriority(ID_TC, 4);
  425fc6:	b263      	sxtb	r3, r4
  if(IRQn < 0) {
  425fc8:	2b00      	cmp	r3, #0
  425fca:	db17      	blt.n	425ffc <TC_init+0x7c>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  425fcc:	4a13      	ldr	r2, [pc, #76]	; (42601c <TC_init+0x9c>)
  425fce:	2180      	movs	r1, #128	; 0x80
  425fd0:	54d1      	strb	r1, [r2, r3]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  425fd2:	095b      	lsrs	r3, r3, #5
  425fd4:	f004 041f 	and.w	r4, r4, #31
  425fd8:	2201      	movs	r2, #1
  425fda:	fa02 f404 	lsl.w	r4, r2, r4
  425fde:	4a10      	ldr	r2, [pc, #64]	; (426020 <TC_init+0xa0>)
  425fe0:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
	tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
  425fe4:	2210      	movs	r2, #16
  425fe6:	4639      	mov	r1, r7
  425fe8:	4630      	mov	r0, r6
  425fea:	4b0e      	ldr	r3, [pc, #56]	; (426024 <TC_init+0xa4>)
  425fec:	4798      	blx	r3
	tc_start(TC, TC_CHANNEL);
  425fee:	4639      	mov	r1, r7
  425ff0:	4630      	mov	r0, r6
  425ff2:	4b0d      	ldr	r3, [pc, #52]	; (426028 <TC_init+0xa8>)
  425ff4:	4798      	blx	r3
}
  425ff6:	b005      	add	sp, #20
  425ff8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  425ffc:	f004 010f 	and.w	r1, r4, #15
  426000:	4a0a      	ldr	r2, [pc, #40]	; (42602c <TC_init+0xac>)
  426002:	440a      	add	r2, r1
  426004:	2180      	movs	r1, #128	; 0x80
  426006:	7611      	strb	r1, [r2, #24]
  426008:	e7e3      	b.n	425fd2 <TC_init+0x52>
  42600a:	bf00      	nop
  42600c:	004252b5 	.word	0x004252b5
  426010:	11e1a300 	.word	0x11e1a300
  426014:	004007bd 	.word	0x004007bd
  426018:	004007df 	.word	0x004007df
  42601c:	e000e400 	.word	0xe000e400
  426020:	e000e100 	.word	0xe000e100
  426024:	004007e7 	.word	0x004007e7
  426028:	004007d7 	.word	0x004007d7
  42602c:	e000ecfc 	.word	0xe000ecfc
  426030:	004007f7 	.word	0x004007f7

00426034 <task_process>:
static void task_process(void *pvParameters) {
  426034:	b570      	push	{r4, r5, r6, lr}
  426036:	b084      	sub	sp, #16
	TC_init(TC1, ID_TC3, 0, 250);
  426038:	23fa      	movs	r3, #250	; 0xfa
  42603a:	2200      	movs	r2, #0
  42603c:	211a      	movs	r1, #26
  42603e:	4826      	ldr	r0, [pc, #152]	; (4260d8 <task_process+0xa4>)
  426040:	4c26      	ldr	r4, [pc, #152]	; (4260dc <task_process+0xa8>)
  426042:	47a0      	blx	r4
	xQueueECG = xQueueCreate(250, sizeof(int));
  426044:	2200      	movs	r2, #0
  426046:	2104      	movs	r1, #4
  426048:	20fa      	movs	r0, #250	; 0xfa
  42604a:	4b25      	ldr	r3, [pc, #148]	; (4260e0 <task_process+0xac>)
  42604c:	4798      	blx	r3
  42604e:	4c25      	ldr	r4, [pc, #148]	; (4260e4 <task_process+0xb0>)
  426050:	6020      	str	r0, [r4, #0]
	RTT_init(pllPreScale, irqRTTvalue);
  426052:	2101      	movs	r1, #1
  426054:	2020      	movs	r0, #32
  426056:	4b24      	ldr	r3, [pc, #144]	; (4260e8 <task_process+0xb4>)
  426058:	4798      	blx	r3
	config_AFEC_pot(AFEC_POT, AFEC_POT_ID, AFEC_POT_CHANNEL, AFEC_pot_Callback);
  42605a:	4b24      	ldr	r3, [pc, #144]	; (4260ec <task_process+0xb8>)
  42605c:	2206      	movs	r2, #6
  42605e:	2128      	movs	r1, #40	; 0x28
  426060:	4823      	ldr	r0, [pc, #140]	; (4260f0 <task_process+0xbc>)
  426062:	4d24      	ldr	r5, [pc, #144]	; (4260f4 <task_process+0xc0>)
  426064:	47a8      	blx	r5
	if (xQueueECG == NULL){
  426066:	6823      	ldr	r3, [r4, #0]
  426068:	b913      	cbnz	r3, 426070 <task_process+0x3c>
		printf("falha em criar a fila \n");
  42606a:	4823      	ldr	r0, [pc, #140]	; (4260f8 <task_process+0xc4>)
  42606c:	4b23      	ldr	r3, [pc, #140]	; (4260fc <task_process+0xc8>)
  42606e:	4798      	blx	r3
static void task_process(void *pvParameters) {
  426070:	2500      	movs	r5, #0
  426072:	e00e      	b.n	426092 <task_process+0x5e>
			if(ecg.value > 3280 && !flag_pico){
  426074:	9903      	ldr	r1, [sp, #12]
  426076:	f5b1 6f4d 	cmp.w	r1, #3280	; 0xcd0
  42607a:	d900      	bls.n	42607e <task_process+0x4a>
  42607c:	b1d5      	cbz	r5, 4260b4 <task_process+0x80>
			ecgi.ecg = ecg.value;
  42607e:	9b03      	ldr	r3, [sp, #12]
  426080:	9301      	str	r3, [sp, #4]
			ecgi.bpm = bpm;
  426082:	9602      	str	r6, [sp, #8]
			xQueueSend(xQueueEcgInfo,&ecgi,0);
  426084:	2300      	movs	r3, #0
  426086:	461a      	mov	r2, r3
  426088:	a901      	add	r1, sp, #4
  42608a:	481d      	ldr	r0, [pc, #116]	; (426100 <task_process+0xcc>)
  42608c:	6800      	ldr	r0, [r0, #0]
  42608e:	4c1d      	ldr	r4, [pc, #116]	; (426104 <task_process+0xd0>)
  426090:	47a0      	blx	r4
		if (xQueueReceive( xQueueECG, &(ecg), ( TickType_t ) 10/ portTICK_PERIOD_MS)) {
  426092:	2300      	movs	r3, #0
  426094:	220a      	movs	r2, #10
  426096:	a903      	add	r1, sp, #12
  426098:	4812      	ldr	r0, [pc, #72]	; (4260e4 <task_process+0xb0>)
  42609a:	6800      	ldr	r0, [r0, #0]
  42609c:	4c1a      	ldr	r4, [pc, #104]	; (426108 <task_process+0xd4>)
  42609e:	47a0      	blx	r4
  4260a0:	2800      	cmp	r0, #0
  4260a2:	d0f6      	beq.n	426092 <task_process+0x5e>
			if (flag_pico && ecg.value <= 3280){
  4260a4:	2d00      	cmp	r5, #0
  4260a6:	d0e5      	beq.n	426074 <task_process+0x40>
  4260a8:	9b03      	ldr	r3, [sp, #12]
  4260aa:	f5b3 6f4d 	cmp.w	r3, #3280	; 0xcd0
  4260ae:	d8e1      	bhi.n	426074 <task_process+0x40>
				flag_pico = 0;
  4260b0:	2500      	movs	r5, #0
  4260b2:	e7df      	b.n	426074 <task_process+0x40>
				printf("%d: %d ms\n", ecg.value, g_dT);
  4260b4:	4c15      	ldr	r4, [pc, #84]	; (42610c <task_process+0xd8>)
  4260b6:	6822      	ldr	r2, [r4, #0]
  4260b8:	4815      	ldr	r0, [pc, #84]	; (426110 <task_process+0xdc>)
  4260ba:	4d10      	ldr	r5, [pc, #64]	; (4260fc <task_process+0xc8>)
  4260bc:	47a8      	blx	r5
				double valor_bpm = 60000/g_dT;
  4260be:	6823      	ldr	r3, [r4, #0]
  4260c0:	f64e 2660 	movw	r6, #60000	; 0xea60
  4260c4:	fb96 f6f3 	sdiv	r6, r6, r3
				printf("bpm: %d\n", bpm);
  4260c8:	4631      	mov	r1, r6
  4260ca:	4812      	ldr	r0, [pc, #72]	; (426114 <task_process+0xe0>)
  4260cc:	47a8      	blx	r5
				g_dT = 0;
  4260ce:	2300      	movs	r3, #0
  4260d0:	6023      	str	r3, [r4, #0]
				flag_pico = 1;
  4260d2:	2501      	movs	r5, #1
  4260d4:	e7d3      	b.n	42607e <task_process+0x4a>
  4260d6:	bf00      	nop
  4260d8:	40010000 	.word	0x40010000
  4260dc:	00425f81 	.word	0x00425f81
  4260e0:	00401e65 	.word	0x00401e65
  4260e4:	2043a40c 	.word	0x2043a40c
  4260e8:	00425b75 	.word	0x00425b75
  4260ec:	00425b31 	.word	0x00425b31
  4260f0:	40064000 	.word	0x40064000
  4260f4:	00425be5 	.word	0x00425be5
  4260f8:	00431790 	.word	0x00431790
  4260fc:	0042783d 	.word	0x0042783d
  426100:	2043a414 	.word	0x2043a414
  426104:	00401ee5 	.word	0x00401ee5
  426108:	004022cd 	.word	0x004022cd
  42610c:	2043a134 	.word	0x2043a134
  426110:	004317a8 	.word	0x004317a8
  426114:	004317b4 	.word	0x004317b4

00426118 <RTT_Handler>:
{
  426118:	b508      	push	{r3, lr}
	ul_status = rtt_get_status(RTT);
  42611a:	4805      	ldr	r0, [pc, #20]	; (426130 <RTT_Handler+0x18>)
  42611c:	4b05      	ldr	r3, [pc, #20]	; (426134 <RTT_Handler+0x1c>)
  42611e:	4798      	blx	r3
	if ((ul_status & RTT_SR_RTTINC) == RTT_SR_RTTINC) {
  426120:	f010 0f02 	tst.w	r0, #2
  426124:	d003      	beq.n	42612e <RTT_Handler+0x16>
		g_dT++;
  426126:	4a04      	ldr	r2, [pc, #16]	; (426138 <RTT_Handler+0x20>)
  426128:	6813      	ldr	r3, [r2, #0]
  42612a:	3301      	adds	r3, #1
  42612c:	6013      	str	r3, [r2, #0]
  42612e:	bd08      	pop	{r3, pc}
  426130:	400e1830 	.word	0x400e1830
  426134:	00400775 	.word	0x00400775
  426138:	2043a134 	.word	0x2043a134

0042613c <RTC_Handler>:
{
  42613c:	b530      	push	{r4, r5, lr}
  42613e:	b083      	sub	sp, #12
	uint32_t ul_status = rtc_get_status(RTC);
  426140:	4812      	ldr	r0, [pc, #72]	; (42618c <RTC_Handler+0x50>)
  426142:	4b13      	ldr	r3, [pc, #76]	; (426190 <RTC_Handler+0x54>)
  426144:	4798      	blx	r3
	if ((ul_status & RTC_SR_SEC) == RTC_SR_SEC) {
  426146:	f010 0f04 	tst.w	r0, #4
  42614a:	d115      	bne.n	426178 <RTC_Handler+0x3c>
	rtc_clear_status(RTC, RTC_SCCR_SECCLR);
  42614c:	4d0f      	ldr	r5, [pc, #60]	; (42618c <RTC_Handler+0x50>)
  42614e:	2104      	movs	r1, #4
  426150:	4628      	mov	r0, r5
  426152:	4c10      	ldr	r4, [pc, #64]	; (426194 <RTC_Handler+0x58>)
  426154:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_ALRCLR);
  426156:	2102      	movs	r1, #2
  426158:	4628      	mov	r0, r5
  42615a:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_ACKCLR);
  42615c:	2101      	movs	r1, #1
  42615e:	4628      	mov	r0, r5
  426160:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TIMCLR);
  426162:	2108      	movs	r1, #8
  426164:	4628      	mov	r0, r5
  426166:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_CALCLR);
  426168:	2110      	movs	r1, #16
  42616a:	4628      	mov	r0, r5
  42616c:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TDERRCLR);
  42616e:	2120      	movs	r1, #32
  426170:	4628      	mov	r0, r5
  426172:	47a0      	blx	r4
}
  426174:	b003      	add	sp, #12
  426176:	bd30      	pop	{r4, r5, pc}
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  426178:	a902      	add	r1, sp, #8
  42617a:	2300      	movs	r3, #0
  42617c:	f841 3d04 	str.w	r3, [r1, #-4]!
		xSemaphoreGiveFromISR(xSemaphore, &xHigherPriorityTaskWoken);
  426180:	4b05      	ldr	r3, [pc, #20]	; (426198 <RTC_Handler+0x5c>)
  426182:	6818      	ldr	r0, [r3, #0]
  426184:	4b05      	ldr	r3, [pc, #20]	; (42619c <RTC_Handler+0x60>)
  426186:	4798      	blx	r3
  426188:	e7e0      	b.n	42614c <RTC_Handler+0x10>
  42618a:	bf00      	nop
  42618c:	400e1860 	.word	0x400e1860
  426190:	004006f5 	.word	0x004006f5
  426194:	004006f9 	.word	0x004006f9
  426198:	2043a418 	.word	0x2043a418
  42619c:	004021d9 	.word	0x004021d9

004261a0 <RTC_init>:
void RTC_init(Rtc *rtc, uint32_t id_rtc, calendar t, uint32_t irq_type){
  4261a0:	b082      	sub	sp, #8
  4261a2:	b570      	push	{r4, r5, r6, lr}
  4261a4:	b082      	sub	sp, #8
  4261a6:	4605      	mov	r5, r0
  4261a8:	460c      	mov	r4, r1
  4261aa:	a906      	add	r1, sp, #24
  4261ac:	e881 000c 	stmia.w	r1, {r2, r3}
	pmc_enable_periph_clk(ID_RTC);
  4261b0:	2002      	movs	r0, #2
  4261b2:	4b1e      	ldr	r3, [pc, #120]	; (42622c <RTC_init+0x8c>)
  4261b4:	4798      	blx	r3
	rtc_set_hour_mode(rtc, 0);
  4261b6:	2100      	movs	r1, #0
  4261b8:	4628      	mov	r0, r5
  4261ba:	4b1d      	ldr	r3, [pc, #116]	; (426230 <RTC_init+0x90>)
  4261bc:	4798      	blx	r3
	rtc_set_date(rtc, t.year, t.month, t.day, t.week);
  4261be:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4261c0:	9300      	str	r3, [sp, #0]
  4261c2:	9b08      	ldr	r3, [sp, #32]
  4261c4:	9a07      	ldr	r2, [sp, #28]
  4261c6:	9906      	ldr	r1, [sp, #24]
  4261c8:	4628      	mov	r0, r5
  4261ca:	4e1a      	ldr	r6, [pc, #104]	; (426234 <RTC_init+0x94>)
  4261cc:	47b0      	blx	r6
	rtc_set_time(rtc, t.hour, t.minute, t.second);
  4261ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4261d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4261d2:	990a      	ldr	r1, [sp, #40]	; 0x28
  4261d4:	4628      	mov	r0, r5
  4261d6:	4e18      	ldr	r6, [pc, #96]	; (426238 <RTC_init+0x98>)
  4261d8:	47b0      	blx	r6
	NVIC_DisableIRQ(id_rtc);
  4261da:	b261      	sxtb	r1, r4
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4261dc:	094a      	lsrs	r2, r1, #5
  4261de:	b2e4      	uxtb	r4, r4
  4261e0:	f004 001f 	and.w	r0, r4, #31
  4261e4:	2301      	movs	r3, #1
  4261e6:	4083      	lsls	r3, r0
  4261e8:	4814      	ldr	r0, [pc, #80]	; (42623c <RTC_init+0x9c>)
  4261ea:	f102 0620 	add.w	r6, r2, #32
  4261ee:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4261f2:	f102 0660 	add.w	r6, r2, #96	; 0x60
  4261f6:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
  if(IRQn < 0) {
  4261fa:	2900      	cmp	r1, #0
  4261fc:	db10      	blt.n	426220 <RTC_init+0x80>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4261fe:	480f      	ldr	r0, [pc, #60]	; (42623c <RTC_init+0x9c>)
  426200:	4408      	add	r0, r1
  426202:	2180      	movs	r1, #128	; 0x80
  426204:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  426208:	490c      	ldr	r1, [pc, #48]	; (42623c <RTC_init+0x9c>)
  42620a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	rtc_enable_interrupt(rtc,  irq_type);
  42620e:	990d      	ldr	r1, [sp, #52]	; 0x34
  426210:	4628      	mov	r0, r5
  426212:	4b0b      	ldr	r3, [pc, #44]	; (426240 <RTC_init+0xa0>)
  426214:	4798      	blx	r3
}
  426216:	b002      	add	sp, #8
  426218:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  42621c:	b002      	add	sp, #8
  42621e:	4770      	bx	lr
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  426220:	f004 040f 	and.w	r4, r4, #15
  426224:	4907      	ldr	r1, [pc, #28]	; (426244 <RTC_init+0xa4>)
  426226:	2080      	movs	r0, #128	; 0x80
  426228:	5508      	strb	r0, [r1, r4]
  42622a:	e7ed      	b.n	426208 <RTC_init+0x68>
  42622c:	004252b5 	.word	0x004252b5
  426230:	00400529 	.word	0x00400529
  426234:	00400635 	.word	0x00400635
  426238:	004005a1 	.word	0x004005a1
  42623c:	e000e100 	.word	0xe000e100
  426240:	0040053f 	.word	0x0040053f
  426244:	e000ed14 	.word	0xe000ed14

00426248 <task_clock>:
static void task_clock(void *pvParameters) {
  426248:	b580      	push	{r7, lr}
  42624a:	b090      	sub	sp, #64	; 0x40
	calendar rtc_initial = {2018, 5, 6, 18, hora, minuto ,1};
  42624c:	f240 73e2 	movw	r3, #2018	; 0x7e2
  426250:	9309      	str	r3, [sp, #36]	; 0x24
  426252:	2305      	movs	r3, #5
  426254:	930a      	str	r3, [sp, #40]	; 0x28
  426256:	2306      	movs	r3, #6
  426258:	930b      	str	r3, [sp, #44]	; 0x2c
  42625a:	2212      	movs	r2, #18
  42625c:	920c      	str	r2, [sp, #48]	; 0x30
  42625e:	4a25      	ldr	r2, [pc, #148]	; (4262f4 <task_clock+0xac>)
  426260:	6812      	ldr	r2, [r2, #0]
  426262:	920d      	str	r2, [sp, #52]	; 0x34
  426264:	4a24      	ldr	r2, [pc, #144]	; (4262f8 <task_clock+0xb0>)
  426266:	6812      	ldr	r2, [r2, #0]
  426268:	920e      	str	r2, [sp, #56]	; 0x38
  42626a:	2701      	movs	r7, #1
  42626c:	970f      	str	r7, [sp, #60]	; 0x3c
	RTC_init(RTC, ID_RTC, rtc_initial, RTC_IER_ALREN | RTC_IER_SECEN);
  42626e:	4e23      	ldr	r6, [pc, #140]	; (4262fc <task_clock+0xb4>)
  426270:	9305      	str	r3, [sp, #20]
  426272:	466c      	mov	r4, sp
  426274:	ad0b      	add	r5, sp, #44	; 0x2c
  426276:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  426278:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  42627a:	6027      	str	r7, [r4, #0]
  42627c:	ab09      	add	r3, sp, #36	; 0x24
  42627e:	cb0c      	ldmia	r3, {r2, r3}
  426280:	2102      	movs	r1, #2
  426282:	4630      	mov	r0, r6
  426284:	4c1e      	ldr	r4, [pc, #120]	; (426300 <task_clock+0xb8>)
  426286:	47a0      	blx	r4
	rtc_get_time(RTC, &hour, &minute, &second);
  426288:	ab06      	add	r3, sp, #24
  42628a:	aa07      	add	r2, sp, #28
  42628c:	a908      	add	r1, sp, #32
  42628e:	4630      	mov	r0, r6
  426290:	4c1c      	ldr	r4, [pc, #112]	; (426304 <task_clock+0xbc>)
  426292:	47a0      	blx	r4
  426294:	e012      	b.n	4262bc <task_clock+0x74>
				rtc_get_time(RTC, &hour, &minute, &second);
  426296:	ab06      	add	r3, sp, #24
  426298:	aa07      	add	r2, sp, #28
  42629a:	a908      	add	r1, sp, #32
  42629c:	4817      	ldr	r0, [pc, #92]	; (4262fc <task_clock+0xb4>)
  42629e:	4c19      	ldr	r4, [pc, #100]	; (426304 <task_clock+0xbc>)
  4262a0:	47a0      	blx	r4
				lv_label_set_text_fmt(labelTempo, "%02d # # %02d",hour,minute);
  4262a2:	9b07      	ldr	r3, [sp, #28]
  4262a4:	9a08      	ldr	r2, [sp, #32]
  4262a6:	4918      	ldr	r1, [pc, #96]	; (426308 <task_clock+0xc0>)
  4262a8:	4818      	ldr	r0, [pc, #96]	; (42630c <task_clock+0xc4>)
  4262aa:	6800      	ldr	r0, [r0, #0]
  4262ac:	4c18      	ldr	r4, [pc, #96]	; (426310 <task_clock+0xc8>)
  4262ae:	47a0      	blx	r4
			flag_dot=!flag_dot;
  4262b0:	4a18      	ldr	r2, [pc, #96]	; (426314 <task_clock+0xcc>)
  4262b2:	7813      	ldrb	r3, [r2, #0]
  4262b4:	fab3 f383 	clz	r3, r3
  4262b8:	095b      	lsrs	r3, r3, #5
  4262ba:	7013      	strb	r3, [r2, #0]
		if( xSemaphoreTake(xSemaphore, ( TickType_t ) 10 / portTICK_PERIOD_MS) == pdTRUE ){
  4262bc:	2300      	movs	r3, #0
  4262be:	220a      	movs	r2, #10
  4262c0:	4619      	mov	r1, r3
  4262c2:	4815      	ldr	r0, [pc, #84]	; (426318 <task_clock+0xd0>)
  4262c4:	6800      	ldr	r0, [r0, #0]
  4262c6:	4c15      	ldr	r4, [pc, #84]	; (42631c <task_clock+0xd4>)
  4262c8:	47a0      	blx	r4
  4262ca:	2801      	cmp	r0, #1
  4262cc:	d1f6      	bne.n	4262bc <task_clock+0x74>
			if(flag_dot==1){
  4262ce:	4b11      	ldr	r3, [pc, #68]	; (426314 <task_clock+0xcc>)
  4262d0:	781b      	ldrb	r3, [r3, #0]
  4262d2:	b2db      	uxtb	r3, r3
  4262d4:	2b01      	cmp	r3, #1
  4262d6:	d0de      	beq.n	426296 <task_clock+0x4e>
				rtc_get_time(RTC, &hour, &minute, &second);
  4262d8:	ab06      	add	r3, sp, #24
  4262da:	aa07      	add	r2, sp, #28
  4262dc:	a908      	add	r1, sp, #32
  4262de:	4807      	ldr	r0, [pc, #28]	; (4262fc <task_clock+0xb4>)
  4262e0:	4c08      	ldr	r4, [pc, #32]	; (426304 <task_clock+0xbc>)
  4262e2:	47a0      	blx	r4
				lv_label_set_text_fmt(labelTempo, "%02d : %02d",hour,minute);
  4262e4:	9b07      	ldr	r3, [sp, #28]
  4262e6:	9a08      	ldr	r2, [sp, #32]
  4262e8:	490d      	ldr	r1, [pc, #52]	; (426320 <task_clock+0xd8>)
  4262ea:	4808      	ldr	r0, [pc, #32]	; (42630c <task_clock+0xc4>)
  4262ec:	6800      	ldr	r0, [r0, #0]
  4262ee:	4c08      	ldr	r4, [pc, #32]	; (426310 <task_clock+0xc8>)
  4262f0:	47a0      	blx	r4
  4262f2:	e7dd      	b.n	4262b0 <task_clock+0x68>
  4262f4:	2043a410 	.word	0x2043a410
  4262f8:	2043a408 	.word	0x2043a408
  4262fc:	400e1860 	.word	0x400e1860
  426300:	004261a1 	.word	0x004261a1
  426304:	00400543 	.word	0x00400543
  426308:	00431764 	.word	0x00431764
  42630c:	2043a15c 	.word	0x2043a15c
  426310:	00423bcd 	.word	0x00423bcd
  426314:	2043a130 	.word	0x2043a130
  426318:	2043a418 	.word	0x2043a418
  42631c:	004022cd 	.word	0x004022cd
  426320:	00431774 	.word	0x00431774

00426324 <lv_principal>:
void lv_principal(void){
  426324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  426328:	b085      	sub	sp, #20
  42632a:	4daf      	ldr	r5, [pc, #700]	; (4265e8 <lv_principal+0x2c4>)
  42632c:	47a8      	blx	r5
  42632e:	4caf      	ldr	r4, [pc, #700]	; (4265ec <lv_principal+0x2c8>)
  426330:	47a0      	blx	r4
	lv_obj_set_style_local_bg_color(lv_scr_act(), LV_OBJ_PART_MAIN, LV_STATE_DEFAULT, LV_COLOR_WHITE);
  426332:	f8df 8314 	ldr.w	r8, [pc, #788]	; 426648 <lv_principal+0x324>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  426336:	f8b8 3010 	ldrh.w	r3, [r8, #16]
  42633a:	2229      	movs	r2, #41	; 0x29
  42633c:	2100      	movs	r1, #0
  42633e:	4eac      	ldr	r6, [pc, #688]	; (4265f0 <lv_principal+0x2cc>)
  426340:	47b0      	blx	r6
  426342:	47a8      	blx	r5
  426344:	47a0      	blx	r4
	lv_obj_t * img2 = lv_img_create(lv_scr_act(), NULL);
  426346:	2100      	movs	r1, #0
  426348:	4baa      	ldr	r3, [pc, #680]	; (4265f4 <lv_principal+0x2d0>)
  42634a:	4798      	blx	r3
  42634c:	4606      	mov	r6, r0
	lv_img_set_src(img2, &miniLogo);
  42634e:	49aa      	ldr	r1, [pc, #680]	; (4265f8 <lv_principal+0x2d4>)
  426350:	4baa      	ldr	r3, [pc, #680]	; (4265fc <lv_principal+0x2d8>)
  426352:	4798      	blx	r3
	lv_obj_align(img2, NULL, LV_ALIGN_IN_TOP_RIGHT, -10, 5);
  426354:	2305      	movs	r3, #5
  426356:	9300      	str	r3, [sp, #0]
  426358:	f06f 0309 	mvn.w	r3, #9
  42635c:	2203      	movs	r2, #3
  42635e:	2100      	movs	r1, #0
  426360:	4630      	mov	r0, r6
  426362:	4ea7      	ldr	r6, [pc, #668]	; (426600 <lv_principal+0x2dc>)
  426364:	47b0      	blx	r6
  426366:	47a8      	blx	r5
  426368:	47a0      	blx	r4
	lv_obj_t * btnPower = lv_btn_create(lv_scr_act(), NULL);
  42636a:	2100      	movs	r1, #0
  42636c:	4ba5      	ldr	r3, [pc, #660]	; (426604 <lv_principal+0x2e0>)
  42636e:	4798      	blx	r3
  426370:	4607      	mov	r7, r0
	lv_obj_set_event_cb(btnPower, event_handler);
  426372:	49a5      	ldr	r1, [pc, #660]	; (426608 <lv_principal+0x2e4>)
  426374:	4ba5      	ldr	r3, [pc, #660]	; (42660c <lv_principal+0x2e8>)
  426376:	4798      	blx	r3
	lv_obj_set_width(btnPower, 40);  lv_obj_set_height(btnPower, 40);
  426378:	2128      	movs	r1, #40	; 0x28
  42637a:	4638      	mov	r0, r7
  42637c:	f8df b2cc 	ldr.w	fp, [pc, #716]	; 42664c <lv_principal+0x328>
  426380:	47d8      	blx	fp
  426382:	2128      	movs	r1, #40	; 0x28
  426384:	4638      	mov	r0, r7
  426386:	4ba2      	ldr	r3, [pc, #648]	; (426610 <lv_principal+0x2ec>)
  426388:	4798      	blx	r3
	lv_obj_align(btnPower, NULL, LV_ALIGN_IN_BOTTOM_RIGHT, -10, -10);
  42638a:	f06f 0309 	mvn.w	r3, #9
  42638e:	9300      	str	r3, [sp, #0]
  426390:	2206      	movs	r2, #6
  426392:	2100      	movs	r1, #0
  426394:	4638      	mov	r0, r7
  426396:	47b0      	blx	r6
	lv_obj_set_style_local_bg_color(btnPower, LV_OBJ_PART_MAIN, LV_STATE_DEFAULT, LV_COLOR_ROZINHA );
  426398:	f8b8 3014 	ldrh.w	r3, [r8, #20]
  42639c:	4698      	mov	r8, r3
  42639e:	2229      	movs	r2, #41	; 0x29
  4263a0:	2100      	movs	r1, #0
  4263a2:	4638      	mov	r0, r7
  4263a4:	4e92      	ldr	r6, [pc, #584]	; (4265f0 <lv_principal+0x2cc>)
  4263a6:	47b0      	blx	r6
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  4263a8:	f8ad 800e 	strh.w	r8, [sp, #14]
  4263ac:	4643      	mov	r3, r8
  4263ae:	2239      	movs	r2, #57	; 0x39
  4263b0:	2100      	movs	r1, #0
  4263b2:	4638      	mov	r0, r7
  4263b4:	47b0      	blx	r6
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  4263b6:	2300      	movs	r3, #0
  4263b8:	2230      	movs	r2, #48	; 0x30
  4263ba:	4619      	mov	r1, r3
  4263bc:	4638      	mov	r0, r7
  4263be:	f8df 8290 	ldr.w	r8, [pc, #656]	; 426650 <lv_principal+0x32c>
  4263c2:	47c0      	blx	r8
	labelPower = lv_label_create(btnPower, NULL);
  4263c4:	2100      	movs	r1, #0
  4263c6:	4638      	mov	r0, r7
  4263c8:	4f92      	ldr	r7, [pc, #584]	; (426614 <lv_principal+0x2f0>)
  4263ca:	47b8      	blx	r7
  4263cc:	f8df 8284 	ldr.w	r8, [pc, #644]	; 426654 <lv_principal+0x330>
  4263d0:	f8c8 0000 	str.w	r0, [r8]
	lv_label_set_recolor(labelPower, true);
  4263d4:	2101      	movs	r1, #1
  4263d6:	f8df 9280 	ldr.w	r9, [pc, #640]	; 426658 <lv_principal+0x334>
  4263da:	47c8      	blx	r9
	lv_label_set_text(labelPower, "#ffffff  " LV_SYMBOL_POWER " ");
  4263dc:	498e      	ldr	r1, [pc, #568]	; (426618 <lv_principal+0x2f4>)
  4263de:	f8d8 0000 	ldr.w	r0, [r8]
  4263e2:	f8df 8278 	ldr.w	r8, [pc, #632]	; 42665c <lv_principal+0x338>
  4263e6:	47c0      	blx	r8
  4263e8:	47a8      	blx	r5
  4263ea:	47a0      	blx	r4
	lv_obj_t * labelBat = lv_label_create(lv_scr_act(), NULL);
  4263ec:	2100      	movs	r1, #0
  4263ee:	47b8      	blx	r7
  4263f0:	4682      	mov	sl, r0
	lv_label_set_long_mode(labelBat, LV_LABEL_LONG_BREAK);
  4263f2:	2101      	movs	r1, #1
  4263f4:	4a89      	ldr	r2, [pc, #548]	; (42661c <lv_principal+0x2f8>)
  4263f6:	4790      	blx	r2
	lv_label_set_recolor(labelBat, true);
  4263f8:	2101      	movs	r1, #1
  4263fa:	4650      	mov	r0, sl
  4263fc:	47c8      	blx	r9
	lv_obj_align(labelBat, NULL, LV_ALIGN_IN_TOP_RIGHT, -80, 25);
  4263fe:	2219      	movs	r2, #25
  426400:	9200      	str	r2, [sp, #0]
  426402:	f06f 034f 	mvn.w	r3, #79	; 0x4f
  426406:	2203      	movs	r2, #3
  426408:	2100      	movs	r1, #0
  42640a:	4650      	mov	r0, sl
  42640c:	4e7c      	ldr	r6, [pc, #496]	; (426600 <lv_principal+0x2dc>)
  42640e:	47b0      	blx	r6
	lv_label_set_text(labelBat, "#2D9613  " LV_SYMBOL_BATTERY_3 " 76% ");
  426410:	4983      	ldr	r1, [pc, #524]	; (426620 <lv_principal+0x2fc>)
  426412:	4650      	mov	r0, sl
  426414:	47c0      	blx	r8
	lv_obj_set_width(labelBat, 150);
  426416:	2196      	movs	r1, #150	; 0x96
  426418:	4650      	mov	r0, sl
  42641a:	47d8      	blx	fp
  42641c:	47a8      	blx	r5
  42641e:	47a0      	blx	r4
	labelTempo = lv_label_create(lv_scr_act(), NULL);
  426420:	2100      	movs	r1, #0
  426422:	47b8      	blx	r7
  426424:	f8df a238 	ldr.w	sl, [pc, #568]	; 426660 <lv_principal+0x33c>
  426428:	f8ca 0000 	str.w	r0, [sl]
	lv_label_set_long_mode(labelTempo, LV_LABEL_LONG_BREAK);
  42642c:	2101      	movs	r1, #1
  42642e:	4a7b      	ldr	r2, [pc, #492]	; (42661c <lv_principal+0x2f8>)
  426430:	4790      	blx	r2
	lv_label_set_recolor(labelTempo, true);
  426432:	2101      	movs	r1, #1
  426434:	f8da 0000 	ldr.w	r0, [sl]
  426438:	47c8      	blx	r9
	lv_obj_align(labelTempo, NULL, LV_ALIGN_IN_TOP_MID, 0, 25);
  42643a:	2219      	movs	r2, #25
  42643c:	9200      	str	r2, [sp, #0]
  42643e:	2300      	movs	r3, #0
  426440:	2202      	movs	r2, #2
  426442:	4619      	mov	r1, r3
  426444:	f8da 0000 	ldr.w	r0, [sl]
  426448:	47b0      	blx	r6
	lv_obj_set_width(labelTempo, 150);
  42644a:	2196      	movs	r1, #150	; 0x96
  42644c:	f8da 0000 	ldr.w	r0, [sl]
  426450:	47d8      	blx	fp
  426452:	47a8      	blx	r5
  426454:	47a0      	blx	r4
	lv_obj_t * labelOx = lv_label_create(lv_scr_act(), NULL);
  426456:	2100      	movs	r1, #0
  426458:	47b8      	blx	r7
  42645a:	4682      	mov	sl, r0
	lv_label_set_long_mode(labelOx, LV_LABEL_LONG_BREAK);
  42645c:	2101      	movs	r1, #1
  42645e:	4a6f      	ldr	r2, [pc, #444]	; (42661c <lv_principal+0x2f8>)
  426460:	4790      	blx	r2
	lv_label_set_recolor(labelOx, true);
  426462:	2101      	movs	r1, #1
  426464:	4650      	mov	r0, sl
  426466:	47c8      	blx	r9
	lv_obj_align(labelOx, NULL, LV_ALIGN_IN_LEFT_MID, 40, 20);
  426468:	2314      	movs	r3, #20
  42646a:	9300      	str	r3, [sp, #0]
  42646c:	2328      	movs	r3, #40	; 0x28
  42646e:	2207      	movs	r2, #7
  426470:	2100      	movs	r1, #0
  426472:	4650      	mov	r0, sl
  426474:	47b0      	blx	r6
	lv_label_set_text(labelOx, "#000000 OXIGENIO");
  426476:	496b      	ldr	r1, [pc, #428]	; (426624 <lv_principal+0x300>)
  426478:	4650      	mov	r0, sl
  42647a:	47c0      	blx	r8
	lv_obj_set_width(labelOx, 150);
  42647c:	2196      	movs	r1, #150	; 0x96
  42647e:	4650      	mov	r0, sl
  426480:	47d8      	blx	fp
  426482:	47a8      	blx	r5
  426484:	47a0      	blx	r4
	labelOxNum = lv_label_create(lv_scr_act(), NULL);
  426486:	2100      	movs	r1, #0
  426488:	47b8      	blx	r7
  42648a:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 426664 <lv_principal+0x340>
  42648e:	f8ca 0000 	str.w	r0, [sl]
	lv_obj_align(labelOxNum, NULL, LV_ALIGN_IN_LEFT_MID, 40 , 42);
  426492:	232a      	movs	r3, #42	; 0x2a
  426494:	9300      	str	r3, [sp, #0]
  426496:	2328      	movs	r3, #40	; 0x28
  426498:	2207      	movs	r2, #7
  42649a:	2100      	movs	r1, #0
  42649c:	47b0      	blx	r6
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  42649e:	4b62      	ldr	r3, [pc, #392]	; (426628 <lv_principal+0x304>)
  4264a0:	f248 028e 	movw	r2, #32910	; 0x808e
  4264a4:	2100      	movs	r1, #0
  4264a6:	f8da 0000 	ldr.w	r0, [sl]
  4264aa:	4e60      	ldr	r6, [pc, #384]	; (42662c <lv_principal+0x308>)
  4264ac:	47b0      	blx	r6
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  4264ae:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  4264b2:	f248 0289 	movw	r2, #32905	; 0x8089
  4264b6:	2100      	movs	r1, #0
  4264b8:	f8da 0000 	ldr.w	r0, [sl]
  4264bc:	4e4c      	ldr	r6, [pc, #304]	; (4265f0 <lv_principal+0x2cc>)
  4264be:	47b0      	blx	r6
  4264c0:	47a8      	blx	r5
  4264c2:	47a0      	blx	r4
	lv_obj_t * labelOxUni = lv_label_create(lv_scr_act(), NULL);
  4264c4:	2100      	movs	r1, #0
  4264c6:	47b8      	blx	r7
  4264c8:	4682      	mov	sl, r0
	lv_label_set_long_mode(labelOxUni, LV_LABEL_LONG_BREAK);
  4264ca:	2101      	movs	r1, #1
  4264cc:	4b53      	ldr	r3, [pc, #332]	; (42661c <lv_principal+0x2f8>)
  4264ce:	4798      	blx	r3
	lv_label_set_recolor(labelOxUni, true);
  4264d0:	2101      	movs	r1, #1
  4264d2:	4650      	mov	r0, sl
  4264d4:	47c8      	blx	r9
	lv_obj_align(labelOxUni, NULL, LV_ALIGN_IN_LEFT_MID, 105, 60);
  4264d6:	233c      	movs	r3, #60	; 0x3c
  4264d8:	9300      	str	r3, [sp, #0]
  4264da:	2369      	movs	r3, #105	; 0x69
  4264dc:	2207      	movs	r2, #7
  4264de:	2100      	movs	r1, #0
  4264e0:	4650      	mov	r0, sl
  4264e2:	4e47      	ldr	r6, [pc, #284]	; (426600 <lv_principal+0x2dc>)
  4264e4:	47b0      	blx	r6
	lv_label_set_text(labelOxUni, "#CA1041 SpO2%");
  4264e6:	4952      	ldr	r1, [pc, #328]	; (426630 <lv_principal+0x30c>)
  4264e8:	4650      	mov	r0, sl
  4264ea:	47c0      	blx	r8
	lv_obj_set_width(labelOxUni, 150);
  4264ec:	2196      	movs	r1, #150	; 0x96
  4264ee:	4650      	mov	r0, sl
  4264f0:	47d8      	blx	fp
  4264f2:	47a8      	blx	r5
  4264f4:	47a0      	blx	r4
	lv_obj_t * labelBa = lv_label_create(lv_scr_act(), NULL);
  4264f6:	2100      	movs	r1, #0
  4264f8:	47b8      	blx	r7
  4264fa:	4682      	mov	sl, r0
	lv_label_set_long_mode(labelBa, LV_LABEL_LONG_BREAK);
  4264fc:	2101      	movs	r1, #1
  4264fe:	4b47      	ldr	r3, [pc, #284]	; (42661c <lv_principal+0x2f8>)
  426500:	4798      	blx	r3
	lv_label_set_recolor(labelBa, true);
  426502:	2101      	movs	r1, #1
  426504:	4650      	mov	r0, sl
  426506:	47c8      	blx	r9
	lv_obj_align(labelBa, NULL, LV_ALIGN_IN_LEFT_MID, 40, -50);
  426508:	f06f 0331 	mvn.w	r3, #49	; 0x31
  42650c:	9300      	str	r3, [sp, #0]
  42650e:	2328      	movs	r3, #40	; 0x28
  426510:	2207      	movs	r2, #7
  426512:	2100      	movs	r1, #0
  426514:	4650      	mov	r0, sl
  426516:	47b0      	blx	r6
	lv_label_set_text(labelBa, "#000000 BATIMENTOS");
  426518:	4946      	ldr	r1, [pc, #280]	; (426634 <lv_principal+0x310>)
  42651a:	4650      	mov	r0, sl
  42651c:	47c0      	blx	r8
	lv_obj_set_width(labelBa, 150);
  42651e:	2196      	movs	r1, #150	; 0x96
  426520:	4650      	mov	r0, sl
  426522:	47d8      	blx	fp
  426524:	47a8      	blx	r5
  426526:	47a0      	blx	r4
	labelBaNum = lv_label_create(lv_scr_act(), NULL);
  426528:	2100      	movs	r1, #0
  42652a:	47b8      	blx	r7
  42652c:	f8df a138 	ldr.w	sl, [pc, #312]	; 426668 <lv_principal+0x344>
  426530:	f8ca 0000 	str.w	r0, [sl]
	lv_obj_align(labelBaNum, NULL, LV_ALIGN_IN_LEFT_MID, 40 , -28);
  426534:	f06f 031b 	mvn.w	r3, #27
  426538:	9300      	str	r3, [sp, #0]
  42653a:	2328      	movs	r3, #40	; 0x28
  42653c:	2207      	movs	r2, #7
  42653e:	2100      	movs	r1, #0
  426540:	47b0      	blx	r6
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  426542:	4b39      	ldr	r3, [pc, #228]	; (426628 <lv_principal+0x304>)
  426544:	f248 028e 	movw	r2, #32910	; 0x808e
  426548:	2100      	movs	r1, #0
  42654a:	f8da 0000 	ldr.w	r0, [sl]
  42654e:	4e37      	ldr	r6, [pc, #220]	; (42662c <lv_principal+0x308>)
  426550:	47b0      	blx	r6
	lv_obj_set_style_local_text_color(labelBaNum, LV_OBJ_PART_MAIN, LV_STATE_DEFAULT, LV_COLOR_GREEN);
  426552:	f04f 0300 	mov.w	r3, #0
  426556:	2204      	movs	r2, #4
  426558:	f362 0302 	bfi	r3, r2, #0, #3
  42655c:	f36f 03c7 	bfc	r3, #3, #5
  426560:	f36f 230c 	bfc	r3, #8, #5
  426564:	f36f 334f 	bfc	r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  426568:	f248 0289 	movw	r2, #32905	; 0x8089
  42656c:	2100      	movs	r1, #0
  42656e:	f8da 0000 	ldr.w	r0, [sl]
  426572:	4e1f      	ldr	r6, [pc, #124]	; (4265f0 <lv_principal+0x2cc>)
  426574:	47b0      	blx	r6
  426576:	47a8      	blx	r5
  426578:	47a0      	blx	r4
	lv_obj_t *labelBaUni = lv_label_create(lv_scr_act(), NULL);
  42657a:	2100      	movs	r1, #0
  42657c:	47b8      	blx	r7
  42657e:	4682      	mov	sl, r0
	lv_label_set_long_mode(labelBaUni, LV_LABEL_LONG_BREAK);
  426580:	2101      	movs	r1, #1
  426582:	4b26      	ldr	r3, [pc, #152]	; (42661c <lv_principal+0x2f8>)
  426584:	4798      	blx	r3
	lv_label_set_recolor(labelBaUni, true);
  426586:	2101      	movs	r1, #1
  426588:	4650      	mov	r0, sl
  42658a:	47c8      	blx	r9
	lv_obj_align(labelBaUni, NULL, LV_ALIGN_IN_LEFT_MID, 97, -13);
  42658c:	f06f 030c 	mvn.w	r3, #12
  426590:	9300      	str	r3, [sp, #0]
  426592:	2361      	movs	r3, #97	; 0x61
  426594:	2207      	movs	r2, #7
  426596:	2100      	movs	r1, #0
  426598:	4650      	mov	r0, sl
  42659a:	4e19      	ldr	r6, [pc, #100]	; (426600 <lv_principal+0x2dc>)
  42659c:	47b0      	blx	r6
	lv_label_set_text(labelBaUni, "#2D9613 BPM");
  42659e:	4926      	ldr	r1, [pc, #152]	; (426638 <lv_principal+0x314>)
  4265a0:	4650      	mov	r0, sl
  4265a2:	47c0      	blx	r8
	lv_obj_set_width(labelBaUni, 150);
  4265a4:	2196      	movs	r1, #150	; 0x96
  4265a6:	4650      	mov	r0, sl
  4265a8:	47d8      	blx	fp
  4265aa:	47a8      	blx	r5
  4265ac:	47a0      	blx	r4
	lv_obj_t * btnSalvar = lv_btn_create(lv_scr_act(), NULL);
  4265ae:	2100      	movs	r1, #0
  4265b0:	4b14      	ldr	r3, [pc, #80]	; (426604 <lv_principal+0x2e0>)
  4265b2:	4798      	blx	r3
  4265b4:	4604      	mov	r4, r0
	lv_obj_set_size(btnSalvar, 70, 25);
  4265b6:	2219      	movs	r2, #25
  4265b8:	2146      	movs	r1, #70	; 0x46
  4265ba:	4b20      	ldr	r3, [pc, #128]	; (42663c <lv_principal+0x318>)
  4265bc:	4798      	blx	r3
	lv_obj_set_event_cb(btnSalvar, event_handlerSalvar);
  4265be:	4920      	ldr	r1, [pc, #128]	; (426640 <lv_principal+0x31c>)
  4265c0:	4620      	mov	r0, r4
  4265c2:	4b12      	ldr	r3, [pc, #72]	; (42660c <lv_principal+0x2e8>)
  4265c4:	4798      	blx	r3
	lv_obj_align(btnSalvar, NULL, LV_ALIGN_IN_BOTTOM_LEFT, 140, -10);
  4265c6:	f06f 0309 	mvn.w	r3, #9
  4265ca:	9300      	str	r3, [sp, #0]
  4265cc:	238c      	movs	r3, #140	; 0x8c
  4265ce:	2204      	movs	r2, #4
  4265d0:	2100      	movs	r1, #0
  4265d2:	4620      	mov	r0, r4
  4265d4:	47b0      	blx	r6
	labelSalvar = lv_label_create(btnSalvar, NULL);
  4265d6:	2100      	movs	r1, #0
  4265d8:	4620      	mov	r0, r4
  4265da:	47b8      	blx	r7
	lv_label_set_text(labelSalvar, "Salvar");
  4265dc:	4919      	ldr	r1, [pc, #100]	; (426644 <lv_principal+0x320>)
  4265de:	47c0      	blx	r8
}
  4265e0:	b005      	add	sp, #20
  4265e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4265e6:	bf00      	nop
  4265e8:	00414d95 	.word	0x00414d95
  4265ec:	00403659 	.word	0x00403659
  4265f0:	00407a41 	.word	0x00407a41
  4265f4:	004227f9 	.word	0x004227f9
  4265f8:	0042ba5c 	.word	0x0042ba5c
  4265fc:	00422619 	.word	0x00422619
  426600:	00406241 	.word	0x00406241
  426604:	0041db95 	.word	0x0041db95
  426608:	00425889 	.word	0x00425889
  42660c:	004057e9 	.word	0x004057e9
  426610:	00406dad 	.word	0x00406dad
  426614:	00423dd5 	.word	0x00423dd5
  426618:	00431628 	.word	0x00431628
  42661c:	00423ccd 	.word	0x00423ccd
  426620:	00431638 	.word	0x00431638
  426624:	0043164c 	.word	0x0043164c
  426628:	2040000c 	.word	0x2040000c
  42662c:	00407ac1 	.word	0x00407ac1
  426630:	00431660 	.word	0x00431660
  426634:	00431670 	.word	0x00431670
  426638:	00431684 	.word	0x00431684
  42663c:	00406c79 	.word	0x00406c79
  426640:	00425851 	.word	0x00425851
  426644:	00431690 	.word	0x00431690
  426648:	0042fec4 	.word	0x0042fec4
  42664c:	00406d6d 	.word	0x00406d6d
  426650:	00407a01 	.word	0x00407a01
  426654:	2043a158 	.word	0x2043a158
  426658:	00423d81 	.word	0x00423d81
  42665c:	00423ad1 	.word	0x00423ad1
  426660:	2043a15c 	.word	0x2043a15c
  426664:	2043a154 	.word	0x2043a154
  426668:	2043a14c 	.word	0x2043a14c

0042666c <lv_screen_chart>:
void lv_screen_chart(void) {
  42666c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  426670:	b082      	sub	sp, #8
  426672:	f8df 915c 	ldr.w	r9, [pc, #348]	; 4267d0 <lv_screen_chart+0x164>
  426676:	47c8      	blx	r9
  426678:	f8df 8158 	ldr.w	r8, [pc, #344]	; 4267d4 <lv_screen_chart+0x168>
  42667c:	47c0      	blx	r8
	chart = lv_chart_create(lv_scr_act(), NULL);
  42667e:	2100      	movs	r1, #0
  426680:	4b40      	ldr	r3, [pc, #256]	; (426784 <lv_screen_chart+0x118>)
  426682:	4798      	blx	r3
  426684:	4c40      	ldr	r4, [pc, #256]	; (426788 <lv_screen_chart+0x11c>)
  426686:	6020      	str	r0, [r4, #0]
	lv_obj_set_size(chart, 110, 40);
  426688:	2228      	movs	r2, #40	; 0x28
  42668a:	216e      	movs	r1, #110	; 0x6e
  42668c:	4b3f      	ldr	r3, [pc, #252]	; (42678c <lv_screen_chart+0x120>)
  42668e:	4798      	blx	r3
	lv_obj_align(chart, NULL, LV_ALIGN_IN_TOP_MID, 45, 80);
  426690:	2350      	movs	r3, #80	; 0x50
  426692:	9300      	str	r3, [sp, #0]
  426694:	232d      	movs	r3, #45	; 0x2d
  426696:	2202      	movs	r2, #2
  426698:	2100      	movs	r1, #0
  42669a:	6820      	ldr	r0, [r4, #0]
  42669c:	4f3c      	ldr	r7, [pc, #240]	; (426790 <lv_screen_chart+0x124>)
  42669e:	47b8      	blx	r7
	lv_chart_set_type(chart, LV_CHART_TYPE_LINE);
  4266a0:	2101      	movs	r1, #1
  4266a2:	6820      	ldr	r0, [r4, #0]
  4266a4:	4b3b      	ldr	r3, [pc, #236]	; (426794 <lv_screen_chart+0x128>)
  4266a6:	4798      	blx	r3
#endif

#if LV_USE_CHART
static inline void lv_chart_set_range(lv_obj_t * chart, lv_coord_t ymin, lv_coord_t ymax)
{
    lv_chart_set_y_range(chart, LV_CHART_AXIS_PRIMARY_Y, ymin,  ymax);
  4266a8:	f640 73ff 	movw	r3, #4095	; 0xfff
  4266ac:	2200      	movs	r2, #0
  4266ae:	4611      	mov	r1, r2
  4266b0:	6820      	ldr	r0, [r4, #0]
  4266b2:	4d39      	ldr	r5, [pc, #228]	; (426798 <lv_screen_chart+0x12c>)
  4266b4:	47a8      	blx	r5
	lv_chart_set_point_count(chart, CHAR_DATA_LEN);
  4266b6:	21fa      	movs	r1, #250	; 0xfa
  4266b8:	6820      	ldr	r0, [r4, #0]
  4266ba:	4b38      	ldr	r3, [pc, #224]	; (42679c <lv_screen_chart+0x130>)
  4266bc:	4798      	blx	r3
	lv_chart_set_div_line_count(chart, 0, 0);
  4266be:	2200      	movs	r2, #0
  4266c0:	4611      	mov	r1, r2
  4266c2:	6820      	ldr	r0, [r4, #0]
  4266c4:	4b36      	ldr	r3, [pc, #216]	; (4267a0 <lv_screen_chart+0x134>)
  4266c6:	4798      	blx	r3
	lv_chart_set_update_mode(chart, LV_CHART_UPDATE_MODE_SHIFT);
  4266c8:	2100      	movs	r1, #0
  4266ca:	6820      	ldr	r0, [r4, #0]
  4266cc:	4b35      	ldr	r3, [pc, #212]	; (4267a4 <lv_screen_chart+0x138>)
  4266ce:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  4266d0:	237f      	movs	r3, #127	; 0x7f
  4266d2:	222c      	movs	r2, #44	; 0x2c
  4266d4:	2102      	movs	r1, #2
  4266d6:	6820      	ldr	r0, [r4, #0]
  4266d8:	4d33      	ldr	r5, [pc, #204]	; (4267a8 <lv_screen_chart+0x13c>)
  4266da:	47a8      	blx	r5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
  4266dc:	2301      	movs	r3, #1
  4266de:	2223      	movs	r2, #35	; 0x23
  4266e0:	2102      	movs	r1, #2
  4266e2:	6820      	ldr	r0, [r4, #0]
  4266e4:	4d31      	ldr	r5, [pc, #196]	; (4267ac <lv_screen_chart+0x140>)
  4266e6:	47a8      	blx	r5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
  4266e8:	23ff      	movs	r3, #255	; 0xff
  4266ea:	2221      	movs	r2, #33	; 0x21
  4266ec:	2102      	movs	r1, #2
  4266ee:	6820      	ldr	r0, [r4, #0]
  4266f0:	47a8      	blx	r5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
  4266f2:	2300      	movs	r3, #0
  4266f4:	2222      	movs	r2, #34	; 0x22
  4266f6:	2102      	movs	r1, #2
  4266f8:	6820      	ldr	r0, [r4, #0]
  4266fa:	47a8      	blx	r5
	ser1 = lv_chart_add_series(chart, LV_COLOR_GREEN);
  4266fc:	2604      	movs	r6, #4
  4266fe:	f04f 0100 	mov.w	r1, #0
  426702:	f366 0102 	bfi	r1, r6, #0, #3
  426706:	f36f 01c7 	bfc	r1, #3, #5
  42670a:	f36f 210c 	bfc	r1, #8, #5
  42670e:	f36f 314f 	bfc	r1, #13, #3
  426712:	6820      	ldr	r0, [r4, #0]
  426714:	4b26      	ldr	r3, [pc, #152]	; (4267b0 <lv_screen_chart+0x144>)
  426716:	4798      	blx	r3
  426718:	4601      	mov	r1, r0
  42671a:	4b26      	ldr	r3, [pc, #152]	; (4267b4 <lv_screen_chart+0x148>)
  42671c:	6018      	str	r0, [r3, #0]
	lv_chart_set_ext_array(chart, ser1, ser1_data, CHAR_DATA_LEN);
  42671e:	23fa      	movs	r3, #250	; 0xfa
  426720:	4a25      	ldr	r2, [pc, #148]	; (4267b8 <lv_screen_chart+0x14c>)
  426722:	6820      	ldr	r0, [r4, #0]
  426724:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 4267d8 <lv_screen_chart+0x16c>
  426728:	47d0      	blx	sl
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  42672a:	2301      	movs	r3, #1
  42672c:	2290      	movs	r2, #144	; 0x90
  42672e:	2102      	movs	r1, #2
  426730:	6820      	ldr	r0, [r4, #0]
  426732:	47a8      	blx	r5
  426734:	47c8      	blx	r9
  426736:	47c0      	blx	r8
	labelFloor = lv_label_create(lv_scr_act(), NULL);
  426738:	2100      	movs	r1, #0
  42673a:	4b20      	ldr	r3, [pc, #128]	; (4267bc <lv_screen_chart+0x150>)
  42673c:	4798      	blx	r3
  42673e:	4d20      	ldr	r5, [pc, #128]	; (4267c0 <lv_screen_chart+0x154>)
  426740:	6028      	str	r0, [r5, #0]
	lv_obj_align(labelFloor, NULL, LV_ALIGN_IN_TOP_LEFT, -5 , 0);
  426742:	2400      	movs	r4, #0
  426744:	9400      	str	r4, [sp, #0]
  426746:	f06f 0304 	mvn.w	r3, #4
  42674a:	2201      	movs	r2, #1
  42674c:	4621      	mov	r1, r4
  42674e:	47b8      	blx	r7
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  426750:	4b1c      	ldr	r3, [pc, #112]	; (4267c4 <lv_screen_chart+0x158>)
  426752:	f248 028e 	movw	r2, #32910	; 0x808e
  426756:	4621      	mov	r1, r4
  426758:	6828      	ldr	r0, [r5, #0]
  42675a:	4f1b      	ldr	r7, [pc, #108]	; (4267c8 <lv_screen_chart+0x15c>)
  42675c:	47b8      	blx	r7
	lv_obj_set_style_local_text_color(labelFloor, LV_OBJ_PART_MAIN, LV_STATE_DEFAULT, LV_COLOR_GREEN);
  42675e:	f04f 0300 	mov.w	r3, #0
  426762:	f366 0302 	bfi	r3, r6, #0, #3
  426766:	f364 03c7 	bfi	r3, r4, #3, #5
  42676a:	f364 230c 	bfi	r3, r4, #8, #5
  42676e:	f364 334f 	bfi	r3, r4, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  426772:	f248 0289 	movw	r2, #32905	; 0x8089
  426776:	4621      	mov	r1, r4
  426778:	6828      	ldr	r0, [r5, #0]
  42677a:	4c14      	ldr	r4, [pc, #80]	; (4267cc <lv_screen_chart+0x160>)
  42677c:	47a0      	blx	r4
}
  42677e:	b002      	add	sp, #8
  426780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  426784:	004205cd 	.word	0x004205cd
  426788:	2043a42c 	.word	0x2043a42c
  42678c:	00406c79 	.word	0x00406c79
  426790:	00406241 	.word	0x00406241
  426794:	00420d61 	.word	0x00420d61
  426798:	00420ce9 	.word	0x00420ce9
  42679c:	00420da9 	.word	0x00420da9
  4267a0:	004208d1 	.word	0x004208d1
  4267a4:	00420929 	.word	0x00420929
  4267a8:	00407a81 	.word	0x00407a81
  4267ac:	00407a01 	.word	0x00407a01
  4267b0:	00420815 	.word	0x00420815
  4267b4:	2043a420 	.word	0x2043a420
  4267b8:	2043a430 	.word	0x2043a430
  4267bc:	00423dd5 	.word	0x00423dd5
  4267c0:	2043a150 	.word	0x2043a150
  4267c4:	2040003c 	.word	0x2040003c
  4267c8:	00407ac1 	.word	0x00407ac1
  4267cc:	00407a41 	.word	0x00407a41
  4267d0:	00414d95 	.word	0x00414d95
  4267d4:	00403659 	.word	0x00403659
  4267d8:	0042097d 	.word	0x0042097d

004267dc <lv_alarme>:
{
  4267dc:	b510      	push	{r4, lr}
  4267de:	b082      	sub	sp, #8
  4267e0:	4b10      	ldr	r3, [pc, #64]	; (426824 <lv_alarme+0x48>)
  4267e2:	4798      	blx	r3
  4267e4:	4b10      	ldr	r3, [pc, #64]	; (426828 <lv_alarme+0x4c>)
  4267e6:	4798      	blx	r3
	mbox1 = lv_msgbox_create(lv_scr_act(), NULL);
  4267e8:	2100      	movs	r1, #0
  4267ea:	4b10      	ldr	r3, [pc, #64]	; (42682c <lv_alarme+0x50>)
  4267ec:	4798      	blx	r3
  4267ee:	4c10      	ldr	r4, [pc, #64]	; (426830 <lv_alarme+0x54>)
  4267f0:	6020      	str	r0, [r4, #0]
	lv_msgbox_set_text(mbox1, "Cuidado! Sua oxigenacao esta abaixo de 90.");
  4267f2:	4910      	ldr	r1, [pc, #64]	; (426834 <lv_alarme+0x58>)
  4267f4:	4b10      	ldr	r3, [pc, #64]	; (426838 <lv_alarme+0x5c>)
  4267f6:	4798      	blx	r3
	lv_msgbox_add_btns(mbox1, btns);
  4267f8:	4910      	ldr	r1, [pc, #64]	; (42683c <lv_alarme+0x60>)
  4267fa:	6820      	ldr	r0, [r4, #0]
  4267fc:	4b10      	ldr	r3, [pc, #64]	; (426840 <lv_alarme+0x64>)
  4267fe:	4798      	blx	r3
	lv_obj_set_width(mbox1, 200);
  426800:	21c8      	movs	r1, #200	; 0xc8
  426802:	6820      	ldr	r0, [r4, #0]
  426804:	4b0f      	ldr	r3, [pc, #60]	; (426844 <lv_alarme+0x68>)
  426806:	4798      	blx	r3
	lv_obj_set_event_cb(mbox1, event_handler_alarm);
  426808:	490f      	ldr	r1, [pc, #60]	; (426848 <lv_alarme+0x6c>)
  42680a:	6820      	ldr	r0, [r4, #0]
  42680c:	4b0f      	ldr	r3, [pc, #60]	; (42684c <lv_alarme+0x70>)
  42680e:	4798      	blx	r3
	lv_obj_align(mbox1, NULL, LV_ALIGN_CENTER, 0, 0); /*Align to the corner*/
  426810:	6820      	ldr	r0, [r4, #0]
  426812:	2100      	movs	r1, #0
  426814:	9100      	str	r1, [sp, #0]
  426816:	460b      	mov	r3, r1
  426818:	460a      	mov	r2, r1
  42681a:	4c0d      	ldr	r4, [pc, #52]	; (426850 <lv_alarme+0x74>)
  42681c:	47a0      	blx	r4
}
  42681e:	b002      	add	sp, #8
  426820:	bd10      	pop	{r4, pc}
  426822:	bf00      	nop
  426824:	00414d95 	.word	0x00414d95
  426828:	00403659 	.word	0x00403659
  42682c:	004243b5 	.word	0x004243b5
  426830:	2043a164 	.word	0x2043a164
  426834:	004315fc 	.word	0x004315fc
  426838:	0042468d 	.word	0x0042468d
  42683c:	204000ec 	.word	0x204000ec
  426840:	004245b5 	.word	0x004245b5
  426844:	00406d6d 	.word	0x00406d6d
  426848:	00425905 	.word	0x00425905
  42684c:	004057e9 	.word	0x004057e9
  426850:	00406241 	.word	0x00406241

00426854 <task_main>:
static void task_main(void *pvParameters) {
  426854:	b500      	push	{lr}
  426856:	b085      	sub	sp, #20
  426858:	e033      	b.n	4268c2 <task_main+0x6e>
			printf("ox: %d \n", ox);
  42685a:	f89d 100f 	ldrb.w	r1, [sp, #15]
  42685e:	482a      	ldr	r0, [pc, #168]	; (426908 <task_main+0xb4>)
  426860:	4b2a      	ldr	r3, [pc, #168]	; (42690c <task_main+0xb8>)
  426862:	4798      	blx	r3
			oxi=ox;
  426864:	f89d 300f 	ldrb.w	r3, [sp, #15]
  426868:	4c29      	ldr	r4, [pc, #164]	; (426910 <task_main+0xbc>)
  42686a:	6023      	str	r3, [r4, #0]
			lv_label_set_text_fmt(labelOxNum, "%d", oxi);
  42686c:	6822      	ldr	r2, [r4, #0]
  42686e:	4929      	ldr	r1, [pc, #164]	; (426914 <task_main+0xc0>)
  426870:	4b29      	ldr	r3, [pc, #164]	; (426918 <task_main+0xc4>)
  426872:	6818      	ldr	r0, [r3, #0]
  426874:	4b29      	ldr	r3, [pc, #164]	; (42691c <task_main+0xc8>)
  426876:	4798      	blx	r3
			if(oxi<90){
  426878:	6823      	ldr	r3, [r4, #0]
  42687a:	2b59      	cmp	r3, #89	; 0x59
  42687c:	dc09      	bgt.n	426892 <task_main+0x3e>
				if(entrou==0){
  42687e:	4b28      	ldr	r3, [pc, #160]	; (426920 <task_main+0xcc>)
  426880:	681b      	ldr	r3, [r3, #0]
  426882:	2b00      	cmp	r3, #0
  426884:	d127      	bne.n	4268d6 <task_main+0x82>
					lv_alarme();
  426886:	4b27      	ldr	r3, [pc, #156]	; (426924 <task_main+0xd0>)
  426888:	4798      	blx	r3
					entrou=1;
  42688a:	2201      	movs	r2, #1
  42688c:	4b24      	ldr	r3, [pc, #144]	; (426920 <task_main+0xcc>)
  42688e:	601a      	str	r2, [r3, #0]
  426890:	e021      	b.n	4268d6 <task_main+0x82>
				entrou=0;
  426892:	2200      	movs	r2, #0
  426894:	4b22      	ldr	r3, [pc, #136]	; (426920 <task_main+0xcc>)
  426896:	601a      	str	r2, [r3, #0]
  426898:	e01d      	b.n	4268d6 <task_main+0x82>
			lv_chart_set_next(chart, ser1, ecg.ecg);
  42689a:	4c23      	ldr	r4, [pc, #140]	; (426928 <task_main+0xd4>)
  42689c:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
  4268a0:	4b22      	ldr	r3, [pc, #136]	; (42692c <task_main+0xd8>)
  4268a2:	6819      	ldr	r1, [r3, #0]
  4268a4:	6820      	ldr	r0, [r4, #0]
  4268a6:	4b22      	ldr	r3, [pc, #136]	; (426930 <task_main+0xdc>)
  4268a8:	4798      	blx	r3
			lv_chart_refresh(chart);
  4268aa:	6820      	ldr	r0, [r4, #0]
  4268ac:	4b21      	ldr	r3, [pc, #132]	; (426934 <task_main+0xe0>)
  4268ae:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  4268b0:	2300      	movs	r3, #0
  4268b2:	2203      	movs	r2, #3
  4268b4:	2102      	movs	r1, #2
  4268b6:	6820      	ldr	r0, [r4, #0]
  4268b8:	4c1f      	ldr	r4, [pc, #124]	; (426938 <task_main+0xe4>)
  4268ba:	47a0      	blx	r4
		vTaskDelay(25);
  4268bc:	2019      	movs	r0, #25
  4268be:	4b1f      	ldr	r3, [pc, #124]	; (42693c <task_main+0xe8>)
  4268c0:	4798      	blx	r3
		if ( xQueueReceive( xQueueOx, &ox, 0 )) {
  4268c2:	2300      	movs	r3, #0
  4268c4:	461a      	mov	r2, r3
  4268c6:	f10d 010f 	add.w	r1, sp, #15
  4268ca:	481d      	ldr	r0, [pc, #116]	; (426940 <task_main+0xec>)
  4268cc:	6800      	ldr	r0, [r0, #0]
  4268ce:	4c1d      	ldr	r4, [pc, #116]	; (426944 <task_main+0xf0>)
  4268d0:	47a0      	blx	r4
  4268d2:	2800      	cmp	r0, #0
  4268d4:	d1c1      	bne.n	42685a <task_main+0x6>
		if (xQueueReceive( xQueueEcgInfo, &(ecg), ( TickType_t )  100 / portTICK_PERIOD_MS)) {
  4268d6:	2300      	movs	r3, #0
  4268d8:	2264      	movs	r2, #100	; 0x64
  4268da:	a901      	add	r1, sp, #4
  4268dc:	481a      	ldr	r0, [pc, #104]	; (426948 <task_main+0xf4>)
  4268de:	6800      	ldr	r0, [r0, #0]
  4268e0:	4c18      	ldr	r4, [pc, #96]	; (426944 <task_main+0xf0>)
  4268e2:	47a0      	blx	r4
  4268e4:	2800      	cmp	r0, #0
  4268e6:	d0e9      	beq.n	4268bc <task_main+0x68>
			printf(" %d\n", ecg.bpm);
  4268e8:	9902      	ldr	r1, [sp, #8]
  4268ea:	4818      	ldr	r0, [pc, #96]	; (42694c <task_main+0xf8>)
  4268ec:	4b07      	ldr	r3, [pc, #28]	; (42690c <task_main+0xb8>)
  4268ee:	4798      	blx	r3
			if(ecg.bpm > 0) {
  4268f0:	9a02      	ldr	r2, [sp, #8]
  4268f2:	2a00      	cmp	r2, #0
  4268f4:	ddd1      	ble.n	42689a <task_main+0x46>
				lv_label_set_text_fmt(labelBaNum, "%d", ecg.bpm);
  4268f6:	4907      	ldr	r1, [pc, #28]	; (426914 <task_main+0xc0>)
  4268f8:	4b15      	ldr	r3, [pc, #84]	; (426950 <task_main+0xfc>)
  4268fa:	6818      	ldr	r0, [r3, #0]
  4268fc:	4b07      	ldr	r3, [pc, #28]	; (42691c <task_main+0xc8>)
  4268fe:	4798      	blx	r3
				valorBpm=ecg.bpm;
  426900:	4b14      	ldr	r3, [pc, #80]	; (426954 <task_main+0x100>)
  426902:	9a02      	ldr	r2, [sp, #8]
  426904:	601a      	str	r2, [r3, #0]
  426906:	e7c8      	b.n	42689a <task_main+0x46>
  426908:	00431780 	.word	0x00431780
  42690c:	0042783d 	.word	0x0042783d
  426910:	2043a818 	.word	0x2043a818
  426914:	0043178c 	.word	0x0043178c
  426918:	2043a154 	.word	0x2043a154
  42691c:	00423bcd 	.word	0x00423bcd
  426920:	2043a12c 	.word	0x2043a12c
  426924:	004267dd 	.word	0x004267dd
  426928:	2043a42c 	.word	0x2043a42c
  42692c:	2043a420 	.word	0x2043a420
  426930:	00420f01 	.word	0x00420f01
  426934:	00420cb9 	.word	0x00420cb9
  426938:	00407a01 	.word	0x00407a01
  42693c:	00402b15 	.word	0x00402b15
  426940:	2043a428 	.word	0x2043a428
  426944:	004022cd 	.word	0x004022cd
  426948:	2043a414 	.word	0x2043a414
  42694c:	004317b8 	.word	0x004317b8
  426950:	2043a14c 	.word	0x2043a14c
  426954:	2043a41c 	.word	0x2043a41c

00426958 <lv_valorSalvo>:
void lv_valorSalvo(void){
  426958:	b570      	push	{r4, r5, r6, lr}
  42695a:	b082      	sub	sp, #8
	lv_style_init(&style_modal);
  42695c:	4d15      	ldr	r5, [pc, #84]	; (4269b4 <lv_valorSalvo+0x5c>)
  42695e:	4628      	mov	r0, r5
  426960:	4b15      	ldr	r3, [pc, #84]	; (4269b8 <lv_valorSalvo+0x60>)
  426962:	4798      	blx	r3
	lv_style_set_bg_color(&style_modal, LV_STATE_DEFAULT, LV_COLOR_BLACK);
  426964:	2400      	movs	r4, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  426966:	4622      	mov	r2, r4
  426968:	2129      	movs	r1, #41	; 0x29
  42696a:	4628      	mov	r0, r5
  42696c:	4b13      	ldr	r3, [pc, #76]	; (4269bc <lv_valorSalvo+0x64>)
  42696e:	4798      	blx	r3
  426970:	4b13      	ldr	r3, [pc, #76]	; (4269c0 <lv_valorSalvo+0x68>)
  426972:	4798      	blx	r3
  426974:	4b13      	ldr	r3, [pc, #76]	; (4269c4 <lv_valorSalvo+0x6c>)
  426976:	4798      	blx	r3
	lv_obj_t *btn = lv_btn_create(lv_scr_act(), NULL);
  426978:	4621      	mov	r1, r4
  42697a:	4b13      	ldr	r3, [pc, #76]	; (4269c8 <lv_valorSalvo+0x70>)
  42697c:	4798      	blx	r3
  42697e:	4605      	mov	r5, r0
	lv_obj_set_size(btn, 120, 25);
  426980:	2219      	movs	r2, #25
  426982:	2178      	movs	r1, #120	; 0x78
  426984:	4b11      	ldr	r3, [pc, #68]	; (4269cc <lv_valorSalvo+0x74>)
  426986:	4798      	blx	r3
	lv_obj_set_event_cb(btn, btn_event_cb);
  426988:	4911      	ldr	r1, [pc, #68]	; (4269d0 <lv_valorSalvo+0x78>)
  42698a:	4628      	mov	r0, r5
  42698c:	4b11      	ldr	r3, [pc, #68]	; (4269d4 <lv_valorSalvo+0x7c>)
  42698e:	4798      	blx	r3
	lv_obj_align(btn, NULL, LV_ALIGN_IN_BOTTOM_LEFT, 10, -10);
  426990:	f06f 0309 	mvn.w	r3, #9
  426994:	9300      	str	r3, [sp, #0]
  426996:	230a      	movs	r3, #10
  426998:	2204      	movs	r2, #4
  42699a:	4621      	mov	r1, r4
  42699c:	4628      	mov	r0, r5
  42699e:	4e0e      	ldr	r6, [pc, #56]	; (4269d8 <lv_valorSalvo+0x80>)
  4269a0:	47b0      	blx	r6
	lv_obj_t *label = lv_label_create(btn, NULL);
  4269a2:	4621      	mov	r1, r4
  4269a4:	4628      	mov	r0, r5
  4269a6:	4b0d      	ldr	r3, [pc, #52]	; (4269dc <lv_valorSalvo+0x84>)
  4269a8:	4798      	blx	r3
	lv_label_set_text(label, "Valores salvos");
  4269aa:	490d      	ldr	r1, [pc, #52]	; (4269e0 <lv_valorSalvo+0x88>)
  4269ac:	4b0d      	ldr	r3, [pc, #52]	; (4269e4 <lv_valorSalvo+0x8c>)
  4269ae:	4798      	blx	r3
}
  4269b0:	b002      	add	sp, #8
  4269b2:	bd70      	pop	{r4, r5, r6, pc}
  4269b4:	2043a174 	.word	0x2043a174
  4269b8:	00409e81 	.word	0x00409e81
  4269bc:	0040a3f9 	.word	0x0040a3f9
  4269c0:	00414d95 	.word	0x00414d95
  4269c4:	00403659 	.word	0x00403659
  4269c8:	0041db95 	.word	0x0041db95
  4269cc:	00406c79 	.word	0x00406c79
  4269d0:	0042593d 	.word	0x0042593d
  4269d4:	004057e9 	.word	0x004057e9
  4269d8:	00406241 	.word	0x00406241
  4269dc:	00423dd5 	.word	0x00423dd5
  4269e0:	00431698 	.word	0x00431698
  4269e4:	00423ad1 	.word	0x00423ad1

004269e8 <task_lcd>:
static void task_lcd(void *pvParameters) {
  4269e8:	b508      	push	{r3, lr}
	lv_principal();
  4269ea:	4b07      	ldr	r3, [pc, #28]	; (426a08 <task_lcd+0x20>)
  4269ec:	4798      	blx	r3
	lv_screen_chart();
  4269ee:	4b07      	ldr	r3, [pc, #28]	; (426a0c <task_lcd+0x24>)
  4269f0:	4798      	blx	r3
	lv_valorSalvo();
  4269f2:	4b07      	ldr	r3, [pc, #28]	; (426a10 <task_lcd+0x28>)
  4269f4:	4798      	blx	r3
		lv_tick_inc(50);
  4269f6:	2032      	movs	r0, #50	; 0x32
  4269f8:	4b06      	ldr	r3, [pc, #24]	; (426a14 <task_lcd+0x2c>)
  4269fa:	4798      	blx	r3
		lv_task_handler();
  4269fc:	4b06      	ldr	r3, [pc, #24]	; (426a18 <task_lcd+0x30>)
  4269fe:	4798      	blx	r3
		vTaskDelay(50);
  426a00:	2032      	movs	r0, #50	; 0x32
  426a02:	4b06      	ldr	r3, [pc, #24]	; (426a1c <task_lcd+0x34>)
  426a04:	4798      	blx	r3
  426a06:	e7f6      	b.n	4269f6 <task_lcd+0xe>
  426a08:	00426325 	.word	0x00426325
  426a0c:	0042666d 	.word	0x0042666d
  426a10:	00426959 	.word	0x00426959
  426a14:	00415195 	.word	0x00415195
  426a18:	004177dd 	.word	0x004177dd
  426a1c:	00402b15 	.word	0x00402b15

00426a20 <main>:

/************************************************************************/
/* main                                                                 */
/************************************************************************/
int main(void) {
  426a20:	b530      	push	{r4, r5, lr}
  426a22:	b099      	sub	sp, #100	; 0x64
	/* board and sys init */
	board_init();
  426a24:	4b49      	ldr	r3, [pc, #292]	; (426b4c <main+0x12c>)
  426a26:	4798      	blx	r3
	sysclk_init();
  426a28:	4b49      	ldr	r3, [pc, #292]	; (426b50 <main+0x130>)
  426a2a:	4798      	blx	r3
	configure_console();
  426a2c:	4b49      	ldr	r3, [pc, #292]	; (426b54 <main+0x134>)
  426a2e:	4798      	blx	r3

	/* LCd int */
	configure_lcd();
  426a30:	4b49      	ldr	r3, [pc, #292]	; (426b58 <main+0x138>)
  426a32:	4798      	blx	r3
	ili9341_init();
  426a34:	4b49      	ldr	r3, [pc, #292]	; (426b5c <main+0x13c>)
  426a36:	4798      	blx	r3
	configure_touch();
  426a38:	4b49      	ldr	r3, [pc, #292]	; (426b60 <main+0x140>)
  426a3a:	4798      	blx	r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  426a3c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  426a40:	4b48      	ldr	r3, [pc, #288]	; (426b64 <main+0x144>)
  426a42:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_backlight_on();
	
	
	
	/*LittlevGL init*/
	lv_init();
  426a44:	4b48      	ldr	r3, [pc, #288]	; (426b68 <main+0x148>)
  426a46:	4798      	blx	r3
	lv_disp_drv_t disp_drv;                 /*A variable to hold the drivers. Can be local variable*/
	lv_disp_drv_init(&disp_drv);            /*Basic initialization*/
  426a48:	a80b      	add	r0, sp, #44	; 0x2c
  426a4a:	4b48      	ldr	r3, [pc, #288]	; (426b6c <main+0x14c>)
  426a4c:	4798      	blx	r3
	lv_disp_buf_init(&disp_buf, buf_1, NULL, LV_HOR_RES_MAX * LV_VER_RES_MAX);  /*Initialize `disp_buf` with the buffer(s) */
  426a4e:	4c48      	ldr	r4, [pc, #288]	; (426b70 <main+0x150>)
  426a50:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
  426a54:	2200      	movs	r2, #0
  426a56:	4947      	ldr	r1, [pc, #284]	; (426b74 <main+0x154>)
  426a58:	4620      	mov	r0, r4
  426a5a:	4d47      	ldr	r5, [pc, #284]	; (426b78 <main+0x158>)
  426a5c:	47a8      	blx	r5
	disp_drv.buffer = &disp_buf;            /*Set an initialized buffer*/
  426a5e:	940c      	str	r4, [sp, #48]	; 0x30
	disp_drv.flush_cb = my_flush_cb;        /*Set a flush callback to draw to the display*/
  426a60:	4b46      	ldr	r3, [pc, #280]	; (426b7c <main+0x15c>)
  426a62:	930e      	str	r3, [sp, #56]	; 0x38
	lv_disp_t * disp;
	disp = lv_disp_drv_register(&disp_drv); /*Register the driver and save the created display objects*/
  426a64:	a80b      	add	r0, sp, #44	; 0x2c
  426a66:	4b46      	ldr	r3, [pc, #280]	; (426b80 <main+0x160>)
  426a68:	4798      	blx	r3
	
	/* Init input on LVGL */
	lv_indev_drv_t indev_drv;
	lv_indev_drv_init(&indev_drv);      /*Basic initialization*/
  426a6a:	a804      	add	r0, sp, #16
  426a6c:	4b45      	ldr	r3, [pc, #276]	; (426b84 <main+0x164>)
  426a6e:	4798      	blx	r3
	indev_drv.type = LV_INDEV_TYPE_POINTER;
  426a70:	2501      	movs	r5, #1
  426a72:	f88d 5010 	strb.w	r5, [sp, #16]
	indev_drv.read_cb = my_input_read;
  426a76:	4b44      	ldr	r3, [pc, #272]	; (426b88 <main+0x168>)
  426a78:	9305      	str	r3, [sp, #20]
	/*Register the driver in LVGL and save the created input device object*/
	lv_indev_t * my_indev = lv_indev_drv_register(&indev_drv);
  426a7a:	a804      	add	r0, sp, #16
  426a7c:	4b43      	ldr	r3, [pc, #268]	; (426b8c <main+0x16c>)
  426a7e:	4798      	blx	r3
	
	xQueueOx = xQueueCreate(32, sizeof(char));
  426a80:	2200      	movs	r2, #0
  426a82:	4629      	mov	r1, r5
  426a84:	2020      	movs	r0, #32
  426a86:	4c42      	ldr	r4, [pc, #264]	; (426b90 <main+0x170>)
  426a88:	47a0      	blx	r4
  426a8a:	4b42      	ldr	r3, [pc, #264]	; (426b94 <main+0x174>)
  426a8c:	6018      	str	r0, [r3, #0]
	xQueueEcgInfo = xQueueCreate(32, sizeof(ecgInfo));
  426a8e:	2200      	movs	r2, #0
  426a90:	2108      	movs	r1, #8
  426a92:	2020      	movs	r0, #32
  426a94:	47a0      	blx	r4
  426a96:	4b40      	ldr	r3, [pc, #256]	; (426b98 <main+0x178>)
  426a98:	6018      	str	r0, [r3, #0]
	xSemaphore = xSemaphoreCreateBinary();
  426a9a:	2203      	movs	r2, #3
  426a9c:	2100      	movs	r1, #0
  426a9e:	4628      	mov	r0, r5
  426aa0:	47a0      	blx	r4
  426aa2:	4b3e      	ldr	r3, [pc, #248]	; (426b9c <main+0x17c>)
  426aa4:	6018      	str	r0, [r3, #0]

	if (xTaskCreate(task_lcd, "LCD", TASK_LCD_STACK_SIZE, NULL, TASK_LCD_PRIORITY, NULL) != pdPASS) {
  426aa6:	2300      	movs	r3, #0
  426aa8:	9303      	str	r3, [sp, #12]
  426aaa:	9302      	str	r3, [sp, #8]
  426aac:	9301      	str	r3, [sp, #4]
  426aae:	9300      	str	r3, [sp, #0]
  426ab0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  426ab4:	493a      	ldr	r1, [pc, #232]	; (426ba0 <main+0x180>)
  426ab6:	483b      	ldr	r0, [pc, #236]	; (426ba4 <main+0x184>)
  426ab8:	4c3b      	ldr	r4, [pc, #236]	; (426ba8 <main+0x188>)
  426aba:	47a0      	blx	r4
  426abc:	42a8      	cmp	r0, r5
  426abe:	d002      	beq.n	426ac6 <main+0xa6>
		printf("Failed to create lcd task\r\n");
  426ac0:	483a      	ldr	r0, [pc, #232]	; (426bac <main+0x18c>)
  426ac2:	4b3b      	ldr	r3, [pc, #236]	; (426bb0 <main+0x190>)
  426ac4:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_clock, "CLK", TASK_LCD_STACK_SIZE, NULL, TASK_LCD_PRIORITY, NULL) != pdPASS) {
  426ac6:	2300      	movs	r3, #0
  426ac8:	9303      	str	r3, [sp, #12]
  426aca:	9302      	str	r3, [sp, #8]
  426acc:	9301      	str	r3, [sp, #4]
  426ace:	9300      	str	r3, [sp, #0]
  426ad0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  426ad4:	4937      	ldr	r1, [pc, #220]	; (426bb4 <main+0x194>)
  426ad6:	4838      	ldr	r0, [pc, #224]	; (426bb8 <main+0x198>)
  426ad8:	4c33      	ldr	r4, [pc, #204]	; (426ba8 <main+0x188>)
  426ada:	47a0      	blx	r4
  426adc:	2801      	cmp	r0, #1
  426ade:	d002      	beq.n	426ae6 <main+0xc6>
		printf("Failed to create clk task\r\n");
  426ae0:	4836      	ldr	r0, [pc, #216]	; (426bbc <main+0x19c>)
  426ae2:	4b33      	ldr	r3, [pc, #204]	; (426bb0 <main+0x190>)
  426ae4:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_aps2, "APS2", TASK_APS2_STACK_SIZE, NULL, TASK_APS2_PRIORITY, NULL) != pdPASS) {
  426ae6:	2300      	movs	r3, #0
  426ae8:	9303      	str	r3, [sp, #12]
  426aea:	9302      	str	r3, [sp, #8]
  426aec:	9301      	str	r3, [sp, #4]
  426aee:	9300      	str	r3, [sp, #0]
  426af0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  426af4:	4932      	ldr	r1, [pc, #200]	; (426bc0 <main+0x1a0>)
  426af6:	4833      	ldr	r0, [pc, #204]	; (426bc4 <main+0x1a4>)
  426af8:	4c2b      	ldr	r4, [pc, #172]	; (426ba8 <main+0x188>)
  426afa:	47a0      	blx	r4
  426afc:	2801      	cmp	r0, #1
  426afe:	d002      	beq.n	426b06 <main+0xe6>
		printf("Failed to create APS task\r\n");
  426b00:	4831      	ldr	r0, [pc, #196]	; (426bc8 <main+0x1a8>)
  426b02:	4b2b      	ldr	r3, [pc, #172]	; (426bb0 <main+0x190>)
  426b04:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_main, "main", TASK_MAIN_STACK_SIZE, NULL, TASK_MAIN_PRIORITY, NULL) != pdPASS) {
  426b06:	2300      	movs	r3, #0
  426b08:	9303      	str	r3, [sp, #12]
  426b0a:	9302      	str	r3, [sp, #8]
  426b0c:	9301      	str	r3, [sp, #4]
  426b0e:	9300      	str	r3, [sp, #0]
  426b10:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  426b14:	492d      	ldr	r1, [pc, #180]	; (426bcc <main+0x1ac>)
  426b16:	482e      	ldr	r0, [pc, #184]	; (426bd0 <main+0x1b0>)
  426b18:	4c23      	ldr	r4, [pc, #140]	; (426ba8 <main+0x188>)
  426b1a:	47a0      	blx	r4
  426b1c:	2801      	cmp	r0, #1
  426b1e:	d002      	beq.n	426b26 <main+0x106>
		printf("Failed to create Main task\r\n");
  426b20:	482c      	ldr	r0, [pc, #176]	; (426bd4 <main+0x1b4>)
  426b22:	4b23      	ldr	r3, [pc, #140]	; (426bb0 <main+0x190>)
  426b24:	4798      	blx	r3
	}
	

	if (xTaskCreate(task_process, "process", TASK_MAIN_STACK_SIZE, NULL, TASK_MAIN_PRIORITY, NULL) != pdPASS) {
  426b26:	2300      	movs	r3, #0
  426b28:	9303      	str	r3, [sp, #12]
  426b2a:	9302      	str	r3, [sp, #8]
  426b2c:	9301      	str	r3, [sp, #4]
  426b2e:	9300      	str	r3, [sp, #0]
  426b30:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  426b34:	4928      	ldr	r1, [pc, #160]	; (426bd8 <main+0x1b8>)
  426b36:	4829      	ldr	r0, [pc, #164]	; (426bdc <main+0x1bc>)
  426b38:	4c1b      	ldr	r4, [pc, #108]	; (426ba8 <main+0x188>)
  426b3a:	47a0      	blx	r4
  426b3c:	2801      	cmp	r0, #1
  426b3e:	d002      	beq.n	426b46 <main+0x126>
		printf("Failed to create process task\r\n");
  426b40:	4827      	ldr	r0, [pc, #156]	; (426be0 <main+0x1c0>)
  426b42:	4b1b      	ldr	r3, [pc, #108]	; (426bb0 <main+0x190>)
  426b44:	4798      	blx	r3
	}
	
	/* Start the scheduler. */
	vTaskStartScheduler();
  426b46:	4b27      	ldr	r3, [pc, #156]	; (426be4 <main+0x1c4>)
  426b48:	4798      	blx	r3
  426b4a:	e7fe      	b.n	426b4a <main+0x12a>
  426b4c:	00424b2d 	.word	0x00424b2d
  426b50:	00424939 	.word	0x00424939
  426b54:	00425e7d 	.word	0x00425e7d
  426b58:	00425e41 	.word	0x00425e41
  426b5c:	0040140d 	.word	0x0040140d
  426b60:	004008f9 	.word	0x004008f9
  426b64:	400e1200 	.word	0x400e1200
  426b68:	00405611 	.word	0x00405611
  426b6c:	00414d1d 	.word	0x00414d1d
  426b70:	2043a108 	.word	0x2043a108
  426b74:	20414908 	.word	0x20414908
  426b78:	00414d75 	.word	0x00414d75
  426b7c:	00425aad 	.word	0x00425aad
  426b80:	00414f25 	.word	0x00414f25
  426b84:	0041505d 	.word	0x0041505d
  426b88:	00425b05 	.word	0x00425b05
  426b8c:	00415089 	.word	0x00415089
  426b90:	00401e65 	.word	0x00401e65
  426b94:	2043a428 	.word	0x2043a428
  426b98:	2043a414 	.word	0x2043a414
  426b9c:	2043a418 	.word	0x2043a418
  426ba0:	004316a8 	.word	0x004316a8
  426ba4:	004269e9 	.word	0x004269e9
  426ba8:	004026bd 	.word	0x004026bd
  426bac:	004316ac 	.word	0x004316ac
  426bb0:	0042783d 	.word	0x0042783d
  426bb4:	004316c8 	.word	0x004316c8
  426bb8:	00426249 	.word	0x00426249
  426bbc:	004316cc 	.word	0x004316cc
  426bc0:	004316e8 	.word	0x004316e8
  426bc4:	00400389 	.word	0x00400389
  426bc8:	004316f0 	.word	0x004316f0
  426bcc:	0043170c 	.word	0x0043170c
  426bd0:	00426855 	.word	0x00426855
  426bd4:	00431714 	.word	0x00431714
  426bd8:	00431734 	.word	0x00431734
  426bdc:	00426035 	.word	0x00426035
  426be0:	0043173c 	.word	0x0043173c
  426be4:	00402815 	.word	0x00402815

00426be8 <arm_sin_f32>:
  426be8:	ee06 0a90 	vmov	s13, r0
  426bec:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 426c5c <arm_sin_f32+0x74>
  426bf0:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  426bf4:	ee26 7a87 	vmul.f32	s14, s13, s14
  426bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  426bfc:	eefd 7ac7 	vcvt.s32.f32	s15, s14
  426c00:	d504      	bpl.n	426c0c <arm_sin_f32+0x24>
  426c02:	ee17 3a90 	vmov	r3, s15
  426c06:	3b01      	subs	r3, #1
  426c08:	ee07 3a90 	vmov	s15, r3
  426c0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  426c10:	eddf 6a13 	vldr	s13, [pc, #76]	; 426c60 <arm_sin_f32+0x78>
  426c14:	ee77 7a67 	vsub.f32	s15, s14, s15
  426c18:	ee67 7aa6 	vmul.f32	s15, s15, s13
  426c1c:	eebc 7ae7 	vcvt.u32.f32	s14, s15
  426c20:	ee17 3a10 	vmov	r3, s14
  426c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
  426c28:	ee07 3a10 	vmov	s14, r3
  426c2c:	eef8 6a47 	vcvt.f32.u32	s13, s14
  426c30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  426c34:	ee77 7ae6 	vsub.f32	s15, s15, s13
  426c38:	4a0a      	ldr	r2, [pc, #40]	; (426c64 <arm_sin_f32+0x7c>)
  426c3a:	ee37 7a67 	vsub.f32	s14, s14, s15
  426c3e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
  426c42:	ed91 6a00 	vldr	s12, [r1]
  426c46:	edd1 6a01 	vldr	s13, [r1, #4]
  426c4a:	ee27 7a06 	vmul.f32	s14, s14, s12
  426c4e:	ee67 7aa6 	vmul.f32	s15, s15, s13
  426c52:	ee77 7a27 	vadd.f32	s15, s14, s15
  426c56:	ee17 0a90 	vmov	r0, s15
  426c5a:	4770      	bx	lr
  426c5c:	3e22f983 	.word	0x3e22f983
  426c60:	44000000 	.word	0x44000000
  426c64:	004317d8 	.word	0x004317d8

00426c68 <__aeabi_drsub>:
  426c68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  426c6c:	e002      	b.n	426c74 <__adddf3>
  426c6e:	bf00      	nop

00426c70 <__aeabi_dsub>:
  426c70:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00426c74 <__adddf3>:
  426c74:	b530      	push	{r4, r5, lr}
  426c76:	ea4f 0441 	mov.w	r4, r1, lsl #1
  426c7a:	ea4f 0543 	mov.w	r5, r3, lsl #1
  426c7e:	ea94 0f05 	teq	r4, r5
  426c82:	bf08      	it	eq
  426c84:	ea90 0f02 	teqeq	r0, r2
  426c88:	bf1f      	itttt	ne
  426c8a:	ea54 0c00 	orrsne.w	ip, r4, r0
  426c8e:	ea55 0c02 	orrsne.w	ip, r5, r2
  426c92:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  426c96:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  426c9a:	f000 80e2 	beq.w	426e62 <__adddf3+0x1ee>
  426c9e:	ea4f 5454 	mov.w	r4, r4, lsr #21
  426ca2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  426ca6:	bfb8      	it	lt
  426ca8:	426d      	neglt	r5, r5
  426caa:	dd0c      	ble.n	426cc6 <__adddf3+0x52>
  426cac:	442c      	add	r4, r5
  426cae:	ea80 0202 	eor.w	r2, r0, r2
  426cb2:	ea81 0303 	eor.w	r3, r1, r3
  426cb6:	ea82 0000 	eor.w	r0, r2, r0
  426cba:	ea83 0101 	eor.w	r1, r3, r1
  426cbe:	ea80 0202 	eor.w	r2, r0, r2
  426cc2:	ea81 0303 	eor.w	r3, r1, r3
  426cc6:	2d36      	cmp	r5, #54	; 0x36
  426cc8:	bf88      	it	hi
  426cca:	bd30      	pophi	{r4, r5, pc}
  426ccc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  426cd0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  426cd4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  426cd8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  426cdc:	d002      	beq.n	426ce4 <__adddf3+0x70>
  426cde:	4240      	negs	r0, r0
  426ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  426ce4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  426ce8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  426cec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  426cf0:	d002      	beq.n	426cf8 <__adddf3+0x84>
  426cf2:	4252      	negs	r2, r2
  426cf4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  426cf8:	ea94 0f05 	teq	r4, r5
  426cfc:	f000 80a7 	beq.w	426e4e <__adddf3+0x1da>
  426d00:	f1a4 0401 	sub.w	r4, r4, #1
  426d04:	f1d5 0e20 	rsbs	lr, r5, #32
  426d08:	db0d      	blt.n	426d26 <__adddf3+0xb2>
  426d0a:	fa02 fc0e 	lsl.w	ip, r2, lr
  426d0e:	fa22 f205 	lsr.w	r2, r2, r5
  426d12:	1880      	adds	r0, r0, r2
  426d14:	f141 0100 	adc.w	r1, r1, #0
  426d18:	fa03 f20e 	lsl.w	r2, r3, lr
  426d1c:	1880      	adds	r0, r0, r2
  426d1e:	fa43 f305 	asr.w	r3, r3, r5
  426d22:	4159      	adcs	r1, r3
  426d24:	e00e      	b.n	426d44 <__adddf3+0xd0>
  426d26:	f1a5 0520 	sub.w	r5, r5, #32
  426d2a:	f10e 0e20 	add.w	lr, lr, #32
  426d2e:	2a01      	cmp	r2, #1
  426d30:	fa03 fc0e 	lsl.w	ip, r3, lr
  426d34:	bf28      	it	cs
  426d36:	f04c 0c02 	orrcs.w	ip, ip, #2
  426d3a:	fa43 f305 	asr.w	r3, r3, r5
  426d3e:	18c0      	adds	r0, r0, r3
  426d40:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  426d44:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  426d48:	d507      	bpl.n	426d5a <__adddf3+0xe6>
  426d4a:	f04f 0e00 	mov.w	lr, #0
  426d4e:	f1dc 0c00 	rsbs	ip, ip, #0
  426d52:	eb7e 0000 	sbcs.w	r0, lr, r0
  426d56:	eb6e 0101 	sbc.w	r1, lr, r1
  426d5a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  426d5e:	d31b      	bcc.n	426d98 <__adddf3+0x124>
  426d60:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  426d64:	d30c      	bcc.n	426d80 <__adddf3+0x10c>
  426d66:	0849      	lsrs	r1, r1, #1
  426d68:	ea5f 0030 	movs.w	r0, r0, rrx
  426d6c:	ea4f 0c3c 	mov.w	ip, ip, rrx
  426d70:	f104 0401 	add.w	r4, r4, #1
  426d74:	ea4f 5244 	mov.w	r2, r4, lsl #21
  426d78:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  426d7c:	f080 809a 	bcs.w	426eb4 <__adddf3+0x240>
  426d80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  426d84:	bf08      	it	eq
  426d86:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  426d8a:	f150 0000 	adcs.w	r0, r0, #0
  426d8e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  426d92:	ea41 0105 	orr.w	r1, r1, r5
  426d96:	bd30      	pop	{r4, r5, pc}
  426d98:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  426d9c:	4140      	adcs	r0, r0
  426d9e:	eb41 0101 	adc.w	r1, r1, r1
  426da2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  426da6:	f1a4 0401 	sub.w	r4, r4, #1
  426daa:	d1e9      	bne.n	426d80 <__adddf3+0x10c>
  426dac:	f091 0f00 	teq	r1, #0
  426db0:	bf04      	itt	eq
  426db2:	4601      	moveq	r1, r0
  426db4:	2000      	moveq	r0, #0
  426db6:	fab1 f381 	clz	r3, r1
  426dba:	bf08      	it	eq
  426dbc:	3320      	addeq	r3, #32
  426dbe:	f1a3 030b 	sub.w	r3, r3, #11
  426dc2:	f1b3 0220 	subs.w	r2, r3, #32
  426dc6:	da0c      	bge.n	426de2 <__adddf3+0x16e>
  426dc8:	320c      	adds	r2, #12
  426dca:	dd08      	ble.n	426dde <__adddf3+0x16a>
  426dcc:	f102 0c14 	add.w	ip, r2, #20
  426dd0:	f1c2 020c 	rsb	r2, r2, #12
  426dd4:	fa01 f00c 	lsl.w	r0, r1, ip
  426dd8:	fa21 f102 	lsr.w	r1, r1, r2
  426ddc:	e00c      	b.n	426df8 <__adddf3+0x184>
  426dde:	f102 0214 	add.w	r2, r2, #20
  426de2:	bfd8      	it	le
  426de4:	f1c2 0c20 	rsble	ip, r2, #32
  426de8:	fa01 f102 	lsl.w	r1, r1, r2
  426dec:	fa20 fc0c 	lsr.w	ip, r0, ip
  426df0:	bfdc      	itt	le
  426df2:	ea41 010c 	orrle.w	r1, r1, ip
  426df6:	4090      	lslle	r0, r2
  426df8:	1ae4      	subs	r4, r4, r3
  426dfa:	bfa2      	ittt	ge
  426dfc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  426e00:	4329      	orrge	r1, r5
  426e02:	bd30      	popge	{r4, r5, pc}
  426e04:	ea6f 0404 	mvn.w	r4, r4
  426e08:	3c1f      	subs	r4, #31
  426e0a:	da1c      	bge.n	426e46 <__adddf3+0x1d2>
  426e0c:	340c      	adds	r4, #12
  426e0e:	dc0e      	bgt.n	426e2e <__adddf3+0x1ba>
  426e10:	f104 0414 	add.w	r4, r4, #20
  426e14:	f1c4 0220 	rsb	r2, r4, #32
  426e18:	fa20 f004 	lsr.w	r0, r0, r4
  426e1c:	fa01 f302 	lsl.w	r3, r1, r2
  426e20:	ea40 0003 	orr.w	r0, r0, r3
  426e24:	fa21 f304 	lsr.w	r3, r1, r4
  426e28:	ea45 0103 	orr.w	r1, r5, r3
  426e2c:	bd30      	pop	{r4, r5, pc}
  426e2e:	f1c4 040c 	rsb	r4, r4, #12
  426e32:	f1c4 0220 	rsb	r2, r4, #32
  426e36:	fa20 f002 	lsr.w	r0, r0, r2
  426e3a:	fa01 f304 	lsl.w	r3, r1, r4
  426e3e:	ea40 0003 	orr.w	r0, r0, r3
  426e42:	4629      	mov	r1, r5
  426e44:	bd30      	pop	{r4, r5, pc}
  426e46:	fa21 f004 	lsr.w	r0, r1, r4
  426e4a:	4629      	mov	r1, r5
  426e4c:	bd30      	pop	{r4, r5, pc}
  426e4e:	f094 0f00 	teq	r4, #0
  426e52:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  426e56:	bf06      	itte	eq
  426e58:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  426e5c:	3401      	addeq	r4, #1
  426e5e:	3d01      	subne	r5, #1
  426e60:	e74e      	b.n	426d00 <__adddf3+0x8c>
  426e62:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  426e66:	bf18      	it	ne
  426e68:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  426e6c:	d029      	beq.n	426ec2 <__adddf3+0x24e>
  426e6e:	ea94 0f05 	teq	r4, r5
  426e72:	bf08      	it	eq
  426e74:	ea90 0f02 	teqeq	r0, r2
  426e78:	d005      	beq.n	426e86 <__adddf3+0x212>
  426e7a:	ea54 0c00 	orrs.w	ip, r4, r0
  426e7e:	bf04      	itt	eq
  426e80:	4619      	moveq	r1, r3
  426e82:	4610      	moveq	r0, r2
  426e84:	bd30      	pop	{r4, r5, pc}
  426e86:	ea91 0f03 	teq	r1, r3
  426e8a:	bf1e      	ittt	ne
  426e8c:	2100      	movne	r1, #0
  426e8e:	2000      	movne	r0, #0
  426e90:	bd30      	popne	{r4, r5, pc}
  426e92:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  426e96:	d105      	bne.n	426ea4 <__adddf3+0x230>
  426e98:	0040      	lsls	r0, r0, #1
  426e9a:	4149      	adcs	r1, r1
  426e9c:	bf28      	it	cs
  426e9e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  426ea2:	bd30      	pop	{r4, r5, pc}
  426ea4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  426ea8:	bf3c      	itt	cc
  426eaa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  426eae:	bd30      	popcc	{r4, r5, pc}
  426eb0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  426eb4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  426eb8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  426ebc:	f04f 0000 	mov.w	r0, #0
  426ec0:	bd30      	pop	{r4, r5, pc}
  426ec2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  426ec6:	bf1a      	itte	ne
  426ec8:	4619      	movne	r1, r3
  426eca:	4610      	movne	r0, r2
  426ecc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  426ed0:	bf1c      	itt	ne
  426ed2:	460b      	movne	r3, r1
  426ed4:	4602      	movne	r2, r0
  426ed6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  426eda:	bf06      	itte	eq
  426edc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  426ee0:	ea91 0f03 	teqeq	r1, r3
  426ee4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  426ee8:	bd30      	pop	{r4, r5, pc}
  426eea:	bf00      	nop

00426eec <__aeabi_ui2d>:
  426eec:	f090 0f00 	teq	r0, #0
  426ef0:	bf04      	itt	eq
  426ef2:	2100      	moveq	r1, #0
  426ef4:	4770      	bxeq	lr
  426ef6:	b530      	push	{r4, r5, lr}
  426ef8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  426efc:	f104 0432 	add.w	r4, r4, #50	; 0x32
  426f00:	f04f 0500 	mov.w	r5, #0
  426f04:	f04f 0100 	mov.w	r1, #0
  426f08:	e750      	b.n	426dac <__adddf3+0x138>
  426f0a:	bf00      	nop

00426f0c <__aeabi_i2d>:
  426f0c:	f090 0f00 	teq	r0, #0
  426f10:	bf04      	itt	eq
  426f12:	2100      	moveq	r1, #0
  426f14:	4770      	bxeq	lr
  426f16:	b530      	push	{r4, r5, lr}
  426f18:	f44f 6480 	mov.w	r4, #1024	; 0x400
  426f1c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  426f20:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  426f24:	bf48      	it	mi
  426f26:	4240      	negmi	r0, r0
  426f28:	f04f 0100 	mov.w	r1, #0
  426f2c:	e73e      	b.n	426dac <__adddf3+0x138>
  426f2e:	bf00      	nop

00426f30 <__aeabi_f2d>:
  426f30:	0042      	lsls	r2, r0, #1
  426f32:	ea4f 01e2 	mov.w	r1, r2, asr #3
  426f36:	ea4f 0131 	mov.w	r1, r1, rrx
  426f3a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  426f3e:	bf1f      	itttt	ne
  426f40:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  426f44:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  426f48:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  426f4c:	4770      	bxne	lr
  426f4e:	f092 0f00 	teq	r2, #0
  426f52:	bf14      	ite	ne
  426f54:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  426f58:	4770      	bxeq	lr
  426f5a:	b530      	push	{r4, r5, lr}
  426f5c:	f44f 7460 	mov.w	r4, #896	; 0x380
  426f60:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  426f64:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  426f68:	e720      	b.n	426dac <__adddf3+0x138>
  426f6a:	bf00      	nop

00426f6c <__aeabi_ul2d>:
  426f6c:	ea50 0201 	orrs.w	r2, r0, r1
  426f70:	bf08      	it	eq
  426f72:	4770      	bxeq	lr
  426f74:	b530      	push	{r4, r5, lr}
  426f76:	f04f 0500 	mov.w	r5, #0
  426f7a:	e00a      	b.n	426f92 <__aeabi_l2d+0x16>

00426f7c <__aeabi_l2d>:
  426f7c:	ea50 0201 	orrs.w	r2, r0, r1
  426f80:	bf08      	it	eq
  426f82:	4770      	bxeq	lr
  426f84:	b530      	push	{r4, r5, lr}
  426f86:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  426f8a:	d502      	bpl.n	426f92 <__aeabi_l2d+0x16>
  426f8c:	4240      	negs	r0, r0
  426f8e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  426f92:	f44f 6480 	mov.w	r4, #1024	; 0x400
  426f96:	f104 0432 	add.w	r4, r4, #50	; 0x32
  426f9a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  426f9e:	f43f aedc 	beq.w	426d5a <__adddf3+0xe6>
  426fa2:	f04f 0203 	mov.w	r2, #3
  426fa6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  426faa:	bf18      	it	ne
  426fac:	3203      	addne	r2, #3
  426fae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  426fb2:	bf18      	it	ne
  426fb4:	3203      	addne	r2, #3
  426fb6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  426fba:	f1c2 0320 	rsb	r3, r2, #32
  426fbe:	fa00 fc03 	lsl.w	ip, r0, r3
  426fc2:	fa20 f002 	lsr.w	r0, r0, r2
  426fc6:	fa01 fe03 	lsl.w	lr, r1, r3
  426fca:	ea40 000e 	orr.w	r0, r0, lr
  426fce:	fa21 f102 	lsr.w	r1, r1, r2
  426fd2:	4414      	add	r4, r2
  426fd4:	e6c1      	b.n	426d5a <__adddf3+0xe6>
  426fd6:	bf00      	nop

00426fd8 <__aeabi_dmul>:
  426fd8:	b570      	push	{r4, r5, r6, lr}
  426fda:	f04f 0cff 	mov.w	ip, #255	; 0xff
  426fde:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  426fe2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  426fe6:	bf1d      	ittte	ne
  426fe8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  426fec:	ea94 0f0c 	teqne	r4, ip
  426ff0:	ea95 0f0c 	teqne	r5, ip
  426ff4:	f000 f8de 	bleq	4271b4 <__aeabi_dmul+0x1dc>
  426ff8:	442c      	add	r4, r5
  426ffa:	ea81 0603 	eor.w	r6, r1, r3
  426ffe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  427002:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  427006:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  42700a:	bf18      	it	ne
  42700c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  427010:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  427014:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  427018:	d038      	beq.n	42708c <__aeabi_dmul+0xb4>
  42701a:	fba0 ce02 	umull	ip, lr, r0, r2
  42701e:	f04f 0500 	mov.w	r5, #0
  427022:	fbe1 e502 	umlal	lr, r5, r1, r2
  427026:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  42702a:	fbe0 e503 	umlal	lr, r5, r0, r3
  42702e:	f04f 0600 	mov.w	r6, #0
  427032:	fbe1 5603 	umlal	r5, r6, r1, r3
  427036:	f09c 0f00 	teq	ip, #0
  42703a:	bf18      	it	ne
  42703c:	f04e 0e01 	orrne.w	lr, lr, #1
  427040:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  427044:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  427048:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  42704c:	d204      	bcs.n	427058 <__aeabi_dmul+0x80>
  42704e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  427052:	416d      	adcs	r5, r5
  427054:	eb46 0606 	adc.w	r6, r6, r6
  427058:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  42705c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  427060:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  427064:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  427068:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  42706c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  427070:	bf88      	it	hi
  427072:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  427076:	d81e      	bhi.n	4270b6 <__aeabi_dmul+0xde>
  427078:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  42707c:	bf08      	it	eq
  42707e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  427082:	f150 0000 	adcs.w	r0, r0, #0
  427086:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  42708a:	bd70      	pop	{r4, r5, r6, pc}
  42708c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  427090:	ea46 0101 	orr.w	r1, r6, r1
  427094:	ea40 0002 	orr.w	r0, r0, r2
  427098:	ea81 0103 	eor.w	r1, r1, r3
  42709c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4270a0:	bfc2      	ittt	gt
  4270a2:	ebd4 050c 	rsbsgt	r5, r4, ip
  4270a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4270aa:	bd70      	popgt	{r4, r5, r6, pc}
  4270ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4270b0:	f04f 0e00 	mov.w	lr, #0
  4270b4:	3c01      	subs	r4, #1
  4270b6:	f300 80ab 	bgt.w	427210 <__aeabi_dmul+0x238>
  4270ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4270be:	bfde      	ittt	le
  4270c0:	2000      	movle	r0, #0
  4270c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4270c6:	bd70      	pople	{r4, r5, r6, pc}
  4270c8:	f1c4 0400 	rsb	r4, r4, #0
  4270cc:	3c20      	subs	r4, #32
  4270ce:	da35      	bge.n	42713c <__aeabi_dmul+0x164>
  4270d0:	340c      	adds	r4, #12
  4270d2:	dc1b      	bgt.n	42710c <__aeabi_dmul+0x134>
  4270d4:	f104 0414 	add.w	r4, r4, #20
  4270d8:	f1c4 0520 	rsb	r5, r4, #32
  4270dc:	fa00 f305 	lsl.w	r3, r0, r5
  4270e0:	fa20 f004 	lsr.w	r0, r0, r4
  4270e4:	fa01 f205 	lsl.w	r2, r1, r5
  4270e8:	ea40 0002 	orr.w	r0, r0, r2
  4270ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4270f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4270f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4270f8:	fa21 f604 	lsr.w	r6, r1, r4
  4270fc:	eb42 0106 	adc.w	r1, r2, r6
  427100:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  427104:	bf08      	it	eq
  427106:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  42710a:	bd70      	pop	{r4, r5, r6, pc}
  42710c:	f1c4 040c 	rsb	r4, r4, #12
  427110:	f1c4 0520 	rsb	r5, r4, #32
  427114:	fa00 f304 	lsl.w	r3, r0, r4
  427118:	fa20 f005 	lsr.w	r0, r0, r5
  42711c:	fa01 f204 	lsl.w	r2, r1, r4
  427120:	ea40 0002 	orr.w	r0, r0, r2
  427124:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  427128:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  42712c:	f141 0100 	adc.w	r1, r1, #0
  427130:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  427134:	bf08      	it	eq
  427136:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  42713a:	bd70      	pop	{r4, r5, r6, pc}
  42713c:	f1c4 0520 	rsb	r5, r4, #32
  427140:	fa00 f205 	lsl.w	r2, r0, r5
  427144:	ea4e 0e02 	orr.w	lr, lr, r2
  427148:	fa20 f304 	lsr.w	r3, r0, r4
  42714c:	fa01 f205 	lsl.w	r2, r1, r5
  427150:	ea43 0302 	orr.w	r3, r3, r2
  427154:	fa21 f004 	lsr.w	r0, r1, r4
  427158:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  42715c:	fa21 f204 	lsr.w	r2, r1, r4
  427160:	ea20 0002 	bic.w	r0, r0, r2
  427164:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  427168:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  42716c:	bf08      	it	eq
  42716e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  427172:	bd70      	pop	{r4, r5, r6, pc}
  427174:	f094 0f00 	teq	r4, #0
  427178:	d10f      	bne.n	42719a <__aeabi_dmul+0x1c2>
  42717a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  42717e:	0040      	lsls	r0, r0, #1
  427180:	eb41 0101 	adc.w	r1, r1, r1
  427184:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  427188:	bf08      	it	eq
  42718a:	3c01      	subeq	r4, #1
  42718c:	d0f7      	beq.n	42717e <__aeabi_dmul+0x1a6>
  42718e:	ea41 0106 	orr.w	r1, r1, r6
  427192:	f095 0f00 	teq	r5, #0
  427196:	bf18      	it	ne
  427198:	4770      	bxne	lr
  42719a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  42719e:	0052      	lsls	r2, r2, #1
  4271a0:	eb43 0303 	adc.w	r3, r3, r3
  4271a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4271a8:	bf08      	it	eq
  4271aa:	3d01      	subeq	r5, #1
  4271ac:	d0f7      	beq.n	42719e <__aeabi_dmul+0x1c6>
  4271ae:	ea43 0306 	orr.w	r3, r3, r6
  4271b2:	4770      	bx	lr
  4271b4:	ea94 0f0c 	teq	r4, ip
  4271b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4271bc:	bf18      	it	ne
  4271be:	ea95 0f0c 	teqne	r5, ip
  4271c2:	d00c      	beq.n	4271de <__aeabi_dmul+0x206>
  4271c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4271c8:	bf18      	it	ne
  4271ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4271ce:	d1d1      	bne.n	427174 <__aeabi_dmul+0x19c>
  4271d0:	ea81 0103 	eor.w	r1, r1, r3
  4271d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4271d8:	f04f 0000 	mov.w	r0, #0
  4271dc:	bd70      	pop	{r4, r5, r6, pc}
  4271de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4271e2:	bf06      	itte	eq
  4271e4:	4610      	moveq	r0, r2
  4271e6:	4619      	moveq	r1, r3
  4271e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4271ec:	d019      	beq.n	427222 <__aeabi_dmul+0x24a>
  4271ee:	ea94 0f0c 	teq	r4, ip
  4271f2:	d102      	bne.n	4271fa <__aeabi_dmul+0x222>
  4271f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4271f8:	d113      	bne.n	427222 <__aeabi_dmul+0x24a>
  4271fa:	ea95 0f0c 	teq	r5, ip
  4271fe:	d105      	bne.n	42720c <__aeabi_dmul+0x234>
  427200:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  427204:	bf1c      	itt	ne
  427206:	4610      	movne	r0, r2
  427208:	4619      	movne	r1, r3
  42720a:	d10a      	bne.n	427222 <__aeabi_dmul+0x24a>
  42720c:	ea81 0103 	eor.w	r1, r1, r3
  427210:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  427214:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  427218:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  42721c:	f04f 0000 	mov.w	r0, #0
  427220:	bd70      	pop	{r4, r5, r6, pc}
  427222:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  427226:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  42722a:	bd70      	pop	{r4, r5, r6, pc}

0042722c <__aeabi_ddiv>:
  42722c:	b570      	push	{r4, r5, r6, lr}
  42722e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  427232:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  427236:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  42723a:	bf1d      	ittte	ne
  42723c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  427240:	ea94 0f0c 	teqne	r4, ip
  427244:	ea95 0f0c 	teqne	r5, ip
  427248:	f000 f8a7 	bleq	42739a <__aeabi_ddiv+0x16e>
  42724c:	eba4 0405 	sub.w	r4, r4, r5
  427250:	ea81 0e03 	eor.w	lr, r1, r3
  427254:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  427258:	ea4f 3101 	mov.w	r1, r1, lsl #12
  42725c:	f000 8088 	beq.w	427370 <__aeabi_ddiv+0x144>
  427260:	ea4f 3303 	mov.w	r3, r3, lsl #12
  427264:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  427268:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  42726c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  427270:	ea4f 2202 	mov.w	r2, r2, lsl #8
  427274:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  427278:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  42727c:	ea4f 2600 	mov.w	r6, r0, lsl #8
  427280:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  427284:	429d      	cmp	r5, r3
  427286:	bf08      	it	eq
  427288:	4296      	cmpeq	r6, r2
  42728a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  42728e:	f504 7440 	add.w	r4, r4, #768	; 0x300
  427292:	d202      	bcs.n	42729a <__aeabi_ddiv+0x6e>
  427294:	085b      	lsrs	r3, r3, #1
  427296:	ea4f 0232 	mov.w	r2, r2, rrx
  42729a:	1ab6      	subs	r6, r6, r2
  42729c:	eb65 0503 	sbc.w	r5, r5, r3
  4272a0:	085b      	lsrs	r3, r3, #1
  4272a2:	ea4f 0232 	mov.w	r2, r2, rrx
  4272a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4272aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4272ae:	ebb6 0e02 	subs.w	lr, r6, r2
  4272b2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4272b6:	bf22      	ittt	cs
  4272b8:	1ab6      	subcs	r6, r6, r2
  4272ba:	4675      	movcs	r5, lr
  4272bc:	ea40 000c 	orrcs.w	r0, r0, ip
  4272c0:	085b      	lsrs	r3, r3, #1
  4272c2:	ea4f 0232 	mov.w	r2, r2, rrx
  4272c6:	ebb6 0e02 	subs.w	lr, r6, r2
  4272ca:	eb75 0e03 	sbcs.w	lr, r5, r3
  4272ce:	bf22      	ittt	cs
  4272d0:	1ab6      	subcs	r6, r6, r2
  4272d2:	4675      	movcs	r5, lr
  4272d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4272d8:	085b      	lsrs	r3, r3, #1
  4272da:	ea4f 0232 	mov.w	r2, r2, rrx
  4272de:	ebb6 0e02 	subs.w	lr, r6, r2
  4272e2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4272e6:	bf22      	ittt	cs
  4272e8:	1ab6      	subcs	r6, r6, r2
  4272ea:	4675      	movcs	r5, lr
  4272ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4272f0:	085b      	lsrs	r3, r3, #1
  4272f2:	ea4f 0232 	mov.w	r2, r2, rrx
  4272f6:	ebb6 0e02 	subs.w	lr, r6, r2
  4272fa:	eb75 0e03 	sbcs.w	lr, r5, r3
  4272fe:	bf22      	ittt	cs
  427300:	1ab6      	subcs	r6, r6, r2
  427302:	4675      	movcs	r5, lr
  427304:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  427308:	ea55 0e06 	orrs.w	lr, r5, r6
  42730c:	d018      	beq.n	427340 <__aeabi_ddiv+0x114>
  42730e:	ea4f 1505 	mov.w	r5, r5, lsl #4
  427312:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  427316:	ea4f 1606 	mov.w	r6, r6, lsl #4
  42731a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  42731e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  427322:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  427326:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  42732a:	d1c0      	bne.n	4272ae <__aeabi_ddiv+0x82>
  42732c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  427330:	d10b      	bne.n	42734a <__aeabi_ddiv+0x11e>
  427332:	ea41 0100 	orr.w	r1, r1, r0
  427336:	f04f 0000 	mov.w	r0, #0
  42733a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  42733e:	e7b6      	b.n	4272ae <__aeabi_ddiv+0x82>
  427340:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  427344:	bf04      	itt	eq
  427346:	4301      	orreq	r1, r0
  427348:	2000      	moveq	r0, #0
  42734a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  42734e:	bf88      	it	hi
  427350:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  427354:	f63f aeaf 	bhi.w	4270b6 <__aeabi_dmul+0xde>
  427358:	ebb5 0c03 	subs.w	ip, r5, r3
  42735c:	bf04      	itt	eq
  42735e:	ebb6 0c02 	subseq.w	ip, r6, r2
  427362:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  427366:	f150 0000 	adcs.w	r0, r0, #0
  42736a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  42736e:	bd70      	pop	{r4, r5, r6, pc}
  427370:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  427374:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  427378:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  42737c:	bfc2      	ittt	gt
  42737e:	ebd4 050c 	rsbsgt	r5, r4, ip
  427382:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  427386:	bd70      	popgt	{r4, r5, r6, pc}
  427388:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  42738c:	f04f 0e00 	mov.w	lr, #0
  427390:	3c01      	subs	r4, #1
  427392:	e690      	b.n	4270b6 <__aeabi_dmul+0xde>
  427394:	ea45 0e06 	orr.w	lr, r5, r6
  427398:	e68d      	b.n	4270b6 <__aeabi_dmul+0xde>
  42739a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  42739e:	ea94 0f0c 	teq	r4, ip
  4273a2:	bf08      	it	eq
  4273a4:	ea95 0f0c 	teqeq	r5, ip
  4273a8:	f43f af3b 	beq.w	427222 <__aeabi_dmul+0x24a>
  4273ac:	ea94 0f0c 	teq	r4, ip
  4273b0:	d10a      	bne.n	4273c8 <__aeabi_ddiv+0x19c>
  4273b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4273b6:	f47f af34 	bne.w	427222 <__aeabi_dmul+0x24a>
  4273ba:	ea95 0f0c 	teq	r5, ip
  4273be:	f47f af25 	bne.w	42720c <__aeabi_dmul+0x234>
  4273c2:	4610      	mov	r0, r2
  4273c4:	4619      	mov	r1, r3
  4273c6:	e72c      	b.n	427222 <__aeabi_dmul+0x24a>
  4273c8:	ea95 0f0c 	teq	r5, ip
  4273cc:	d106      	bne.n	4273dc <__aeabi_ddiv+0x1b0>
  4273ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4273d2:	f43f aefd 	beq.w	4271d0 <__aeabi_dmul+0x1f8>
  4273d6:	4610      	mov	r0, r2
  4273d8:	4619      	mov	r1, r3
  4273da:	e722      	b.n	427222 <__aeabi_dmul+0x24a>
  4273dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4273e0:	bf18      	it	ne
  4273e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4273e6:	f47f aec5 	bne.w	427174 <__aeabi_dmul+0x19c>
  4273ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4273ee:	f47f af0d 	bne.w	42720c <__aeabi_dmul+0x234>
  4273f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4273f6:	f47f aeeb 	bne.w	4271d0 <__aeabi_dmul+0x1f8>
  4273fa:	e712      	b.n	427222 <__aeabi_dmul+0x24a>

004273fc <__aeabi_d2uiz>:
  4273fc:	004a      	lsls	r2, r1, #1
  4273fe:	d211      	bcs.n	427424 <__aeabi_d2uiz+0x28>
  427400:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  427404:	d211      	bcs.n	42742a <__aeabi_d2uiz+0x2e>
  427406:	d50d      	bpl.n	427424 <__aeabi_d2uiz+0x28>
  427408:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  42740c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  427410:	d40e      	bmi.n	427430 <__aeabi_d2uiz+0x34>
  427412:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  427416:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  42741a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  42741e:	fa23 f002 	lsr.w	r0, r3, r2
  427422:	4770      	bx	lr
  427424:	f04f 0000 	mov.w	r0, #0
  427428:	4770      	bx	lr
  42742a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  42742e:	d102      	bne.n	427436 <__aeabi_d2uiz+0x3a>
  427430:	f04f 30ff 	mov.w	r0, #4294967295
  427434:	4770      	bx	lr
  427436:	f04f 0000 	mov.w	r0, #0
  42743a:	4770      	bx	lr

0042743c <__aeabi_d2f>:
  42743c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  427440:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  427444:	bf24      	itt	cs
  427446:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  42744a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  42744e:	d90d      	bls.n	42746c <__aeabi_d2f+0x30>
  427450:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  427454:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  427458:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  42745c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  427460:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  427464:	bf08      	it	eq
  427466:	f020 0001 	biceq.w	r0, r0, #1
  42746a:	4770      	bx	lr
  42746c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  427470:	d121      	bne.n	4274b6 <__aeabi_d2f+0x7a>
  427472:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  427476:	bfbc      	itt	lt
  427478:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  42747c:	4770      	bxlt	lr
  42747e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  427482:	ea4f 5252 	mov.w	r2, r2, lsr #21
  427486:	f1c2 0218 	rsb	r2, r2, #24
  42748a:	f1c2 0c20 	rsb	ip, r2, #32
  42748e:	fa10 f30c 	lsls.w	r3, r0, ip
  427492:	fa20 f002 	lsr.w	r0, r0, r2
  427496:	bf18      	it	ne
  427498:	f040 0001 	orrne.w	r0, r0, #1
  42749c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4274a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  4274a4:	fa03 fc0c 	lsl.w	ip, r3, ip
  4274a8:	ea40 000c 	orr.w	r0, r0, ip
  4274ac:	fa23 f302 	lsr.w	r3, r3, r2
  4274b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
  4274b4:	e7cc      	b.n	427450 <__aeabi_d2f+0x14>
  4274b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
  4274ba:	d107      	bne.n	4274cc <__aeabi_d2f+0x90>
  4274bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  4274c0:	bf1e      	ittt	ne
  4274c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  4274c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  4274ca:	4770      	bxne	lr
  4274cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  4274d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  4274d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4274d8:	4770      	bx	lr
  4274da:	bf00      	nop

004274dc <__aeabi_uldivmod>:
  4274dc:	b953      	cbnz	r3, 4274f4 <__aeabi_uldivmod+0x18>
  4274de:	b94a      	cbnz	r2, 4274f4 <__aeabi_uldivmod+0x18>
  4274e0:	2900      	cmp	r1, #0
  4274e2:	bf08      	it	eq
  4274e4:	2800      	cmpeq	r0, #0
  4274e6:	bf1c      	itt	ne
  4274e8:	f04f 31ff 	movne.w	r1, #4294967295
  4274ec:	f04f 30ff 	movne.w	r0, #4294967295
  4274f0:	f000 b97a 	b.w	4277e8 <__aeabi_idiv0>
  4274f4:	f1ad 0c08 	sub.w	ip, sp, #8
  4274f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4274fc:	f000 f806 	bl	42750c <__udivmoddi4>
  427500:	f8dd e004 	ldr.w	lr, [sp, #4]
  427504:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  427508:	b004      	add	sp, #16
  42750a:	4770      	bx	lr

0042750c <__udivmoddi4>:
  42750c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  427510:	468c      	mov	ip, r1
  427512:	460d      	mov	r5, r1
  427514:	4604      	mov	r4, r0
  427516:	9e08      	ldr	r6, [sp, #32]
  427518:	2b00      	cmp	r3, #0
  42751a:	d151      	bne.n	4275c0 <__udivmoddi4+0xb4>
  42751c:	428a      	cmp	r2, r1
  42751e:	4617      	mov	r7, r2
  427520:	d96d      	bls.n	4275fe <__udivmoddi4+0xf2>
  427522:	fab2 fe82 	clz	lr, r2
  427526:	f1be 0f00 	cmp.w	lr, #0
  42752a:	d00b      	beq.n	427544 <__udivmoddi4+0x38>
  42752c:	f1ce 0c20 	rsb	ip, lr, #32
  427530:	fa01 f50e 	lsl.w	r5, r1, lr
  427534:	fa20 fc0c 	lsr.w	ip, r0, ip
  427538:	fa02 f70e 	lsl.w	r7, r2, lr
  42753c:	ea4c 0c05 	orr.w	ip, ip, r5
  427540:	fa00 f40e 	lsl.w	r4, r0, lr
  427544:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  427548:	0c25      	lsrs	r5, r4, #16
  42754a:	fbbc f8fa 	udiv	r8, ip, sl
  42754e:	fa1f f987 	uxth.w	r9, r7
  427552:	fb0a cc18 	mls	ip, sl, r8, ip
  427556:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  42755a:	fb08 f309 	mul.w	r3, r8, r9
  42755e:	42ab      	cmp	r3, r5
  427560:	d90a      	bls.n	427578 <__udivmoddi4+0x6c>
  427562:	19ed      	adds	r5, r5, r7
  427564:	f108 32ff 	add.w	r2, r8, #4294967295
  427568:	f080 8123 	bcs.w	4277b2 <__udivmoddi4+0x2a6>
  42756c:	42ab      	cmp	r3, r5
  42756e:	f240 8120 	bls.w	4277b2 <__udivmoddi4+0x2a6>
  427572:	f1a8 0802 	sub.w	r8, r8, #2
  427576:	443d      	add	r5, r7
  427578:	1aed      	subs	r5, r5, r3
  42757a:	b2a4      	uxth	r4, r4
  42757c:	fbb5 f0fa 	udiv	r0, r5, sl
  427580:	fb0a 5510 	mls	r5, sl, r0, r5
  427584:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  427588:	fb00 f909 	mul.w	r9, r0, r9
  42758c:	45a1      	cmp	r9, r4
  42758e:	d909      	bls.n	4275a4 <__udivmoddi4+0x98>
  427590:	19e4      	adds	r4, r4, r7
  427592:	f100 33ff 	add.w	r3, r0, #4294967295
  427596:	f080 810a 	bcs.w	4277ae <__udivmoddi4+0x2a2>
  42759a:	45a1      	cmp	r9, r4
  42759c:	f240 8107 	bls.w	4277ae <__udivmoddi4+0x2a2>
  4275a0:	3802      	subs	r0, #2
  4275a2:	443c      	add	r4, r7
  4275a4:	eba4 0409 	sub.w	r4, r4, r9
  4275a8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4275ac:	2100      	movs	r1, #0
  4275ae:	2e00      	cmp	r6, #0
  4275b0:	d061      	beq.n	427676 <__udivmoddi4+0x16a>
  4275b2:	fa24 f40e 	lsr.w	r4, r4, lr
  4275b6:	2300      	movs	r3, #0
  4275b8:	6034      	str	r4, [r6, #0]
  4275ba:	6073      	str	r3, [r6, #4]
  4275bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4275c0:	428b      	cmp	r3, r1
  4275c2:	d907      	bls.n	4275d4 <__udivmoddi4+0xc8>
  4275c4:	2e00      	cmp	r6, #0
  4275c6:	d054      	beq.n	427672 <__udivmoddi4+0x166>
  4275c8:	2100      	movs	r1, #0
  4275ca:	e886 0021 	stmia.w	r6, {r0, r5}
  4275ce:	4608      	mov	r0, r1
  4275d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4275d4:	fab3 f183 	clz	r1, r3
  4275d8:	2900      	cmp	r1, #0
  4275da:	f040 808e 	bne.w	4276fa <__udivmoddi4+0x1ee>
  4275de:	42ab      	cmp	r3, r5
  4275e0:	d302      	bcc.n	4275e8 <__udivmoddi4+0xdc>
  4275e2:	4282      	cmp	r2, r0
  4275e4:	f200 80fa 	bhi.w	4277dc <__udivmoddi4+0x2d0>
  4275e8:	1a84      	subs	r4, r0, r2
  4275ea:	eb65 0503 	sbc.w	r5, r5, r3
  4275ee:	2001      	movs	r0, #1
  4275f0:	46ac      	mov	ip, r5
  4275f2:	2e00      	cmp	r6, #0
  4275f4:	d03f      	beq.n	427676 <__udivmoddi4+0x16a>
  4275f6:	e886 1010 	stmia.w	r6, {r4, ip}
  4275fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4275fe:	b912      	cbnz	r2, 427606 <__udivmoddi4+0xfa>
  427600:	2701      	movs	r7, #1
  427602:	fbb7 f7f2 	udiv	r7, r7, r2
  427606:	fab7 fe87 	clz	lr, r7
  42760a:	f1be 0f00 	cmp.w	lr, #0
  42760e:	d134      	bne.n	42767a <__udivmoddi4+0x16e>
  427610:	1beb      	subs	r3, r5, r7
  427612:	0c3a      	lsrs	r2, r7, #16
  427614:	fa1f fc87 	uxth.w	ip, r7
  427618:	2101      	movs	r1, #1
  42761a:	fbb3 f8f2 	udiv	r8, r3, r2
  42761e:	0c25      	lsrs	r5, r4, #16
  427620:	fb02 3318 	mls	r3, r2, r8, r3
  427624:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  427628:	fb0c f308 	mul.w	r3, ip, r8
  42762c:	42ab      	cmp	r3, r5
  42762e:	d907      	bls.n	427640 <__udivmoddi4+0x134>
  427630:	19ed      	adds	r5, r5, r7
  427632:	f108 30ff 	add.w	r0, r8, #4294967295
  427636:	d202      	bcs.n	42763e <__udivmoddi4+0x132>
  427638:	42ab      	cmp	r3, r5
  42763a:	f200 80d1 	bhi.w	4277e0 <__udivmoddi4+0x2d4>
  42763e:	4680      	mov	r8, r0
  427640:	1aed      	subs	r5, r5, r3
  427642:	b2a3      	uxth	r3, r4
  427644:	fbb5 f0f2 	udiv	r0, r5, r2
  427648:	fb02 5510 	mls	r5, r2, r0, r5
  42764c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  427650:	fb0c fc00 	mul.w	ip, ip, r0
  427654:	45a4      	cmp	ip, r4
  427656:	d907      	bls.n	427668 <__udivmoddi4+0x15c>
  427658:	19e4      	adds	r4, r4, r7
  42765a:	f100 33ff 	add.w	r3, r0, #4294967295
  42765e:	d202      	bcs.n	427666 <__udivmoddi4+0x15a>
  427660:	45a4      	cmp	ip, r4
  427662:	f200 80b8 	bhi.w	4277d6 <__udivmoddi4+0x2ca>
  427666:	4618      	mov	r0, r3
  427668:	eba4 040c 	sub.w	r4, r4, ip
  42766c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  427670:	e79d      	b.n	4275ae <__udivmoddi4+0xa2>
  427672:	4631      	mov	r1, r6
  427674:	4630      	mov	r0, r6
  427676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  42767a:	f1ce 0420 	rsb	r4, lr, #32
  42767e:	fa05 f30e 	lsl.w	r3, r5, lr
  427682:	fa07 f70e 	lsl.w	r7, r7, lr
  427686:	fa20 f804 	lsr.w	r8, r0, r4
  42768a:	0c3a      	lsrs	r2, r7, #16
  42768c:	fa25 f404 	lsr.w	r4, r5, r4
  427690:	ea48 0803 	orr.w	r8, r8, r3
  427694:	fbb4 f1f2 	udiv	r1, r4, r2
  427698:	ea4f 4518 	mov.w	r5, r8, lsr #16
  42769c:	fb02 4411 	mls	r4, r2, r1, r4
  4276a0:	fa1f fc87 	uxth.w	ip, r7
  4276a4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4276a8:	fb01 f30c 	mul.w	r3, r1, ip
  4276ac:	42ab      	cmp	r3, r5
  4276ae:	fa00 f40e 	lsl.w	r4, r0, lr
  4276b2:	d909      	bls.n	4276c8 <__udivmoddi4+0x1bc>
  4276b4:	19ed      	adds	r5, r5, r7
  4276b6:	f101 30ff 	add.w	r0, r1, #4294967295
  4276ba:	f080 808a 	bcs.w	4277d2 <__udivmoddi4+0x2c6>
  4276be:	42ab      	cmp	r3, r5
  4276c0:	f240 8087 	bls.w	4277d2 <__udivmoddi4+0x2c6>
  4276c4:	3902      	subs	r1, #2
  4276c6:	443d      	add	r5, r7
  4276c8:	1aeb      	subs	r3, r5, r3
  4276ca:	fa1f f588 	uxth.w	r5, r8
  4276ce:	fbb3 f0f2 	udiv	r0, r3, r2
  4276d2:	fb02 3310 	mls	r3, r2, r0, r3
  4276d6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4276da:	fb00 f30c 	mul.w	r3, r0, ip
  4276de:	42ab      	cmp	r3, r5
  4276e0:	d907      	bls.n	4276f2 <__udivmoddi4+0x1e6>
  4276e2:	19ed      	adds	r5, r5, r7
  4276e4:	f100 38ff 	add.w	r8, r0, #4294967295
  4276e8:	d26f      	bcs.n	4277ca <__udivmoddi4+0x2be>
  4276ea:	42ab      	cmp	r3, r5
  4276ec:	d96d      	bls.n	4277ca <__udivmoddi4+0x2be>
  4276ee:	3802      	subs	r0, #2
  4276f0:	443d      	add	r5, r7
  4276f2:	1aeb      	subs	r3, r5, r3
  4276f4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4276f8:	e78f      	b.n	42761a <__udivmoddi4+0x10e>
  4276fa:	f1c1 0720 	rsb	r7, r1, #32
  4276fe:	fa22 f807 	lsr.w	r8, r2, r7
  427702:	408b      	lsls	r3, r1
  427704:	fa05 f401 	lsl.w	r4, r5, r1
  427708:	ea48 0303 	orr.w	r3, r8, r3
  42770c:	fa20 fe07 	lsr.w	lr, r0, r7
  427710:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  427714:	40fd      	lsrs	r5, r7
  427716:	ea4e 0e04 	orr.w	lr, lr, r4
  42771a:	fbb5 f9fc 	udiv	r9, r5, ip
  42771e:	ea4f 441e 	mov.w	r4, lr, lsr #16
  427722:	fb0c 5519 	mls	r5, ip, r9, r5
  427726:	fa1f f883 	uxth.w	r8, r3
  42772a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  42772e:	fb09 f408 	mul.w	r4, r9, r8
  427732:	42ac      	cmp	r4, r5
  427734:	fa02 f201 	lsl.w	r2, r2, r1
  427738:	fa00 fa01 	lsl.w	sl, r0, r1
  42773c:	d908      	bls.n	427750 <__udivmoddi4+0x244>
  42773e:	18ed      	adds	r5, r5, r3
  427740:	f109 30ff 	add.w	r0, r9, #4294967295
  427744:	d243      	bcs.n	4277ce <__udivmoddi4+0x2c2>
  427746:	42ac      	cmp	r4, r5
  427748:	d941      	bls.n	4277ce <__udivmoddi4+0x2c2>
  42774a:	f1a9 0902 	sub.w	r9, r9, #2
  42774e:	441d      	add	r5, r3
  427750:	1b2d      	subs	r5, r5, r4
  427752:	fa1f fe8e 	uxth.w	lr, lr
  427756:	fbb5 f0fc 	udiv	r0, r5, ip
  42775a:	fb0c 5510 	mls	r5, ip, r0, r5
  42775e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  427762:	fb00 f808 	mul.w	r8, r0, r8
  427766:	45a0      	cmp	r8, r4
  427768:	d907      	bls.n	42777a <__udivmoddi4+0x26e>
  42776a:	18e4      	adds	r4, r4, r3
  42776c:	f100 35ff 	add.w	r5, r0, #4294967295
  427770:	d229      	bcs.n	4277c6 <__udivmoddi4+0x2ba>
  427772:	45a0      	cmp	r8, r4
  427774:	d927      	bls.n	4277c6 <__udivmoddi4+0x2ba>
  427776:	3802      	subs	r0, #2
  427778:	441c      	add	r4, r3
  42777a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  42777e:	eba4 0408 	sub.w	r4, r4, r8
  427782:	fba0 8902 	umull	r8, r9, r0, r2
  427786:	454c      	cmp	r4, r9
  427788:	46c6      	mov	lr, r8
  42778a:	464d      	mov	r5, r9
  42778c:	d315      	bcc.n	4277ba <__udivmoddi4+0x2ae>
  42778e:	d012      	beq.n	4277b6 <__udivmoddi4+0x2aa>
  427790:	b156      	cbz	r6, 4277a8 <__udivmoddi4+0x29c>
  427792:	ebba 030e 	subs.w	r3, sl, lr
  427796:	eb64 0405 	sbc.w	r4, r4, r5
  42779a:	fa04 f707 	lsl.w	r7, r4, r7
  42779e:	40cb      	lsrs	r3, r1
  4277a0:	431f      	orrs	r7, r3
  4277a2:	40cc      	lsrs	r4, r1
  4277a4:	6037      	str	r7, [r6, #0]
  4277a6:	6074      	str	r4, [r6, #4]
  4277a8:	2100      	movs	r1, #0
  4277aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4277ae:	4618      	mov	r0, r3
  4277b0:	e6f8      	b.n	4275a4 <__udivmoddi4+0x98>
  4277b2:	4690      	mov	r8, r2
  4277b4:	e6e0      	b.n	427578 <__udivmoddi4+0x6c>
  4277b6:	45c2      	cmp	sl, r8
  4277b8:	d2ea      	bcs.n	427790 <__udivmoddi4+0x284>
  4277ba:	ebb8 0e02 	subs.w	lr, r8, r2
  4277be:	eb69 0503 	sbc.w	r5, r9, r3
  4277c2:	3801      	subs	r0, #1
  4277c4:	e7e4      	b.n	427790 <__udivmoddi4+0x284>
  4277c6:	4628      	mov	r0, r5
  4277c8:	e7d7      	b.n	42777a <__udivmoddi4+0x26e>
  4277ca:	4640      	mov	r0, r8
  4277cc:	e791      	b.n	4276f2 <__udivmoddi4+0x1e6>
  4277ce:	4681      	mov	r9, r0
  4277d0:	e7be      	b.n	427750 <__udivmoddi4+0x244>
  4277d2:	4601      	mov	r1, r0
  4277d4:	e778      	b.n	4276c8 <__udivmoddi4+0x1bc>
  4277d6:	3802      	subs	r0, #2
  4277d8:	443c      	add	r4, r7
  4277da:	e745      	b.n	427668 <__udivmoddi4+0x15c>
  4277dc:	4608      	mov	r0, r1
  4277de:	e708      	b.n	4275f2 <__udivmoddi4+0xe6>
  4277e0:	f1a8 0802 	sub.w	r8, r8, #2
  4277e4:	443d      	add	r5, r7
  4277e6:	e72b      	b.n	427640 <__udivmoddi4+0x134>

004277e8 <__aeabi_idiv0>:
  4277e8:	4770      	bx	lr
  4277ea:	bf00      	nop

004277ec <__libc_init_array>:
  4277ec:	b570      	push	{r4, r5, r6, lr}
  4277ee:	4e0f      	ldr	r6, [pc, #60]	; (42782c <__libc_init_array+0x40>)
  4277f0:	4d0f      	ldr	r5, [pc, #60]	; (427830 <__libc_init_array+0x44>)
  4277f2:	1b76      	subs	r6, r6, r5
  4277f4:	10b6      	asrs	r6, r6, #2
  4277f6:	bf18      	it	ne
  4277f8:	2400      	movne	r4, #0
  4277fa:	d005      	beq.n	427808 <__libc_init_array+0x1c>
  4277fc:	3401      	adds	r4, #1
  4277fe:	f855 3b04 	ldr.w	r3, [r5], #4
  427802:	4798      	blx	r3
  427804:	42a6      	cmp	r6, r4
  427806:	d1f9      	bne.n	4277fc <__libc_init_array+0x10>
  427808:	4e0a      	ldr	r6, [pc, #40]	; (427834 <__libc_init_array+0x48>)
  42780a:	4d0b      	ldr	r5, [pc, #44]	; (427838 <__libc_init_array+0x4c>)
  42780c:	1b76      	subs	r6, r6, r5
  42780e:	f00a fc99 	bl	432144 <_init>
  427812:	10b6      	asrs	r6, r6, #2
  427814:	bf18      	it	ne
  427816:	2400      	movne	r4, #0
  427818:	d006      	beq.n	427828 <__libc_init_array+0x3c>
  42781a:	3401      	adds	r4, #1
  42781c:	f855 3b04 	ldr.w	r3, [r5], #4
  427820:	4798      	blx	r3
  427822:	42a6      	cmp	r6, r4
  427824:	d1f9      	bne.n	42781a <__libc_init_array+0x2e>
  427826:	bd70      	pop	{r4, r5, r6, pc}
  427828:	bd70      	pop	{r4, r5, r6, pc}
  42782a:	bf00      	nop
  42782c:	00432150 	.word	0x00432150
  427830:	00432150 	.word	0x00432150
  427834:	00432158 	.word	0x00432158
  427838:	00432150 	.word	0x00432150

0042783c <iprintf>:
  42783c:	b40f      	push	{r0, r1, r2, r3}
  42783e:	b500      	push	{lr}
  427840:	4907      	ldr	r1, [pc, #28]	; (427860 <iprintf+0x24>)
  427842:	b083      	sub	sp, #12
  427844:	ab04      	add	r3, sp, #16
  427846:	6808      	ldr	r0, [r1, #0]
  427848:	f853 2b04 	ldr.w	r2, [r3], #4
  42784c:	6881      	ldr	r1, [r0, #8]
  42784e:	9301      	str	r3, [sp, #4]
  427850:	f000 ff96 	bl	428780 <_vfiprintf_r>
  427854:	b003      	add	sp, #12
  427856:	f85d eb04 	ldr.w	lr, [sp], #4
  42785a:	b004      	add	sp, #16
  42785c:	4770      	bx	lr
  42785e:	bf00      	nop
  427860:	204000fc 	.word	0x204000fc

00427864 <malloc>:
  427864:	4b02      	ldr	r3, [pc, #8]	; (427870 <malloc+0xc>)
  427866:	4601      	mov	r1, r0
  427868:	6818      	ldr	r0, [r3, #0]
  42786a:	f000 b803 	b.w	427874 <_malloc_r>
  42786e:	bf00      	nop
  427870:	204000fc 	.word	0x204000fc

00427874 <_malloc_r>:
  427874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  427878:	f101 060b 	add.w	r6, r1, #11
  42787c:	2e16      	cmp	r6, #22
  42787e:	b083      	sub	sp, #12
  427880:	4605      	mov	r5, r0
  427882:	f240 809e 	bls.w	4279c2 <_malloc_r+0x14e>
  427886:	f036 0607 	bics.w	r6, r6, #7
  42788a:	f100 80bd 	bmi.w	427a08 <_malloc_r+0x194>
  42788e:	42b1      	cmp	r1, r6
  427890:	f200 80ba 	bhi.w	427a08 <_malloc_r+0x194>
  427894:	f000 fbb6 	bl	428004 <__malloc_lock>
  427898:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  42789c:	f0c0 8293 	bcc.w	427dc6 <_malloc_r+0x552>
  4278a0:	0a73      	lsrs	r3, r6, #9
  4278a2:	f000 80b8 	beq.w	427a16 <_malloc_r+0x1a2>
  4278a6:	2b04      	cmp	r3, #4
  4278a8:	f200 8179 	bhi.w	427b9e <_malloc_r+0x32a>
  4278ac:	09b3      	lsrs	r3, r6, #6
  4278ae:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4278b2:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4278b6:	00c3      	lsls	r3, r0, #3
  4278b8:	4fbf      	ldr	r7, [pc, #764]	; (427bb8 <_malloc_r+0x344>)
  4278ba:	443b      	add	r3, r7
  4278bc:	f1a3 0108 	sub.w	r1, r3, #8
  4278c0:	685c      	ldr	r4, [r3, #4]
  4278c2:	42a1      	cmp	r1, r4
  4278c4:	d106      	bne.n	4278d4 <_malloc_r+0x60>
  4278c6:	e00c      	b.n	4278e2 <_malloc_r+0x6e>
  4278c8:	2a00      	cmp	r2, #0
  4278ca:	f280 80aa 	bge.w	427a22 <_malloc_r+0x1ae>
  4278ce:	68e4      	ldr	r4, [r4, #12]
  4278d0:	42a1      	cmp	r1, r4
  4278d2:	d006      	beq.n	4278e2 <_malloc_r+0x6e>
  4278d4:	6863      	ldr	r3, [r4, #4]
  4278d6:	f023 0303 	bic.w	r3, r3, #3
  4278da:	1b9a      	subs	r2, r3, r6
  4278dc:	2a0f      	cmp	r2, #15
  4278de:	ddf3      	ble.n	4278c8 <_malloc_r+0x54>
  4278e0:	4670      	mov	r0, lr
  4278e2:	693c      	ldr	r4, [r7, #16]
  4278e4:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 427bcc <_malloc_r+0x358>
  4278e8:	4574      	cmp	r4, lr
  4278ea:	f000 81ab 	beq.w	427c44 <_malloc_r+0x3d0>
  4278ee:	6863      	ldr	r3, [r4, #4]
  4278f0:	f023 0303 	bic.w	r3, r3, #3
  4278f4:	1b9a      	subs	r2, r3, r6
  4278f6:	2a0f      	cmp	r2, #15
  4278f8:	f300 8190 	bgt.w	427c1c <_malloc_r+0x3a8>
  4278fc:	2a00      	cmp	r2, #0
  4278fe:	f8c7 e014 	str.w	lr, [r7, #20]
  427902:	f8c7 e010 	str.w	lr, [r7, #16]
  427906:	f280 809d 	bge.w	427a44 <_malloc_r+0x1d0>
  42790a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  42790e:	f080 8161 	bcs.w	427bd4 <_malloc_r+0x360>
  427912:	08db      	lsrs	r3, r3, #3
  427914:	f103 0c01 	add.w	ip, r3, #1
  427918:	1099      	asrs	r1, r3, #2
  42791a:	687a      	ldr	r2, [r7, #4]
  42791c:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  427920:	f8c4 8008 	str.w	r8, [r4, #8]
  427924:	2301      	movs	r3, #1
  427926:	408b      	lsls	r3, r1
  427928:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  42792c:	4313      	orrs	r3, r2
  42792e:	3908      	subs	r1, #8
  427930:	60e1      	str	r1, [r4, #12]
  427932:	607b      	str	r3, [r7, #4]
  427934:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  427938:	f8c8 400c 	str.w	r4, [r8, #12]
  42793c:	1082      	asrs	r2, r0, #2
  42793e:	2401      	movs	r4, #1
  427940:	4094      	lsls	r4, r2
  427942:	429c      	cmp	r4, r3
  427944:	f200 808b 	bhi.w	427a5e <_malloc_r+0x1ea>
  427948:	421c      	tst	r4, r3
  42794a:	d106      	bne.n	42795a <_malloc_r+0xe6>
  42794c:	f020 0003 	bic.w	r0, r0, #3
  427950:	0064      	lsls	r4, r4, #1
  427952:	421c      	tst	r4, r3
  427954:	f100 0004 	add.w	r0, r0, #4
  427958:	d0fa      	beq.n	427950 <_malloc_r+0xdc>
  42795a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  42795e:	46cc      	mov	ip, r9
  427960:	4680      	mov	r8, r0
  427962:	f8dc 300c 	ldr.w	r3, [ip, #12]
  427966:	459c      	cmp	ip, r3
  427968:	d107      	bne.n	42797a <_malloc_r+0x106>
  42796a:	e16d      	b.n	427c48 <_malloc_r+0x3d4>
  42796c:	2a00      	cmp	r2, #0
  42796e:	f280 817b 	bge.w	427c68 <_malloc_r+0x3f4>
  427972:	68db      	ldr	r3, [r3, #12]
  427974:	459c      	cmp	ip, r3
  427976:	f000 8167 	beq.w	427c48 <_malloc_r+0x3d4>
  42797a:	6859      	ldr	r1, [r3, #4]
  42797c:	f021 0103 	bic.w	r1, r1, #3
  427980:	1b8a      	subs	r2, r1, r6
  427982:	2a0f      	cmp	r2, #15
  427984:	ddf2      	ble.n	42796c <_malloc_r+0xf8>
  427986:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  42798a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  42798e:	9300      	str	r3, [sp, #0]
  427990:	199c      	adds	r4, r3, r6
  427992:	4628      	mov	r0, r5
  427994:	f046 0601 	orr.w	r6, r6, #1
  427998:	f042 0501 	orr.w	r5, r2, #1
  42799c:	605e      	str	r6, [r3, #4]
  42799e:	f8c8 c00c 	str.w	ip, [r8, #12]
  4279a2:	f8cc 8008 	str.w	r8, [ip, #8]
  4279a6:	617c      	str	r4, [r7, #20]
  4279a8:	613c      	str	r4, [r7, #16]
  4279aa:	f8c4 e00c 	str.w	lr, [r4, #12]
  4279ae:	f8c4 e008 	str.w	lr, [r4, #8]
  4279b2:	6065      	str	r5, [r4, #4]
  4279b4:	505a      	str	r2, [r3, r1]
  4279b6:	f000 fb2b 	bl	428010 <__malloc_unlock>
  4279ba:	9b00      	ldr	r3, [sp, #0]
  4279bc:	f103 0408 	add.w	r4, r3, #8
  4279c0:	e01e      	b.n	427a00 <_malloc_r+0x18c>
  4279c2:	2910      	cmp	r1, #16
  4279c4:	d820      	bhi.n	427a08 <_malloc_r+0x194>
  4279c6:	f000 fb1d 	bl	428004 <__malloc_lock>
  4279ca:	2610      	movs	r6, #16
  4279cc:	2318      	movs	r3, #24
  4279ce:	2002      	movs	r0, #2
  4279d0:	4f79      	ldr	r7, [pc, #484]	; (427bb8 <_malloc_r+0x344>)
  4279d2:	443b      	add	r3, r7
  4279d4:	f1a3 0208 	sub.w	r2, r3, #8
  4279d8:	685c      	ldr	r4, [r3, #4]
  4279da:	4294      	cmp	r4, r2
  4279dc:	f000 813d 	beq.w	427c5a <_malloc_r+0x3e6>
  4279e0:	6863      	ldr	r3, [r4, #4]
  4279e2:	68e1      	ldr	r1, [r4, #12]
  4279e4:	68a6      	ldr	r6, [r4, #8]
  4279e6:	f023 0303 	bic.w	r3, r3, #3
  4279ea:	4423      	add	r3, r4
  4279ec:	4628      	mov	r0, r5
  4279ee:	685a      	ldr	r2, [r3, #4]
  4279f0:	60f1      	str	r1, [r6, #12]
  4279f2:	f042 0201 	orr.w	r2, r2, #1
  4279f6:	608e      	str	r6, [r1, #8]
  4279f8:	605a      	str	r2, [r3, #4]
  4279fa:	f000 fb09 	bl	428010 <__malloc_unlock>
  4279fe:	3408      	adds	r4, #8
  427a00:	4620      	mov	r0, r4
  427a02:	b003      	add	sp, #12
  427a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  427a08:	2400      	movs	r4, #0
  427a0a:	230c      	movs	r3, #12
  427a0c:	4620      	mov	r0, r4
  427a0e:	602b      	str	r3, [r5, #0]
  427a10:	b003      	add	sp, #12
  427a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  427a16:	2040      	movs	r0, #64	; 0x40
  427a18:	f44f 7300 	mov.w	r3, #512	; 0x200
  427a1c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  427a20:	e74a      	b.n	4278b8 <_malloc_r+0x44>
  427a22:	4423      	add	r3, r4
  427a24:	68e1      	ldr	r1, [r4, #12]
  427a26:	685a      	ldr	r2, [r3, #4]
  427a28:	68a6      	ldr	r6, [r4, #8]
  427a2a:	f042 0201 	orr.w	r2, r2, #1
  427a2e:	60f1      	str	r1, [r6, #12]
  427a30:	4628      	mov	r0, r5
  427a32:	608e      	str	r6, [r1, #8]
  427a34:	605a      	str	r2, [r3, #4]
  427a36:	f000 faeb 	bl	428010 <__malloc_unlock>
  427a3a:	3408      	adds	r4, #8
  427a3c:	4620      	mov	r0, r4
  427a3e:	b003      	add	sp, #12
  427a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  427a44:	4423      	add	r3, r4
  427a46:	4628      	mov	r0, r5
  427a48:	685a      	ldr	r2, [r3, #4]
  427a4a:	f042 0201 	orr.w	r2, r2, #1
  427a4e:	605a      	str	r2, [r3, #4]
  427a50:	f000 fade 	bl	428010 <__malloc_unlock>
  427a54:	3408      	adds	r4, #8
  427a56:	4620      	mov	r0, r4
  427a58:	b003      	add	sp, #12
  427a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  427a5e:	68bc      	ldr	r4, [r7, #8]
  427a60:	6863      	ldr	r3, [r4, #4]
  427a62:	f023 0803 	bic.w	r8, r3, #3
  427a66:	45b0      	cmp	r8, r6
  427a68:	d304      	bcc.n	427a74 <_malloc_r+0x200>
  427a6a:	eba8 0306 	sub.w	r3, r8, r6
  427a6e:	2b0f      	cmp	r3, #15
  427a70:	f300 8085 	bgt.w	427b7e <_malloc_r+0x30a>
  427a74:	f8df 9158 	ldr.w	r9, [pc, #344]	; 427bd0 <_malloc_r+0x35c>
  427a78:	4b50      	ldr	r3, [pc, #320]	; (427bbc <_malloc_r+0x348>)
  427a7a:	f8d9 2000 	ldr.w	r2, [r9]
  427a7e:	681b      	ldr	r3, [r3, #0]
  427a80:	3201      	adds	r2, #1
  427a82:	4433      	add	r3, r6
  427a84:	eb04 0a08 	add.w	sl, r4, r8
  427a88:	f000 8155 	beq.w	427d36 <_malloc_r+0x4c2>
  427a8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  427a90:	330f      	adds	r3, #15
  427a92:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  427a96:	f02b 0b0f 	bic.w	fp, fp, #15
  427a9a:	4659      	mov	r1, fp
  427a9c:	4628      	mov	r0, r5
  427a9e:	f000 fadd 	bl	42805c <_sbrk_r>
  427aa2:	1c41      	adds	r1, r0, #1
  427aa4:	4602      	mov	r2, r0
  427aa6:	f000 80fc 	beq.w	427ca2 <_malloc_r+0x42e>
  427aaa:	4582      	cmp	sl, r0
  427aac:	f200 80f7 	bhi.w	427c9e <_malloc_r+0x42a>
  427ab0:	4b43      	ldr	r3, [pc, #268]	; (427bc0 <_malloc_r+0x34c>)
  427ab2:	6819      	ldr	r1, [r3, #0]
  427ab4:	4459      	add	r1, fp
  427ab6:	6019      	str	r1, [r3, #0]
  427ab8:	f000 814d 	beq.w	427d56 <_malloc_r+0x4e2>
  427abc:	f8d9 0000 	ldr.w	r0, [r9]
  427ac0:	3001      	adds	r0, #1
  427ac2:	bf1b      	ittet	ne
  427ac4:	eba2 0a0a 	subne.w	sl, r2, sl
  427ac8:	4451      	addne	r1, sl
  427aca:	f8c9 2000 	streq.w	r2, [r9]
  427ace:	6019      	strne	r1, [r3, #0]
  427ad0:	f012 0107 	ands.w	r1, r2, #7
  427ad4:	f000 8115 	beq.w	427d02 <_malloc_r+0x48e>
  427ad8:	f1c1 0008 	rsb	r0, r1, #8
  427adc:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  427ae0:	4402      	add	r2, r0
  427ae2:	3108      	adds	r1, #8
  427ae4:	eb02 090b 	add.w	r9, r2, fp
  427ae8:	f3c9 090b 	ubfx	r9, r9, #0, #12
  427aec:	eba1 0909 	sub.w	r9, r1, r9
  427af0:	4649      	mov	r1, r9
  427af2:	4628      	mov	r0, r5
  427af4:	9301      	str	r3, [sp, #4]
  427af6:	9200      	str	r2, [sp, #0]
  427af8:	f000 fab0 	bl	42805c <_sbrk_r>
  427afc:	1c43      	adds	r3, r0, #1
  427afe:	e89d 000c 	ldmia.w	sp, {r2, r3}
  427b02:	f000 8143 	beq.w	427d8c <_malloc_r+0x518>
  427b06:	1a80      	subs	r0, r0, r2
  427b08:	4448      	add	r0, r9
  427b0a:	f040 0001 	orr.w	r0, r0, #1
  427b0e:	6819      	ldr	r1, [r3, #0]
  427b10:	60ba      	str	r2, [r7, #8]
  427b12:	4449      	add	r1, r9
  427b14:	42bc      	cmp	r4, r7
  427b16:	6050      	str	r0, [r2, #4]
  427b18:	6019      	str	r1, [r3, #0]
  427b1a:	d017      	beq.n	427b4c <_malloc_r+0x2d8>
  427b1c:	f1b8 0f0f 	cmp.w	r8, #15
  427b20:	f240 80fb 	bls.w	427d1a <_malloc_r+0x4a6>
  427b24:	6860      	ldr	r0, [r4, #4]
  427b26:	f1a8 020c 	sub.w	r2, r8, #12
  427b2a:	f022 0207 	bic.w	r2, r2, #7
  427b2e:	eb04 0e02 	add.w	lr, r4, r2
  427b32:	f000 0001 	and.w	r0, r0, #1
  427b36:	f04f 0c05 	mov.w	ip, #5
  427b3a:	4310      	orrs	r0, r2
  427b3c:	2a0f      	cmp	r2, #15
  427b3e:	6060      	str	r0, [r4, #4]
  427b40:	f8ce c004 	str.w	ip, [lr, #4]
  427b44:	f8ce c008 	str.w	ip, [lr, #8]
  427b48:	f200 8117 	bhi.w	427d7a <_malloc_r+0x506>
  427b4c:	4b1d      	ldr	r3, [pc, #116]	; (427bc4 <_malloc_r+0x350>)
  427b4e:	68bc      	ldr	r4, [r7, #8]
  427b50:	681a      	ldr	r2, [r3, #0]
  427b52:	4291      	cmp	r1, r2
  427b54:	bf88      	it	hi
  427b56:	6019      	strhi	r1, [r3, #0]
  427b58:	4b1b      	ldr	r3, [pc, #108]	; (427bc8 <_malloc_r+0x354>)
  427b5a:	681a      	ldr	r2, [r3, #0]
  427b5c:	4291      	cmp	r1, r2
  427b5e:	6862      	ldr	r2, [r4, #4]
  427b60:	bf88      	it	hi
  427b62:	6019      	strhi	r1, [r3, #0]
  427b64:	f022 0203 	bic.w	r2, r2, #3
  427b68:	4296      	cmp	r6, r2
  427b6a:	eba2 0306 	sub.w	r3, r2, r6
  427b6e:	d801      	bhi.n	427b74 <_malloc_r+0x300>
  427b70:	2b0f      	cmp	r3, #15
  427b72:	dc04      	bgt.n	427b7e <_malloc_r+0x30a>
  427b74:	4628      	mov	r0, r5
  427b76:	f000 fa4b 	bl	428010 <__malloc_unlock>
  427b7a:	2400      	movs	r4, #0
  427b7c:	e740      	b.n	427a00 <_malloc_r+0x18c>
  427b7e:	19a2      	adds	r2, r4, r6
  427b80:	f043 0301 	orr.w	r3, r3, #1
  427b84:	f046 0601 	orr.w	r6, r6, #1
  427b88:	6066      	str	r6, [r4, #4]
  427b8a:	4628      	mov	r0, r5
  427b8c:	60ba      	str	r2, [r7, #8]
  427b8e:	6053      	str	r3, [r2, #4]
  427b90:	f000 fa3e 	bl	428010 <__malloc_unlock>
  427b94:	3408      	adds	r4, #8
  427b96:	4620      	mov	r0, r4
  427b98:	b003      	add	sp, #12
  427b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  427b9e:	2b14      	cmp	r3, #20
  427ba0:	d971      	bls.n	427c86 <_malloc_r+0x412>
  427ba2:	2b54      	cmp	r3, #84	; 0x54
  427ba4:	f200 80a3 	bhi.w	427cee <_malloc_r+0x47a>
  427ba8:	0b33      	lsrs	r3, r6, #12
  427baa:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  427bae:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  427bb2:	00c3      	lsls	r3, r0, #3
  427bb4:	e680      	b.n	4278b8 <_malloc_r+0x44>
  427bb6:	bf00      	nop
  427bb8:	20400528 	.word	0x20400528
  427bbc:	2043a1a8 	.word	0x2043a1a8
  427bc0:	2043a178 	.word	0x2043a178
  427bc4:	2043a1a0 	.word	0x2043a1a0
  427bc8:	2043a1a4 	.word	0x2043a1a4
  427bcc:	20400530 	.word	0x20400530
  427bd0:	20400930 	.word	0x20400930
  427bd4:	0a5a      	lsrs	r2, r3, #9
  427bd6:	2a04      	cmp	r2, #4
  427bd8:	d95b      	bls.n	427c92 <_malloc_r+0x41e>
  427bda:	2a14      	cmp	r2, #20
  427bdc:	f200 80ae 	bhi.w	427d3c <_malloc_r+0x4c8>
  427be0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  427be4:	00c9      	lsls	r1, r1, #3
  427be6:	325b      	adds	r2, #91	; 0x5b
  427be8:	eb07 0c01 	add.w	ip, r7, r1
  427bec:	5879      	ldr	r1, [r7, r1]
  427bee:	f1ac 0c08 	sub.w	ip, ip, #8
  427bf2:	458c      	cmp	ip, r1
  427bf4:	f000 8088 	beq.w	427d08 <_malloc_r+0x494>
  427bf8:	684a      	ldr	r2, [r1, #4]
  427bfa:	f022 0203 	bic.w	r2, r2, #3
  427bfe:	4293      	cmp	r3, r2
  427c00:	d273      	bcs.n	427cea <_malloc_r+0x476>
  427c02:	6889      	ldr	r1, [r1, #8]
  427c04:	458c      	cmp	ip, r1
  427c06:	d1f7      	bne.n	427bf8 <_malloc_r+0x384>
  427c08:	f8dc 200c 	ldr.w	r2, [ip, #12]
  427c0c:	687b      	ldr	r3, [r7, #4]
  427c0e:	60e2      	str	r2, [r4, #12]
  427c10:	f8c4 c008 	str.w	ip, [r4, #8]
  427c14:	6094      	str	r4, [r2, #8]
  427c16:	f8cc 400c 	str.w	r4, [ip, #12]
  427c1a:	e68f      	b.n	42793c <_malloc_r+0xc8>
  427c1c:	19a1      	adds	r1, r4, r6
  427c1e:	f046 0c01 	orr.w	ip, r6, #1
  427c22:	f042 0601 	orr.w	r6, r2, #1
  427c26:	f8c4 c004 	str.w	ip, [r4, #4]
  427c2a:	4628      	mov	r0, r5
  427c2c:	6179      	str	r1, [r7, #20]
  427c2e:	6139      	str	r1, [r7, #16]
  427c30:	f8c1 e00c 	str.w	lr, [r1, #12]
  427c34:	f8c1 e008 	str.w	lr, [r1, #8]
  427c38:	604e      	str	r6, [r1, #4]
  427c3a:	50e2      	str	r2, [r4, r3]
  427c3c:	f000 f9e8 	bl	428010 <__malloc_unlock>
  427c40:	3408      	adds	r4, #8
  427c42:	e6dd      	b.n	427a00 <_malloc_r+0x18c>
  427c44:	687b      	ldr	r3, [r7, #4]
  427c46:	e679      	b.n	42793c <_malloc_r+0xc8>
  427c48:	f108 0801 	add.w	r8, r8, #1
  427c4c:	f018 0f03 	tst.w	r8, #3
  427c50:	f10c 0c08 	add.w	ip, ip, #8
  427c54:	f47f ae85 	bne.w	427962 <_malloc_r+0xee>
  427c58:	e02d      	b.n	427cb6 <_malloc_r+0x442>
  427c5a:	68dc      	ldr	r4, [r3, #12]
  427c5c:	42a3      	cmp	r3, r4
  427c5e:	bf08      	it	eq
  427c60:	3002      	addeq	r0, #2
  427c62:	f43f ae3e 	beq.w	4278e2 <_malloc_r+0x6e>
  427c66:	e6bb      	b.n	4279e0 <_malloc_r+0x16c>
  427c68:	4419      	add	r1, r3
  427c6a:	461c      	mov	r4, r3
  427c6c:	684a      	ldr	r2, [r1, #4]
  427c6e:	68db      	ldr	r3, [r3, #12]
  427c70:	f854 6f08 	ldr.w	r6, [r4, #8]!
  427c74:	f042 0201 	orr.w	r2, r2, #1
  427c78:	604a      	str	r2, [r1, #4]
  427c7a:	4628      	mov	r0, r5
  427c7c:	60f3      	str	r3, [r6, #12]
  427c7e:	609e      	str	r6, [r3, #8]
  427c80:	f000 f9c6 	bl	428010 <__malloc_unlock>
  427c84:	e6bc      	b.n	427a00 <_malloc_r+0x18c>
  427c86:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  427c8a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  427c8e:	00c3      	lsls	r3, r0, #3
  427c90:	e612      	b.n	4278b8 <_malloc_r+0x44>
  427c92:	099a      	lsrs	r2, r3, #6
  427c94:	f102 0139 	add.w	r1, r2, #57	; 0x39
  427c98:	00c9      	lsls	r1, r1, #3
  427c9a:	3238      	adds	r2, #56	; 0x38
  427c9c:	e7a4      	b.n	427be8 <_malloc_r+0x374>
  427c9e:	42bc      	cmp	r4, r7
  427ca0:	d054      	beq.n	427d4c <_malloc_r+0x4d8>
  427ca2:	68bc      	ldr	r4, [r7, #8]
  427ca4:	6862      	ldr	r2, [r4, #4]
  427ca6:	f022 0203 	bic.w	r2, r2, #3
  427caa:	e75d      	b.n	427b68 <_malloc_r+0x2f4>
  427cac:	f859 3908 	ldr.w	r3, [r9], #-8
  427cb0:	4599      	cmp	r9, r3
  427cb2:	f040 8086 	bne.w	427dc2 <_malloc_r+0x54e>
  427cb6:	f010 0f03 	tst.w	r0, #3
  427cba:	f100 30ff 	add.w	r0, r0, #4294967295
  427cbe:	d1f5      	bne.n	427cac <_malloc_r+0x438>
  427cc0:	687b      	ldr	r3, [r7, #4]
  427cc2:	ea23 0304 	bic.w	r3, r3, r4
  427cc6:	607b      	str	r3, [r7, #4]
  427cc8:	0064      	lsls	r4, r4, #1
  427cca:	429c      	cmp	r4, r3
  427ccc:	f63f aec7 	bhi.w	427a5e <_malloc_r+0x1ea>
  427cd0:	2c00      	cmp	r4, #0
  427cd2:	f43f aec4 	beq.w	427a5e <_malloc_r+0x1ea>
  427cd6:	421c      	tst	r4, r3
  427cd8:	4640      	mov	r0, r8
  427cda:	f47f ae3e 	bne.w	42795a <_malloc_r+0xe6>
  427cde:	0064      	lsls	r4, r4, #1
  427ce0:	421c      	tst	r4, r3
  427ce2:	f100 0004 	add.w	r0, r0, #4
  427ce6:	d0fa      	beq.n	427cde <_malloc_r+0x46a>
  427ce8:	e637      	b.n	42795a <_malloc_r+0xe6>
  427cea:	468c      	mov	ip, r1
  427cec:	e78c      	b.n	427c08 <_malloc_r+0x394>
  427cee:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  427cf2:	d815      	bhi.n	427d20 <_malloc_r+0x4ac>
  427cf4:	0bf3      	lsrs	r3, r6, #15
  427cf6:	f103 0078 	add.w	r0, r3, #120	; 0x78
  427cfa:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  427cfe:	00c3      	lsls	r3, r0, #3
  427d00:	e5da      	b.n	4278b8 <_malloc_r+0x44>
  427d02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  427d06:	e6ed      	b.n	427ae4 <_malloc_r+0x270>
  427d08:	687b      	ldr	r3, [r7, #4]
  427d0a:	1092      	asrs	r2, r2, #2
  427d0c:	2101      	movs	r1, #1
  427d0e:	fa01 f202 	lsl.w	r2, r1, r2
  427d12:	4313      	orrs	r3, r2
  427d14:	607b      	str	r3, [r7, #4]
  427d16:	4662      	mov	r2, ip
  427d18:	e779      	b.n	427c0e <_malloc_r+0x39a>
  427d1a:	2301      	movs	r3, #1
  427d1c:	6053      	str	r3, [r2, #4]
  427d1e:	e729      	b.n	427b74 <_malloc_r+0x300>
  427d20:	f240 5254 	movw	r2, #1364	; 0x554
  427d24:	4293      	cmp	r3, r2
  427d26:	d822      	bhi.n	427d6e <_malloc_r+0x4fa>
  427d28:	0cb3      	lsrs	r3, r6, #18
  427d2a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  427d2e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  427d32:	00c3      	lsls	r3, r0, #3
  427d34:	e5c0      	b.n	4278b8 <_malloc_r+0x44>
  427d36:	f103 0b10 	add.w	fp, r3, #16
  427d3a:	e6ae      	b.n	427a9a <_malloc_r+0x226>
  427d3c:	2a54      	cmp	r2, #84	; 0x54
  427d3e:	d829      	bhi.n	427d94 <_malloc_r+0x520>
  427d40:	0b1a      	lsrs	r2, r3, #12
  427d42:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  427d46:	00c9      	lsls	r1, r1, #3
  427d48:	326e      	adds	r2, #110	; 0x6e
  427d4a:	e74d      	b.n	427be8 <_malloc_r+0x374>
  427d4c:	4b20      	ldr	r3, [pc, #128]	; (427dd0 <_malloc_r+0x55c>)
  427d4e:	6819      	ldr	r1, [r3, #0]
  427d50:	4459      	add	r1, fp
  427d52:	6019      	str	r1, [r3, #0]
  427d54:	e6b2      	b.n	427abc <_malloc_r+0x248>
  427d56:	f3ca 000b 	ubfx	r0, sl, #0, #12
  427d5a:	2800      	cmp	r0, #0
  427d5c:	f47f aeae 	bne.w	427abc <_malloc_r+0x248>
  427d60:	eb08 030b 	add.w	r3, r8, fp
  427d64:	68ba      	ldr	r2, [r7, #8]
  427d66:	f043 0301 	orr.w	r3, r3, #1
  427d6a:	6053      	str	r3, [r2, #4]
  427d6c:	e6ee      	b.n	427b4c <_malloc_r+0x2d8>
  427d6e:	207f      	movs	r0, #127	; 0x7f
  427d70:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  427d74:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  427d78:	e59e      	b.n	4278b8 <_malloc_r+0x44>
  427d7a:	f104 0108 	add.w	r1, r4, #8
  427d7e:	4628      	mov	r0, r5
  427d80:	9300      	str	r3, [sp, #0]
  427d82:	f001 fe19 	bl	4299b8 <_free_r>
  427d86:	9b00      	ldr	r3, [sp, #0]
  427d88:	6819      	ldr	r1, [r3, #0]
  427d8a:	e6df      	b.n	427b4c <_malloc_r+0x2d8>
  427d8c:	2001      	movs	r0, #1
  427d8e:	f04f 0900 	mov.w	r9, #0
  427d92:	e6bc      	b.n	427b0e <_malloc_r+0x29a>
  427d94:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  427d98:	d805      	bhi.n	427da6 <_malloc_r+0x532>
  427d9a:	0bda      	lsrs	r2, r3, #15
  427d9c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  427da0:	00c9      	lsls	r1, r1, #3
  427da2:	3277      	adds	r2, #119	; 0x77
  427da4:	e720      	b.n	427be8 <_malloc_r+0x374>
  427da6:	f240 5154 	movw	r1, #1364	; 0x554
  427daa:	428a      	cmp	r2, r1
  427dac:	d805      	bhi.n	427dba <_malloc_r+0x546>
  427dae:	0c9a      	lsrs	r2, r3, #18
  427db0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  427db4:	00c9      	lsls	r1, r1, #3
  427db6:	327c      	adds	r2, #124	; 0x7c
  427db8:	e716      	b.n	427be8 <_malloc_r+0x374>
  427dba:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  427dbe:	227e      	movs	r2, #126	; 0x7e
  427dc0:	e712      	b.n	427be8 <_malloc_r+0x374>
  427dc2:	687b      	ldr	r3, [r7, #4]
  427dc4:	e780      	b.n	427cc8 <_malloc_r+0x454>
  427dc6:	08f0      	lsrs	r0, r6, #3
  427dc8:	f106 0308 	add.w	r3, r6, #8
  427dcc:	e600      	b.n	4279d0 <_malloc_r+0x15c>
  427dce:	bf00      	nop
  427dd0:	2043a178 	.word	0x2043a178

00427dd4 <memcmp>:
  427dd4:	2a03      	cmp	r2, #3
  427dd6:	b470      	push	{r4, r5, r6}
  427dd8:	d922      	bls.n	427e20 <memcmp+0x4c>
  427dda:	ea40 0301 	orr.w	r3, r0, r1
  427dde:	079b      	lsls	r3, r3, #30
  427de0:	d011      	beq.n	427e06 <memcmp+0x32>
  427de2:	7803      	ldrb	r3, [r0, #0]
  427de4:	780c      	ldrb	r4, [r1, #0]
  427de6:	42a3      	cmp	r3, r4
  427de8:	d11d      	bne.n	427e26 <memcmp+0x52>
  427dea:	440a      	add	r2, r1
  427dec:	3101      	adds	r1, #1
  427dee:	e005      	b.n	427dfc <memcmp+0x28>
  427df0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  427df4:	f811 4b01 	ldrb.w	r4, [r1], #1
  427df8:	42a3      	cmp	r3, r4
  427dfa:	d114      	bne.n	427e26 <memcmp+0x52>
  427dfc:	4291      	cmp	r1, r2
  427dfe:	d1f7      	bne.n	427df0 <memcmp+0x1c>
  427e00:	2000      	movs	r0, #0
  427e02:	bc70      	pop	{r4, r5, r6}
  427e04:	4770      	bx	lr
  427e06:	680d      	ldr	r5, [r1, #0]
  427e08:	6806      	ldr	r6, [r0, #0]
  427e0a:	42ae      	cmp	r6, r5
  427e0c:	460c      	mov	r4, r1
  427e0e:	4603      	mov	r3, r0
  427e10:	f101 0104 	add.w	r1, r1, #4
  427e14:	f100 0004 	add.w	r0, r0, #4
  427e18:	d108      	bne.n	427e2c <memcmp+0x58>
  427e1a:	3a04      	subs	r2, #4
  427e1c:	2a03      	cmp	r2, #3
  427e1e:	d8f2      	bhi.n	427e06 <memcmp+0x32>
  427e20:	2a00      	cmp	r2, #0
  427e22:	d1de      	bne.n	427de2 <memcmp+0xe>
  427e24:	e7ec      	b.n	427e00 <memcmp+0x2c>
  427e26:	1b18      	subs	r0, r3, r4
  427e28:	bc70      	pop	{r4, r5, r6}
  427e2a:	4770      	bx	lr
  427e2c:	4621      	mov	r1, r4
  427e2e:	4618      	mov	r0, r3
  427e30:	e7d7      	b.n	427de2 <memcmp+0xe>
  427e32:	bf00      	nop

00427e34 <memcpy>:
  427e34:	4684      	mov	ip, r0
  427e36:	ea41 0300 	orr.w	r3, r1, r0
  427e3a:	f013 0303 	ands.w	r3, r3, #3
  427e3e:	d16d      	bne.n	427f1c <memcpy+0xe8>
  427e40:	3a40      	subs	r2, #64	; 0x40
  427e42:	d341      	bcc.n	427ec8 <memcpy+0x94>
  427e44:	f851 3b04 	ldr.w	r3, [r1], #4
  427e48:	f840 3b04 	str.w	r3, [r0], #4
  427e4c:	f851 3b04 	ldr.w	r3, [r1], #4
  427e50:	f840 3b04 	str.w	r3, [r0], #4
  427e54:	f851 3b04 	ldr.w	r3, [r1], #4
  427e58:	f840 3b04 	str.w	r3, [r0], #4
  427e5c:	f851 3b04 	ldr.w	r3, [r1], #4
  427e60:	f840 3b04 	str.w	r3, [r0], #4
  427e64:	f851 3b04 	ldr.w	r3, [r1], #4
  427e68:	f840 3b04 	str.w	r3, [r0], #4
  427e6c:	f851 3b04 	ldr.w	r3, [r1], #4
  427e70:	f840 3b04 	str.w	r3, [r0], #4
  427e74:	f851 3b04 	ldr.w	r3, [r1], #4
  427e78:	f840 3b04 	str.w	r3, [r0], #4
  427e7c:	f851 3b04 	ldr.w	r3, [r1], #4
  427e80:	f840 3b04 	str.w	r3, [r0], #4
  427e84:	f851 3b04 	ldr.w	r3, [r1], #4
  427e88:	f840 3b04 	str.w	r3, [r0], #4
  427e8c:	f851 3b04 	ldr.w	r3, [r1], #4
  427e90:	f840 3b04 	str.w	r3, [r0], #4
  427e94:	f851 3b04 	ldr.w	r3, [r1], #4
  427e98:	f840 3b04 	str.w	r3, [r0], #4
  427e9c:	f851 3b04 	ldr.w	r3, [r1], #4
  427ea0:	f840 3b04 	str.w	r3, [r0], #4
  427ea4:	f851 3b04 	ldr.w	r3, [r1], #4
  427ea8:	f840 3b04 	str.w	r3, [r0], #4
  427eac:	f851 3b04 	ldr.w	r3, [r1], #4
  427eb0:	f840 3b04 	str.w	r3, [r0], #4
  427eb4:	f851 3b04 	ldr.w	r3, [r1], #4
  427eb8:	f840 3b04 	str.w	r3, [r0], #4
  427ebc:	f851 3b04 	ldr.w	r3, [r1], #4
  427ec0:	f840 3b04 	str.w	r3, [r0], #4
  427ec4:	3a40      	subs	r2, #64	; 0x40
  427ec6:	d2bd      	bcs.n	427e44 <memcpy+0x10>
  427ec8:	3230      	adds	r2, #48	; 0x30
  427eca:	d311      	bcc.n	427ef0 <memcpy+0xbc>
  427ecc:	f851 3b04 	ldr.w	r3, [r1], #4
  427ed0:	f840 3b04 	str.w	r3, [r0], #4
  427ed4:	f851 3b04 	ldr.w	r3, [r1], #4
  427ed8:	f840 3b04 	str.w	r3, [r0], #4
  427edc:	f851 3b04 	ldr.w	r3, [r1], #4
  427ee0:	f840 3b04 	str.w	r3, [r0], #4
  427ee4:	f851 3b04 	ldr.w	r3, [r1], #4
  427ee8:	f840 3b04 	str.w	r3, [r0], #4
  427eec:	3a10      	subs	r2, #16
  427eee:	d2ed      	bcs.n	427ecc <memcpy+0x98>
  427ef0:	320c      	adds	r2, #12
  427ef2:	d305      	bcc.n	427f00 <memcpy+0xcc>
  427ef4:	f851 3b04 	ldr.w	r3, [r1], #4
  427ef8:	f840 3b04 	str.w	r3, [r0], #4
  427efc:	3a04      	subs	r2, #4
  427efe:	d2f9      	bcs.n	427ef4 <memcpy+0xc0>
  427f00:	3204      	adds	r2, #4
  427f02:	d008      	beq.n	427f16 <memcpy+0xe2>
  427f04:	07d2      	lsls	r2, r2, #31
  427f06:	bf1c      	itt	ne
  427f08:	f811 3b01 	ldrbne.w	r3, [r1], #1
  427f0c:	f800 3b01 	strbne.w	r3, [r0], #1
  427f10:	d301      	bcc.n	427f16 <memcpy+0xe2>
  427f12:	880b      	ldrh	r3, [r1, #0]
  427f14:	8003      	strh	r3, [r0, #0]
  427f16:	4660      	mov	r0, ip
  427f18:	4770      	bx	lr
  427f1a:	bf00      	nop
  427f1c:	2a08      	cmp	r2, #8
  427f1e:	d313      	bcc.n	427f48 <memcpy+0x114>
  427f20:	078b      	lsls	r3, r1, #30
  427f22:	d08d      	beq.n	427e40 <memcpy+0xc>
  427f24:	f010 0303 	ands.w	r3, r0, #3
  427f28:	d08a      	beq.n	427e40 <memcpy+0xc>
  427f2a:	f1c3 0304 	rsb	r3, r3, #4
  427f2e:	1ad2      	subs	r2, r2, r3
  427f30:	07db      	lsls	r3, r3, #31
  427f32:	bf1c      	itt	ne
  427f34:	f811 3b01 	ldrbne.w	r3, [r1], #1
  427f38:	f800 3b01 	strbne.w	r3, [r0], #1
  427f3c:	d380      	bcc.n	427e40 <memcpy+0xc>
  427f3e:	f831 3b02 	ldrh.w	r3, [r1], #2
  427f42:	f820 3b02 	strh.w	r3, [r0], #2
  427f46:	e77b      	b.n	427e40 <memcpy+0xc>
  427f48:	3a04      	subs	r2, #4
  427f4a:	d3d9      	bcc.n	427f00 <memcpy+0xcc>
  427f4c:	3a01      	subs	r2, #1
  427f4e:	f811 3b01 	ldrb.w	r3, [r1], #1
  427f52:	f800 3b01 	strb.w	r3, [r0], #1
  427f56:	d2f9      	bcs.n	427f4c <memcpy+0x118>
  427f58:	780b      	ldrb	r3, [r1, #0]
  427f5a:	7003      	strb	r3, [r0, #0]
  427f5c:	784b      	ldrb	r3, [r1, #1]
  427f5e:	7043      	strb	r3, [r0, #1]
  427f60:	788b      	ldrb	r3, [r1, #2]
  427f62:	7083      	strb	r3, [r0, #2]
  427f64:	4660      	mov	r0, ip
  427f66:	4770      	bx	lr

00427f68 <memset>:
  427f68:	b470      	push	{r4, r5, r6}
  427f6a:	0786      	lsls	r6, r0, #30
  427f6c:	d046      	beq.n	427ffc <memset+0x94>
  427f6e:	1e54      	subs	r4, r2, #1
  427f70:	2a00      	cmp	r2, #0
  427f72:	d041      	beq.n	427ff8 <memset+0x90>
  427f74:	b2ca      	uxtb	r2, r1
  427f76:	4603      	mov	r3, r0
  427f78:	e002      	b.n	427f80 <memset+0x18>
  427f7a:	f114 34ff 	adds.w	r4, r4, #4294967295
  427f7e:	d33b      	bcc.n	427ff8 <memset+0x90>
  427f80:	f803 2b01 	strb.w	r2, [r3], #1
  427f84:	079d      	lsls	r5, r3, #30
  427f86:	d1f8      	bne.n	427f7a <memset+0x12>
  427f88:	2c03      	cmp	r4, #3
  427f8a:	d92e      	bls.n	427fea <memset+0x82>
  427f8c:	b2cd      	uxtb	r5, r1
  427f8e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  427f92:	2c0f      	cmp	r4, #15
  427f94:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  427f98:	d919      	bls.n	427fce <memset+0x66>
  427f9a:	f103 0210 	add.w	r2, r3, #16
  427f9e:	4626      	mov	r6, r4
  427fa0:	3e10      	subs	r6, #16
  427fa2:	2e0f      	cmp	r6, #15
  427fa4:	f842 5c10 	str.w	r5, [r2, #-16]
  427fa8:	f842 5c0c 	str.w	r5, [r2, #-12]
  427fac:	f842 5c08 	str.w	r5, [r2, #-8]
  427fb0:	f842 5c04 	str.w	r5, [r2, #-4]
  427fb4:	f102 0210 	add.w	r2, r2, #16
  427fb8:	d8f2      	bhi.n	427fa0 <memset+0x38>
  427fba:	f1a4 0210 	sub.w	r2, r4, #16
  427fbe:	f022 020f 	bic.w	r2, r2, #15
  427fc2:	f004 040f 	and.w	r4, r4, #15
  427fc6:	3210      	adds	r2, #16
  427fc8:	2c03      	cmp	r4, #3
  427fca:	4413      	add	r3, r2
  427fcc:	d90d      	bls.n	427fea <memset+0x82>
  427fce:	461e      	mov	r6, r3
  427fd0:	4622      	mov	r2, r4
  427fd2:	3a04      	subs	r2, #4
  427fd4:	2a03      	cmp	r2, #3
  427fd6:	f846 5b04 	str.w	r5, [r6], #4
  427fda:	d8fa      	bhi.n	427fd2 <memset+0x6a>
  427fdc:	1f22      	subs	r2, r4, #4
  427fde:	f022 0203 	bic.w	r2, r2, #3
  427fe2:	3204      	adds	r2, #4
  427fe4:	4413      	add	r3, r2
  427fe6:	f004 0403 	and.w	r4, r4, #3
  427fea:	b12c      	cbz	r4, 427ff8 <memset+0x90>
  427fec:	b2c9      	uxtb	r1, r1
  427fee:	441c      	add	r4, r3
  427ff0:	f803 1b01 	strb.w	r1, [r3], #1
  427ff4:	429c      	cmp	r4, r3
  427ff6:	d1fb      	bne.n	427ff0 <memset+0x88>
  427ff8:	bc70      	pop	{r4, r5, r6}
  427ffa:	4770      	bx	lr
  427ffc:	4614      	mov	r4, r2
  427ffe:	4603      	mov	r3, r0
  428000:	e7c2      	b.n	427f88 <memset+0x20>
  428002:	bf00      	nop

00428004 <__malloc_lock>:
  428004:	4801      	ldr	r0, [pc, #4]	; (42800c <__malloc_lock+0x8>)
  428006:	f001 bf71 	b.w	429eec <__retarget_lock_acquire_recursive>
  42800a:	bf00      	nop
  42800c:	2043a82c 	.word	0x2043a82c

00428010 <__malloc_unlock>:
  428010:	4801      	ldr	r0, [pc, #4]	; (428018 <__malloc_unlock+0x8>)
  428012:	f001 bf6d 	b.w	429ef0 <__retarget_lock_release_recursive>
  428016:	bf00      	nop
  428018:	2043a82c 	.word	0x2043a82c

0042801c <rand>:
  42801c:	b410      	push	{r4}
  42801e:	4b0c      	ldr	r3, [pc, #48]	; (428050 <rand+0x34>)
  428020:	480c      	ldr	r0, [pc, #48]	; (428054 <rand+0x38>)
  428022:	6819      	ldr	r1, [r3, #0]
  428024:	4c0c      	ldr	r4, [pc, #48]	; (428058 <rand+0x3c>)
  428026:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
  42802a:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
  42802e:	fb00 f002 	mul.w	r0, r0, r2
  428032:	fb04 0003 	mla	r0, r4, r3, r0
  428036:	fba2 2304 	umull	r2, r3, r2, r4
  42803a:	4403      	add	r3, r0
  42803c:	3201      	adds	r2, #1
  42803e:	f143 0300 	adc.w	r3, r3, #0
  428042:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
  428046:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
  42804a:	bc10      	pop	{r4}
  42804c:	4770      	bx	lr
  42804e:	bf00      	nop
  428050:	204000fc 	.word	0x204000fc
  428054:	5851f42d 	.word	0x5851f42d
  428058:	4c957f2d 	.word	0x4c957f2d

0042805c <_sbrk_r>:
  42805c:	b538      	push	{r3, r4, r5, lr}
  42805e:	4c07      	ldr	r4, [pc, #28]	; (42807c <_sbrk_r+0x20>)
  428060:	2300      	movs	r3, #0
  428062:	4605      	mov	r5, r0
  428064:	4608      	mov	r0, r1
  428066:	6023      	str	r3, [r4, #0]
  428068:	f7fd fbca 	bl	425800 <_sbrk>
  42806c:	1c43      	adds	r3, r0, #1
  42806e:	d000      	beq.n	428072 <_sbrk_r+0x16>
  428070:	bd38      	pop	{r3, r4, r5, pc}
  428072:	6823      	ldr	r3, [r4, #0]
  428074:	2b00      	cmp	r3, #0
  428076:	d0fb      	beq.n	428070 <_sbrk_r+0x14>
  428078:	602b      	str	r3, [r5, #0]
  42807a:	bd38      	pop	{r3, r4, r5, pc}
  42807c:	2043a840 	.word	0x2043a840

00428080 <setbuf>:
  428080:	2900      	cmp	r1, #0
  428082:	bf0c      	ite	eq
  428084:	2202      	moveq	r2, #2
  428086:	2200      	movne	r2, #0
  428088:	f44f 6380 	mov.w	r3, #1024	; 0x400
  42808c:	f000 b800 	b.w	428090 <setvbuf>

00428090 <setvbuf>:
  428090:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  428094:	4c61      	ldr	r4, [pc, #388]	; (42821c <setvbuf+0x18c>)
  428096:	6825      	ldr	r5, [r4, #0]
  428098:	b083      	sub	sp, #12
  42809a:	4604      	mov	r4, r0
  42809c:	460f      	mov	r7, r1
  42809e:	4690      	mov	r8, r2
  4280a0:	461e      	mov	r6, r3
  4280a2:	b115      	cbz	r5, 4280aa <setvbuf+0x1a>
  4280a4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4280a6:	2b00      	cmp	r3, #0
  4280a8:	d064      	beq.n	428174 <setvbuf+0xe4>
  4280aa:	f1b8 0f02 	cmp.w	r8, #2
  4280ae:	d006      	beq.n	4280be <setvbuf+0x2e>
  4280b0:	f1b8 0f01 	cmp.w	r8, #1
  4280b4:	f200 809f 	bhi.w	4281f6 <setvbuf+0x166>
  4280b8:	2e00      	cmp	r6, #0
  4280ba:	f2c0 809c 	blt.w	4281f6 <setvbuf+0x166>
  4280be:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4280c0:	07d8      	lsls	r0, r3, #31
  4280c2:	d534      	bpl.n	42812e <setvbuf+0x9e>
  4280c4:	4621      	mov	r1, r4
  4280c6:	4628      	mov	r0, r5
  4280c8:	f001 faf8 	bl	4296bc <_fflush_r>
  4280cc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4280ce:	b141      	cbz	r1, 4280e2 <setvbuf+0x52>
  4280d0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4280d4:	4299      	cmp	r1, r3
  4280d6:	d002      	beq.n	4280de <setvbuf+0x4e>
  4280d8:	4628      	mov	r0, r5
  4280da:	f001 fc6d 	bl	4299b8 <_free_r>
  4280de:	2300      	movs	r3, #0
  4280e0:	6323      	str	r3, [r4, #48]	; 0x30
  4280e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4280e6:	2200      	movs	r2, #0
  4280e8:	61a2      	str	r2, [r4, #24]
  4280ea:	6062      	str	r2, [r4, #4]
  4280ec:	061a      	lsls	r2, r3, #24
  4280ee:	d43a      	bmi.n	428166 <setvbuf+0xd6>
  4280f0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4280f4:	f023 0303 	bic.w	r3, r3, #3
  4280f8:	f1b8 0f02 	cmp.w	r8, #2
  4280fc:	81a3      	strh	r3, [r4, #12]
  4280fe:	d01d      	beq.n	42813c <setvbuf+0xac>
  428100:	ab01      	add	r3, sp, #4
  428102:	466a      	mov	r2, sp
  428104:	4621      	mov	r1, r4
  428106:	4628      	mov	r0, r5
  428108:	f001 fef4 	bl	429ef4 <__swhatbuf_r>
  42810c:	89a3      	ldrh	r3, [r4, #12]
  42810e:	4318      	orrs	r0, r3
  428110:	81a0      	strh	r0, [r4, #12]
  428112:	2e00      	cmp	r6, #0
  428114:	d132      	bne.n	42817c <setvbuf+0xec>
  428116:	9e00      	ldr	r6, [sp, #0]
  428118:	4630      	mov	r0, r6
  42811a:	f7ff fba3 	bl	427864 <malloc>
  42811e:	4607      	mov	r7, r0
  428120:	2800      	cmp	r0, #0
  428122:	d06b      	beq.n	4281fc <setvbuf+0x16c>
  428124:	89a3      	ldrh	r3, [r4, #12]
  428126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  42812a:	81a3      	strh	r3, [r4, #12]
  42812c:	e028      	b.n	428180 <setvbuf+0xf0>
  42812e:	89a3      	ldrh	r3, [r4, #12]
  428130:	0599      	lsls	r1, r3, #22
  428132:	d4c7      	bmi.n	4280c4 <setvbuf+0x34>
  428134:	6da0      	ldr	r0, [r4, #88]	; 0x58
  428136:	f001 fed9 	bl	429eec <__retarget_lock_acquire_recursive>
  42813a:	e7c3      	b.n	4280c4 <setvbuf+0x34>
  42813c:	2500      	movs	r5, #0
  42813e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  428140:	2600      	movs	r6, #0
  428142:	f104 0243 	add.w	r2, r4, #67	; 0x43
  428146:	f043 0302 	orr.w	r3, r3, #2
  42814a:	2001      	movs	r0, #1
  42814c:	60a6      	str	r6, [r4, #8]
  42814e:	07ce      	lsls	r6, r1, #31
  428150:	81a3      	strh	r3, [r4, #12]
  428152:	6022      	str	r2, [r4, #0]
  428154:	6122      	str	r2, [r4, #16]
  428156:	6160      	str	r0, [r4, #20]
  428158:	d401      	bmi.n	42815e <setvbuf+0xce>
  42815a:	0598      	lsls	r0, r3, #22
  42815c:	d53e      	bpl.n	4281dc <setvbuf+0x14c>
  42815e:	4628      	mov	r0, r5
  428160:	b003      	add	sp, #12
  428162:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  428166:	6921      	ldr	r1, [r4, #16]
  428168:	4628      	mov	r0, r5
  42816a:	f001 fc25 	bl	4299b8 <_free_r>
  42816e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  428172:	e7bd      	b.n	4280f0 <setvbuf+0x60>
  428174:	4628      	mov	r0, r5
  428176:	f001 faf9 	bl	42976c <__sinit>
  42817a:	e796      	b.n	4280aa <setvbuf+0x1a>
  42817c:	2f00      	cmp	r7, #0
  42817e:	d0cb      	beq.n	428118 <setvbuf+0x88>
  428180:	6bab      	ldr	r3, [r5, #56]	; 0x38
  428182:	2b00      	cmp	r3, #0
  428184:	d033      	beq.n	4281ee <setvbuf+0x15e>
  428186:	9b00      	ldr	r3, [sp, #0]
  428188:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  42818c:	6027      	str	r7, [r4, #0]
  42818e:	429e      	cmp	r6, r3
  428190:	bf1c      	itt	ne
  428192:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  428196:	81a2      	strhne	r2, [r4, #12]
  428198:	f1b8 0f01 	cmp.w	r8, #1
  42819c:	bf04      	itt	eq
  42819e:	f042 0201 	orreq.w	r2, r2, #1
  4281a2:	81a2      	strheq	r2, [r4, #12]
  4281a4:	b292      	uxth	r2, r2
  4281a6:	f012 0308 	ands.w	r3, r2, #8
  4281aa:	6127      	str	r7, [r4, #16]
  4281ac:	6166      	str	r6, [r4, #20]
  4281ae:	d00e      	beq.n	4281ce <setvbuf+0x13e>
  4281b0:	07d1      	lsls	r1, r2, #31
  4281b2:	d51a      	bpl.n	4281ea <setvbuf+0x15a>
  4281b4:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4281b6:	4276      	negs	r6, r6
  4281b8:	2300      	movs	r3, #0
  4281ba:	f015 0501 	ands.w	r5, r5, #1
  4281be:	61a6      	str	r6, [r4, #24]
  4281c0:	60a3      	str	r3, [r4, #8]
  4281c2:	d009      	beq.n	4281d8 <setvbuf+0x148>
  4281c4:	2500      	movs	r5, #0
  4281c6:	4628      	mov	r0, r5
  4281c8:	b003      	add	sp, #12
  4281ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4281ce:	60a3      	str	r3, [r4, #8]
  4281d0:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4281d2:	f015 0501 	ands.w	r5, r5, #1
  4281d6:	d1f5      	bne.n	4281c4 <setvbuf+0x134>
  4281d8:	0593      	lsls	r3, r2, #22
  4281da:	d4c0      	bmi.n	42815e <setvbuf+0xce>
  4281dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4281de:	f001 fe87 	bl	429ef0 <__retarget_lock_release_recursive>
  4281e2:	4628      	mov	r0, r5
  4281e4:	b003      	add	sp, #12
  4281e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4281ea:	60a6      	str	r6, [r4, #8]
  4281ec:	e7f0      	b.n	4281d0 <setvbuf+0x140>
  4281ee:	4628      	mov	r0, r5
  4281f0:	f001 fabc 	bl	42976c <__sinit>
  4281f4:	e7c7      	b.n	428186 <setvbuf+0xf6>
  4281f6:	f04f 35ff 	mov.w	r5, #4294967295
  4281fa:	e7b0      	b.n	42815e <setvbuf+0xce>
  4281fc:	f8dd 9000 	ldr.w	r9, [sp]
  428200:	45b1      	cmp	r9, r6
  428202:	d004      	beq.n	42820e <setvbuf+0x17e>
  428204:	4648      	mov	r0, r9
  428206:	f7ff fb2d 	bl	427864 <malloc>
  42820a:	4607      	mov	r7, r0
  42820c:	b920      	cbnz	r0, 428218 <setvbuf+0x188>
  42820e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  428212:	f04f 35ff 	mov.w	r5, #4294967295
  428216:	e792      	b.n	42813e <setvbuf+0xae>
  428218:	464e      	mov	r6, r9
  42821a:	e783      	b.n	428124 <setvbuf+0x94>
  42821c:	204000fc 	.word	0x204000fc
  428220:	eba2 0003 	sub.w	r0, r2, r3
  428224:	4770      	bx	lr
  428226:	bf00      	nop

00428228 <strcmp>:
  428228:	7802      	ldrb	r2, [r0, #0]
  42822a:	780b      	ldrb	r3, [r1, #0]
  42822c:	2a01      	cmp	r2, #1
  42822e:	bf28      	it	cs
  428230:	429a      	cmpcs	r2, r3
  428232:	d1f5      	bne.n	428220 <setvbuf+0x190>
  428234:	e96d 4504 	strd	r4, r5, [sp, #-16]!
  428238:	ea40 0401 	orr.w	r4, r0, r1
  42823c:	e9cd 6702 	strd	r6, r7, [sp, #8]
  428240:	f06f 0c00 	mvn.w	ip, #0
  428244:	ea4f 7244 	mov.w	r2, r4, lsl #29
  428248:	b312      	cbz	r2, 428290 <strcmp+0x68>
  42824a:	ea80 0401 	eor.w	r4, r0, r1
  42824e:	f014 0f07 	tst.w	r4, #7
  428252:	d16a      	bne.n	42832a <strcmp+0x102>
  428254:	f000 0407 	and.w	r4, r0, #7
  428258:	f020 0007 	bic.w	r0, r0, #7
  42825c:	f004 0503 	and.w	r5, r4, #3
  428260:	f021 0107 	bic.w	r1, r1, #7
  428264:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  428268:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  42826c:	f014 0f04 	tst.w	r4, #4
  428270:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  428274:	fa0c f405 	lsl.w	r4, ip, r5
  428278:	ea62 0204 	orn	r2, r2, r4
  42827c:	ea66 0604 	orn	r6, r6, r4
  428280:	d00a      	beq.n	428298 <strcmp+0x70>
  428282:	ea63 0304 	orn	r3, r3, r4
  428286:	4662      	mov	r2, ip
  428288:	ea67 0704 	orn	r7, r7, r4
  42828c:	4666      	mov	r6, ip
  42828e:	e003      	b.n	428298 <strcmp+0x70>
  428290:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  428294:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  428298:	fa82 f54c 	uadd8	r5, r2, ip
  42829c:	ea82 0406 	eor.w	r4, r2, r6
  4282a0:	faa4 f48c 	sel	r4, r4, ip
  4282a4:	bb6c      	cbnz	r4, 428302 <strcmp+0xda>
  4282a6:	fa83 f54c 	uadd8	r5, r3, ip
  4282aa:	ea83 0507 	eor.w	r5, r3, r7
  4282ae:	faa5 f58c 	sel	r5, r5, ip
  4282b2:	b995      	cbnz	r5, 4282da <strcmp+0xb2>
  4282b4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
  4282b8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
  4282bc:	fa82 f54c 	uadd8	r5, r2, ip
  4282c0:	ea82 0406 	eor.w	r4, r2, r6
  4282c4:	faa4 f48c 	sel	r4, r4, ip
  4282c8:	fa83 f54c 	uadd8	r5, r3, ip
  4282cc:	ea83 0507 	eor.w	r5, r3, r7
  4282d0:	faa5 f58c 	sel	r5, r5, ip
  4282d4:	4325      	orrs	r5, r4
  4282d6:	d0db      	beq.n	428290 <strcmp+0x68>
  4282d8:	b99c      	cbnz	r4, 428302 <strcmp+0xda>
  4282da:	ba2d      	rev	r5, r5
  4282dc:	fab5 f485 	clz	r4, r5
  4282e0:	f024 0407 	bic.w	r4, r4, #7
  4282e4:	fa27 f104 	lsr.w	r1, r7, r4
  4282e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  4282ec:	fa23 f304 	lsr.w	r3, r3, r4
  4282f0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  4282f4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4282f8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  4282fc:	eba0 0001 	sub.w	r0, r0, r1
  428300:	4770      	bx	lr
  428302:	ba24      	rev	r4, r4
  428304:	fab4 f484 	clz	r4, r4
  428308:	f024 0407 	bic.w	r4, r4, #7
  42830c:	fa26 f104 	lsr.w	r1, r6, r4
  428310:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  428314:	fa22 f204 	lsr.w	r2, r2, r4
  428318:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  42831c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  428320:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  428324:	eba0 0001 	sub.w	r0, r0, r1
  428328:	4770      	bx	lr
  42832a:	f014 0f03 	tst.w	r4, #3
  42832e:	d13c      	bne.n	4283aa <strcmp+0x182>
  428330:	f010 0403 	ands.w	r4, r0, #3
  428334:	d128      	bne.n	428388 <strcmp+0x160>
  428336:	f850 2b08 	ldr.w	r2, [r0], #8
  42833a:	f851 3b08 	ldr.w	r3, [r1], #8
  42833e:	fa82 f54c 	uadd8	r5, r2, ip
  428342:	ea82 0503 	eor.w	r5, r2, r3
  428346:	faa5 f58c 	sel	r5, r5, ip
  42834a:	b95d      	cbnz	r5, 428364 <strcmp+0x13c>
  42834c:	f850 2c04 	ldr.w	r2, [r0, #-4]
  428350:	f851 3c04 	ldr.w	r3, [r1, #-4]
  428354:	fa82 f54c 	uadd8	r5, r2, ip
  428358:	ea82 0503 	eor.w	r5, r2, r3
  42835c:	faa5 f58c 	sel	r5, r5, ip
  428360:	2d00      	cmp	r5, #0
  428362:	d0e8      	beq.n	428336 <strcmp+0x10e>
  428364:	ba2d      	rev	r5, r5
  428366:	fab5 f485 	clz	r4, r5
  42836a:	f024 0407 	bic.w	r4, r4, #7
  42836e:	fa23 f104 	lsr.w	r1, r3, r4
  428372:	fa22 f204 	lsr.w	r2, r2, r4
  428376:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  42837a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  42837e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  428382:	eba0 0001 	sub.w	r0, r0, r1
  428386:	4770      	bx	lr
  428388:	ea4f 04c4 	mov.w	r4, r4, lsl #3
  42838c:	f020 0003 	bic.w	r0, r0, #3
  428390:	f850 2b08 	ldr.w	r2, [r0], #8
  428394:	f021 0103 	bic.w	r1, r1, #3
  428398:	f851 3b08 	ldr.w	r3, [r1], #8
  42839c:	fa0c f404 	lsl.w	r4, ip, r4
  4283a0:	ea62 0204 	orn	r2, r2, r4
  4283a4:	ea63 0304 	orn	r3, r3, r4
  4283a8:	e7c9      	b.n	42833e <strcmp+0x116>
  4283aa:	f010 0403 	ands.w	r4, r0, #3
  4283ae:	d01a      	beq.n	4283e6 <strcmp+0x1be>
  4283b0:	eba1 0104 	sub.w	r1, r1, r4
  4283b4:	f020 0003 	bic.w	r0, r0, #3
  4283b8:	07e4      	lsls	r4, r4, #31
  4283ba:	f850 2b04 	ldr.w	r2, [r0], #4
  4283be:	d006      	beq.n	4283ce <strcmp+0x1a6>
  4283c0:	d20f      	bcs.n	4283e2 <strcmp+0x1ba>
  4283c2:	788b      	ldrb	r3, [r1, #2]
  4283c4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
  4283c8:	1ae4      	subs	r4, r4, r3
  4283ca:	d106      	bne.n	4283da <strcmp+0x1b2>
  4283cc:	b12b      	cbz	r3, 4283da <strcmp+0x1b2>
  4283ce:	78cb      	ldrb	r3, [r1, #3]
  4283d0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
  4283d4:	1ae4      	subs	r4, r4, r3
  4283d6:	d100      	bne.n	4283da <strcmp+0x1b2>
  4283d8:	b91b      	cbnz	r3, 4283e2 <strcmp+0x1ba>
  4283da:	4620      	mov	r0, r4
  4283dc:	f85d 4b10 	ldr.w	r4, [sp], #16
  4283e0:	4770      	bx	lr
  4283e2:	f101 0104 	add.w	r1, r1, #4
  4283e6:	f850 2b04 	ldr.w	r2, [r0], #4
  4283ea:	07cc      	lsls	r4, r1, #31
  4283ec:	f021 0103 	bic.w	r1, r1, #3
  4283f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4283f4:	d848      	bhi.n	428488 <strcmp+0x260>
  4283f6:	d224      	bcs.n	428442 <strcmp+0x21a>
  4283f8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
  4283fc:	fa82 f54c 	uadd8	r5, r2, ip
  428400:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
  428404:	faa5 f58c 	sel	r5, r5, ip
  428408:	d10a      	bne.n	428420 <strcmp+0x1f8>
  42840a:	b965      	cbnz	r5, 428426 <strcmp+0x1fe>
  42840c:	f851 3b04 	ldr.w	r3, [r1], #4
  428410:	ea84 0402 	eor.w	r4, r4, r2
  428414:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
  428418:	d10e      	bne.n	428438 <strcmp+0x210>
  42841a:	f850 2b04 	ldr.w	r2, [r0], #4
  42841e:	e7eb      	b.n	4283f8 <strcmp+0x1d0>
  428420:	ea4f 2313 	mov.w	r3, r3, lsr #8
  428424:	e055      	b.n	4284d2 <strcmp+0x2aa>
  428426:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
  42842a:	d14d      	bne.n	4284c8 <strcmp+0x2a0>
  42842c:	7808      	ldrb	r0, [r1, #0]
  42842e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  428432:	f1c0 0000 	rsb	r0, r0, #0
  428436:	4770      	bx	lr
  428438:	ea4f 6212 	mov.w	r2, r2, lsr #24
  42843c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  428440:	e047      	b.n	4284d2 <strcmp+0x2aa>
  428442:	ea02 441c 	and.w	r4, r2, ip, lsr #16
  428446:	fa82 f54c 	uadd8	r5, r2, ip
  42844a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
  42844e:	faa5 f58c 	sel	r5, r5, ip
  428452:	d10a      	bne.n	42846a <strcmp+0x242>
  428454:	b965      	cbnz	r5, 428470 <strcmp+0x248>
  428456:	f851 3b04 	ldr.w	r3, [r1], #4
  42845a:	ea84 0402 	eor.w	r4, r4, r2
  42845e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
  428462:	d10c      	bne.n	42847e <strcmp+0x256>
  428464:	f850 2b04 	ldr.w	r2, [r0], #4
  428468:	e7eb      	b.n	428442 <strcmp+0x21a>
  42846a:	ea4f 4313 	mov.w	r3, r3, lsr #16
  42846e:	e030      	b.n	4284d2 <strcmp+0x2aa>
  428470:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
  428474:	d128      	bne.n	4284c8 <strcmp+0x2a0>
  428476:	880b      	ldrh	r3, [r1, #0]
  428478:	ea4f 4212 	mov.w	r2, r2, lsr #16
  42847c:	e029      	b.n	4284d2 <strcmp+0x2aa>
  42847e:	ea4f 4212 	mov.w	r2, r2, lsr #16
  428482:	ea03 431c 	and.w	r3, r3, ip, lsr #16
  428486:	e024      	b.n	4284d2 <strcmp+0x2aa>
  428488:	f002 04ff 	and.w	r4, r2, #255	; 0xff
  42848c:	fa82 f54c 	uadd8	r5, r2, ip
  428490:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
  428494:	faa5 f58c 	sel	r5, r5, ip
  428498:	d10a      	bne.n	4284b0 <strcmp+0x288>
  42849a:	b965      	cbnz	r5, 4284b6 <strcmp+0x28e>
  42849c:	f851 3b04 	ldr.w	r3, [r1], #4
  4284a0:	ea84 0402 	eor.w	r4, r4, r2
  4284a4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
  4284a8:	d109      	bne.n	4284be <strcmp+0x296>
  4284aa:	f850 2b04 	ldr.w	r2, [r0], #4
  4284ae:	e7eb      	b.n	428488 <strcmp+0x260>
  4284b0:	ea4f 6313 	mov.w	r3, r3, lsr #24
  4284b4:	e00d      	b.n	4284d2 <strcmp+0x2aa>
  4284b6:	f015 0fff 	tst.w	r5, #255	; 0xff
  4284ba:	d105      	bne.n	4284c8 <strcmp+0x2a0>
  4284bc:	680b      	ldr	r3, [r1, #0]
  4284be:	ea4f 2212 	mov.w	r2, r2, lsr #8
  4284c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4284c6:	e004      	b.n	4284d2 <strcmp+0x2aa>
  4284c8:	f04f 0000 	mov.w	r0, #0
  4284cc:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  4284d0:	4770      	bx	lr
  4284d2:	ba12      	rev	r2, r2
  4284d4:	ba1b      	rev	r3, r3
  4284d6:	fa82 f44c 	uadd8	r4, r2, ip
  4284da:	ea82 0403 	eor.w	r4, r2, r3
  4284de:	faa4 f58c 	sel	r5, r4, ip
  4284e2:	fab5 f485 	clz	r4, r5
  4284e6:	fa02 f204 	lsl.w	r2, r2, r4
  4284ea:	fa03 f304 	lsl.w	r3, r3, r4
  4284ee:	ea4f 6012 	mov.w	r0, r2, lsr #24
  4284f2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  4284f6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
  4284fa:	4770      	bx	lr

004284fc <strcpy>:
  4284fc:	ea80 0201 	eor.w	r2, r0, r1
  428500:	4684      	mov	ip, r0
  428502:	f012 0f03 	tst.w	r2, #3
  428506:	d14f      	bne.n	4285a8 <strcpy+0xac>
  428508:	f011 0f03 	tst.w	r1, #3
  42850c:	d132      	bne.n	428574 <strcpy+0x78>
  42850e:	f84d 4d04 	str.w	r4, [sp, #-4]!
  428512:	f011 0f04 	tst.w	r1, #4
  428516:	f851 3b04 	ldr.w	r3, [r1], #4
  42851a:	d00b      	beq.n	428534 <strcpy+0x38>
  42851c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  428520:	439a      	bics	r2, r3
  428522:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  428526:	bf04      	itt	eq
  428528:	f84c 3b04 	streq.w	r3, [ip], #4
  42852c:	f851 3b04 	ldreq.w	r3, [r1], #4
  428530:	d116      	bne.n	428560 <strcpy+0x64>
  428532:	bf00      	nop
  428534:	f851 4b04 	ldr.w	r4, [r1], #4
  428538:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  42853c:	439a      	bics	r2, r3
  42853e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  428542:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  428546:	d10b      	bne.n	428560 <strcpy+0x64>
  428548:	f84c 3b04 	str.w	r3, [ip], #4
  42854c:	43a2      	bics	r2, r4
  42854e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  428552:	bf04      	itt	eq
  428554:	f851 3b04 	ldreq.w	r3, [r1], #4
  428558:	f84c 4b04 	streq.w	r4, [ip], #4
  42855c:	d0ea      	beq.n	428534 <strcpy+0x38>
  42855e:	4623      	mov	r3, r4
  428560:	f80c 3b01 	strb.w	r3, [ip], #1
  428564:	f013 0fff 	tst.w	r3, #255	; 0xff
  428568:	ea4f 2333 	mov.w	r3, r3, ror #8
  42856c:	d1f8      	bne.n	428560 <strcpy+0x64>
  42856e:	f85d 4b04 	ldr.w	r4, [sp], #4
  428572:	4770      	bx	lr
  428574:	f011 0f01 	tst.w	r1, #1
  428578:	d006      	beq.n	428588 <strcpy+0x8c>
  42857a:	f811 2b01 	ldrb.w	r2, [r1], #1
  42857e:	f80c 2b01 	strb.w	r2, [ip], #1
  428582:	2a00      	cmp	r2, #0
  428584:	bf08      	it	eq
  428586:	4770      	bxeq	lr
  428588:	f011 0f02 	tst.w	r1, #2
  42858c:	d0bf      	beq.n	42850e <strcpy+0x12>
  42858e:	f831 2b02 	ldrh.w	r2, [r1], #2
  428592:	f012 0fff 	tst.w	r2, #255	; 0xff
  428596:	bf16      	itet	ne
  428598:	f82c 2b02 	strhne.w	r2, [ip], #2
  42859c:	f88c 2000 	strbeq.w	r2, [ip]
  4285a0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  4285a4:	d1b3      	bne.n	42850e <strcpy+0x12>
  4285a6:	4770      	bx	lr
  4285a8:	f811 2b01 	ldrb.w	r2, [r1], #1
  4285ac:	f80c 2b01 	strb.w	r2, [ip], #1
  4285b0:	2a00      	cmp	r2, #0
  4285b2:	d1f9      	bne.n	4285a8 <strcpy+0xac>
  4285b4:	4770      	bx	lr
  4285b6:	bf00      	nop
	...

004285c0 <strlen>:
  4285c0:	f890 f000 	pld	[r0]
  4285c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4285c8:	f020 0107 	bic.w	r1, r0, #7
  4285cc:	f06f 0c00 	mvn.w	ip, #0
  4285d0:	f010 0407 	ands.w	r4, r0, #7
  4285d4:	f891 f020 	pld	[r1, #32]
  4285d8:	f040 8049 	bne.w	42866e <strlen+0xae>
  4285dc:	f04f 0400 	mov.w	r4, #0
  4285e0:	f06f 0007 	mvn.w	r0, #7
  4285e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4285e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4285ec:	f100 0008 	add.w	r0, r0, #8
  4285f0:	fa82 f24c 	uadd8	r2, r2, ip
  4285f4:	faa4 f28c 	sel	r2, r4, ip
  4285f8:	fa83 f34c 	uadd8	r3, r3, ip
  4285fc:	faa2 f38c 	sel	r3, r2, ip
  428600:	bb4b      	cbnz	r3, 428656 <strlen+0x96>
  428602:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  428606:	fa82 f24c 	uadd8	r2, r2, ip
  42860a:	f100 0008 	add.w	r0, r0, #8
  42860e:	faa4 f28c 	sel	r2, r4, ip
  428612:	fa83 f34c 	uadd8	r3, r3, ip
  428616:	faa2 f38c 	sel	r3, r2, ip
  42861a:	b9e3      	cbnz	r3, 428656 <strlen+0x96>
  42861c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  428620:	fa82 f24c 	uadd8	r2, r2, ip
  428624:	f100 0008 	add.w	r0, r0, #8
  428628:	faa4 f28c 	sel	r2, r4, ip
  42862c:	fa83 f34c 	uadd8	r3, r3, ip
  428630:	faa2 f38c 	sel	r3, r2, ip
  428634:	b97b      	cbnz	r3, 428656 <strlen+0x96>
  428636:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  42863a:	f101 0120 	add.w	r1, r1, #32
  42863e:	fa82 f24c 	uadd8	r2, r2, ip
  428642:	f100 0008 	add.w	r0, r0, #8
  428646:	faa4 f28c 	sel	r2, r4, ip
  42864a:	fa83 f34c 	uadd8	r3, r3, ip
  42864e:	faa2 f38c 	sel	r3, r2, ip
  428652:	2b00      	cmp	r3, #0
  428654:	d0c6      	beq.n	4285e4 <strlen+0x24>
  428656:	2a00      	cmp	r2, #0
  428658:	bf04      	itt	eq
  42865a:	3004      	addeq	r0, #4
  42865c:	461a      	moveq	r2, r3
  42865e:	ba12      	rev	r2, r2
  428660:	fab2 f282 	clz	r2, r2
  428664:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  428668:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  42866c:	4770      	bx	lr
  42866e:	e9d1 2300 	ldrd	r2, r3, [r1]
  428672:	f004 0503 	and.w	r5, r4, #3
  428676:	f1c4 0000 	rsb	r0, r4, #0
  42867a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  42867e:	f014 0f04 	tst.w	r4, #4
  428682:	f891 f040 	pld	[r1, #64]	; 0x40
  428686:	fa0c f505 	lsl.w	r5, ip, r5
  42868a:	ea62 0205 	orn	r2, r2, r5
  42868e:	bf1c      	itt	ne
  428690:	ea63 0305 	ornne	r3, r3, r5
  428694:	4662      	movne	r2, ip
  428696:	f04f 0400 	mov.w	r4, #0
  42869a:	e7a9      	b.n	4285f0 <strlen+0x30>

0042869c <strncpy>:
  42869c:	ea40 0301 	orr.w	r3, r0, r1
  4286a0:	f013 0f03 	tst.w	r3, #3
  4286a4:	b470      	push	{r4, r5, r6}
  4286a6:	4603      	mov	r3, r0
  4286a8:	d024      	beq.n	4286f4 <strncpy+0x58>
  4286aa:	b1a2      	cbz	r2, 4286d6 <strncpy+0x3a>
  4286ac:	780c      	ldrb	r4, [r1, #0]
  4286ae:	701c      	strb	r4, [r3, #0]
  4286b0:	3a01      	subs	r2, #1
  4286b2:	3301      	adds	r3, #1
  4286b4:	3101      	adds	r1, #1
  4286b6:	b13c      	cbz	r4, 4286c8 <strncpy+0x2c>
  4286b8:	b16a      	cbz	r2, 4286d6 <strncpy+0x3a>
  4286ba:	f811 4b01 	ldrb.w	r4, [r1], #1
  4286be:	f803 4b01 	strb.w	r4, [r3], #1
  4286c2:	3a01      	subs	r2, #1
  4286c4:	2c00      	cmp	r4, #0
  4286c6:	d1f7      	bne.n	4286b8 <strncpy+0x1c>
  4286c8:	b12a      	cbz	r2, 4286d6 <strncpy+0x3a>
  4286ca:	441a      	add	r2, r3
  4286cc:	2100      	movs	r1, #0
  4286ce:	f803 1b01 	strb.w	r1, [r3], #1
  4286d2:	429a      	cmp	r2, r3
  4286d4:	d1fb      	bne.n	4286ce <strncpy+0x32>
  4286d6:	bc70      	pop	{r4, r5, r6}
  4286d8:	4770      	bx	lr
  4286da:	460e      	mov	r6, r1
  4286dc:	f851 5b04 	ldr.w	r5, [r1], #4
  4286e0:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
  4286e4:	ea24 0405 	bic.w	r4, r4, r5
  4286e8:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  4286ec:	d105      	bne.n	4286fa <strncpy+0x5e>
  4286ee:	f843 5b04 	str.w	r5, [r3], #4
  4286f2:	3a04      	subs	r2, #4
  4286f4:	2a03      	cmp	r2, #3
  4286f6:	d8f0      	bhi.n	4286da <strncpy+0x3e>
  4286f8:	e7d7      	b.n	4286aa <strncpy+0xe>
  4286fa:	4631      	mov	r1, r6
  4286fc:	e7d6      	b.n	4286ac <strncpy+0x10>
  4286fe:	bf00      	nop

00428700 <__sprint_r.part.0>:
  428700:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  428704:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  428706:	049c      	lsls	r4, r3, #18
  428708:	4693      	mov	fp, r2
  42870a:	d52f      	bpl.n	42876c <__sprint_r.part.0+0x6c>
  42870c:	6893      	ldr	r3, [r2, #8]
  42870e:	6812      	ldr	r2, [r2, #0]
  428710:	b353      	cbz	r3, 428768 <__sprint_r.part.0+0x68>
  428712:	460e      	mov	r6, r1
  428714:	4607      	mov	r7, r0
  428716:	f102 0908 	add.w	r9, r2, #8
  42871a:	e919 0420 	ldmdb	r9, {r5, sl}
  42871e:	ea5f 089a 	movs.w	r8, sl, lsr #2
  428722:	d017      	beq.n	428754 <__sprint_r.part.0+0x54>
  428724:	3d04      	subs	r5, #4
  428726:	2400      	movs	r4, #0
  428728:	e001      	b.n	42872e <__sprint_r.part.0+0x2e>
  42872a:	45a0      	cmp	r8, r4
  42872c:	d010      	beq.n	428750 <__sprint_r.part.0+0x50>
  42872e:	4632      	mov	r2, r6
  428730:	f855 1f04 	ldr.w	r1, [r5, #4]!
  428734:	4638      	mov	r0, r7
  428736:	f001 f8bb 	bl	4298b0 <_fputwc_r>
  42873a:	1c43      	adds	r3, r0, #1
  42873c:	f104 0401 	add.w	r4, r4, #1
  428740:	d1f3      	bne.n	42872a <__sprint_r.part.0+0x2a>
  428742:	2300      	movs	r3, #0
  428744:	f8cb 3008 	str.w	r3, [fp, #8]
  428748:	f8cb 3004 	str.w	r3, [fp, #4]
  42874c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  428750:	f8db 3008 	ldr.w	r3, [fp, #8]
  428754:	f02a 0a03 	bic.w	sl, sl, #3
  428758:	eba3 030a 	sub.w	r3, r3, sl
  42875c:	f8cb 3008 	str.w	r3, [fp, #8]
  428760:	f109 0908 	add.w	r9, r9, #8
  428764:	2b00      	cmp	r3, #0
  428766:	d1d8      	bne.n	42871a <__sprint_r.part.0+0x1a>
  428768:	2000      	movs	r0, #0
  42876a:	e7ea      	b.n	428742 <__sprint_r.part.0+0x42>
  42876c:	f001 fa0a 	bl	429b84 <__sfvwrite_r>
  428770:	2300      	movs	r3, #0
  428772:	f8cb 3008 	str.w	r3, [fp, #8]
  428776:	f8cb 3004 	str.w	r3, [fp, #4]
  42877a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42877e:	bf00      	nop

00428780 <_vfiprintf_r>:
  428780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  428784:	b0ad      	sub	sp, #180	; 0xb4
  428786:	461d      	mov	r5, r3
  428788:	468b      	mov	fp, r1
  42878a:	4690      	mov	r8, r2
  42878c:	9307      	str	r3, [sp, #28]
  42878e:	9006      	str	r0, [sp, #24]
  428790:	b118      	cbz	r0, 42879a <_vfiprintf_r+0x1a>
  428792:	6b83      	ldr	r3, [r0, #56]	; 0x38
  428794:	2b00      	cmp	r3, #0
  428796:	f000 80f3 	beq.w	428980 <_vfiprintf_r+0x200>
  42879a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  42879e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4287a2:	07df      	lsls	r7, r3, #31
  4287a4:	b281      	uxth	r1, r0
  4287a6:	d402      	bmi.n	4287ae <_vfiprintf_r+0x2e>
  4287a8:	058e      	lsls	r6, r1, #22
  4287aa:	f140 80fc 	bpl.w	4289a6 <_vfiprintf_r+0x226>
  4287ae:	048c      	lsls	r4, r1, #18
  4287b0:	d40a      	bmi.n	4287c8 <_vfiprintf_r+0x48>
  4287b2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4287b6:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  4287ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4287be:	f8ab 100c 	strh.w	r1, [fp, #12]
  4287c2:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  4287c6:	b289      	uxth	r1, r1
  4287c8:	0708      	lsls	r0, r1, #28
  4287ca:	f140 80b3 	bpl.w	428934 <_vfiprintf_r+0x1b4>
  4287ce:	f8db 3010 	ldr.w	r3, [fp, #16]
  4287d2:	2b00      	cmp	r3, #0
  4287d4:	f000 80ae 	beq.w	428934 <_vfiprintf_r+0x1b4>
  4287d8:	f001 031a 	and.w	r3, r1, #26
  4287dc:	2b0a      	cmp	r3, #10
  4287de:	f000 80b5 	beq.w	42894c <_vfiprintf_r+0x1cc>
  4287e2:	2300      	movs	r3, #0
  4287e4:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  4287e8:	930b      	str	r3, [sp, #44]	; 0x2c
  4287ea:	9311      	str	r3, [sp, #68]	; 0x44
  4287ec:	9310      	str	r3, [sp, #64]	; 0x40
  4287ee:	9303      	str	r3, [sp, #12]
  4287f0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  4287f4:	46ca      	mov	sl, r9
  4287f6:	f8cd b010 	str.w	fp, [sp, #16]
  4287fa:	f898 3000 	ldrb.w	r3, [r8]
  4287fe:	4644      	mov	r4, r8
  428800:	b1fb      	cbz	r3, 428842 <_vfiprintf_r+0xc2>
  428802:	2b25      	cmp	r3, #37	; 0x25
  428804:	d102      	bne.n	42880c <_vfiprintf_r+0x8c>
  428806:	e01c      	b.n	428842 <_vfiprintf_r+0xc2>
  428808:	2b25      	cmp	r3, #37	; 0x25
  42880a:	d003      	beq.n	428814 <_vfiprintf_r+0x94>
  42880c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  428810:	2b00      	cmp	r3, #0
  428812:	d1f9      	bne.n	428808 <_vfiprintf_r+0x88>
  428814:	eba4 0508 	sub.w	r5, r4, r8
  428818:	b19d      	cbz	r5, 428842 <_vfiprintf_r+0xc2>
  42881a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  42881c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  42881e:	f8ca 8000 	str.w	r8, [sl]
  428822:	3301      	adds	r3, #1
  428824:	442a      	add	r2, r5
  428826:	2b07      	cmp	r3, #7
  428828:	f8ca 5004 	str.w	r5, [sl, #4]
  42882c:	9211      	str	r2, [sp, #68]	; 0x44
  42882e:	9310      	str	r3, [sp, #64]	; 0x40
  428830:	dd7a      	ble.n	428928 <_vfiprintf_r+0x1a8>
  428832:	2a00      	cmp	r2, #0
  428834:	f040 84b0 	bne.w	429198 <_vfiprintf_r+0xa18>
  428838:	9b03      	ldr	r3, [sp, #12]
  42883a:	9210      	str	r2, [sp, #64]	; 0x40
  42883c:	442b      	add	r3, r5
  42883e:	46ca      	mov	sl, r9
  428840:	9303      	str	r3, [sp, #12]
  428842:	7823      	ldrb	r3, [r4, #0]
  428844:	2b00      	cmp	r3, #0
  428846:	f000 83e0 	beq.w	42900a <_vfiprintf_r+0x88a>
  42884a:	2000      	movs	r0, #0
  42884c:	f04f 0300 	mov.w	r3, #0
  428850:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  428854:	f104 0801 	add.w	r8, r4, #1
  428858:	7862      	ldrb	r2, [r4, #1]
  42885a:	4605      	mov	r5, r0
  42885c:	4606      	mov	r6, r0
  42885e:	4603      	mov	r3, r0
  428860:	f04f 34ff 	mov.w	r4, #4294967295
  428864:	f108 0801 	add.w	r8, r8, #1
  428868:	f1a2 0120 	sub.w	r1, r2, #32
  42886c:	2958      	cmp	r1, #88	; 0x58
  42886e:	f200 82de 	bhi.w	428e2e <_vfiprintf_r+0x6ae>
  428872:	e8df f011 	tbh	[pc, r1, lsl #1]
  428876:	0221      	.short	0x0221
  428878:	02dc02dc 	.word	0x02dc02dc
  42887c:	02dc0229 	.word	0x02dc0229
  428880:	02dc02dc 	.word	0x02dc02dc
  428884:	02dc02dc 	.word	0x02dc02dc
  428888:	028902dc 	.word	0x028902dc
  42888c:	02dc0295 	.word	0x02dc0295
  428890:	02bd00a2 	.word	0x02bd00a2
  428894:	019f02dc 	.word	0x019f02dc
  428898:	01a401a4 	.word	0x01a401a4
  42889c:	01a401a4 	.word	0x01a401a4
  4288a0:	01a401a4 	.word	0x01a401a4
  4288a4:	01a401a4 	.word	0x01a401a4
  4288a8:	02dc01a4 	.word	0x02dc01a4
  4288ac:	02dc02dc 	.word	0x02dc02dc
  4288b0:	02dc02dc 	.word	0x02dc02dc
  4288b4:	02dc02dc 	.word	0x02dc02dc
  4288b8:	02dc02dc 	.word	0x02dc02dc
  4288bc:	01b202dc 	.word	0x01b202dc
  4288c0:	02dc02dc 	.word	0x02dc02dc
  4288c4:	02dc02dc 	.word	0x02dc02dc
  4288c8:	02dc02dc 	.word	0x02dc02dc
  4288cc:	02dc02dc 	.word	0x02dc02dc
  4288d0:	02dc02dc 	.word	0x02dc02dc
  4288d4:	02dc0197 	.word	0x02dc0197
  4288d8:	02dc02dc 	.word	0x02dc02dc
  4288dc:	02dc02dc 	.word	0x02dc02dc
  4288e0:	02dc019b 	.word	0x02dc019b
  4288e4:	025302dc 	.word	0x025302dc
  4288e8:	02dc02dc 	.word	0x02dc02dc
  4288ec:	02dc02dc 	.word	0x02dc02dc
  4288f0:	02dc02dc 	.word	0x02dc02dc
  4288f4:	02dc02dc 	.word	0x02dc02dc
  4288f8:	02dc02dc 	.word	0x02dc02dc
  4288fc:	021b025a 	.word	0x021b025a
  428900:	02dc02dc 	.word	0x02dc02dc
  428904:	026e02dc 	.word	0x026e02dc
  428908:	02dc021b 	.word	0x02dc021b
  42890c:	027302dc 	.word	0x027302dc
  428910:	01f502dc 	.word	0x01f502dc
  428914:	02090182 	.word	0x02090182
  428918:	02dc02d7 	.word	0x02dc02d7
  42891c:	02dc029a 	.word	0x02dc029a
  428920:	02dc00a7 	.word	0x02dc00a7
  428924:	022e02dc 	.word	0x022e02dc
  428928:	f10a 0a08 	add.w	sl, sl, #8
  42892c:	9b03      	ldr	r3, [sp, #12]
  42892e:	442b      	add	r3, r5
  428930:	9303      	str	r3, [sp, #12]
  428932:	e786      	b.n	428842 <_vfiprintf_r+0xc2>
  428934:	4659      	mov	r1, fp
  428936:	9806      	ldr	r0, [sp, #24]
  428938:	f000 fdac 	bl	429494 <__swsetup_r>
  42893c:	bb18      	cbnz	r0, 428986 <_vfiprintf_r+0x206>
  42893e:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  428942:	f001 031a 	and.w	r3, r1, #26
  428946:	2b0a      	cmp	r3, #10
  428948:	f47f af4b 	bne.w	4287e2 <_vfiprintf_r+0x62>
  42894c:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  428950:	2b00      	cmp	r3, #0
  428952:	f6ff af46 	blt.w	4287e2 <_vfiprintf_r+0x62>
  428956:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  42895a:	07db      	lsls	r3, r3, #31
  42895c:	d405      	bmi.n	42896a <_vfiprintf_r+0x1ea>
  42895e:	058f      	lsls	r7, r1, #22
  428960:	d403      	bmi.n	42896a <_vfiprintf_r+0x1ea>
  428962:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  428966:	f001 fac3 	bl	429ef0 <__retarget_lock_release_recursive>
  42896a:	462b      	mov	r3, r5
  42896c:	4642      	mov	r2, r8
  42896e:	4659      	mov	r1, fp
  428970:	9806      	ldr	r0, [sp, #24]
  428972:	f000 fd4d 	bl	429410 <__sbprintf>
  428976:	9003      	str	r0, [sp, #12]
  428978:	9803      	ldr	r0, [sp, #12]
  42897a:	b02d      	add	sp, #180	; 0xb4
  42897c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  428980:	f000 fef4 	bl	42976c <__sinit>
  428984:	e709      	b.n	42879a <_vfiprintf_r+0x1a>
  428986:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  42898a:	07d9      	lsls	r1, r3, #31
  42898c:	d404      	bmi.n	428998 <_vfiprintf_r+0x218>
  42898e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  428992:	059a      	lsls	r2, r3, #22
  428994:	f140 84aa 	bpl.w	4292ec <_vfiprintf_r+0xb6c>
  428998:	f04f 33ff 	mov.w	r3, #4294967295
  42899c:	9303      	str	r3, [sp, #12]
  42899e:	9803      	ldr	r0, [sp, #12]
  4289a0:	b02d      	add	sp, #180	; 0xb4
  4289a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4289a6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4289aa:	f001 fa9f 	bl	429eec <__retarget_lock_acquire_recursive>
  4289ae:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4289b2:	b281      	uxth	r1, r0
  4289b4:	e6fb      	b.n	4287ae <_vfiprintf_r+0x2e>
  4289b6:	4276      	negs	r6, r6
  4289b8:	9207      	str	r2, [sp, #28]
  4289ba:	f043 0304 	orr.w	r3, r3, #4
  4289be:	f898 2000 	ldrb.w	r2, [r8]
  4289c2:	e74f      	b.n	428864 <_vfiprintf_r+0xe4>
  4289c4:	9608      	str	r6, [sp, #32]
  4289c6:	069e      	lsls	r6, r3, #26
  4289c8:	f100 8450 	bmi.w	42926c <_vfiprintf_r+0xaec>
  4289cc:	9907      	ldr	r1, [sp, #28]
  4289ce:	06dd      	lsls	r5, r3, #27
  4289d0:	460a      	mov	r2, r1
  4289d2:	f100 83ef 	bmi.w	4291b4 <_vfiprintf_r+0xa34>
  4289d6:	0658      	lsls	r0, r3, #25
  4289d8:	f140 83ec 	bpl.w	4291b4 <_vfiprintf_r+0xa34>
  4289dc:	880e      	ldrh	r6, [r1, #0]
  4289de:	3104      	adds	r1, #4
  4289e0:	2700      	movs	r7, #0
  4289e2:	2201      	movs	r2, #1
  4289e4:	9107      	str	r1, [sp, #28]
  4289e6:	f04f 0100 	mov.w	r1, #0
  4289ea:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  4289ee:	2500      	movs	r5, #0
  4289f0:	1c61      	adds	r1, r4, #1
  4289f2:	f000 8116 	beq.w	428c22 <_vfiprintf_r+0x4a2>
  4289f6:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  4289fa:	9102      	str	r1, [sp, #8]
  4289fc:	ea56 0107 	orrs.w	r1, r6, r7
  428a00:	f040 8114 	bne.w	428c2c <_vfiprintf_r+0x4ac>
  428a04:	2c00      	cmp	r4, #0
  428a06:	f040 835c 	bne.w	4290c2 <_vfiprintf_r+0x942>
  428a0a:	2a00      	cmp	r2, #0
  428a0c:	f040 83b7 	bne.w	42917e <_vfiprintf_r+0x9fe>
  428a10:	f013 0301 	ands.w	r3, r3, #1
  428a14:	9305      	str	r3, [sp, #20]
  428a16:	f000 8457 	beq.w	4292c8 <_vfiprintf_r+0xb48>
  428a1a:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  428a1e:	2330      	movs	r3, #48	; 0x30
  428a20:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  428a24:	9b05      	ldr	r3, [sp, #20]
  428a26:	42a3      	cmp	r3, r4
  428a28:	bfb8      	it	lt
  428a2a:	4623      	movlt	r3, r4
  428a2c:	9301      	str	r3, [sp, #4]
  428a2e:	b10d      	cbz	r5, 428a34 <_vfiprintf_r+0x2b4>
  428a30:	3301      	adds	r3, #1
  428a32:	9301      	str	r3, [sp, #4]
  428a34:	9b02      	ldr	r3, [sp, #8]
  428a36:	f013 0302 	ands.w	r3, r3, #2
  428a3a:	9309      	str	r3, [sp, #36]	; 0x24
  428a3c:	d002      	beq.n	428a44 <_vfiprintf_r+0x2c4>
  428a3e:	9b01      	ldr	r3, [sp, #4]
  428a40:	3302      	adds	r3, #2
  428a42:	9301      	str	r3, [sp, #4]
  428a44:	9b02      	ldr	r3, [sp, #8]
  428a46:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  428a4a:	930a      	str	r3, [sp, #40]	; 0x28
  428a4c:	f040 8217 	bne.w	428e7e <_vfiprintf_r+0x6fe>
  428a50:	9b08      	ldr	r3, [sp, #32]
  428a52:	9a01      	ldr	r2, [sp, #4]
  428a54:	1a9d      	subs	r5, r3, r2
  428a56:	2d00      	cmp	r5, #0
  428a58:	f340 8211 	ble.w	428e7e <_vfiprintf_r+0x6fe>
  428a5c:	2d10      	cmp	r5, #16
  428a5e:	f340 8490 	ble.w	429382 <_vfiprintf_r+0xc02>
  428a62:	9b10      	ldr	r3, [sp, #64]	; 0x40
  428a64:	9a11      	ldr	r2, [sp, #68]	; 0x44
  428a66:	4ec4      	ldr	r6, [pc, #784]	; (428d78 <_vfiprintf_r+0x5f8>)
  428a68:	46d6      	mov	lr, sl
  428a6a:	2710      	movs	r7, #16
  428a6c:	46a2      	mov	sl, r4
  428a6e:	4619      	mov	r1, r3
  428a70:	9c06      	ldr	r4, [sp, #24]
  428a72:	e007      	b.n	428a84 <_vfiprintf_r+0x304>
  428a74:	f101 0c02 	add.w	ip, r1, #2
  428a78:	f10e 0e08 	add.w	lr, lr, #8
  428a7c:	4601      	mov	r1, r0
  428a7e:	3d10      	subs	r5, #16
  428a80:	2d10      	cmp	r5, #16
  428a82:	dd11      	ble.n	428aa8 <_vfiprintf_r+0x328>
  428a84:	1c48      	adds	r0, r1, #1
  428a86:	3210      	adds	r2, #16
  428a88:	2807      	cmp	r0, #7
  428a8a:	9211      	str	r2, [sp, #68]	; 0x44
  428a8c:	e88e 00c0 	stmia.w	lr, {r6, r7}
  428a90:	9010      	str	r0, [sp, #64]	; 0x40
  428a92:	ddef      	ble.n	428a74 <_vfiprintf_r+0x2f4>
  428a94:	2a00      	cmp	r2, #0
  428a96:	f040 81e4 	bne.w	428e62 <_vfiprintf_r+0x6e2>
  428a9a:	3d10      	subs	r5, #16
  428a9c:	2d10      	cmp	r5, #16
  428a9e:	4611      	mov	r1, r2
  428aa0:	f04f 0c01 	mov.w	ip, #1
  428aa4:	46ce      	mov	lr, r9
  428aa6:	dced      	bgt.n	428a84 <_vfiprintf_r+0x304>
  428aa8:	4654      	mov	r4, sl
  428aaa:	4661      	mov	r1, ip
  428aac:	46f2      	mov	sl, lr
  428aae:	442a      	add	r2, r5
  428ab0:	2907      	cmp	r1, #7
  428ab2:	9211      	str	r2, [sp, #68]	; 0x44
  428ab4:	f8ca 6000 	str.w	r6, [sl]
  428ab8:	f8ca 5004 	str.w	r5, [sl, #4]
  428abc:	9110      	str	r1, [sp, #64]	; 0x40
  428abe:	f300 82ec 	bgt.w	42909a <_vfiprintf_r+0x91a>
  428ac2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  428ac6:	f10a 0a08 	add.w	sl, sl, #8
  428aca:	1c48      	adds	r0, r1, #1
  428acc:	2d00      	cmp	r5, #0
  428ace:	f040 81de 	bne.w	428e8e <_vfiprintf_r+0x70e>
  428ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  428ad4:	2b00      	cmp	r3, #0
  428ad6:	f000 81f8 	beq.w	428eca <_vfiprintf_r+0x74a>
  428ada:	3202      	adds	r2, #2
  428adc:	a90e      	add	r1, sp, #56	; 0x38
  428ade:	2302      	movs	r3, #2
  428ae0:	2807      	cmp	r0, #7
  428ae2:	9211      	str	r2, [sp, #68]	; 0x44
  428ae4:	9010      	str	r0, [sp, #64]	; 0x40
  428ae6:	e88a 000a 	stmia.w	sl, {r1, r3}
  428aea:	f340 81ea 	ble.w	428ec2 <_vfiprintf_r+0x742>
  428aee:	2a00      	cmp	r2, #0
  428af0:	f040 838c 	bne.w	42920c <_vfiprintf_r+0xa8c>
  428af4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  428af6:	2b80      	cmp	r3, #128	; 0x80
  428af8:	f04f 0001 	mov.w	r0, #1
  428afc:	4611      	mov	r1, r2
  428afe:	46ca      	mov	sl, r9
  428b00:	f040 81e7 	bne.w	428ed2 <_vfiprintf_r+0x752>
  428b04:	9b08      	ldr	r3, [sp, #32]
  428b06:	9d01      	ldr	r5, [sp, #4]
  428b08:	1b5e      	subs	r6, r3, r5
  428b0a:	2e00      	cmp	r6, #0
  428b0c:	f340 81e1 	ble.w	428ed2 <_vfiprintf_r+0x752>
  428b10:	2e10      	cmp	r6, #16
  428b12:	4d9a      	ldr	r5, [pc, #616]	; (428d7c <_vfiprintf_r+0x5fc>)
  428b14:	f340 8450 	ble.w	4293b8 <_vfiprintf_r+0xc38>
  428b18:	46d4      	mov	ip, sl
  428b1a:	2710      	movs	r7, #16
  428b1c:	46a2      	mov	sl, r4
  428b1e:	9c06      	ldr	r4, [sp, #24]
  428b20:	e007      	b.n	428b32 <_vfiprintf_r+0x3b2>
  428b22:	f101 0e02 	add.w	lr, r1, #2
  428b26:	f10c 0c08 	add.w	ip, ip, #8
  428b2a:	4601      	mov	r1, r0
  428b2c:	3e10      	subs	r6, #16
  428b2e:	2e10      	cmp	r6, #16
  428b30:	dd11      	ble.n	428b56 <_vfiprintf_r+0x3d6>
  428b32:	1c48      	adds	r0, r1, #1
  428b34:	3210      	adds	r2, #16
  428b36:	2807      	cmp	r0, #7
  428b38:	9211      	str	r2, [sp, #68]	; 0x44
  428b3a:	e88c 00a0 	stmia.w	ip, {r5, r7}
  428b3e:	9010      	str	r0, [sp, #64]	; 0x40
  428b40:	ddef      	ble.n	428b22 <_vfiprintf_r+0x3a2>
  428b42:	2a00      	cmp	r2, #0
  428b44:	f040 829d 	bne.w	429082 <_vfiprintf_r+0x902>
  428b48:	3e10      	subs	r6, #16
  428b4a:	2e10      	cmp	r6, #16
  428b4c:	f04f 0e01 	mov.w	lr, #1
  428b50:	4611      	mov	r1, r2
  428b52:	46cc      	mov	ip, r9
  428b54:	dced      	bgt.n	428b32 <_vfiprintf_r+0x3b2>
  428b56:	4654      	mov	r4, sl
  428b58:	46e2      	mov	sl, ip
  428b5a:	4432      	add	r2, r6
  428b5c:	f1be 0f07 	cmp.w	lr, #7
  428b60:	9211      	str	r2, [sp, #68]	; 0x44
  428b62:	e88a 0060 	stmia.w	sl, {r5, r6}
  428b66:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  428b6a:	f300 8369 	bgt.w	429240 <_vfiprintf_r+0xac0>
  428b6e:	f10a 0a08 	add.w	sl, sl, #8
  428b72:	f10e 0001 	add.w	r0, lr, #1
  428b76:	4671      	mov	r1, lr
  428b78:	e1ab      	b.n	428ed2 <_vfiprintf_r+0x752>
  428b7a:	9608      	str	r6, [sp, #32]
  428b7c:	f013 0220 	ands.w	r2, r3, #32
  428b80:	f040 838c 	bne.w	42929c <_vfiprintf_r+0xb1c>
  428b84:	f013 0110 	ands.w	r1, r3, #16
  428b88:	f040 831a 	bne.w	4291c0 <_vfiprintf_r+0xa40>
  428b8c:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  428b90:	f000 8316 	beq.w	4291c0 <_vfiprintf_r+0xa40>
  428b94:	9807      	ldr	r0, [sp, #28]
  428b96:	460a      	mov	r2, r1
  428b98:	4601      	mov	r1, r0
  428b9a:	3104      	adds	r1, #4
  428b9c:	8806      	ldrh	r6, [r0, #0]
  428b9e:	9107      	str	r1, [sp, #28]
  428ba0:	2700      	movs	r7, #0
  428ba2:	e720      	b.n	4289e6 <_vfiprintf_r+0x266>
  428ba4:	9608      	str	r6, [sp, #32]
  428ba6:	f043 0310 	orr.w	r3, r3, #16
  428baa:	e7e7      	b.n	428b7c <_vfiprintf_r+0x3fc>
  428bac:	9608      	str	r6, [sp, #32]
  428bae:	f043 0310 	orr.w	r3, r3, #16
  428bb2:	e708      	b.n	4289c6 <_vfiprintf_r+0x246>
  428bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  428bb8:	f898 2000 	ldrb.w	r2, [r8]
  428bbc:	e652      	b.n	428864 <_vfiprintf_r+0xe4>
  428bbe:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  428bc2:	2600      	movs	r6, #0
  428bc4:	f818 2b01 	ldrb.w	r2, [r8], #1
  428bc8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  428bcc:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  428bd0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  428bd4:	2909      	cmp	r1, #9
  428bd6:	d9f5      	bls.n	428bc4 <_vfiprintf_r+0x444>
  428bd8:	e646      	b.n	428868 <_vfiprintf_r+0xe8>
  428bda:	9608      	str	r6, [sp, #32]
  428bdc:	2800      	cmp	r0, #0
  428bde:	f040 8408 	bne.w	4293f2 <_vfiprintf_r+0xc72>
  428be2:	f043 0310 	orr.w	r3, r3, #16
  428be6:	069e      	lsls	r6, r3, #26
  428be8:	f100 834c 	bmi.w	429284 <_vfiprintf_r+0xb04>
  428bec:	06dd      	lsls	r5, r3, #27
  428bee:	f100 82f3 	bmi.w	4291d8 <_vfiprintf_r+0xa58>
  428bf2:	0658      	lsls	r0, r3, #25
  428bf4:	f140 82f0 	bpl.w	4291d8 <_vfiprintf_r+0xa58>
  428bf8:	9d07      	ldr	r5, [sp, #28]
  428bfa:	f9b5 6000 	ldrsh.w	r6, [r5]
  428bfe:	462a      	mov	r2, r5
  428c00:	17f7      	asrs	r7, r6, #31
  428c02:	3204      	adds	r2, #4
  428c04:	4630      	mov	r0, r6
  428c06:	4639      	mov	r1, r7
  428c08:	9207      	str	r2, [sp, #28]
  428c0a:	2800      	cmp	r0, #0
  428c0c:	f171 0200 	sbcs.w	r2, r1, #0
  428c10:	f2c0 835d 	blt.w	4292ce <_vfiprintf_r+0xb4e>
  428c14:	1c61      	adds	r1, r4, #1
  428c16:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  428c1a:	f04f 0201 	mov.w	r2, #1
  428c1e:	f47f aeea 	bne.w	4289f6 <_vfiprintf_r+0x276>
  428c22:	ea56 0107 	orrs.w	r1, r6, r7
  428c26:	f000 824d 	beq.w	4290c4 <_vfiprintf_r+0x944>
  428c2a:	9302      	str	r3, [sp, #8]
  428c2c:	2a01      	cmp	r2, #1
  428c2e:	f000 828c 	beq.w	42914a <_vfiprintf_r+0x9ca>
  428c32:	2a02      	cmp	r2, #2
  428c34:	f040 825c 	bne.w	4290f0 <_vfiprintf_r+0x970>
  428c38:	980b      	ldr	r0, [sp, #44]	; 0x2c
  428c3a:	46cb      	mov	fp, r9
  428c3c:	0933      	lsrs	r3, r6, #4
  428c3e:	f006 010f 	and.w	r1, r6, #15
  428c42:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  428c46:	093a      	lsrs	r2, r7, #4
  428c48:	461e      	mov	r6, r3
  428c4a:	4617      	mov	r7, r2
  428c4c:	5c43      	ldrb	r3, [r0, r1]
  428c4e:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  428c52:	ea56 0307 	orrs.w	r3, r6, r7
  428c56:	d1f1      	bne.n	428c3c <_vfiprintf_r+0x4bc>
  428c58:	eba9 030b 	sub.w	r3, r9, fp
  428c5c:	9305      	str	r3, [sp, #20]
  428c5e:	e6e1      	b.n	428a24 <_vfiprintf_r+0x2a4>
  428c60:	2800      	cmp	r0, #0
  428c62:	f040 83c0 	bne.w	4293e6 <_vfiprintf_r+0xc66>
  428c66:	0699      	lsls	r1, r3, #26
  428c68:	f100 8367 	bmi.w	42933a <_vfiprintf_r+0xbba>
  428c6c:	06da      	lsls	r2, r3, #27
  428c6e:	f100 80f1 	bmi.w	428e54 <_vfiprintf_r+0x6d4>
  428c72:	065b      	lsls	r3, r3, #25
  428c74:	f140 80ee 	bpl.w	428e54 <_vfiprintf_r+0x6d4>
  428c78:	9a07      	ldr	r2, [sp, #28]
  428c7a:	6813      	ldr	r3, [r2, #0]
  428c7c:	3204      	adds	r2, #4
  428c7e:	9207      	str	r2, [sp, #28]
  428c80:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  428c84:	801a      	strh	r2, [r3, #0]
  428c86:	e5b8      	b.n	4287fa <_vfiprintf_r+0x7a>
  428c88:	9807      	ldr	r0, [sp, #28]
  428c8a:	4a3d      	ldr	r2, [pc, #244]	; (428d80 <_vfiprintf_r+0x600>)
  428c8c:	9608      	str	r6, [sp, #32]
  428c8e:	920b      	str	r2, [sp, #44]	; 0x2c
  428c90:	6806      	ldr	r6, [r0, #0]
  428c92:	2278      	movs	r2, #120	; 0x78
  428c94:	2130      	movs	r1, #48	; 0x30
  428c96:	3004      	adds	r0, #4
  428c98:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  428c9c:	f043 0302 	orr.w	r3, r3, #2
  428ca0:	9007      	str	r0, [sp, #28]
  428ca2:	2700      	movs	r7, #0
  428ca4:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  428ca8:	2202      	movs	r2, #2
  428caa:	e69c      	b.n	4289e6 <_vfiprintf_r+0x266>
  428cac:	9608      	str	r6, [sp, #32]
  428cae:	2800      	cmp	r0, #0
  428cb0:	d099      	beq.n	428be6 <_vfiprintf_r+0x466>
  428cb2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  428cb6:	e796      	b.n	428be6 <_vfiprintf_r+0x466>
  428cb8:	f898 2000 	ldrb.w	r2, [r8]
  428cbc:	2d00      	cmp	r5, #0
  428cbe:	f47f add1 	bne.w	428864 <_vfiprintf_r+0xe4>
  428cc2:	2001      	movs	r0, #1
  428cc4:	2520      	movs	r5, #32
  428cc6:	e5cd      	b.n	428864 <_vfiprintf_r+0xe4>
  428cc8:	f043 0301 	orr.w	r3, r3, #1
  428ccc:	f898 2000 	ldrb.w	r2, [r8]
  428cd0:	e5c8      	b.n	428864 <_vfiprintf_r+0xe4>
  428cd2:	9608      	str	r6, [sp, #32]
  428cd4:	2800      	cmp	r0, #0
  428cd6:	f040 8393 	bne.w	429400 <_vfiprintf_r+0xc80>
  428cda:	4929      	ldr	r1, [pc, #164]	; (428d80 <_vfiprintf_r+0x600>)
  428cdc:	910b      	str	r1, [sp, #44]	; 0x2c
  428cde:	069f      	lsls	r7, r3, #26
  428ce0:	f100 82e8 	bmi.w	4292b4 <_vfiprintf_r+0xb34>
  428ce4:	9807      	ldr	r0, [sp, #28]
  428ce6:	06de      	lsls	r6, r3, #27
  428ce8:	4601      	mov	r1, r0
  428cea:	f100 8270 	bmi.w	4291ce <_vfiprintf_r+0xa4e>
  428cee:	065d      	lsls	r5, r3, #25
  428cf0:	f140 826d 	bpl.w	4291ce <_vfiprintf_r+0xa4e>
  428cf4:	3104      	adds	r1, #4
  428cf6:	8806      	ldrh	r6, [r0, #0]
  428cf8:	9107      	str	r1, [sp, #28]
  428cfa:	2700      	movs	r7, #0
  428cfc:	07d8      	lsls	r0, r3, #31
  428cfe:	f140 8222 	bpl.w	429146 <_vfiprintf_r+0x9c6>
  428d02:	ea56 0107 	orrs.w	r1, r6, r7
  428d06:	f000 821e 	beq.w	429146 <_vfiprintf_r+0x9c6>
  428d0a:	2130      	movs	r1, #48	; 0x30
  428d0c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  428d10:	f043 0302 	orr.w	r3, r3, #2
  428d14:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  428d18:	2202      	movs	r2, #2
  428d1a:	e664      	b.n	4289e6 <_vfiprintf_r+0x266>
  428d1c:	9608      	str	r6, [sp, #32]
  428d1e:	2800      	cmp	r0, #0
  428d20:	f040 836b 	bne.w	4293fa <_vfiprintf_r+0xc7a>
  428d24:	4917      	ldr	r1, [pc, #92]	; (428d84 <_vfiprintf_r+0x604>)
  428d26:	910b      	str	r1, [sp, #44]	; 0x2c
  428d28:	e7d9      	b.n	428cde <_vfiprintf_r+0x55e>
  428d2a:	9907      	ldr	r1, [sp, #28]
  428d2c:	9608      	str	r6, [sp, #32]
  428d2e:	680a      	ldr	r2, [r1, #0]
  428d30:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  428d34:	f04f 0000 	mov.w	r0, #0
  428d38:	460a      	mov	r2, r1
  428d3a:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  428d3e:	3204      	adds	r2, #4
  428d40:	2001      	movs	r0, #1
  428d42:	9001      	str	r0, [sp, #4]
  428d44:	9207      	str	r2, [sp, #28]
  428d46:	9005      	str	r0, [sp, #20]
  428d48:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  428d4c:	9302      	str	r3, [sp, #8]
  428d4e:	2400      	movs	r4, #0
  428d50:	e670      	b.n	428a34 <_vfiprintf_r+0x2b4>
  428d52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  428d56:	f898 2000 	ldrb.w	r2, [r8]
  428d5a:	e583      	b.n	428864 <_vfiprintf_r+0xe4>
  428d5c:	f898 2000 	ldrb.w	r2, [r8]
  428d60:	2a6c      	cmp	r2, #108	; 0x6c
  428d62:	bf03      	ittte	eq
  428d64:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  428d68:	f043 0320 	orreq.w	r3, r3, #32
  428d6c:	f108 0801 	addeq.w	r8, r8, #1
  428d70:	f043 0310 	orrne.w	r3, r3, #16
  428d74:	e576      	b.n	428864 <_vfiprintf_r+0xe4>
  428d76:	bf00      	nop
  428d78:	00432010 	.word	0x00432010
  428d7c:	00432020 	.word	0x00432020
  428d80:	00431ff4 	.word	0x00431ff4
  428d84:	00431fe0 	.word	0x00431fe0
  428d88:	9907      	ldr	r1, [sp, #28]
  428d8a:	680e      	ldr	r6, [r1, #0]
  428d8c:	460a      	mov	r2, r1
  428d8e:	2e00      	cmp	r6, #0
  428d90:	f102 0204 	add.w	r2, r2, #4
  428d94:	f6ff ae0f 	blt.w	4289b6 <_vfiprintf_r+0x236>
  428d98:	9207      	str	r2, [sp, #28]
  428d9a:	f898 2000 	ldrb.w	r2, [r8]
  428d9e:	e561      	b.n	428864 <_vfiprintf_r+0xe4>
  428da0:	f898 2000 	ldrb.w	r2, [r8]
  428da4:	2001      	movs	r0, #1
  428da6:	252b      	movs	r5, #43	; 0x2b
  428da8:	e55c      	b.n	428864 <_vfiprintf_r+0xe4>
  428daa:	9907      	ldr	r1, [sp, #28]
  428dac:	9608      	str	r6, [sp, #32]
  428dae:	f8d1 b000 	ldr.w	fp, [r1]
  428db2:	f04f 0200 	mov.w	r2, #0
  428db6:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  428dba:	1d0e      	adds	r6, r1, #4
  428dbc:	f1bb 0f00 	cmp.w	fp, #0
  428dc0:	f000 82e5 	beq.w	42938e <_vfiprintf_r+0xc0e>
  428dc4:	1c67      	adds	r7, r4, #1
  428dc6:	f000 82c4 	beq.w	429352 <_vfiprintf_r+0xbd2>
  428dca:	4622      	mov	r2, r4
  428dcc:	2100      	movs	r1, #0
  428dce:	4658      	mov	r0, fp
  428dd0:	9301      	str	r3, [sp, #4]
  428dd2:	f001 f91d 	bl	42a010 <memchr>
  428dd6:	9b01      	ldr	r3, [sp, #4]
  428dd8:	2800      	cmp	r0, #0
  428dda:	f000 82e5 	beq.w	4293a8 <_vfiprintf_r+0xc28>
  428dde:	eba0 020b 	sub.w	r2, r0, fp
  428de2:	9205      	str	r2, [sp, #20]
  428de4:	9607      	str	r6, [sp, #28]
  428de6:	9302      	str	r3, [sp, #8]
  428de8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  428dec:	2400      	movs	r4, #0
  428dee:	e619      	b.n	428a24 <_vfiprintf_r+0x2a4>
  428df0:	f898 2000 	ldrb.w	r2, [r8]
  428df4:	2a2a      	cmp	r2, #42	; 0x2a
  428df6:	f108 0701 	add.w	r7, r8, #1
  428dfa:	f000 82e9 	beq.w	4293d0 <_vfiprintf_r+0xc50>
  428dfe:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  428e02:	2909      	cmp	r1, #9
  428e04:	46b8      	mov	r8, r7
  428e06:	f04f 0400 	mov.w	r4, #0
  428e0a:	f63f ad2d 	bhi.w	428868 <_vfiprintf_r+0xe8>
  428e0e:	f818 2b01 	ldrb.w	r2, [r8], #1
  428e12:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  428e16:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  428e1a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  428e1e:	2909      	cmp	r1, #9
  428e20:	d9f5      	bls.n	428e0e <_vfiprintf_r+0x68e>
  428e22:	e521      	b.n	428868 <_vfiprintf_r+0xe8>
  428e24:	f043 0320 	orr.w	r3, r3, #32
  428e28:	f898 2000 	ldrb.w	r2, [r8]
  428e2c:	e51a      	b.n	428864 <_vfiprintf_r+0xe4>
  428e2e:	9608      	str	r6, [sp, #32]
  428e30:	2800      	cmp	r0, #0
  428e32:	f040 82db 	bne.w	4293ec <_vfiprintf_r+0xc6c>
  428e36:	2a00      	cmp	r2, #0
  428e38:	f000 80e7 	beq.w	42900a <_vfiprintf_r+0x88a>
  428e3c:	2101      	movs	r1, #1
  428e3e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  428e42:	f04f 0200 	mov.w	r2, #0
  428e46:	9101      	str	r1, [sp, #4]
  428e48:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  428e4c:	9105      	str	r1, [sp, #20]
  428e4e:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  428e52:	e77b      	b.n	428d4c <_vfiprintf_r+0x5cc>
  428e54:	9a07      	ldr	r2, [sp, #28]
  428e56:	6813      	ldr	r3, [r2, #0]
  428e58:	3204      	adds	r2, #4
  428e5a:	9207      	str	r2, [sp, #28]
  428e5c:	9a03      	ldr	r2, [sp, #12]
  428e5e:	601a      	str	r2, [r3, #0]
  428e60:	e4cb      	b.n	4287fa <_vfiprintf_r+0x7a>
  428e62:	aa0f      	add	r2, sp, #60	; 0x3c
  428e64:	9904      	ldr	r1, [sp, #16]
  428e66:	4620      	mov	r0, r4
  428e68:	f7ff fc4a 	bl	428700 <__sprint_r.part.0>
  428e6c:	2800      	cmp	r0, #0
  428e6e:	f040 8139 	bne.w	4290e4 <_vfiprintf_r+0x964>
  428e72:	9910      	ldr	r1, [sp, #64]	; 0x40
  428e74:	9a11      	ldr	r2, [sp, #68]	; 0x44
  428e76:	f101 0c01 	add.w	ip, r1, #1
  428e7a:	46ce      	mov	lr, r9
  428e7c:	e5ff      	b.n	428a7e <_vfiprintf_r+0x2fe>
  428e7e:	9910      	ldr	r1, [sp, #64]	; 0x40
  428e80:	9a11      	ldr	r2, [sp, #68]	; 0x44
  428e82:	1c48      	adds	r0, r1, #1
  428e84:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  428e88:	2d00      	cmp	r5, #0
  428e8a:	f43f ae22 	beq.w	428ad2 <_vfiprintf_r+0x352>
  428e8e:	3201      	adds	r2, #1
  428e90:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  428e94:	2101      	movs	r1, #1
  428e96:	2807      	cmp	r0, #7
  428e98:	9211      	str	r2, [sp, #68]	; 0x44
  428e9a:	9010      	str	r0, [sp, #64]	; 0x40
  428e9c:	f8ca 5000 	str.w	r5, [sl]
  428ea0:	f8ca 1004 	str.w	r1, [sl, #4]
  428ea4:	f340 8108 	ble.w	4290b8 <_vfiprintf_r+0x938>
  428ea8:	2a00      	cmp	r2, #0
  428eaa:	f040 81bc 	bne.w	429226 <_vfiprintf_r+0xaa6>
  428eae:	9b09      	ldr	r3, [sp, #36]	; 0x24
  428eb0:	2b00      	cmp	r3, #0
  428eb2:	f43f ae1f 	beq.w	428af4 <_vfiprintf_r+0x374>
  428eb6:	ab0e      	add	r3, sp, #56	; 0x38
  428eb8:	2202      	movs	r2, #2
  428eba:	4608      	mov	r0, r1
  428ebc:	931c      	str	r3, [sp, #112]	; 0x70
  428ebe:	921d      	str	r2, [sp, #116]	; 0x74
  428ec0:	46ca      	mov	sl, r9
  428ec2:	4601      	mov	r1, r0
  428ec4:	f10a 0a08 	add.w	sl, sl, #8
  428ec8:	3001      	adds	r0, #1
  428eca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  428ecc:	2b80      	cmp	r3, #128	; 0x80
  428ece:	f43f ae19 	beq.w	428b04 <_vfiprintf_r+0x384>
  428ed2:	9b05      	ldr	r3, [sp, #20]
  428ed4:	1ae4      	subs	r4, r4, r3
  428ed6:	2c00      	cmp	r4, #0
  428ed8:	dd2e      	ble.n	428f38 <_vfiprintf_r+0x7b8>
  428eda:	2c10      	cmp	r4, #16
  428edc:	4db3      	ldr	r5, [pc, #716]	; (4291ac <_vfiprintf_r+0xa2c>)
  428ede:	dd1e      	ble.n	428f1e <_vfiprintf_r+0x79e>
  428ee0:	46d6      	mov	lr, sl
  428ee2:	2610      	movs	r6, #16
  428ee4:	9f06      	ldr	r7, [sp, #24]
  428ee6:	f8dd a010 	ldr.w	sl, [sp, #16]
  428eea:	e006      	b.n	428efa <_vfiprintf_r+0x77a>
  428eec:	1c88      	adds	r0, r1, #2
  428eee:	f10e 0e08 	add.w	lr, lr, #8
  428ef2:	4619      	mov	r1, r3
  428ef4:	3c10      	subs	r4, #16
  428ef6:	2c10      	cmp	r4, #16
  428ef8:	dd10      	ble.n	428f1c <_vfiprintf_r+0x79c>
  428efa:	1c4b      	adds	r3, r1, #1
  428efc:	3210      	adds	r2, #16
  428efe:	2b07      	cmp	r3, #7
  428f00:	9211      	str	r2, [sp, #68]	; 0x44
  428f02:	e88e 0060 	stmia.w	lr, {r5, r6}
  428f06:	9310      	str	r3, [sp, #64]	; 0x40
  428f08:	ddf0      	ble.n	428eec <_vfiprintf_r+0x76c>
  428f0a:	2a00      	cmp	r2, #0
  428f0c:	d165      	bne.n	428fda <_vfiprintf_r+0x85a>
  428f0e:	3c10      	subs	r4, #16
  428f10:	2c10      	cmp	r4, #16
  428f12:	f04f 0001 	mov.w	r0, #1
  428f16:	4611      	mov	r1, r2
  428f18:	46ce      	mov	lr, r9
  428f1a:	dcee      	bgt.n	428efa <_vfiprintf_r+0x77a>
  428f1c:	46f2      	mov	sl, lr
  428f1e:	4422      	add	r2, r4
  428f20:	2807      	cmp	r0, #7
  428f22:	9211      	str	r2, [sp, #68]	; 0x44
  428f24:	f8ca 5000 	str.w	r5, [sl]
  428f28:	f8ca 4004 	str.w	r4, [sl, #4]
  428f2c:	9010      	str	r0, [sp, #64]	; 0x40
  428f2e:	f300 8085 	bgt.w	42903c <_vfiprintf_r+0x8bc>
  428f32:	f10a 0a08 	add.w	sl, sl, #8
  428f36:	3001      	adds	r0, #1
  428f38:	9905      	ldr	r1, [sp, #20]
  428f3a:	f8ca b000 	str.w	fp, [sl]
  428f3e:	440a      	add	r2, r1
  428f40:	2807      	cmp	r0, #7
  428f42:	9211      	str	r2, [sp, #68]	; 0x44
  428f44:	f8ca 1004 	str.w	r1, [sl, #4]
  428f48:	9010      	str	r0, [sp, #64]	; 0x40
  428f4a:	f340 8082 	ble.w	429052 <_vfiprintf_r+0x8d2>
  428f4e:	2a00      	cmp	r2, #0
  428f50:	f040 8118 	bne.w	429184 <_vfiprintf_r+0xa04>
  428f54:	9b02      	ldr	r3, [sp, #8]
  428f56:	9210      	str	r2, [sp, #64]	; 0x40
  428f58:	0758      	lsls	r0, r3, #29
  428f5a:	d535      	bpl.n	428fc8 <_vfiprintf_r+0x848>
  428f5c:	9b08      	ldr	r3, [sp, #32]
  428f5e:	9901      	ldr	r1, [sp, #4]
  428f60:	1a5c      	subs	r4, r3, r1
  428f62:	2c00      	cmp	r4, #0
  428f64:	f340 80e7 	ble.w	429136 <_vfiprintf_r+0x9b6>
  428f68:	46ca      	mov	sl, r9
  428f6a:	2c10      	cmp	r4, #16
  428f6c:	f340 8218 	ble.w	4293a0 <_vfiprintf_r+0xc20>
  428f70:	9910      	ldr	r1, [sp, #64]	; 0x40
  428f72:	4e8f      	ldr	r6, [pc, #572]	; (4291b0 <_vfiprintf_r+0xa30>)
  428f74:	9f06      	ldr	r7, [sp, #24]
  428f76:	f8dd b010 	ldr.w	fp, [sp, #16]
  428f7a:	2510      	movs	r5, #16
  428f7c:	e006      	b.n	428f8c <_vfiprintf_r+0x80c>
  428f7e:	1c88      	adds	r0, r1, #2
  428f80:	f10a 0a08 	add.w	sl, sl, #8
  428f84:	4619      	mov	r1, r3
  428f86:	3c10      	subs	r4, #16
  428f88:	2c10      	cmp	r4, #16
  428f8a:	dd11      	ble.n	428fb0 <_vfiprintf_r+0x830>
  428f8c:	1c4b      	adds	r3, r1, #1
  428f8e:	3210      	adds	r2, #16
  428f90:	2b07      	cmp	r3, #7
  428f92:	9211      	str	r2, [sp, #68]	; 0x44
  428f94:	f8ca 6000 	str.w	r6, [sl]
  428f98:	f8ca 5004 	str.w	r5, [sl, #4]
  428f9c:	9310      	str	r3, [sp, #64]	; 0x40
  428f9e:	ddee      	ble.n	428f7e <_vfiprintf_r+0x7fe>
  428fa0:	bb42      	cbnz	r2, 428ff4 <_vfiprintf_r+0x874>
  428fa2:	3c10      	subs	r4, #16
  428fa4:	2c10      	cmp	r4, #16
  428fa6:	f04f 0001 	mov.w	r0, #1
  428faa:	4611      	mov	r1, r2
  428fac:	46ca      	mov	sl, r9
  428fae:	dced      	bgt.n	428f8c <_vfiprintf_r+0x80c>
  428fb0:	4422      	add	r2, r4
  428fb2:	2807      	cmp	r0, #7
  428fb4:	9211      	str	r2, [sp, #68]	; 0x44
  428fb6:	f8ca 6000 	str.w	r6, [sl]
  428fba:	f8ca 4004 	str.w	r4, [sl, #4]
  428fbe:	9010      	str	r0, [sp, #64]	; 0x40
  428fc0:	dd51      	ble.n	429066 <_vfiprintf_r+0x8e6>
  428fc2:	2a00      	cmp	r2, #0
  428fc4:	f040 819b 	bne.w	4292fe <_vfiprintf_r+0xb7e>
  428fc8:	9b03      	ldr	r3, [sp, #12]
  428fca:	9a08      	ldr	r2, [sp, #32]
  428fcc:	9901      	ldr	r1, [sp, #4]
  428fce:	428a      	cmp	r2, r1
  428fd0:	bfac      	ite	ge
  428fd2:	189b      	addge	r3, r3, r2
  428fd4:	185b      	addlt	r3, r3, r1
  428fd6:	9303      	str	r3, [sp, #12]
  428fd8:	e04e      	b.n	429078 <_vfiprintf_r+0x8f8>
  428fda:	aa0f      	add	r2, sp, #60	; 0x3c
  428fdc:	4651      	mov	r1, sl
  428fde:	4638      	mov	r0, r7
  428fe0:	f7ff fb8e 	bl	428700 <__sprint_r.part.0>
  428fe4:	2800      	cmp	r0, #0
  428fe6:	f040 813f 	bne.w	429268 <_vfiprintf_r+0xae8>
  428fea:	9910      	ldr	r1, [sp, #64]	; 0x40
  428fec:	9a11      	ldr	r2, [sp, #68]	; 0x44
  428fee:	1c48      	adds	r0, r1, #1
  428ff0:	46ce      	mov	lr, r9
  428ff2:	e77f      	b.n	428ef4 <_vfiprintf_r+0x774>
  428ff4:	aa0f      	add	r2, sp, #60	; 0x3c
  428ff6:	4659      	mov	r1, fp
  428ff8:	4638      	mov	r0, r7
  428ffa:	f7ff fb81 	bl	428700 <__sprint_r.part.0>
  428ffe:	b960      	cbnz	r0, 42901a <_vfiprintf_r+0x89a>
  429000:	9910      	ldr	r1, [sp, #64]	; 0x40
  429002:	9a11      	ldr	r2, [sp, #68]	; 0x44
  429004:	1c48      	adds	r0, r1, #1
  429006:	46ca      	mov	sl, r9
  429008:	e7bd      	b.n	428f86 <_vfiprintf_r+0x806>
  42900a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  42900c:	f8dd b010 	ldr.w	fp, [sp, #16]
  429010:	2b00      	cmp	r3, #0
  429012:	f040 81d4 	bne.w	4293be <_vfiprintf_r+0xc3e>
  429016:	2300      	movs	r3, #0
  429018:	9310      	str	r3, [sp, #64]	; 0x40
  42901a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  42901e:	f013 0f01 	tst.w	r3, #1
  429022:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  429026:	d102      	bne.n	42902e <_vfiprintf_r+0x8ae>
  429028:	059a      	lsls	r2, r3, #22
  42902a:	f140 80de 	bpl.w	4291ea <_vfiprintf_r+0xa6a>
  42902e:	065b      	lsls	r3, r3, #25
  429030:	f53f acb2 	bmi.w	428998 <_vfiprintf_r+0x218>
  429034:	9803      	ldr	r0, [sp, #12]
  429036:	b02d      	add	sp, #180	; 0xb4
  429038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42903c:	2a00      	cmp	r2, #0
  42903e:	f040 8106 	bne.w	42924e <_vfiprintf_r+0xace>
  429042:	9a05      	ldr	r2, [sp, #20]
  429044:	921d      	str	r2, [sp, #116]	; 0x74
  429046:	2301      	movs	r3, #1
  429048:	9211      	str	r2, [sp, #68]	; 0x44
  42904a:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  42904e:	9310      	str	r3, [sp, #64]	; 0x40
  429050:	46ca      	mov	sl, r9
  429052:	f10a 0a08 	add.w	sl, sl, #8
  429056:	9b02      	ldr	r3, [sp, #8]
  429058:	0759      	lsls	r1, r3, #29
  42905a:	d504      	bpl.n	429066 <_vfiprintf_r+0x8e6>
  42905c:	9b08      	ldr	r3, [sp, #32]
  42905e:	9901      	ldr	r1, [sp, #4]
  429060:	1a5c      	subs	r4, r3, r1
  429062:	2c00      	cmp	r4, #0
  429064:	dc81      	bgt.n	428f6a <_vfiprintf_r+0x7ea>
  429066:	9b03      	ldr	r3, [sp, #12]
  429068:	9908      	ldr	r1, [sp, #32]
  42906a:	9801      	ldr	r0, [sp, #4]
  42906c:	4281      	cmp	r1, r0
  42906e:	bfac      	ite	ge
  429070:	185b      	addge	r3, r3, r1
  429072:	181b      	addlt	r3, r3, r0
  429074:	9303      	str	r3, [sp, #12]
  429076:	bb72      	cbnz	r2, 4290d6 <_vfiprintf_r+0x956>
  429078:	2300      	movs	r3, #0
  42907a:	9310      	str	r3, [sp, #64]	; 0x40
  42907c:	46ca      	mov	sl, r9
  42907e:	f7ff bbbc 	b.w	4287fa <_vfiprintf_r+0x7a>
  429082:	aa0f      	add	r2, sp, #60	; 0x3c
  429084:	9904      	ldr	r1, [sp, #16]
  429086:	4620      	mov	r0, r4
  429088:	f7ff fb3a 	bl	428700 <__sprint_r.part.0>
  42908c:	bb50      	cbnz	r0, 4290e4 <_vfiprintf_r+0x964>
  42908e:	9910      	ldr	r1, [sp, #64]	; 0x40
  429090:	9a11      	ldr	r2, [sp, #68]	; 0x44
  429092:	f101 0e01 	add.w	lr, r1, #1
  429096:	46cc      	mov	ip, r9
  429098:	e548      	b.n	428b2c <_vfiprintf_r+0x3ac>
  42909a:	2a00      	cmp	r2, #0
  42909c:	f040 8140 	bne.w	429320 <_vfiprintf_r+0xba0>
  4290a0:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  4290a4:	2900      	cmp	r1, #0
  4290a6:	f000 811b 	beq.w	4292e0 <_vfiprintf_r+0xb60>
  4290aa:	2201      	movs	r2, #1
  4290ac:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  4290b0:	4610      	mov	r0, r2
  4290b2:	921d      	str	r2, [sp, #116]	; 0x74
  4290b4:	911c      	str	r1, [sp, #112]	; 0x70
  4290b6:	46ca      	mov	sl, r9
  4290b8:	4601      	mov	r1, r0
  4290ba:	f10a 0a08 	add.w	sl, sl, #8
  4290be:	3001      	adds	r0, #1
  4290c0:	e507      	b.n	428ad2 <_vfiprintf_r+0x352>
  4290c2:	9b02      	ldr	r3, [sp, #8]
  4290c4:	2a01      	cmp	r2, #1
  4290c6:	f000 8098 	beq.w	4291fa <_vfiprintf_r+0xa7a>
  4290ca:	2a02      	cmp	r2, #2
  4290cc:	d10d      	bne.n	4290ea <_vfiprintf_r+0x96a>
  4290ce:	9302      	str	r3, [sp, #8]
  4290d0:	2600      	movs	r6, #0
  4290d2:	2700      	movs	r7, #0
  4290d4:	e5b0      	b.n	428c38 <_vfiprintf_r+0x4b8>
  4290d6:	aa0f      	add	r2, sp, #60	; 0x3c
  4290d8:	9904      	ldr	r1, [sp, #16]
  4290da:	9806      	ldr	r0, [sp, #24]
  4290dc:	f7ff fb10 	bl	428700 <__sprint_r.part.0>
  4290e0:	2800      	cmp	r0, #0
  4290e2:	d0c9      	beq.n	429078 <_vfiprintf_r+0x8f8>
  4290e4:	f8dd b010 	ldr.w	fp, [sp, #16]
  4290e8:	e797      	b.n	42901a <_vfiprintf_r+0x89a>
  4290ea:	9302      	str	r3, [sp, #8]
  4290ec:	2600      	movs	r6, #0
  4290ee:	2700      	movs	r7, #0
  4290f0:	4649      	mov	r1, r9
  4290f2:	e000      	b.n	4290f6 <_vfiprintf_r+0x976>
  4290f4:	4659      	mov	r1, fp
  4290f6:	08f2      	lsrs	r2, r6, #3
  4290f8:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  4290fc:	08f8      	lsrs	r0, r7, #3
  4290fe:	f006 0307 	and.w	r3, r6, #7
  429102:	4607      	mov	r7, r0
  429104:	4616      	mov	r6, r2
  429106:	3330      	adds	r3, #48	; 0x30
  429108:	ea56 0207 	orrs.w	r2, r6, r7
  42910c:	f801 3c01 	strb.w	r3, [r1, #-1]
  429110:	f101 3bff 	add.w	fp, r1, #4294967295
  429114:	d1ee      	bne.n	4290f4 <_vfiprintf_r+0x974>
  429116:	9a02      	ldr	r2, [sp, #8]
  429118:	07d6      	lsls	r6, r2, #31
  42911a:	f57f ad9d 	bpl.w	428c58 <_vfiprintf_r+0x4d8>
  42911e:	2b30      	cmp	r3, #48	; 0x30
  429120:	f43f ad9a 	beq.w	428c58 <_vfiprintf_r+0x4d8>
  429124:	3902      	subs	r1, #2
  429126:	2330      	movs	r3, #48	; 0x30
  429128:	f80b 3c01 	strb.w	r3, [fp, #-1]
  42912c:	eba9 0301 	sub.w	r3, r9, r1
  429130:	9305      	str	r3, [sp, #20]
  429132:	468b      	mov	fp, r1
  429134:	e476      	b.n	428a24 <_vfiprintf_r+0x2a4>
  429136:	9b03      	ldr	r3, [sp, #12]
  429138:	9a08      	ldr	r2, [sp, #32]
  42913a:	428a      	cmp	r2, r1
  42913c:	bfac      	ite	ge
  42913e:	189b      	addge	r3, r3, r2
  429140:	185b      	addlt	r3, r3, r1
  429142:	9303      	str	r3, [sp, #12]
  429144:	e798      	b.n	429078 <_vfiprintf_r+0x8f8>
  429146:	2202      	movs	r2, #2
  429148:	e44d      	b.n	4289e6 <_vfiprintf_r+0x266>
  42914a:	2f00      	cmp	r7, #0
  42914c:	bf08      	it	eq
  42914e:	2e0a      	cmpeq	r6, #10
  429150:	d352      	bcc.n	4291f8 <_vfiprintf_r+0xa78>
  429152:	46cb      	mov	fp, r9
  429154:	4630      	mov	r0, r6
  429156:	4639      	mov	r1, r7
  429158:	220a      	movs	r2, #10
  42915a:	2300      	movs	r3, #0
  42915c:	f7fe f9be 	bl	4274dc <__aeabi_uldivmod>
  429160:	3230      	adds	r2, #48	; 0x30
  429162:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  429166:	4630      	mov	r0, r6
  429168:	4639      	mov	r1, r7
  42916a:	2300      	movs	r3, #0
  42916c:	220a      	movs	r2, #10
  42916e:	f7fe f9b5 	bl	4274dc <__aeabi_uldivmod>
  429172:	4606      	mov	r6, r0
  429174:	460f      	mov	r7, r1
  429176:	ea56 0307 	orrs.w	r3, r6, r7
  42917a:	d1eb      	bne.n	429154 <_vfiprintf_r+0x9d4>
  42917c:	e56c      	b.n	428c58 <_vfiprintf_r+0x4d8>
  42917e:	9405      	str	r4, [sp, #20]
  429180:	46cb      	mov	fp, r9
  429182:	e44f      	b.n	428a24 <_vfiprintf_r+0x2a4>
  429184:	aa0f      	add	r2, sp, #60	; 0x3c
  429186:	9904      	ldr	r1, [sp, #16]
  429188:	9806      	ldr	r0, [sp, #24]
  42918a:	f7ff fab9 	bl	428700 <__sprint_r.part.0>
  42918e:	2800      	cmp	r0, #0
  429190:	d1a8      	bne.n	4290e4 <_vfiprintf_r+0x964>
  429192:	9a11      	ldr	r2, [sp, #68]	; 0x44
  429194:	46ca      	mov	sl, r9
  429196:	e75e      	b.n	429056 <_vfiprintf_r+0x8d6>
  429198:	aa0f      	add	r2, sp, #60	; 0x3c
  42919a:	9904      	ldr	r1, [sp, #16]
  42919c:	9806      	ldr	r0, [sp, #24]
  42919e:	f7ff faaf 	bl	428700 <__sprint_r.part.0>
  4291a2:	2800      	cmp	r0, #0
  4291a4:	d19e      	bne.n	4290e4 <_vfiprintf_r+0x964>
  4291a6:	46ca      	mov	sl, r9
  4291a8:	f7ff bbc0 	b.w	42892c <_vfiprintf_r+0x1ac>
  4291ac:	00432020 	.word	0x00432020
  4291b0:	00432010 	.word	0x00432010
  4291b4:	3104      	adds	r1, #4
  4291b6:	6816      	ldr	r6, [r2, #0]
  4291b8:	9107      	str	r1, [sp, #28]
  4291ba:	2201      	movs	r2, #1
  4291bc:	2700      	movs	r7, #0
  4291be:	e412      	b.n	4289e6 <_vfiprintf_r+0x266>
  4291c0:	9807      	ldr	r0, [sp, #28]
  4291c2:	4601      	mov	r1, r0
  4291c4:	3104      	adds	r1, #4
  4291c6:	6806      	ldr	r6, [r0, #0]
  4291c8:	9107      	str	r1, [sp, #28]
  4291ca:	2700      	movs	r7, #0
  4291cc:	e40b      	b.n	4289e6 <_vfiprintf_r+0x266>
  4291ce:	680e      	ldr	r6, [r1, #0]
  4291d0:	3104      	adds	r1, #4
  4291d2:	9107      	str	r1, [sp, #28]
  4291d4:	2700      	movs	r7, #0
  4291d6:	e591      	b.n	428cfc <_vfiprintf_r+0x57c>
  4291d8:	9907      	ldr	r1, [sp, #28]
  4291da:	680e      	ldr	r6, [r1, #0]
  4291dc:	460a      	mov	r2, r1
  4291de:	17f7      	asrs	r7, r6, #31
  4291e0:	3204      	adds	r2, #4
  4291e2:	9207      	str	r2, [sp, #28]
  4291e4:	4630      	mov	r0, r6
  4291e6:	4639      	mov	r1, r7
  4291e8:	e50f      	b.n	428c0a <_vfiprintf_r+0x48a>
  4291ea:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4291ee:	f000 fe7f 	bl	429ef0 <__retarget_lock_release_recursive>
  4291f2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4291f6:	e71a      	b.n	42902e <_vfiprintf_r+0x8ae>
  4291f8:	9b02      	ldr	r3, [sp, #8]
  4291fa:	9302      	str	r3, [sp, #8]
  4291fc:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  429200:	3630      	adds	r6, #48	; 0x30
  429202:	2301      	movs	r3, #1
  429204:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  429208:	9305      	str	r3, [sp, #20]
  42920a:	e40b      	b.n	428a24 <_vfiprintf_r+0x2a4>
  42920c:	aa0f      	add	r2, sp, #60	; 0x3c
  42920e:	9904      	ldr	r1, [sp, #16]
  429210:	9806      	ldr	r0, [sp, #24]
  429212:	f7ff fa75 	bl	428700 <__sprint_r.part.0>
  429216:	2800      	cmp	r0, #0
  429218:	f47f af64 	bne.w	4290e4 <_vfiprintf_r+0x964>
  42921c:	9910      	ldr	r1, [sp, #64]	; 0x40
  42921e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  429220:	1c48      	adds	r0, r1, #1
  429222:	46ca      	mov	sl, r9
  429224:	e651      	b.n	428eca <_vfiprintf_r+0x74a>
  429226:	aa0f      	add	r2, sp, #60	; 0x3c
  429228:	9904      	ldr	r1, [sp, #16]
  42922a:	9806      	ldr	r0, [sp, #24]
  42922c:	f7ff fa68 	bl	428700 <__sprint_r.part.0>
  429230:	2800      	cmp	r0, #0
  429232:	f47f af57 	bne.w	4290e4 <_vfiprintf_r+0x964>
  429236:	9910      	ldr	r1, [sp, #64]	; 0x40
  429238:	9a11      	ldr	r2, [sp, #68]	; 0x44
  42923a:	1c48      	adds	r0, r1, #1
  42923c:	46ca      	mov	sl, r9
  42923e:	e448      	b.n	428ad2 <_vfiprintf_r+0x352>
  429240:	2a00      	cmp	r2, #0
  429242:	f040 8091 	bne.w	429368 <_vfiprintf_r+0xbe8>
  429246:	2001      	movs	r0, #1
  429248:	4611      	mov	r1, r2
  42924a:	46ca      	mov	sl, r9
  42924c:	e641      	b.n	428ed2 <_vfiprintf_r+0x752>
  42924e:	aa0f      	add	r2, sp, #60	; 0x3c
  429250:	9904      	ldr	r1, [sp, #16]
  429252:	9806      	ldr	r0, [sp, #24]
  429254:	f7ff fa54 	bl	428700 <__sprint_r.part.0>
  429258:	2800      	cmp	r0, #0
  42925a:	f47f af43 	bne.w	4290e4 <_vfiprintf_r+0x964>
  42925e:	9810      	ldr	r0, [sp, #64]	; 0x40
  429260:	9a11      	ldr	r2, [sp, #68]	; 0x44
  429262:	3001      	adds	r0, #1
  429264:	46ca      	mov	sl, r9
  429266:	e667      	b.n	428f38 <_vfiprintf_r+0x7b8>
  429268:	46d3      	mov	fp, sl
  42926a:	e6d6      	b.n	42901a <_vfiprintf_r+0x89a>
  42926c:	9e07      	ldr	r6, [sp, #28]
  42926e:	3607      	adds	r6, #7
  429270:	f026 0207 	bic.w	r2, r6, #7
  429274:	f102 0108 	add.w	r1, r2, #8
  429278:	e9d2 6700 	ldrd	r6, r7, [r2]
  42927c:	9107      	str	r1, [sp, #28]
  42927e:	2201      	movs	r2, #1
  429280:	f7ff bbb1 	b.w	4289e6 <_vfiprintf_r+0x266>
  429284:	9e07      	ldr	r6, [sp, #28]
  429286:	3607      	adds	r6, #7
  429288:	f026 0607 	bic.w	r6, r6, #7
  42928c:	e9d6 0100 	ldrd	r0, r1, [r6]
  429290:	f106 0208 	add.w	r2, r6, #8
  429294:	9207      	str	r2, [sp, #28]
  429296:	4606      	mov	r6, r0
  429298:	460f      	mov	r7, r1
  42929a:	e4b6      	b.n	428c0a <_vfiprintf_r+0x48a>
  42929c:	9e07      	ldr	r6, [sp, #28]
  42929e:	3607      	adds	r6, #7
  4292a0:	f026 0207 	bic.w	r2, r6, #7
  4292a4:	f102 0108 	add.w	r1, r2, #8
  4292a8:	e9d2 6700 	ldrd	r6, r7, [r2]
  4292ac:	9107      	str	r1, [sp, #28]
  4292ae:	2200      	movs	r2, #0
  4292b0:	f7ff bb99 	b.w	4289e6 <_vfiprintf_r+0x266>
  4292b4:	9e07      	ldr	r6, [sp, #28]
  4292b6:	3607      	adds	r6, #7
  4292b8:	f026 0107 	bic.w	r1, r6, #7
  4292bc:	f101 0008 	add.w	r0, r1, #8
  4292c0:	9007      	str	r0, [sp, #28]
  4292c2:	e9d1 6700 	ldrd	r6, r7, [r1]
  4292c6:	e519      	b.n	428cfc <_vfiprintf_r+0x57c>
  4292c8:	46cb      	mov	fp, r9
  4292ca:	f7ff bbab 	b.w	428a24 <_vfiprintf_r+0x2a4>
  4292ce:	252d      	movs	r5, #45	; 0x2d
  4292d0:	4276      	negs	r6, r6
  4292d2:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  4292d6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4292da:	2201      	movs	r2, #1
  4292dc:	f7ff bb88 	b.w	4289f0 <_vfiprintf_r+0x270>
  4292e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4292e2:	b9b3      	cbnz	r3, 429312 <_vfiprintf_r+0xb92>
  4292e4:	4611      	mov	r1, r2
  4292e6:	2001      	movs	r0, #1
  4292e8:	46ca      	mov	sl, r9
  4292ea:	e5f2      	b.n	428ed2 <_vfiprintf_r+0x752>
  4292ec:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4292f0:	f000 fdfe 	bl	429ef0 <__retarget_lock_release_recursive>
  4292f4:	f04f 33ff 	mov.w	r3, #4294967295
  4292f8:	9303      	str	r3, [sp, #12]
  4292fa:	f7ff bb50 	b.w	42899e <_vfiprintf_r+0x21e>
  4292fe:	aa0f      	add	r2, sp, #60	; 0x3c
  429300:	9904      	ldr	r1, [sp, #16]
  429302:	9806      	ldr	r0, [sp, #24]
  429304:	f7ff f9fc 	bl	428700 <__sprint_r.part.0>
  429308:	2800      	cmp	r0, #0
  42930a:	f47f aeeb 	bne.w	4290e4 <_vfiprintf_r+0x964>
  42930e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  429310:	e6a9      	b.n	429066 <_vfiprintf_r+0x8e6>
  429312:	ab0e      	add	r3, sp, #56	; 0x38
  429314:	2202      	movs	r2, #2
  429316:	931c      	str	r3, [sp, #112]	; 0x70
  429318:	921d      	str	r2, [sp, #116]	; 0x74
  42931a:	2001      	movs	r0, #1
  42931c:	46ca      	mov	sl, r9
  42931e:	e5d0      	b.n	428ec2 <_vfiprintf_r+0x742>
  429320:	aa0f      	add	r2, sp, #60	; 0x3c
  429322:	9904      	ldr	r1, [sp, #16]
  429324:	9806      	ldr	r0, [sp, #24]
  429326:	f7ff f9eb 	bl	428700 <__sprint_r.part.0>
  42932a:	2800      	cmp	r0, #0
  42932c:	f47f aeda 	bne.w	4290e4 <_vfiprintf_r+0x964>
  429330:	9910      	ldr	r1, [sp, #64]	; 0x40
  429332:	9a11      	ldr	r2, [sp, #68]	; 0x44
  429334:	1c48      	adds	r0, r1, #1
  429336:	46ca      	mov	sl, r9
  429338:	e5a4      	b.n	428e84 <_vfiprintf_r+0x704>
  42933a:	9a07      	ldr	r2, [sp, #28]
  42933c:	9903      	ldr	r1, [sp, #12]
  42933e:	6813      	ldr	r3, [r2, #0]
  429340:	17cd      	asrs	r5, r1, #31
  429342:	4608      	mov	r0, r1
  429344:	3204      	adds	r2, #4
  429346:	4629      	mov	r1, r5
  429348:	9207      	str	r2, [sp, #28]
  42934a:	e9c3 0100 	strd	r0, r1, [r3]
  42934e:	f7ff ba54 	b.w	4287fa <_vfiprintf_r+0x7a>
  429352:	4658      	mov	r0, fp
  429354:	9607      	str	r6, [sp, #28]
  429356:	9302      	str	r3, [sp, #8]
  429358:	f7ff f932 	bl	4285c0 <strlen>
  42935c:	2400      	movs	r4, #0
  42935e:	9005      	str	r0, [sp, #20]
  429360:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  429364:	f7ff bb5e 	b.w	428a24 <_vfiprintf_r+0x2a4>
  429368:	aa0f      	add	r2, sp, #60	; 0x3c
  42936a:	9904      	ldr	r1, [sp, #16]
  42936c:	9806      	ldr	r0, [sp, #24]
  42936e:	f7ff f9c7 	bl	428700 <__sprint_r.part.0>
  429372:	2800      	cmp	r0, #0
  429374:	f47f aeb6 	bne.w	4290e4 <_vfiprintf_r+0x964>
  429378:	9910      	ldr	r1, [sp, #64]	; 0x40
  42937a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  42937c:	1c48      	adds	r0, r1, #1
  42937e:	46ca      	mov	sl, r9
  429380:	e5a7      	b.n	428ed2 <_vfiprintf_r+0x752>
  429382:	9910      	ldr	r1, [sp, #64]	; 0x40
  429384:	9a11      	ldr	r2, [sp, #68]	; 0x44
  429386:	4e20      	ldr	r6, [pc, #128]	; (429408 <_vfiprintf_r+0xc88>)
  429388:	3101      	adds	r1, #1
  42938a:	f7ff bb90 	b.w	428aae <_vfiprintf_r+0x32e>
  42938e:	2c06      	cmp	r4, #6
  429390:	bf28      	it	cs
  429392:	2406      	movcs	r4, #6
  429394:	9405      	str	r4, [sp, #20]
  429396:	9607      	str	r6, [sp, #28]
  429398:	9401      	str	r4, [sp, #4]
  42939a:	f8df b070 	ldr.w	fp, [pc, #112]	; 42940c <_vfiprintf_r+0xc8c>
  42939e:	e4d5      	b.n	428d4c <_vfiprintf_r+0x5cc>
  4293a0:	9810      	ldr	r0, [sp, #64]	; 0x40
  4293a2:	4e19      	ldr	r6, [pc, #100]	; (429408 <_vfiprintf_r+0xc88>)
  4293a4:	3001      	adds	r0, #1
  4293a6:	e603      	b.n	428fb0 <_vfiprintf_r+0x830>
  4293a8:	9405      	str	r4, [sp, #20]
  4293aa:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4293ae:	9607      	str	r6, [sp, #28]
  4293b0:	9302      	str	r3, [sp, #8]
  4293b2:	4604      	mov	r4, r0
  4293b4:	f7ff bb36 	b.w	428a24 <_vfiprintf_r+0x2a4>
  4293b8:	4686      	mov	lr, r0
  4293ba:	f7ff bbce 	b.w	428b5a <_vfiprintf_r+0x3da>
  4293be:	9806      	ldr	r0, [sp, #24]
  4293c0:	aa0f      	add	r2, sp, #60	; 0x3c
  4293c2:	4659      	mov	r1, fp
  4293c4:	f7ff f99c 	bl	428700 <__sprint_r.part.0>
  4293c8:	2800      	cmp	r0, #0
  4293ca:	f43f ae24 	beq.w	429016 <_vfiprintf_r+0x896>
  4293ce:	e624      	b.n	42901a <_vfiprintf_r+0x89a>
  4293d0:	9907      	ldr	r1, [sp, #28]
  4293d2:	f898 2001 	ldrb.w	r2, [r8, #1]
  4293d6:	680c      	ldr	r4, [r1, #0]
  4293d8:	3104      	adds	r1, #4
  4293da:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  4293de:	46b8      	mov	r8, r7
  4293e0:	9107      	str	r1, [sp, #28]
  4293e2:	f7ff ba3f 	b.w	428864 <_vfiprintf_r+0xe4>
  4293e6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4293ea:	e43c      	b.n	428c66 <_vfiprintf_r+0x4e6>
  4293ec:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4293f0:	e521      	b.n	428e36 <_vfiprintf_r+0x6b6>
  4293f2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4293f6:	f7ff bbf4 	b.w	428be2 <_vfiprintf_r+0x462>
  4293fa:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4293fe:	e491      	b.n	428d24 <_vfiprintf_r+0x5a4>
  429400:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  429404:	e469      	b.n	428cda <_vfiprintf_r+0x55a>
  429406:	bf00      	nop
  429408:	00432010 	.word	0x00432010
  42940c:	00432008 	.word	0x00432008

00429410 <__sbprintf>:
  429410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  429414:	460c      	mov	r4, r1
  429416:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  42941a:	8989      	ldrh	r1, [r1, #12]
  42941c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  42941e:	89e5      	ldrh	r5, [r4, #14]
  429420:	9619      	str	r6, [sp, #100]	; 0x64
  429422:	f021 0102 	bic.w	r1, r1, #2
  429426:	4606      	mov	r6, r0
  429428:	69e0      	ldr	r0, [r4, #28]
  42942a:	f8ad 100c 	strh.w	r1, [sp, #12]
  42942e:	4617      	mov	r7, r2
  429430:	f44f 6180 	mov.w	r1, #1024	; 0x400
  429434:	6a62      	ldr	r2, [r4, #36]	; 0x24
  429436:	f8ad 500e 	strh.w	r5, [sp, #14]
  42943a:	4698      	mov	r8, r3
  42943c:	ad1a      	add	r5, sp, #104	; 0x68
  42943e:	2300      	movs	r3, #0
  429440:	9007      	str	r0, [sp, #28]
  429442:	a816      	add	r0, sp, #88	; 0x58
  429444:	9209      	str	r2, [sp, #36]	; 0x24
  429446:	9306      	str	r3, [sp, #24]
  429448:	9500      	str	r5, [sp, #0]
  42944a:	9504      	str	r5, [sp, #16]
  42944c:	9102      	str	r1, [sp, #8]
  42944e:	9105      	str	r1, [sp, #20]
  429450:	f000 fd48 	bl	429ee4 <__retarget_lock_init_recursive>
  429454:	4643      	mov	r3, r8
  429456:	463a      	mov	r2, r7
  429458:	4669      	mov	r1, sp
  42945a:	4630      	mov	r0, r6
  42945c:	f7ff f990 	bl	428780 <_vfiprintf_r>
  429460:	1e05      	subs	r5, r0, #0
  429462:	db07      	blt.n	429474 <__sbprintf+0x64>
  429464:	4630      	mov	r0, r6
  429466:	4669      	mov	r1, sp
  429468:	f000 f928 	bl	4296bc <_fflush_r>
  42946c:	2800      	cmp	r0, #0
  42946e:	bf18      	it	ne
  429470:	f04f 35ff 	movne.w	r5, #4294967295
  429474:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  429478:	065b      	lsls	r3, r3, #25
  42947a:	d503      	bpl.n	429484 <__sbprintf+0x74>
  42947c:	89a3      	ldrh	r3, [r4, #12]
  42947e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  429482:	81a3      	strh	r3, [r4, #12]
  429484:	9816      	ldr	r0, [sp, #88]	; 0x58
  429486:	f000 fd2f 	bl	429ee8 <__retarget_lock_close_recursive>
  42948a:	4628      	mov	r0, r5
  42948c:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  429490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00429494 <__swsetup_r>:
  429494:	b538      	push	{r3, r4, r5, lr}
  429496:	4b30      	ldr	r3, [pc, #192]	; (429558 <__swsetup_r+0xc4>)
  429498:	681b      	ldr	r3, [r3, #0]
  42949a:	4605      	mov	r5, r0
  42949c:	460c      	mov	r4, r1
  42949e:	b113      	cbz	r3, 4294a6 <__swsetup_r+0x12>
  4294a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4294a2:	2a00      	cmp	r2, #0
  4294a4:	d038      	beq.n	429518 <__swsetup_r+0x84>
  4294a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4294aa:	b293      	uxth	r3, r2
  4294ac:	0718      	lsls	r0, r3, #28
  4294ae:	d50c      	bpl.n	4294ca <__swsetup_r+0x36>
  4294b0:	6920      	ldr	r0, [r4, #16]
  4294b2:	b1a8      	cbz	r0, 4294e0 <__swsetup_r+0x4c>
  4294b4:	f013 0201 	ands.w	r2, r3, #1
  4294b8:	d01e      	beq.n	4294f8 <__swsetup_r+0x64>
  4294ba:	6963      	ldr	r3, [r4, #20]
  4294bc:	2200      	movs	r2, #0
  4294be:	425b      	negs	r3, r3
  4294c0:	61a3      	str	r3, [r4, #24]
  4294c2:	60a2      	str	r2, [r4, #8]
  4294c4:	b1f0      	cbz	r0, 429504 <__swsetup_r+0x70>
  4294c6:	2000      	movs	r0, #0
  4294c8:	bd38      	pop	{r3, r4, r5, pc}
  4294ca:	06d9      	lsls	r1, r3, #27
  4294cc:	d53c      	bpl.n	429548 <__swsetup_r+0xb4>
  4294ce:	0758      	lsls	r0, r3, #29
  4294d0:	d426      	bmi.n	429520 <__swsetup_r+0x8c>
  4294d2:	6920      	ldr	r0, [r4, #16]
  4294d4:	f042 0308 	orr.w	r3, r2, #8
  4294d8:	81a3      	strh	r3, [r4, #12]
  4294da:	b29b      	uxth	r3, r3
  4294dc:	2800      	cmp	r0, #0
  4294de:	d1e9      	bne.n	4294b4 <__swsetup_r+0x20>
  4294e0:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4294e4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4294e8:	d0e4      	beq.n	4294b4 <__swsetup_r+0x20>
  4294ea:	4628      	mov	r0, r5
  4294ec:	4621      	mov	r1, r4
  4294ee:	f000 fd2f 	bl	429f50 <__smakebuf_r>
  4294f2:	89a3      	ldrh	r3, [r4, #12]
  4294f4:	6920      	ldr	r0, [r4, #16]
  4294f6:	e7dd      	b.n	4294b4 <__swsetup_r+0x20>
  4294f8:	0799      	lsls	r1, r3, #30
  4294fa:	bf58      	it	pl
  4294fc:	6962      	ldrpl	r2, [r4, #20]
  4294fe:	60a2      	str	r2, [r4, #8]
  429500:	2800      	cmp	r0, #0
  429502:	d1e0      	bne.n	4294c6 <__swsetup_r+0x32>
  429504:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  429508:	061a      	lsls	r2, r3, #24
  42950a:	d5dd      	bpl.n	4294c8 <__swsetup_r+0x34>
  42950c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  429510:	81a3      	strh	r3, [r4, #12]
  429512:	f04f 30ff 	mov.w	r0, #4294967295
  429516:	bd38      	pop	{r3, r4, r5, pc}
  429518:	4618      	mov	r0, r3
  42951a:	f000 f927 	bl	42976c <__sinit>
  42951e:	e7c2      	b.n	4294a6 <__swsetup_r+0x12>
  429520:	6b21      	ldr	r1, [r4, #48]	; 0x30
  429522:	b151      	cbz	r1, 42953a <__swsetup_r+0xa6>
  429524:	f104 0340 	add.w	r3, r4, #64	; 0x40
  429528:	4299      	cmp	r1, r3
  42952a:	d004      	beq.n	429536 <__swsetup_r+0xa2>
  42952c:	4628      	mov	r0, r5
  42952e:	f000 fa43 	bl	4299b8 <_free_r>
  429532:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  429536:	2300      	movs	r3, #0
  429538:	6323      	str	r3, [r4, #48]	; 0x30
  42953a:	2300      	movs	r3, #0
  42953c:	6920      	ldr	r0, [r4, #16]
  42953e:	6063      	str	r3, [r4, #4]
  429540:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  429544:	6020      	str	r0, [r4, #0]
  429546:	e7c5      	b.n	4294d4 <__swsetup_r+0x40>
  429548:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  42954c:	2309      	movs	r3, #9
  42954e:	602b      	str	r3, [r5, #0]
  429550:	f04f 30ff 	mov.w	r0, #4294967295
  429554:	81a2      	strh	r2, [r4, #12]
  429556:	bd38      	pop	{r3, r4, r5, pc}
  429558:	204000fc 	.word	0x204000fc

0042955c <register_fini>:
  42955c:	4b02      	ldr	r3, [pc, #8]	; (429568 <register_fini+0xc>)
  42955e:	b113      	cbz	r3, 429566 <register_fini+0xa>
  429560:	4802      	ldr	r0, [pc, #8]	; (42956c <register_fini+0x10>)
  429562:	f000 b805 	b.w	429570 <atexit>
  429566:	4770      	bx	lr
  429568:	00000000 	.word	0x00000000
  42956c:	004297dd 	.word	0x004297dd

00429570 <atexit>:
  429570:	2300      	movs	r3, #0
  429572:	4601      	mov	r1, r0
  429574:	461a      	mov	r2, r3
  429576:	4618      	mov	r0, r3
  429578:	f001 b88e 	b.w	42a698 <__register_exitproc>

0042957c <__sflush_r>:
  42957c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  429580:	b29a      	uxth	r2, r3
  429582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  429586:	460d      	mov	r5, r1
  429588:	0711      	lsls	r1, r2, #28
  42958a:	4680      	mov	r8, r0
  42958c:	d43a      	bmi.n	429604 <__sflush_r+0x88>
  42958e:	686a      	ldr	r2, [r5, #4]
  429590:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  429594:	2a00      	cmp	r2, #0
  429596:	81ab      	strh	r3, [r5, #12]
  429598:	dd6f      	ble.n	42967a <__sflush_r+0xfe>
  42959a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  42959c:	2c00      	cmp	r4, #0
  42959e:	d049      	beq.n	429634 <__sflush_r+0xb8>
  4295a0:	2200      	movs	r2, #0
  4295a2:	b29b      	uxth	r3, r3
  4295a4:	f8d8 6000 	ldr.w	r6, [r8]
  4295a8:	f8c8 2000 	str.w	r2, [r8]
  4295ac:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  4295b0:	d067      	beq.n	429682 <__sflush_r+0x106>
  4295b2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4295b4:	075f      	lsls	r7, r3, #29
  4295b6:	d505      	bpl.n	4295c4 <__sflush_r+0x48>
  4295b8:	6869      	ldr	r1, [r5, #4]
  4295ba:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4295bc:	1a52      	subs	r2, r2, r1
  4295be:	b10b      	cbz	r3, 4295c4 <__sflush_r+0x48>
  4295c0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4295c2:	1ad2      	subs	r2, r2, r3
  4295c4:	2300      	movs	r3, #0
  4295c6:	69e9      	ldr	r1, [r5, #28]
  4295c8:	4640      	mov	r0, r8
  4295ca:	47a0      	blx	r4
  4295cc:	1c44      	adds	r4, r0, #1
  4295ce:	d03c      	beq.n	42964a <__sflush_r+0xce>
  4295d0:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4295d4:	692a      	ldr	r2, [r5, #16]
  4295d6:	602a      	str	r2, [r5, #0]
  4295d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4295dc:	2200      	movs	r2, #0
  4295de:	81ab      	strh	r3, [r5, #12]
  4295e0:	04db      	lsls	r3, r3, #19
  4295e2:	606a      	str	r2, [r5, #4]
  4295e4:	d447      	bmi.n	429676 <__sflush_r+0xfa>
  4295e6:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4295e8:	f8c8 6000 	str.w	r6, [r8]
  4295ec:	b311      	cbz	r1, 429634 <__sflush_r+0xb8>
  4295ee:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4295f2:	4299      	cmp	r1, r3
  4295f4:	d002      	beq.n	4295fc <__sflush_r+0x80>
  4295f6:	4640      	mov	r0, r8
  4295f8:	f000 f9de 	bl	4299b8 <_free_r>
  4295fc:	2000      	movs	r0, #0
  4295fe:	6328      	str	r0, [r5, #48]	; 0x30
  429600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  429604:	692e      	ldr	r6, [r5, #16]
  429606:	b1ae      	cbz	r6, 429634 <__sflush_r+0xb8>
  429608:	682c      	ldr	r4, [r5, #0]
  42960a:	602e      	str	r6, [r5, #0]
  42960c:	0791      	lsls	r1, r2, #30
  42960e:	bf0c      	ite	eq
  429610:	696b      	ldreq	r3, [r5, #20]
  429612:	2300      	movne	r3, #0
  429614:	1ba4      	subs	r4, r4, r6
  429616:	60ab      	str	r3, [r5, #8]
  429618:	e00a      	b.n	429630 <__sflush_r+0xb4>
  42961a:	4623      	mov	r3, r4
  42961c:	4632      	mov	r2, r6
  42961e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  429620:	69e9      	ldr	r1, [r5, #28]
  429622:	4640      	mov	r0, r8
  429624:	47b8      	blx	r7
  429626:	2800      	cmp	r0, #0
  429628:	eba4 0400 	sub.w	r4, r4, r0
  42962c:	4406      	add	r6, r0
  42962e:	dd04      	ble.n	42963a <__sflush_r+0xbe>
  429630:	2c00      	cmp	r4, #0
  429632:	dcf2      	bgt.n	42961a <__sflush_r+0x9e>
  429634:	2000      	movs	r0, #0
  429636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  42963a:	89ab      	ldrh	r3, [r5, #12]
  42963c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  429640:	81ab      	strh	r3, [r5, #12]
  429642:	f04f 30ff 	mov.w	r0, #4294967295
  429646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  42964a:	f8d8 4000 	ldr.w	r4, [r8]
  42964e:	2c1d      	cmp	r4, #29
  429650:	d8f3      	bhi.n	42963a <__sflush_r+0xbe>
  429652:	4b19      	ldr	r3, [pc, #100]	; (4296b8 <__sflush_r+0x13c>)
  429654:	40e3      	lsrs	r3, r4
  429656:	43db      	mvns	r3, r3
  429658:	f013 0301 	ands.w	r3, r3, #1
  42965c:	d1ed      	bne.n	42963a <__sflush_r+0xbe>
  42965e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  429662:	606b      	str	r3, [r5, #4]
  429664:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  429668:	6929      	ldr	r1, [r5, #16]
  42966a:	81ab      	strh	r3, [r5, #12]
  42966c:	04da      	lsls	r2, r3, #19
  42966e:	6029      	str	r1, [r5, #0]
  429670:	d5b9      	bpl.n	4295e6 <__sflush_r+0x6a>
  429672:	2c00      	cmp	r4, #0
  429674:	d1b7      	bne.n	4295e6 <__sflush_r+0x6a>
  429676:	6528      	str	r0, [r5, #80]	; 0x50
  429678:	e7b5      	b.n	4295e6 <__sflush_r+0x6a>
  42967a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  42967c:	2a00      	cmp	r2, #0
  42967e:	dc8c      	bgt.n	42959a <__sflush_r+0x1e>
  429680:	e7d8      	b.n	429634 <__sflush_r+0xb8>
  429682:	2301      	movs	r3, #1
  429684:	69e9      	ldr	r1, [r5, #28]
  429686:	4640      	mov	r0, r8
  429688:	47a0      	blx	r4
  42968a:	1c43      	adds	r3, r0, #1
  42968c:	4602      	mov	r2, r0
  42968e:	d002      	beq.n	429696 <__sflush_r+0x11a>
  429690:	89ab      	ldrh	r3, [r5, #12]
  429692:	6aac      	ldr	r4, [r5, #40]	; 0x28
  429694:	e78e      	b.n	4295b4 <__sflush_r+0x38>
  429696:	f8d8 3000 	ldr.w	r3, [r8]
  42969a:	2b00      	cmp	r3, #0
  42969c:	d0f8      	beq.n	429690 <__sflush_r+0x114>
  42969e:	2b1d      	cmp	r3, #29
  4296a0:	d001      	beq.n	4296a6 <__sflush_r+0x12a>
  4296a2:	2b16      	cmp	r3, #22
  4296a4:	d102      	bne.n	4296ac <__sflush_r+0x130>
  4296a6:	f8c8 6000 	str.w	r6, [r8]
  4296aa:	e7c3      	b.n	429634 <__sflush_r+0xb8>
  4296ac:	89ab      	ldrh	r3, [r5, #12]
  4296ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4296b2:	81ab      	strh	r3, [r5, #12]
  4296b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4296b8:	20400001 	.word	0x20400001

004296bc <_fflush_r>:
  4296bc:	b538      	push	{r3, r4, r5, lr}
  4296be:	460d      	mov	r5, r1
  4296c0:	4604      	mov	r4, r0
  4296c2:	b108      	cbz	r0, 4296c8 <_fflush_r+0xc>
  4296c4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4296c6:	b1bb      	cbz	r3, 4296f8 <_fflush_r+0x3c>
  4296c8:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  4296cc:	b188      	cbz	r0, 4296f2 <_fflush_r+0x36>
  4296ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4296d0:	07db      	lsls	r3, r3, #31
  4296d2:	d401      	bmi.n	4296d8 <_fflush_r+0x1c>
  4296d4:	0581      	lsls	r1, r0, #22
  4296d6:	d517      	bpl.n	429708 <_fflush_r+0x4c>
  4296d8:	4620      	mov	r0, r4
  4296da:	4629      	mov	r1, r5
  4296dc:	f7ff ff4e 	bl	42957c <__sflush_r>
  4296e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4296e2:	07da      	lsls	r2, r3, #31
  4296e4:	4604      	mov	r4, r0
  4296e6:	d402      	bmi.n	4296ee <_fflush_r+0x32>
  4296e8:	89ab      	ldrh	r3, [r5, #12]
  4296ea:	059b      	lsls	r3, r3, #22
  4296ec:	d507      	bpl.n	4296fe <_fflush_r+0x42>
  4296ee:	4620      	mov	r0, r4
  4296f0:	bd38      	pop	{r3, r4, r5, pc}
  4296f2:	4604      	mov	r4, r0
  4296f4:	4620      	mov	r0, r4
  4296f6:	bd38      	pop	{r3, r4, r5, pc}
  4296f8:	f000 f838 	bl	42976c <__sinit>
  4296fc:	e7e4      	b.n	4296c8 <_fflush_r+0xc>
  4296fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
  429700:	f000 fbf6 	bl	429ef0 <__retarget_lock_release_recursive>
  429704:	4620      	mov	r0, r4
  429706:	bd38      	pop	{r3, r4, r5, pc}
  429708:	6da8      	ldr	r0, [r5, #88]	; 0x58
  42970a:	f000 fbef 	bl	429eec <__retarget_lock_acquire_recursive>
  42970e:	e7e3      	b.n	4296d8 <_fflush_r+0x1c>

00429710 <_cleanup_r>:
  429710:	4901      	ldr	r1, [pc, #4]	; (429718 <_cleanup_r+0x8>)
  429712:	f000 bbaf 	b.w	429e74 <_fwalk_reent>
  429716:	bf00      	nop
  429718:	0042a781 	.word	0x0042a781

0042971c <std.isra.0>:
  42971c:	b510      	push	{r4, lr}
  42971e:	2300      	movs	r3, #0
  429720:	4604      	mov	r4, r0
  429722:	8181      	strh	r1, [r0, #12]
  429724:	81c2      	strh	r2, [r0, #14]
  429726:	6003      	str	r3, [r0, #0]
  429728:	6043      	str	r3, [r0, #4]
  42972a:	6083      	str	r3, [r0, #8]
  42972c:	6643      	str	r3, [r0, #100]	; 0x64
  42972e:	6103      	str	r3, [r0, #16]
  429730:	6143      	str	r3, [r0, #20]
  429732:	6183      	str	r3, [r0, #24]
  429734:	4619      	mov	r1, r3
  429736:	2208      	movs	r2, #8
  429738:	305c      	adds	r0, #92	; 0x5c
  42973a:	f7fe fc15 	bl	427f68 <memset>
  42973e:	4807      	ldr	r0, [pc, #28]	; (42975c <std.isra.0+0x40>)
  429740:	4907      	ldr	r1, [pc, #28]	; (429760 <std.isra.0+0x44>)
  429742:	4a08      	ldr	r2, [pc, #32]	; (429764 <std.isra.0+0x48>)
  429744:	4b08      	ldr	r3, [pc, #32]	; (429768 <std.isra.0+0x4c>)
  429746:	6220      	str	r0, [r4, #32]
  429748:	61e4      	str	r4, [r4, #28]
  42974a:	6261      	str	r1, [r4, #36]	; 0x24
  42974c:	62a2      	str	r2, [r4, #40]	; 0x28
  42974e:	62e3      	str	r3, [r4, #44]	; 0x2c
  429750:	f104 0058 	add.w	r0, r4, #88	; 0x58
  429754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  429758:	f000 bbc4 	b.w	429ee4 <__retarget_lock_init_recursive>
  42975c:	0042a4c5 	.word	0x0042a4c5
  429760:	0042a4e9 	.word	0x0042a4e9
  429764:	0042a525 	.word	0x0042a525
  429768:	0042a545 	.word	0x0042a545

0042976c <__sinit>:
  42976c:	b510      	push	{r4, lr}
  42976e:	4604      	mov	r4, r0
  429770:	4812      	ldr	r0, [pc, #72]	; (4297bc <__sinit+0x50>)
  429772:	f000 fbbb 	bl	429eec <__retarget_lock_acquire_recursive>
  429776:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  429778:	b9d2      	cbnz	r2, 4297b0 <__sinit+0x44>
  42977a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  42977e:	4810      	ldr	r0, [pc, #64]	; (4297c0 <__sinit+0x54>)
  429780:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  429784:	2103      	movs	r1, #3
  429786:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  42978a:	63e0      	str	r0, [r4, #60]	; 0x3c
  42978c:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  429790:	6860      	ldr	r0, [r4, #4]
  429792:	2104      	movs	r1, #4
  429794:	f7ff ffc2 	bl	42971c <std.isra.0>
  429798:	2201      	movs	r2, #1
  42979a:	2109      	movs	r1, #9
  42979c:	68a0      	ldr	r0, [r4, #8]
  42979e:	f7ff ffbd 	bl	42971c <std.isra.0>
  4297a2:	2202      	movs	r2, #2
  4297a4:	2112      	movs	r1, #18
  4297a6:	68e0      	ldr	r0, [r4, #12]
  4297a8:	f7ff ffb8 	bl	42971c <std.isra.0>
  4297ac:	2301      	movs	r3, #1
  4297ae:	63a3      	str	r3, [r4, #56]	; 0x38
  4297b0:	4802      	ldr	r0, [pc, #8]	; (4297bc <__sinit+0x50>)
  4297b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4297b6:	f000 bb9b 	b.w	429ef0 <__retarget_lock_release_recursive>
  4297ba:	bf00      	nop
  4297bc:	2043a828 	.word	0x2043a828
  4297c0:	00429711 	.word	0x00429711

004297c4 <__sfp_lock_acquire>:
  4297c4:	4801      	ldr	r0, [pc, #4]	; (4297cc <__sfp_lock_acquire+0x8>)
  4297c6:	f000 bb91 	b.w	429eec <__retarget_lock_acquire_recursive>
  4297ca:	bf00      	nop
  4297cc:	2043a83c 	.word	0x2043a83c

004297d0 <__sfp_lock_release>:
  4297d0:	4801      	ldr	r0, [pc, #4]	; (4297d8 <__sfp_lock_release+0x8>)
  4297d2:	f000 bb8d 	b.w	429ef0 <__retarget_lock_release_recursive>
  4297d6:	bf00      	nop
  4297d8:	2043a83c 	.word	0x2043a83c

004297dc <__libc_fini_array>:
  4297dc:	b538      	push	{r3, r4, r5, lr}
  4297de:	4c0a      	ldr	r4, [pc, #40]	; (429808 <__libc_fini_array+0x2c>)
  4297e0:	4d0a      	ldr	r5, [pc, #40]	; (42980c <__libc_fini_array+0x30>)
  4297e2:	1b64      	subs	r4, r4, r5
  4297e4:	10a4      	asrs	r4, r4, #2
  4297e6:	d00a      	beq.n	4297fe <__libc_fini_array+0x22>
  4297e8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4297ec:	3b01      	subs	r3, #1
  4297ee:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4297f2:	3c01      	subs	r4, #1
  4297f4:	f855 3904 	ldr.w	r3, [r5], #-4
  4297f8:	4798      	blx	r3
  4297fa:	2c00      	cmp	r4, #0
  4297fc:	d1f9      	bne.n	4297f2 <__libc_fini_array+0x16>
  4297fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  429802:	f008 bca9 	b.w	432158 <_fini>
  429806:	bf00      	nop
  429808:	00432168 	.word	0x00432168
  42980c:	00432164 	.word	0x00432164

00429810 <__fputwc>:
  429810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  429814:	b082      	sub	sp, #8
  429816:	4680      	mov	r8, r0
  429818:	4689      	mov	r9, r1
  42981a:	4614      	mov	r4, r2
  42981c:	f000 fb54 	bl	429ec8 <__locale_mb_cur_max>
  429820:	2801      	cmp	r0, #1
  429822:	d036      	beq.n	429892 <__fputwc+0x82>
  429824:	464a      	mov	r2, r9
  429826:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  42982a:	a901      	add	r1, sp, #4
  42982c:	4640      	mov	r0, r8
  42982e:	f000 fee5 	bl	42a5fc <_wcrtomb_r>
  429832:	1c42      	adds	r2, r0, #1
  429834:	4606      	mov	r6, r0
  429836:	d025      	beq.n	429884 <__fputwc+0x74>
  429838:	b3a8      	cbz	r0, 4298a6 <__fputwc+0x96>
  42983a:	f89d e004 	ldrb.w	lr, [sp, #4]
  42983e:	2500      	movs	r5, #0
  429840:	f10d 0a04 	add.w	sl, sp, #4
  429844:	e009      	b.n	42985a <__fputwc+0x4a>
  429846:	6823      	ldr	r3, [r4, #0]
  429848:	1c5a      	adds	r2, r3, #1
  42984a:	6022      	str	r2, [r4, #0]
  42984c:	f883 e000 	strb.w	lr, [r3]
  429850:	3501      	adds	r5, #1
  429852:	42b5      	cmp	r5, r6
  429854:	d227      	bcs.n	4298a6 <__fputwc+0x96>
  429856:	f815 e00a 	ldrb.w	lr, [r5, sl]
  42985a:	68a3      	ldr	r3, [r4, #8]
  42985c:	3b01      	subs	r3, #1
  42985e:	2b00      	cmp	r3, #0
  429860:	60a3      	str	r3, [r4, #8]
  429862:	daf0      	bge.n	429846 <__fputwc+0x36>
  429864:	69a7      	ldr	r7, [r4, #24]
  429866:	42bb      	cmp	r3, r7
  429868:	4671      	mov	r1, lr
  42986a:	4622      	mov	r2, r4
  42986c:	4640      	mov	r0, r8
  42986e:	db02      	blt.n	429876 <__fputwc+0x66>
  429870:	f1be 0f0a 	cmp.w	lr, #10
  429874:	d1e7      	bne.n	429846 <__fputwc+0x36>
  429876:	f000 fe69 	bl	42a54c <__swbuf_r>
  42987a:	1c43      	adds	r3, r0, #1
  42987c:	d1e8      	bne.n	429850 <__fputwc+0x40>
  42987e:	b002      	add	sp, #8
  429880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  429884:	89a3      	ldrh	r3, [r4, #12]
  429886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  42988a:	81a3      	strh	r3, [r4, #12]
  42988c:	b002      	add	sp, #8
  42988e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  429892:	f109 33ff 	add.w	r3, r9, #4294967295
  429896:	2bfe      	cmp	r3, #254	; 0xfe
  429898:	d8c4      	bhi.n	429824 <__fputwc+0x14>
  42989a:	fa5f fe89 	uxtb.w	lr, r9
  42989e:	4606      	mov	r6, r0
  4298a0:	f88d e004 	strb.w	lr, [sp, #4]
  4298a4:	e7cb      	b.n	42983e <__fputwc+0x2e>
  4298a6:	4648      	mov	r0, r9
  4298a8:	b002      	add	sp, #8
  4298aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4298ae:	bf00      	nop

004298b0 <_fputwc_r>:
  4298b0:	b530      	push	{r4, r5, lr}
  4298b2:	6e53      	ldr	r3, [r2, #100]	; 0x64
  4298b4:	f013 0f01 	tst.w	r3, #1
  4298b8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  4298bc:	4614      	mov	r4, r2
  4298be:	b083      	sub	sp, #12
  4298c0:	4605      	mov	r5, r0
  4298c2:	b29a      	uxth	r2, r3
  4298c4:	d101      	bne.n	4298ca <_fputwc_r+0x1a>
  4298c6:	0590      	lsls	r0, r2, #22
  4298c8:	d51c      	bpl.n	429904 <_fputwc_r+0x54>
  4298ca:	0490      	lsls	r0, r2, #18
  4298cc:	d406      	bmi.n	4298dc <_fputwc_r+0x2c>
  4298ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4298d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4298d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4298d8:	81a3      	strh	r3, [r4, #12]
  4298da:	6662      	str	r2, [r4, #100]	; 0x64
  4298dc:	4628      	mov	r0, r5
  4298de:	4622      	mov	r2, r4
  4298e0:	f7ff ff96 	bl	429810 <__fputwc>
  4298e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4298e6:	07da      	lsls	r2, r3, #31
  4298e8:	4605      	mov	r5, r0
  4298ea:	d402      	bmi.n	4298f2 <_fputwc_r+0x42>
  4298ec:	89a3      	ldrh	r3, [r4, #12]
  4298ee:	059b      	lsls	r3, r3, #22
  4298f0:	d502      	bpl.n	4298f8 <_fputwc_r+0x48>
  4298f2:	4628      	mov	r0, r5
  4298f4:	b003      	add	sp, #12
  4298f6:	bd30      	pop	{r4, r5, pc}
  4298f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4298fa:	f000 faf9 	bl	429ef0 <__retarget_lock_release_recursive>
  4298fe:	4628      	mov	r0, r5
  429900:	b003      	add	sp, #12
  429902:	bd30      	pop	{r4, r5, pc}
  429904:	6da0      	ldr	r0, [r4, #88]	; 0x58
  429906:	9101      	str	r1, [sp, #4]
  429908:	f000 faf0 	bl	429eec <__retarget_lock_acquire_recursive>
  42990c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  429910:	9901      	ldr	r1, [sp, #4]
  429912:	b29a      	uxth	r2, r3
  429914:	e7d9      	b.n	4298ca <_fputwc_r+0x1a>
  429916:	bf00      	nop

00429918 <_malloc_trim_r>:
  429918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  42991a:	4f24      	ldr	r7, [pc, #144]	; (4299ac <_malloc_trim_r+0x94>)
  42991c:	460c      	mov	r4, r1
  42991e:	4606      	mov	r6, r0
  429920:	f7fe fb70 	bl	428004 <__malloc_lock>
  429924:	68bb      	ldr	r3, [r7, #8]
  429926:	685d      	ldr	r5, [r3, #4]
  429928:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  42992c:	310f      	adds	r1, #15
  42992e:	f025 0503 	bic.w	r5, r5, #3
  429932:	4429      	add	r1, r5
  429934:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  429938:	f021 010f 	bic.w	r1, r1, #15
  42993c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  429940:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  429944:	db07      	blt.n	429956 <_malloc_trim_r+0x3e>
  429946:	2100      	movs	r1, #0
  429948:	4630      	mov	r0, r6
  42994a:	f7fe fb87 	bl	42805c <_sbrk_r>
  42994e:	68bb      	ldr	r3, [r7, #8]
  429950:	442b      	add	r3, r5
  429952:	4298      	cmp	r0, r3
  429954:	d004      	beq.n	429960 <_malloc_trim_r+0x48>
  429956:	4630      	mov	r0, r6
  429958:	f7fe fb5a 	bl	428010 <__malloc_unlock>
  42995c:	2000      	movs	r0, #0
  42995e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  429960:	4261      	negs	r1, r4
  429962:	4630      	mov	r0, r6
  429964:	f7fe fb7a 	bl	42805c <_sbrk_r>
  429968:	3001      	adds	r0, #1
  42996a:	d00d      	beq.n	429988 <_malloc_trim_r+0x70>
  42996c:	4b10      	ldr	r3, [pc, #64]	; (4299b0 <_malloc_trim_r+0x98>)
  42996e:	68ba      	ldr	r2, [r7, #8]
  429970:	6819      	ldr	r1, [r3, #0]
  429972:	1b2d      	subs	r5, r5, r4
  429974:	f045 0501 	orr.w	r5, r5, #1
  429978:	4630      	mov	r0, r6
  42997a:	1b09      	subs	r1, r1, r4
  42997c:	6055      	str	r5, [r2, #4]
  42997e:	6019      	str	r1, [r3, #0]
  429980:	f7fe fb46 	bl	428010 <__malloc_unlock>
  429984:	2001      	movs	r0, #1
  429986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  429988:	2100      	movs	r1, #0
  42998a:	4630      	mov	r0, r6
  42998c:	f7fe fb66 	bl	42805c <_sbrk_r>
  429990:	68ba      	ldr	r2, [r7, #8]
  429992:	1a83      	subs	r3, r0, r2
  429994:	2b0f      	cmp	r3, #15
  429996:	ddde      	ble.n	429956 <_malloc_trim_r+0x3e>
  429998:	4c06      	ldr	r4, [pc, #24]	; (4299b4 <_malloc_trim_r+0x9c>)
  42999a:	4905      	ldr	r1, [pc, #20]	; (4299b0 <_malloc_trim_r+0x98>)
  42999c:	6824      	ldr	r4, [r4, #0]
  42999e:	f043 0301 	orr.w	r3, r3, #1
  4299a2:	1b00      	subs	r0, r0, r4
  4299a4:	6053      	str	r3, [r2, #4]
  4299a6:	6008      	str	r0, [r1, #0]
  4299a8:	e7d5      	b.n	429956 <_malloc_trim_r+0x3e>
  4299aa:	bf00      	nop
  4299ac:	20400528 	.word	0x20400528
  4299b0:	2043a178 	.word	0x2043a178
  4299b4:	20400930 	.word	0x20400930

004299b8 <_free_r>:
  4299b8:	2900      	cmp	r1, #0
  4299ba:	d044      	beq.n	429a46 <_free_r+0x8e>
  4299bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4299c0:	460d      	mov	r5, r1
  4299c2:	4680      	mov	r8, r0
  4299c4:	f7fe fb1e 	bl	428004 <__malloc_lock>
  4299c8:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4299cc:	4969      	ldr	r1, [pc, #420]	; (429b74 <_free_r+0x1bc>)
  4299ce:	f027 0301 	bic.w	r3, r7, #1
  4299d2:	f1a5 0408 	sub.w	r4, r5, #8
  4299d6:	18e2      	adds	r2, r4, r3
  4299d8:	688e      	ldr	r6, [r1, #8]
  4299da:	6850      	ldr	r0, [r2, #4]
  4299dc:	42b2      	cmp	r2, r6
  4299de:	f020 0003 	bic.w	r0, r0, #3
  4299e2:	d05e      	beq.n	429aa2 <_free_r+0xea>
  4299e4:	07fe      	lsls	r6, r7, #31
  4299e6:	6050      	str	r0, [r2, #4]
  4299e8:	d40b      	bmi.n	429a02 <_free_r+0x4a>
  4299ea:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4299ee:	1be4      	subs	r4, r4, r7
  4299f0:	f101 0e08 	add.w	lr, r1, #8
  4299f4:	68a5      	ldr	r5, [r4, #8]
  4299f6:	4575      	cmp	r5, lr
  4299f8:	443b      	add	r3, r7
  4299fa:	d06d      	beq.n	429ad8 <_free_r+0x120>
  4299fc:	68e7      	ldr	r7, [r4, #12]
  4299fe:	60ef      	str	r7, [r5, #12]
  429a00:	60bd      	str	r5, [r7, #8]
  429a02:	1815      	adds	r5, r2, r0
  429a04:	686d      	ldr	r5, [r5, #4]
  429a06:	07ed      	lsls	r5, r5, #31
  429a08:	d53e      	bpl.n	429a88 <_free_r+0xd0>
  429a0a:	f043 0201 	orr.w	r2, r3, #1
  429a0e:	6062      	str	r2, [r4, #4]
  429a10:	50e3      	str	r3, [r4, r3]
  429a12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  429a16:	d217      	bcs.n	429a48 <_free_r+0x90>
  429a18:	08db      	lsrs	r3, r3, #3
  429a1a:	1c58      	adds	r0, r3, #1
  429a1c:	109a      	asrs	r2, r3, #2
  429a1e:	684d      	ldr	r5, [r1, #4]
  429a20:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  429a24:	60a7      	str	r7, [r4, #8]
  429a26:	2301      	movs	r3, #1
  429a28:	4093      	lsls	r3, r2
  429a2a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  429a2e:	432b      	orrs	r3, r5
  429a30:	3a08      	subs	r2, #8
  429a32:	60e2      	str	r2, [r4, #12]
  429a34:	604b      	str	r3, [r1, #4]
  429a36:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  429a3a:	60fc      	str	r4, [r7, #12]
  429a3c:	4640      	mov	r0, r8
  429a3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  429a42:	f7fe bae5 	b.w	428010 <__malloc_unlock>
  429a46:	4770      	bx	lr
  429a48:	0a5a      	lsrs	r2, r3, #9
  429a4a:	2a04      	cmp	r2, #4
  429a4c:	d852      	bhi.n	429af4 <_free_r+0x13c>
  429a4e:	099a      	lsrs	r2, r3, #6
  429a50:	f102 0739 	add.w	r7, r2, #57	; 0x39
  429a54:	00ff      	lsls	r7, r7, #3
  429a56:	f102 0538 	add.w	r5, r2, #56	; 0x38
  429a5a:	19c8      	adds	r0, r1, r7
  429a5c:	59ca      	ldr	r2, [r1, r7]
  429a5e:	3808      	subs	r0, #8
  429a60:	4290      	cmp	r0, r2
  429a62:	d04f      	beq.n	429b04 <_free_r+0x14c>
  429a64:	6851      	ldr	r1, [r2, #4]
  429a66:	f021 0103 	bic.w	r1, r1, #3
  429a6a:	428b      	cmp	r3, r1
  429a6c:	d232      	bcs.n	429ad4 <_free_r+0x11c>
  429a6e:	6892      	ldr	r2, [r2, #8]
  429a70:	4290      	cmp	r0, r2
  429a72:	d1f7      	bne.n	429a64 <_free_r+0xac>
  429a74:	68c3      	ldr	r3, [r0, #12]
  429a76:	60a0      	str	r0, [r4, #8]
  429a78:	60e3      	str	r3, [r4, #12]
  429a7a:	609c      	str	r4, [r3, #8]
  429a7c:	60c4      	str	r4, [r0, #12]
  429a7e:	4640      	mov	r0, r8
  429a80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  429a84:	f7fe bac4 	b.w	428010 <__malloc_unlock>
  429a88:	6895      	ldr	r5, [r2, #8]
  429a8a:	4f3b      	ldr	r7, [pc, #236]	; (429b78 <_free_r+0x1c0>)
  429a8c:	42bd      	cmp	r5, r7
  429a8e:	4403      	add	r3, r0
  429a90:	d040      	beq.n	429b14 <_free_r+0x15c>
  429a92:	68d0      	ldr	r0, [r2, #12]
  429a94:	60e8      	str	r0, [r5, #12]
  429a96:	f043 0201 	orr.w	r2, r3, #1
  429a9a:	6085      	str	r5, [r0, #8]
  429a9c:	6062      	str	r2, [r4, #4]
  429a9e:	50e3      	str	r3, [r4, r3]
  429aa0:	e7b7      	b.n	429a12 <_free_r+0x5a>
  429aa2:	07ff      	lsls	r7, r7, #31
  429aa4:	4403      	add	r3, r0
  429aa6:	d407      	bmi.n	429ab8 <_free_r+0x100>
  429aa8:	f855 2c08 	ldr.w	r2, [r5, #-8]
  429aac:	1aa4      	subs	r4, r4, r2
  429aae:	4413      	add	r3, r2
  429ab0:	68a0      	ldr	r0, [r4, #8]
  429ab2:	68e2      	ldr	r2, [r4, #12]
  429ab4:	60c2      	str	r2, [r0, #12]
  429ab6:	6090      	str	r0, [r2, #8]
  429ab8:	4a30      	ldr	r2, [pc, #192]	; (429b7c <_free_r+0x1c4>)
  429aba:	6812      	ldr	r2, [r2, #0]
  429abc:	f043 0001 	orr.w	r0, r3, #1
  429ac0:	4293      	cmp	r3, r2
  429ac2:	6060      	str	r0, [r4, #4]
  429ac4:	608c      	str	r4, [r1, #8]
  429ac6:	d3b9      	bcc.n	429a3c <_free_r+0x84>
  429ac8:	4b2d      	ldr	r3, [pc, #180]	; (429b80 <_free_r+0x1c8>)
  429aca:	4640      	mov	r0, r8
  429acc:	6819      	ldr	r1, [r3, #0]
  429ace:	f7ff ff23 	bl	429918 <_malloc_trim_r>
  429ad2:	e7b3      	b.n	429a3c <_free_r+0x84>
  429ad4:	4610      	mov	r0, r2
  429ad6:	e7cd      	b.n	429a74 <_free_r+0xbc>
  429ad8:	1811      	adds	r1, r2, r0
  429ada:	6849      	ldr	r1, [r1, #4]
  429adc:	07c9      	lsls	r1, r1, #31
  429ade:	d444      	bmi.n	429b6a <_free_r+0x1b2>
  429ae0:	6891      	ldr	r1, [r2, #8]
  429ae2:	68d2      	ldr	r2, [r2, #12]
  429ae4:	60ca      	str	r2, [r1, #12]
  429ae6:	4403      	add	r3, r0
  429ae8:	f043 0001 	orr.w	r0, r3, #1
  429aec:	6091      	str	r1, [r2, #8]
  429aee:	6060      	str	r0, [r4, #4]
  429af0:	50e3      	str	r3, [r4, r3]
  429af2:	e7a3      	b.n	429a3c <_free_r+0x84>
  429af4:	2a14      	cmp	r2, #20
  429af6:	d816      	bhi.n	429b26 <_free_r+0x16e>
  429af8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  429afc:	00ff      	lsls	r7, r7, #3
  429afe:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  429b02:	e7aa      	b.n	429a5a <_free_r+0xa2>
  429b04:	10aa      	asrs	r2, r5, #2
  429b06:	2301      	movs	r3, #1
  429b08:	684d      	ldr	r5, [r1, #4]
  429b0a:	4093      	lsls	r3, r2
  429b0c:	432b      	orrs	r3, r5
  429b0e:	604b      	str	r3, [r1, #4]
  429b10:	4603      	mov	r3, r0
  429b12:	e7b0      	b.n	429a76 <_free_r+0xbe>
  429b14:	f043 0201 	orr.w	r2, r3, #1
  429b18:	614c      	str	r4, [r1, #20]
  429b1a:	610c      	str	r4, [r1, #16]
  429b1c:	60e5      	str	r5, [r4, #12]
  429b1e:	60a5      	str	r5, [r4, #8]
  429b20:	6062      	str	r2, [r4, #4]
  429b22:	50e3      	str	r3, [r4, r3]
  429b24:	e78a      	b.n	429a3c <_free_r+0x84>
  429b26:	2a54      	cmp	r2, #84	; 0x54
  429b28:	d806      	bhi.n	429b38 <_free_r+0x180>
  429b2a:	0b1a      	lsrs	r2, r3, #12
  429b2c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  429b30:	00ff      	lsls	r7, r7, #3
  429b32:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  429b36:	e790      	b.n	429a5a <_free_r+0xa2>
  429b38:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  429b3c:	d806      	bhi.n	429b4c <_free_r+0x194>
  429b3e:	0bda      	lsrs	r2, r3, #15
  429b40:	f102 0778 	add.w	r7, r2, #120	; 0x78
  429b44:	00ff      	lsls	r7, r7, #3
  429b46:	f102 0577 	add.w	r5, r2, #119	; 0x77
  429b4a:	e786      	b.n	429a5a <_free_r+0xa2>
  429b4c:	f240 5054 	movw	r0, #1364	; 0x554
  429b50:	4282      	cmp	r2, r0
  429b52:	d806      	bhi.n	429b62 <_free_r+0x1aa>
  429b54:	0c9a      	lsrs	r2, r3, #18
  429b56:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  429b5a:	00ff      	lsls	r7, r7, #3
  429b5c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  429b60:	e77b      	b.n	429a5a <_free_r+0xa2>
  429b62:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  429b66:	257e      	movs	r5, #126	; 0x7e
  429b68:	e777      	b.n	429a5a <_free_r+0xa2>
  429b6a:	f043 0101 	orr.w	r1, r3, #1
  429b6e:	6061      	str	r1, [r4, #4]
  429b70:	6013      	str	r3, [r2, #0]
  429b72:	e763      	b.n	429a3c <_free_r+0x84>
  429b74:	20400528 	.word	0x20400528
  429b78:	20400530 	.word	0x20400530
  429b7c:	20400934 	.word	0x20400934
  429b80:	2043a1a8 	.word	0x2043a1a8

00429b84 <__sfvwrite_r>:
  429b84:	6893      	ldr	r3, [r2, #8]
  429b86:	2b00      	cmp	r3, #0
  429b88:	d073      	beq.n	429c72 <__sfvwrite_r+0xee>
  429b8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  429b8e:	898b      	ldrh	r3, [r1, #12]
  429b90:	b083      	sub	sp, #12
  429b92:	460c      	mov	r4, r1
  429b94:	0719      	lsls	r1, r3, #28
  429b96:	9000      	str	r0, [sp, #0]
  429b98:	4616      	mov	r6, r2
  429b9a:	d526      	bpl.n	429bea <__sfvwrite_r+0x66>
  429b9c:	6922      	ldr	r2, [r4, #16]
  429b9e:	b322      	cbz	r2, 429bea <__sfvwrite_r+0x66>
  429ba0:	f013 0002 	ands.w	r0, r3, #2
  429ba4:	6835      	ldr	r5, [r6, #0]
  429ba6:	d02c      	beq.n	429c02 <__sfvwrite_r+0x7e>
  429ba8:	f04f 0900 	mov.w	r9, #0
  429bac:	4fb0      	ldr	r7, [pc, #704]	; (429e70 <__sfvwrite_r+0x2ec>)
  429bae:	46c8      	mov	r8, r9
  429bb0:	46b2      	mov	sl, r6
  429bb2:	45b8      	cmp	r8, r7
  429bb4:	4643      	mov	r3, r8
  429bb6:	464a      	mov	r2, r9
  429bb8:	bf28      	it	cs
  429bba:	463b      	movcs	r3, r7
  429bbc:	9800      	ldr	r0, [sp, #0]
  429bbe:	f1b8 0f00 	cmp.w	r8, #0
  429bc2:	d050      	beq.n	429c66 <__sfvwrite_r+0xe2>
  429bc4:	69e1      	ldr	r1, [r4, #28]
  429bc6:	6a66      	ldr	r6, [r4, #36]	; 0x24
  429bc8:	47b0      	blx	r6
  429bca:	2800      	cmp	r0, #0
  429bcc:	dd58      	ble.n	429c80 <__sfvwrite_r+0xfc>
  429bce:	f8da 3008 	ldr.w	r3, [sl, #8]
  429bd2:	1a1b      	subs	r3, r3, r0
  429bd4:	4481      	add	r9, r0
  429bd6:	eba8 0800 	sub.w	r8, r8, r0
  429bda:	f8ca 3008 	str.w	r3, [sl, #8]
  429bde:	2b00      	cmp	r3, #0
  429be0:	d1e7      	bne.n	429bb2 <__sfvwrite_r+0x2e>
  429be2:	2000      	movs	r0, #0
  429be4:	b003      	add	sp, #12
  429be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  429bea:	4621      	mov	r1, r4
  429bec:	9800      	ldr	r0, [sp, #0]
  429bee:	f7ff fc51 	bl	429494 <__swsetup_r>
  429bf2:	2800      	cmp	r0, #0
  429bf4:	f040 8133 	bne.w	429e5e <__sfvwrite_r+0x2da>
  429bf8:	89a3      	ldrh	r3, [r4, #12]
  429bfa:	6835      	ldr	r5, [r6, #0]
  429bfc:	f013 0002 	ands.w	r0, r3, #2
  429c00:	d1d2      	bne.n	429ba8 <__sfvwrite_r+0x24>
  429c02:	f013 0901 	ands.w	r9, r3, #1
  429c06:	d145      	bne.n	429c94 <__sfvwrite_r+0x110>
  429c08:	464f      	mov	r7, r9
  429c0a:	9601      	str	r6, [sp, #4]
  429c0c:	b337      	cbz	r7, 429c5c <__sfvwrite_r+0xd8>
  429c0e:	059a      	lsls	r2, r3, #22
  429c10:	f8d4 8008 	ldr.w	r8, [r4, #8]
  429c14:	f140 8083 	bpl.w	429d1e <__sfvwrite_r+0x19a>
  429c18:	4547      	cmp	r7, r8
  429c1a:	46c3      	mov	fp, r8
  429c1c:	f0c0 80ab 	bcc.w	429d76 <__sfvwrite_r+0x1f2>
  429c20:	f413 6f90 	tst.w	r3, #1152	; 0x480
  429c24:	f040 80ac 	bne.w	429d80 <__sfvwrite_r+0x1fc>
  429c28:	6820      	ldr	r0, [r4, #0]
  429c2a:	46ba      	mov	sl, r7
  429c2c:	465a      	mov	r2, fp
  429c2e:	4649      	mov	r1, r9
  429c30:	f000 fa3e 	bl	42a0b0 <memmove>
  429c34:	68a2      	ldr	r2, [r4, #8]
  429c36:	6823      	ldr	r3, [r4, #0]
  429c38:	eba2 0208 	sub.w	r2, r2, r8
  429c3c:	445b      	add	r3, fp
  429c3e:	60a2      	str	r2, [r4, #8]
  429c40:	6023      	str	r3, [r4, #0]
  429c42:	9a01      	ldr	r2, [sp, #4]
  429c44:	6893      	ldr	r3, [r2, #8]
  429c46:	eba3 030a 	sub.w	r3, r3, sl
  429c4a:	44d1      	add	r9, sl
  429c4c:	eba7 070a 	sub.w	r7, r7, sl
  429c50:	6093      	str	r3, [r2, #8]
  429c52:	2b00      	cmp	r3, #0
  429c54:	d0c5      	beq.n	429be2 <__sfvwrite_r+0x5e>
  429c56:	89a3      	ldrh	r3, [r4, #12]
  429c58:	2f00      	cmp	r7, #0
  429c5a:	d1d8      	bne.n	429c0e <__sfvwrite_r+0x8a>
  429c5c:	f8d5 9000 	ldr.w	r9, [r5]
  429c60:	686f      	ldr	r7, [r5, #4]
  429c62:	3508      	adds	r5, #8
  429c64:	e7d2      	b.n	429c0c <__sfvwrite_r+0x88>
  429c66:	f8d5 9000 	ldr.w	r9, [r5]
  429c6a:	f8d5 8004 	ldr.w	r8, [r5, #4]
  429c6e:	3508      	adds	r5, #8
  429c70:	e79f      	b.n	429bb2 <__sfvwrite_r+0x2e>
  429c72:	2000      	movs	r0, #0
  429c74:	4770      	bx	lr
  429c76:	4621      	mov	r1, r4
  429c78:	9800      	ldr	r0, [sp, #0]
  429c7a:	f7ff fd1f 	bl	4296bc <_fflush_r>
  429c7e:	b370      	cbz	r0, 429cde <__sfvwrite_r+0x15a>
  429c80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  429c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  429c88:	f04f 30ff 	mov.w	r0, #4294967295
  429c8c:	81a3      	strh	r3, [r4, #12]
  429c8e:	b003      	add	sp, #12
  429c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  429c94:	4681      	mov	r9, r0
  429c96:	4633      	mov	r3, r6
  429c98:	464e      	mov	r6, r9
  429c9a:	46a8      	mov	r8, r5
  429c9c:	469a      	mov	sl, r3
  429c9e:	464d      	mov	r5, r9
  429ca0:	b34e      	cbz	r6, 429cf6 <__sfvwrite_r+0x172>
  429ca2:	b380      	cbz	r0, 429d06 <__sfvwrite_r+0x182>
  429ca4:	6820      	ldr	r0, [r4, #0]
  429ca6:	6923      	ldr	r3, [r4, #16]
  429ca8:	6962      	ldr	r2, [r4, #20]
  429caa:	45b1      	cmp	r9, r6
  429cac:	46cb      	mov	fp, r9
  429cae:	bf28      	it	cs
  429cb0:	46b3      	movcs	fp, r6
  429cb2:	4298      	cmp	r0, r3
  429cb4:	465f      	mov	r7, fp
  429cb6:	d904      	bls.n	429cc2 <__sfvwrite_r+0x13e>
  429cb8:	68a3      	ldr	r3, [r4, #8]
  429cba:	4413      	add	r3, r2
  429cbc:	459b      	cmp	fp, r3
  429cbe:	f300 80a6 	bgt.w	429e0e <__sfvwrite_r+0x28a>
  429cc2:	4593      	cmp	fp, r2
  429cc4:	db4b      	blt.n	429d5e <__sfvwrite_r+0x1da>
  429cc6:	4613      	mov	r3, r2
  429cc8:	6a67      	ldr	r7, [r4, #36]	; 0x24
  429cca:	69e1      	ldr	r1, [r4, #28]
  429ccc:	9800      	ldr	r0, [sp, #0]
  429cce:	462a      	mov	r2, r5
  429cd0:	47b8      	blx	r7
  429cd2:	1e07      	subs	r7, r0, #0
  429cd4:	ddd4      	ble.n	429c80 <__sfvwrite_r+0xfc>
  429cd6:	ebb9 0907 	subs.w	r9, r9, r7
  429cda:	d0cc      	beq.n	429c76 <__sfvwrite_r+0xf2>
  429cdc:	2001      	movs	r0, #1
  429cde:	f8da 3008 	ldr.w	r3, [sl, #8]
  429ce2:	1bdb      	subs	r3, r3, r7
  429ce4:	443d      	add	r5, r7
  429ce6:	1bf6      	subs	r6, r6, r7
  429ce8:	f8ca 3008 	str.w	r3, [sl, #8]
  429cec:	2b00      	cmp	r3, #0
  429cee:	f43f af78 	beq.w	429be2 <__sfvwrite_r+0x5e>
  429cf2:	2e00      	cmp	r6, #0
  429cf4:	d1d5      	bne.n	429ca2 <__sfvwrite_r+0x11e>
  429cf6:	f108 0308 	add.w	r3, r8, #8
  429cfa:	e913 0060 	ldmdb	r3, {r5, r6}
  429cfe:	4698      	mov	r8, r3
  429d00:	3308      	adds	r3, #8
  429d02:	2e00      	cmp	r6, #0
  429d04:	d0f9      	beq.n	429cfa <__sfvwrite_r+0x176>
  429d06:	4632      	mov	r2, r6
  429d08:	210a      	movs	r1, #10
  429d0a:	4628      	mov	r0, r5
  429d0c:	f000 f980 	bl	42a010 <memchr>
  429d10:	2800      	cmp	r0, #0
  429d12:	f000 80a1 	beq.w	429e58 <__sfvwrite_r+0x2d4>
  429d16:	3001      	adds	r0, #1
  429d18:	eba0 0905 	sub.w	r9, r0, r5
  429d1c:	e7c2      	b.n	429ca4 <__sfvwrite_r+0x120>
  429d1e:	6820      	ldr	r0, [r4, #0]
  429d20:	6923      	ldr	r3, [r4, #16]
  429d22:	4298      	cmp	r0, r3
  429d24:	d802      	bhi.n	429d2c <__sfvwrite_r+0x1a8>
  429d26:	6963      	ldr	r3, [r4, #20]
  429d28:	429f      	cmp	r7, r3
  429d2a:	d25d      	bcs.n	429de8 <__sfvwrite_r+0x264>
  429d2c:	45b8      	cmp	r8, r7
  429d2e:	bf28      	it	cs
  429d30:	46b8      	movcs	r8, r7
  429d32:	4642      	mov	r2, r8
  429d34:	4649      	mov	r1, r9
  429d36:	f000 f9bb 	bl	42a0b0 <memmove>
  429d3a:	68a3      	ldr	r3, [r4, #8]
  429d3c:	6822      	ldr	r2, [r4, #0]
  429d3e:	eba3 0308 	sub.w	r3, r3, r8
  429d42:	4442      	add	r2, r8
  429d44:	60a3      	str	r3, [r4, #8]
  429d46:	6022      	str	r2, [r4, #0]
  429d48:	b10b      	cbz	r3, 429d4e <__sfvwrite_r+0x1ca>
  429d4a:	46c2      	mov	sl, r8
  429d4c:	e779      	b.n	429c42 <__sfvwrite_r+0xbe>
  429d4e:	4621      	mov	r1, r4
  429d50:	9800      	ldr	r0, [sp, #0]
  429d52:	f7ff fcb3 	bl	4296bc <_fflush_r>
  429d56:	2800      	cmp	r0, #0
  429d58:	d192      	bne.n	429c80 <__sfvwrite_r+0xfc>
  429d5a:	46c2      	mov	sl, r8
  429d5c:	e771      	b.n	429c42 <__sfvwrite_r+0xbe>
  429d5e:	465a      	mov	r2, fp
  429d60:	4629      	mov	r1, r5
  429d62:	f000 f9a5 	bl	42a0b0 <memmove>
  429d66:	68a2      	ldr	r2, [r4, #8]
  429d68:	6823      	ldr	r3, [r4, #0]
  429d6a:	eba2 020b 	sub.w	r2, r2, fp
  429d6e:	445b      	add	r3, fp
  429d70:	60a2      	str	r2, [r4, #8]
  429d72:	6023      	str	r3, [r4, #0]
  429d74:	e7af      	b.n	429cd6 <__sfvwrite_r+0x152>
  429d76:	6820      	ldr	r0, [r4, #0]
  429d78:	46b8      	mov	r8, r7
  429d7a:	46ba      	mov	sl, r7
  429d7c:	46bb      	mov	fp, r7
  429d7e:	e755      	b.n	429c2c <__sfvwrite_r+0xa8>
  429d80:	6962      	ldr	r2, [r4, #20]
  429d82:	6820      	ldr	r0, [r4, #0]
  429d84:	6921      	ldr	r1, [r4, #16]
  429d86:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  429d8a:	eba0 0a01 	sub.w	sl, r0, r1
  429d8e:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  429d92:	f10a 0001 	add.w	r0, sl, #1
  429d96:	ea4f 0868 	mov.w	r8, r8, asr #1
  429d9a:	4438      	add	r0, r7
  429d9c:	4540      	cmp	r0, r8
  429d9e:	4642      	mov	r2, r8
  429da0:	bf84      	itt	hi
  429da2:	4680      	movhi	r8, r0
  429da4:	4642      	movhi	r2, r8
  429da6:	055b      	lsls	r3, r3, #21
  429da8:	d544      	bpl.n	429e34 <__sfvwrite_r+0x2b0>
  429daa:	4611      	mov	r1, r2
  429dac:	9800      	ldr	r0, [sp, #0]
  429dae:	f7fd fd61 	bl	427874 <_malloc_r>
  429db2:	4683      	mov	fp, r0
  429db4:	2800      	cmp	r0, #0
  429db6:	d055      	beq.n	429e64 <__sfvwrite_r+0x2e0>
  429db8:	4652      	mov	r2, sl
  429dba:	6921      	ldr	r1, [r4, #16]
  429dbc:	f7fe f83a 	bl	427e34 <memcpy>
  429dc0:	89a3      	ldrh	r3, [r4, #12]
  429dc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  429dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  429dca:	81a3      	strh	r3, [r4, #12]
  429dcc:	eb0b 000a 	add.w	r0, fp, sl
  429dd0:	eba8 030a 	sub.w	r3, r8, sl
  429dd4:	f8c4 b010 	str.w	fp, [r4, #16]
  429dd8:	f8c4 8014 	str.w	r8, [r4, #20]
  429ddc:	6020      	str	r0, [r4, #0]
  429dde:	60a3      	str	r3, [r4, #8]
  429de0:	46b8      	mov	r8, r7
  429de2:	46ba      	mov	sl, r7
  429de4:	46bb      	mov	fp, r7
  429de6:	e721      	b.n	429c2c <__sfvwrite_r+0xa8>
  429de8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  429dec:	42b9      	cmp	r1, r7
  429dee:	bf28      	it	cs
  429df0:	4639      	movcs	r1, r7
  429df2:	464a      	mov	r2, r9
  429df4:	fb91 f1f3 	sdiv	r1, r1, r3
  429df8:	9800      	ldr	r0, [sp, #0]
  429dfa:	6a66      	ldr	r6, [r4, #36]	; 0x24
  429dfc:	fb03 f301 	mul.w	r3, r3, r1
  429e00:	69e1      	ldr	r1, [r4, #28]
  429e02:	47b0      	blx	r6
  429e04:	f1b0 0a00 	subs.w	sl, r0, #0
  429e08:	f73f af1b 	bgt.w	429c42 <__sfvwrite_r+0xbe>
  429e0c:	e738      	b.n	429c80 <__sfvwrite_r+0xfc>
  429e0e:	461a      	mov	r2, r3
  429e10:	4629      	mov	r1, r5
  429e12:	9301      	str	r3, [sp, #4]
  429e14:	f000 f94c 	bl	42a0b0 <memmove>
  429e18:	6822      	ldr	r2, [r4, #0]
  429e1a:	9b01      	ldr	r3, [sp, #4]
  429e1c:	9800      	ldr	r0, [sp, #0]
  429e1e:	441a      	add	r2, r3
  429e20:	6022      	str	r2, [r4, #0]
  429e22:	4621      	mov	r1, r4
  429e24:	f7ff fc4a 	bl	4296bc <_fflush_r>
  429e28:	9b01      	ldr	r3, [sp, #4]
  429e2a:	2800      	cmp	r0, #0
  429e2c:	f47f af28 	bne.w	429c80 <__sfvwrite_r+0xfc>
  429e30:	461f      	mov	r7, r3
  429e32:	e750      	b.n	429cd6 <__sfvwrite_r+0x152>
  429e34:	9800      	ldr	r0, [sp, #0]
  429e36:	f000 f99f 	bl	42a178 <_realloc_r>
  429e3a:	4683      	mov	fp, r0
  429e3c:	2800      	cmp	r0, #0
  429e3e:	d1c5      	bne.n	429dcc <__sfvwrite_r+0x248>
  429e40:	9d00      	ldr	r5, [sp, #0]
  429e42:	6921      	ldr	r1, [r4, #16]
  429e44:	4628      	mov	r0, r5
  429e46:	f7ff fdb7 	bl	4299b8 <_free_r>
  429e4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  429e4e:	220c      	movs	r2, #12
  429e50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  429e54:	602a      	str	r2, [r5, #0]
  429e56:	e715      	b.n	429c84 <__sfvwrite_r+0x100>
  429e58:	f106 0901 	add.w	r9, r6, #1
  429e5c:	e722      	b.n	429ca4 <__sfvwrite_r+0x120>
  429e5e:	f04f 30ff 	mov.w	r0, #4294967295
  429e62:	e6bf      	b.n	429be4 <__sfvwrite_r+0x60>
  429e64:	9a00      	ldr	r2, [sp, #0]
  429e66:	230c      	movs	r3, #12
  429e68:	6013      	str	r3, [r2, #0]
  429e6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  429e6e:	e709      	b.n	429c84 <__sfvwrite_r+0x100>
  429e70:	7ffffc00 	.word	0x7ffffc00

00429e74 <_fwalk_reent>:
  429e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  429e78:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  429e7c:	d01f      	beq.n	429ebe <_fwalk_reent+0x4a>
  429e7e:	4688      	mov	r8, r1
  429e80:	4606      	mov	r6, r0
  429e82:	f04f 0900 	mov.w	r9, #0
  429e86:	687d      	ldr	r5, [r7, #4]
  429e88:	68bc      	ldr	r4, [r7, #8]
  429e8a:	3d01      	subs	r5, #1
  429e8c:	d411      	bmi.n	429eb2 <_fwalk_reent+0x3e>
  429e8e:	89a3      	ldrh	r3, [r4, #12]
  429e90:	2b01      	cmp	r3, #1
  429e92:	f105 35ff 	add.w	r5, r5, #4294967295
  429e96:	d908      	bls.n	429eaa <_fwalk_reent+0x36>
  429e98:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  429e9c:	3301      	adds	r3, #1
  429e9e:	4621      	mov	r1, r4
  429ea0:	4630      	mov	r0, r6
  429ea2:	d002      	beq.n	429eaa <_fwalk_reent+0x36>
  429ea4:	47c0      	blx	r8
  429ea6:	ea49 0900 	orr.w	r9, r9, r0
  429eaa:	1c6b      	adds	r3, r5, #1
  429eac:	f104 0468 	add.w	r4, r4, #104	; 0x68
  429eb0:	d1ed      	bne.n	429e8e <_fwalk_reent+0x1a>
  429eb2:	683f      	ldr	r7, [r7, #0]
  429eb4:	2f00      	cmp	r7, #0
  429eb6:	d1e6      	bne.n	429e86 <_fwalk_reent+0x12>
  429eb8:	4648      	mov	r0, r9
  429eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  429ebe:	46b9      	mov	r9, r7
  429ec0:	4648      	mov	r0, r9
  429ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  429ec6:	bf00      	nop

00429ec8 <__locale_mb_cur_max>:
  429ec8:	4b04      	ldr	r3, [pc, #16]	; (429edc <__locale_mb_cur_max+0x14>)
  429eca:	4a05      	ldr	r2, [pc, #20]	; (429ee0 <__locale_mb_cur_max+0x18>)
  429ecc:	681b      	ldr	r3, [r3, #0]
  429ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  429ed0:	2b00      	cmp	r3, #0
  429ed2:	bf08      	it	eq
  429ed4:	4613      	moveq	r3, r2
  429ed6:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  429eda:	4770      	bx	lr
  429edc:	204000fc 	.word	0x204000fc
  429ee0:	2040093c 	.word	0x2040093c

00429ee4 <__retarget_lock_init_recursive>:
  429ee4:	4770      	bx	lr
  429ee6:	bf00      	nop

00429ee8 <__retarget_lock_close_recursive>:
  429ee8:	4770      	bx	lr
  429eea:	bf00      	nop

00429eec <__retarget_lock_acquire_recursive>:
  429eec:	4770      	bx	lr
  429eee:	bf00      	nop

00429ef0 <__retarget_lock_release_recursive>:
  429ef0:	4770      	bx	lr
  429ef2:	bf00      	nop

00429ef4 <__swhatbuf_r>:
  429ef4:	b570      	push	{r4, r5, r6, lr}
  429ef6:	460c      	mov	r4, r1
  429ef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  429efc:	2900      	cmp	r1, #0
  429efe:	b090      	sub	sp, #64	; 0x40
  429f00:	4615      	mov	r5, r2
  429f02:	461e      	mov	r6, r3
  429f04:	db14      	blt.n	429f30 <__swhatbuf_r+0x3c>
  429f06:	aa01      	add	r2, sp, #4
  429f08:	f000 fc9c 	bl	42a844 <_fstat_r>
  429f0c:	2800      	cmp	r0, #0
  429f0e:	db0f      	blt.n	429f30 <__swhatbuf_r+0x3c>
  429f10:	9a02      	ldr	r2, [sp, #8]
  429f12:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  429f16:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  429f1a:	fab2 f282 	clz	r2, r2
  429f1e:	0952      	lsrs	r2, r2, #5
  429f20:	f44f 6380 	mov.w	r3, #1024	; 0x400
  429f24:	f44f 6000 	mov.w	r0, #2048	; 0x800
  429f28:	6032      	str	r2, [r6, #0]
  429f2a:	602b      	str	r3, [r5, #0]
  429f2c:	b010      	add	sp, #64	; 0x40
  429f2e:	bd70      	pop	{r4, r5, r6, pc}
  429f30:	89a2      	ldrh	r2, [r4, #12]
  429f32:	2300      	movs	r3, #0
  429f34:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  429f38:	6033      	str	r3, [r6, #0]
  429f3a:	d004      	beq.n	429f46 <__swhatbuf_r+0x52>
  429f3c:	2240      	movs	r2, #64	; 0x40
  429f3e:	4618      	mov	r0, r3
  429f40:	602a      	str	r2, [r5, #0]
  429f42:	b010      	add	sp, #64	; 0x40
  429f44:	bd70      	pop	{r4, r5, r6, pc}
  429f46:	f44f 6380 	mov.w	r3, #1024	; 0x400
  429f4a:	602b      	str	r3, [r5, #0]
  429f4c:	b010      	add	sp, #64	; 0x40
  429f4e:	bd70      	pop	{r4, r5, r6, pc}

00429f50 <__smakebuf_r>:
  429f50:	898a      	ldrh	r2, [r1, #12]
  429f52:	0792      	lsls	r2, r2, #30
  429f54:	460b      	mov	r3, r1
  429f56:	d506      	bpl.n	429f66 <__smakebuf_r+0x16>
  429f58:	f101 0243 	add.w	r2, r1, #67	; 0x43
  429f5c:	2101      	movs	r1, #1
  429f5e:	601a      	str	r2, [r3, #0]
  429f60:	611a      	str	r2, [r3, #16]
  429f62:	6159      	str	r1, [r3, #20]
  429f64:	4770      	bx	lr
  429f66:	b5f0      	push	{r4, r5, r6, r7, lr}
  429f68:	b083      	sub	sp, #12
  429f6a:	ab01      	add	r3, sp, #4
  429f6c:	466a      	mov	r2, sp
  429f6e:	460c      	mov	r4, r1
  429f70:	4606      	mov	r6, r0
  429f72:	f7ff ffbf 	bl	429ef4 <__swhatbuf_r>
  429f76:	9900      	ldr	r1, [sp, #0]
  429f78:	4605      	mov	r5, r0
  429f7a:	4630      	mov	r0, r6
  429f7c:	f7fd fc7a 	bl	427874 <_malloc_r>
  429f80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  429f84:	b1d8      	cbz	r0, 429fbe <__smakebuf_r+0x6e>
  429f86:	9a01      	ldr	r2, [sp, #4]
  429f88:	4f15      	ldr	r7, [pc, #84]	; (429fe0 <__smakebuf_r+0x90>)
  429f8a:	9900      	ldr	r1, [sp, #0]
  429f8c:	63f7      	str	r7, [r6, #60]	; 0x3c
  429f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  429f92:	81a3      	strh	r3, [r4, #12]
  429f94:	6020      	str	r0, [r4, #0]
  429f96:	6120      	str	r0, [r4, #16]
  429f98:	6161      	str	r1, [r4, #20]
  429f9a:	b91a      	cbnz	r2, 429fa4 <__smakebuf_r+0x54>
  429f9c:	432b      	orrs	r3, r5
  429f9e:	81a3      	strh	r3, [r4, #12]
  429fa0:	b003      	add	sp, #12
  429fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  429fa4:	4630      	mov	r0, r6
  429fa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  429faa:	f000 fc5f 	bl	42a86c <_isatty_r>
  429fae:	b1a0      	cbz	r0, 429fda <__smakebuf_r+0x8a>
  429fb0:	89a3      	ldrh	r3, [r4, #12]
  429fb2:	f023 0303 	bic.w	r3, r3, #3
  429fb6:	f043 0301 	orr.w	r3, r3, #1
  429fba:	b21b      	sxth	r3, r3
  429fbc:	e7ee      	b.n	429f9c <__smakebuf_r+0x4c>
  429fbe:	059a      	lsls	r2, r3, #22
  429fc0:	d4ee      	bmi.n	429fa0 <__smakebuf_r+0x50>
  429fc2:	f023 0303 	bic.w	r3, r3, #3
  429fc6:	f104 0243 	add.w	r2, r4, #67	; 0x43
  429fca:	f043 0302 	orr.w	r3, r3, #2
  429fce:	2101      	movs	r1, #1
  429fd0:	81a3      	strh	r3, [r4, #12]
  429fd2:	6022      	str	r2, [r4, #0]
  429fd4:	6122      	str	r2, [r4, #16]
  429fd6:	6161      	str	r1, [r4, #20]
  429fd8:	e7e2      	b.n	429fa0 <__smakebuf_r+0x50>
  429fda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  429fde:	e7dd      	b.n	429f9c <__smakebuf_r+0x4c>
  429fe0:	00429711 	.word	0x00429711

00429fe4 <__ascii_mbtowc>:
  429fe4:	b082      	sub	sp, #8
  429fe6:	b149      	cbz	r1, 429ffc <__ascii_mbtowc+0x18>
  429fe8:	b15a      	cbz	r2, 42a002 <__ascii_mbtowc+0x1e>
  429fea:	b16b      	cbz	r3, 42a008 <__ascii_mbtowc+0x24>
  429fec:	7813      	ldrb	r3, [r2, #0]
  429fee:	600b      	str	r3, [r1, #0]
  429ff0:	7812      	ldrb	r2, [r2, #0]
  429ff2:	1c10      	adds	r0, r2, #0
  429ff4:	bf18      	it	ne
  429ff6:	2001      	movne	r0, #1
  429ff8:	b002      	add	sp, #8
  429ffa:	4770      	bx	lr
  429ffc:	a901      	add	r1, sp, #4
  429ffe:	2a00      	cmp	r2, #0
  42a000:	d1f3      	bne.n	429fea <__ascii_mbtowc+0x6>
  42a002:	4610      	mov	r0, r2
  42a004:	b002      	add	sp, #8
  42a006:	4770      	bx	lr
  42a008:	f06f 0001 	mvn.w	r0, #1
  42a00c:	e7f4      	b.n	429ff8 <__ascii_mbtowc+0x14>
  42a00e:	bf00      	nop

0042a010 <memchr>:
  42a010:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  42a014:	2a10      	cmp	r2, #16
  42a016:	db2b      	blt.n	42a070 <memchr+0x60>
  42a018:	f010 0f07 	tst.w	r0, #7
  42a01c:	d008      	beq.n	42a030 <memchr+0x20>
  42a01e:	f810 3b01 	ldrb.w	r3, [r0], #1
  42a022:	3a01      	subs	r2, #1
  42a024:	428b      	cmp	r3, r1
  42a026:	d02d      	beq.n	42a084 <memchr+0x74>
  42a028:	f010 0f07 	tst.w	r0, #7
  42a02c:	b342      	cbz	r2, 42a080 <memchr+0x70>
  42a02e:	d1f6      	bne.n	42a01e <memchr+0xe>
  42a030:	b4f0      	push	{r4, r5, r6, r7}
  42a032:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  42a036:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  42a03a:	f022 0407 	bic.w	r4, r2, #7
  42a03e:	f07f 0700 	mvns.w	r7, #0
  42a042:	2300      	movs	r3, #0
  42a044:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  42a048:	3c08      	subs	r4, #8
  42a04a:	ea85 0501 	eor.w	r5, r5, r1
  42a04e:	ea86 0601 	eor.w	r6, r6, r1
  42a052:	fa85 f547 	uadd8	r5, r5, r7
  42a056:	faa3 f587 	sel	r5, r3, r7
  42a05a:	fa86 f647 	uadd8	r6, r6, r7
  42a05e:	faa5 f687 	sel	r6, r5, r7
  42a062:	b98e      	cbnz	r6, 42a088 <memchr+0x78>
  42a064:	d1ee      	bne.n	42a044 <memchr+0x34>
  42a066:	bcf0      	pop	{r4, r5, r6, r7}
  42a068:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  42a06c:	f002 0207 	and.w	r2, r2, #7
  42a070:	b132      	cbz	r2, 42a080 <memchr+0x70>
  42a072:	f810 3b01 	ldrb.w	r3, [r0], #1
  42a076:	3a01      	subs	r2, #1
  42a078:	ea83 0301 	eor.w	r3, r3, r1
  42a07c:	b113      	cbz	r3, 42a084 <memchr+0x74>
  42a07e:	d1f8      	bne.n	42a072 <memchr+0x62>
  42a080:	2000      	movs	r0, #0
  42a082:	4770      	bx	lr
  42a084:	3801      	subs	r0, #1
  42a086:	4770      	bx	lr
  42a088:	2d00      	cmp	r5, #0
  42a08a:	bf06      	itte	eq
  42a08c:	4635      	moveq	r5, r6
  42a08e:	3803      	subeq	r0, #3
  42a090:	3807      	subne	r0, #7
  42a092:	f015 0f01 	tst.w	r5, #1
  42a096:	d107      	bne.n	42a0a8 <memchr+0x98>
  42a098:	3001      	adds	r0, #1
  42a09a:	f415 7f80 	tst.w	r5, #256	; 0x100
  42a09e:	bf02      	ittt	eq
  42a0a0:	3001      	addeq	r0, #1
  42a0a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  42a0a6:	3001      	addeq	r0, #1
  42a0a8:	bcf0      	pop	{r4, r5, r6, r7}
  42a0aa:	3801      	subs	r0, #1
  42a0ac:	4770      	bx	lr
  42a0ae:	bf00      	nop

0042a0b0 <memmove>:
  42a0b0:	4288      	cmp	r0, r1
  42a0b2:	b5f0      	push	{r4, r5, r6, r7, lr}
  42a0b4:	d90d      	bls.n	42a0d2 <memmove+0x22>
  42a0b6:	188b      	adds	r3, r1, r2
  42a0b8:	4298      	cmp	r0, r3
  42a0ba:	d20a      	bcs.n	42a0d2 <memmove+0x22>
  42a0bc:	1884      	adds	r4, r0, r2
  42a0be:	2a00      	cmp	r2, #0
  42a0c0:	d051      	beq.n	42a166 <memmove+0xb6>
  42a0c2:	4622      	mov	r2, r4
  42a0c4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  42a0c8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  42a0cc:	4299      	cmp	r1, r3
  42a0ce:	d1f9      	bne.n	42a0c4 <memmove+0x14>
  42a0d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  42a0d2:	2a0f      	cmp	r2, #15
  42a0d4:	d948      	bls.n	42a168 <memmove+0xb8>
  42a0d6:	ea41 0300 	orr.w	r3, r1, r0
  42a0da:	079b      	lsls	r3, r3, #30
  42a0dc:	d146      	bne.n	42a16c <memmove+0xbc>
  42a0de:	f100 0410 	add.w	r4, r0, #16
  42a0e2:	f101 0310 	add.w	r3, r1, #16
  42a0e6:	4615      	mov	r5, r2
  42a0e8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  42a0ec:	f844 6c10 	str.w	r6, [r4, #-16]
  42a0f0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  42a0f4:	f844 6c0c 	str.w	r6, [r4, #-12]
  42a0f8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  42a0fc:	f844 6c08 	str.w	r6, [r4, #-8]
  42a100:	3d10      	subs	r5, #16
  42a102:	f853 6c04 	ldr.w	r6, [r3, #-4]
  42a106:	f844 6c04 	str.w	r6, [r4, #-4]
  42a10a:	2d0f      	cmp	r5, #15
  42a10c:	f103 0310 	add.w	r3, r3, #16
  42a110:	f104 0410 	add.w	r4, r4, #16
  42a114:	d8e8      	bhi.n	42a0e8 <memmove+0x38>
  42a116:	f1a2 0310 	sub.w	r3, r2, #16
  42a11a:	f023 030f 	bic.w	r3, r3, #15
  42a11e:	f002 0e0f 	and.w	lr, r2, #15
  42a122:	3310      	adds	r3, #16
  42a124:	f1be 0f03 	cmp.w	lr, #3
  42a128:	4419      	add	r1, r3
  42a12a:	4403      	add	r3, r0
  42a12c:	d921      	bls.n	42a172 <memmove+0xc2>
  42a12e:	1f1e      	subs	r6, r3, #4
  42a130:	460d      	mov	r5, r1
  42a132:	4674      	mov	r4, lr
  42a134:	3c04      	subs	r4, #4
  42a136:	f855 7b04 	ldr.w	r7, [r5], #4
  42a13a:	f846 7f04 	str.w	r7, [r6, #4]!
  42a13e:	2c03      	cmp	r4, #3
  42a140:	d8f8      	bhi.n	42a134 <memmove+0x84>
  42a142:	f1ae 0404 	sub.w	r4, lr, #4
  42a146:	f024 0403 	bic.w	r4, r4, #3
  42a14a:	3404      	adds	r4, #4
  42a14c:	4421      	add	r1, r4
  42a14e:	4423      	add	r3, r4
  42a150:	f002 0203 	and.w	r2, r2, #3
  42a154:	b162      	cbz	r2, 42a170 <memmove+0xc0>
  42a156:	3b01      	subs	r3, #1
  42a158:	440a      	add	r2, r1
  42a15a:	f811 4b01 	ldrb.w	r4, [r1], #1
  42a15e:	f803 4f01 	strb.w	r4, [r3, #1]!
  42a162:	428a      	cmp	r2, r1
  42a164:	d1f9      	bne.n	42a15a <memmove+0xaa>
  42a166:	bdf0      	pop	{r4, r5, r6, r7, pc}
  42a168:	4603      	mov	r3, r0
  42a16a:	e7f3      	b.n	42a154 <memmove+0xa4>
  42a16c:	4603      	mov	r3, r0
  42a16e:	e7f2      	b.n	42a156 <memmove+0xa6>
  42a170:	bdf0      	pop	{r4, r5, r6, r7, pc}
  42a172:	4672      	mov	r2, lr
  42a174:	e7ee      	b.n	42a154 <memmove+0xa4>
  42a176:	bf00      	nop

0042a178 <_realloc_r>:
  42a178:	2900      	cmp	r1, #0
  42a17a:	f000 8095 	beq.w	42a2a8 <_realloc_r+0x130>
  42a17e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  42a182:	460d      	mov	r5, r1
  42a184:	4616      	mov	r6, r2
  42a186:	b083      	sub	sp, #12
  42a188:	4680      	mov	r8, r0
  42a18a:	f106 070b 	add.w	r7, r6, #11
  42a18e:	f7fd ff39 	bl	428004 <__malloc_lock>
  42a192:	f855 ec04 	ldr.w	lr, [r5, #-4]
  42a196:	2f16      	cmp	r7, #22
  42a198:	f02e 0403 	bic.w	r4, lr, #3
  42a19c:	f1a5 0908 	sub.w	r9, r5, #8
  42a1a0:	d83c      	bhi.n	42a21c <_realloc_r+0xa4>
  42a1a2:	2210      	movs	r2, #16
  42a1a4:	4617      	mov	r7, r2
  42a1a6:	42be      	cmp	r6, r7
  42a1a8:	d83d      	bhi.n	42a226 <_realloc_r+0xae>
  42a1aa:	4294      	cmp	r4, r2
  42a1ac:	da43      	bge.n	42a236 <_realloc_r+0xbe>
  42a1ae:	4bc4      	ldr	r3, [pc, #784]	; (42a4c0 <_realloc_r+0x348>)
  42a1b0:	6899      	ldr	r1, [r3, #8]
  42a1b2:	eb09 0004 	add.w	r0, r9, r4
  42a1b6:	4288      	cmp	r0, r1
  42a1b8:	f000 80b4 	beq.w	42a324 <_realloc_r+0x1ac>
  42a1bc:	6843      	ldr	r3, [r0, #4]
  42a1be:	f023 0101 	bic.w	r1, r3, #1
  42a1c2:	4401      	add	r1, r0
  42a1c4:	6849      	ldr	r1, [r1, #4]
  42a1c6:	07c9      	lsls	r1, r1, #31
  42a1c8:	d54c      	bpl.n	42a264 <_realloc_r+0xec>
  42a1ca:	f01e 0f01 	tst.w	lr, #1
  42a1ce:	f000 809b 	beq.w	42a308 <_realloc_r+0x190>
  42a1d2:	4631      	mov	r1, r6
  42a1d4:	4640      	mov	r0, r8
  42a1d6:	f7fd fb4d 	bl	427874 <_malloc_r>
  42a1da:	4606      	mov	r6, r0
  42a1dc:	2800      	cmp	r0, #0
  42a1de:	d03a      	beq.n	42a256 <_realloc_r+0xde>
  42a1e0:	f855 3c04 	ldr.w	r3, [r5, #-4]
  42a1e4:	f023 0301 	bic.w	r3, r3, #1
  42a1e8:	444b      	add	r3, r9
  42a1ea:	f1a0 0208 	sub.w	r2, r0, #8
  42a1ee:	429a      	cmp	r2, r3
  42a1f0:	f000 8121 	beq.w	42a436 <_realloc_r+0x2be>
  42a1f4:	1f22      	subs	r2, r4, #4
  42a1f6:	2a24      	cmp	r2, #36	; 0x24
  42a1f8:	f200 8107 	bhi.w	42a40a <_realloc_r+0x292>
  42a1fc:	2a13      	cmp	r2, #19
  42a1fe:	f200 80db 	bhi.w	42a3b8 <_realloc_r+0x240>
  42a202:	4603      	mov	r3, r0
  42a204:	462a      	mov	r2, r5
  42a206:	6811      	ldr	r1, [r2, #0]
  42a208:	6019      	str	r1, [r3, #0]
  42a20a:	6851      	ldr	r1, [r2, #4]
  42a20c:	6059      	str	r1, [r3, #4]
  42a20e:	6892      	ldr	r2, [r2, #8]
  42a210:	609a      	str	r2, [r3, #8]
  42a212:	4629      	mov	r1, r5
  42a214:	4640      	mov	r0, r8
  42a216:	f7ff fbcf 	bl	4299b8 <_free_r>
  42a21a:	e01c      	b.n	42a256 <_realloc_r+0xde>
  42a21c:	f027 0707 	bic.w	r7, r7, #7
  42a220:	2f00      	cmp	r7, #0
  42a222:	463a      	mov	r2, r7
  42a224:	dabf      	bge.n	42a1a6 <_realloc_r+0x2e>
  42a226:	2600      	movs	r6, #0
  42a228:	230c      	movs	r3, #12
  42a22a:	4630      	mov	r0, r6
  42a22c:	f8c8 3000 	str.w	r3, [r8]
  42a230:	b003      	add	sp, #12
  42a232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42a236:	462e      	mov	r6, r5
  42a238:	1be3      	subs	r3, r4, r7
  42a23a:	2b0f      	cmp	r3, #15
  42a23c:	d81e      	bhi.n	42a27c <_realloc_r+0x104>
  42a23e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  42a242:	f003 0301 	and.w	r3, r3, #1
  42a246:	4323      	orrs	r3, r4
  42a248:	444c      	add	r4, r9
  42a24a:	f8c9 3004 	str.w	r3, [r9, #4]
  42a24e:	6863      	ldr	r3, [r4, #4]
  42a250:	f043 0301 	orr.w	r3, r3, #1
  42a254:	6063      	str	r3, [r4, #4]
  42a256:	4640      	mov	r0, r8
  42a258:	f7fd feda 	bl	428010 <__malloc_unlock>
  42a25c:	4630      	mov	r0, r6
  42a25e:	b003      	add	sp, #12
  42a260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42a264:	f023 0303 	bic.w	r3, r3, #3
  42a268:	18e1      	adds	r1, r4, r3
  42a26a:	4291      	cmp	r1, r2
  42a26c:	db1f      	blt.n	42a2ae <_realloc_r+0x136>
  42a26e:	68c3      	ldr	r3, [r0, #12]
  42a270:	6882      	ldr	r2, [r0, #8]
  42a272:	462e      	mov	r6, r5
  42a274:	60d3      	str	r3, [r2, #12]
  42a276:	460c      	mov	r4, r1
  42a278:	609a      	str	r2, [r3, #8]
  42a27a:	e7dd      	b.n	42a238 <_realloc_r+0xc0>
  42a27c:	f8d9 2004 	ldr.w	r2, [r9, #4]
  42a280:	eb09 0107 	add.w	r1, r9, r7
  42a284:	f002 0201 	and.w	r2, r2, #1
  42a288:	444c      	add	r4, r9
  42a28a:	f043 0301 	orr.w	r3, r3, #1
  42a28e:	4317      	orrs	r7, r2
  42a290:	f8c9 7004 	str.w	r7, [r9, #4]
  42a294:	604b      	str	r3, [r1, #4]
  42a296:	6863      	ldr	r3, [r4, #4]
  42a298:	f043 0301 	orr.w	r3, r3, #1
  42a29c:	3108      	adds	r1, #8
  42a29e:	6063      	str	r3, [r4, #4]
  42a2a0:	4640      	mov	r0, r8
  42a2a2:	f7ff fb89 	bl	4299b8 <_free_r>
  42a2a6:	e7d6      	b.n	42a256 <_realloc_r+0xde>
  42a2a8:	4611      	mov	r1, r2
  42a2aa:	f7fd bae3 	b.w	427874 <_malloc_r>
  42a2ae:	f01e 0f01 	tst.w	lr, #1
  42a2b2:	d18e      	bne.n	42a1d2 <_realloc_r+0x5a>
  42a2b4:	f855 1c08 	ldr.w	r1, [r5, #-8]
  42a2b8:	eba9 0a01 	sub.w	sl, r9, r1
  42a2bc:	f8da 1004 	ldr.w	r1, [sl, #4]
  42a2c0:	f021 0103 	bic.w	r1, r1, #3
  42a2c4:	440b      	add	r3, r1
  42a2c6:	4423      	add	r3, r4
  42a2c8:	4293      	cmp	r3, r2
  42a2ca:	db25      	blt.n	42a318 <_realloc_r+0x1a0>
  42a2cc:	68c2      	ldr	r2, [r0, #12]
  42a2ce:	6881      	ldr	r1, [r0, #8]
  42a2d0:	4656      	mov	r6, sl
  42a2d2:	60ca      	str	r2, [r1, #12]
  42a2d4:	6091      	str	r1, [r2, #8]
  42a2d6:	f8da 100c 	ldr.w	r1, [sl, #12]
  42a2da:	f856 0f08 	ldr.w	r0, [r6, #8]!
  42a2de:	1f22      	subs	r2, r4, #4
  42a2e0:	2a24      	cmp	r2, #36	; 0x24
  42a2e2:	60c1      	str	r1, [r0, #12]
  42a2e4:	6088      	str	r0, [r1, #8]
  42a2e6:	f200 8094 	bhi.w	42a412 <_realloc_r+0x29a>
  42a2ea:	2a13      	cmp	r2, #19
  42a2ec:	d96f      	bls.n	42a3ce <_realloc_r+0x256>
  42a2ee:	6829      	ldr	r1, [r5, #0]
  42a2f0:	f8ca 1008 	str.w	r1, [sl, #8]
  42a2f4:	6869      	ldr	r1, [r5, #4]
  42a2f6:	f8ca 100c 	str.w	r1, [sl, #12]
  42a2fa:	2a1b      	cmp	r2, #27
  42a2fc:	f200 80a2 	bhi.w	42a444 <_realloc_r+0x2cc>
  42a300:	3508      	adds	r5, #8
  42a302:	f10a 0210 	add.w	r2, sl, #16
  42a306:	e063      	b.n	42a3d0 <_realloc_r+0x258>
  42a308:	f855 3c08 	ldr.w	r3, [r5, #-8]
  42a30c:	eba9 0a03 	sub.w	sl, r9, r3
  42a310:	f8da 1004 	ldr.w	r1, [sl, #4]
  42a314:	f021 0103 	bic.w	r1, r1, #3
  42a318:	1863      	adds	r3, r4, r1
  42a31a:	4293      	cmp	r3, r2
  42a31c:	f6ff af59 	blt.w	42a1d2 <_realloc_r+0x5a>
  42a320:	4656      	mov	r6, sl
  42a322:	e7d8      	b.n	42a2d6 <_realloc_r+0x15e>
  42a324:	6841      	ldr	r1, [r0, #4]
  42a326:	f021 0b03 	bic.w	fp, r1, #3
  42a32a:	44a3      	add	fp, r4
  42a32c:	f107 0010 	add.w	r0, r7, #16
  42a330:	4583      	cmp	fp, r0
  42a332:	da56      	bge.n	42a3e2 <_realloc_r+0x26a>
  42a334:	f01e 0f01 	tst.w	lr, #1
  42a338:	f47f af4b 	bne.w	42a1d2 <_realloc_r+0x5a>
  42a33c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  42a340:	eba9 0a01 	sub.w	sl, r9, r1
  42a344:	f8da 1004 	ldr.w	r1, [sl, #4]
  42a348:	f021 0103 	bic.w	r1, r1, #3
  42a34c:	448b      	add	fp, r1
  42a34e:	4558      	cmp	r0, fp
  42a350:	dce2      	bgt.n	42a318 <_realloc_r+0x1a0>
  42a352:	4656      	mov	r6, sl
  42a354:	f8da 100c 	ldr.w	r1, [sl, #12]
  42a358:	f856 0f08 	ldr.w	r0, [r6, #8]!
  42a35c:	1f22      	subs	r2, r4, #4
  42a35e:	2a24      	cmp	r2, #36	; 0x24
  42a360:	60c1      	str	r1, [r0, #12]
  42a362:	6088      	str	r0, [r1, #8]
  42a364:	f200 808f 	bhi.w	42a486 <_realloc_r+0x30e>
  42a368:	2a13      	cmp	r2, #19
  42a36a:	f240 808a 	bls.w	42a482 <_realloc_r+0x30a>
  42a36e:	6829      	ldr	r1, [r5, #0]
  42a370:	f8ca 1008 	str.w	r1, [sl, #8]
  42a374:	6869      	ldr	r1, [r5, #4]
  42a376:	f8ca 100c 	str.w	r1, [sl, #12]
  42a37a:	2a1b      	cmp	r2, #27
  42a37c:	f200 808a 	bhi.w	42a494 <_realloc_r+0x31c>
  42a380:	3508      	adds	r5, #8
  42a382:	f10a 0210 	add.w	r2, sl, #16
  42a386:	6829      	ldr	r1, [r5, #0]
  42a388:	6011      	str	r1, [r2, #0]
  42a38a:	6869      	ldr	r1, [r5, #4]
  42a38c:	6051      	str	r1, [r2, #4]
  42a38e:	68a9      	ldr	r1, [r5, #8]
  42a390:	6091      	str	r1, [r2, #8]
  42a392:	eb0a 0107 	add.w	r1, sl, r7
  42a396:	ebab 0207 	sub.w	r2, fp, r7
  42a39a:	f042 0201 	orr.w	r2, r2, #1
  42a39e:	6099      	str	r1, [r3, #8]
  42a3a0:	604a      	str	r2, [r1, #4]
  42a3a2:	f8da 3004 	ldr.w	r3, [sl, #4]
  42a3a6:	f003 0301 	and.w	r3, r3, #1
  42a3aa:	431f      	orrs	r7, r3
  42a3ac:	4640      	mov	r0, r8
  42a3ae:	f8ca 7004 	str.w	r7, [sl, #4]
  42a3b2:	f7fd fe2d 	bl	428010 <__malloc_unlock>
  42a3b6:	e751      	b.n	42a25c <_realloc_r+0xe4>
  42a3b8:	682b      	ldr	r3, [r5, #0]
  42a3ba:	6003      	str	r3, [r0, #0]
  42a3bc:	686b      	ldr	r3, [r5, #4]
  42a3be:	6043      	str	r3, [r0, #4]
  42a3c0:	2a1b      	cmp	r2, #27
  42a3c2:	d82d      	bhi.n	42a420 <_realloc_r+0x2a8>
  42a3c4:	f100 0308 	add.w	r3, r0, #8
  42a3c8:	f105 0208 	add.w	r2, r5, #8
  42a3cc:	e71b      	b.n	42a206 <_realloc_r+0x8e>
  42a3ce:	4632      	mov	r2, r6
  42a3d0:	6829      	ldr	r1, [r5, #0]
  42a3d2:	6011      	str	r1, [r2, #0]
  42a3d4:	6869      	ldr	r1, [r5, #4]
  42a3d6:	6051      	str	r1, [r2, #4]
  42a3d8:	68a9      	ldr	r1, [r5, #8]
  42a3da:	6091      	str	r1, [r2, #8]
  42a3dc:	461c      	mov	r4, r3
  42a3de:	46d1      	mov	r9, sl
  42a3e0:	e72a      	b.n	42a238 <_realloc_r+0xc0>
  42a3e2:	eb09 0107 	add.w	r1, r9, r7
  42a3e6:	ebab 0b07 	sub.w	fp, fp, r7
  42a3ea:	f04b 0201 	orr.w	r2, fp, #1
  42a3ee:	6099      	str	r1, [r3, #8]
  42a3f0:	604a      	str	r2, [r1, #4]
  42a3f2:	f855 3c04 	ldr.w	r3, [r5, #-4]
  42a3f6:	f003 0301 	and.w	r3, r3, #1
  42a3fa:	431f      	orrs	r7, r3
  42a3fc:	4640      	mov	r0, r8
  42a3fe:	f845 7c04 	str.w	r7, [r5, #-4]
  42a402:	f7fd fe05 	bl	428010 <__malloc_unlock>
  42a406:	462e      	mov	r6, r5
  42a408:	e728      	b.n	42a25c <_realloc_r+0xe4>
  42a40a:	4629      	mov	r1, r5
  42a40c:	f7ff fe50 	bl	42a0b0 <memmove>
  42a410:	e6ff      	b.n	42a212 <_realloc_r+0x9a>
  42a412:	4629      	mov	r1, r5
  42a414:	4630      	mov	r0, r6
  42a416:	461c      	mov	r4, r3
  42a418:	46d1      	mov	r9, sl
  42a41a:	f7ff fe49 	bl	42a0b0 <memmove>
  42a41e:	e70b      	b.n	42a238 <_realloc_r+0xc0>
  42a420:	68ab      	ldr	r3, [r5, #8]
  42a422:	6083      	str	r3, [r0, #8]
  42a424:	68eb      	ldr	r3, [r5, #12]
  42a426:	60c3      	str	r3, [r0, #12]
  42a428:	2a24      	cmp	r2, #36	; 0x24
  42a42a:	d017      	beq.n	42a45c <_realloc_r+0x2e4>
  42a42c:	f100 0310 	add.w	r3, r0, #16
  42a430:	f105 0210 	add.w	r2, r5, #16
  42a434:	e6e7      	b.n	42a206 <_realloc_r+0x8e>
  42a436:	f850 3c04 	ldr.w	r3, [r0, #-4]
  42a43a:	f023 0303 	bic.w	r3, r3, #3
  42a43e:	441c      	add	r4, r3
  42a440:	462e      	mov	r6, r5
  42a442:	e6f9      	b.n	42a238 <_realloc_r+0xc0>
  42a444:	68a9      	ldr	r1, [r5, #8]
  42a446:	f8ca 1010 	str.w	r1, [sl, #16]
  42a44a:	68e9      	ldr	r1, [r5, #12]
  42a44c:	f8ca 1014 	str.w	r1, [sl, #20]
  42a450:	2a24      	cmp	r2, #36	; 0x24
  42a452:	d00c      	beq.n	42a46e <_realloc_r+0x2f6>
  42a454:	3510      	adds	r5, #16
  42a456:	f10a 0218 	add.w	r2, sl, #24
  42a45a:	e7b9      	b.n	42a3d0 <_realloc_r+0x258>
  42a45c:	692b      	ldr	r3, [r5, #16]
  42a45e:	6103      	str	r3, [r0, #16]
  42a460:	696b      	ldr	r3, [r5, #20]
  42a462:	6143      	str	r3, [r0, #20]
  42a464:	f105 0218 	add.w	r2, r5, #24
  42a468:	f100 0318 	add.w	r3, r0, #24
  42a46c:	e6cb      	b.n	42a206 <_realloc_r+0x8e>
  42a46e:	692a      	ldr	r2, [r5, #16]
  42a470:	f8ca 2018 	str.w	r2, [sl, #24]
  42a474:	696a      	ldr	r2, [r5, #20]
  42a476:	f8ca 201c 	str.w	r2, [sl, #28]
  42a47a:	3518      	adds	r5, #24
  42a47c:	f10a 0220 	add.w	r2, sl, #32
  42a480:	e7a6      	b.n	42a3d0 <_realloc_r+0x258>
  42a482:	4632      	mov	r2, r6
  42a484:	e77f      	b.n	42a386 <_realloc_r+0x20e>
  42a486:	4629      	mov	r1, r5
  42a488:	4630      	mov	r0, r6
  42a48a:	9301      	str	r3, [sp, #4]
  42a48c:	f7ff fe10 	bl	42a0b0 <memmove>
  42a490:	9b01      	ldr	r3, [sp, #4]
  42a492:	e77e      	b.n	42a392 <_realloc_r+0x21a>
  42a494:	68a9      	ldr	r1, [r5, #8]
  42a496:	f8ca 1010 	str.w	r1, [sl, #16]
  42a49a:	68e9      	ldr	r1, [r5, #12]
  42a49c:	f8ca 1014 	str.w	r1, [sl, #20]
  42a4a0:	2a24      	cmp	r2, #36	; 0x24
  42a4a2:	d003      	beq.n	42a4ac <_realloc_r+0x334>
  42a4a4:	3510      	adds	r5, #16
  42a4a6:	f10a 0218 	add.w	r2, sl, #24
  42a4aa:	e76c      	b.n	42a386 <_realloc_r+0x20e>
  42a4ac:	692a      	ldr	r2, [r5, #16]
  42a4ae:	f8ca 2018 	str.w	r2, [sl, #24]
  42a4b2:	696a      	ldr	r2, [r5, #20]
  42a4b4:	f8ca 201c 	str.w	r2, [sl, #28]
  42a4b8:	3518      	adds	r5, #24
  42a4ba:	f10a 0220 	add.w	r2, sl, #32
  42a4be:	e762      	b.n	42a386 <_realloc_r+0x20e>
  42a4c0:	20400528 	.word	0x20400528

0042a4c4 <__sread>:
  42a4c4:	b510      	push	{r4, lr}
  42a4c6:	460c      	mov	r4, r1
  42a4c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  42a4cc:	f000 f9f6 	bl	42a8bc <_read_r>
  42a4d0:	2800      	cmp	r0, #0
  42a4d2:	db03      	blt.n	42a4dc <__sread+0x18>
  42a4d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  42a4d6:	4403      	add	r3, r0
  42a4d8:	6523      	str	r3, [r4, #80]	; 0x50
  42a4da:	bd10      	pop	{r4, pc}
  42a4dc:	89a3      	ldrh	r3, [r4, #12]
  42a4de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  42a4e2:	81a3      	strh	r3, [r4, #12]
  42a4e4:	bd10      	pop	{r4, pc}
  42a4e6:	bf00      	nop

0042a4e8 <__swrite>:
  42a4e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  42a4ec:	4616      	mov	r6, r2
  42a4ee:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  42a4f2:	461f      	mov	r7, r3
  42a4f4:	05d3      	lsls	r3, r2, #23
  42a4f6:	460c      	mov	r4, r1
  42a4f8:	4605      	mov	r5, r0
  42a4fa:	d507      	bpl.n	42a50c <__swrite+0x24>
  42a4fc:	2200      	movs	r2, #0
  42a4fe:	2302      	movs	r3, #2
  42a500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  42a504:	f000 f9c4 	bl	42a890 <_lseek_r>
  42a508:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  42a50c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  42a510:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  42a514:	81a2      	strh	r2, [r4, #12]
  42a516:	463b      	mov	r3, r7
  42a518:	4632      	mov	r2, r6
  42a51a:	4628      	mov	r0, r5
  42a51c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  42a520:	f000 b8a4 	b.w	42a66c <_write_r>

0042a524 <__sseek>:
  42a524:	b510      	push	{r4, lr}
  42a526:	460c      	mov	r4, r1
  42a528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  42a52c:	f000 f9b0 	bl	42a890 <_lseek_r>
  42a530:	89a3      	ldrh	r3, [r4, #12]
  42a532:	1c42      	adds	r2, r0, #1
  42a534:	bf0e      	itee	eq
  42a536:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  42a53a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  42a53e:	6520      	strne	r0, [r4, #80]	; 0x50
  42a540:	81a3      	strh	r3, [r4, #12]
  42a542:	bd10      	pop	{r4, pc}

0042a544 <__sclose>:
  42a544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  42a548:	f000 b908 	b.w	42a75c <_close_r>

0042a54c <__swbuf_r>:
  42a54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  42a54e:	460d      	mov	r5, r1
  42a550:	4614      	mov	r4, r2
  42a552:	4606      	mov	r6, r0
  42a554:	b110      	cbz	r0, 42a55c <__swbuf_r+0x10>
  42a556:	6b83      	ldr	r3, [r0, #56]	; 0x38
  42a558:	2b00      	cmp	r3, #0
  42a55a:	d04b      	beq.n	42a5f4 <__swbuf_r+0xa8>
  42a55c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  42a560:	69a3      	ldr	r3, [r4, #24]
  42a562:	60a3      	str	r3, [r4, #8]
  42a564:	b291      	uxth	r1, r2
  42a566:	0708      	lsls	r0, r1, #28
  42a568:	d539      	bpl.n	42a5de <__swbuf_r+0x92>
  42a56a:	6923      	ldr	r3, [r4, #16]
  42a56c:	2b00      	cmp	r3, #0
  42a56e:	d036      	beq.n	42a5de <__swbuf_r+0x92>
  42a570:	b2ed      	uxtb	r5, r5
  42a572:	0489      	lsls	r1, r1, #18
  42a574:	462f      	mov	r7, r5
  42a576:	d515      	bpl.n	42a5a4 <__swbuf_r+0x58>
  42a578:	6822      	ldr	r2, [r4, #0]
  42a57a:	6961      	ldr	r1, [r4, #20]
  42a57c:	1ad3      	subs	r3, r2, r3
  42a57e:	428b      	cmp	r3, r1
  42a580:	da1c      	bge.n	42a5bc <__swbuf_r+0x70>
  42a582:	3301      	adds	r3, #1
  42a584:	68a1      	ldr	r1, [r4, #8]
  42a586:	1c50      	adds	r0, r2, #1
  42a588:	3901      	subs	r1, #1
  42a58a:	60a1      	str	r1, [r4, #8]
  42a58c:	6020      	str	r0, [r4, #0]
  42a58e:	7015      	strb	r5, [r2, #0]
  42a590:	6962      	ldr	r2, [r4, #20]
  42a592:	429a      	cmp	r2, r3
  42a594:	d01a      	beq.n	42a5cc <__swbuf_r+0x80>
  42a596:	89a3      	ldrh	r3, [r4, #12]
  42a598:	07db      	lsls	r3, r3, #31
  42a59a:	d501      	bpl.n	42a5a0 <__swbuf_r+0x54>
  42a59c:	2d0a      	cmp	r5, #10
  42a59e:	d015      	beq.n	42a5cc <__swbuf_r+0x80>
  42a5a0:	4638      	mov	r0, r7
  42a5a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  42a5a4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  42a5a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  42a5aa:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  42a5ae:	81a2      	strh	r2, [r4, #12]
  42a5b0:	6822      	ldr	r2, [r4, #0]
  42a5b2:	6661      	str	r1, [r4, #100]	; 0x64
  42a5b4:	6961      	ldr	r1, [r4, #20]
  42a5b6:	1ad3      	subs	r3, r2, r3
  42a5b8:	428b      	cmp	r3, r1
  42a5ba:	dbe2      	blt.n	42a582 <__swbuf_r+0x36>
  42a5bc:	4621      	mov	r1, r4
  42a5be:	4630      	mov	r0, r6
  42a5c0:	f7ff f87c 	bl	4296bc <_fflush_r>
  42a5c4:	b940      	cbnz	r0, 42a5d8 <__swbuf_r+0x8c>
  42a5c6:	6822      	ldr	r2, [r4, #0]
  42a5c8:	2301      	movs	r3, #1
  42a5ca:	e7db      	b.n	42a584 <__swbuf_r+0x38>
  42a5cc:	4621      	mov	r1, r4
  42a5ce:	4630      	mov	r0, r6
  42a5d0:	f7ff f874 	bl	4296bc <_fflush_r>
  42a5d4:	2800      	cmp	r0, #0
  42a5d6:	d0e3      	beq.n	42a5a0 <__swbuf_r+0x54>
  42a5d8:	f04f 37ff 	mov.w	r7, #4294967295
  42a5dc:	e7e0      	b.n	42a5a0 <__swbuf_r+0x54>
  42a5de:	4621      	mov	r1, r4
  42a5e0:	4630      	mov	r0, r6
  42a5e2:	f7fe ff57 	bl	429494 <__swsetup_r>
  42a5e6:	2800      	cmp	r0, #0
  42a5e8:	d1f6      	bne.n	42a5d8 <__swbuf_r+0x8c>
  42a5ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  42a5ee:	6923      	ldr	r3, [r4, #16]
  42a5f0:	b291      	uxth	r1, r2
  42a5f2:	e7bd      	b.n	42a570 <__swbuf_r+0x24>
  42a5f4:	f7ff f8ba 	bl	42976c <__sinit>
  42a5f8:	e7b0      	b.n	42a55c <__swbuf_r+0x10>
  42a5fa:	bf00      	nop

0042a5fc <_wcrtomb_r>:
  42a5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  42a5fe:	4606      	mov	r6, r0
  42a600:	b085      	sub	sp, #20
  42a602:	461f      	mov	r7, r3
  42a604:	b189      	cbz	r1, 42a62a <_wcrtomb_r+0x2e>
  42a606:	4c10      	ldr	r4, [pc, #64]	; (42a648 <_wcrtomb_r+0x4c>)
  42a608:	4d10      	ldr	r5, [pc, #64]	; (42a64c <_wcrtomb_r+0x50>)
  42a60a:	6824      	ldr	r4, [r4, #0]
  42a60c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  42a60e:	2c00      	cmp	r4, #0
  42a610:	bf08      	it	eq
  42a612:	462c      	moveq	r4, r5
  42a614:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  42a618:	47a0      	blx	r4
  42a61a:	1c43      	adds	r3, r0, #1
  42a61c:	d103      	bne.n	42a626 <_wcrtomb_r+0x2a>
  42a61e:	2200      	movs	r2, #0
  42a620:	238a      	movs	r3, #138	; 0x8a
  42a622:	603a      	str	r2, [r7, #0]
  42a624:	6033      	str	r3, [r6, #0]
  42a626:	b005      	add	sp, #20
  42a628:	bdf0      	pop	{r4, r5, r6, r7, pc}
  42a62a:	460c      	mov	r4, r1
  42a62c:	4906      	ldr	r1, [pc, #24]	; (42a648 <_wcrtomb_r+0x4c>)
  42a62e:	4a07      	ldr	r2, [pc, #28]	; (42a64c <_wcrtomb_r+0x50>)
  42a630:	6809      	ldr	r1, [r1, #0]
  42a632:	6b49      	ldr	r1, [r1, #52]	; 0x34
  42a634:	2900      	cmp	r1, #0
  42a636:	bf08      	it	eq
  42a638:	4611      	moveq	r1, r2
  42a63a:	4622      	mov	r2, r4
  42a63c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  42a640:	a901      	add	r1, sp, #4
  42a642:	47a0      	blx	r4
  42a644:	e7e9      	b.n	42a61a <_wcrtomb_r+0x1e>
  42a646:	bf00      	nop
  42a648:	204000fc 	.word	0x204000fc
  42a64c:	2040093c 	.word	0x2040093c

0042a650 <__ascii_wctomb>:
  42a650:	b121      	cbz	r1, 42a65c <__ascii_wctomb+0xc>
  42a652:	2aff      	cmp	r2, #255	; 0xff
  42a654:	d804      	bhi.n	42a660 <__ascii_wctomb+0x10>
  42a656:	700a      	strb	r2, [r1, #0]
  42a658:	2001      	movs	r0, #1
  42a65a:	4770      	bx	lr
  42a65c:	4608      	mov	r0, r1
  42a65e:	4770      	bx	lr
  42a660:	238a      	movs	r3, #138	; 0x8a
  42a662:	6003      	str	r3, [r0, #0]
  42a664:	f04f 30ff 	mov.w	r0, #4294967295
  42a668:	4770      	bx	lr
  42a66a:	bf00      	nop

0042a66c <_write_r>:
  42a66c:	b570      	push	{r4, r5, r6, lr}
  42a66e:	460d      	mov	r5, r1
  42a670:	4c08      	ldr	r4, [pc, #32]	; (42a694 <_write_r+0x28>)
  42a672:	4611      	mov	r1, r2
  42a674:	4606      	mov	r6, r0
  42a676:	461a      	mov	r2, r3
  42a678:	4628      	mov	r0, r5
  42a67a:	2300      	movs	r3, #0
  42a67c:	6023      	str	r3, [r4, #0]
  42a67e:	f7fa fa35 	bl	424aec <_write>
  42a682:	1c43      	adds	r3, r0, #1
  42a684:	d000      	beq.n	42a688 <_write_r+0x1c>
  42a686:	bd70      	pop	{r4, r5, r6, pc}
  42a688:	6823      	ldr	r3, [r4, #0]
  42a68a:	2b00      	cmp	r3, #0
  42a68c:	d0fb      	beq.n	42a686 <_write_r+0x1a>
  42a68e:	6033      	str	r3, [r6, #0]
  42a690:	bd70      	pop	{r4, r5, r6, pc}
  42a692:	bf00      	nop
  42a694:	2043a840 	.word	0x2043a840

0042a698 <__register_exitproc>:
  42a698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  42a69c:	4d2c      	ldr	r5, [pc, #176]	; (42a750 <__register_exitproc+0xb8>)
  42a69e:	4606      	mov	r6, r0
  42a6a0:	6828      	ldr	r0, [r5, #0]
  42a6a2:	4698      	mov	r8, r3
  42a6a4:	460f      	mov	r7, r1
  42a6a6:	4691      	mov	r9, r2
  42a6a8:	f7ff fc20 	bl	429eec <__retarget_lock_acquire_recursive>
  42a6ac:	4b29      	ldr	r3, [pc, #164]	; (42a754 <__register_exitproc+0xbc>)
  42a6ae:	681c      	ldr	r4, [r3, #0]
  42a6b0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  42a6b4:	2b00      	cmp	r3, #0
  42a6b6:	d03e      	beq.n	42a736 <__register_exitproc+0x9e>
  42a6b8:	685a      	ldr	r2, [r3, #4]
  42a6ba:	2a1f      	cmp	r2, #31
  42a6bc:	dc1c      	bgt.n	42a6f8 <__register_exitproc+0x60>
  42a6be:	f102 0e01 	add.w	lr, r2, #1
  42a6c2:	b176      	cbz	r6, 42a6e2 <__register_exitproc+0x4a>
  42a6c4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  42a6c8:	2401      	movs	r4, #1
  42a6ca:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  42a6ce:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  42a6d2:	4094      	lsls	r4, r2
  42a6d4:	4320      	orrs	r0, r4
  42a6d6:	2e02      	cmp	r6, #2
  42a6d8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  42a6dc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  42a6e0:	d023      	beq.n	42a72a <__register_exitproc+0x92>
  42a6e2:	3202      	adds	r2, #2
  42a6e4:	f8c3 e004 	str.w	lr, [r3, #4]
  42a6e8:	6828      	ldr	r0, [r5, #0]
  42a6ea:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  42a6ee:	f7ff fbff 	bl	429ef0 <__retarget_lock_release_recursive>
  42a6f2:	2000      	movs	r0, #0
  42a6f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  42a6f8:	4b17      	ldr	r3, [pc, #92]	; (42a758 <__register_exitproc+0xc0>)
  42a6fa:	b30b      	cbz	r3, 42a740 <__register_exitproc+0xa8>
  42a6fc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  42a700:	f7fd f8b0 	bl	427864 <malloc>
  42a704:	4603      	mov	r3, r0
  42a706:	b1d8      	cbz	r0, 42a740 <__register_exitproc+0xa8>
  42a708:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  42a70c:	6002      	str	r2, [r0, #0]
  42a70e:	2100      	movs	r1, #0
  42a710:	6041      	str	r1, [r0, #4]
  42a712:	460a      	mov	r2, r1
  42a714:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  42a718:	f04f 0e01 	mov.w	lr, #1
  42a71c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  42a720:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  42a724:	2e00      	cmp	r6, #0
  42a726:	d0dc      	beq.n	42a6e2 <__register_exitproc+0x4a>
  42a728:	e7cc      	b.n	42a6c4 <__register_exitproc+0x2c>
  42a72a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  42a72e:	430c      	orrs	r4, r1
  42a730:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  42a734:	e7d5      	b.n	42a6e2 <__register_exitproc+0x4a>
  42a736:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  42a73a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  42a73e:	e7bb      	b.n	42a6b8 <__register_exitproc+0x20>
  42a740:	6828      	ldr	r0, [r5, #0]
  42a742:	f7ff fbd5 	bl	429ef0 <__retarget_lock_release_recursive>
  42a746:	f04f 30ff 	mov.w	r0, #4294967295
  42a74a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  42a74e:	bf00      	nop
  42a750:	20400938 	.word	0x20400938
  42a754:	00431fdc 	.word	0x00431fdc
  42a758:	00427865 	.word	0x00427865

0042a75c <_close_r>:
  42a75c:	b538      	push	{r3, r4, r5, lr}
  42a75e:	4c07      	ldr	r4, [pc, #28]	; (42a77c <_close_r+0x20>)
  42a760:	2300      	movs	r3, #0
  42a762:	4605      	mov	r5, r0
  42a764:	4608      	mov	r0, r1
  42a766:	6023      	str	r3, [r4, #0]
  42a768:	f7fb f866 	bl	425838 <_close>
  42a76c:	1c43      	adds	r3, r0, #1
  42a76e:	d000      	beq.n	42a772 <_close_r+0x16>
  42a770:	bd38      	pop	{r3, r4, r5, pc}
  42a772:	6823      	ldr	r3, [r4, #0]
  42a774:	2b00      	cmp	r3, #0
  42a776:	d0fb      	beq.n	42a770 <_close_r+0x14>
  42a778:	602b      	str	r3, [r5, #0]
  42a77a:	bd38      	pop	{r3, r4, r5, pc}
  42a77c:	2043a840 	.word	0x2043a840

0042a780 <_fclose_r>:
  42a780:	b570      	push	{r4, r5, r6, lr}
  42a782:	b159      	cbz	r1, 42a79c <_fclose_r+0x1c>
  42a784:	4605      	mov	r5, r0
  42a786:	460c      	mov	r4, r1
  42a788:	b110      	cbz	r0, 42a790 <_fclose_r+0x10>
  42a78a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  42a78c:	2b00      	cmp	r3, #0
  42a78e:	d03c      	beq.n	42a80a <_fclose_r+0x8a>
  42a790:	6e63      	ldr	r3, [r4, #100]	; 0x64
  42a792:	07d8      	lsls	r0, r3, #31
  42a794:	d505      	bpl.n	42a7a2 <_fclose_r+0x22>
  42a796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  42a79a:	b92b      	cbnz	r3, 42a7a8 <_fclose_r+0x28>
  42a79c:	2600      	movs	r6, #0
  42a79e:	4630      	mov	r0, r6
  42a7a0:	bd70      	pop	{r4, r5, r6, pc}
  42a7a2:	89a3      	ldrh	r3, [r4, #12]
  42a7a4:	0599      	lsls	r1, r3, #22
  42a7a6:	d53c      	bpl.n	42a822 <_fclose_r+0xa2>
  42a7a8:	4621      	mov	r1, r4
  42a7aa:	4628      	mov	r0, r5
  42a7ac:	f7fe fee6 	bl	42957c <__sflush_r>
  42a7b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  42a7b2:	4606      	mov	r6, r0
  42a7b4:	b133      	cbz	r3, 42a7c4 <_fclose_r+0x44>
  42a7b6:	69e1      	ldr	r1, [r4, #28]
  42a7b8:	4628      	mov	r0, r5
  42a7ba:	4798      	blx	r3
  42a7bc:	2800      	cmp	r0, #0
  42a7be:	bfb8      	it	lt
  42a7c0:	f04f 36ff 	movlt.w	r6, #4294967295
  42a7c4:	89a3      	ldrh	r3, [r4, #12]
  42a7c6:	061a      	lsls	r2, r3, #24
  42a7c8:	d422      	bmi.n	42a810 <_fclose_r+0x90>
  42a7ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
  42a7cc:	b141      	cbz	r1, 42a7e0 <_fclose_r+0x60>
  42a7ce:	f104 0340 	add.w	r3, r4, #64	; 0x40
  42a7d2:	4299      	cmp	r1, r3
  42a7d4:	d002      	beq.n	42a7dc <_fclose_r+0x5c>
  42a7d6:	4628      	mov	r0, r5
  42a7d8:	f7ff f8ee 	bl	4299b8 <_free_r>
  42a7dc:	2300      	movs	r3, #0
  42a7de:	6323      	str	r3, [r4, #48]	; 0x30
  42a7e0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  42a7e2:	b121      	cbz	r1, 42a7ee <_fclose_r+0x6e>
  42a7e4:	4628      	mov	r0, r5
  42a7e6:	f7ff f8e7 	bl	4299b8 <_free_r>
  42a7ea:	2300      	movs	r3, #0
  42a7ec:	6463      	str	r3, [r4, #68]	; 0x44
  42a7ee:	f7fe ffe9 	bl	4297c4 <__sfp_lock_acquire>
  42a7f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  42a7f4:	2200      	movs	r2, #0
  42a7f6:	07db      	lsls	r3, r3, #31
  42a7f8:	81a2      	strh	r2, [r4, #12]
  42a7fa:	d50e      	bpl.n	42a81a <_fclose_r+0x9a>
  42a7fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  42a7fe:	f7ff fb73 	bl	429ee8 <__retarget_lock_close_recursive>
  42a802:	f7fe ffe5 	bl	4297d0 <__sfp_lock_release>
  42a806:	4630      	mov	r0, r6
  42a808:	bd70      	pop	{r4, r5, r6, pc}
  42a80a:	f7fe ffaf 	bl	42976c <__sinit>
  42a80e:	e7bf      	b.n	42a790 <_fclose_r+0x10>
  42a810:	6921      	ldr	r1, [r4, #16]
  42a812:	4628      	mov	r0, r5
  42a814:	f7ff f8d0 	bl	4299b8 <_free_r>
  42a818:	e7d7      	b.n	42a7ca <_fclose_r+0x4a>
  42a81a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  42a81c:	f7ff fb68 	bl	429ef0 <__retarget_lock_release_recursive>
  42a820:	e7ec      	b.n	42a7fc <_fclose_r+0x7c>
  42a822:	6da0      	ldr	r0, [r4, #88]	; 0x58
  42a824:	f7ff fb62 	bl	429eec <__retarget_lock_acquire_recursive>
  42a828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  42a82c:	2b00      	cmp	r3, #0
  42a82e:	d1bb      	bne.n	42a7a8 <_fclose_r+0x28>
  42a830:	6e66      	ldr	r6, [r4, #100]	; 0x64
  42a832:	f016 0601 	ands.w	r6, r6, #1
  42a836:	d1b1      	bne.n	42a79c <_fclose_r+0x1c>
  42a838:	6da0      	ldr	r0, [r4, #88]	; 0x58
  42a83a:	f7ff fb59 	bl	429ef0 <__retarget_lock_release_recursive>
  42a83e:	4630      	mov	r0, r6
  42a840:	bd70      	pop	{r4, r5, r6, pc}
  42a842:	bf00      	nop

0042a844 <_fstat_r>:
  42a844:	b538      	push	{r3, r4, r5, lr}
  42a846:	460b      	mov	r3, r1
  42a848:	4c07      	ldr	r4, [pc, #28]	; (42a868 <_fstat_r+0x24>)
  42a84a:	4605      	mov	r5, r0
  42a84c:	4611      	mov	r1, r2
  42a84e:	4618      	mov	r0, r3
  42a850:	2300      	movs	r3, #0
  42a852:	6023      	str	r3, [r4, #0]
  42a854:	f7fa fff3 	bl	42583e <_fstat>
  42a858:	1c43      	adds	r3, r0, #1
  42a85a:	d000      	beq.n	42a85e <_fstat_r+0x1a>
  42a85c:	bd38      	pop	{r3, r4, r5, pc}
  42a85e:	6823      	ldr	r3, [r4, #0]
  42a860:	2b00      	cmp	r3, #0
  42a862:	d0fb      	beq.n	42a85c <_fstat_r+0x18>
  42a864:	602b      	str	r3, [r5, #0]
  42a866:	bd38      	pop	{r3, r4, r5, pc}
  42a868:	2043a840 	.word	0x2043a840

0042a86c <_isatty_r>:
  42a86c:	b538      	push	{r3, r4, r5, lr}
  42a86e:	4c07      	ldr	r4, [pc, #28]	; (42a88c <_isatty_r+0x20>)
  42a870:	2300      	movs	r3, #0
  42a872:	4605      	mov	r5, r0
  42a874:	4608      	mov	r0, r1
  42a876:	6023      	str	r3, [r4, #0]
  42a878:	f7fa ffe6 	bl	425848 <_isatty>
  42a87c:	1c43      	adds	r3, r0, #1
  42a87e:	d000      	beq.n	42a882 <_isatty_r+0x16>
  42a880:	bd38      	pop	{r3, r4, r5, pc}
  42a882:	6823      	ldr	r3, [r4, #0]
  42a884:	2b00      	cmp	r3, #0
  42a886:	d0fb      	beq.n	42a880 <_isatty_r+0x14>
  42a888:	602b      	str	r3, [r5, #0]
  42a88a:	bd38      	pop	{r3, r4, r5, pc}
  42a88c:	2043a840 	.word	0x2043a840

0042a890 <_lseek_r>:
  42a890:	b570      	push	{r4, r5, r6, lr}
  42a892:	460d      	mov	r5, r1
  42a894:	4c08      	ldr	r4, [pc, #32]	; (42a8b8 <_lseek_r+0x28>)
  42a896:	4611      	mov	r1, r2
  42a898:	4606      	mov	r6, r0
  42a89a:	461a      	mov	r2, r3
  42a89c:	4628      	mov	r0, r5
  42a89e:	2300      	movs	r3, #0
  42a8a0:	6023      	str	r3, [r4, #0]
  42a8a2:	f7fa ffd3 	bl	42584c <_lseek>
  42a8a6:	1c43      	adds	r3, r0, #1
  42a8a8:	d000      	beq.n	42a8ac <_lseek_r+0x1c>
  42a8aa:	bd70      	pop	{r4, r5, r6, pc}
  42a8ac:	6823      	ldr	r3, [r4, #0]
  42a8ae:	2b00      	cmp	r3, #0
  42a8b0:	d0fb      	beq.n	42a8aa <_lseek_r+0x1a>
  42a8b2:	6033      	str	r3, [r6, #0]
  42a8b4:	bd70      	pop	{r4, r5, r6, pc}
  42a8b6:	bf00      	nop
  42a8b8:	2043a840 	.word	0x2043a840

0042a8bc <_read_r>:
  42a8bc:	b570      	push	{r4, r5, r6, lr}
  42a8be:	460d      	mov	r5, r1
  42a8c0:	4c08      	ldr	r4, [pc, #32]	; (42a8e4 <_read_r+0x28>)
  42a8c2:	4611      	mov	r1, r2
  42a8c4:	4606      	mov	r6, r0
  42a8c6:	461a      	mov	r2, r3
  42a8c8:	4628      	mov	r0, r5
  42a8ca:	2300      	movs	r3, #0
  42a8cc:	6023      	str	r3, [r4, #0]
  42a8ce:	f7fa f8f3 	bl	424ab8 <_read>
  42a8d2:	1c43      	adds	r3, r0, #1
  42a8d4:	d000      	beq.n	42a8d8 <_read_r+0x1c>
  42a8d6:	bd70      	pop	{r4, r5, r6, pc}
  42a8d8:	6823      	ldr	r3, [r4, #0]
  42a8da:	2b00      	cmp	r3, #0
  42a8dc:	d0fb      	beq.n	42a8d6 <_read_r+0x1a>
  42a8de:	6033      	str	r3, [r6, #0]
  42a8e0:	bd70      	pop	{r4, r5, r6, pc}
  42a8e2:	bf00      	nop
  42a8e4:	2043a840 	.word	0x2043a840
  42a8e8:	00474345 	.word	0x00474345

0042a8ec <cmaps>:
  42a8ec:	0000002d 0001000e 00000000 0042ac10     -.............B.
  42a8fc:	0000000e                                ....

0042a900 <glyph_bitmap>:
  42a900:	fffffd7f f05f80ff ffa7ffff f0fd7ff7     ......_.........
  42a910:	0f007e00 00f801c0 e007003f 1f00fc00     .~......?.......
  42a920:	00f00380 c00f007e 1200f000 00c00300     ....~...........
  42a930:	801f00fc 7e00f003 01c00f00 003f00f8     .......~......?.
  42a940:	fc00e007 03801f00 ffbdffff c0fffff9     ................
  42a950:	ffffff2d ffffd7fe ffb2ffff f4ffa7ff     -...............
  42a960:	0080fd7f 000e0070 3800c001 00000700     ....p......8....
  42a970:	001c00e0 70008003 ff3f0e00 ffc5ff47     .......p..?.G...
  42a980:	1c00e0f8 00800300 000e0070 3800c001     ........p......8
  42a990:	00000700 001c00e0 7f008003 f9ff8dff     ................
  42a9a0:	7fc0ffff f4ffa7ff 0080fd7f 000e0070     ............p...
  42a9b0:	3800c001 00000700 001c00e0 70008003     ...8...........p
  42a9c0:	ff3f0e00 ffd9ff47 e00000ff 03001c00     ..?.G...........
  42a9d0:	00700080 c001000e 07003800 00e00000     ..p......8......
  42a9e0:	8f03001c f8ffb1ff 00c0ff7f 07000000     ................
  42a9f0:	00f00100 c00f003e 3f00f801 00e00700     ....>......?....
  42aa00:	801f00fc 7e00f003 01c00f00 ffeeffff     .......~........
  42aa10:	e0ff3ffb 03001c00 00700080 c001000e     .?........p.....
  42aa20:	07003800 00e00000 8003001c 06007000     .8...........p..
  42aa30:	ff000000 f3ff87ff 0070fc7f c001000e     ..........p.....
  42aa40:	07003800 00e00000 8003001c 0e007000     .8...........p..
  42aa50:	ffff0100 ffd9ff37 e00000ff 03001c00     ....7...........
  42aa60:	00700080 c001000e 07003800 00e00000     ..p......8......
  42aa70:	8f03001c f8ffb1ff ffc0ff7f f3ff87ff     ................
  42aa80:	0070fc7f c001000e 07003800 00e00000     ..p......8......
  42aa90:	8003001c 0e007000 ffff0100 ffddff37     .....p......7...
  42aaa0:	fc00e0ff 03801f00 007e00f0 f801c00f     ..........~.....
  42aab0:	07003f00 00fc00e0 ff03801f f9ffbdff     .?..............
  42aac0:	ffc0ffff f7ffa7ff 00f0fd7f c00f007e     ............~...
  42aad0:	3f00f801 00e00700 801f00fc 7e00f003     ...?...........~
  42aae0:	00c00f00 000a00f8 e0000003 03001c00     ................
  42aaf0:	00700080 c001000e 07003800 00e00000     ..p......8......
  42ab00:	8003001c 02007000 ffa7ffff f0fd7ff7     .....p..........
  42ab10:	0f007e00 00f801c0 e007003f 1f00fc00     .~......?.......
  42ab20:	00f00380 ff0f007e ddff77ff 00e0ffff     ....~....w......
  42ab30:	801f00fc 7e00f003 01c00f00 003f00f8     .......~......?.
  42ab40:	fc00e007 03801f00 ffbdffff c0fffff9     ................
  42ab50:	ffa7ffff f0fd7ff7 0f007e00 00f801c0     .........~......
  42ab60:	e007003f 1f00fc00 00f00380 ff0f007e     ?...........~...
  42ab70:	d9ff77ff 0000ffff 001c00e0 70008003     .w.............p
  42ab80:	01000e00 003800c0 e0000007 03001c00     ......8.........
  42ab90:	ffb1ff8f c0ff7ff8 000080ff 0000ff01     ................

0042aba0 <glyph_dsc>:
	...
  42aba8:	18800000 0e05030e 00000006 00fe0403     ................
  42abb8:	18800008 00031e13 18800050 01131d03     ........P.......
  42abc8:	1880005b 00031e13 188000a3 00031e13     [...............
  42abd8:	188000eb 01031e13 18800133 00031e13     ........3.......
  42abe8:	1880017b 00031e13 188001c3 01031d13     {...............
  42abf8:	18800208 00031e13 18800250 00031e13     ........P.......
  42ac08:	06000298 07011003                       ........

0042ac10 <glyph_id_ofs_list_0>:
  42ac10:	02000100 06050403 0a090807 00000c0b     ................

0042ac20 <cmaps>:
  42ac20:	0000002d 0001000e 00000000 0042ba4c     -...........L.B.
  42ac30:	0000000e                                ....

0042ac34 <glyph_bitmap>:
  42ac34:	ffffff1f ffffff9f ffffffdf ffffffcf     ................
  42ac44:	ffffffef ffffffe7 bf3f3ee0 fdffffff     .........>?.....
  42ac54:	ff7f7cfc 4fffffff ffffffff ffff7fcc     .|.....O........
  42ac64:	ffe3f3ff fffeffff ffffff1f fffff89f     ................
  42ac74:	80ffe7ff ff010000 000000f0 0000fe3f     ............?...
  42ac84:	c0ff0f00 ff010000 000000f8 0000ff3f     ............?...
  42ac94:	e0ff0700 ff000000 000000fc 0080ff1f     ................
  42aca4:	f0ff0300 7f000000 000000fe 00c0ff0f     ................
  42acb4:	f8ff0100 3f000000 000000ff 00e0ff07     .......?........
  42acc4:	fcff0000 1f000000 000080ff 00f0ff03     ................
  42acd4:	fe7f0000 0f000000 0000c0ff 00f8ff01     ................
  42ace4:	ff3f0000 07000000 0000e0ff 00fcff00     ..?.............
  42acf4:	ff1f0000 01000080 0000f0ff 00fe0f00     ................
  42ad04:	7f000000 00000080 0000e007 001c0e00     ................
  42ad14:	f8010000 00000000 0000807f 00fc1f00     ................
  42ad24:	ff030000 000000e0 0000fe7f c0ff0f00     ................
  42ad34:	ff010000 000000f8 0000ff3f e0ff0700     ........?.......
  42ad44:	ff000000 000000fc 0080ff1f f0ff0300     ................
  42ad54:	7f000000 000000fe 00c0ff0f f8ff0100     ................
  42ad64:	3f000000 000000ff 00e0ff07 fcff0000     ...?............
  42ad74:	1f000000 000080ff 00f0ff03 fe7f0000     ................
  42ad84:	0f000000 0000c0ff 00f8ff01 ff3f0000     ..............?.
  42ad94:	07000000 0000e0ff 00fcff00 ff1f0000     ................
  42ada4:	03000080 0000f0ff fffe7f00 ffc7ffff     ................
  42adb4:	feffff9f ffffe73f fffdf1ff 8fffffff     ....?...........
  42adc4:	ffffff3f ffffcffc 0480ffff e7f1380c     ?............8..
  42add4:	ffffbfcf ffffffff ffffffff ffffffff     ................
  42ade4:	ffffffff 068fdfff fff7f120 ffffffff     ........ .......
  42adf4:	ffffffff ffffffff ffffffff ffffffff     ................
  42ae04:	3effffff ff7f081c 4fffffff ffffffff     ...>.......O....
  42ae14:	ffff7fcc ff83f3ff f0feffff ffffff1f     ................
  42ae24:	ffff009e 00c0e7ff f8010000 00000000     ................
  42ae34:	0000003f 00e00f00 fc010000 00000000     ?...............
  42ae44:	0000803f 00f00700 fe000000 00000000     ?...............
  42ae54:	0000c01f 00f80300 7f000000 00000000     ................
  42ae64:	0000e00f 00fc0100 3f000000 00000080     ...........?....
  42ae74:	0000f007 00fe0000 1f000000 000000c0     ................
  42ae84:	0000f803 007f0000 0f000000 000000e0     ................
  42ae94:	0000fc01 803f0000 07000000 000000f0     ......?.........
  42aea4:	0000fe00 c01f0000 03000000 000000f8     ................
  42aeb4:	ff001f00 e0f8ffff ffffff1f ffff0704     ................
  42aec4:	ff01e0ff 08f8ffff feffff3f ffffc701     ........?.......
  42aed4:	003ec0ff 07000000 000000f0 0000fe00     ..>.............
  42aee4:	c01f0000 03000000 000000f8 00007f00     ................
  42aef4:	e00f0000 01000000 000000fc 00803f00     .............?..
  42af04:	f0070000 00000000 000000fe 00c01f00     ................
  42af14:	f8030000 00000000 0000007f 00e00f00     ................
  42af24:	fc010000 00000000 0000803f 00f00700     ........?.......
  42af34:	fe000000 00000000 0000c01f 00f80300     ................
  42af44:	7f000000 00000000 0000e00f 00fc0100     ................
  42af54:	3f000000 00000080 0000f007 fffe0000     ...?............
  42af64:	1fc0ffff feffff9f ffffe703 ff7df0ff     ..............}.
  42af74:	8fffffff ffffff3f ffffcffc ff80ffff     ....?...........
  42af84:	ffffffff ffffff5f ffffccff 87f3ffff     ...._...........
  42af94:	feffffff ffff3ff0 ff019eff c0e7ffff     .....?..........
  42afa4:	01000000 000000f8 00003f00 e00f0000     .........?......
  42afb4:	01000000 000000fc 00803f00 f0070000     .........?......
  42afc4:	00000000 000000fe 00c01f00 f8030000     ................
  42afd4:	00000000 0000007f 00e00f00 fc010000     ................
  42afe4:	00000000 0000803f 00f00700 fe000000     ....?...........
  42aff4:	00000000 0000c01f 00f80300 7f000000     ................
  42b004:	00000000 0000e00f 00fc0100 3f000000     ...............?
  42b014:	00000080 0000f007 00fe0000 1f000000     ................
  42b024:	000000c0 0000f803 011f0000 f8ffffff     ................
  42b034:	ffff7fe0 ff0f04ff 03eeffff f9ffffff     ................
  42b044:	ffff7ff0 ff0f7efe c0dfffff 03000000     .....~..........
  42b054:	000000f8 00007f00 e00f0000 01000000     ................
  42b064:	000000fc 00803f00 f0070000 00000000     .....?..........
  42b074:	000000fe 00c01f00 f8030000 00000000     ................
  42b084:	0000007f 00e00f00 fc010000 00000000     ................
  42b094:	0000803f 00f00700 fe000000 00000000     ?...............
  42b0a4:	0000c01f 00f80300 7f000000 00000000     ................
  42b0b4:	0000e00f 00fc0100 3f000000 00000080     ...........?....
  42b0c4:	0000f007 00fe0000 1f000000 000000c0     ................
  42b0d4:	0000f803 017f0000 c7ffffff ffff7fe0     ................
  42b0e4:	ff0f3cfe 83f1ffff ffffffff ffff7f80     .<..............
  42b0f4:	ff1ffcff 80ffffff 00000000 00000000     ................
  42b104:	000c0000 03000000 000000c0 00007e00     .............~..
  42b114:	f01f0000 07000000 000080ff 00f0ff00     ................
  42b124:	fe3f0000 07000000 0000c0ff 00f8ff01     ..?.............
  42b134:	ff3f0000 07000000 0000e0ff 00fcff00     ..?.............
  42b144:	ff1f0000 03000080 0000f0ff 00fe7f00     ................
  42b154:	ff0f0000 010000c0 0000f8ff 00ff3f00     .............?..
  42b164:	ff070000 000000e0 0000fcff 80ff1f00     ................
  42b174:	ff030000 000000f0 0000fe7f c0ff0f00     ................
  42b184:	ff010000 000000f8 0000ff3f e0ff0700     ........?.......
  42b194:	ff000000 000000fc 0080ff1f f0ff0300     ................
  42b1a4:	1f000000 fffffffe ff9ffff8 e707ffff     ................
  42b1b4:	eeffffff ffffff1d ff3ff0f9 077efeff     ..........?...~.
  42b1c4:	dfffffff 000000c0 0000f803 007f0000     ................
  42b1d4:	0f000000 000000e0 0000fc01 803f0000     ..............?.
  42b1e4:	07000000 000000f0 0000fe00 c01f0000     ................
  42b1f4:	03000000 000000f8 00007f00 e00f0000     ................
  42b204:	01000000 000000fc 00803f00 f0070000     .........?......
  42b214:	00000000 000000fe 00c01f00 f8030000     ................
  42b224:	00000000 0000007f 00e00f00 fc010000     ................
  42b234:	00000000 0000803f 00f00700 fe000000     ....?...........
  42b244:	00000000 0000c01f 00f80300 7f000000     ................
  42b254:	00000000 0000e003 001c0000 00000000     ................
  42b264:	ffff7f80 ff0fffff c0ffffff ffffff7f     ................
  42b274:	ffff63f0 1f0ffeff 81ffffff fffffff8     .c..............
  42b284:	00803fe0 f0070000 00000000 000000fe     .?..............
  42b294:	00c01f00 f8030000 00000000 0000007f     ................
  42b2a4:	00e00f00 fc010000 00000000 0000803f     ............?...
  42b2b4:	00f00700 fe000000 00000000 0000c01f     ................
  42b2c4:	00f80300 7f000000 00000000 0000e00f     ................
  42b2d4:	00fc0100 3f000000 00000080 0000f007     .......?........
  42b2e4:	00fe0000 1f000000 000000c0 0000f803     ................
  42b2f4:	007f0000 0f000000 000000e0 0000fc01     ................
  42b304:	803f0000 07000000 000000f0 fffffe00     ..?.............
  42b314:	9f1ff8ff 03ffffff ffffffe7 ffff1dee     ................
  42b324:	3ff0f9ff 7efeffff ffffff07 0000c0df     ...?...~........
  42b334:	00f80300 7f000000 00000000 0000e00f     ................
  42b344:	00fc0100 3f000000 00000080 0000f007     .......?........
  42b354:	00fe0000 1f000000 000000c0 0000f803     ................
  42b364:	007f0000 0f000000 000000e0 0000fc01     ................
  42b374:	803f0000 07000000 000000f0 0000fe00     ..?.............
  42b384:	c01f0000 03000000 000000f8 00007f00     ................
  42b394:	e00f0000 01000000 000000fc 00803f00     .............?..
  42b3a4:	f0070000 00000000 000000fe 00c01f00     ................
  42b3b4:	f8030000 00000000 ffff007f 1fe0c7ff     ................
  42b3c4:	3cfeffff ffffff07 ffff81f1 3f80ffff     ...<...........?
  42b3d4:	fcffffff ffffff0f ff7f80ff 0fffffff     ................
  42b3e4:	ffffffff ffff7fc0 ff63f0ff 0ffeffff     ..........c.....
  42b3f4:	ffffff1f fffff881 803fe0ff 07000000     ..........?.....
  42b404:	000000f0 0000fe00 c01f0000 03000000     ................
  42b414:	000000f8 00007f00 e00f0000 01000000     ................
  42b424:	000000fc 00803f00 f0070000 00000000     .....?..........
  42b434:	000000fe 00c01f00 f8030000 00000000     ................
  42b444:	0000007f 00e00f00 fc010000 00000000     ................
  42b454:	0000803f 00f00700 fe000000 00000000     ?...............
  42b464:	0000c01f 00f80300 7f000000 00000000     ................
  42b474:	0000e00f 00fc0100 3f000000 00000080     ...........?....
  42b484:	0000f007 fffe0000 1ff8ffff ffffff9f     ................
  42b494:	ffffe703 ff1deeff f8f9ffff feffff3f     ............?...
  42b4a4:	ffffc77f 00fedfff ff030000 000000f0     ................
  42b4b4:	0000fe7f c0ff0f00 ff010000 000000f8     ................
  42b4c4:	0000ff3f e0ff0700 ff000000 000000fc     ?...............
  42b4d4:	0080ff1f f0ff0300 7f000000 000000fe     ................
  42b4e4:	00c0ff0f f8ff0100 3f000000 000000ff     ...........?....
  42b4f4:	00e0ff07 fcff0000 1f000000 000080ff     ................
  42b504:	00f0ff03 fe7f0000 0f000000 0000c0ff     ................
  42b514:	00f8ff01 ff3f0000 07000000 0000e0ff     ......?.........
  42b524:	00fcff00 ff1f0000 03000080 0000f0ff     ................
  42b534:	fffe7f00 ffc7ffff feffff9f ffffe73f     ............?...
  42b544:	fffdf1ff 8fffffff ffffff3f ffffcffc     ........?.......
  42b554:	7f80ffff ffffffff ffffff4f ff7fccff     ........O.......
  42b564:	e3f3ffff feffffff ffff1fff fff89fff     ................
  42b574:	ffe7ffff 01000080 0000f0ff 00fe3f00     .............?..
  42b584:	ff0f0000 010000c0 0000f8ff 00ff3f00     .............?..
  42b594:	ff070000 000000e0 0000fcff 80ff1f00     ................
  42b5a4:	ff030000 000000f0 0000fe7f c0ff0f00     ................
  42b5b4:	ff010000 000000f8 0000ff3f e0ff0700     ........?.......
  42b5c4:	ff000000 000000fc 0080ff1f f0ff0300     ................
  42b5d4:	7f000000 000000fe 00c0ff0f f8ff0100     ................
  42b5e4:	3f000000 000000ff 00e0ff07 fcff0000     ...?............
  42b5f4:	1f000000 000080ff 00f0ff01 fc0f0000     ................
  42b604:	00000000 0000807f 00e02100 080f0000     .........!......
  42b614:	03000000 000000f0 00007e00 c01f0000     .........~......
  42b624:	03000000 000000f8 00007f00 e00f0000     ................
  42b634:	01000000 000000fc 00803f00 f0070000     .........?......
  42b644:	00000000 000000fe 00c01f00 f8030000     ................
  42b654:	00000000 0000007f 00e00f00 fc010000     ................
  42b664:	00000000 0000803f 00f00700 fe000000     ....?...........
  42b674:	00000000 0000c01f 00f80300 7f000000     ................
  42b684:	00000000 0000e00f 00fc0100 3f000000     ...............?
  42b694:	00000080 0000f007 00fe0000 1f000000     ................
  42b6a4:	000000c0 0000f803 007f0000 03000000     ................
  42b6b4:	000000e0 00001c00 80000000 ffffff7f     ................
  42b6c4:	ffff4fff 7fccffff f3ffffff ffffffe3     .O..............
  42b6d4:	ff1ffffe f89fffff e7ffffff 000080ff     ................
  42b6e4:	00f0ff01 fe3f0000 0f000000 0000c0ff     ......?.........
  42b6f4:	00f8ff01 ff3f0000 07000000 0000e0ff     ......?.........
  42b704:	00fcff00 ff1f0000 03000080 0000f0ff     ................
  42b714:	00fe7f00 ff0f0000 010000c0 0000f8ff     ................
  42b724:	00ff3f00 ff070000 000000e0 0000fcff     .?..............
  42b734:	80ff1f00 ff030000 000000f0 0000fe7f     ................
  42b744:	c0ff0f00 ff010000 000000f8 0000ff3f     ............?...
  42b754:	e0ff0700 ff000000 000000fc 0080ff1f     ................
  42b764:	f0ff0300 1f000000 fffffffe ff9ffff8     ................
  42b774:	e707ffff eeffffff ffffff1d ff3ff8f9     ..............?.
  42b784:	c77ffeff dfffffff 000000fe 00f0ff03     ................
  42b794:	fe7f0000 0f000000 0000c0ff 00f8ff01     ................
  42b7a4:	ff3f0000 07000000 0000e0ff 00fcff00     ..?.............
  42b7b4:	ff1f0000 03000080 0000f0ff 00fe7f00     ................
  42b7c4:	ff0f0000 010000c0 0000f8ff 00ff3f00     .............?..
  42b7d4:	ff070000 000000e0 0000fcff 80ff1f00     ................
  42b7e4:	ff030000 000000f0 0000fe7f c0ff0f00     ................
  42b7f4:	ff010000 000000f8 0000ff3f e0ff0700     ........?.......
  42b804:	ff000000 000000fc 0080ff1f f0ff0300     ................
  42b814:	7f000000 fffffffe ff9fffc7 e73ffeff     ..............?.
  42b824:	f1ffffff fffffffd ff3f8fff cffcffff     ..........?.....
  42b834:	ffffffff ffff7f80 ff4fffff ccffffff     ..........O.....
  42b844:	ffffff7f ffffe3f3 1ffffeff 9fffffff     ................
  42b854:	fffffff8 0080ffe7 f0ff0100 3f000000     ...............?
  42b864:	000000fe 00c0ff0f f8ff0100 3f000000     ...............?
  42b874:	000000ff 00e0ff07 fcff0000 1f000000     ................
  42b884:	000080ff 00f0ff03 fe7f0000 0f000000     ................
  42b894:	0000c0ff 00f8ff01 ff3f0000 07000000     ..........?.....
  42b8a4:	0000e0ff 00fcff00 ff1f0000 03000080     ................
  42b8b4:	0000f0ff 00fe7f00 ff0f0000 010000c0     ................
  42b8c4:	0000f8ff 00ff3f00 ff070000 000000e0     .....?..........
  42b8d4:	0000fcff 80ff1f00 ff030000 000000f0     ................
  42b8e4:	fffffe1f 9ffff8ff 07ffffff ffffffe7     ................
  42b8f4:	ffff1dee 3ff0f9ff 7efeffff ffffff07     .......?...~....
  42b904:	0000c0df 00f80300 7f000000 00000000     ................
  42b914:	0000e00f 00fc0100 3f000000 00000080     ...........?....
  42b924:	0000f007 00fe0000 1f000000 000000c0     ................
  42b934:	0000f803 007f0000 0f000000 000000e0     ................
  42b944:	0000fc01 803f0000 07000000 000000f0     ......?.........
  42b954:	0000fe00 c01f0000 03000000 000000f8     ................
  42b964:	00007f00 e00f0000 01000000 000000fc     ................
  42b974:	00803f00 f0070000 00000000 000000fe     .?..............
  42b984:	00c01f00 f8030000 00000000 ffff007f     ................
  42b994:	1fe0c7ff 3cfeffff ffffff07 ffff81f1     .......<........
  42b9a4:	3f80ffff fcffffff ffffff0f 3f3e80ff     ...?..........>?
  42b9b4:	ffffffbf 007cfcfd 00000000 00000000     ......|.........
	...
  42b9d0:	f1010000 fffffffd e0e3efff              ............

0042b9dc <glyph_dsc>:
	...
  42b9e4:	39200000 200c0621 00000019 00fc0809     .. 9!.. ........
  42b9f4:	39200022 0007462b 3920019b 032c4307     ". 9+F.... 9.C,.
  42ba04:	392001d6 0007462b 3920034f 0008462b     .. 9+F..O. 9+F..
  42ba14:	392004c8 0307432b 39200631 0007462b     .. 9+C..1. 9+F..
  42ba24:	392007aa 0007462b 39200923 0307432b     .. 9+F..#. 9+C..
  42ba34:	39200a8c 0007462b 39200c05 0007462b     .. 9+F.... 9+F..
  42ba44:	0e000d7e 0f032509                       ~....%..

0042ba4c <glyph_id_ofs_list_0>:
  42ba4c:	02000100 06050403 0a090807 00000c0b     ................

0042ba5c <miniLogo>:
  42ba5c:	05c08c04 00000c94 0042ba68              ........h.B.

0042ba68 <miniLogo_map>:
  42ba68:	ffffffff ffffffff ffffffff ffffffff     ................
  42ba78:	ffffffff ffffffff ffffffff ffffffff     ................
  42ba88:	ffffffff ffffffff ffffffff ffffffff     ................
  42ba98:	ffffffff ffffffff ffffffff ffffffff     ................
  42baa8:	ffffffff ffffffff ffffffff ffffffff     ................
  42bab8:	ffffffff ffffffff ffffffff ffffffff     ................
  42bac8:	ffffffff ffffffff ffffffff ffffffff     ................
  42bad8:	ffffffff ffffffff ffffffff ffffffff     ................
  42bae8:	ffffffff ffffffff ffffffff ffffffff     ................
  42baf8:	ffffffff ffffffff ffffffff ffffffff     ................
  42bb08:	ffffffff ffffffff ffffffff ffffffff     ................
  42bb18:	ffffffff ffffffff ffffffff ffffffff     ................
  42bb28:	ffffffff ffffffff ffffffff ffffffff     ................
  42bb38:	ffffffff ffffffff ffffffff ffffffff     ................
  42bb48:	ffffffff ffffffff ffffffff ffffffff     ................
  42bb58:	ffffffff ffffffff ffffffff 7bdfffff     ...............{
  42bb68:	ffffdef7 ffffffff ffffffff ffffffff     ................
  42bb78:	ffffffff ffffffff ffffffff ffffffff     ................
  42bb88:	ffffffff ffffffff ffffffff ffffffff     ................
  42bb98:	ffffffff ffffffff ffffffff ffffffff     ................
  42bba8:	39cfffff 739e8d6d ffff9ce7 ffffffff     ...9m..s........
  42bbb8:	ffffffff ffffffff ffffffff ffffffff     ................
  42bbc8:	ffffffff ffffffff ffffffff ffffffff     ................
  42bbd8:	ffffffff ffffffff ffffffff ffffffff     ................
  42bbe8:	ffffffff deffffff a63cae75 ef85e744     ........u.<.D...
  42bbf8:	ffffbdef ffffffff ffffffff ffffffff     ................
  42bc08:	ffffffff ffffffff ffffffff ffffffff     ................
  42bc18:	ffffffff ffffffff ffffffff ffffffff     ................
  42bc28:	ffffffff ffffffff ffffffff e8443ad7     .............:D.
  42bc38:	a63ca63c 529ec63c ffffffff ffffffff     <.<.<..R........
  42bc48:	ffffffff ffffffff ffffffff ffffffff     ................
  42bc58:	ffffffff ffffffff ffffffff ffffffff     ................
  42bc68:	ffffffff ffffffff ffffffff ffffffff     ................
  42bc78:	95aeffff a63cc73c a63ca63c 19cf084d     ....<.<.<.<.M...
  42bc88:	ffffffff ffffffff ffffffff ffffffff     ................
  42bc98:	ffffffff ffffffff ffffffff ffffffff     ................
  42bca8:	ffffffff ffffffff ffffffff ffffffff     ................
  42bcb8:	ffffffff ffffffff a63c539e a63ca63c     .........S<.<.<.
  42bcc8:	a63ca63c ffff3196 def7ffff f8c65adf     <.<..1.......Z..
  42bcd8:	19cff7c6 ffff9ce7 ffffffff ffffffff     ................
  42bce8:	ffffffff ffffffff ffffffff ffffffff     ................
  42bcf8:	ffffffff ffffffff ffffffff 94a6ffff     ................
  42bd08:	a63cc63c a63ca63c ce7da634 9ce7def7     <.<.<.<.4.}.....
  42bd18:	6c65539e 094d2955 73a62a5d ffffffff     .SelU)M.]*.s....
  42bd28:	ffffffff ffffffff ffffffff ffffffff     ................
  42bd38:	ffffffff ffffffff ffffffff ffffffff     ................
  42bd48:	ffffffff e84439d7 a63ca63c a63ca63c     .....9D.<.<.<.<.
  42bd58:	7be7ae75 e744108e a63cc63c e744a63c     u..{..D.<.<.<.D.
  42bd68:	ffffb5ae ffffffff ffffffff ffffffff     ................
  42bd78:	ffffffff ffffffff dfffffff 3df79eff     ...............=
  42bd88:	9fff1df7 ffffdfff ffffffff c63cef85     ..............<.
  42bd98:	a63ca63c 318ea634 e84cb6b6 a63ca63c     <.<.4..1..L.<.<.
  42bda8:	a63ca63c 5bdf6b65 ffffffff ffffffff     <.<.ek.[........
  42bdb8:	ffffffff ffffffff dfffffff d7d4bcee     ................
  42bdc8:	cea112b3 6d996d99 32bbcea1 fdf618d5     .....m.m...2....
  42bdd8:	9ce7ffff c744ad75 084da63c ef8518c7     ....u.D.<.M.....
  42bde8:	a63ca63c a63ca63c 95ae0955 ffffdfff     <.<.<.<.U.......
  42bdf8:	ffffffff ffffffff ffffffff 7effffff     ...............~
  42be08:	50aa17d5 2a888b90 09880988 09880988     ...P...*........
  42be18:	ab902a88 3ae6d1b2 5ad7ffff 2955f085     .*.....:...Z..U)
  42be28:	bdef118e e7448d6d e744c744 74a64a5d     ....m.D.D.D.]J.t
  42be38:	ffffbdef ffffffff ffffffff ffffffff     ................
  42be48:	5ef7ffff 0c99d4c3 09882988 09880988     ...^.....)......
  42be58:	09880988 09880988 4a880988 fae5efa1     ...........J....
  42be68:	bdefdfff 9ce718c7 39cfffff 739eb5ae     ...........9...s
  42be78:	3ad7b5b6 ffffdef7 ffffffff ffffffff     ...:............
  42be88:	ffffffff 1df7ffff 4a88b1b2 09880988     ...........J....
  42be98:	09880988 09880988 09880988 09880988     ................
  42bea8:	09880988 96ccec98 dfff1df7 ffffdfff     ................
  42beb8:	ffffffff ffffffff ffffffff ffffffff     ................
  42bec8:	ffffffff ffffffff 3ef7ffff 298812b3     ...........>...)
  42bed8:	09880988 09880988 09880988 09880988     ................
  42bee8:	09880988 09880988 09880988 6d994a88     .............J.m
  42bef8:	12b3d1b2 d4c332bb 5bee96cc ffffbfff     .....2.....[....
  42bf08:	ffffffff ffffffff ffffffff 7effffff     ...............~
  42bf18:	8b90f4c3 09880988 09880988 09880988     ................
  42bf28:	09880988 09880988 09880988 09880988     ................
  42bf38:	09880988 09880988 09880988 4a880988     ...............J
  42bf48:	d4c32c99 fffffdf6 ffffffff ffffffff     .,..............
  42bf58:	ffffffff 4d9978dd 09880988 09880988     .....x.M........
  42bf68:	09880988 8b900988 09884a88 09880988     .........J......
  42bf78:	09880988 09880988 09880988 09880988     ................
  42bf88:	09880988 09880988 32bb6a88 ffff1df7     .........j.2....
  42bf98:	ffffffff ffffffff d1b25ef7 09882a88     .........^...*..
  42bfa8:	09880988 09880988 cb900988 cea115c4     ................
  42bfb8:	09880988 09880988 09880988 09880988     ................
  42bfc8:	09880988 09880988 09880988 09880988     ................
  42bfd8:	96cc8a90 ffffdfff ffffffff b9e5ffff     ................
  42bfe8:	0988ab90 09880988 09880988 09880988     ................
  42bff8:	dcee70aa 2a8832bb 09880988 09880988     .p...2.*........
  42c008:	09880988 09880988 09880988 09880988     ................
  42c018:	09880988 09880988 bcee0fa2 ffffffff     ................
  42c028:	ffffffff 298852bb 09880988 09880988     .....R.)........
  42c038:	09880988 96cc2988 93c37eff 09884a88     .....)...~...J..
  42c048:	09880988 09880988 09880988 09880988     ................
  42c058:	09880988 09880988 09880988 cb900988     ................
  42c068:	dffff7d4 ffffffff 8da11df7 09880988     ................
  42c078:	09880988 09880988 0c990988 3ef77bee     .............{.>
  42c088:	4a8815c4 09880988 09880988 09880988     ...J............
  42c098:	09880988 09880988 09880988 09880988     ................
  42c0a8:	09880988 52bb2a88 ffff7eff d9e5ffff     .....*.R.~......
  42c0b8:	09886a88 09880988 09880988 09880988     .j..............
  42c0c8:	ddf690b2 76ccd9e5 09886a88 29880988     .......v.j.....)
  42c0d8:	09880988 09880988 09880988 09880988     ................
  42c0e8:	09880988 09880988 09880988 dcf6efa1     ................
  42c0f8:	ffffffff 098855cc 09880988 8b900988     .....U..........
  42c108:	09882a88 d7d42a88 55cc38d5 8b90f7d4     .*...*...8.U....
  42c118:	cb900988 6d9932bb 09880988 09880988     .....2.m........
  42c128:	09880988 09880988 09880988 09880988     ................
  42c138:	4d990988 ffff3be6 53bbffff 09880988     ...M.;.....S....
  42c148:	6d990988 b1b23bee 4d990988 f2b25bee     ...m.;.....M.[..
  42c158:	38d573bb 0988cb90 5ef790aa 6a9076cc     .s.8.......^.v.j
  42c168:	09880988 09880988 09880988 09880988     ................
  42c178:	09880988 09880988 79ddcb90 dfffffff     ...........y....
  42c188:	0988b1b2 8b900988 9fff76cc 6a9096cc     .........v.....j
  42c198:	7beef1b2 12b34d99 0c9958dd 76cc0988     ...{.M...X.....v
  42c1a8:	3be6dcf6 09880faa 09880988 09880988     ...;............
  42c1b8:	09880988 09880988 09880988 cb900988     ................
  42c1c8:	ffff78dd 12bbdfff 2c990c99 1ae632bb     .x.........,.2..
  42c1d8:	b9e5f7d4 d7d48ea1 4a88f7d4 78ddb1b2     ...........J...x
  42c1e8:	ec902d99 f4c3fae5 38dd76cc 2faa50aa     .-.......v.8.P./
  42c1f8:	2faa2faa 2faa2faa 2faa2faa 2faa2faa     ././././././././
  42c208:	2faa2faa 1ae6b1b2 ffffffff 58dd7bee     ././.........{.X
  42c218:	3be678dd aea115cc b3c31ae6 f1b2fae5     .x.;............
  42c228:	2faa2988 6d9999dd 7bee70aa aea1cea1     .)./...m.p.{....
  42c238:	fae579dd dae5dae5 dae5dae5 dae5dae5     .y..............
  42c248:	dae5dae5 dae5dae5 1ae6dae5 ffff7eff     .............~..
  42c258:	99ddffff 90b290b2 cc9050aa 58dd6a90     .........P...j.X
  42c268:	1ae67bee 09886d99 b9ddcea1 96ccefa1     .{...m..........
  42c278:	8b9058dd 2d992988 efa1efa1 efa1efa1     .X...).-........
  42c288:	efa1efa1 efa1efa1 efa1efa1 efa1efa1     ................
  42c298:	9ceef1b2 ffffffff 298879dd 09880988     .........y.)....
  42c2a8:	2a880988 bfffb4c3 8a90d7d4 6d990988     ...*...........m
  42c2b8:	52bb99dd 12bb9cee 09882988 09880988     ...R.....)......
  42c2c8:	09880988 09880988 09880988 09880988     ................
  42c2d8:	09880988 cea10988 ffffbcee dcf6ffff     ................
  42c2e8:	09882c99 09880988 70aa0988 f1b29cee     .,.........p....
  42c2f8:	09882a88 38d52c99 9cee79dd 09884d99     .*...,.8.y...M..
  42c308:	09880988 09880988 09880988 09880988     ................
  42c318:	09880988 09880988 2a880988 5ef712b3     ...........*...^
  42c328:	ffffffff d1b2dfff 09882988 09880988     .........)......
  42c338:	12bbec98 09882c99 ec900988 7eff38d5     .....,.......8.~
  42c348:	4a8858dd 09880988 09880988 09880988     .X.J............
  42c358:	09880988 09880988 09880988 09880988     ................
  42c368:	96cc8b90 ffffdfff ffffffff ab9058dd     .............X..
  42c378:	09880988 09880988 09884a88 09880988     .........J......
  42c388:	d7d4ab90 12bbbfff 09880988 09880988     ................
  42c398:	09880988 09880988 09880988 09880988     ................
  42c3a8:	09880988 cea10988 ffff5bee ffffffff     .........[......
  42c3b8:	3df7ffff 09882faa 09880988 09880988     ...=./..........
  42c3c8:	09880988 6a900988 bcee55cc 09886d99     .......j.U...m..
  42c3d8:	09880988 09880988 09880988 09880988     ................
  42c3e8:	09880988 09880988 4a880988 9fffd4c3     ...........J....
  42c3f8:	ffffffff ffffffff f7d4dfff 0988ec90     ................
  42c408:	09880988 09880988 09880988 32bb2a88     .............*.2
  42c418:	6a8835cc 09880988 09880988 09880988     .5.j............
  42c428:	09880988 09880988 09880988 09880988     ................
  42c438:	7bee6d99 ffffffff ffffffff ffffffff     .m.{............
  42c448:	52bb3df7 09886a90 09880988 09880988     .=.R.j..........
  42c458:	09880988 cb90ab90 09880988 09880988     ................
  42c468:	09880988 09880988 09880988 09880988     ................
  42c478:	09880988 b7d4ab90 ffffdfff ffffffff     ................
  42c488:	ffffffff ffffffff 70aa7bee 09880988     .........{.p....
  42c498:	09880988 09880988 09880988 09880988     ................
  42c4a8:	09880988 09880988 09880988 09880988     ................
  42c4b8:	09880988 09880988 f4c38a90 ffff9fff     ................
  42c4c8:	ffffffff ffffffff ffffffff ffffffff     ................
  42c4d8:	2faabcee 09880988 09880988 09880988     .../............
  42c4e8:	09880988 09880988 09880988 09880988     ................
  42c4f8:	09880988 09880988 09880988 d4c38a90     ................
  42c508:	ffff7eff ffffffff ffffffff ffffffff     .~..............
  42c518:	ffffffff ffffffff b1b2fdf6 09884a88     .............J..
  42c528:	09880988 09880988 09880988 09880988     ................
  42c538:	09880988 09880988 09880988 09880988     ................
  42c548:	14c4ab90 ffff7eff ffffffff ffffffff     .....~..........
  42c558:	ffffffff ffffffff ffffffff ffffffff     ................
  42c568:	14c43df7 6a886d99 09880988 09880988     .=...m.j........
  42c578:	09880988 09880988 09880988 09880988     ................
  42c588:	8a900988 58dd0faa ffff9fff ffffffff     .......X........
  42c598:	ffffffff ffffffff ffffffff ffffffff     ................
  42c5a8:	ffffffff ffffffff fae59fff 8ea193bb     ................
  42c5b8:	2a888b90 09880988 09880988 09880988     ...*............
  42c5c8:	4a880988 2faacb90 bcee55cc ffffffff     ...J.../.U......
  42c5d8:	ffffffff ffffffff ffffffff ffffffff     ................
  42c5e8:	ffffffff ffffffff ffffffff ffffffff     ................
  42c5f8:	7effffff d7d45bee 0faa53bb 4d996d99     ...~.[...S...m.M
  42c608:	4d994d99 70aa8ea1 38ddd4c3 bfffbcee     .M.M...p...8....
  42c618:	ffffffff ffffffff ffffffff ffffffff     ................
  42c628:	ffffffff ffffffff ffffffff ffffffff     ................
  42c638:	ffffffff ffffffff ffffffff bfffffff     ................
  42c648:	fdf67eff bceebcee 3df7dcf6 bfff7eff     .~.........=.~..
  42c658:	ffffffff ffffffff ffffffff ffffffff     ................
  42c668:	ffffffff ffffffff ffffffff ffffffff     ................
  42c678:	ffffffff ffffffff ffffffff ffffffff     ................
  42c688:	ffffffff ffffffff ffffffff ffffffff     ................
  42c698:	ffffffff ffffffff ffffffff ffffffff     ................
  42c6a8:	ffffffff ffffffff ffffffff ffffffff     ................
  42c6b8:	ffffffff ffffffff ffffffff bfffdfff     ................
  42c6c8:	7ef79ef7 5def7def 3def3def 3def3def     ...~.}.].=.=.=.=
  42c6d8:	3def3def 5def5def 9ef77def bfff9ef7     .=.=.].].}......
  42c6e8:	ffffdfff ffffffff ffffffff ffffffff     ................
  42c6f8:	ffffffff 454c4449 00000000 51726d54     ....IDLE....TmrQ
  42c708:	00000000 20726d54 00637653 2074754f     ....Tmr Svc.Out 
  42c718:	6d20666f 726f6d65 00000079 0000ffff     of memory.......
  42c728:	4c4c554e 696f7020 7265746e 00000000     NULL pointer....
  42c738:	6f5f766c 00006a62 0000ffff 640a6f4e     lv_obj......No.d
  42c748:	00617461                                ata.

0042c74c <_lv_bpp1_opa_table>:
  42c74c:	0000ff00                                ....

0042c750 <_lv_bpp2_opa_table>:
  42c750:	ffaa5500                                .U..

0042c754 <_lv_bpp4_opa_table>:
  42c754:	33221100 77665544 bbaa9988 ffeeddcc     .."3DUfw........

0042c764 <_lv_bpp8_opa_table>:
  42c764:	03020100 07060504 0b0a0908 0f0e0d0c     ................
  42c774:	13121110 17161514 1b1a1918 1f1e1d1c     ................
  42c784:	23222120 27262524 2b2a2928 2f2e2d2c      !"#$%&'()*+,-./
  42c794:	33323130 37363534 3b3a3938 3f3e3d3c     0123456789:;<=>?
  42c7a4:	43424140 47464544 4b4a4948 4f4e4d4c     @ABCDEFGHIJKLMNO
  42c7b4:	53525150 57565554 5b5a5958 5f5e5d5c     PQRSTUVWXYZ[\]^_
  42c7c4:	63626160 67666564 6b6a6968 6f6e6d6c     `abcdefghijklmno
  42c7d4:	73727170 77767574 7b7a7978 7f7e7d7c     pqrstuvwxyz{|}~.
  42c7e4:	83828180 87868584 8b8a8988 8f8e8d8c     ................
  42c7f4:	93929190 97969594 9b9a9998 9f9e9d9c     ................
  42c804:	a3a2a1a0 a7a6a5a4 abaaa9a8 afaeadac     ................
  42c814:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
  42c824:	c3c2c1c0 c7c6c5c4 cbcac9c8 cfcecdcc     ................
  42c834:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
  42c844:	e3e2e1e0 e7e6e5e4 ebeae9e8 efeeedec     ................
  42c854:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

0042c864 <wcorr.10557>:
  42c864:	81808080 83828281 87868584 8d8c8a89     ................
  42c874:	9593918f 9e9b9997 a7a5a2a0 b2afadaa     ................
  42c884:	000000b5 0000ffff ffaa5500 33221100     .........U...."3
  42c894:	77665544 bbaa9988 ffeeddcc ffaa5500     DUfw.........U..
  42c8a4:	33221100 77665544 bbaa9988 ffeeddcc     .."3DUfw........
  42c8b4:	006e6962                                bin.

0042c8b8 <cmaps>:
  42c8b8:	00000020 0001005f 00000000 00000000      ..._...........
  42c8c8:	00020000 000000b0 0060f7f3 0042fc4c     ..........`.L.B.
  42c8d8:	00000000 0003003b                       ....;...

0042c8e0 <glyph_dsc>:
	...
  42c8e8:	03c00000 00000000 03c00000 00000a03     ................
  42c8f8:	0580000f 05000505 09d0001c 00000a0a     ................
  42c908:	08b0004e fe000f09 0bd00092 00000a0c     N...............
  42c918:	09a000ce ff000b0a 02f00105 05000503     ................
  42c928:	04b0010d fd010e04 04c00129 fd000e04     ........).......
  42c938:	05a00145 05000606 08200157 02000708     E.......W. .....
  42c948:	03300173 fe000503 0560017b 03000305     s.0.....{.`.....
  42c958:	03300183 00000303 04f00188 ffff0e07     ..0.............
  42c968:	095001b9 00000a09 053001e6 00000a04     ..P.......0.....
  42c978:	081001fa 00000a08 08000222 00000a08     ........".......
  42c988:	0960024a 00000a0a 0810027c 00000a08     J.`.....|.......
  42c998:	08a002a4 00000a09 086002d1 00000a08     ..........`.....
  42c9a8:	090002f9 00000a09 08a00326 00000a08     ........&.......
  42c9b8:	0330034e 00000803 0330035a fd000b03     N.0.....Z.0.....
  42c9c8:	0820036b 01000808 0820038b 02000608     k. ....... .....
  42c9d8:	082003a3 01000808 080003c3 00000a08     .. .............
  42c9e8:	0e8003eb fd000d0e 0a400446 00ff0a0c     ........F.@.....
  42c9f8:	0aa00482 00010a09 0a2004af 00000a0a     .......... .....
  42ca08:	0b9004e1 00010a0a 09600513 00010a08     ..........`.....
  42ca18:	08e0053b 00010a08 0ad00563 00000a0a     ;.......c.......
  42ca28:	0b600595 00010a09 045005c2 00010a02     ..`.......P.....
  42ca38:	073005cc 00ff0a07 0a1005ef 00010a0a     ..0.............
  42ca48:	08500621 00010a08 0d600649 00010a0b     !.P.....I.`.....
  42ca58:	0b600680 00010a09 0bc006ad 00000a0c     ..`.............
  42ca68:	0a2006e9 00010a09 0bc00716 fd000d0c     .. .............
  42ca78:	0a300764 00010a09 08b00791 00000a09     d.0.............
  42ca88:	083007be 00000a09 0b1007eb 00010a09     ..0.............
  42ca98:	09f00818 00ff0a0b 0fc0084f 00000a10     ........O.......
  42caa8:	0970089f 00000a0a 091008d1 00ff0a0b     ..p.............
  42cab8:	09300908 00000a09 04b00935 fd010e04     ..0.....5.......
  42cac8:	04f00951 ffff0e07 04b00982 fd000e04     Q...............
  42cad8:	0830099e 02010607 070009b3 ff000107     ..0.............
  42cae8:	086009b7 09010205 086009bc 00000808     ..`.......`.....
  42caf8:	099009dc 00010b08 08000a08 00000808     ................
  42cb08:	09900a28 00000b09 08900a5a 00000808     (.......Z.......
  42cb18:	04f00a7a 00000b06 09b00a9b fd000b09     z...............
  42cb28:	09900acd 00010b08 03e00af9 00010b02     ................
  42cb38:	04000b04 fdfe0e05 08a00b27 00010b08     ........'.......
  42cb48:	03e00b53 00010b02 0ed00b5e 0001080d     S.......^.......
  42cb58:	09900b92 00010808 08e00bb2 00000809     ................
  42cb68:	09900bd6 fd010b08 09900c02 fd000b09     ................
  42cb78:	05c00c34 00010805 07000c48 00000807     4.......H.......
  42cb88:	05d00c64 00000a06 09800c82 00010808     d...............
  42cb98:	07d00ca2 00ff0809 0c900cc6 0000080d     ................
  42cba8:	07c00cfa 00000808 07d00d1a fdff0b09     ................
  42cbb8:	07500d4c 00000807 04f00d68 fd000e05     L.P.....h.......
  42cbc8:	04300d8b fd010e02 04f00d99 fd000e05     ..0.............
  42cbd8:	08200dbc 03000308 05e00dc8 06000506     .. .............
  42cbe8:	04600dd7 03000304 0e000ddd feff0f0f     ..`.............
  42cbf8:	0e000e4e 00000b0e 0e000e9b ff000d0e     N...............
  42cc08:	0e000ef6 00000b0e 09a00f43 00000b0a     ........C.......
  42cc18:	0e000f7a fe000f0e 0e000fe3 fe000f0e     z...............
  42cc28:	0fc0104c ff000d10 0e0010b4 fe000f0e     L...............
  42cc38:	0fc0111d 00000b10 0e001175 fe000f0e     ........u.......
  42cc48:	070011de ff000c07 0a801208 ff000c0b     ................
  42cc58:	0fc0124a fe000e10 0e0012ba 00000b0e     J...............
  42cc68:	0c401307 fe010e0a 0c40134d fe000f0d     ..@.....M.@.....
  42cc78:	0c4013af ff000d0d 0c401404 ff000d0d     ..@.......@.....
  42cc88:	0c401459 fe010e0a 0c40149f ffff0d0e     Y.@.......@.....
  42cc98:	08c014fa ff000d09 08c01535 ff000d09     ........5.......
  42cca8:	0c401570 ff000d0d 0c4015c5 0300040d     p.@.......@.....
  42ccb8:	0fc015df 00000b10 11801637 fe000f12     ........7.......
  42ccc8:	0fc016be feff0f11 0e00173e ff000d0e     ........>.......
  42ccd8:	0c401799 0100080d 0c4017cd 0100080d     ..@.......@.....
  42cce8:	11801801 00000b12 0e001864 00000b0e     ........d.......
  42ccf8:	0e0018b1 fe000f0e 0e00191a feff0f0f     ................
  42cd08:	0c40198b ff000d0d 0c4019e0 fe000f0d     ..@.......@.....
  42cd18:	0c401a42 ff000d0d 08c01a97 feff0f0a     B.@.............
  42cd28:	0c401ae2 fe000f0d 0c401b44 fe000f0d     ..@.....D.@.....
  42cd38:	0fc01ba6 00000b10 0e001bfe feff0f10     ................
  42cd48:	0a801c76 fe000f0b 11801cc9 ff000d12     v...............
  42cd58:	11801d3e 00000a12 11801d98 00000a12     >...............
  42cd68:	11801df2 00000a12 11801e4c 00000a12     ........L.......
  42cd78:	11801ea6 00000a12 11801f00 ff000c12     ................
  42cd88:	0c401f6c fe000f0c 0c401fc6 fe000f0d     l.@.......@.....
  42cd98:	0e002028 feff0f0f 11802099 00000b12     ( ....... ......
  42cda8:	0a8020fc fe000f0b 0e10214f 00000a0f     . ......O!......

0042cdb8 <gylph_bitmap>:
  42cdb8:	0dd9a00e 800cc890 11600ab7 1fd9800b     ..........`.....
  42cdc8:	88f09109 f080081f 00000088 3c200d00     .............. <
  42cdd8:	000f0000 ff2f0069 01f7ffff 10a6115c     ....i./.....\...
  42cde8:	c3006900 00880000 ff9f00d2 12f0ffff     .i..............
  42cdf8:	20e223c5 c003d200 04f00000 000000b0     .#. ............
  42ce08:	00000070 0000000e 0000e000 30eaef19     p..............0
  42ce18:	a7e6d60c 000ef402 e0801f00 ef6f0000     ..............o.
  42ce28:	16000050 0000e5ff 01f00a0e 135fe000     P............._.
  42ce38:	b06e5ef8 91fecf05 000e0000 70000000     .^n............p
  42ce48:	dd080000 00a70030 04d0024b 007700c0     ....0...K.....w.
  42ce58:	00201dd0 a7d0034b dc070000 30ccc434     .. .K.......4..0
  42ce68:	2d1d0000 0000d022 b3003ba6 3ac00500     ...-"....;.....:
  42ce78:	1d00a300 d0000d20 0400a600 4d0040cc     .... ........@.M
  42ce88:	000030fc 00c018f7 d005f201 6ebb0000     .0.............n
  42ce98:	5f000040 070000f3 8003dbe6 ba1d302f     @.._......../0..
  42cea8:	01005fa0 b41f40df 03c0fe48 b240fcbf     ._...@..H.....@.
  42ceb8:	00000000 f0011f00 00f0001f 0bf10300     ................
  42cec8:	4f400f90 9b007d00 aa00aa00 7d009b00     ..@O.}.........}
  42ced8:	0f004f00 03900b40 0e005ef1 04c00860     .O..@....^..`...
  42cee8:	00f301f0 00e600f5 01f500e6 08f004f3     ................
  42cef8:	5e600ec0 00930000 09c2a688 dd4d40fe     ..`^.........@M.
  42cf08:	509342b1 00005200 00005004 0000a008     .B.P.R...P......
  42cf18:	1f00a008 03f3ffff 0030b339 0000a008     ........9.0.....
  42cf28:	0100a008 601ef603 00002ce1 f9ff0300     .......`.,......
  42cf38:	00103303 402ef503 400e0000 00e00400     .3.....@...@....
  42cf48:	00009a00 0400400e 9a0000f0 400e0000     .....@.........@
  42cf58:	00f00300 00009a00 0300500e 9a0000f0     .........P......
  42cf68:	500e0000 00f00300 fe4c0000 b64f0070     ...P......L.p.O.
  42cf78:	b00d908f f4325f00 4fe70000 a40c0020     ....._2....O ...
  42cf88:	ca0000f2 0e00402f 0500db70 68fb04f2     ..../@..p......h
  42cf98:	cf0400f9 fbef00e7 ab00cb44 ab00ab00     ........D.......
  42cfa8:	ab00ab00 ab00ab00 df07ab00 858e10ea     ................
  42cfb8:	0001c07e 0000f106 0000f006 0000900d     ~...............
  42cfc8:	1c0000cc db0100c0 e51d0000 ff7f4244     ............DB..
  42cfd8:	ff7ff9ff 4424f0ff 0000905f 090000bc     ......$D_.......
  42cfe8:	3f0000e1 040010d8 0000d06d 0010f402     ...?....m.......
  42cff8:	75bdf402 df19d07d 000010ea 0000a00d     ...u}...........
  42d008:	0000ac00 00e10700 404f0000 f6020010     ..........O@....
  42d018:	1d00f500 00f500a0 ffffff7f 333313f3     ..............33
  42d028:	000030f7 0000f500 00f50000 f0ffff09     .0..............
  42d038:	4044b40a 0000800c 0000700e 40fcff0f     ..D@.....p.....@
  42d048:	f25c3403 f7000000 f7000010 f16c858e     .4\...........l.
  42d058:	30fbdf08 d5ef2a00 57d63f00 00c00c40     ...0.*...?.W@...
  42d068:	00f40200 5b4f0000 fe04a1ff 3fd05d84     ......O[.....].?
  42d078:	303f0080 f20300e8 dc45f806 e9df0500     ..?0......E.....
  42d088:	ffff9f10 44449dfd 04009ce9 0b0000f2     ......DD........
  42d098:	2f0000b0 ad000040 f6010000 e0080000     .../@...........
  42d0a8:	800e0000 106f0000 fe9e0100 63be0091     ......o........c
  42d0b8:	600fc06e cc006f00 02c02b20 00e2ffef     n..`.o.. +......
  42d0c8:	d04c42dc 1f00205f 0200f255 35d50ef5     .BL._ ..U......5
  42d0d8:	ef1a00de bf0310ea a42f20ea 008ee14b     ......... /.K...
  42d0e8:	009de900 714fdd00 ff07ff29 02009efc     ......Oq).......
  42d0f8:	0000ac10 6507f602 ef0ab08f 532e00d7     .......e.......S
  42d108:	000000f5 3f000000 532ee452 000000f5     .......?R..S....
  42d118:	2e000000 210df652 000001d0 00310000     ....R..!......1.
  42d128:	01f26c00 0f00d68e 0a0000c3 000040fb     .l...........@..
  42d138:	0070ee17 00c30500 1f000000 03f3ffff     ..p.............
  42d148:	00303333 00000000 1f000000 03f3ffff     330.............
  42d158:	04303333 0e000000 000010d7 0020f95c     330.........\. .
  42d168:	00f22a00 06b1af03 1c0082de 00000060     .*..........`...
  42d178:	07000000 9e10eadf 01c06e74 00f00600     ........tn......
  42d188:	00c00900 00208e00 0000f206 00007008     ...... ......p..
  42d198:	00000000 0000800b 0000900c daef6c00     .............l..
  42d1a8:	3d000040 d91610a4 09e50100 90ca98ee     @..=............
  42d1b8:	43bd800a 0fd3c0af 0c00f213 063c69c0     ...C.........i<.
  42d1c8:	c00700d0 d0064b3b 2cc00700 00f2033c     ....;K.....,<...
  42d1d8:	0f4ac00c 9e43bd10 800ac5e3 cf91ee09     ..J...C.........
  42d1e8:	00e50190 00000000 10a43d00 00000028     .........=..(...
  42d1f8:	d9ef7c00 00000010 0000f10c d73f0000     .|............?.
  42d208:	00000000 00006eb9 0ef20200 09000050     .....n......P...
  42d218:	00d007a0 00301f00 7f0000f4 00fbffff     ......0.........
  42d228:	3333e700 f005204f 900c0000 0000900c     ..33O ..........
  42d238:	ff8ff106 e308c4fe 8ef24b33 581f0000     ........3K.....X
  42d248:	f11800e0 f8ffff8f 3733e308 00008ef6     ..........37....
  42d258:	00e0c809 338e9d00 ff787f34 0070fdff     .......34.x...p.
  42d268:	40fbcf07 6a96cf00 00e20af5 601f3000     ...@...j.....0.`
  42d278:	4f000000 00000020 0000204f 00601f00     ...O ...O ....`.
  42d288:	e20a0000 01300000 f56a96cf fbdf0700     ......0...j.....
  42d298:	feff8f40 448e00a4 8e70cf46 f3070000     @......DF.p.....
  42d2a8:	0000008e 00008eda 008e9d00 8e9d0000     ................
  42d2b8:	da000000 0700008e 46448ef3 ff8f70bf     ..........DF.p..
  42d2c8:	8f00a4fe 8ef6ffff 8e414444 8e000000     ........DDA.....
  42d2d8:	8f000000 8ec0ffff 8e203333 8e000000     ........33 .....
  42d2e8:	8e000000 8f424444 8ff9ffff 8ef6ffff     ....DDB.........
  42d2f8:	8e414444 8e000000 8e000000 8f000000     DDA.............
  42d308:	8ec0ffff 8e203333 8e000000 8e000000     ....33 .........
  42d318:	00000000 50fccf07 6a96cf00 00e20af6     .......P...j....
  42d328:	601f2000 4f000000 00000020 0000204f     . .`...O ...O ..
  42d338:	00601fb9 e30ab900 00b90000 f86a96cf     ..`...........j.
  42d348:	fcdf0700 00008e60 00e0e808 008e8e00     ....`...........
  42d358:	e0e80800 8f8e0000 e8ffffff 9e3333e3     .............33.
  42d368:	0800008e 0000e0e8 00008e8e 00e0e808     ................
  42d378:	8e8e8e00 8e8e8e8e 8e8e8e8e c0ffff02     ................
  42d388:	00bc4404 00c00900 00009c00 0000c009     .D..............
  42d398:	0900009c ba0020c0 608fb50e 8e80fe3c     ..... .....`<...
  42d3a8:	504f0000 f604008e 3f008e00 038e0070     ..OP.......?p...
  42d3b8:	8e0000f8 0000c02e 00f6ec8e 7fb08f00     ................
  42d3c8:	008e0030 8e00e10a 00cc0000 1e00008e     0...............
  42d3d8:	00008ea0 00008e00 00008e00 00008e00     ................
  42d3e8:	00008e00 00008e00 00008e00 00008e00     ................
  42d3f8:	44448e00 ffff8f40 00008ef2 f7e80800     ..DD@...........
  42d408:	fe020000 0000f18f a0dce8bf 8d9e4f00     .............O..
  42d418:	870d302f 069cd0e8 018d7ee0 e807e5e7     /0.......~......
  42d428:	00fc06d0 0a008d7e d0e80720 7e000000     ....~... ......~
  42d438:	0800108e 0000fce8 00f98f8e f6e6e808     ................
  42d448:	098e8e00 e0e808f3 8e8ee10c e8b81e00     ................
  42d458:	ee3f00e0 6f00008e 0000e0e8 cf0700ae     ..?....o........
  42d468:	000050eb f96b96cf 00e20a00 1f605f00     .P....k......_`.
  42d478:	0a000060 00204fd0 4ff00600 06000020     `....O ....O ...
  42d488:	00601ff0 0ad00a00 5f0000e2 96cf0060     ..`........_`...
  42d498:	0000fa6b 50ebdf07 fdff8f00 45e40870     k......P....p..E
  42d4a8:	008eb08f e0385f00 8ef50100 483f0000     ....._8.......?H
  42d4b8:	d04d01e0 b2ffff8f 1033e308 00008e00     ..M.......3.....
  42d4c8:	00e00800 07000000 0050ebcf 6b96cf00     ..........P....k
  42d4d8:	e20a00f9 605f0000 0000601f 204fd00a     ......_`.`....O 
  42d4e8:	f0060000 0000204f 601ff005 d00a0000     ....O .....`....
  42d4f8:	0000e20a df01605f 00fa5a85 fcdf0800     ...._`...Z......
  42d508:	00000050 9421ec01 1b000000 0000c1ff     P.....!.........
  42d518:	00120000 70fdff8f 8f45e408 00008eb0     .......p..E.....
  42d528:	00e0385f 008ef501 e0383f00 8fd04d01     _8.......?8..M..
  42d538:	08c2ffff 00da33e3 f602008e 0500e008     .....3..........
  42d548:	fd9e01f3 64ce00a2 402f706b f8010000     .......dkp/@....
  42d558:	06000000 000095fd 50ee6a01 9f000000     .........j.P....
  42d568:	05002000 47a53ff1 ef4b00eb ffff10e9     . ...?.G..K.....
  42d578:	4424ffff 004044bd 0000c009 00009c00     ..$D.D@.........
  42d588:	00c00900 009c0000 c0090000 9c000000     ................
  42d598:	09000000 000000c0 9c00009c a90b0000     ................
  42d5a8:	ba0000c0 0b00009c 0000c0a9 00009cba     ................
  42d5b8:	00c0a90b 008eba00 f4940d00 0cf50300     ................
  42d5c8:	00fd68f8 10e9ef09 0000b00c 205fc00a     .h............_ 
  42d5d8:	00f50100 8e0000e9 00f00800 1f00700e     .............p..
  42d5e8:	00f10560 c900ad00 f4030000 0000303f     `...........?0..
  42d5f8:	00c0ba0c f55f0000 00000000 6f0000ee     ......_........o
  42d608:	b00d0010 1ff20200 f13f0060 0bd00800     ........`.?.....
  42d618:	e68b00b0 06700d00 9be600f0 01202f00     ......p....../ .
  42d628:	4ff103f5 00008d10 0eb009ca 0000d860     ...O........`...
  42d638:	09600e6f 0000f3b2 04109f1f 0000d0f9     o.`.............
  42d648:	0000fb0c 000080ef 0000f607 3f00309f     .............0.?
  42d658:	a00d0050 9d00f208 04cc0000 2f0000f3     P............../
  42d668:	0000709e 0000fc06 10fe0900 4d4f0000     .p............OM
  42d678:	e80100b0 0b00f702 207f00d0 0b00207f     ........... . ..
  42d688:	00b00cd0 2f009c00 302f0050 0c009e00     ......./P./0....
  42d698:	e8000090 0000f105 00e6f305 fd0c0000     ................
  42d6a8:	00000000 0000403f 00f30200 2f000000     ....?@........./
  42d6b8:	00000030 0000f302 ffffff4f 4a444491     0.......O....DDJ
  42d6c8:	030000f3 010000f6 000000ea 000000cc     ................
  42d6d8:	0000109e 0000406f 0000703f 4444d41e     ....o@..?p....DD
  42d6e8:	ffffff36 8df68ffc 8d008d31 8d008d00     6.......1.......
  42d6f8:	8d008d00 8d008d00 8d008d00 8f318d00     ..............1.
  42d708:	00005df6 0000f200 0000800b 0100006d     .]..........m...
  42d718:	0b0000f2 6d000080 f2010000 700b0000     .......m.......p
  42d728:	006d0000 00f20100 00700b00 00006d00     ..m.......p..m..
  42d738:	f3bff201 f302f325 f302f302 f302f302     ....%...........
  42d748:	f302f302 f302f302 f325f302 ad00f3bf     ..........%.....
  42d758:	c41e0000 a0850800 100ee200 0b97005b     ............[...
  42d768:	eee00250 0be0eeee b00900c0 10eacf04     P...............
  42d778:	b05d740b f0040000 f2eece04 f214821f     .t].............
  42d788:	f204104f f23d701f f2d7df04 000000ba     O....p=.........
  42d798:	000000ba 000000ba 30fc8eba f34bd5bf     ...........0..K.
  42d7a8:	ca0010be 7e0000ba 7e0000ba ca0010be     .......~...~....
  42d7b8:	f35bd5bf 30fc8eb9 60fd7d00 f448f709     ..[....0.}.`..H.
  42d7c8:	2000502f 0000005f 0000005f 2000502f     /P. _..._.../P. 
  42d7d8:	f448f709 60fd7d00 1f000000 01000040     ..H..}.`....@...
  42d7e8:	000000f4 ef08401f f70af4c4 f542ff48     .....@......H.B.
  42d7f8:	5ff40700 452f0000 f40100f0 6f00502f     ..._../E..../P.o
  42d808:	7e63ae40 fc8e00f4 8e00404f d50a40fc     @.c~....O@...@..
  42d818:	202ff438 ee5f8c00 215fffee 702f1111     8./ .._..._!../p
  42d828:	f8091000 7d00e446 9e0080fe 41f405e3     ....F..}.......A
  42d838:	cf00c008 d329f0ff 00d00820 0800d008     ......). .......
  42d848:	d00800d0 00d00800 0000d008 604efc7e     ............~.N`
  42d858:	f67f74af 5f00502f 0000f065 00005ff6     .t../P._e...._..
  42d868:	00f6620f f709f606 0750ff47 00f5c4ef     .b......G.P.....
  42d878:	203f0000 b06e64cb 80fdae03 0000ba00     ..? .dn.........
  42d888:	0000ba00 0000ba00 fb8eba00 6dc5bf20     ............ ..m
  42d898:	0300bed0 0000baf2 0000baf4 0000baf5     ................
  42d8a8:	0000baf5 0000baf5 00a8baf5 babababa     ................
  42d8b8:	babababa 00b00a00 00000099 0a00ab00     ................
  42d8c8:	00ab00b0 ab00b00a 00b00a00 b00a00ab     ................
  42d8d8:	4e06aa00 baa0df71 ba000000 ba000000     ...Nq...........
  42d8e8:	ba000000 bac01c00 ba00cc01 bb00d11c     ................
  42d8f8:	bf0060cf bd00e1db ba00dc11 ba703f00     .`...........?p.
  42d908:	baf30700 babababa babababa 9eb9baba     ................
  42d918:	d4df15fa ed45fb0b bef24ae6 00f60600     ......E..J......
  42d928:	00a07b0e c900204f f10300ba a09b0c00     .{..O ..........
  42d938:	00103f00 0300bac9 9b0c00f1 103f00a0     .?............?.
  42d948:	9eb9c900 b4bf20fb 00bed05d 00baf203     ..... ..].......
  42d958:	00baf400 00baf500 00baf500 00baf500     ................
  42d968:	7d00f500 9f0060fd 2f708f74 057f0050     ...}.`..t.p/P...
  42d978:	f30100f0 2f00005f 0700f532 48f709f0     ...._../2......H
  42d988:	df0700f7 8eb900d6 c4bf30fc 10bef33a     .........0..:...
  42d998:	00baca00 00ba7e00 10be7e00 d5bfca00     .....~...~......
  42d9a8:	7ebaf35b 00ba30fc 00ba0000 00ba0000     [..~.0..........
  42d9b8:	8e000000 af403ffc 2ff48e74 457f0050     .....?@.t../P..E
  42d9c8:	f40100f0 2f00005f 0700f542 48f70af4     ...._../B......H
  42d9d8:	ef0840ff 0000f4c4 00401f00 00f40100     .@........@.....
  42d9e8:	401f0000 fd4b8eb9 0b10be71 00ba00b0     ...@..K.q.......
  42d9f8:	ba00a00b 00a00b00 13eadf05 6fa035f7     .............5.o
  42da08:	ee010000 6a011096 000030ef 6f646cd9     .......j.0...ldo
  42da18:	70fdae62 0800d008 ffcf00d0 20d329f0     b..p.........). 
  42da28:	0800d008 d00800d0 00d00800 0051f505     ..............Q.
  42da38:	00c8e39f 00c8f302 00c8f302 00c8f302     ................
  42da48:	00c9f302 00abf303 835ff307 df06f37e     .........._.~...
  42da58:	900df3c5 6ea00a00 00f30100 007d00f5     .......n......}.
  42da68:	600ec009 f0243f00 b9c80000 ff060000     ...`.?$.........
  42da78:	0f000030 00c800c0 0d00f106 cf00d056     0...........V...
  42da88:	1ff00360 009c2f30 07b8009a 400ef1b2     `...0/.........@
  42da98:	0cd6e005 0f00e074 997c006f a0af0000     ....t...o.|.....
  42daa8:	0040ff01 0b00f405 304f00e0 d009e107     ..@.......O0....
  42dab8:	d900402f 3f0000d9 4f0000d0 e70100e1     /@.....?...O....
  42dac8:	b00b00bb 107e701e 900df305 6fa00a00     .....p~........o
  42dad8:	00f30100 007d00f6 600dc009 f0342f00     ......}....`./4.
  42dae8:	a9c90000 ff050000 0e000020 000000c0     ........ .......
  42daf8:	940000e5 1b0000ad 000020fc a1ffff5f     ......... .._...
  42db08:	00f43733 0000e701 8e0000cb 404f0010     37............O@
  42db18:	33a31e00 fcffff26 0fa06e00 00f40192     ...3&....n......
  42db28:	f401401f 3f303f00 306f00c0 1f00f401     .@...?0?..o0....
  42db38:	00f40140 fa00401f 8bea0520 8b8b8b8b     @....@.. .......
  42db48:	8b8b8b8b 8b8b8b8b 0250be8b f00500ae     ..........P.....
  42db58:	05005f00 104f00f0 4f10df00 00f00550     ._....O....OP...
  42db68:	f005005f 2a005f00 00e40be0 b440ec07     _...._.*......@.
  42db78:	c0df251e 00000001 2b30cc04 0057c001     .%........0+..W.
  42db88:	c0012b93 0630cc05 0bf60fa1 000000e2     .+....0.........
	...
  42dba0:	fb7b0200 04000000 d0ffff9d ffaf0300     ..{.............
  42dbb0:	00fdffff ffffaf00 00d0dfff b6ffff0a     ................
  42dbc0:	0000ed10 000094af 0a00d00e 000000f1     ................
  42dbd0:	af0000ed 0e000010 f10a00d0 fd450000     ..............E.
  42dbe0:	10af0000 d0ffef01 00f19d17 0efcff5f     ............_...
  42dbf0:	0010ffff ff31fdaf 0000e0ff bd030001     ......1.........
  42dc00:	000000a3 18500000 84888888 ddbffa05     ......P.........
  42dc10:	affddddd 00107fe4 e04eca00 0000104f     ..........N.O...
  42dc20:	effe0ec8 cf000010 ee3fe0ef 0ef8eeee     ..........?.....
  42dc30:	66768ff6 f86feb66 000010af 3fe08fcc     ..vff.o........?
  42dc40:	c8000010 65dffc0e cfee5555 ffff5fc2     .......eUU..._..
  42dc50:	572cf9ff 77770575 ffff7577 ffffff1f     ..,Wu.wwwu......
  42dc60:	2fffffff ffffffff ff0effef 01feffff     .../............
  42dc70:	11110010 feef1011 ffffff0e 2ffffffe     .............../
  42dc80:	ffffffff ff1fffff 68ffffff 88880787     ...........h....
  42dc90:	87688688 88888807 1fffff86 ffffffff     ..h.............
  42dca0:	ff2fffff dfffffff ffff0dfd 0000fdff     ../.............
  42dcb0:	01000000 00000050 f81d0000 00000000     ....P...........
  42dcc0:	00fddf01 1d000000 602de2ff fedf0100     ..........-`....
  42dcd0:	00f7df20 00e2ff1d df71ff8f 080020fe      .........q.. ..
  42dce0:	e2fffeff 8f000000 0020feff ff080000     .......... .....
  42dcf0:	000000e2 207d0000 00000000 00000000     ......} ........
  42dd00:	0b00607f 00f6efe2 ff4ff8bf 04d1ff6b     .`........O.k...
  42dd10:	10fdffff e1ff5f00 ffbf0000 ff0b00f6     ....._..........
  42dd20:	bf60ffdf f5ff14fd 4f00d1cf 001017f6     ..`........O....
  42dd30:	00006003 00001100 00000000 000000ff     .`..............
  42dd40:	ff216f00 0600f712 16ff61ff f91f60ff     .o!......a...`..
  42dd50:	9f10ff01 01e06ff1 f60e10ff ff0180af     .....o..........
  42dd60:	cffa0810 10ff0160 80affc06 0800aa00     ....`...........
  42dd70:	00d07ffb f70d0000 0000f81f 07f18f00     ................
  42dd80:	2a0091ff 9f0070ff f9ffeeff cf050000     ...*.p..........
  42dd90:	0050fdff 44020000 00000020 00000000     ..P....D .......
  42dda0:	00000000 00a0ff0a 0c000000 0000c0ff     ................
  42ddb0:	ffdfd603 0e306dfd ffffffff ff5fe0ff     .....m0......._.
  42ddc0:	ffffaaff f4ff1af5 a1ff4f00 00d0ff03     .........O......
  42ddd0:	0430ff0d 0f00f0ff ff4f40ff ffbf22fb     ..0......@O.."..
  42dde0:	ffff2ff4 f2ffffff fffffe09 0090efff     ./..............
  42ddf0:	e5ff5e50 00000005 00c0ff0c 04000000     P^..............
  42de00:	00004077 03000000 00410310 9f000000     w@........A.....
  42de10:	00f50df5 fd1b0000 00f58dff b1df0200     ................
  42de20:	00f5ff2d 3ef84f00 00f5bfc2 ff55ff07     -....O.>......U.
  42de30:	40fe39fe ff8fe39f f66ff5ff ffff2aac     .9.@......o..*..
  42de40:	e673ffff ffff5f00 00f1ffff d7ff6f00     ..s.._.......o..
  42de50:	00f2ff7f 90ff6f00 00f2ff0d 90ff6f00     .....o.......o..
  42de60:	00f2ff0d 70ff4f00 00e1ff0b 33000000     .....O.p.......3
  42de70:	00000000 b0ff0b00 00000000 00c0ff0c     ................
  42de80:	0c000000 0000c0ff ff0c0000 000000c0     ................
  42de90:	c0ff0c00 8f000000 f8ffffff ff2e0000     ................
  42dea0:	00e2ffff ffef0200 000020fe e2ff2d00     ......... ...-..
  42deb0:	99790000 9928de82 fbffff97 ffffbf22     ..y...(....."...
  42dec0:	ffffffff ffffffff faffffff ccaccfb3     ................
  42ded0:	cccccccc bb0600ca 30babbbb ff4f0000     ...........0..O.
  42dee0:	e1ffffff 30ef0000 fb060000 00f80900     .......0........
  42def0:	cf000000 00d04f50 2f000000 4284dfe1     ....PO...../...B
  42df00:	4b340000 fdfffff9 ffff0100 fffffffb     ..4K............
  42df10:	ffff8b98 fffffffc ffffffff fffffffc     ................
  42df20:	ffffffff ffff9ffb ffffffff 000000f6     ................
  42df30:	33000000 ff8d0100 00ef00c6 ffffff4e     ...3........N...
  42df40:	ff04dfe4 ff4c00b3 00f90eff ff8f0000     ......L.........
  42df50:	0100c06f 8effffff de010050 0000edee     o.......P.......
  42df60:	00000000 22222200 21000000 10ffffff     ....."""...!....
  42df70:	fff80800 0010bcfb fcfff41e df010010     ................
  42df80:	e8effec0 10fe8e44 ffff1afe fd00c1ff     ....D...........
  42df90:	94bb2800 00000000 02007002 ef0200ef     .(.......p......
  42dfa0:	fffffffd ffffffff ffffffff ffffffff     ................
  42dfb0:	4734ffff 0500f0ff 050000ff 000000c0     ..4G............
  42dfc0:	70020000 02000000 000000ef 00f0ef02     ...p............
  42dfd0:	ffffff0d ffff2002 1f8ef0ff 00ffffff     ..... ..........
  42dfe0:	ffffffe7 ff5f3ff0 9008ffff f0ff4734     .....?_.....4G..
  42dff0:	05000000 000000ff 00c00500 00000000     ................
  42e000:	00000000 07000000 00000070 05007002     ........p....p..
  42e010:	000000fa 8100f02e 0200604f dd01f0ef     ........O`......
  42e020:	ffdff007 1e32f0ff fffff680 278ef0ff     ......2........'
  42e030:	ffffb9e0 730ef0ff ffff9bf1 543ff0ff     .......s......?T
  42e040:	ffff9af0 0a89f0ff 4734d8c0 7f00f0ff     ..........4G....
  42e050:	0000f343 f602f05f 0000b00c 0000c005     C..._...........
  42e060:	000010bf 09000000 000000e3 02000000     ................
  42e070:	88370010 88888888 ffffef73 feffffff     ..7.....s.......
  42e080:	ffdf32fe f9ffffff fdff7f00 10fdffff     .2..............
  42e090:	7fa0ffcf ffffffff ff0700fa a05ff3ff     .............._.
  42e0a0:	ffcf0000 00000330 00fccf00 00000000     ....0...........
  42e0b0:	ccccffcf ffcccccc ffffffaf 04f9ffff     ................
  42e0c0:	31000030 0600e01f 00e01ff9 e01ffa7f     0..1............
  42e0d0:	1ffaff09 faffafe0 ffffeb1f ffff1ffa     ................
  42e0e0:	ff1ffaff 1ffaffff faffffe6 ff5fe01f     .............._.
  42e0f0:	04e01ffa e01ffaff 0ffa3e00 d70200d0     .........>......
  42e100:	00000000 00000200 0c000000 000020fb     ............. ..
  42e110:	ffff0000 00000090 e6ffff0f ff000000     ................
  42e120:	30fcffff ffff0f00 0091ffff ffffffff     ...0............
  42e130:	ff0fe6ff ffffffff fffffff2 0ffdffff     ................
  42e140:	ffffffff ffff00f8 00b2ffff fdffff0f     ................
  42e150:	ff000040 0000f7ff a1ff0f00 00000000     @...............
  42e160:	0000406a 14000000 44012044 ffff0d42     j@......D .DB...
  42e170:	f1ffdf10 0ff3ffff ff3fffff ffff40ff     ..........?..@..
  42e180:	f4fffff4 4fffff0f ff40ffff fffff4ff     .......O..@.....
  42e190:	ffff0ff4 40ffff4f fff4ffff ff0ff4ff     ....O..@........
  42e1a0:	ffff4fff f4ffff40 0ff4ffff ff4fffff     .O..@.........O.
  42e1b0:	ffff30ff c0ff9ff3 00fcff09 44444414     .0...........DDD
  42e1c0:	ff0d4244 ffffffff fffffff1 3fffffff     DB.............?
  42e1d0:	ffffffff fffff4ff ffffffff ffffff4f     ............O...
  42e1e0:	fff4ffff ffffffff ffff4fff f4ffffff     .........O......
  42e1f0:	ffffffff ff4fffff ffffffff fffffff4     ......O.........
  42e200:	4fffffff ffffffff ff9ff3ff fcffffff     ...O............
  42e210:	00100200 e20f4200 0ffb0300 fb0430fe     .....B.......0..
  42e220:	04f4ff0f ffff0ffb ff0ffb54 0ffbfaff     ........T.......
  42e230:	fbffffff ffffff0f ffff0ffb ff0ffbd6     ................
  42e240:	0ffb14fd fb04c1ff 0400fb0f 00a00cfb     ................
  42e250:	0000fa03 00000000 00120000 00000000     ................
  42e260:	0060ff03 2e000000 0000f5ff ffef0100     ..`.............
  42e270:	000040ff ffffff1d cf0000f3 feffffff     .@..............
  42e280:	ffff0a20 e0ffffff ffffff0e 03f2ffff      ...............
  42e290:	99999999 88055099 88888888 ffff0f70     .....P......p...
  42e2a0:	f3ffffff ffffff0f 0bf4ffff ffffffff     ................
  42e2b0:	0000d1ff 00000000 00903f00 00fc3f00     .........?...?..
  42e2c0:	10fd3f00 10fd3f00 10fd3f00 10fd1f00     .?...?...?......
  42e2d0:	f4cf0000 cf000000 000000f4 0000f4cf     ................
  42e2e0:	00f4cf00 e0cf0000 a4000000 00000000     ................
  42e2f0:	10cd0000 fd1f0000 3f000010 000010fd     ...........?....
  42e300:	0010fd3f 10fd3f00 fd3f0000 ff080000     ?....?....?.....
  42e310:	ff080090 ff080090 ff080090 ff020090     ................
  42e320:	07000090 00000080 50040000 00000000     ...........P....
  42e330:	0060ff02 3f000000 000000f7 70ff0300     ..`....?.......p
  42e340:	00000000 0000f73f ff9a9906 ff8099c9     ....?...........
  42e350:	ffffffff ffff3dff f2ffffff f73f1101     .....=........?.
  42e360:	00001011 0070ff03 3f000000 000000f7     ......p....?....
  42e370:	70ff0300 00000000 0000d30c 99996900     ...p.........i..
  42e380:	0f989999 ffffffff ffdff3ff ffffffff     ................
  42e390:	00000020 00000000 64560100 00000000      .........Vd....
  42e3a0:	effebf03 000010f9 0310fa7f 0800e4df     ................
  42e3b0:	b409a0ff 4f50ff1e ff0b20ff efe1ff26     ......PO. ..&...
  42e3c0:	ffcf09ff bffaff63 ffff09ff 1ef6ff54     ....c.......T...
  42e3d0:	fbdf51ff 03b0ff09 3004e2ef 0010fc5f     .Q.........0_...
  42e3e0:	6a95ff2c 000090ff fddf4900 00000092     ,..j.....I......
	...
  42e3f8:	000020cd 00000000 00f58f00 00406614     . ...........f@.
  42e408:	ef040000 ffefffac 00000091 00a1ff1c     ................
  42e418:	0030fe4d f59f0000 f4ef31ab 05b10700     M.0......1......
  42e428:	7fe1ffff fe0f10fe f5ff2d30 0c90ff4f     ........0-..O...
  42e438:	af00e0ff 60ff5ff6 00f4ff02 fbefff06     ....._.`........
  42e448:	fd4f0000 ff3e0010 020000c0 0154e8df     ..O...>.......T.
  42e458:	0000e3bf ffae0500 60ff0760 00000000     ........`..`....
  42e468:	4e000000 000000f6 00000000 0000a101     ...N............
	...
  42e480:	d03e0000 00000000 ff0c0000 00000080     ..>.............
  42e490:	ff060000 000020ff ef000000 0000fbff     ..... ..........
  42e4a0:	8f000000 00f4cffc 2f000000 d0ff00fb     .........../....
  42e4b0:	0b000000 ff0fc0ff 04000070 ff01fdff     ........p.......
  42e4c0:	000010ff 2fe0ffdf 0000faff 9bffff7f     ......./........
  42e4d0:	00f3ffff b0ffff1f c0ffff0e feffff0a     ................
  42e4e0:	ffffff24 ffffff60 ffffffff cccc06fa     $...`...........
  42e4f0:	cccccccc 000030cb 36000000 00000000     .....0.....6....
  42e500:	807f0000 0000dbdd fff8ef8d ff07b0ff     ................
  42e510:	6f55fdff aff86ff4 740500e2 207e90ff     ..Uo.o.....t..~ 
  42e520:	fa3f0000 00000000 50b2ef02 2e01004a     ..?........PJ...
  42e530:	8ff41dfd d1ffffb0 fbffff0b 0020feff     .............. .
  42e540:	12fbffcf 02000021 0000c09f 5b000000     ....!..........[
  42e550:	07000000 000000a0 b0ff0800 08000000     ................
  42e560:	00b0ffff 95ff0800 0800b0ff ff0590ff     ................
  42e570:	90ff07b0 b0ff0500 0000909f 4000fd05     ...............@
  42e580:	03000000 00204c10 0bb60000 000020fe     .....L ...... ..
  42e590:	fe2ef0cf f4cf0020 20fe2e00 0000f4cf     .... ...... ....
  42e5a0:	f4cffe2e 2e000000 0000f4ff f42e0000     ................
  42e5b0:	00000000 00001300 30080000 00000000     ...........0....
  42e5c0:	bf000000 bbbb08f3 0b0090bb ff39ffff     ..............9.
  42e5d0:	00f1ffff f0cfcf8f f10a0000 942f3800     .............8/.
  42e5e0:	0a000080 2f0000f1 00000090 0000f10a     ......./........
  42e5f0:	0000902f 30f10a03 00902f00 f8cb1f00     /......0./......
  42e600:	eb2f00f8 ff39bbbb 1f00e2ff b0ffffff     ../...9.........
  42e610:	0020fd9f 00000000 00d10800 00878837     .. .........7...
  42e620:	ef000000 00a0ffff ffff0000 ccccfdff     ................
  42e630:	ffffffb6 ffffffff ffffffff ffffffff     ................
  42e640:	ffffffff ffffffff ffffffff ffffffff     ................
  42e650:	ffffffff ffffffff ffffffff ffffffff     ................
  42e660:	ffafffff ffffffff 000000f9 00000000     ................
  42e670:	dd010000 00000010 d1ff1d00 01000000     ................
  42e680:	10fdffdf ff1d0000 00d1ffff ffff9f00     ................
  42e690:	0000f9ff c1ff1c01 00000010 00c0ff0c     ................
  42e6a0:	0c000000 0000c0ff ff0c0000 790000c0     ...............y
  42e6b0:	b3ff3b99 ffff9799 ff2b44b2 feffffff     .;.......D+.....
  42e6c0:	ffffefdd ffffffff accfb3fa cccccccc     ................
  42e6d0:	0000cacc 02000000 00000000 ff040000     ................
  42e6e0:	000000c7 ffaf0000 000000f0 fdff1f00     ................
  42e6f0:	00000000 c0ffff06 00000000 00f7ff08     ................
  42e700:	00000000 0030ff0c 04000000 0000c0ff     ......0.........
  42e710:	ef010000 4a0000f3 f8df0230 fedf0500     .......J0.......
  42e720:	00fbef15 ffffef00 0000faff ffffff0b     ................
  42e730:	000000f7 a2ffff7f 02000000 000085ba     ................
  42e740:	04000000 00000086 faff0610 d1df0200     ................
  42e750:	01f13cef e00efadf fadf21af f6ef9f00     .<.......!......
  42e760:	0000fadf fbffff8d 06000000 0000fdff     ................
  42e770:	ffef4800 6f0000f6 f6fffbff cff30e00     .H.....o........
  42e780:	00f6ff23 04f20aee fe09f6ff ff0400fc     #...............
  42e790:	10da08f1 00620200 00000000 00000000     ......b.........
  42e7a0:	87f9ff6f ff080000 08f798ff f9ff8fa6     o...............
  42e7b0:	a8ff9059 ccfcffff ff8ffa0f fff1ffff     Y...............
  42e7c0:	ffffffa8 8ffa1fff f1ffffff ffffa8ff     ................
  42e7d0:	fa1fffff ffffff8f ffa8fff1 1fffffff     ................
  42e7e0:	ffff7ffa e3fff0ff 21222212 ffffff0f     .........""!....
  42e7f0:	ac0000f9 50cbcccc 99490000 00959999     .......P..I.....
  42e800:	ffffff0e fd00f6ff 4f222222 00c00ff6     ........"""O....
  42e810:	f3ff0100 000000fc c06fff1f ff020000     ..........o.....
  42e820:	fffffff6 6fffffff ffdcffff fffff6ff     .......o........
  42e830:	ffff05b0 00f6ff6f fff6ff0f ff06c0ff     ....o...........
  42e840:	ffff6fff f6ffffed ffffff9f 0010fdff     .o..............
  42e850:	00000000 f0ffff01 ffff0400 ff0600d0     ................
  42e860:	080080ff 0030ffff aaffff0a ffff0ca6     ......0.........
  42e870:	ff0ef8ff 0be1ffff 60ffdfdd fd4f0000     ...........`..O.
  42e880:	7f000000 000000f3 0000a0bf 0010ff00     ................
  42e890:	00f80300 c0030000 00000000 00000020     ............ ...
  42e8a0:	b5ef5504 ff000052 b0ff1ffd ffff0f00     .U..R...........
  42e8b0:	0000fcff 3353ffff ff0f0020 57fbff97     ......S3 ......W
  42e8c0:	aff8ff00 0ff8c6ff fcff8aff f8ffa14a     ............J...
  42e8d0:	22e3ffaf ff8aff0f fff4ffff ffffaff8     ..."............
  42e8e0:	8aff4fff f4ffffff ffaf5235 0040ffff     .O......5R....@.
  42e8f0:	ffffff0a 7f0000f4 20feffff 10010000     ........... ....
  42e900:	00000000 0000af00 8f010000 000030fa     .............0..
  42e910:	ffffef02 bf000050 10ffffff ffff1f00     ....P...........
  42e920:	0300f5ff ffffffff ff5f0070 00f9ffff     ........p._.....
  42e930:	ffffff08 df00c0ff ffffffff ffff9f20     ............ ...
  42e940:	0efdffff ffffffff 2202f2ff 21222222     ...........""""!
  42e950:	ff080000 000000c0 00a20900 bb5b0000     ..............[.
  42e960:	bbbbbbbb ffffa3bb ffffffff 0cfcfbff     ................
  42e970:	0d1de130 0bfcfc11 0d1de030 fefffc10     0.......0.......
  42e980:	fefeefff f1fffcef a070085a f3fffc5f     ........Z.p._...
  42e990:	c292297b bffffc7f bfbbbbcb 0bfcfccb     {)..............
  42e9a0:	0d000020 cffffc00 cfcccccc ff9ffbcc      ...............
  42e9b0:	ffffffff 0000f6ff 00000000 00000002     ................
  42e9c0:	05000000 0000b0df ef070000 0000d0ff     ................
  42e9d0:	ffff1800 000070ff ffffff29 3b0000ff     .....p..)......;
  42e9e0:	ffffffff ff0a00f8 ffffffff ff0f00f1     ................
  42e9f0:	ffffffff 9a0400a0 ffffafaa 00000020     ............ ...
  42ea00:	fbff0e00 00000000 f4ff0e00 00000000     ................
  42ea10:	c0ff0e00 00000000 50ff0e00 00000000     ...........P....
  42ea20:	00fd0d00 00000000 00b30400 55350000     ..............5U
  42ea30:	0f000255 f4f2ffff ffffff00 ff0ff42f     U.........../...
  42ea40:	f3fff2ff 32ffffff ffff1f22 fff7ffff     .......2".......
  42ea50:	ffffffff ffffff8f fffff8ff 8fffffff     ................
  42ea60:	ffffffff fffffff8 ff8fffff f8ffffff     ................
  42ea70:	ffffffff ffff8fff 8af8ffff aaaaaaaa     ................
  42ea80:	00000030 00315524 03000000 ffffffaf     0...$U1.........
  42ea90:	020000c7 defeffbf 00f6ffff 10b5ff5f     ............_...
  42eaa0:	ff8e0300 00d3dfb0 00000000 0018f58f     ................
  42eab0:	c8feae05 00600410 ffffdf02 0000f8ff     ......`.........
  42eac0:	95ff0c00 40ff7d34 a2020000 77000000     ....4}.@.......w
  42ead0:	00000000 00960200 00000000 ff0d0000     ................
  42eae0:	00000050 0e000000 000060ff 00000000     P........`......
  42eaf0:	0000da05 bb5b0000 bbbbbbbb ff20babb     ......[....... .
  42eb00:	ffffffff 90ffffff 222212fc 0f222222     ..........""""".
  42eb10:	ff5ffcf7 ffffffff 5ffcfa2c ffffffff     .._.....,.._....
  42eb20:	fcfa21ff ffffff5f fa27ffff 666626fc     .!.._.....'..&ff
  42eb30:	1f666666 bbbbfefa bbbbbbbb ffafb1bf     fff.............
  42eb40:	ffffffff 0050ffff 00000000 00000000     ......P.........
  42eb50:	bbbbbb5b babbbbbb ffffff20 ffffffff     [....... .......
  42eb60:	12fc90ff 21222222 fcf70f00 ffffff5f     ...."""!...._...
  42eb70:	fa0c00f8 ffff5ffc 0100f8ff ff5ffcfa     ....._........_.
  42eb80:	00f8ffff 26fcfa07 63666666 fefa0f00     .......&fffc....
  42eb90:	bbbbbbbb b1bfbbbb ffffffaf ffffffff     ................
  42eba0:	00000050 00000000 bb5b0000 bbbbbbbb     P.........[.....
  42ebb0:	ff20babb ffffffff 90ffffff 222212fc     .. ...........""
  42ebc0:	0f000010 ff5ffcf7 0000d0ff 5ffcfa0c     ......_........_
  42ebd0:	00d0ffff fcfa0100 d0ffff5f fa070000     ........_.......
  42ebe0:	666626fc 0f000050 bbbbfefa bbbbbbbb     .&ffP...........
  42ebf0:	ffafb1bf ffffffff 0050ffff 00000000     ..........P.....
  42ec00:	00000000 bbbbbb5b babbbbbb ffffff20     ....[....... ...
  42ec10:	ffffffff 12fc90ff 00000022 fcf70f00     ........".......
  42ec20:	0030ff5f fa0c0000 30ff5ffc 01000000     _.0......_.0....
  42ec30:	ff5ffcfa 00000030 26fcfa07 00001066     .._.0......&f...
  42ec40:	fefa0f00 bbbbbbbb b1bfbbbb ffffffaf     ................
  42ec50:	ffffffff 00000050 00000000 bb5b0000     ....P.........[.
  42ec60:	bbbbbbbb ff20babb ffffffff 90ffffff     ...... .........
  42ec70:	000000fc 0f000000 0000fcf7 00000000     ................
  42ec80:	00fcfa0c 00000000 fcfa0100 00000000     ................
  42ec90:	fa070000 000000fc 0f000000 bbbbfefa     ................
  42eca0:	bbbbbbbb ffafb1bf ffffffff 0050ffff     ..............P.
	...
  42ecbc:	0000b207 00000000 00fadf0a 00000000     ................
  42eccc:	f53da900 04000000 00e00240 00000010     ..=.....@.......
  42ecdc:	600bf8af 6c000000 ffffff30 ffffffff     ...`...l0.......
  42ecec:	f9aff4ff 00500c00 05406d00 c0040050     ......P..m@.P...
  42ecfc:	00100000 00000000 00e83ec4 00000000     .........>......
  42ed0c:	faef2e00 00000000 4f000000 000000fa     ...........O....
	...
  42ed24:	10010000 07000000 00b3ffef 8ffdaf00     ................
  42ed34:	ff0420ff b0ff09fd 12fdfe0a f50ef0af     . ..............
  42ed44:	f30e2c5d 1233ff0f ff0ff59f f6ff07f3     ],....3.........
  42ed54:	06e2ff0f fe0ff6ff f57f1324 2c7df50d     ........$.....},
  42ed64:	ff0af30d f0bf11fd 0bfeff03 7f00a0ff     ................
  42ed74:	10febffe dcac0300 00000081 00004334     ............4C..
  42ed84:	ff7f6605 ff5066f9 ffffffff 666635ff     .f...fP......5ff
  42ed94:	50666666 cccccc1c ff02c4cc ffffffff     fffP............
  42eda4:	fbf32f60 02f66d7f f5b72fff f22f60df     `/...m.../...`/.
  42edb4:	f65d7ffb b72fff02 2f60dff5 5d7ffbf2     ..].../...`/...]
  42edc4:	2fff02f6 60dff5b7 7ffbf32f ff01f66d     .../...`/...m...
  42edd4:	ffffffff ccbc0750 0090cccc 00000000     ....P...........
  42ede4:	00200100 00000000 0050ff04 02000000     .. .......P.....
  42edf4:	0050ffff 39040000 0000feff 39ff0400     ..P....9.......9
  42ee04:	0000a0ff 39ffff04 040000b0 20ffffff     .......9....... 
  42ee14:	ff040000 00b0ffff ffff0400 0000b0ff     ................
  42ee24:	ffffff04 040000b0 b0ffffff bf000000     ................
  42ee34:	00b0ffff ff0d0000 0000b0ff ffff0000     ................
  42ee44:	000000b0 60a80900 00000000 17000000     .......`........
  42ee54:	88888888 02004087 ffffffef 00f4ffff     .....@..........
  42ee64:	cfffff3e f7ffcfff f9ffef03 ff09f808     >...............
  42ee74:	ffff3ef8 2e4020fe ffdff8ff 01e1ffff     .>... @.........
  42ee84:	9ff8ffef 80ffffff f8ff8f00 f9ffff09     ................
  42ee94:	ff09c202 ff9f00f8 4efe4efe 0900f8ff     .........N.N....
  42eea4:	ffffffff 00f7ffff ffff8f00 c1ffffff     ................
  42eeb4:	00000000 ef030000 03e2ffff bfcefbfb     ................
  42eec4:	031dffa4 f1fffaa1 af1f3ad0 ffffffff     .........:......
  42eed4:	fffffffa ffafffff faffffff ffffffff     ................
  42eee4:	ffffafff fffaffff ffffffff ffffffaf     ................
  42eef4:	fffffaff adffffff ffffffff aaaa29f8     .............)..
  42ef04:	0000a8aa 00000000 00000300 00000000     ................
  42ef14:	0800f104 01000020 f70b10ff 2f000000     .... ........../
  42ef24:	94ff0cf1 ff454444 ffffff1b f1ffffff     ....DDE.........
  42ef34:	ffffff8f 00fdffff 0000f77f 00000000     ................
  42ef44:	0000606f 00000000 00000030 00000000     o`......0.......

0042ef54 <kern_class_values>:
  42ef54:	00000100 00000000 00000100 00000002     ................
  42ef64:	00000200 00000000 00000000 00000000     ................
  42ef74:	00010000 00000000 00000000 00000000     ................
  42ef84:	000a0100 0000fb06 f3f40000 04050b02     ................
  42ef94:	010b02f7 00070209 00000000 00000000     ................
  42efa4:	020d0000 000000fe 00000000 00000000     ................
  42efb4:	f9000400 00000000 0404fc00 00fe0000     ................
  42efc4:	fe0002fe fcfffe00 00000000 fd0000fe     ................
  42efd4:	fe0000fd 0000fc00 00000000 fe000000     ................
  42efe4:	00fd00fe 00e500fa 0400fc00 fc000007     ................
  42eff4:	04070202 000004fc 000000f3 00000000     ................
  42f004:	00000000 000000f8 00000000 00000000     ................
  42f014:	fa000000 f700f5fd 000000fe 00090000     ................
  42f024:	01fffef9 0000fc00 0000effe 00000000     ................
  42f034:	00000000 09feee00 00000000 00000000     ................
  42f044:	00000000 000000f7 00000000 07000000     ................
  42f054:	00000200 000000fc 00000000 00000000     ................
  42f064:	00000000 02090000 00000001 00000000     ................
	...
  42f094:	000000f8 00000000 00000000 00000000     ................
  42f0a4:	00000000 02000000 fe070204 fe040000     ................
  42f0b4:	0602e1f9 00fd0004 00070008 00eb0007     ................
  42f0c4:	070007fd 000204fe 00fe0100 0012fc00     ................
  42f0d4:	00070012 07040309 f8000000 00000000     ................
  42f0e4:	0200fe01 02fcfdfc 0000fe00 0000f700     ................
	...
  42f0fc:	0000f100 00000000 00000000 00000000     ................
  42f10c:	00f40100 000000f2 1600fe00 0202fdfd     ................
  42f11c:	02fd00fe 00f40000 00000000 00000000     ................
  42f12c:	00ea0000 00000002 00000000 00000000     ................
  42f13c:	0d00f200 00f80000 eaf10007 0007fcf1     ................
  42f14c:	0300f100 00fd00fb 00000000 00000000     ................
  42f15c:	06000000 0000e507 00000000 00000000     ................
  42f16c:	000b0000 00000002 02020000 ff00fcfd     ................
  42f17c:	0000feff 000000fe 00fe00fc fa00fcfb     ................
  42f18c:	00fcf9f9 00fc00fc fe000000 00020000     ................
  42f19c:	0100fe02 02000000 000000fe ff0202fe     ................
  42f1ac:	fc000000 0000ff00 01000000 00fe0300     ................
  42f1bc:	00fc00fd 0700fe00 00fe0000 00000000     ................
  42f1cc:	fefe01ff 00fe0000 000000fe 00000000     ................
  42f1dc:	ffff0000 00fdfe00 00000000 fe000001     ................
  42f1ec:	fefefe00 00000000 00000000 0000ff00     ................
  42f1fc:	fdfe0000 f900fd00 0004f9fe 0402fc00     ................
  42f20c:	fffa0006 f5ff00fd f402fe02 01000002     ................
  42f21c:	fef400f4 f500feed 00060400 00000003     ................
  42f22c:	fc000000 00f900fd 00fe0000 00fe0000     ................
  42f23c:	00000000 ff00ffff 000000fd 00000000     ................
  42f24c:	fe00fefe 0000fefd 000000fe 00000000     ................
  42f25c:	00000000 fd00fefe fc00fe00 fd000002     ................
  42f26c:	00020201 00000000 0000fe00 02000000     ................
  42f27c:	00fe0000 00fdfefe 00000000 00020000     ................
  42f28c:	000000fe 00fdfe00 fe0700fc 0000f901     ................
  42f29c:	f7f4f506 fe0002fc fc00fcf1 fc03fc00     ................
  42f2ac:	00fa00f2 02ff0100 000200fe f500f7f9     ................
  42f2bc:	f9fbfbfb fc00fafd 010001fa 0000fe00     ................
  42f2cc:	02000200 00000000 00000000 fe000000     ................
  42f2dc:	ff00ff00 fbfc00fe f900fffb 00000000     ................
  42f2ec:	00fe0000 01000000 000000ff 00000002     ................
  42f2fc:	00000000 00000b00 00000000 00000002     ................
  42f30c:	000000fe 00000000 00000000 000200fc     ................
	...
  42f328:	000000fe 000000fc 00f9f500 f5fd0000     ................
  42f338:	02fe0000 0000fa00 00000000 00000000     ................
  42f348:	fc0000fc 00000000 00000000 00000000     ................
  42f358:	00fc0002 03000000 fcfc0200 fdfefe00     ................
  42f368:	00000000 00f90000 fefd00fe f9fafb00     ................
  42f378:	00fc00fe 000000f9 00001200 fd000001     ................
  42f388:	f6000200 00000000 07fceb00 00f7fe07     ................
  42f398:	f500fd02 f002fdff 030003fe f9f8fdf8     ................
  42f3a8:	f30000f7 00000d00 000000ff fafeffff     ................
  42f3b8:	00eb00f9 00000000 00000000 00000001     ................
	...
  42f3d4:	ff00fe00 0000fdfe 00fe00fc 00000000     ................
	...
  42f3ec:	00ff0000 040000fc fb0003ff fafffe02     ................
  42f3fc:	fefd00fe fcfd00fe fffe0000 00fdfcfe     ................
  42f40c:	0200fe00 00fb00fe 00fc0000 fcfc00fc     ................
  42f41c:	00000002 00000000 0002fc00 fdfe00fd     ................
  42f42c:	fefefef9 fffdfeff 00000000 fefefe00     ................
  42f43c:	00000000 fe00fe03 fe000000 fdfefefd     ................
  42f44c:	090200fe 00fa00ff fe0004fe 0003fdf7     ................
  42f45c:	02fcf500 fe0002fc fd00f9fe fc000001     ................
  42f46c:	02000000 00fcfc02 fefdfefc 01fc00fe     ................
  42f47c:	0007fcfc 00000000 00000000 00000002     ................
	...
  42f4a0:	000000fc 00000000 00000000 00000000     ................
	...
  42f4cc:	000000fe 00000000 00000000 00000000     ................
	...
  42f4e8:	fefe0000 00000000 00000000 00000000     ................
  42f4f8:	fd0000fd fefe0000 00000000 000000fe     ................
  42f508:	0000ff00 fe000000 00000000 00fc00fd     ................
  42f518:	00f90000 0004fb02 0000f5fe f700fefb     ................
  42f528:	0000fafa f7f7fef6 00fa00f5 00fd0f02     ................
  42f538:	fefffefb f8fcfafc 00fefbf7 0100fe00     ................
  42f548:	fef00000 f8fb0507 00f90100 04fefef5     ................
  42f558:	0001fdeb f4fdf100 0000f0fe 010d00f0     ................
  42f568:	0000fe00 feff0000 f100fef7 00000000     ................
  42f578:	00fe00f9 00f5faff f9fdff00 00fe00fe     ................
  42f588:	f6000000 fef9f9fe fcfefafc f9fefc00     ................
  42f598:	fcfd00fd 0100fcfe 00f9fe00 00fc0004     ................
  42f5a8:	03000000 09fc0200 fdfefe00 00000000     ................
  42f5b8:	00f90000 fefd00fe f9fafb00 02fc00fe     ................
  42f5c8:	00000009 00001200 fd000001 00000200     ................
	...
  42f5e4:	0000fcfe ff000000 fe000000 fc0000fe     ................
  42f5f4:	fc0000fe 00ff0400 00000000 00000100     ................
  42f604:	04030000 f900fe02 f90700fc 09fcfcf9     ................
  42f614:	feed0204 fe00fe04 00f8fe02 fefd02fe     ................
  42f624:	0000fef9 fa000407 06fdf400 fd01f7fd     ................
  42f634:	09fef9f9 00fd0002 070200fa faf7f8fb     ................
  42f644:	f0010007 fefc02fe f8fb00fb 00fefdfd     ................
  42f654:	fefbfb00 fe050700 fdf400f4 fff3f800     ................
  42f664:	faf9fcf9 fd000006 00fefc00 0400fcfe     ................
  42f674:	000002f9 fbfe00f4 faf9fefc f900fbf9     ................
  42f684:	f9fcfbfe 010000fe f900fc0b fcfe00fe     ................
  42f694:	f7fafafb 0004fcfd fdf500fd f8f90401     ................
  42f6a4:	fe07f9fc 04fceb01 00f8fcfb fefdf7f9     ................
  42f6b4:	f9fbfefe 070000ff 00f1fe06 f705fbf3     ................
  42f6c4:	f7f8fcf1 0004f9f5 fd000000 fd020000     ................
  42f6d4:	04fc0204 fff90000 0100ff00 0000fe01     ................
  42f6e4:	00000000 000000fe 00070200 0000fd00     ................
  42f6f4:	fefe0000 000000fd 00000201 00020000     ................
  42f704:	000900fe fd010104 00000400 00000200     ................
	...
  42f71c:	06000700 00000000 00000000 00000000     ................
  42f72c:	00f30000 070004fe 03160000 0202fcfc     ................
  42f73c:	00f501fe 00f30b00 00000000 00000000     ................
  42f74c:	09f10000 0000001f 00000000 00000000     ................
  42f75c:	0000f300 00000000 00000000 00000000     ................
	...
  42f778:	fc0000fc 000000fe 00000000 00000000     ................
	...
  42f790:	00fa00fe 00000100 fefc1d02 02fa0607     ................
  42f7a0:	02020000 000000fd 00000000 00000000     ................
  42f7b0:	000006e3 00000000 00000000 00000000     ................
  42f7c0:	fa000000 fa000000 00000000 0000fffb     ................
  42f7d0:	fd00fb00 0000f500 00000000 00000000     ................
  42f7e0:	0000f100 00010000 00000000 0000fe00     ................
  42f7f0:	00fd00fc 000000fa 00fd02fc fbfefa00     ................
  42f800:	00fa0000 00f500fe ee0000fe f8fef7fc     ................
  42f810:	00f10000 0000fffa 00000000 fcfd0000     ................
  42f820:	0000fcfe 00fb0000 04fe03fb fefbfe00     ................
  42f830:	fd00fcfc fa02feff 000000ff 00fdfeec     ................
  42f840:	f5fe00fb fe0000fe 000000fe fe000200     ................
  42f850:	0004fefc 00000000 00000000 00000000     ................
	...
  42f87c:	00030000 00000000 fe00fb00 fc000000     ................
  42f88c:	00000002 00fcfefa fe00fa00 0000f500     ................
  42f89c:	00ea0000 00f5f8fc fe00f100 000000fd     ................
  42f8ac:	00000000 fffdfe00 000001fd 0700fd04     ................
  42f8bc:	f9fefe0b 05040b03 030903fa 00060506     ................
	...
  42f8d4:	0b0e0000 fe00fefc 00120a12 00020000     ................
  42f8e4:	00000800 000000fc 00000000 00fe0000     ................
  42f8f4:	00000000 03000000 00000000 f7fefded     ................
  42f904:	f10000f5 00000000 00000000 00000000     ................
  42f914:	00000000 0000fc00 00000000 fe000000     ................
	...
  42f92c:	00000003 fefded00 0000f5f7 000000f7     ................
	...
  42f94c:	000000fe fe0002fb f9020402 02fe0000     ................
  42f95c:	00000200 00fa0000 00fcfefe 0e00f7fe     ................
  42f96c:	fefb00fe 00fcfe00 fdfcfafe fc000000     ................
	...
  42f984:	0000fe00 00000000 00030000 ed000000     ................
  42f994:	f5f7fefd 00f10000 00000000 00000b00     ................
	...
  42f9ac:	fdf900fc fefe07fe 01ff01f7 0500fafe     ................
  42f9bc:	02010200 00fdf7fb f7fafcf7 fcfc00f7     ................
  42f9cc:	fefefdfd fe00fefd 030003ff 000700fe     ................
	...
  42f9e4:	fe000000 0000fefe 00ff00fa 000000fc     ................
	...
  42f9fc:	000000f3 00000000 00000000 fd00fefe     ................
  42fa0c:	00000000 fc0000fe fc0002fe fa00fefc     ................
  42fa1c:	fdfefbfe 0000fc00 00000000 00000000     ................
  42fa2c:	0700f100 00fc0000 fd000000 0000fe00     ................
  42fa3c:	fe0000ff 0000fb00 f9f9fd09 00020202     ................
  42fa4c:	020302fa fe070207 f70000fa faf90000     ................
  42fa5c:	00fc0000 fd00fcfd fe00fd00 f9fe0003     ................
  42fa6c:	000008fe 00fc00fe 00fb0300 0002fe02     ................
  42fa7c:	fe00f900 02fe00ff 000000fe 00fbfdf7     ................
  42fa8c:	f50000f9 00fe0800 000100fc f9fe00fe     ................
  42fa9c:	0002fe00 fe000000 fd020000 fd000001     ................
  42faac:	00fd00fe 00000000 00000000 00000000     ................
  42fabc:	00000000 000500f2 0000fe00 00000000     ................
  42facc:	0000fefe 05000400 00000000 01f3f200     ................
  42fadc:	f704070a 08000902 00000400 00000000     ................
  42faec:	00000000 00000c00 00000000 00000000     ................
	...

0042fb04 <kern_classes>:
  42fb04:	0042ef54 0042fb14 0042fbb0 0000313d     T.B...B...B.=1..

0042fb14 <kern_left_class_mapping>:
  42fb14:	02010000 05040300 08070602 0a090a09     ................
  42fb24:	0d000c0b 11100f0e 140c1312 00000014     ................
  42fb34:	18171615 1b1a1619 1e1d1d1c 1d1d201f     ............. ..
  42fb44:	23222116 251e2403 28272625 002b2a29     .!"#.$.%%&'()*+.
  42fb54:	2e2d002c 3231302f 34342d33 2d2d3035     ,.-./0123-4450--
  42fb64:	37362e2e 3a333938 3c3a3b3a 09000029     ..67893::;:<)...
  42fb74:	0000093d 00000000 00000000 00000000     =...............
	...

0042fbb0 <kern_right_class_mapping>:
  42fbb0:	02010000 05040300 08070602 0a090a09     ................
  42fbc0:	0e0d0c0b 0c11100f 15141312 00000015     ................
  42fbd0:	19181716 19191917 1a191917 19191919     ................
  42fbe0:	19171917 1d1c1b03 201f1e1d 00232221     ........... !"#.
  42fbf0:	26250024 00272727 29282627 2a2a2626     $.%&'''.'&()&&**
  42fc00:	2a272a27 2e2d2c2b 302e2f2e 09230000     '*'*+,-../.0..#.
  42fc10:	00000931 00000000 00000000 00000000     1...............
	...

0042fc4c <unicode_list_1>:
  42fc4c:	1f720000 ef58ef51 ef5cef5b ef61ef5d     ..r.Q.X.[.\.].a.
  42fc5c:	ef65ef63 ef6cef69 ef76ef71 ef78ef77     c.e.i.l.q.v.w.x.
  42fc6c:	ef98ef8e ef9cef9b efa1ef9d efa3efa2     ................
  42fc7c:	efb7efa4 efbeefb8 efc1efc0 efc7efc4     ................
  42fc8c:	efc9efc8 efe3efcb f014efe5 f017f015     ................
  42fc9c:	f03af037 f06cf043 f0abf074 f190f13b     7.:.C.l.t...;...
  42fcac:	f192f191 f194f193 f1e3f1d7 f254f23d     ............=.T.
  42fcbc:	f712f4aa 0000f7f2 0000ffff              ............

0042fcc8 <lv_anim_path_def>:
  42fcc8:	004151e1 00000000 0000ffff              .QA.........

0042fcd4 <hex.5775>:
  42fcd4:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  42fce4:	00000000                                ....

0042fce8 <sin0_90_table>:
  42fce8:	023c0000 06b30478 0b2808ee 0f990d61     ..<.x.....(.a...
  42fcf8:	140611d0 186c163a 1ccb1a9d 21211ef7     ....:.l.......!!
  42fd08:	256c2348 29ac278e 2ddf2bc7 32032ff3     H#l%.'.).+.-./.2
  42fd18:	36183410 3a1c381c 3e0e3c17 41ec3fff     .4.6.8.:.<.>.?.A
  42fd28:	45b643d4 496a4793 4d084b3c 508d4ecd     .C.E.GjI<K.M.N.P
  42fd38:	53f95246 574b55a5 5a8258ea 5d9c5c13     FR.S.UKW.X.Z.\.]
  42fd48:	609a5f1f 6379620d 663964dd 68d9678d     ._.`.byc.d9f.g.h
  42fd58:	6b596a1d 6db76c8c 6ff36ed9 720c7104     .jYk.l.m.n.o.q.r
  42fd68:	7401730b 75d274ee 777f76ad 79067847     .s.t.t.u.v.wGx.y
  42fd78:	7a6779bb 7ba27b0a 7cb77c32 7da57d33     .ygz.{.{2|.|3}.}
  42fd88:	7e6c7e0d 7f0b7ec0 7f827f4b 7fd27faf     .~l~.~..K.......
  42fd98:	7ffa7feb 00007fff 2074754f 6d20666f     ........Out of m
  42fda8:	726f6d65 63202c79 74276e61 6c6c6120     emory, can't all
  42fdb8:	7461636f 20612065 2077656e 66667562     ocate a new buff
  42fdc8:	28207265 72636e69 65736165 756f7920     er (increase you
  42fdd8:	564c2072 4d454d5f 5a49535f 65682f45     r LV_MEM_SIZE/he
  42fde8:	73207061 29657a69 00000000 66206f4e     ap size)....No f
  42fdf8:	20656572 66667562 202e7265 72636e49     ree buffer. Incr
  42fe08:	65736165 5f564c20 5f4d454d 5f465542     ease LV_MEM_BUF_
  42fe18:	5f58414d 2e4d554e 00000000 3b2e2c20     MAX_NUM..... ,.;
  42fe28:	005f2d3a 0000ffff 00001084 000018c6     :-_.............
  42fe38:	008c80ef 625f766c 00006e74 0000000a     ....lv_btn......
  42fe48:	625f766c 616d6e74 78697274 00000000     lv_btnmatrix....
  42fe58:	316e7442 00000000 326e7442 00000000     Btn1....Btn2....
  42fe68:	336e7442 00000000 346e7442 00000000     Btn3....Btn4....
  42fe78:	356e7442 00000000 635f766c 74726168     Btn5....lv_chart
  42fe88:	00000000 635f766c 00746e6f 695f766c     ....lv_cont.lv_i
  42fe98:	0000676d 74786554 00000000 6c5f766c     mg..Text....lv_l
  42fea8:	6c656261 00000000 7373654d 00656761     abel....Message.
  42feb8:	6d5f766c 6f626773 00000078 0001c200     lv_msgbox.......
  42fec8:	000000c0 00000800 00000000 0000ffff     ................
  42fed8:	000088c8 45205545 4552544e 00494949     ....EU ENTREIII.
  42fee8:	69746142 746e656d 203a736f 4f206425     Batimentos: %d O
  42fef8:	65676978 3a6f696e 00642520              xigenio: %d.

0042ff04 <ecg>:
  42ff04:	0000050a 00000508 00000506 00000505     ................
  42ff14:	00000503 00000501 00000500 000004fe     ................
  42ff24:	000004fc 000004fb 000004f9 000004f8     ................
  42ff34:	000004f6 000004f5 000004f3 000004f2     ................
  42ff44:	000004f1 000004ef 000004ee 000004ed     ................
  42ff54:	000004eb 000004ea 000004e9 000004e7     ................
  42ff64:	000004e6 000004e5 000004e3 000004e2     ................
  42ff74:	000004e1 000004e0 000004df 000004de     ................
  42ff84:	000004dd 000004dc 000004db 000004da     ................
  42ff94:	000004d9 000004d8 000004d8 000004d7     ................
  42ffa4:	000004d7 000004d6 000004d6 000004d5     ................
  42ffb4:	000004d5 000004d5 000004d4 000004d4     ................
  42ffc4:	000004d4 000004d4 000004d3 000004d3     ................
  42ffd4:	000004d3 000004d3 000004d2 000004d2     ................
  42ffe4:	000004d1 000004d1 000004d0 000004d0     ................
  42fff4:	000004cf 000004ce 000004cd 000004cc     ................
  430004:	000004cb 000004ca 000004c8 000004c7     ................
  430014:	000004c6 000004c4 000004c3 000004c2     ................
  430024:	000004c1 000004bf 000004be 000004bd     ................
  430034:	000004bc 000004bb 000004ba 000004b9     ................
  430044:	000004b8 000004b8 000004b7 000004b7     ................
  430054:	000004b6 000004b6 000004b6 000004b6     ................
  430064:	000004b6 000004b6 000004b6 000004b6     ................
  430074:	000004b6 000004b6 000004b6 000004b6     ................
  430084:	000004b6 000004b5 000004b5 000004b5     ................
  430094:	000004b5 000004b5 000004b4 000004b4     ................
  4300a4:	000004b3 000004b2 000004b2 000004b1     ................
  4300b4:	000004b0 000004af 000004ae 000004ad     ................
  4300c4:	000004ad 000004ab 000004aa 000004a9     ................
  4300d4:	000004a8 000004a7 000004a6 000004a5     ................
  4300e4:	000004a3 000004a2 000004a1 000004a0     ................
  4300f4:	0000049f 0000049d 0000049c 0000049b     ................
  430104:	0000049a 00000498 00000497 00000496     ................
  430114:	00000495 00000493 00000492 00000491     ................
  430124:	00000490 0000048e 0000048d 0000048c     ................
  430134:	0000048b 0000048a 00000489 00000487     ................
  430144:	00000486 00000485 00000484 00000483     ................
  430154:	00000482 00000480 0000047f 0000047e     ............~...
  430164:	0000047c 0000047b 00000479 00000478     |...{...y...x...
  430174:	00000476 00000474 00000472 00000470     v...t...r...p...
  430184:	0000046e 0000046c 00000469 00000467     n...l...i...g...
  430194:	00000464 00000462 0000045f 0000045c     d...b..._...\...
  4301a4:	00000459 00000456 00000453 00000450     Y...V...S...P...
  4301b4:	0000044d 00000449 00000446 00000443     M...I...F...C...
  4301c4:	0000043f 0000043c 00000438 00000435     ?...<...8...5...
  4301d4:	00000431 0000042e 0000042a 00000427     1.......*...'...
  4301e4:	00000423 00000420 0000041c 00000418     #... ...........
  4301f4:	00000415 00000411 0000040d 00000409     ................
  430204:	00000405 00000401 000003fd 000003f9     ................
  430214:	000003f5 000003f1 000003ec 000003e8     ................
  430224:	000003e4 000003df 000003da 000003d6     ................
  430234:	000003d1 000003cc 000003c7 000003c2     ................
  430244:	000003bd 000003b8 000003b3 000003ad     ................
  430254:	000003a8 000003a2 0000039d 00000397     ................
  430264:	00000391 0000038b 00000385 0000037f     ................
  430274:	00000379 00000373 0000036d 00000366     y...s...m...f...
  430284:	00000360 00000359 00000353 0000034c     `...Y...S...L...
  430294:	00000346 0000033f 00000339 00000332     F...?...9...2...
  4302a4:	0000032b 00000325 0000031e 00000318     +...%...........
  4302b4:	00000311 0000030b 00000305 000002fe     ................
  4302c4:	000002f8 000002f2 000002ec 000002e6     ................
  4302d4:	000002e1 000002db 000002d5 000002d0     ................
  4302e4:	000002ca 000002c5 000002bf 000002ba     ................
  4302f4:	000002b5 000002af 000002aa 000002a5     ................
  430304:	000002a0 0000029a 00000295 00000290     ................
  430314:	0000028a 00000285 00000280 0000027a     ............z...
  430324:	00000275 00000270 0000026a 00000265     u...p...j...e...
  430334:	0000025f 0000025a 00000254 0000024e     _...Z...T...N...
  430344:	00000249 00000243 0000023d 00000237     I...C...=...7...
  430354:	00000232 0000022c 00000226 00000220     2...,...&... ...
  430364:	0000021a 00000214 0000020e 00000208     ................
  430374:	00000202 000001fc 000001f6 000001ef     ................
  430384:	000001e9 000001e3 000001dd 000001d7     ................
  430394:	000001d0 000001ca 000001c4 000001be     ................
  4303a4:	000001b8 000001b2 000001ab 000001a5     ................
  4303b4:	0000019f 00000199 00000193 0000018d     ................
  4303c4:	00000187 00000182 0000017c 00000176     ........|...v...
  4303d4:	00000170 0000016b 00000165 00000160     p...k...e...`...
  4303e4:	0000015b 00000155 00000150 0000014b     [...U...P...K...
  4303f4:	00000146 00000142 0000013d 00000138     F...B...=...8...
  430404:	00000134 00000130 0000012c 00000128     4...0...,...(...
  430414:	00000124 00000120 0000011c 00000119     $... ...........
  430424:	00000115 00000112 0000010e 0000010a     ................
  430434:	00000107 00000103 00000100 000000fc     ................
  430444:	000000f8 000000f4 000000f0 000000ec     ................
  430454:	000000e8 000000e3 000000df 000000da     ................
  430464:	000000d5 000000d0 000000cb 000000c6     ................
  430474:	000000c0 000000bb 000000b6 000000b0     ................
  430484:	000000ab 000000a6 000000a1 0000009c     ................
  430494:	00000097 00000093 0000008e 0000008a     ................
  4304a4:	00000086 00000082 0000007e 0000007b     ........~...{...
  4304b4:	00000078 00000075 00000073 00000070     x...u...s...p...
  4304c4:	0000006e 0000006c 0000006a 00000068     n...l...j...h...
  4304d4:	00000066 00000064 00000062 00000060     f...d...b...`...
  4304e4:	0000005e 0000005d 0000005b 00000059     ^...]...[...Y...
  4304f4:	00000057 00000055 00000052 00000050     W...U...R...P...
  430504:	0000004e 0000004b 00000048 00000046     N...K...H...F...
  430514:	00000043 00000040 0000003d 0000003b     C...@...=...;...
  430524:	00000038 00000035 00000032 00000030     8...5...2...0...
  430534:	0000002d 0000002b 00000029 00000026     -...+...)...&...
  430544:	00000024 00000023 00000021 0000001f     $...#...!.......
  430554:	0000001e 0000001d 0000001c 0000001b     ................
  430564:	0000001a 00000019 00000019 00000018     ................
  430574:	00000017 00000017 00000016 00000016     ................
  430584:	00000015 00000015 00000014 00000013     ................
  430594:	00000012 00000012 00000011 0000000f     ................
  4305a4:	0000000e 0000000d 0000000c 0000000a     ................
  4305b4:	00000009 00000007 00000006 00000005     ................
  4305c4:	00000004 00000003 00000002 00000001     ................
	...
  4305ec:	00000001 00000002 00000004 00000005     ................
  4305fc:	00000007 00000009 0000000b 0000000e     ................
  43060c:	00000010 00000013 00000016 00000019     ................
  43061c:	0000001b 0000001e 00000021 00000024     ........!...$...
  43062c:	00000027 0000002a 0000002c 0000002f     '...*...,.../...
  43063c:	00000031 00000033 00000036 00000038     1...3...6...8...
  43064c:	00000039 0000003b 0000003d 0000003f     9...;...=...?...
  43065c:	00000040 00000042 00000043 00000045     @...B...C...E...
  43066c:	00000046 00000048 0000004a 0000004b     F...H...J...K...
  43067c:	0000004d 0000004f 00000051 00000053     M...O...Q...S...
  43068c:	00000056 00000058 0000005b 0000005d     V...X...[...]...
  43069c:	00000060 00000063 00000066 00000069     `...c...f...i...
  4306ac:	0000006c 00000070 00000073 00000076     l...p...s...v...
  4306bc:	00000079 0000007c 00000080 00000083     y...|...........
  4306cc:	00000086 00000089 0000008c 0000008f     ................
  4306dc:	00000091 00000094 00000097 00000099     ................
  4306ec:	0000009b 0000009e 000000a0 000000a2     ................
  4306fc:	000000a4 000000a6 000000a8 000000aa     ................
  43070c:	000000ac 000000ae 000000b0 000000b3     ................
  43071c:	000000b5 000000b7 000000ba 000000bc     ................
  43072c:	000000bf 000000c1 000000c4 000000c7     ................
  43073c:	000000ca 000000cd 000000d0 000000d3     ................
  43074c:	000000d7 000000da 000000dd 000000e1     ................
  43075c:	000000e4 000000e8 000000eb 000000ef     ................
  43076c:	000000f2 000000f6 000000f9 000000fc     ................
  43077c:	00000100 00000103 00000106 00000109     ................
  43078c:	0000010d 00000110 00000113 00000116     ................
  43079c:	00000119 0000011c 00000120 00000123     ........ ...#...
  4307ac:	00000126 0000012a 0000012d 00000130     &...*...-...0...
  4307bc:	00000134 00000138 0000013b 0000013f     4...8...;...?...
  4307cc:	00000143 00000147 0000014b 0000014f     C...G...K...O...
  4307dc:	00000154 00000158 0000015d 00000161     T...X...]...a...
  4307ec:	00000166 0000016b 0000016f 00000174     f...k...o...t...
  4307fc:	00000179 0000017d 00000182 00000187     y...}...........
  43080c:	0000018b 00000190 00000195 00000199     ................
  43081c:	0000019e 000001a2 000001a6 000001aa     ................
  43082c:	000001ae 000001b3 000001b7 000001bb     ................
  43083c:	000001bf 000001c3 000001c7 000001cb     ................
  43084c:	000001cf 000001d3 000001d7 000001db     ................
  43085c:	000001df 000001e3 000001e8 000001ec     ................
  43086c:	000001f0 000001f5 000001fa 000001ff     ................
  43087c:	00000203 00000208 0000020d 00000212     ................
  43088c:	00000217 0000021d 00000222 00000227     ........"...'...
  43089c:	0000022c 00000231 00000236 0000023c     ,...1...6...<...
  4308ac:	00000241 00000246 0000024b 00000250     A...F...K...P...
  4308bc:	00000254 00000259 0000025e 00000262     T...Y...^...b...
  4308cc:	00000267 0000026b 00000270 00000274     g...k...p...t...
  4308dc:	00000278 0000027d 00000281 00000285     x...}...........
  4308ec:	00000289 0000028e 00000292 00000296     ................
  4308fc:	0000029a 0000029f 000002a3 000002a7     ................
  43090c:	000002ac 000002b0 000002b5 000002b9     ................
  43091c:	000002be 000002c3 000002c7 000002cc     ................
  43092c:	000002d1 000002d6 000002db 000002e0     ................
  43093c:	000002e5 000002ea 000002ef 000002f4     ................
  43094c:	000002f9 000002fe 00000303 00000309     ................
  43095c:	0000030e 00000313 00000318 0000031d     ................
  43096c:	00000323 00000328 0000032d 00000333     #...(...-...3...
  43097c:	00000338 0000033d 00000343 00000348     8...=...C...H...
  43098c:	0000034d 00000353 00000358 0000035d     M...S...X...]...
  43099c:	00000363 00000368 0000036e 00000373     c...h...n...s...
  4309ac:	00000379 0000037e 00000384 00000389     y...~...........
  4309bc:	0000038f 00000394 0000039a 0000039f     ................
  4309cc:	000003a5 000003aa 000003b0 000003b5     ................
  4309dc:	000003bb 000003c0 000003c6 000003cb     ................
  4309ec:	000003d1 000003d6 000003dc 000003e1     ................
  4309fc:	000003e6 000003ec 000003f1 000003f7     ................
  430a0c:	000003fc 00000401 00000407 0000040c     ................
  430a1c:	00000411 00000416 0000041c 00000421     ............!...
  430a2c:	00000426 0000042c 00000431 00000436     &...,...1...6...
  430a3c:	0000043c 00000441 00000446 0000044c     <...A...F...L...
  430a4c:	00000451 00000457 0000045c 00000462     Q...W...\...b...
  430a5c:	00000467 0000046d 00000472 00000478     g...m...r...x...
  430a6c:	0000047e 00000483 00000489 0000048f     ~...............
  430a7c:	00000494 0000049a 000004a0 000004a6     ................
  430a8c:	000004ab 000004b1 000004b7 000004bd     ................
  430a9c:	000004c3 000004c8 000004ce 000004d4     ................
  430aac:	000004da 000004df 000004e5 000004eb     ................
  430abc:	000004f1 000004f7 000004fc 00000502     ................
  430acc:	00000508 0000050e 00000514 0000051a     ................
  430adc:	00000520 00000526 0000052c 00000532      ...&...,...2...
  430aec:	00000538 0000053e 00000544 0000054b     8...>...D...K...
  430afc:	00000551 00000557 0000055d 00000564     Q...W...]...d...
  430b0c:	0000056a 00000571 00000577 0000057e     j...q...w...~...
  430b1c:	00000584 0000058b 00000592 00000598     ................
  430b2c:	0000059f 000005a6 000005ac 000005b3     ................
  430b3c:	000005ba 000005c1 000005c8 000005cf     ................
  430b4c:	000005d6 000005dd 000005e4 000005ec     ................
  430b5c:	000005f3 000005fa 00000601 00000609     ................
  430b6c:	00000610 00000617 0000061f 00000626     ............&...
  430b7c:	0000062e 00000635 0000063d 00000644     ....5...=...D...
  430b8c:	0000064c 00000653 0000065b 00000663     L...S...[...c...
  430b9c:	0000066a 00000672 0000067a 00000681     j...r...z.......
  430bac:	00000689 00000691 00000699 000006a1     ................
  430bbc:	000006a9 000006b1 000006b9 000006c1     ................
  430bcc:	000006c9 000006d1 000006d9 000006e1     ................
  430bdc:	000006ea 000006f2 000006fb 00000703     ................
  430bec:	0000070c 00000715 0000071d 00000726     ............&...
  430bfc:	0000072f 00000738 00000740 00000749     /...8...@...I...
  430c0c:	00000752 0000075b 00000764 0000076d     R...[...d...m...
  430c1c:	00000775 0000077e 00000787 00000790     u...~...........
  430c2c:	00000798 000007a1 000007aa 000007b2     ................
  430c3c:	000007bb 000007c3 000007cc 000007d4     ................
  430c4c:	000007dc 000007e5 000007ed 000007f6     ................
  430c5c:	000007fe 00000806 0000080f 00000817     ................
  430c6c:	00000820 00000829 00000831 0000083a      ...)...1...:...
  430c7c:	00000843 0000084c 00000855 0000085e     C...L...U...^...
  430c8c:	00000867 00000870 00000879 00000883     g...p...y.......
  430c9c:	0000088c 00000895 0000089e 000008a7     ................
  430cac:	000008b0 000008b9 000008c2 000008cb     ................
  430cbc:	000008d3 000008dc 000008e4 000008ec     ................
  430ccc:	000008f4 000008fc 00000903 0000090a     ................
  430cdc:	00000911 00000918 0000091f 00000925     ............%...
  430cec:	0000092b 00000931 00000937 0000093d     +...1...7...=...
  430cfc:	00000943 00000949 0000094e 00000954     C...I...N...T...
  430d0c:	00000959 0000095f 00000964 0000096a     Y..._...d...j...
  430d1c:	0000096f 00000974 0000097a 0000097f     o...t...z.......
  430d2c:	00000985 0000098b 00000990 00000996     ................
  430d3c:	0000099b 000009a1 000009a6 000009ac     ................
  430d4c:	000009b1 000009b7 000009bc 000009c1     ................
  430d5c:	000009c6 000009cb 000009cf 000009d4     ................
  430d6c:	000009d8 000009dc 000009e0 000009e4     ................
  430d7c:	000009e8 000009eb 000009ee 000009f1     ................
  430d8c:	000009f4 000009f7 000009f9 000009fb     ................
  430d9c:	000009fe 00000a00 00000a02 00000a03     ................
  430dac:	00000a05 00000a07 00000a08 00000a0a     ................
  430dbc:	00000a0b 00000a0c 00000a0d 00000a0e     ................
  430dcc:	00000a0f 00000a10 00000a11 00000a12     ................
  430ddc:	00000a13 00000a14 00000a14 00000a15     ................
  430dec:	00000a16 00000a16 00000a16 00000a17     ................
  430dfc:	00000a17 00000a17 00000a17 00000a17     ................
  430e0c:	00000a16 00000a16 00000a16 00000a15     ................
  430e1c:	00000a15 00000a14 00000a13 00000a12     ................
  430e2c:	00000a11 00000a10 00000a0f 00000a0e     ................
  430e3c:	00000a0c 00000a0b 00000a09 00000a08     ................
  430e4c:	00000a06 00000a04 00000a02 00000a01     ................
  430e5c:	000009ff 000009fc 000009fa 000009f8     ................
  430e6c:	000009f6 000009f4 000009f1 000009ef     ................
  430e7c:	000009ec 000009ea 000009e7 000009e5     ................
  430e8c:	000009e2 000009e0 000009dd 000009db     ................
  430e9c:	000009d8 000009d6 000009d3 000009d1     ................
  430eac:	000009ce 000009cc 000009c9 000009c7     ................
  430ebc:	000009c4 000009c2 000009c0 000009be     ................
  430ecc:	000009bc 000009b9 000009b7 000009b5     ................
  430edc:	000009b3 000009b1 000009af 000009ad     ................
  430eec:	000009ab 000009a9 000009a7 000009a5     ................
  430efc:	000009a3 000009a1 0000099f 0000099d     ................
  430f0c:	0000099b 00000999 00000997 00000995     ................
  430f1c:	00000993 00000991 0000098f 0000098d     ................
  430f2c:	0000098b 00000989 00000987 00000985     ................
  430f3c:	00000983 00000981 0000097f 0000097d     ............}...
  430f4c:	0000097b 00000979 00000977 00000975     {...y...w...u...
  430f5c:	00000973 00000971 0000096f 0000096d     s...q...o...m...
  430f6c:	0000096b 00000969 00000967 00000965     k...i...g...e...
  430f7c:	00000963 00000961 0000095f 0000095d     c...a..._...]...
  430f8c:	0000095c 0000095a 00000958 00000956     \...Z...X...V...
  430f9c:	00000955 00000953 00000952 00000950     U...S...R...P...
  430fac:	0000094f 0000094d 0000094c 0000094a     O...M...L...J...
  430fbc:	00000949 00000948 00000947 00000946     I...H...G...F...
  430fcc:	00000945 00000943 00000942 00000941     E...C...B...A...
  430fdc:	00000941 00000940 0000093f 0000093e     A...@...?...>...
  430fec:	0000093e 0000093d 0000093d 0000093c     >...=...=...<...
  430ffc:	0000093c 0000093b 0000093b 0000093a     <...;...;...:...
  43100c:	00000939 00000938 00000937 00000936     9...8...7...6...
  43101c:	00000935 00000934 00000932 00000930     5...4...2...0...
  43102c:	0000092e 0000092c 00000929 00000927     ....,...)...'...
  43103c:	00000924 00000920 0000091d 00000919     $... ...........
  43104c:	00000915 00000910 0000090b 00000906     ................
  43105c:	00000901 000008fc 000008f6 000008f0     ................
  43106c:	000008ea 000008e4 000008de 000008d8     ................
  43107c:	000008d1 000008cb 000008c5 000008be     ................
  43108c:	000008b8 000008b2 000008ac 000008a6     ................
  43109c:	000008a0 0000089a 00000894 0000088f     ................
  4310ac:	00000889 00000884 0000087e 00000879     ........~...y...
  4310bc:	00000873 0000086d 00000868 00000862     s...m...h...b...
  4310cc:	0000085c 00000856 00000850 0000084a     \...V...P...J...
  4310dc:	00000844 0000083d 00000837 00000830     D...=...7...0...
  4310ec:	00000829 00000821 0000081a 00000812     )...!...........
  4310fc:	0000080a 00000802 000007fa 000007f2     ................
  43110c:	000007eb 000007e4 000007dd 000007d7     ................
  43111c:	000007d2 000007cd 000007c9 000007c6     ................
  43112c:	000007c3 000007c2 000007c2 000007c3     ................
  43113c:	000007c5 000007c8 000007cd 000007d3     ................
  43114c:	000007da 000007e2 000007eb 000007f6     ................
  43115c:	00000802 0000080f 0000081e 0000082e     ................
  43116c:	0000083f 00000851 00000865 0000087a     ?...Q...e...z...
  43117c:	00000890 000008a7 000008c0 000008da     ................
  43118c:	000008f4 00000910 0000092d 0000094c     ........-...L...
  43119c:	0000096b 0000098b 000009ad 000009cf     k...............
  4311ac:	000009f3 00000a17 00000a3c 00000a63     ........<...c...
  4311bc:	00000a8a 00000ab2 00000adb 00000b05     ................
  4311cc:	00000b2f 00000b5b 00000b86 00000bb3     /...[...........
  4311dc:	00000be0 00000c0d 00000c3b 00000c69     ........;...i...
  4311ec:	00000c97 00000cc6 00000cf5 00000d23     ............#...
  4311fc:	00000d51 00000d80 00000dad 00000ddb     Q...............
  43120c:	00000e07 00000e33 00000e5e 00000e87     ....3...^.......
  43121c:	00000eaf 00000ed5 00000ef9 00000f1c     ................
  43122c:	00000f3c 00000f5a 00000f76 00000f8f     <...Z...v.......
  43123c:	00000fa6 00000fbb 00000fcd 00000fdc     ................
  43124c:	00000fe8 00000ff2 00000ff9 00000ffd     ................
  43125c:	00000fff 00000ffd 00000ff9 00000ff1     ................
  43126c:	00000fe8 00000fdb 00000fcb 00000fb9     ................
  43127c:	00000fa4 00000f8d 00000f73 00000f57     ........s...W...
  43128c:	00000f38 00000f17 00000ef3 00000ecd     8...............
  43129c:	00000ea6 00000e7c 00000e50 00000e23     ....|...P...#...
  4312ac:	00000df3 00000dc3 00000d91 00000d5d     ............]...
  4312bc:	00000d29 00000cf4 00000cbd 00000c86     )...............
  4312cc:	00000c4e 00000c16 00000bdd 00000ba4     N...............
  4312dc:	00000b6b 00000b31 00000af8 00000ac0     k...1...........
  4312ec:	00000a87 00000a4f 00000a18 000009e1     ....O...........
  4312fc:	000009ab 00000976 00000942 0000090e     ....v...B.......
  43130c:	000008dc 000008ac 0000087c 0000084e     ........|...N...
  43131c:	00000821 000007f6 000007cc 000007a4     !...............
  43132c:	0000077d 00000758 00000734 00000712     }...X...4.......
  43133c:	000006f1 000006d2 000006b4 00000698     ................
  43134c:	0000067e 00000664 0000064d 00000636     ~...d...M...6...
  43135c:	00000621 0000060e 000005fb 000005ea     !...............
  43136c:	000005da 000005cc 000005be 000005b2     ................
  43137c:	000005a7 0000059e 00000595 0000058e     ................
  43138c:	00000588 00000583 0000057e 0000057b     ........~...{...
  43139c:	00000579 00000577 00000576 00000576     y...w...v...v...
  4313ac:	00000576 00000577 00000579 0000057b     v...w...y...{...
  4313bc:	0000057e 00000582 00000585 0000058a     ~...............
  4313cc:	0000058e 00000593 00000598 0000059e     ................
  4313dc:	000005a3 000005a9 000005af 000005b5     ................
  4313ec:	000005bb 000005c1 000005c7 000005cd     ................
  4313fc:	000005d3 000005d9 000005df 000005e5     ................
  43140c:	000005eb 000005f0 000005f6 000005fb     ................
  43141c:	00000600 00000604 00000609 0000060d     ................
  43142c:	00000611 00000615 00000618 0000061c     ................
  43143c:	0000061f 00000621 00000624 00000626     ....!...$...&...
  43144c:	00000628 00000629 0000062b 0000062c     (...)...+...,...
  43145c:	0000062d 0000062d 0000062e 0000062e     -...-...........
  43146c:	0000062e 0000062e 0000062d 0000062c     ........-...,...
  43147c:	0000062c 0000062b 0000062a 00000628     ,...+...*...(...
  43148c:	00000627 00000625 00000623 00000621     '...%...#...!...
  43149c:	0000061f 0000061d 0000061b 00000618     ................
  4314ac:	00000616 00000613 00000610 0000060d     ................
  4314bc:	0000060a 00000606 00000603 000005ff     ................
  4314cc:	000005fc 000005f8 000005f4 000005f1     ................
  4314dc:	000005ed 000005e9 000005e5 000005e0     ................
  4314ec:	000005dc 000005d8 000005d4 000005d0     ................
  4314fc:	000005cb 000005c7 000005c3 000005be     ................
  43150c:	000005ba 000005b5 000005b1 000005ad     ................
  43151c:	000005a8 000005a4 0000059f 0000059b     ................
  43152c:	00000597 00000592 0000058e 0000058a     ................
  43153c:	00000586 00000582 0000057e 0000057a     ........~...z...
  43154c:	00000576 00000572 0000056e 0000056a     v...r...n...j...
  43155c:	00000567 00000563 0000055f 0000055c     g...c..._...\...
  43156c:	00000558 00000555 00000551 0000054e     X...U...Q...N...
  43157c:	0000054a 00000547 00000544 00000540     J...G...D...@...
  43158c:	0000053d 0000053a 00000536 00000533     =...:...6...3...
  43159c:	0000052f 0000052c 00000529 00000525     /...,...)...%...
  4315ac:	00000522 0000051e 0000051b 00000517     "...............
  4315bc:	00000514 00000510 0000050d 00000509     ................
  4315cc:	41524f48 00642520 554e494d 25204f54     HORA %d.MINUTO %
  4315dc:	00000064 63696c43 0a64656b 00000000     d...Clicked.....
  4315ec:	67676f54 0a64656c 00000000              Toggled.....

004315f8 <g_ecgSize>:
  4315f8:	000005b2 64697543 216f6461 61755320     ....Cuidado! Sua
  431608:	69786f20 616e6567 206f6163 61747365      oxigenacao esta
  431618:	61626120 206f7869 39206564 00002e30      abaixo de 90...
  431628:	66666623 20666666 9180ef20 00000020     #ffffff  ... ...
  431638:	39443223 20333136 8189ef20 25363720     #2D9613  ... 76%
  431648:	00000020 30303023 20303030 4749584f      ...#000000 OXIG
  431658:	4f494e45 00000000 31414323 20313430     ENIO....#CA1041 
  431668:	324f7053 00000025 30303023 20303030     SpO2%...#000000 
  431678:	49544142 544e454d 0000534f 39443223     BATIMENTOS..#2D9
  431688:	20333136 004d5042 766c6153 00007261     613 BPM.Salvar..
  431698:	6f6c6156 20736572 766c6173 0000736f     Valores salvos..
  4316a8:	0044434c 6c696146 74206465 7263206f     LCD.Failed to cr
  4316b8:	65746165 64636c20 73617420 000a0d6b     eate lcd task...
  4316c8:	004b4c43 6c696146 74206465 7263206f     CLK.Failed to cr
  4316d8:	65746165 6b6c6320 73617420 000a0d6b     eate clk task...
  4316e8:	32535041 00000000 6c696146 74206465     APS2....Failed t
  4316f8:	7263206f 65746165 53504120 73617420     o create APS tas
  431708:	000a0d6b 6e69616d 00000000 6c696146     k...main....Fail
  431718:	74206465 7263206f 65746165 69614d20     ed to create Mai
  431728:	6174206e 0a0d6b73 00000000 636f7270     n task......proc
  431738:	00737365 6c696146 74206465 7263206f     ess.Failed to cr
  431748:	65746165 6f727020 73736563 73617420     eate process tas
  431758:	000a0d6b 00006b4f 00004b4f 64323025     k...Ok..OK..%02d
  431768:	23202320 32302520 00000064 64323025      # # %02d...%02d
  431778:	25203a20 00643230 203a786f 0a206425      : %02d.ox: %d .
  431788:	00000000 00006425 686c6166 6d652061     ....%d..falha em
  431798:	69726320 61207261 6c696620 000a2061      criar a fila ..
  4317a8:	203a6425 6d206425 00000a73 3a6d7062     %d: %d ms...bpm:
  4317b8:	0a642520 00000000 63617473 766f206b      %d.....stack ov
  4317c8:	6c667265 2520776f 73252078 00000a0d     erflow %x %s....

004317d8 <sinTable_f32>:
  4317d8:	00000000 3c490e92 3cc90ab1 3d16c32b     ......I<...<+..=
  4317e8:	3d48fb2e 3d7b2b75 3d96a904 3dafb680     ..H=u+{=...=...=
  4317f8:	3dc8bd36 3de1bc2f 3dfab273 3e09cf87     6..=/..=s..=...>
  431808:	3e164083 3e22abb5 3e2f10a2 3e3b6ecf     .@.>..">../>.n;>
  431818:	3e47c5c2 3e541501 3e605c13 3e6c9a7f     ..G>..T>.\`>..l>
  431828:	3e78cfcc 3e827dc0 3e888e93 3e8e9a22     ..x>.}.>...>"..>
  431838:	3e94a032 3e9aa086 3ea09ae5 3ea68f12     2..>...>...>...>
  431848:	3eac7cd4 3eb263ef 3eb8442a 3ebe1d49     .|.>.c.>*D.>I..>
  431858:	3ec3ef15 3ec9b953 3ecf7bca 3ed53641     ...>S..>.{.>A6.>
  431868:	3edae880 3ee0924f 3ee63375 3eebcbbb     ...>O..>u3.>...>
  431878:	3ef15aea 3ef6e0cb 3efc5d27 3f00e7e4     .Z.>...>'].>...?
  431888:	3f039c3d 3f064b82 3f08f59b 3f0b9a6b     =..?.K.?...?k..?
  431898:	3f0e39da 3f10d3cd 3f13682a 3f15f6d9     .9.?...?*h.?...?
  4318a8:	3f187fc0 3f1b02c6 3f1d7fd1 3f1ff6cb     ...?...?...?...?
  4318b8:	3f226799 3f24d225 3f273656 3f299415     .g"?%.$?V6'?..)?
  4318c8:	3f2beb4a 3f2e3bde 3f3085bb 3f32c8c9     J.+?.;.?..0?..2?
  4318d8:	3f3504f3 3f373a23 3f396842 3f3b8f3b     ..5?#:7?Bh9?;.;?
  4318e8:	3f3daef9 3f3fc767 3f41d870 3f43e201     ..=?g.??p.A?..C?
  4318f8:	3f45e403 3f47de65 3f49d112 3f4bbbf8     ..E?e.G?..I?..K?
  431908:	3f4d9f02 3f4f7a20 3f514d3d 3f531849     ..M? zO?=MQ?I.S?
  431918:	3f54db31 3f5695e5 3f584853 3f59f26a     1.T?..V?SHX?j.Y?
  431928:	3f5b941a 3f5d2d53 3f5ebe05 3f604621     ..[?S-]?..^?!F`?
  431938:	3f61c597 3f633c5a 3f64aa59 3f660f88     ..a?Z<c?Y.d?..f?
  431948:	3f676bd8 3f68bf3c 3f6a09a7 3f6b4b0c     .kg?<.h?..j?.Kk?
  431958:	3f6c835e 3f6db293 3f6ed89e 3f6ff573     ^.l?..m?..n?s.o?
  431968:	3f710908 3f721352 3f731447 3f740bdd     ..q?R.r?G.s?..t?
  431978:	3f74fa0b 3f75dec6 3f76ba07 3f778bc5     ..t?..u?..v?..w?
  431988:	3f7853f8 3f791298 3f79c79d 3f7a7302     .Sx?..y?..y?.sz?
  431998:	3f7b14be 3f7baccd 3f7c3b28 3f7cbfc9     ..{?..{?(;|?..|?
  4319a8:	3f7d3aac 3f7dabcc 3f7e1323 3f7e70b0     .:}?..}?#.~?.p~?
  4319b8:	3f7ec46d 3f7f0e58 3f7f4e6d 3f7f84ab     m.~?X..?mN.?...?
  4319c8:	3f7fb10f 3f7fd397 3f7fec43 3f7ffb11     ...?...?C..?...?
  4319d8:	3f800000 3f7ffb11 3f7fec43 3f7fd397     ...?...?C..?...?
  4319e8:	3f7fb10f 3f7f84ab 3f7f4e6d 3f7f0e58     ...?...?mN.?X..?
  4319f8:	3f7ec46d 3f7e70b0 3f7e1323 3f7dabcc     m.~?.p~?#.~?..}?
  431a08:	3f7d3aac 3f7cbfc9 3f7c3b28 3f7baccd     .:}?..|?(;|?..{?
  431a18:	3f7b14be 3f7a7302 3f79c79d 3f791298     ..{?.sz?..y?..y?
  431a28:	3f7853f8 3f778bc5 3f76ba07 3f75dec6     .Sx?..w?..v?..u?
  431a38:	3f74fa0b 3f740bdd 3f731447 3f721352     ..t?..t?G.s?R.r?
  431a48:	3f710908 3f6ff573 3f6ed89e 3f6db293     ..q?s.o?..n?..m?
  431a58:	3f6c835e 3f6b4b0c 3f6a09a7 3f68bf3c     ^.l?.Kk?..j?<.h?
  431a68:	3f676bd8 3f660f88 3f64aa59 3f633c5a     .kg?..f?Y.d?Z<c?
  431a78:	3f61c597 3f604621 3f5ebe05 3f5d2d53     ..a?!F`?..^?S-]?
  431a88:	3f5b941a 3f59f26a 3f584853 3f5695e5     ..[?j.Y?SHX?..V?
  431a98:	3f54db31 3f531849 3f514d3d 3f4f7a20     1.T?I.S?=MQ? zO?
  431aa8:	3f4d9f02 3f4bbbf8 3f49d112 3f47de65     ..M?..K?..I?e.G?
  431ab8:	3f45e403 3f43e201 3f41d870 3f3fc767     ..E?..C?p.A?g.??
  431ac8:	3f3daef9 3f3b8f3b 3f396842 3f373a23     ..=?;.;?Bh9?#:7?
  431ad8:	3f3504f3 3f32c8c9 3f3085bb 3f2e3bde     ..5?..2?..0?.;.?
  431ae8:	3f2beb4a 3f299415 3f273656 3f24d225     J.+?..)?V6'?%.$?
  431af8:	3f226799 3f1ff6cb 3f1d7fd1 3f1b02c6     .g"?...?...?...?
  431b08:	3f187fc0 3f15f6d9 3f13682a 3f10d3cd     ...?...?*h.?...?
  431b18:	3f0e39da 3f0b9a6b 3f08f59b 3f064b82     .9.?k..?...?.K.?
  431b28:	3f039c3d 3f00e7e4 3efc5d27 3ef6e0cb     =..?...?'].>...>
  431b38:	3ef15aea 3eebcbbb 3ee63375 3ee0924f     .Z.>...>u3.>O..>
  431b48:	3edae880 3ed53641 3ecf7bca 3ec9b953     ...>A6.>.{.>S..>
  431b58:	3ec3ef15 3ebe1d49 3eb8442a 3eb263ef     ...>I..>*D.>.c.>
  431b68:	3eac7cd4 3ea68f12 3ea09ae5 3e9aa086     .|.>...>...>...>
  431b78:	3e94a032 3e8e9a22 3e888e93 3e827dc0     2..>"..>...>.}.>
  431b88:	3e78cfcc 3e6c9a7f 3e605c13 3e541501     ..x>..l>.\`>..T>
  431b98:	3e47c5c2 3e3b6ecf 3e2f10a2 3e22abb5     ..G>.n;>../>..">
  431ba8:	3e164083 3e09cf87 3dfab273 3de1bc2f     .@.>...>s..=/..=
  431bb8:	3dc8bd36 3dafb680 3d96a904 3d7b2b75     6..=...=...=u+{=
  431bc8:	3d48fb2e 3d16c32b 3cc90ab1 3c490e92     ..H=+..=...<..I<
  431bd8:	00000000 bc490e92 bcc90ab1 bd16c32b     ......I.....+...
  431be8:	bd48fb2e bd7b2b75 bd96a904 bdafb680     ..H.u+{.........
  431bf8:	bdc8bd36 bde1bc2f bdfab273 be09cf87     6.../...s.......
  431c08:	be164083 be22abb5 be2f10a2 be3b6ecf     .@....".../..n;.
  431c18:	be47c5c2 be541501 be605c13 be6c9a7f     ..G...T..\`...l.
  431c28:	be78cfcc be827dc0 be888e93 be8e9a22     ..x..}......"...
  431c38:	be94a032 be9aa086 bea09ae5 bea68f12     2...............
  431c48:	beac7cd4 beb263ef beb8442a bebe1d49     .|...c..*D..I...
  431c58:	bec3ef15 bec9b953 becf7bca bed53641     ....S....{..A6..
  431c68:	bedae880 bee0924f bee63375 beebcbbb     ....O...u3......
  431c78:	bef15aea bef6e0cb befc5d27 bf00e7e4     .Z......']......
  431c88:	bf039c3d bf064b82 bf08f59b bf0b9a6b     =....K......k...
  431c98:	bf0e39da bf10d3cd bf13682a bf15f6d9     .9......*h......
  431ca8:	bf187fc0 bf1b02c6 bf1d7fd1 bf1ff6cb     ................
  431cb8:	bf226799 bf24d225 bf273656 bf299415     .g".%.$.V6'...).
  431cc8:	bf2beb4a bf2e3bde bf3085bb bf32c8c9     J.+..;....0...2.
  431cd8:	bf3504f3 bf373a23 bf396842 bf3b8f3b     ..5.#:7.Bh9.;.;.
  431ce8:	bf3daef9 bf3fc767 bf41d870 bf43e201     ..=.g.?.p.A...C.
  431cf8:	bf45e403 bf47de65 bf49d112 bf4bbbf8     ..E.e.G...I...K.
  431d08:	bf4d9f02 bf4f7a20 bf514d3d bf531849     ..M. zO.=MQ.I.S.
  431d18:	bf54db31 bf5695e5 bf584853 bf59f26a     1.T...V.SHX.j.Y.
  431d28:	bf5b941a bf5d2d53 bf5ebe05 bf604621     ..[.S-]...^.!F`.
  431d38:	bf61c597 bf633c5a bf64aa59 bf660f88     ..a.Z<c.Y.d...f.
  431d48:	bf676bd8 bf68bf3c bf6a09a7 bf6b4b0c     .kg.<.h...j..Kk.
  431d58:	bf6c835e bf6db293 bf6ed89e bf6ff573     ^.l...m...n.s.o.
  431d68:	bf710908 bf721352 bf731447 bf740bdd     ..q.R.r.G.s...t.
  431d78:	bf74fa0b bf75dec6 bf76ba07 bf778bc5     ..t...u...v...w.
  431d88:	bf7853f8 bf791298 bf79c79d bf7a7302     .Sx...y...y..sz.
  431d98:	bf7b14be bf7baccd bf7c3b28 bf7cbfc9     ..{...{.(;|...|.
  431da8:	bf7d3aac bf7dabcc bf7e1323 bf7e70b0     .:}...}.#.~..p~.
  431db8:	bf7ec46d bf7f0e58 bf7f4e6d bf7f84ab     m.~.X...mN......
  431dc8:	bf7fb10f bf7fd397 bf7fec43 bf7ffb11     ........C.......
  431dd8:	bf800000 bf7ffb11 bf7fec43 bf7fd397     ........C.......
  431de8:	bf7fb10f bf7f84ab bf7f4e6d bf7f0e58     ........mN..X...
  431df8:	bf7ec46d bf7e70b0 bf7e1323 bf7dabcc     m.~..p~.#.~...}.
  431e08:	bf7d3aac bf7cbfc9 bf7c3b28 bf7baccd     .:}...|.(;|...{.
  431e18:	bf7b14be bf7a7302 bf79c79d bf791298     ..{..sz...y...y.
  431e28:	bf7853f8 bf778bc5 bf76ba07 bf75dec6     .Sx...w...v...u.
  431e38:	bf74fa0b bf740bdd bf731447 bf721352     ..t...t.G.s.R.r.
  431e48:	bf710908 bf6ff573 bf6ed89e bf6db293     ..q.s.o...n...m.
  431e58:	bf6c835e bf6b4b0c bf6a09a7 bf68bf3c     ^.l..Kk...j.<.h.
  431e68:	bf676bd8 bf660f88 bf64aa59 bf633c5a     .kg...f.Y.d.Z<c.
  431e78:	bf61c597 bf604621 bf5ebe05 bf5d2d53     ..a.!F`...^.S-].
  431e88:	bf5b941a bf59f26a bf584853 bf5695e5     ..[.j.Y.SHX...V.
  431e98:	bf54db31 bf531849 bf514d3d bf4f7a20     1.T.I.S.=MQ. zO.
  431ea8:	bf4d9f02 bf4bbbf8 bf49d112 bf47de65     ..M...K...I.e.G.
  431eb8:	bf45e403 bf43e201 bf41d870 bf3fc767     ..E...C.p.A.g.?.
  431ec8:	bf3daef9 bf3b8f3b bf396842 bf373a23     ..=.;.;.Bh9.#:7.
  431ed8:	bf3504f3 bf32c8c9 bf3085bb bf2e3bde     ..5...2...0..;..
  431ee8:	bf2beb4a bf299415 bf273656 bf24d225     J.+...).V6'.%.$.
  431ef8:	bf226799 bf1ff6cb bf1d7fd1 bf1b02c6     .g".............
  431f08:	bf187fc0 bf15f6d9 bf13682a bf10d3cd     ........*h......
  431f18:	bf0e39da bf0b9a6b bf08f59b bf064b82     .9..k........K..
  431f28:	bf039c3d bf00e7e4 befc5d27 bef6e0cb     =.......']......
  431f38:	bef15aea beebcbbb bee63375 bee0924f     .Z......u3..O...
  431f48:	bedae880 bed53641 becf7bca bec9b953     ....A6...{..S...
  431f58:	bec3ef15 bebe1d49 beb8442a beb263ef     ....I...*D...c..
  431f68:	beac7cd4 bea68f12 bea09ae5 be9aa086     .|..............
  431f78:	be94a032 be8e9a22 be888e93 be827dc0     2..."........}..
  431f88:	be78cfcc be6c9a7f be605c13 be541501     ..x...l..\`...T.
  431f98:	be47c5c2 be3b6ecf be2f10a2 be22abb5     ..G..n;.../...".
  431fa8:	be164083 be09cf87 bdfab273 bde1bc2f     .@......s.../...
  431fb8:	bdc8bd36 bdafb680 bd96a904 bd7b2b75     6...........u+{.
  431fc8:	bd48fb2e bd16c32b bcc90ab1 bc490e92     ..H.+.........I.
  431fd8:	80000000                                ....

00431fdc <_global_impure_ptr>:
  431fdc:	20400100 33323130 37363534 42413938     ..@ 0123456789AB
  431fec:	46454443 00000000 33323130 37363534     CDEF....01234567
  431ffc:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  43200c:	0000296c                                l)..

00432010 <blanks.7217>:
  432010:	20202020 20202020 20202020 20202020                     

00432020 <zeroes.7218>:
  432020:	30303030 30303030 30303030 30303030     0000000000000000
  432030:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00432040 <_ctype_>:
  432040:	20202000 20202020 28282020 20282828     .         ((((( 
  432050:	20202020 20202020 20202020 20202020                     
  432060:	10108820 10101010 10101010 10101010      ...............
  432070:	04040410 04040404 10040404 10101010     ................
  432080:	41411010 41414141 01010101 01010101     ..AAAAAA........
  432090:	01010101 01010101 01010101 10101010     ................
  4320a0:	42421010 42424242 02020202 02020202     ..BBBBBB........
  4320b0:	02020202 02020202 02020202 10101010     ................
  4320c0:	00000020 00000000 00000000 00000000      ...............
	...

00432144 <_init>:
  432144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  432146:	bf00      	nop
  432148:	bcf8      	pop	{r3, r4, r5, r6, r7}
  43214a:	bc08      	pop	{r3}
  43214c:	469e      	mov	lr, r3
  43214e:	4770      	bx	lr

00432150 <__init_array_start>:
  432150:	0042955d 	.word	0x0042955d

00432154 <__frame_dummy_init_array_entry>:
  432154:	0040018d                                ..@.

00432158 <_fini>:
  432158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  43215a:	bf00      	nop
  43215c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  43215e:	bc08      	pop	{r3}
  432160:	469e      	mov	lr, r3
  432162:	4770      	bx	lr

00432164 <__fini_array_start>:
  432164:	00400169 	.word	0x00400169

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <dseg30>:
2040000c:	4c61 0041 4b55 0041 001f 0000 fc00 0002     aLA.UKA.........
2040001c:	0020 2040                                    .@ 

20400020 <font_dsc>:
20400020:	a900 0042 aba0 0042 a8ec 0042 0000 0000     ..B...B...B.....
20400030:	0000 0201 0000 0000 0000 0000               ............

2040003c <dseg70>:
2040003c:	4c61 0041 4b55 0041 0046 0000 f700 0004     aLA.UKA.F.......
2040004c:	0050 2040                                   P.@ 

20400050 <font_dsc>:
20400050:	ac34 0042 b9dc 0042 ac20 0042 0000 0000     4.B...B. .B.....
20400060:	0000 0201 0000 0000 0000 0000               ............

2040006c <uxCriticalNesting>:
2040006c:	aaaa aaaa                                   ....

20400070 <font_dsc>:
20400070:	cdb8 0042 c8e0 0042 c8b8 0042 fb04 0042     ..B...B...B...B.
20400080:	0010 2802 0000 0000 0000 0000               ...(........

2040008c <lv_font_montserrat_14>:
2040008c:	4c61 0041 4b55 0041 0010 0003 ff00 0001     aLA.UKA.........
2040009c:	0070 2040                                   p.@ 

204000a0 <mem_buf_small>:
204000a0:	c7ec 2040 0010 0000 c7fc 2040 0010 0000     ..@ ......@ ....

204000b0 <_lv_txt_encoded_get_byte_id>:
204000b0:	7be1 0041                                   .{A.

204000b4 <_lv_txt_encoded_get_char_id>:
204000b4:	7c0d 0041                                   .|A.

204000b8 <_lv_txt_encoded_next>:
204000b8:	7a89 0041                                   .zA.

204000bc <_lv_txt_encoded_prev>:
204000bc:	7b89 0041                                   .{A.

204000c0 <_lv_txt_encoded_size>:
204000c0:	7a55 0041                                   UzA.

204000c4 <_lv_txt_get_encoded_length>:
204000c4:	7c39 0041                                   9|A.

204000c8 <lv_btnmatrix_def_map>:
204000c8:	fe58 0042 fe60 0042 fe68 0042 fe44 0042     X.B.`.B.h.B.D.B.
204000d8:	fe70 0042 fe78 0042 1730 0043               p.B.x.B.0.C.

204000e4 <g_interrupt_enabled>:
204000e4:	0001 0000                                   ....

204000e8 <SystemCoreClock>:
204000e8:	0900 003d                                   ..=.

204000ec <btns.21734>:
204000ec:	1760 0043 1730 0043                         `.C.0.C.

204000f4 <btns2.21680>:
204000f4:	175c 0043 1730 0043                         \.C.0.C.

204000fc <_impure_ptr>:
204000fc:	0100 2040                                   ..@ 

20400100 <impure_data>:
20400100:	0000 0000 03ec 2040 0454 2040 04bc 2040     ......@ T.@ ..@ 
	...
204001a8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204001b8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400528 <__malloc_av_>:
	...
20400530:	0528 2040 0528 2040 0530 2040 0530 2040     (.@ (.@ 0.@ 0.@ 
20400540:	0538 2040 0538 2040 0540 2040 0540 2040     8.@ 8.@ @.@ @.@ 
20400550:	0548 2040 0548 2040 0550 2040 0550 2040     H.@ H.@ P.@ P.@ 
20400560:	0558 2040 0558 2040 0560 2040 0560 2040     X.@ X.@ `.@ `.@ 
20400570:	0568 2040 0568 2040 0570 2040 0570 2040     h.@ h.@ p.@ p.@ 
20400580:	0578 2040 0578 2040 0580 2040 0580 2040     x.@ x.@ ..@ ..@ 
20400590:	0588 2040 0588 2040 0590 2040 0590 2040     ..@ ..@ ..@ ..@ 
204005a0:	0598 2040 0598 2040 05a0 2040 05a0 2040     ..@ ..@ ..@ ..@ 
204005b0:	05a8 2040 05a8 2040 05b0 2040 05b0 2040     ..@ ..@ ..@ ..@ 
204005c0:	05b8 2040 05b8 2040 05c0 2040 05c0 2040     ..@ ..@ ..@ ..@ 
204005d0:	05c8 2040 05c8 2040 05d0 2040 05d0 2040     ..@ ..@ ..@ ..@ 
204005e0:	05d8 2040 05d8 2040 05e0 2040 05e0 2040     ..@ ..@ ..@ ..@ 
204005f0:	05e8 2040 05e8 2040 05f0 2040 05f0 2040     ..@ ..@ ..@ ..@ 
20400600:	05f8 2040 05f8 2040 0600 2040 0600 2040     ..@ ..@ ..@ ..@ 
20400610:	0608 2040 0608 2040 0610 2040 0610 2040     ..@ ..@ ..@ ..@ 
20400620:	0618 2040 0618 2040 0620 2040 0620 2040     ..@ ..@  .@  .@ 
20400630:	0628 2040 0628 2040 0630 2040 0630 2040     (.@ (.@ 0.@ 0.@ 
20400640:	0638 2040 0638 2040 0640 2040 0640 2040     8.@ 8.@ @.@ @.@ 
20400650:	0648 2040 0648 2040 0650 2040 0650 2040     H.@ H.@ P.@ P.@ 
20400660:	0658 2040 0658 2040 0660 2040 0660 2040     X.@ X.@ `.@ `.@ 
20400670:	0668 2040 0668 2040 0670 2040 0670 2040     h.@ h.@ p.@ p.@ 
20400680:	0678 2040 0678 2040 0680 2040 0680 2040     x.@ x.@ ..@ ..@ 
20400690:	0688 2040 0688 2040 0690 2040 0690 2040     ..@ ..@ ..@ ..@ 
204006a0:	0698 2040 0698 2040 06a0 2040 06a0 2040     ..@ ..@ ..@ ..@ 
204006b0:	06a8 2040 06a8 2040 06b0 2040 06b0 2040     ..@ ..@ ..@ ..@ 
204006c0:	06b8 2040 06b8 2040 06c0 2040 06c0 2040     ..@ ..@ ..@ ..@ 
204006d0:	06c8 2040 06c8 2040 06d0 2040 06d0 2040     ..@ ..@ ..@ ..@ 
204006e0:	06d8 2040 06d8 2040 06e0 2040 06e0 2040     ..@ ..@ ..@ ..@ 
204006f0:	06e8 2040 06e8 2040 06f0 2040 06f0 2040     ..@ ..@ ..@ ..@ 
20400700:	06f8 2040 06f8 2040 0700 2040 0700 2040     ..@ ..@ ..@ ..@ 
20400710:	0708 2040 0708 2040 0710 2040 0710 2040     ..@ ..@ ..@ ..@ 
20400720:	0718 2040 0718 2040 0720 2040 0720 2040     ..@ ..@  .@  .@ 
20400730:	0728 2040 0728 2040 0730 2040 0730 2040     (.@ (.@ 0.@ 0.@ 
20400740:	0738 2040 0738 2040 0740 2040 0740 2040     8.@ 8.@ @.@ @.@ 
20400750:	0748 2040 0748 2040 0750 2040 0750 2040     H.@ H.@ P.@ P.@ 
20400760:	0758 2040 0758 2040 0760 2040 0760 2040     X.@ X.@ `.@ `.@ 
20400770:	0768 2040 0768 2040 0770 2040 0770 2040     h.@ h.@ p.@ p.@ 
20400780:	0778 2040 0778 2040 0780 2040 0780 2040     x.@ x.@ ..@ ..@ 
20400790:	0788 2040 0788 2040 0790 2040 0790 2040     ..@ ..@ ..@ ..@ 
204007a0:	0798 2040 0798 2040 07a0 2040 07a0 2040     ..@ ..@ ..@ ..@ 
204007b0:	07a8 2040 07a8 2040 07b0 2040 07b0 2040     ..@ ..@ ..@ ..@ 
204007c0:	07b8 2040 07b8 2040 07c0 2040 07c0 2040     ..@ ..@ ..@ ..@ 
204007d0:	07c8 2040 07c8 2040 07d0 2040 07d0 2040     ..@ ..@ ..@ ..@ 
204007e0:	07d8 2040 07d8 2040 07e0 2040 07e0 2040     ..@ ..@ ..@ ..@ 
204007f0:	07e8 2040 07e8 2040 07f0 2040 07f0 2040     ..@ ..@ ..@ ..@ 
20400800:	07f8 2040 07f8 2040 0800 2040 0800 2040     ..@ ..@ ..@ ..@ 
20400810:	0808 2040 0808 2040 0810 2040 0810 2040     ..@ ..@ ..@ ..@ 
20400820:	0818 2040 0818 2040 0820 2040 0820 2040     ..@ ..@  .@  .@ 
20400830:	0828 2040 0828 2040 0830 2040 0830 2040     (.@ (.@ 0.@ 0.@ 
20400840:	0838 2040 0838 2040 0840 2040 0840 2040     8.@ 8.@ @.@ @.@ 
20400850:	0848 2040 0848 2040 0850 2040 0850 2040     H.@ H.@ P.@ P.@ 
20400860:	0858 2040 0858 2040 0860 2040 0860 2040     X.@ X.@ `.@ `.@ 
20400870:	0868 2040 0868 2040 0870 2040 0870 2040     h.@ h.@ p.@ p.@ 
20400880:	0878 2040 0878 2040 0880 2040 0880 2040     x.@ x.@ ..@ ..@ 
20400890:	0888 2040 0888 2040 0890 2040 0890 2040     ..@ ..@ ..@ ..@ 
204008a0:	0898 2040 0898 2040 08a0 2040 08a0 2040     ..@ ..@ ..@ ..@ 
204008b0:	08a8 2040 08a8 2040 08b0 2040 08b0 2040     ..@ ..@ ..@ ..@ 
204008c0:	08b8 2040 08b8 2040 08c0 2040 08c0 2040     ..@ ..@ ..@ ..@ 
204008d0:	08c8 2040 08c8 2040 08d0 2040 08d0 2040     ..@ ..@ ..@ ..@ 
204008e0:	08d8 2040 08d8 2040 08e0 2040 08e0 2040     ..@ ..@ ..@ ..@ 
204008f0:	08e8 2040 08e8 2040 08f0 2040 08f0 2040     ..@ ..@ ..@ ..@ 
20400900:	08f8 2040 08f8 2040 0900 2040 0900 2040     ..@ ..@ ..@ ..@ 
20400910:	0908 2040 0908 2040 0910 2040 0910 2040     ..@ ..@ ..@ ..@ 
20400920:	0918 2040 0918 2040 0920 2040 0920 2040     ..@ ..@  .@  .@ 

20400930 <__malloc_sbrk_base>:
20400930:	ffff ffff                                   ....

20400934 <__malloc_trim_threshold>:
20400934:	0000 0002                                   ....

20400938 <__atexit_recursive_mutex>:
20400938:	a81c 2043                                   ..C 

2040093c <__global_locale>:
2040093c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040095c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040097c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040099c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204009bc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204009dc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204009fc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400a1c:	a651 0042 9fe5 0042 0000 0000 2040 0043     Q.B...B.....@ C.
20400a2c:	203c 0043 1730 0043 1730 0043 1730 0043     < C.0.C.0.C.0.C.
20400a3c:	1730 0043 1730 0043 1730 0043 1730 0043     0.C.0.C.0.C.0.C.
20400a4c:	1730 0043 1730 0043 ffff ffff ffff ffff     0.C.0.C.........
20400a5c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
20400a84:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
